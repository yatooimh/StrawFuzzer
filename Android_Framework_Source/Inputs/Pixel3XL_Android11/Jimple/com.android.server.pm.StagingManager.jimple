public class com.android.server.pm.StagingManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final com.android.server.pm.ApexManager mApexManager;
    private final android.content.Context mContext;
    private final java.util.List mFailedPackageNames;
    private java.lang.String mFailureReason;
    private final java.io.File mFailureReasonFile;
    private java.lang.String mNativeFailureReason;
    private final java.util.function.Supplier mPackageParserSupplier;
    private final com.android.server.pm.PackageInstallerService mPi;
    private final android.os.PowerManager mPowerManager;
    private final com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler;
    private final android.util.SparseIntArray mSessionRollbackIds;
    private final android.util.SparseArray mStagedSessions;
    private final java.util.List mSuccessfulStagedSessionIds;

    void <init>(com.android.server.pm.PackageInstallerService, android.content.Context, java.util.function.Supplier)
    {
        com.android.server.pm.StagingManager r0;
        java.util.function.Supplier r1;
        java.io.File $r2, $r13, $r14;
        android.util.SparseArray $r3;
        android.util.SparseIntArray $r4;
        java.util.ArrayList $r5, $r6;
        com.android.server.pm.ApexManager $r7;
        java.lang.Object $r8;
        android.os.PowerManager $r9;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r10;
        com.android.internal.os.BackgroundThread $r11;
        android.os.Looper $r12;
        boolean $z0;
        java.lang.String $r15;
        java.lang.Throwable $r16, $r17;
        java.lang.Exception $r18;
        com.android.server.pm.PackageInstallerService r19;
        android.content.Context r20;
        java.io.BufferedReader r21;
        java.io.FileReader r22;

        r0 := @this: com.android.server.pm.StagingManager;

        r19 := @parameter0: com.android.server.pm.PackageInstallerService;

        r20 := @parameter1: android.content.Context;

        r1 := @parameter2: java.util.function.Supplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/metadata/staged-install/failure_reason.txt");

        r0.<com.android.server.pm.StagingManager: java.io.File mFailureReasonFile> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.StagingManager: android.util.SparseIntArray mSessionRollbackIds> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.StagingManager: java.util.List mFailedPackageNames> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.StagingManager: java.util.List mSuccessfulStagedSessionIds> = $r6;

        r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerService mPi> = r19;

        r0.<com.android.server.pm.StagingManager: android.content.Context mContext> = r20;

        r0.<com.android.server.pm.StagingManager: java.util.function.Supplier mPackageParserSupplier> = r1;

        $r7 = staticinvoke <com.android.server.pm.ApexManager: com.android.server.pm.ApexManager getInstance()>();

        r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager> = $r7;

        $r8 = virtualinvoke r20.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        r0.<com.android.server.pm.StagingManager: android.os.PowerManager mPowerManager> = $r9;

        $r10 = new com.android.server.pm.StagingManager$PreRebootVerificationHandler;

        $r11 = staticinvoke <com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()>();

        $r12 = virtualinvoke $r11.<com.android.internal.os.BackgroundThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<com.android.server.pm.StagingManager$PreRebootVerificationHandler: void <init>(com.android.server.pm.StagingManager,android.os.Looper)>(r0, $r12);

        r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler> = $r10;

        $r13 = r0.<com.android.server.pm.StagingManager: java.io.File mFailureReasonFile>;

        $z0 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label12;

     label01:
        r21 = new java.io.BufferedReader;

        r22 = new java.io.FileReader;

        $r14 = r0.<com.android.server.pm.StagingManager: java.io.File mFailureReasonFile>;

        specialinvoke r22.<java.io.FileReader: void <init>(java.io.File)>($r14);

        specialinvoke r21.<java.io.BufferedReader: void <init>(java.io.Reader)>(r22);

     label02:
        $r15 = virtualinvoke r21.<java.io.BufferedReader: java.lang.String readLine()>();

        r0.<com.android.server.pm.StagingManager: java.lang.String mFailureReason> = $r15;

     label03:
        virtualinvoke r21.<java.io.BufferedReader: void close()>();

     label04:
        goto label12;

     label05:
        $r17 := @caughtexception;

     label06:
        virtualinvoke r21.<java.io.BufferedReader: void close()>();

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

     label09:
        virtualinvoke $r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

     label10:
        throw $r17;

     label11:
        $r18 := @caughtexception;

     label12:
        return;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label10 to label11 with label11;
    }

    private void abortCheckpoint(int, java.lang.String)
    {
        com.android.server.pm.StagingManager r0;
        int i0;
        java.lang.String r1, r18;
        boolean z0, $z1, $z2, $z4;
        java.lang.StringBuilder $r2;
        java.io.File $r7;
        com.android.server.pm.ApexManager $r8, $r10, $r15, $r17;
        android.os.storage.IStorageManager $r9;
        java.lang.Throwable $r11, $r12;
        java.lang.Exception $r13, $r14;
        android.os.PowerManager $r16;
        java.io.BufferedWriter r20;
        java.io.FileWriter r21;

        r0 := @this: com.android.server.pm.StagingManager;

        i0 := @parameter0: int;

        r18 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install sessionId: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Error: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", r1);

     label01:
        $z1 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean supportsCheckpoint()>();

        if $z1 == 0 goto label17;

        z0 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean needsCheckpoint()>();

     label02:
        if z0 == 0 goto label17;

     label03:
        r20 = new java.io.BufferedWriter;

        r21 = new java.io.FileWriter;

        $r7 = r0.<com.android.server.pm.StagingManager: java.io.File mFailureReasonFile>;

        specialinvoke r21.<java.io.FileWriter: void <init>(java.io.File)>($r7);

        specialinvoke r20.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r21);

     label04:
        virtualinvoke r20.<java.io.BufferedWriter: void write(java.lang.String)>(r1);

     label05:
        virtualinvoke r20.<java.io.BufferedWriter: void close()>();

     label06:
        goto label15;

     label07:
        $r12 := @caughtexception;

     label08:
        virtualinvoke r20.<java.io.BufferedWriter: void close()>();

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

     label11:
        virtualinvoke $r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label12:
        throw $r12;

     label13:
        $r13 := @caughtexception;

     label14:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("StagingManager", "Failed to save failure reason: ", $r13);

     label15:
        $r8 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $z2 = virtualinvoke $r8.<com.android.server.pm.ApexManager: boolean isApexSupported()>();

        if $z2 == 0 goto label16;

        $r10 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        virtualinvoke $r10.<com.android.server.pm.ApexManager: boolean revertActiveSessions()>();

     label16:
        $r9 = staticinvoke <com.android.internal.content.PackageHelper: android.os.storage.IStorageManager getStorageManager()>();

        interfaceinvoke $r9.<android.os.storage.IStorageManager: void abortChanges(java.lang.String,boolean)>("StagingManager initiated", 0);

     label17:
        goto label20;

     label18:
        $r14 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("StagingManager", "Failed to abort checkpoint", $r14);

        $r15 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $z4 = virtualinvoke $r15.<com.android.server.pm.ApexManager: boolean isApexSupported()>();

        if $z4 == 0 goto label19;

        $r17 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        virtualinvoke $r17.<com.android.server.pm.ApexManager: boolean revertActiveSessions()>();

     label19:
        $r16 = r0.<com.android.server.pm.StagingManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r16.<android.os.PowerManager: void reboot(java.lang.String)>(null);

     label20:
        return;

        catch java.lang.Exception from label01 to label02 with label18;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label12 to label13 with label13;
        catch java.lang.Exception from label14 to label15 with label18;
        catch java.lang.Exception from label15 to label16 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    static boolean access$1000(com.android.server.pm.StagingManager, com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        r1 := @parameter1: com.android.server.pm.PackageInstallerSession;

        $z0 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContainsApex(com.android.server.pm.PackageInstallerSession)>(r1);

        return $z0;
    }

    static java.util.List access$1100(com.android.server.pm.StagingManager, com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        java.util.List $r2;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        r1 := @parameter1: com.android.server.pm.PackageInstallerSession;

        $r2 = specialinvoke r0.<com.android.server.pm.StagingManager: java.util.List submitSessionToApexService(com.android.server.pm.PackageInstallerSession)>(r1);

        return $r2;
    }

    static void access$1200(com.android.server.pm.StagingManager, android.content.pm.PackageInfo) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        android.content.pm.PackageInfo r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        r1 := @parameter1: android.content.pm.PackageInfo;

        specialinvoke r0.<com.android.server.pm.StagingManager: void validateApexSignature(android.content.pm.PackageInfo)>(r1);

        return;
    }

    static boolean access$1300(com.android.server.pm.StagingManager, com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        r1 := @parameter1: com.android.server.pm.PackageInstallerSession;

        $z0 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContainsApk(com.android.server.pm.PackageInstallerSession)>(r1);

        return $z0;
    }

    static void access$1400(com.android.server.pm.StagingManager, com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        r1 := @parameter1: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.StagingManager: void verifyApksInSession(com.android.server.pm.PackageInstallerSession)>(r1);

        return;
    }

    static com.android.server.pm.ApexManager access$1500(com.android.server.pm.StagingManager)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.ApexManager $r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        $r1 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        return $r1;
    }

    static com.android.server.pm.StagingManager$PreRebootVerificationHandler access$300(com.android.server.pm.StagingManager)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        $r1 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        return $r1;
    }

    static void access$500(com.android.server.pm.StagingManager)
    {
        com.android.server.pm.StagingManager r0;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        specialinvoke r0.<com.android.server.pm.StagingManager: void logFailedApexSessionsIfNecessary()>();

        return;
    }

    static com.android.server.pm.PackageInstallerSession access$700(com.android.server.pm.StagingManager, int)
    {
        com.android.server.pm.StagingManager r0;
        int i0;
        com.android.server.pm.PackageInstallerSession $r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession getStagedSession(int)>(i0);

        return $r1;
    }

    static android.util.SparseArray access$800(com.android.server.pm.StagingManager)
    {
        com.android.server.pm.StagingManager r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        $r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        return $r1;
    }

    static android.util.SparseIntArray access$900(com.android.server.pm.StagingManager)
    {
        com.android.server.pm.StagingManager r0;
        android.util.SparseIntArray $r1;

        r0 := @parameter0: com.android.server.pm.StagingManager;

        $r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseIntArray mSessionRollbackIds>;

        return $r1;
    }

    private void checkDowngrade(com.android.server.pm.PackageInstallerSession, android.content.pm.PackageInfo, android.content.pm.PackageInfo) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        android.content.pm.PackageInfo r1, r22;
        long l0, l1;
        android.content.pm.ApplicationInfo $r2, $r3, $r4;
        int $i2, $i3, $i4, $i6, $i7;
        android.content.pm.PackageInstaller$SessionParams $r5;
        byte $b5;
        com.android.server.pm.ApexManager $r6;
        boolean $z0, z1, z2;
        java.lang.StringBuilder $r7, $r17;
        java.lang.String $r9, $r16, $r20;
        com.android.server.pm.PackageManagerException $r15;
        com.android.server.pm.PackageInstallerSession r21;

        r0 := @this: com.android.server.pm.StagingManager;

        r21 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r22 := @parameter1: android.content.pm.PackageInfo;

        r1 := @parameter2: android.content.pm.PackageInfo;

        $r2 = r22.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        l0 = $r2.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r3 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        l1 = $r3.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r4 = r22.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r4.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r5 = r21.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i4 = $r5.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        z2 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isDowngradePermitted(int,boolean)>($i4, z1);

        $b5 = l0 cmp l1;

        if $b5 <= 0 goto label4;

        if z2 != 0 goto label4;

        $r6 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i6 = r21.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $z0 = virtualinvoke $r6.<com.android.server.pm.ApexManager: boolean abortStagedSession(int)>($i6);

        if $z0 != 0 goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to abort apex session ");

        $i7 = r21.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r20);

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Downgrade of APEX package ");

        $r9 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed. Active version: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempted: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r15 = new com.android.server.pm.PackageManagerException;

        $r16 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r16);

        throw $r15;

     label4:
        return;
    }

    private void checkInstallationOfApkInApexSuccessful(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        com.android.server.pm.PackageInstallerSession $r2, r9;
        com.android.server.pm.ApexManager $r3;
        java.lang.StringBuilder $r4;
        com.android.server.pm.PackageManagerException $r7;
        java.lang.String $r8, r12;
        java.util.List r10;
        java.util.Iterator r11;

        r0 := @this: com.android.server.pm.StagingManager;

        r9 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r10 = specialinvoke r0.<com.android.server.pm.StagingManager: java.util.List extractApexSessions(com.android.server.pm.PackageInstallerSession)>(r9);

        $z0 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r1 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (com.android.server.pm.PackageInstallerSession) $r1;

        r12 = virtualinvoke $r2.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        $r3 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $z2 = virtualinvoke $r3.<com.android.server.pm.ApexManager: boolean isApkInApexInstallSuccess(java.lang.String)>(r12);

        if $z2 == 0 goto label3;

        goto label2;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install apk-in-apex of ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r7 = new com.android.server.pm.PackageManagerException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(2, $r8);

        throw $r7;

     label4:
        return;
    }

    private void checkRequiredVersionCode(com.android.server.pm.PackageInstallerSession, android.content.pm.PackageInfo) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        android.content.pm.PackageInfo r2;
        long l0, $l1, $l3, $l6;
        android.content.pm.PackageInstaller$SessionParams $r3, $r5, $r14;
        byte $b2, $b4;
        android.content.pm.ApplicationInfo $r4;
        int $i5, $i7;
        com.android.server.pm.ApexManager $r6;
        boolean $z0;
        java.lang.StringBuilder $r7, $r18;
        java.lang.String $r9, $r17, $r21;
        com.android.server.pm.PackageManagerException $r16;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r2 := @parameter1: android.content.pm.PackageInfo;

        $r3 = r1.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l1 = $r3.<android.content.pm.PackageInstaller$SessionParams: long requiredInstalledVersionCode>;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        return;

     label1:
        $r4 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        l0 = $r4.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r5 = r1.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l3 = $r5.<android.content.pm.PackageInstaller$SessionParams: long requiredInstalledVersionCode>;

        $b4 = l0 cmp $l3;

        if $b4 == 0 goto label3;

        $r6 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i5 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $z0 = virtualinvoke $r6.<com.android.server.pm.ApexManager: boolean abortStagedSession(int)>($i5);

        if $z0 != 0 goto label2;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to abort apex session ");

        $i7 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r21);

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installed version of APEX package ");

        $r9 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match required. Active version: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" required: ");

        $r14 = r1.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l6 = $r14.<android.content.pm.PackageInstaller$SessionParams: long requiredInstalledVersionCode>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r16 = new com.android.server.pm.PackageManagerException;

        $r17 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r17);

        throw $r16;

     label3:
        return;
    }

    private void checkStateAndResume(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r2;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("sys.boot_completed", 0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: boolean isCommitted()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $z2 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: boolean isStagedSessionFailed()>();

        if $z2 != 0 goto label7;

        $z3 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: boolean isStagedSessionApplied()>();

        if $z3 == 0 goto label3;

        goto label7;

     label3:
        $z4 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z4 == 0 goto label4;

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void abandon()>();

        return;

     label4:
        $z5 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: boolean isStagedSessionReady()>();

        if $z5 != 0 goto label5;

        $r2 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        $i0 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.server.pm.StagingManager$PreRebootVerificationHandler: void access$000(com.android.server.pm.StagingManager$PreRebootVerificationHandler,int)>($r2, $i0);

        goto label6;

     label5:
        specialinvoke r0.<com.android.server.pm.StagingManager: void resumeSession(com.android.server.pm.PackageInstallerSession)>(r1);

     label6:
        return;

     label7:
        return;
    }

    private com.android.server.pm.PackageInstallerSession createAndWriteApkSession(com.android.server.pm.PackageInstallerSession, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1, r2;
        boolean z0, $z1;
        android.os.ParcelFileDescriptor r3;
        java.io.File $r4, $r6, $r9, $r15, r41;
        com.android.server.pm.PackageManagerException $r5, $r18, $r37, r43;
        java.lang.StringBuilder $r7, $r13, $r33, r42, r44;
        java.lang.String $r10, $r12, $r16, $r19, $r22, $r27, $r30, $r31, $r36, r40;
        android.content.pm.PackageInstaller$SessionParams $r20, r39;
        int $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, i15, i16, i17;
        com.android.server.pm.PackageInstallerService $r21, $r23;
        java.lang.Object $r24;
        byte $b6, b14;
        java.lang.Throwable $r32;
        java.util.List r38;
        long l18;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        b14 = 1;

        goto label02;

     label01:
        b14 = 2;

     label02:
        $r4 = r1.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r4 == null goto label17;

        $r6 = r1.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        r38 = specialinvoke r0.<com.android.server.pm.StagingManager: java.util.List findAPKsInDir(java.io.File)>($r6);

        $z1 = interfaceinvoke r38.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label16;

        $r20 = r1.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        r39 = virtualinvoke $r20.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.PackageInstaller$SessionParams copy()>();

        r39.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged> = 0;

        $i2 = r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i3 = $i2 | 2097152;

        r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i3;

        if z0 == 0 goto label03;

        $i8 = r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i9 = $i8 & -262145;

        r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i9;

        $i10 = r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i11 = $i10 | 8388608;

        r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i11;

        goto label04;

     label03:
        $i4 = r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i5 = $i4 | 524288;

        r39.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i5;

     label04:
        $r21 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerService mPi>;

        $r22 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: java.lang.String getInstallerPackageName()>();

        i15 = virtualinvoke $r21.<com.android.server.pm.PackageInstallerService: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>(r39, $r22, 0);

        $r23 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerService mPi>;

        r2 = virtualinvoke $r23.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerSession getSession(int)>(i15);

        virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: void open()>();

        i16 = interfaceinvoke r38.<java.util.List: int size()>();

     label05:
        i17 = 0;

     label06:
        if i17 >= i16 goto label14;

     label07:
        $r24 = interfaceinvoke r38.<java.util.List: java.lang.Object get(int)>(i17);

        r40 = (java.lang.String) $r24;

        r41 = new java.io.File;

        specialinvoke r41.<java.io.File: void <init>(java.lang.String)>(r40);

        r3 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r41, 268435456);

     label08:
        if r3 != null goto label09;

        l18 = -1L;

        goto label10;

     label09:
        l18 = virtualinvoke r3.<android.os.ParcelFileDescriptor: long getStatSize()>();

     label10:
        $b6 = l18 cmp 0L;

        if $b6 < 0 goto label13;

     label11:
        $r31 = virtualinvoke r41.<java.io.File: java.lang.String getName()>();

        virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: void write(java.lang.String,long,long,android.os.ParcelFileDescriptor)>($r31, 0L, l18, r3);

     label12:
        i17 = i17 + 1;

        goto label06;

     label13:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get size of: ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r27 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r27);

        r43 = new com.android.server.pm.PackageManagerException;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get size of: ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r30 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r43.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(b14, $r30);

        throw r43;

     label14:
        return r2;

     label15:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure to install APK staged session ");

        $i12 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StagingManager", $r36, $r32);

        $r37 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r37.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(b14, "Failed to create/write APK session", $r32);

        throw $r37;

     label16:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find staged APK in ");

        $r9 = r1.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find staged APK in ");

        $r15 = r1.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r16 = virtualinvoke $r15.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = new com.android.server.pm.PackageManagerException;

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(b14, $r19);

        throw $r18;

     label17:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("StagingManager", "Attempting to install a staged APK session with no staging dir");

        $r5 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r5.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(b14, "Attempting to install a staged APK session with no staging dir");

        throw $r5;

        catch java.io.IOException from label04 to label05 with label15;
        catch android.os.ParcelableException from label04 to label05 with label15;
        catch java.io.IOException from label07 to label08 with label15;
        catch android.os.ParcelableException from label07 to label08 with label15;
        catch java.io.IOException from label09 to label10 with label15;
        catch android.os.ParcelableException from label09 to label10 with label15;
        catch java.io.IOException from label11 to label12 with label15;
        catch android.os.ParcelableException from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label15;
        catch android.os.ParcelableException from label13 to label14 with label15;
    }

    private java.util.List extractApexSessions(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        android.util.SparseArray r3, $r8;
        int[] r4;
        int i0, i1, i2, i3, i4;
        java.util.ArrayList $r5, $r6;
        boolean $z0, $z2;
        java.lang.Object $r7, $r9;
        java.lang.Throwable $r10;
        com.android.server.pm.PackageInstallerSession r11, r12, r13;

        r0 := @this: com.android.server.pm.StagingManager;

        r11 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $z0 = virtualinvoke r11.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z0 == 0 goto label16;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r3;

     label01:
        r4 = virtualinvoke r11.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        i1 = lengthof r4;

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

        i0 = r4[i2];

     label04:
        $r8 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r12 = (com.android.server.pm.PackageInstallerSession) $r9;

     label05:
        if r12 == null goto label07;

     label06:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r12);

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        exitmonitor r3;

     label09:
        i3 = 0;

        i4 = interfaceinvoke $r6.<java.util.List: int size()>();

     label10:
        if i3 >= i4 goto label12;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        r13 = (com.android.server.pm.PackageInstallerSession) $r7;

        $z2 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContainsApex(com.android.server.pm.PackageInstallerSession)>(r13);

        if $z2 == 0 goto label11;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r13);

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        goto label17;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r3;

     label15:
        throw $r10;

     label16:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r11);

     label17:
        return $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private com.android.server.pm.PackageInstallerSession extractApksInSession(com.android.server.pm.PackageInstallerSession, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z6;
        int[] r1;
        int i0, $i1, $i2, $i3, $i5, $i6, i9, i10, i11, i12, i13;
        com.android.server.pm.PackageInstallerSession r2, $r9, $r12, r26, r30, r31;
        java.util.ArrayList $r3;
        android.content.pm.PackageInstaller$SessionParams $r4, r29;
        com.android.server.pm.PackageInstallerService $r5, $r7;
        java.lang.String $r6, $r18, $r24;
        java.lang.Object $r8, $r11;
        android.util.SparseArray $r10, r28;
        java.lang.Throwable $r13, $r19, $r20;
        java.lang.StringBuilder $r14, $r21;
        com.android.server.pm.PackageManagerException $r17, $r25;
        byte b8;

        r0 := @this: com.android.server.pm.StagingManager;

        r26 := @parameter0: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        b8 = 1;

        goto label02;

     label01:
        b8 = 2;

     label02:
        $z1 = virtualinvoke r26.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z1 != 0 goto label03;

        $z6 = staticinvoke <com.android.server.pm.StagingManager: boolean isApexSession(com.android.server.pm.PackageInstallerSession)>(r26);

        if $z6 != 0 goto label03;

        $r12 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession createAndWriteApkSession(com.android.server.pm.PackageInstallerSession,boolean)>(r26, z0);

        return $r12;

     label03:
        $z2 = virtualinvoke r26.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z2 == 0 goto label24;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r28 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r28;

     label04:
        r1 = virtualinvoke r26.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        i9 = lengthof r1;

     label05:
        i10 = 0;

     label06:
        if i10 >= i9 goto label09;

        i0 = r1[i10];

     label07:
        $r10 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.pm.PackageInstallerSession) $r11;

        $z4 = staticinvoke <com.android.server.pm.StagingManager: boolean isApexSession(com.android.server.pm.PackageInstallerSession)>(r2);

        if $z4 != 0 goto label08;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label08:
        i10 = i10 + 1;

        goto label06;

     label09:
        exitmonitor r28;

     label10:
        $z3 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label11;

        return null;

     label11:
        $r4 = r26.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        r29 = virtualinvoke $r4.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.PackageInstaller$SessionParams copy()>();

        r29.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged> = 0;

        if z0 == 0 goto label12;

        $i2 = r29.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i3 = $i2 & -262145;

        r29.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i3;

     label12:
        $r5 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerService mPi>;

        $r6 = virtualinvoke r26.<com.android.server.pm.PackageInstallerSession: java.lang.String getInstallerPackageName()>();

        i11 = virtualinvoke $r5.<com.android.server.pm.PackageInstallerService: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>(r29, $r6, 0);

        $r7 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerService mPi>;

        r30 = virtualinvoke $r7.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerSession getSession(int)>(i11);

     label13:
        virtualinvoke r30.<com.android.server.pm.PackageInstallerSession: void open()>();

     label14:
        i12 = 0;

        i13 = interfaceinvoke $r3.<java.util.List: int size()>();

     label15:
        if i12 >= i13 goto label19;

        $r8 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i12);

        $r9 = (com.android.server.pm.PackageInstallerSession) $r8;

        r31 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession createAndWriteApkSession(com.android.server.pm.PackageInstallerSession,boolean)>($r9, z0);

     label16:
        $i1 = r31.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r30.<com.android.server.pm.PackageInstallerSession: void addChildSessionId(int)>($i1);

     label17:
        i12 = i12 + 1;

        goto label15;

     label18:
        $r13 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StagingManager", "Failed to add a child session for installing the APK files", $r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add a child session ");

        $i5 = r31.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = new com.android.server.pm.PackageManagerException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(b8, $r18);

        throw $r17;

     label19:
        return r30;

     label20:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to prepare multi-package session for staged session ");

        $i6 = r26.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r24);

        $r25 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r25.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(b8, "Unable to prepare multi-package session for staged session");

        throw $r25;

     label21:
        $r19 := @caughtexception;

     label22:
        exitmonitor r28;

     label23:
        throw $r19;

     label24:
        return null;

        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.io.IOException from label13 to label14 with label20;
        catch java.lang.IllegalStateException from label16 to label17 with label18;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private java.util.List findAPKsInDir(java.io.File)
    {
        com.android.server.pm.StagingManager r0;
        int i0, i1;
        java.io.File r2, r7;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r5, $r6;
        java.io.File[] r8;

        r0 := @this: com.android.server.pm.StagingManager;

        r7 := @parameter0: java.io.File;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if r7 == null goto label3;

        $z0 = virtualinvoke r7.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        r8 = virtualinvoke r7.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r8;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r8[i1];

        $r4 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r3;
    }

    private com.android.server.pm.PackageInstallerSession getStagedSession(int)
    {
        com.android.server.pm.StagingManager r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.pm.PackageInstallerSession r5;

        r0 := @this: com.android.server.pm.StagingManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.pm.PackageInstallerSession) $r3;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void installApksInSession(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1, r18;
        android.content.pm.PackageInstaller$SessionParams $r3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i8;
        java.lang.StringBuilder $r4, $r14;
        java.lang.String $r10, $r17, r25;
        com.android.server.pm.PackageManagerException $r11;
        android.os.IBinder $r12;
        android.os.RemoteException $r13;
        android.content.rollback.IRollbackManager r19;
        com.android.server.pm.StagingManager$LocalIntentReceiverSync $r21;
        android.content.IntentSender $r23;
        android.content.Intent r24;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r18 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession extractApksInSession(com.android.server.pm.PackageInstallerSession,boolean)>(r1, 0);

        if r18 != null goto label1;

        return;

     label1:
        $r3 = r18.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i0 = $r3.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label5;

        $r12 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("rollback");

        r19 = staticinvoke <android.content.rollback.IRollbackManager$Stub: android.content.rollback.IRollbackManager asInterface(android.os.IBinder)>($r12);

     label2:
        $i5 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $i4 = r18.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        interfaceinvoke r19.<android.content.rollback.IRollbackManager: void notifyStagedApkSession(int,int)>($i5, $i4);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to notifyStagedApkSession for session: ");

        $i6 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StagingManager", $r17, $r13);

     label5:
        $r21 = new com.android.server.pm.StagingManager$LocalIntentReceiverSync;

        specialinvoke $r21.<com.android.server.pm.StagingManager$LocalIntentReceiverSync: void <init>(com.android.server.pm.StagingManager$1)>(null);

        $r23 = virtualinvoke $r21.<com.android.server.pm.StagingManager$LocalIntentReceiverSync: android.content.IntentSender getIntentSender()>();

        virtualinvoke r18.<com.android.server.pm.PackageInstallerSession: void commit(android.content.IntentSender,boolean)>($r23, 0);

        r24 = virtualinvoke $r21.<com.android.server.pm.StagingManager$LocalIntentReceiverSync: android.content.Intent getResult()>();

        $i8 = virtualinvoke r24.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.content.pm.extra.STATUS", 1);

        if $i8 != 0 goto label6;

        return;

     label6:
        r25 = virtualinvoke r24.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android.content.pm.extra.STATUS_MESSAGE");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure to install APK staged session ");

        $i2 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r10);

        $r11 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r11.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(2, r25);

        throw $r11;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private static boolean isApexSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i0 = $r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i1 = $i0 & 131072;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isApexSessionFailed(android.apex.ApexSessionInfo)
    {
        android.apex.ApexSessionInfo r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;

        r0 := @parameter0: android.apex.ApexSessionInfo;

        $z0 = r0.<android.apex.ApexSessionInfo: boolean isActivationFailed>;

        if $z0 != 0 goto label2;

        $z1 = r0.<android.apex.ApexSessionInfo: boolean isUnknown>;

        if $z1 != 0 goto label2;

        $z2 = r0.<android.apex.ApexSessionInfo: boolean isReverted>;

        if $z2 != 0 goto label2;

        $z3 = r0.<android.apex.ApexSessionInfo: boolean isRevertInProgress>;

        if $z3 != 0 goto label2;

        $z4 = r0.<android.apex.ApexSessionInfo: boolean isRevertFailed>;

        if $z4 == 0 goto label1;

        goto label2;

     label1:
        z5 = 0;

        goto label3;

     label2:
        z5 = 1;

     label3:
        return z5;
    }

    private boolean isApexSessionFinalized(android.apex.ApexSessionInfo)
    {
        com.android.server.pm.StagingManager r0;
        android.apex.ApexSessionInfo r1;
        boolean $z0, $z1, $z2, $z3, z4;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: android.apex.ApexSessionInfo;

        $z0 = r1.<android.apex.ApexSessionInfo: boolean isUnknown>;

        if $z0 != 0 goto label2;

        $z1 = r1.<android.apex.ApexSessionInfo: boolean isActivationFailed>;

        if $z1 != 0 goto label2;

        $z2 = r1.<android.apex.ApexSessionInfo: boolean isSuccess>;

        if $z2 != 0 goto label2;

        $z3 = r1.<android.apex.ApexSessionInfo: boolean isReverted>;

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        return z4;
    }

    private boolean isMultiPackageSessionComplete(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        int i0, i1, $i3, i4;
        boolean $z0, $z1, $z2;
        android.util.SparseArray $r1, $r3;
        java.lang.Object $r2, $r4;
        com.android.server.pm.PackageInstallerSession r5, r7;
        int[] r6;

        r0 := @this: com.android.server.pm.StagingManager;

        r5 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z0 == 0 goto label4;

        r6 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        i0 = lengthof r6;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        i1 = r6[i4];

        $r3 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        if $r4 != null goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        $z1 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z1 == 0 goto label6;

        $r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i3 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>();

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        r7 = (com.android.server.pm.PackageInstallerSession) $r2;

        if r7 != null goto label5;

        return 0;

     label5:
        $z2 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean isMultiPackageSessionComplete(com.android.server.pm.PackageInstallerSession)>(r7);

        return $z2;

     label6:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("StagingManager", "Attempting to restore an invalid multi-package session.");

        return 0;
    }

    static boolean lambda$sessionContainsApex$0(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = staticinvoke <com.android.server.pm.StagingManager: boolean isApexSession(com.android.server.pm.PackageInstallerSession)>(r0);

        return $z0;
    }

    static boolean lambda$sessionContainsApk$1(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = staticinvoke <com.android.server.pm.StagingManager: boolean isApexSession(com.android.server.pm.PackageInstallerSession)>(r0);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private void logFailedApexSessionsIfNecessary()
    {
        com.android.server.pm.StagingManager r0;
        java.util.List r1, $r3, $r5;
        boolean $z0;
        java.lang.String $r4;
        android.content.Context $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 = r0.<com.android.server.pm.StagingManager: java.util.List mFailedPackageNames>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.StagingManager: java.util.List mFailedPackageNames>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r6 = r0.<com.android.server.pm.StagingManager: android.content.Context mContext>;

        $r5 = r0.<com.android.server.pm.StagingManager: java.util.List mFailedPackageNames>;

        $r4 = r0.<com.android.server.pm.StagingManager: java.lang.String mNativeFailureReason>;

        staticinvoke <com.android.server.rollback.WatchdogRollbackLogger: void logApexdRevert(android.content.Context,java.util.List,java.lang.String)>($r6, $r5, $r4);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean needsCheckpoint() throws android.os.RemoteException
    {
        com.android.server.pm.StagingManager r0;
        android.os.storage.IStorageManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.StagingManager;

        $r1 = staticinvoke <com.android.internal.content.PackageHelper: android.os.storage.IStorageManager getStorageManager()>();

        $z0 = interfaceinvoke $r1.<android.os.storage.IStorageManager: boolean needsCheckpoint()>();

        return $z0;
    }

    private int parentOrOwnSessionId(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        boolean $z0;
        int i0;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>();

        goto label2;

     label1:
        i0 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

     label2:
        return i0;
    }

    private void prepareForLoggingApexdRevert(com.android.server.pm.PackageInstallerSession, java.lang.String)
    {
        com.android.server.pm.StagingManager r0;
        java.lang.String r1, $r3, $r5;
        java.util.List r2, $r4;
        java.lang.Throwable $r6;
        com.android.server.pm.PackageInstallerSession r7;

        r0 := @this: com.android.server.pm.StagingManager;

        r7 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.pm.StagingManager: java.util.List mFailedPackageNames>;

        entermonitor r2;

     label1:
        r0.<com.android.server.pm.StagingManager: java.lang.String mNativeFailureReason> = r1;

        $r3 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.pm.StagingManager: java.util.List mFailedPackageNames>;

        $r5 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void resumeSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        boolean z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13;
        java.lang.StringBuilder $r2, $r9, $r21, $r26, $r39, $r56, r66, r69, r74, r75;
        int $i0, $i2, $i4, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i21, $i22, $i23, $i26;
        java.lang.String $r5, $r8, $r13, $r20, $r25, $r28, $r33, $r36, $r43, $r45, $r46, $r51, $r52, $r59, r67, r68, r70, r73;
        com.android.server.pm.ApexManager $r14, $r38, $r48, $r53, $r61;
        java.util.List $r15, r77;
        java.lang.Integer $r16;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r44;
        android.os.RemoteException $r47, $r55;
        java.lang.Throwable $r49;
        com.android.server.pm.PackageManagerException $r50;
        android.os.PowerManager $r54, $r60;
        android.apex.ApexSessionInfo r63, r64;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resuming session ");

        $i0 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StagingManager", $r5);

        z0 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContainsApex(com.android.server.pm.PackageInstallerSession)>(r1);

        r63 = null;

        if z0 == 0 goto label02;

        $r38 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i16 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        r64 = virtualinvoke $r38.<com.android.server.pm.ApexManager: android.apex.ApexSessionInfo getStagedSessionInfo(int)>($i16);

        if r64 == null goto label01;

        $r45 = r64.<android.apex.ApexSessionInfo: java.lang.String crashingNativeProcess>;

        $z10 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r45);

        if $z10 != 0 goto label01;

        $r46 = r64.<android.apex.ApexSessionInfo: java.lang.String crashingNativeProcess>;

        specialinvoke r0.<com.android.server.pm.StagingManager: void prepareForLoggingApexdRevert(com.android.server.pm.PackageInstallerSession,java.lang.String)>(r1, $r46);

     label01:
        r63 = r64;

        if r64 == null goto label02;

        r63 = r64;

        $z9 = r64.<android.apex.ApexSessionInfo: boolean isVerified>;

        if $z9 == 0 goto label02;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found pending staged session ");

        $i17 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" still to be verified, resuming pre-reboot verification");

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StagingManager", $r43);

        $r44 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        $i19 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.server.pm.StagingManager$PreRebootVerificationHandler: void access$000(com.android.server.pm.StagingManager$PreRebootVerificationHandler,int)>($r44, $i19);

        return;

     label02:
        $z13 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean supportsCheckpoint()>();

        if $z13 == 0 goto label07;

        $z7 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean needsCheckpoint()>();

        if $z7 != 0 goto label07;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reverting back to safe state. Marking ");

        $i14 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as failed");

        r67 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        r68 = r67;

     label04:
        $r33 = r0.<com.android.server.pm.StagingManager: java.lang.String mFailureReason>;

        $z8 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r33);

        if $z8 != 0 goto label05;

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r36 = r0.<com.android.server.pm.StagingManager: java.lang.String mFailureReason>;

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        r68 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StagingManager", r68);

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(3, r68);

     label06:
        return;

     label07:
        if z0 == 0 goto label11;

        if r63 != null goto label08;

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(2, "apexd did not know anything about a staged session supposed to be activated");

        $i13 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        specialinvoke r0.<com.android.server.pm.StagingManager: void abortCheckpoint(int,java.lang.String)>($i13, "apexd did not know anything about a staged session supposed to be activated");

        return;

     label08:
        $z3 = staticinvoke <com.android.server.pm.StagingManager: boolean isApexSessionFailed(android.apex.ApexSessionInfo)>(r63);

        if $z3 == 0 goto label10;

        r70 = "APEX activation failed. Check logcat messages from apexd for more information.";

        $r25 = r0.<com.android.server.pm.StagingManager: java.lang.String mNativeFailureReason>;

        $z6 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r25);

        if $z6 != 0 goto label09;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session reverted due to crashing native process: ");

        $r28 = r0.<com.android.server.pm.StagingManager: java.lang.String mNativeFailureReason>;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r70 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(2, r70);

        $i12 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        specialinvoke r0.<com.android.server.pm.StagingManager: void abortCheckpoint(int,java.lang.String)>($i12, r70);

        return;

     label10:
        $z4 = r63.<android.apex.ApexSessionInfo: boolean isActivated>;

        if $z4 != 0 goto label11;

        $z5 = r63.<android.apex.ApexSessionInfo: boolean isSuccess>;

        if $z5 != 0 goto label11;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Staged session ");

        $i10 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at boot didn\'t activate nor fail. Marking it as failed anyway.");

        r73 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(2, r73);

        $i11 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        specialinvoke r0.<com.android.server.pm.StagingManager: void abortCheckpoint(int,java.lang.String)>($i11, r73);

        return;

     label11:
        if z0 == 0 goto label13;

     label12:
        specialinvoke r0.<com.android.server.pm.StagingManager: void checkInstallationOfApkInApexSuccessful(com.android.server.pm.PackageInstallerSession)>(r1);

        specialinvoke r0.<com.android.server.pm.StagingManager: void snapshotAndRestoreForApexSession(com.android.server.pm.PackageInstallerSession)>(r1);

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APEX packages in session ");

        $i8 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were successfully activated. Proceeding with APK packages, if any");

        $r20 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StagingManager", $r20);

     label13:
        r75 = new java.lang.StringBuilder;

        specialinvoke r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installing APK packages in session ");

        $i2 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StagingManager", $r8);

        specialinvoke r0.<com.android.server.pm.StagingManager: void installApksInSession(com.android.server.pm.PackageInstallerSession)>(r1);

     label14:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Marking session ");

        $i4 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as applied");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StagingManager", $r13);

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionApplied()>();

        if z0 == 0 goto label24;

     label15:
        $z1 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean supportsCheckpoint()>();

        if $z1 == 0 goto label21;

        r77 = r0.<com.android.server.pm.StagingManager: java.util.List mSuccessfulStagedSessionIds>;

        entermonitor r77;

     label16:
        $r15 = r0.<com.android.server.pm.StagingManager: java.util.List mSuccessfulStagedSessionIds>;

        $i7 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r16);

        exitmonitor r77;

     label17:
        goto label22;

     label18:
        $r49 := @caughtexception;

     label19:
        exitmonitor r77;

     label20:
        throw $r49;

     label21:
        $r14 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i6 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r14.<com.android.server.pm.ApexManager: void markStagedSessionSuccessful(int)>($i6);

     label22:
        goto label24;

     label23:
        $r47 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", "Checkpoint support unknown, marking session as successful immediately.");

        $r48 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i21 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r48.<com.android.server.pm.ApexManager: void markStagedSessionSuccessful(int)>($i21);

     label24:
        return;

     label25:
        $r50 := @caughtexception;

        $i22 = $r50.<com.android.server.pm.PackageManagerException: int error>;

        $r51 = virtualinvoke $r50.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>($i22, $r51);

        $i23 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r52 = virtualinvoke $r50.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        specialinvoke r0.<com.android.server.pm.StagingManager: void abortCheckpoint(int,java.lang.String)>($i23, $r52);

        if z0 != 0 goto label26;

        return;

     label26:
        $r53 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $z11 = virtualinvoke $r53.<com.android.server.pm.ApexManager: boolean revertActiveSessions()>();

        if $z11 != 0 goto label27;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", "Failed to abort APEXd session");

        goto label28;

     label27:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", "Successfully aborted apexd session. Rebooting device in order to revert to the previous state of APEXd.");

        $r54 = r0.<com.android.server.pm.StagingManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r54.<android.os.PowerManager: void reboot(java.lang.String)>(null);

     label28:
        return;

     label29:
        $r55 := @caughtexception;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checkpoint support unknown. Aborting staged install for session ");

        $i26 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StagingManager", $r59, $r55);

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(3, "Checkpoint support unknown. Aborting staged install.");

        if z0 == 0 goto label30;

        $r61 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        virtualinvoke $r61.<com.android.server.pm.ApexManager: boolean revertActiveSessions()>();

     label30:
        $r60 = r0.<com.android.server.pm.StagingManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r60.<android.os.PowerManager: void reboot(java.lang.String)>("Checkpoint support unknown");

        return;

        catch android.os.RemoteException from label02 to label03 with label29;
        catch android.os.RemoteException from label04 to label05 with label29;
        catch android.os.RemoteException from label05 to label06 with label29;
        catch com.android.server.pm.PackageManagerException from label12 to label13 with label25;
        catch com.android.server.pm.PackageManagerException from label13 to label14 with label25;
        catch android.os.RemoteException from label15 to label16 with label23;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch android.os.RemoteException from label20 to label21 with label23;
        catch android.os.RemoteException from label21 to label22 with label23;
    }

    private int retrieveRollbackIdForCommitSession(int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        int i0, i1, $i2, $i3, i4;
        java.util.List r1;
        android.content.Context $r2;
        java.lang.Object $r3, $r10;
        android.content.rollback.RollbackManager $r4;
        java.lang.StringBuilder $r5;
        com.android.server.pm.PackageManagerException $r8;
        java.lang.String $r9;
        android.content.rollback.RollbackInfo r11;

        r0 := @this: com.android.server.pm.StagingManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.pm.StagingManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/content/rollback/RollbackManager;");

        $r4 = (android.content.rollback.RollbackManager) $r3;

        r1 = virtualinvoke $r4.<android.content.rollback.RollbackManager: java.util.List getRecentlyCommittedRollbacks()>();

        i4 = 0;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i4 >= i1 goto label3;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        r11 = (android.content.rollback.RollbackInfo) $r10;

        $i2 = virtualinvoke r11.<android.content.rollback.RollbackInfo: int getCommittedSessionId()>();

        if $i2 != i0 goto label2;

        $i3 = virtualinvoke r11.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        return $i3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find rollback id for commit session: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new com.android.server.pm.PackageManagerException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private boolean sessionContains(com.android.server.pm.PackageInstallerSession, java.util.function.Predicate)
    {
        com.android.server.pm.StagingManager r0;
        java.util.function.Predicate r1;
        android.util.SparseArray r2, $r3;
        int i0, i1, i2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        com.android.server.pm.PackageInstallerSession $r5, r7;
        java.lang.Throwable $r6;
        int[] r8;

        r0 := @this: com.android.server.pm.StagingManager;

        r7 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter1: java.util.function.Predicate;

        $z0 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z0 != 0 goto label01;

        $z2 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r7);

        return $z2;

     label01:
        r2 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r2;

     label02:
        r8 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        i0 = lengthof r8;

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label08;

        i1 = r8[i2];

     label05:
        $r3 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.pm.PackageInstallerSession) $r4;

        $z1 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>($r5);

        if $z1 == 0 goto label07;

        exitmonitor r2;

     label06:
        return 1;

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        exitmonitor r2;

     label09:
        return 0;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean sessionContainsApex(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        com.android.server.pm.'-$$Lambda$StagingManager$cCrTSWVAewHcbpkNkEhDosvsa7E' $r2;
        boolean $z0;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r2 = <com.android.server.pm._$$Lambda$StagingManager$cCrTSWVAewHcbpkNkEhDosvsa7E: com.android.server.pm.'-$$Lambda$StagingManager$cCrTSWVAewHcbpkNkEhDosvsa7E' INSTANCE>;

        r3 = (java.util.function.Predicate) $r2;

        $z0 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContains(com.android.server.pm.PackageInstallerSession,java.util.function.Predicate)>(r1, r3);

        return $z0;
    }

    private boolean sessionContainsApk(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        com.android.server.pm.'-$$Lambda$StagingManager$DPIjX5kTmtybLfpjEIRETYd18kE' $r2;
        boolean $z0;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r2 = <com.android.server.pm._$$Lambda$StagingManager$DPIjX5kTmtybLfpjEIRETYd18kE: com.android.server.pm.'-$$Lambda$StagingManager$DPIjX5kTmtybLfpjEIRETYd18kE' INSTANCE>;

        r3 = (java.util.function.Predicate) $r2;

        $z0 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContains(com.android.server.pm.PackageInstallerSession,java.util.function.Predicate)>(r1, r3);

        return $z0;
    }

    private void snapshotAndRestoreApexUserData(java.lang.String, int[], android.content.rollback.IRollbackManager)
    {
        com.android.server.pm.StagingManager r0;
        android.content.rollback.IRollbackManager r1;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7;
        int[] r8;

        r0 := @this: com.android.server.pm.StagingManager;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: int[];

        r1 := @parameter2: android.content.rollback.IRollbackManager;

     label1:
        interfaceinvoke r1.<android.content.rollback.IRollbackManager: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)>(r7, r8, 0, 0L, null, 0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error snapshotting/restoring user data: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void snapshotAndRestoreApkInApexUserData(java.lang.String, int[], android.content.rollback.IRollbackManager)
    {
        com.android.server.pm.StagingManager r0;
        android.content.rollback.IRollbackManager r1;
        int i0;
        long l1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r9;
        java.lang.String $r7, $r12, r13, r20;
        android.os.RemoteException $r8;
        int[] r14, r19;
        android.content.pm.PackageManagerInternal r15;
        com.android.server.pm.parsing.pkg.AndroidPackage r16;
        com.android.server.pm.PackageSetting r18;

        r0 := @this: com.android.server.pm.StagingManager;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: int[];

        r1 := @parameter2: android.content.rollback.IRollbackManager;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r15 = (android.content.pm.PackageManagerInternal) $r2;

        r16 = virtualinvoke r15.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r13);

        if r16 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find package: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for snapshotting/restoring user data.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r7);

        return;

     label1:
        r18 = virtualinvoke r15.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r13);

        if r18 == null goto label5;

        i0 = r18.<com.android.server.pm.PackageSetting: int appId>;

        l1 = virtualinvoke r18.<com.android.server.pm.PackageSetting: long getCeDataInode(int)>(0);

        r19 = virtualinvoke r18.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>(r14, 1);

        r20 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r16, r18);

     label2:
        interfaceinvoke r1.<android.content.rollback.IRollbackManager: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)>(r13, r19, i0, l1, r20, 0);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error snapshotting/restoring user data: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r12);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void snapshotAndRestoreForApexSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        java.util.List r1, r16;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        android.content.pm.PackageInstaller$SessionParams $r3, $r12;
        boolean $z0, z1;
        java.lang.Object $r4, $r7, $r10;
        android.os.UserManagerInternal $r5;
        android.os.IBinder $r6;
        com.android.server.pm.PackageInstallerSession $r8, r13;
        com.android.server.pm.ApexManager $r9;
        java.lang.String $r11, r15;
        android.content.rollback.IRollbackManager r14;

        r0 := @this: com.android.server.pm.StagingManager;

        r13 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r3 = r13.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r3.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i3 = $i2 & 262144;

        if $i3 != 0 goto label2;

        $r12 = r13.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i4 = $r12.<android.content.pm.PackageInstaller$SessionParams: int installReason>;

        if $i4 != 5 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        if z1 != 0 goto label4;

        return;

     label4:
        r1 = specialinvoke r0.<com.android.server.pm.StagingManager: java.util.List extractApexSessions(com.android.server.pm.PackageInstallerSession)>(r13);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return;

     label5:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r5 = (android.os.UserManagerInternal) $r4;

        r2 = virtualinvoke $r5.<android.os.UserManagerInternal: int[] getUserIds()>();

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("rollback");

        r14 = staticinvoke <android.content.rollback.IRollbackManager$Stub: android.content.rollback.IRollbackManager asInterface(android.os.IBinder)>($r6);

        i5 = 0;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label6:
        if i5 >= i0 goto label9;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r8 = (com.android.server.pm.PackageInstallerSession) $r7;

        r15 = virtualinvoke $r8.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.pm.StagingManager: void snapshotAndRestoreApexUserData(java.lang.String,int[],android.content.rollback.IRollbackManager)>(r15, r2, r14);

        $r9 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        r16 = virtualinvoke $r9.<com.android.server.pm.ApexManager: java.util.List getApksInApex(java.lang.String)>(r15);

        i6 = 0;

        i1 = interfaceinvoke r16.<java.util.List: int size()>();

     label7:
        if i6 >= i1 goto label8;

        $r10 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (java.lang.String) $r10;

        specialinvoke r0.<com.android.server.pm.StagingManager: void snapshotAndRestoreApkInApexUserData(java.lang.String,int[],android.content.rollback.IRollbackManager)>($r11, r2, r14);

        i6 = i6 + 1;

        goto label7;

     label8:
        i5 = i5 + 1;

        goto label6;

     label9:
        return;
    }

    private java.util.List submitSessionToApexService(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, i9, i10, i11, i12, i13;
        android.apex.ApexInfo[] r2;
        com.android.server.pm.parsing.PackageParser2 r3;
        android.util.IntArray $r4;
        boolean $z0, $z3;
        android.apex.ApexSessionParams $r5;
        int[] $r6, r45;
        android.content.pm.PackageInstaller$SessionParams $r7;
        android.util.SparseIntArray $r8;
        java.lang.StringBuilder $r9, $r25, $r37, r59;
        java.lang.String $r14, $r17, $r20, $r22, $r23, $r27, $r29, $r31, $r39, $r42;
        java.util.function.Supplier $r15;
        java.lang.Object $r16;
        com.android.server.pm.parsing.pkg.ParsedPackage $r18;
        com.android.server.pm.ApexManager $r24, $r48;
        com.android.server.pm.PackageManagerException $r30, $r41, r58;
        com.android.server.pm.PackageInstallerSession $r32, r43;
        java.lang.Throwable $r33, $r34, $r35;
        android.content.pm.PackageParser$PackageParserException $r36;
        android.util.SparseArray r47;
        android.apex.ApexInfoList r49;
        java.util.ArrayList $r50, $r51;
        android.apex.ApexInfo r53;
        java.io.File r54;
        android.content.pm.PackageInfo r55, r56;

        r0 := @this: com.android.server.pm.StagingManager;

        r43 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r4 = new android.util.IntArray;

        specialinvoke $r4.<android.util.IntArray: void <init>()>();

        $z0 = virtualinvoke r43.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z0 == 0 goto label03;

        r45 = virtualinvoke r43.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        i9 = lengthof r45;

        i10 = 0;

     label01:
        if i10 >= i9 goto label03;

        i0 = r45[i10];

        $r32 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession getStagedSession(int)>(i0);

        $z3 = staticinvoke <com.android.server.pm.StagingManager: boolean isApexSession(com.android.server.pm.PackageInstallerSession)>($r32);

        if $z3 == 0 goto label02;

        virtualinvoke $r4.<android.util.IntArray: void add(int)>(i0);

     label02:
        i10 = i10 + 1;

        goto label01;

     label03:
        $r5 = new android.apex.ApexSessionParams;

        specialinvoke $r5.<android.apex.ApexSessionParams: void <init>()>();

        $i1 = r43.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r5.<android.apex.ApexSessionParams: int sessionId> = $i1;

        $r6 = virtualinvoke $r4.<android.util.IntArray: int[] toArray()>();

        $r5.<android.apex.ApexSessionParams: int[] childSessionIds> = $r6;

        $r7 = r43.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r7.<android.content.pm.PackageInstaller$SessionParams: int installReason>;

        if $i2 != 5 goto label04;

        $r5.<android.apex.ApexSessionParams: boolean isRollback> = 1;

        $i7 = r43.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $i8 = specialinvoke r0.<com.android.server.pm.StagingManager: int retrieveRollbackIdForCommitSession(int)>($i7);

        $r5.<android.apex.ApexSessionParams: int rollbackId> = $i8;

        goto label09;

     label04:
        r47 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r47;

     label05:
        $r8 = r0.<com.android.server.pm.StagingManager: android.util.SparseIntArray mSessionRollbackIds>;

        $i3 = r43.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        i11 = virtualinvoke $r8.<android.util.SparseIntArray: int get(int,int)>($i3, -1);

     label06:
        if i11 == -1 goto label08;

     label07:
        $r5.<android.apex.ApexSessionParams: boolean hasRollbackEnabled> = 1;

        $r5.<android.apex.ApexSessionParams: int rollbackId> = i11;

     label08:
        exitmonitor r47;

     label09:
        $r48 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        r49 = virtualinvoke $r48.<com.android.server.pm.ApexManager: android.apex.ApexInfoList submitStagedSession(android.apex.ApexSessionParams)>($r5);

        $r50 = new java.util.ArrayList;

        specialinvoke $r50.<java.util.ArrayList: void <init>()>();

        $r51 = new java.util.ArrayList;

        specialinvoke $r51.<java.util.ArrayList: void <init>()>();

        r2 = r49.<android.apex.ApexInfoList: android.apex.ApexInfo[] apexInfos>;

        i12 = lengthof r2;

        i13 = 0;

     label10:
        if i13 >= i12 goto label25;

        r53 = r2[i13];

     label11:
        $r15 = r0.<com.android.server.pm.StagingManager: java.util.function.Supplier mPackageParserSupplier>;

        $r16 = interfaceinvoke $r15.<java.util.function.Supplier: java.lang.Object get()>();

        r3 = (com.android.server.pm.parsing.PackageParser2) $r16;

     label12:
        r54 = new java.io.File;

        $r17 = r53.<android.apex.ApexInfo: java.lang.String modulePath>;

        specialinvoke r54.<java.io.File: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke r3.<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int,boolean)>(r54, 128, 0);

        r55 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generate(android.content.pm.parsing.ParsingPackageRead,android.apex.ApexInfo,int)>($r18, r53, 128);

     label13:
        if r55 == null goto label17;

        if r3 == null goto label15;

     label14:
        virtualinvoke r3.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label15:
        $r24 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $r23 = r55.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r56 = virtualinvoke $r24.<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r23, 1);

        if r56 == null goto label16;

        specialinvoke r0.<com.android.server.pm.StagingManager: void checkRequiredVersionCode(com.android.server.pm.PackageInstallerSession,android.content.pm.PackageInfo)>(r43, r56);

        specialinvoke r0.<com.android.server.pm.StagingManager: void checkDowngrade(com.android.server.pm.PackageInstallerSession,android.content.pm.PackageInfo,android.content.pm.PackageInfo)>(r43, r56, r55);

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>(r55);

        $r31 = r55.<android.content.pm.PackageInfo: java.lang.String packageName>;

        interfaceinvoke $r51.<java.util.List: boolean add(java.lang.Object)>($r31);

        i13 = i13 + 1;

        goto label10;

     label16:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to install new APEX package ");

        $r27 = r55.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r29);

        $r30 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r30.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, "It is forbidden to install new APEX packages.");

        throw $r30;

     label17:
        r58 = new com.android.server.pm.PackageManagerException;

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to generate package info: ");

        $r20 = r53.<android.apex.ApexInfo: java.lang.String modulePath>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r58.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r22);

        throw r58;

     label18:
        $r35 := @caughtexception;

        if r3 == null goto label23;

     label19:
        virtualinvoke r3.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label20:
        goto label23;

     label21:
        $r34 := @caughtexception;

     label22:
        virtualinvoke $r35.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r34);

     label23:
        throw $r35;

     label24:
        $r36 := @caughtexception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse APEX package ");

        $r39 = r53.<android.apex.ApexInfo: java.lang.String modulePath>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = new com.android.server.pm.PackageManagerException;

        $r42 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(1, $r42, $r36);

        throw $r41;

     label25:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        $i4 = r43.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has following APEX packages: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StagingManager", $r14);

        return $r50;

     label26:
        $r33 := @caughtexception;

     label27:
        exitmonitor r47;

     label28:
        throw $r33;

        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch android.content.pm.PackageParser$PackageParserException from label11 to label12 with label24;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch android.content.pm.PackageParser$PackageParserException from label14 to label15 with label24;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch android.content.pm.PackageParser$PackageParserException from label22 to label23 with label24;
        catch android.content.pm.PackageParser$PackageParserException from label23 to label24 with label24;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private boolean supportsCheckpoint() throws android.os.RemoteException
    {
        com.android.server.pm.StagingManager r0;
        android.os.storage.IStorageManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.StagingManager;

        $r1 = staticinvoke <com.android.internal.content.PackageHelper: android.os.storage.IStorageManager getStorageManager()>();

        $z0 = interfaceinvoke $r1.<android.os.storage.IStorageManager: boolean supportsCheckpoint()>();

        return $z0;
    }

    private void updateStoredSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        android.util.SparseArray r1, $r2, $r5;
        int $i0, $i1;
        java.lang.Object $r3;
        com.android.server.pm.PackageInstallerSession $r4, r7;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.pm.StagingManager;

        r7 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i0 = r7.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r4 = (com.android.server.pm.PackageInstallerSession) $r3;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i1 = r7.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, r7);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void validateApexSignature(android.content.pm.PackageInfo) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        int i0, $i1, $i2;
        android.content.pm.PackageParser$SigningDetails r1, r2;
        android.content.pm.ApplicationInfo $r3, $r4, $r11, $r26;
        com.android.server.pm.ApexManager $r5;
        java.lang.StringBuilder $r6, $r13, $r24, $r32;
        java.lang.IllegalStateException $r9;
        java.lang.String $r10, $r12, $r22, $r27, $r30, $r36, r38, r39;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerException $r21, $r29, $r35;
        android.content.pm.PackageParser$PackageParserException $r23, $r31;
        android.content.pm.PackageInfo r37, r40;

        r0 := @this: com.android.server.pm.StagingManager;

        r37 := @parameter0: android.content.pm.PackageInfo;

        $r3 = r37.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r38 = $r3.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        r39 = r37.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r4 = r37.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        i0 = staticinvoke <android.util.apk.ApkSignatureVerifier: int getMinimumSignatureSchemeVersionForTargetSdk(int)>($i1);

     label1:
        r1 = staticinvoke <android.util.apk.ApkSignatureVerifier: android.content.pm.PackageParser$SigningDetails verify(java.lang.String,int)>(r38, i0);

     label2:
        $r5 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        r40 = virtualinvoke $r5.<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r39, 1);

        if r40 == null goto label8;

     label3:
        $r11 = r40.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = $r11.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        r2 = staticinvoke <android.util.apk.ApkSignatureVerifier: android.content.pm.PackageParser$SigningDetails verify(java.lang.String,int)>($r12, 1);

     label4:
        $z0 = virtualinvoke r1.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>(r2, 1);

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r2.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>(r1, 8);

        if $z1 == 0 goto label5;

        goto label6;

     label5:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK-container signature of APEX package ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with version ");

        $i2 = r37.<android.content.pm.PackageInfo: int versionCodeMajor>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and path ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not compatible with the one currently installed on device");

        $r21 = new com.android.server.pm.PackageManagerException;

        $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r22);

        throw $r21;

     label6:
        return;

     label7:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse APEX package ");

        $r26 = r40.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r27 = $r26.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = new com.android.server.pm.PackageManagerException;

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(1, $r30, $r23);

        throw $r29;

     label8:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown apex package ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label9:
        $r31 := @caughtexception;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse APEX package ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r35 = new com.android.server.pm.PackageManagerException;

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(1, $r36, $r31);

        throw $r35;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label9;
        catch android.content.pm.PackageParser$PackageParserException from label3 to label4 with label7;
    }

    private void verifyApksInSession(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1, r2;
        com.android.server.pm.StagingManager$LocalIntentReceiverAsync $r3;
        com.android.server.pm._$$Lambda$StagingManager$p2VgTKfi351HM3Fk_k0_IJXQ_34 $r4;
        android.content.IntentSender $r5;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r2 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession extractApksInSession(com.android.server.pm.PackageInstallerSession,boolean)>(r1, 1);

        if r2 != null goto label1;

        return;

     label1:
        $r3 = new com.android.server.pm.StagingManager$LocalIntentReceiverAsync;

        $r4 = new com.android.server.pm._$$Lambda$StagingManager$p2VgTKfi351HM3Fk_k0_IJXQ_34;

        specialinvoke $r4.<com.android.server.pm._$$Lambda$StagingManager$p2VgTKfi351HM3Fk_k0_IJXQ_34: void <init>(com.android.server.pm.StagingManager,com.android.server.pm.PackageInstallerSession)>(r0, r1);

        specialinvoke $r3.<com.android.server.pm.StagingManager$LocalIntentReceiverAsync: void <init>(java.util.function.Consumer)>($r4);

        $r5 = virtualinvoke $r3.<com.android.server.pm.StagingManager$LocalIntentReceiverAsync: android.content.IntentSender getIntentSender()>();

        virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: void commit(android.content.IntentSender,boolean)>($r5, 0);

        return;
    }

    boolean abortCommittedSessionLocked(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        int i0, $i1, $i2, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r1;
        com.android.server.pm.PackageInstallerSession $r2, r29;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r3;
        com.android.server.pm.ApexManager $r4, $r9;
        java.lang.String $r8, $r14, $r19, $r23, $r28;
        java.lang.StringBuilder $r10, $r15, $r20, $r25, r34;
        java.lang.Exception $r24;
        android.apex.ApexSessionInfo r33;

        r0 := @this: com.android.server.pm.StagingManager;

        r29 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 = r29.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $z0 = virtualinvoke r29.<com.android.server.pm.PackageInstallerSession: boolean isStagedSessionApplied()>();

        if $z0 == 0 goto label01;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot abort applied session : ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r23);

        return 0;

     label01:
        $z1 = virtualinvoke r29.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z1 == 0 goto label14;

        $r2 = specialinvoke r0.<com.android.server.pm.StagingManager: com.android.server.pm.PackageInstallerSession getStagedSession(int)>(i0);

        if $r2 != null goto label02;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been abandoned already");

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r19);

        return 0;

     label02:
        $r3 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        $z2 = staticinvoke <com.android.server.pm.StagingManager$PreRebootVerificationHandler: boolean access$200(com.android.server.pm.StagingManager$PreRebootVerificationHandler,int)>($r3, i0);

        if $z2 == 0 goto label03;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aborted before pre-reboot verification completed.");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r14);

        return 0;

     label03:
        $z3 = virtualinvoke r29.<com.android.server.pm.PackageInstallerSession: boolean isStagedSessionReady()>();

        if $z3 == 0 goto label13;

        $z4 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean sessionContainsApex(com.android.server.pm.PackageInstallerSession)>(r29);

        if $z4 == 0 goto label13;

     label04:
        $r4 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i1 = r29.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        r33 = virtualinvoke $r4.<com.android.server.pm.ApexManager: android.apex.ApexSessionInfo getStagedSessionInfo(int)>($i1);

     label05:
        if r33 == null goto label10;

     label06:
        $z5 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean isApexSessionFinalized(android.apex.ApexSessionInfo)>(r33);

        if $z5 == 0 goto label08;

     label07:
        goto label10;

     label08:
        $r9 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $i4 = r29.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r9.<com.android.server.pm.ApexManager: boolean abortStagedSession(int)>($i4);

     label09:
        goto label11;

     label10:
        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot abort session ");

        $i2 = r29.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it is not active.");

        $r8 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r8);

     label11:
        goto label13;

     label12:
        $r24 := @caughtexception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not contact apexd to abort staged session ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r28);

     label13:
        virtualinvoke r0.<com.android.server.pm.StagingManager: void abortSession(com.android.server.pm.PackageInstallerSession)>(r29);

        return 1;

     label14:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Committed session must be destroyed before aborting it from StagingManager");

        throw $r1;

        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    void abortSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        android.util.SparseArray r1, $r2;
        int $i0, $i1;
        android.util.SparseIntArray $r3;
        java.lang.Throwable $r4;
        com.android.server.pm.PackageInstallerSession r5;

        r0 := @this: com.android.server.pm.StagingManager;

        r5 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i0 = r5.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r2.<android.util.SparseArray: void remove(int)>($i0);

        $r3 = r0.<com.android.server.pm.StagingManager: android.util.SparseIntArray mSessionRollbackIds>;

        $i1 = r5.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r3.<android.util.SparseIntArray: void delete(int)>($i1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void checkNonOverlappingWithStagedSessions(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.StagingManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11;
        com.android.server.pm.PackageManagerException r1, $r7, r37;
        java.lang.String $r2, $r8, $r15, $r16, $r18, $r24, $r28;
        java.lang.StringBuilder $r3, r36, r38;
        android.content.Context $r9;
        java.lang.Object $r10, $r14, $r30;
        android.os.storage.StorageManager $r11;
        android.util.SparseArray $r12, $r13, $r29, r33;
        java.lang.Throwable $r31;
        com.android.server.pm.PackageInstallerSession r32, r34, r35;

        r0 := @this: com.android.server.pm.StagingManager;

        r32 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z1 = virtualinvoke r32.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z1 == 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r32.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        if $r2 == null goto label24;

        $r9 = r0.<com.android.server.pm.StagingManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("storage");

        $r11 = (android.os.storage.StorageManager) $r10;

        z0 = virtualinvoke $r11.<android.os.storage.StorageManager: boolean isCheckpointSupported()>();

        r33 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r33;

        i11 = 0;

     label02:
        $r12 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i2 = virtualinvoke $r12.<android.util.SparseArray: int size()>();

        if i11 >= $i2 goto label19;

        $r13 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i11);

        r34 = (com.android.server.pm.PackageInstallerSession) $r14;

        $z2 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: boolean isCommitted()>();

        if $z2 == 0 goto label18;

        $z3 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z3 != 0 goto label18;

        $z4 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z4 == 0 goto label04;

     label03:
        goto label18;

     label04:
        $z5 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z5 == 0 goto label06;

     label05:
        goto label18;

     label06:
        $z6 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z6 == 0 goto label10;

        i0 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>();

        $r29 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $r30 = virtualinvoke $r29.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r35 = (com.android.server.pm.PackageInstallerSession) $r30;

     label07:
        if r35 == null goto label18;

     label08:
        $z8 = virtualinvoke r35.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z8 != 0 goto label18;

        $z9 = virtualinvoke r35.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z9 == 0 goto label10;

     label09:
        goto label18;

     label10:
        $i4 = r32.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $i3 = r34.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        if $i4 != $i3 goto label12;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        $i9 = r32.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already staged");

        $r28 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StagingManager", $r28);

     label11:
        goto label18;

     label12:
        $r15 = virtualinvoke r32.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        $r16 = virtualinvoke r34.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z7 != 0 goto label17;

     label13:
        if z0 != 0 goto label18;

     label14:
        $i7 = specialinvoke r0.<com.android.server.pm.StagingManager: int parentOrOwnSessionId(com.android.server.pm.PackageInstallerSession)>(r32);

        $i8 = specialinvoke r0.<com.android.server.pm.StagingManager: int parentOrOwnSessionId(com.android.server.pm.PackageInstallerSession)>(r34);

        if $i7 != $i8 goto label16;

     label15:
        goto label18;

     label16:
        r37 = new com.android.server.pm.PackageManagerException;

        specialinvoke r37.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-119, "Cannot stage multiple sessions without checkpoint support", null);

        throw r37;

     label17:
        r1 = new com.android.server.pm.PackageManagerException;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package: ");

        $r18 = virtualinvoke r32.<com.android.server.pm.PackageInstallerSession: java.lang.String getPackageName()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in session: ");

        $i5 = r32.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been staged already by session: ");

        $i6 = r34.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r24 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-119, $r24, null);

        throw r1;

     label18:
        i11 = i11 + 1;

        goto label02;

     label19:
        exitmonitor r33;

     label20:
        return;

     label21:
        $r31 := @caughtexception;

     label22:
        exitmonitor r33;

     label23:
        throw $r31;

     label24:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot stage session ");

        $i1 = r32.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with package name null");

        $r7 = new com.android.server.pm.PackageManagerException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r8);

        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    void commitSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        int $i0;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r2;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.StagingManager: void updateStoredSession(com.android.server.pm.PackageInstallerSession)>(r1);

        $r2 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        $i0 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.server.pm.StagingManager$PreRebootVerificationHandler: void access$000(com.android.server.pm.StagingManager$PreRebootVerificationHandler,int)>($r2, $i0);

        return;
    }

    void createSession(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.StagingManager r0;
        android.util.SparseArray r1, $r2;
        int $i0;
        java.lang.Throwable $r3;
        com.android.server.pm.PackageInstallerSession r4;

        r0 := @this: com.android.server.pm.StagingManager;

        r4 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i0 = r4.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r2.<android.util.SparseArray: void append(int,java.lang.Object)>($i0, r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$verifyApksInSession$2$StagingManager(com.android.server.pm.PackageInstallerSession, android.content.Intent)
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.PackageInstallerSession r1;
        java.lang.String r2, $r10;
        int $i0, $i1, $i2, $i4;
        com.android.server.pm.StagingManager$PreRebootVerificationHandler $r3, $r11;
        java.lang.StringBuilder $r4;
        android.content.Intent r12;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r12 := @parameter1: android.content.Intent;

        $i0 = virtualinvoke r12.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.content.pm.extra.STATUS", 1);

        if $i0 == 0 goto label1;

        r2 = virtualinvoke r12.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android.content.pm.extra.STATUS_MESSAGE");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure to verify APK staged session ");

        $i2 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StagingManager", $r10);

        virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(1, r2);

        $r11 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        $i4 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.server.pm.StagingManager$PreRebootVerificationHandler: void access$1600(com.android.server.pm.StagingManager$PreRebootVerificationHandler,int)>($r11, $i4);

        return;

     label1:
        $r3 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.StagingManager$PreRebootVerificationHandler mPreRebootVerificationHandler>;

        $i1 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.server.pm.StagingManager$PreRebootVerificationHandler: void access$1700(com.android.server.pm.StagingManager$PreRebootVerificationHandler,int)>($r3, $i1);

        return;
    }

    void markStagedSessionsAsSuccessful()
    {
        com.android.server.pm.StagingManager r0;
        java.util.List r1, $r3, $r4;
        int $i0, $i1, i2;
        com.android.server.pm.ApexManager $r5;
        java.lang.Object $r6;
        java.lang.Integer $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.pm.StagingManager;

        r1 = r0.<com.android.server.pm.StagingManager: java.util.List mSuccessfulStagedSessionIds>;

        entermonitor r1;

        i2 = 0;

     label1:
        $r3 = r0.<com.android.server.pm.StagingManager: java.util.List mSuccessfulStagedSessionIds>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r5 = r0.<com.android.server.pm.StagingManager: com.android.server.pm.ApexManager mApexManager>;

        $r4 = r0.<com.android.server.pm.StagingManager: java.util.List mSuccessfulStagedSessionIds>;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r7 = (java.lang.Integer) $r6;

        $i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        virtualinvoke $r5.<com.android.server.pm.ApexManager: void markStagedSessionSuccessful(int)>($i1);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void restoreSession(com.android.server.pm.PackageInstallerSession, boolean)
    {
        com.android.server.pm.StagingManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.util.SparseArray r2, $r3, $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        com.android.server.pm.PackageInstallerSession r7, r8;

        r0 := @this: com.android.server.pm.StagingManager;

        r7 := @parameter0: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter1: boolean;

        r2 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        entermonitor r2;

     label01:
        $r3 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i0 = r7.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r3.<android.util.SparseArray: void append(int,java.lang.Object)>($i0, r7);

        $z1 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z1 != 0 goto label04;

     label02:
        r8 = r7;

     label03:
        $z5 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z5 == 0 goto label08;

     label04:
        $z2 = specialinvoke r0.<com.android.server.pm.StagingManager: boolean isMultiPackageSessionComplete(com.android.server.pm.PackageInstallerSession)>(r7);

        if $z2 != 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        r8 = r7;

     label07:
        $z3 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z3 == 0 goto label08;

        $r4 = r0.<com.android.server.pm.StagingManager: android.util.SparseArray mStagedSessions>;

        $i1 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>();

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r8 = (com.android.server.pm.PackageInstallerSession) $r5;

     label08:
        exitmonitor r2;

     label09:
        if z0 == 0 goto label10;

        $z4 = virtualinvoke r8.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z4 != 0 goto label10;

        virtualinvoke r8.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(2, "Build fingerprint has changed");

        return;

     label10:
        specialinvoke r0.<com.android.server.pm.StagingManager: void checkStateAndResume(com.android.server.pm.PackageInstallerSession)>(r8);

        return;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void systemReady()
    {
        com.android.server.pm.StagingManager r0;
        com.android.server.pm.StagingManager$Lifecycle $r1;
        android.content.Context $r2, $r4;
        com.android.server.pm.StagingManager$1 $r3;
        android.content.IntentFilter $r5;
        java.io.File $r7;

        r0 := @this: com.android.server.pm.StagingManager;

        $r1 = new com.android.server.pm.StagingManager$Lifecycle;

        $r2 = r0.<com.android.server.pm.StagingManager: android.content.Context mContext>;

        specialinvoke $r1.<com.android.server.pm.StagingManager$Lifecycle: void <init>(android.content.Context)>($r2);

        virtualinvoke $r1.<com.android.server.pm.StagingManager$Lifecycle: void startService(com.android.server.pm.StagingManager)>(r0);

        $r4 = r0.<com.android.server.pm.StagingManager: android.content.Context mContext>;

        $r3 = new com.android.server.pm.StagingManager$1;

        specialinvoke $r3.<com.android.server.pm.StagingManager$1: void <init>(com.android.server.pm.StagingManager)>(r0);

        $r5 = new android.content.IntentFilter;

        specialinvoke $r5.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke $r4.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r3, $r5);

        $r7 = r0.<com.android.server.pm.StagingManager: java.io.File mFailureReasonFile>;

        virtualinvoke $r7.<java.io.File: boolean delete()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.StagingManager: java.lang.String TAG> = "StagingManager";

        return;
    }
}
