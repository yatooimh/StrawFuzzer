class com.android.server.pm.UserManagerService$Shell extends android.os.ShellCommand
{
    final com.android.server.pm.UserManagerService this$0;

    private void <init>(com.android.server.pm.UserManagerService)
    {
        com.android.server.pm.UserManagerService$Shell r0;
        com.android.server.pm.UserManagerService r1;

        r0 := @this: com.android.server.pm.UserManagerService$Shell;

        r1 := @parameter0: com.android.server.pm.UserManagerService;

        r0.<com.android.server.pm.UserManagerService$Shell: com.android.server.pm.UserManagerService this$0> = r1;

        specialinvoke r0.<android.os.ShellCommand: void <init>()>();

        return;
    }

    void <init>(com.android.server.pm.UserManagerService, com.android.server.pm.UserManagerService$1)
    {
        com.android.server.pm.UserManagerService$Shell r0;
        com.android.server.pm.UserManagerService r1;
        com.android.server.pm.UserManagerService$1 r2;

        r0 := @this: com.android.server.pm.UserManagerService$Shell;

        r1 := @parameter0: com.android.server.pm.UserManagerService;

        r2 := @parameter1: com.android.server.pm.UserManagerService$1;

        specialinvoke r0.<com.android.server.pm.UserManagerService$Shell: void <init>(com.android.server.pm.UserManagerService)>(r1);

        return;
    }

    public int onCommand(java.lang.String)
    {
        com.android.server.pm.UserManagerService$Shell r0;
        java.lang.String r1;
        com.android.server.pm.UserManagerService $r2;
        int $i0;

        r0 := @this: com.android.server.pm.UserManagerService$Shell;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.UserManagerService$Shell: com.android.server.pm.UserManagerService this$0>;

        $i0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: int onShellCommand(com.android.server.pm.UserManagerService$Shell,java.lang.String)>(r0, r1);

        return $i0;
    }

    public void onHelp()
    {
        com.android.server.pm.UserManagerService$Shell r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.pm.UserManagerService$Shell;

        r1 = virtualinvoke r0.<com.android.server.pm.UserManagerService$Shell: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("User manager (user) commands:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Prints this help text.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  list [-v] [-all]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Prints all users on the system.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  report-system-user-package-whitelist-problems [-v | --verbose] [--critical-only] [--mode MODE]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Reports all issues on user-type package whitelist XML files. Options:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    -v | --verbose : shows extra info, like number of issues");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    --critical-only: show only critical issues, excluding warnings");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    --mode MODE: shows what errors would be if device used mode MODE (where MODE is the whitelist mode integer as defined by config_userTypePackageWhitelistMode)");

        return;
    }
}
