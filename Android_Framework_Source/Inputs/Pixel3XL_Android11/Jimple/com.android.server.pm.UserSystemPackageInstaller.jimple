class com.android.server.pm.UserSystemPackageInstaller extends java.lang.Object
{
    private static final boolean DEBUG;
    static final java.lang.String PACKAGE_WHITELIST_MODE_PROP;
    private static final java.lang.String TAG;
    static final int USER_TYPE_PACKAGE_WHITELIST_MODE_DEVICE_DEFAULT;
    public static final int USER_TYPE_PACKAGE_WHITELIST_MODE_DISABLE;
    public static final int USER_TYPE_PACKAGE_WHITELIST_MODE_ENFORCE;
    public static final int USER_TYPE_PACKAGE_WHITELIST_MODE_IGNORE_OTA;
    public static final int USER_TYPE_PACKAGE_WHITELIST_MODE_IMPLICIT_WHITELIST;
    public static final int USER_TYPE_PACKAGE_WHITELIST_MODE_IMPLICIT_WHITELIST_SYSTEM;
    public static final int USER_TYPE_PACKAGE_WHITELIST_MODE_LOG;
    static final int USER_TYPE_PACKAGE_WHITELIST_MODE_NONE;
    private final com.android.server.pm.UserManagerService mUm;
    private final java.lang.String[] mUserTypes;
    private final android.util.ArrayMap mWhitelistedPackagesForUserTypes;

    void <init>(com.android.server.pm.UserManagerService, android.util.ArrayMap)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        android.util.ArrayMap r1, $r11;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;
        com.android.server.SystemConfig $r10;
        com.android.server.pm.UserManagerService r12;
        java.lang.String[] r13;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r12 := @parameter0: com.android.server.pm.UserManagerService;

        r1 := @parameter1: android.util.ArrayMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm> = r12;

        r13 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] getAndSortKeysFromMap(android.util.ArrayMap)>(r1);

        r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes> = r13;

        $i0 = lengthof r13;

        if $i0 > 64 goto label1;

        $r10 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r11 = virtualinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap determineWhitelistedPackagesForUserTypes(com.android.server.SystemConfig)>($r10);

        r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes> = $r11;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device contains ");

        $i1 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user types. However, UserSystemPackageInstaller does not work if there are more than ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(64);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user types.");

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    void <init>(com.android.server.pm.UserManagerService, android.util.ArrayMap, java.lang.String[])
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        com.android.server.pm.UserManagerService r1;
        android.util.ArrayMap r2;
        java.lang.String[] r3;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r1 := @parameter0: com.android.server.pm.UserManagerService;

        r2 := @parameter1: android.util.ArrayMap;

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm> = r1;

        r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes> = r3;

        r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes> = r2;

        return;
    }

    private void checkWhitelistedSystemPackages(int)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int i0, i9, i10, i11, i12;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r1, $r9, $r18, $r26;
        java.lang.String $r3, $r8, $r11, $r16, $r20, $r23, $r25, $r28, $r31, r38;
        java.lang.Object $r17, $r24;
        java.util.List r32, r35;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        i9 := @parameter0: int;

        $z1 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isLogMode(int)>(i9);

        if $z1 != 0 goto label01;

        $z5 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isEnforceMode(int)>(i9);

        if $z5 != 0 goto label01;

        return;

     label01:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("UserManagerService", "Checking that all system packages are whitelisted.");

        r32 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.List getPackagesWhitelistWarnings()>();

        i0 = interfaceinvoke r32.<java.util.List: int size()>();

        if i0 != 0 goto label02;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkWhitelistedSystemPackages(mode=");

        $r28 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: java.lang.String modeToString(int)>(i9);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has no warnings");

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("UserManagerService", $r31);

        goto label04;

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkWhitelistedSystemPackages(mode=");

        $r3 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: java.lang.String modeToString(int)>(i9);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" warnings:");

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("UserManagerService", $r8);

        i10 = 0;

     label03:
        if i10 >= i0 goto label04;

        $r24 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(i10);

        $r25 = (java.lang.String) $r24;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("UserManagerService", $r25);

        i10 = i10 + 1;

        goto label03;

     label04:
        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistMode(int)>(i9);

        if $z2 == 0 goto label05;

        $z4 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isLogMode(int)>(i9);

        if $z4 != 0 goto label05;

        return;

     label05:
        r35 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.List getPackagesWhitelistErrors(int)>(i9);

        i11 = interfaceinvoke r35.<java.util.List: int size()>();

        if i11 != 0 goto label06;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkWhitelistedSystemPackages(mode=");

        $r20 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: java.lang.String modeToString(int)>(i9);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has no errors");

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("UserManagerService", $r23);

        return;

     label06:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkWhitelistedSystemPackages(mode=");

        $r11 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: java.lang.String modeToString(int)>(i9);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") has ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errors:");

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UserManagerService", $r16);

        z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistMode(int)>(i9);

        i12 = 0;

     label07:
        if i12 >= i11 goto label10;

        $r17 = interfaceinvoke r35.<java.util.List: java.lang.Object get(int)>(i12);

        r38 = (java.lang.String) $r17;

        $z3 = z0 ^ 1;

        if $z3 == 0 goto label08;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("UserManagerService", r38);

        goto label09;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UserManagerService", r38);

     label09:
        i12 = i12 + 1;

        goto label07;

     label10:
        return;
    }

    private void dumpIndented(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int i0, i1, $i3, $i4, i8, $i9, i10, i11;
        boolean z0, $z1, $z2, $z3;
        long l2, $l5, $l6;
        android.util.ArrayMap $r10, $r16, $r19;
        java.lang.Object $r17, $r20;
        java.lang.String $r18, $r28, $r30, r31, r32, r33, r34;
        java.lang.Long $r21;
        java.lang.String[] $r22, $r27, $r35;
        byte $b7;
        java.lang.StringBuilder $r24;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Whitelisted packages per user type");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Mode: ");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i0);

        z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isEnforceMode(int)>(i0);

        if z0 == 0 goto label01;

        r31 = " (enforced)";

        goto label02;

     label01:
        r31 = "";

     label02:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r31);

        $z1 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isLogMode(int)>(i0);

        if $z1 == 0 goto label03;

        r32 = " (logged)";

        goto label04;

     label03:
        r32 = "";

     label04:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r32);

        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistMode(int)>(i0);

        if $z2 == 0 goto label05;

        r33 = " (implicit)";

        goto label06;

     label05:
        r33 = "";

     label06:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r33);

        r34 = "";

        $z3 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isIgnoreOtaMode(int)>(i0);

        if $z3 == 0 goto label07;

        r34 = " (ignore OTAs)";

     label07:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r34);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Legend");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i8 = 0;

     label08:
        $r35 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        $i9 = lengthof $r35;

        if i8 >= $i9 goto label09;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r27 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        $r28 = $r27[i8];

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r30);

        i8 = i8 + 1;

        goto label08;

     label09:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r10 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        i1 = virtualinvoke $r10.<android.util.ArrayMap: int size()>();

        if i1 != 0 goto label10;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("No packages");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;

     label10:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" packages:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i10 = 0;

     label11:
        if i10 >= i1 goto label15;

        $r16 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $r17 = virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i10);

        $r18 = (java.lang.String) $r17;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r18);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r19 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $r20 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i10);

        $r21 = (java.lang.Long) $r20;

        l2 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        i11 = 0;

     label12:
        $r22 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        $i3 = lengthof $r22;

        if i11 >= $i3 goto label14;

        $i4 = 1 << i11;

        $l5 = (long) $i4;

        $l6 = $l5 & l2;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label13;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i11);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" ");

     label13:
        i11 = i11 + 1;

        goto label12;

     label14:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i10 = i10 + 1;

        goto label11;

     label15:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: void dumpPackageWhitelistProblems(com.android.internal.util.IndentingPrintWriter,int,boolean,boolean)>(r1, i0, 1, 0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    private static java.lang.String[] getAndSortKeysFromMap(android.util.ArrayMap)
    {
        android.util.ArrayMap r0;
        java.lang.String[] r1;
        int $i0, $i1, i2;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @parameter0: android.util.ArrayMap;

        $i0 = virtualinvoke r0.<android.util.ArrayMap: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.util.ArrayMap: int size()>();

        if i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r3 = (java.lang.String) $r2;

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r1);

        return r1;
    }

    private java.util.Map getBaseTypeBitSets()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int $i0, $i1, $i3, $i5, i10;
        android.util.ArrayMap $r1;
        java.lang.Long $r2, $r4, $r6;
        java.lang.String $r8, $r11, $r14;
        com.android.server.pm.UserManagerService $r9, $r12, $r15;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r10, $r13, r16;
        long $l2, $l4, $l6, l7, l8, l9, l11, l12, l13;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        l7 = 0L;

        l8 = 0L;

        l9 = 0L;

        i10 = 0;

     label1:
        r16 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        $i0 = lengthof r16;

        if i10 >= $i0 goto label5;

        l11 = l7;

        $r9 = r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm>;

        $r8 = r16[i10];

        $z0 = virtualinvoke $r9.<com.android.server.pm.UserManagerService: boolean isUserTypeSubtypeOfFull(java.lang.String)>($r8);

        if $z0 == 0 goto label2;

        $i5 = 1 << i10;

        $l6 = (long) $i5;

        l11 = l7 | $l6;

     label2:
        l12 = l8;

        $r12 = r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm>;

        $r10 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        $r11 = $r10[i10];

        $z1 = virtualinvoke $r12.<com.android.server.pm.UserManagerService: boolean isUserTypeSubtypeOfSystem(java.lang.String)>($r11);

        if $z1 == 0 goto label3;

        $i3 = 1 << i10;

        $l4 = (long) $i3;

        l12 = l8 | $l4;

     label3:
        l13 = l9;

        $r15 = r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm>;

        $r13 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        $r14 = $r13[i10];

        $z2 = virtualinvoke $r15.<com.android.server.pm.UserManagerService: boolean isUserTypeSubtypeOfProfile(java.lang.String)>($r14);

        if $z2 == 0 goto label4;

        $i1 = 1 << i10;

        $l2 = (long) $i1;

        l13 = l9 | $l2;

     label4:
        i10 = i10 + 1;

        l7 = l11;

        l8 = l12;

        l9 = l13;

        goto label1;

     label5:
        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>(int)>(3);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("FULL", $r2);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SYSTEM", $r4);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l9);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PROFILE", $r6);

        return $r1;
    }

    private int getDeviceDefaultWhitelistMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        android.content.res.Resources $r1;
        int $i0;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $r1 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getInteger(int)>(17694914);

        return $i0;
    }

    private java.util.Set getInstallablePackagesForUserId(int)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int i0;
        com.android.server.pm.UserManagerService $r1;
        android.content.pm.UserInfo $r2;
        java.lang.String $r3;
        java.util.Set $r4;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $r3 = $r2.<android.content.pm.UserInfo: java.lang.String userType>;

        $r4 = virtualinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.Set getInstallablePackagesForUserType(java.lang.String)>($r3);

        return $r4;
    }

    private java.util.List getPackagesWhitelistErrors(int)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int i0;
        java.util.Set r2;
        android.content.pm.PackageManagerInternal r3;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        com.android.server.pm._$$Lambda$UserSystemPackageInstaller$eeYi7OJgsnKTv2624gTjhGpG8Y0 $r6;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isEnforceMode(int)>(i0);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistMode(int)>(i0);

        if $z2 == 0 goto label2;

     label1:
        $z1 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isLogMode(int)>(i0);

        if $z1 != 0 goto label2;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.Set getWhitelistedSystemPackages()>();

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r3 = (android.content.pm.PackageManagerInternal) $r5;

        $r6 = new com.android.server.pm._$$Lambda$UserSystemPackageInstaller$eeYi7OJgsnKTv2624gTjhGpG8Y0;

        specialinvoke $r6.<com.android.server.pm._$$Lambda$UserSystemPackageInstaller$eeYi7OJgsnKTv2624gTjhGpG8Y0: void <init>(java.util.Set,android.content.pm.PackageManagerInternal,java.util.List)>(r2, r3, $r4);

        virtualinvoke r3.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r6);

        return $r4;
    }

    private java.util.List getPackagesWhitelistWarnings()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        android.content.pm.PackageManagerInternal r2;
        java.util.Iterator r3;
        java.lang.String r4, $r9, $r11, $r13;
        java.util.ArrayList $r5;
        java.lang.Object $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r8, $r10, $r12;
        java.util.Set r14;
        com.android.server.pm.parsing.pkg.AndroidPackage r15;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r14 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.Set getWhitelistedSystemPackages()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r2 = (android.content.pm.PackageManagerInternal) $r6;

        r3 = interfaceinvoke r14.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        r15 = virtualinvoke r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r4);

        if r15 != null goto label2;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r4;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is whitelisted but not present.", $r12);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label4;

     label2:
        $z1 = interfaceinvoke r15.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 != 0 goto label3;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is whitelisted and present but not a system package.", $r10);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label4;

     label3:
        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isAutoGeneratedRRO(com.android.server.pm.parsing.pkg.AndroidPackage)>(r15);

        if $z2 == 0 goto label4;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r4;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is whitelisted but it\'s auto-generated RRO package.", $r8);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        goto label1;

     label5:
        return $r5;
    }

    private long getTypesBitSet(java.lang.Iterable, java.util.Map)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        java.util.Map r1;
        java.util.Iterator r2;
        long l0, $l3, l4;
        java.lang.Object $r3, $r4;
        byte $b1;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r10;
        java.lang.Iterable r9;
        boolean $z0;
        java.lang.Long r11;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r9 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.Map;

        l4 = 0L;

        r2 = interfaceinvoke r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r3;

        $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (java.lang.Long) $r4;

        if r11 == null goto label2;

        $l3 = virtualinvoke r11.<java.lang.Long: long longValue()>();

        l4 = l4 | $l3;

        goto label1;

     label2:
        l0 = virtualinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: long getUserTypeMask(java.lang.String)>(r10);

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label3;

        l4 = l4 | l0;

        goto label1;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SystemConfig contained an invalid user type: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("UserManagerService", $r8);

        goto label1;

     label4:
        return l4;
    }

    private int getWhitelistMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int i0, $i1;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.debug.user.package_whitelist_mode", -1);

        if i0 == -1 goto label1;

        return i0;

     label1:
        $i1 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getDeviceDefaultWhitelistMode()>();

        return $i1;
    }

    private java.util.Set getWhitelistedSystemPackages()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        android.util.ArrayMap $r1;
        java.util.Set $r2;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $r1 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.util.Set keySet()>();

        return $r2;
    }

    static boolean hasAutoGeneratedRROSuffix(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".auto_generated_rro_product__");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".auto_generated_rro_vendor__");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private static boolean isAutoGeneratedRRO(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        boolean $z0, $z1, z2;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isOverlay()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

        $z1 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean hasAutoGeneratedRROSuffix(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private static boolean isEnforceMode(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isIgnoreOtaMode(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isImplicitWhitelistMode(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isImplicitWhitelistSystemMode(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isLogMode(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$getPackagesWhitelistErrors$1(java.util.Set, android.content.pm.PackageManagerInternal, java.util.List, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        java.util.Set r0;
        android.content.pm.PackageManagerInternal r1;
        java.util.List r2;
        boolean $z0, $z1, $z2;
        com.android.server.pm.parsing.pkg.AndroidPackage $r3, r6;
        java.lang.Object[] $r4;
        java.lang.String $r5, r7;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: android.content.pm.PackageManagerInternal;

        r2 := @parameter2: java.util.List;

        r6 := @parameter3: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r6.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r7 = interfaceinvoke r6.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

        $z1 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        if $z1 != 0 goto label2;

        $r3 = virtualinvoke r1.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r7);

        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isAutoGeneratedRRO(com.android.server.pm.parsing.pkg.AndroidPackage)>($r3);

        if $z2 != 0 goto label2;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r7;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("System package %s is not whitelisted using \'install-in-user-type\' in SystemConfig for any user types!", $r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        return;
    }

    static void lambda$installWhitelistedSystemPackages$0(java.util.Set, int, boolean, boolean, android.util.ArraySet, com.android.server.pm.PackageSetting)
    {
        int i0;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7;
        com.android.server.pm.PackageSetting r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.pkg.PackageStateUnserialized $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9, $r10, r14;
        java.util.Set r11;
        android.util.ArraySet r12;
        byte b2;

        r11 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r12 := @parameter4: android.util.ArraySet;

        r0 := @parameter5: com.android.server.pm.PackageSetting;

        r1 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if r1 == null goto label10;

        $z2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z2 != 0 goto label01;

        goto label10;

     label01:
        b2 = 1;

        if r11 == null goto label02;

        $r10 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z5 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z5 == 0 goto label03;

     label02:
        $r2 = virtualinvoke r0.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z3 = virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isHiddenUntilInstalled()>();

        if $z3 != 0 goto label03;

        z6 = 1;

        goto label04;

     label03:
        z6 = 0;

     label04:
        $z7 = virtualinvoke r0.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z7 == z6 goto label09;

        $z4 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean shouldChangeInstallationState(com.android.server.pm.PackageSetting,boolean,int,boolean,boolean,android.util.ArraySet)>(r0, z6, i0, z0, z1, r12);

        if $z4 != 0 goto label05;

        goto label09;

     label05:
        virtualinvoke r0.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(z6, i0);

        if z6 == 0 goto label06;

        b2 = 0;

        goto label06;

     label06:
        virtualinvoke r0.<com.android.server.pm.PackageSetting: void setUninstallReason(int,int)>(b2, i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        if z6 == 0 goto label07;

        r14 = "Installed ";

        goto label08;

     label07:
        r14 = "Uninstalled ";

     label08:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("UserManagerService", $r9);

        return;

     label09:
        return;

     label10:
        return;
    }

    static java.lang.String modeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == -1000 goto label2;

        if i0 == -1 goto label1;

        $r0 = staticinvoke <android.util.DebugUtils: java.lang.String flagsToString(java.lang.Class,java.lang.String,int)>(class "Lcom/android/server/pm/UserSystemPackageInstaller;", "USER_TYPE_PACKAGE_WHITELIST_MODE_", i0);

        return $r0;

     label1:
        return "DEVICE_DEFAULT";

     label2:
        return "NONE";
    }

    private static boolean shouldChangeInstallationState(com.android.server.pm.PackageSetting, boolean, int, boolean, boolean, android.util.ArraySet)
    {
        com.android.server.pm.PackageSetting r0;
        int i0, $i1;
        boolean z0, z1, $z4, z5, z6, z7;
        android.util.ArraySet r1;
        java.lang.String $r2;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        z5 := @parameter1: boolean;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r1 := @parameter5: android.util.ArraySet;

        if z5 == 0 goto label2;

        z6 = 0;

        $i1 = virtualinvoke r0.<com.android.server.pm.PackageSetting: int getUninstallReason(int)>(i0);

        if $i1 != 1 goto label1;

        z6 = 1;

     label1:
        return z6;

     label2:
        if z0 != 0 goto label3;

        z7 = 0;

        if z1 == 0 goto label4;

        z7 = 0;

        $r2 = r0.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z4 = virtualinvoke r1.<android.util.ArraySet: boolean contains(java.lang.Object)>($r2);

        if $z4 != 0 goto label4;

     label3:
        z7 = 1;

     label4:
        return z7;
    }

    static boolean shouldInstallPackage(com.android.server.pm.parsing.pkg.AndroidPackage, android.util.ArrayMap, java.util.Set, boolean)
    {
        android.util.ArrayMap r0;
        java.util.Set r1;
        boolean $z0, $z1, $z2, z3, z4;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        java.lang.String r3;

        r2 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r0 := @parameter1: android.util.ArrayMap;

        r1 := @parameter2: java.util.Set;

        z3 := @parameter3: boolean;

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isAutoGeneratedRRO(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        if $z0 == 0 goto label1;

        r3 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getOverlayTarget()>();

        goto label2;

     label1:
        r3 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

     label2:
        if z3 == 0 goto label3;

        $z2 = virtualinvoke r0.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r3);

        if $z2 == 0 goto label4;

     label3:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label5;

     label4:
        z4 = 1;

        goto label6;

     label5:
        z4 = 0;

     label6:
        return z4;
    }

    private static void showIssues(com.android.internal.util.IndentingPrintWriter, boolean, java.util.List, java.lang.String)
    {
        com.android.internal.util.IndentingPrintWriter r0;
        boolean z0;
        java.util.List r1;
        java.lang.String r2, $r5;
        int i0, i1;
        java.lang.Object $r4;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: java.lang.String;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 != 0 goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("No ");

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(r2);

     label1:
        return;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i0);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void print(char)>(32);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(r2);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label4;

     label5:
        if z0 == 0 goto label6;

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label6:
        return;
    }

    android.util.ArrayMap determineWhitelistedPackagesForUserTypes(com.android.server.SystemConfig)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        java.util.Map r1;
        android.util.ArrayMap $r3, r22, r24;
        int $i0, $i1, $i2, $i3, i8, i10;
        java.lang.Long $r4, $r11, $r13, $r19, r26;
        java.lang.Object $r6, $r8, $r10, $r15, $r17;
        java.lang.String $r7, $r16, r23, r25;
        java.lang.Iterable $r9, $r18;
        byte $b4, $b7;
        long $l5, $l6, l9, l11;
        com.android.server.SystemConfig r21;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r21 := @parameter0: com.android.server.SystemConfig;

        r1 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.Map getBaseTypeBitSets()>();

        r22 = virtualinvoke r21.<com.android.server.SystemConfig: android.util.ArrayMap getAndClearPackageToUserTypeWhitelist()>();

        $r3 = new android.util.ArrayMap;

        $i0 = virtualinvoke r22.<android.util.ArrayMap: int size()>();

        $i1 = $i0 + 1;

        specialinvoke $r3.<android.util.ArrayMap: void <init>(int)>($i1);

        i8 = 0;

     label1:
        $i2 = virtualinvoke r22.<android.util.ArrayMap: int size()>();

        if i8 >= $i2 goto label3;

        $r15 = virtualinvoke r22.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i8);

        $r16 = (java.lang.String) $r15;

        r23 = virtualinvoke $r16.<java.lang.String: java.lang.String intern()>();

        $r17 = virtualinvoke r22.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i8);

        $r18 = (java.lang.Iterable) $r17;

        l9 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: long getTypesBitSet(java.lang.Iterable,java.util.Map)>($r18, r1);

        $b7 = l9 cmp 0L;

        if $b7 == 0 goto label2;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l9);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, $r19);

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        r24 = virtualinvoke r21.<com.android.server.SystemConfig: android.util.ArrayMap getAndClearPackageToUserTypeBlacklist()>();

        i10 = 0;

     label4:
        $i3 = virtualinvoke r24.<android.util.ArrayMap: int size()>();

        if i10 >= $i3 goto label7;

        $r6 = virtualinvoke r24.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i10);

        $r7 = (java.lang.String) $r6;

        r25 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        $r8 = virtualinvoke r24.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i10);

        $r9 = (java.lang.Iterable) $r8;

        l11 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: long getTypesBitSet(java.lang.Iterable,java.util.Map)>($r9, r1);

        $r10 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r25);

        r26 = (java.lang.Long) $r10;

        if r26 == null goto label5;

        $l5 = virtualinvoke r26.<java.lang.Long: long longValue()>();

        $l6 = $l5 & l11;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r13);

        goto label6;

     label5:
        $b4 = l11 cmp 0L;

        if $b4 == 0 goto label6;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r11);

     label6:
        i10 = i10 + 1;

        goto label4;

     label7:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("android", $r4);

        return $r3;
    }

    void dump(java.io.PrintWriter)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        com.android.internal.util.IndentingPrintWriter $r1;
        java.lang.Throwable $r2, $r3;
        java.io.PrintWriter r4;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r4 := @parameter0: java.io.PrintWriter;

        $r1 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r1.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r4, "    ");

     label1:
        specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: void dumpIndented(com.android.internal.util.IndentingPrintWriter)>($r1);

     label2:
        virtualinvoke $r1.<com.android.internal.util.IndentingPrintWriter: void close()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke $r1.<com.android.internal.util.IndentingPrintWriter: void close()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void dumpPackageWhitelistProblems(com.android.internal.util.IndentingPrintWriter, int, boolean, boolean)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        com.android.internal.util.IndentingPrintWriter r1;
        boolean z0, z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        java.util.List $r8, $r9;
        int i1, i2, i3;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if i1 != -1000 goto label1;

        i2 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        goto label2;

     label1:
        i2 = i1;

        if i1 != -1 goto label2;

        i2 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getDeviceDefaultWhitelistMode()>();

     label2:
        i3 = i2;

        if z1 == 0 goto label3;

        i3 = i2 & -3;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dumpPackageWhitelistProblems(): using mode ");

        $r5 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: java.lang.String modeToString(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("UserManagerService", $r7);

        $r8 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.List getPackagesWhitelistErrors(int)>(i3);

        staticinvoke <com.android.server.pm.UserSystemPackageInstaller: void showIssues(com.android.internal.util.IndentingPrintWriter,boolean,java.util.List,java.lang.String)>(r1, z0, $r8, "errors");

        if z1 == 0 goto label4;

        return;

     label4:
        $r9 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.List getPackagesWhitelistWarnings()>();

        staticinvoke <com.android.server.pm.UserSystemPackageInstaller: void showIssues(com.android.internal.util.IndentingPrintWriter,boolean,java.util.List,java.lang.String)>(r1, z0, $r9, "warnings");

        return;
    }

    java.util.Set getInstallablePackagesForUserType(java.lang.String)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, z4;
        com.android.server.pm.UserManagerService $r2;
        java.lang.String r3;
        java.util.Set r4;
        android.util.ArraySet $r5;
        java.lang.Object $r6;
        android.content.pm.PackageManagerInternal $r7;
        com.android.server.pm._$$Lambda$UserSystemPackageInstaller$BaBM2EgGaZ_mwYNdMEwnvM1_1EU $r8;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r3 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isEnforceMode(int)>(i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $z1 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistMode(int)>(i0);

        if $z1 != 0 goto label3;

        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistSystemMode(int)>(i0);

        if $z2 == 0 goto label2;

        $r2 = r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm>;

        $z3 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean isUserTypeSubtypeOfSystem(java.lang.String)>(r3);

        if $z3 == 0 goto label2;

        goto label3;

     label2:
        z4 = 0;

        goto label4;

     label3:
        z4 = 1;

     label4:
        r4 = virtualinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.Set getWhitelistedPackagesForUserType(java.lang.String)>(r3);

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r7 = (android.content.pm.PackageManagerInternal) $r6;

        $r8 = new com.android.server.pm._$$Lambda$UserSystemPackageInstaller$BaBM2EgGaZ_mwYNdMEwnvM1_1EU;

        specialinvoke $r8.<com.android.server.pm._$$Lambda$UserSystemPackageInstaller$BaBM2EgGaZ_mwYNdMEwnvM1_1EU: void <init>(com.android.server.pm.UserSystemPackageInstaller,java.util.Set,boolean,java.util.Set)>(r0, r4, z4, $r5);

        virtualinvoke $r7.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r8);

        return $r5;
    }

    long getUserTypeMask(java.lang.String)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.String[] $r2;
        long l2;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] mUserTypes>;

        i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r2, r1);

        if i0 < 0 goto label1;

        $i1 = 1 << i0;

        l2 = (long) $i1;

        goto label2;

     label1:
        l2 = 0L;

     label2:
        return l2;
    }

    java.util.Set getWhitelistedPackagesForUserType(java.lang.String)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        long l0, $l3, $l4;
        android.util.ArraySet $r2;
        android.util.ArrayMap $r3, $r4, $r5, $r7;
        int $i1, $i2, i6;
        java.lang.Object $r6, $r8;
        java.lang.Long $r9;
        byte $b5;
        java.lang.String r10, r11;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r10 := @parameter0: java.lang.String;

        l0 = virtualinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: long getUserTypeMask(java.lang.String)>(r10);

        $r2 = new android.util.ArraySet;

        $r3 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        specialinvoke $r2.<android.util.ArraySet: void <init>(int)>($i1);

        i6 = 0;

     label1:
        $r4 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $i2 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if i6 >= $i2 goto label3;

        $r5 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i6);

        r11 = (java.lang.String) $r6;

        $r7 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        $r9 = (java.lang.Long) $r8;

        $l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $l4 = l0 & $l3;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r11);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        return $r2;
    }

    boolean installWhitelistedSystemPackages(boolean, boolean, android.util.ArraySet)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        boolean z0, $z1, $z2, z3, z4;
        android.util.ArraySet r1;
        int i0, i1, i3, i4;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, r13, r14;
        java.lang.Object $r8;
        com.android.server.pm.UserManagerService $r9;
        com.android.server.pm._$$Lambda$UserSystemPackageInstaller$SWB43OEQXgI__EvtWi7AdFOngsk $r10;
        java.util.Set $r11;
        android.content.pm.PackageManagerInternal r15;
        int[] r16;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        z0 := @parameter0: boolean;

        z3 := @parameter1: boolean;

        r1 := @parameter2: android.util.ArraySet;

        i3 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: void checkWhitelistedSystemPackages(int)>(i3);

        if z3 == 0 goto label1;

        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isIgnoreOtaMode(int)>(i3);

        if $z2 != 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        if z4 != 0 goto label3;

        if z0 != 0 goto label3;

        return 0;

     label3:
        if z0 == 0 goto label4;

        $z1 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isEnforceMode(int)>(i3);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reviewing whitelisted packages due to ");

        if z0 == 0 goto label5;

        r13 = "[firstBoot]";

        goto label6;

     label5:
        r13 = "";

     label6:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        r14 = "";

        if z4 == 0 goto label7;

        r14 = "[upgrade]";

     label7:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("UserManagerService", $r7);

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r15 = (android.content.pm.PackageManagerInternal) $r8;

        $r9 = r0.<com.android.server.pm.UserSystemPackageInstaller: com.android.server.pm.UserManagerService mUm>;

        r16 = virtualinvoke $r9.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i0 = lengthof r16;

        i4 = 0;

     label8:
        if i4 >= i0 goto label9;

        i1 = r16[i4];

        $r10 = new com.android.server.pm._$$Lambda$UserSystemPackageInstaller$SWB43OEQXgI__EvtWi7AdFOngsk;

        $r11 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: java.util.Set getInstallablePackagesForUserId(int)>(i1);

        specialinvoke $r10.<com.android.server.pm._$$Lambda$UserSystemPackageInstaller$SWB43OEQXgI__EvtWi7AdFOngsk: void <init>(java.util.Set,int,boolean,boolean,android.util.ArraySet)>($r11, i1, z0, z4, r1);

        virtualinvoke r15.<android.content.pm.PackageManagerInternal: void forEachPackageSetting(java.util.function.Consumer)>($r10);

        i4 = i4 + 1;

        goto label8;

     label9:
        return 1;
    }

    boolean isEnforceMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isEnforceMode(int)>($i0);

        return $z0;
    }

    boolean isIgnoreOtaMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isIgnoreOtaMode(int)>($i0);

        return $z0;
    }

    boolean isImplicitWhitelistMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistMode(int)>($i0);

        return $z0;
    }

    boolean isImplicitWhitelistSystemMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isImplicitWhitelistSystemMode(int)>($i0);

        return $z0;
    }

    boolean isLogMode()
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        $i0 = specialinvoke r0.<com.android.server.pm.UserSystemPackageInstaller: int getWhitelistMode()>();

        $z0 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean isLogMode(int)>($i0);

        return $z0;
    }

    public void lambda$getInstallablePackagesForUserType$2$UserSystemPackageInstaller(java.util.Set, boolean, java.util.Set, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.UserSystemPackageInstaller r0;
        java.util.Set r1, r2;
        boolean z0, $z1, $z2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        android.util.ArrayMap $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.pm.UserSystemPackageInstaller;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z1 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap mWhitelistedPackagesForUserTypes>;

        $z2 = staticinvoke <com.android.server.pm.UserSystemPackageInstaller: boolean shouldInstallPackage(com.android.server.pm.parsing.pkg.AndroidPackage,android.util.ArrayMap,java.util.Set,boolean)>(r3, $r4, r1, z0);

        if $z2 == 0 goto label2;

        $r5 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r5);

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_NONE> = -1000;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_LOG> = 2;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_IMPLICIT_WHITELIST_SYSTEM> = 8;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_IMPLICIT_WHITELIST> = 4;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_IGNORE_OTA> = 16;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_ENFORCE> = 1;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_DISABLE> = 0;

        <com.android.server.pm.UserSystemPackageInstaller: int USER_TYPE_PACKAGE_WHITELIST_MODE_DEVICE_DEFAULT> = -1;

        <com.android.server.pm.UserSystemPackageInstaller: java.lang.String TAG> = "UserManagerService";

        <com.android.server.pm.UserSystemPackageInstaller: java.lang.String PACKAGE_WHITELIST_MODE_PROP> = "persist.debug.user.package_whitelist_mode";

        <com.android.server.pm.UserSystemPackageInstaller: boolean DEBUG> = 0;

        return;
    }
}
