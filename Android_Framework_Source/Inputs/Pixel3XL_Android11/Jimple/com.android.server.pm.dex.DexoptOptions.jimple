public final class com.android.server.pm.dex.DexoptOptions extends java.lang.Object
{
    public static final int DEXOPT_AS_SHARED_LIBRARY;
    public static final int DEXOPT_BOOT_COMPLETE;
    public static final int DEXOPT_CHECK_FOR_PROFILES_UPDATES;
    public static final int DEXOPT_DOWNGRADE;
    public static final int DEXOPT_FORCE;
    public static final int DEXOPT_FOR_RESTORE;
    public static final int DEXOPT_IDLE_BACKGROUND_JOB;
    public static final int DEXOPT_INSTALL_WITH_DEX_METADATA_FILE;
    public static final int DEXOPT_ONLY_SECONDARY_DEX;
    public static final int DEXOPT_ONLY_SHARED_DEX;
    private final int mCompilationReason;
    private final java.lang.String mCompilerFilter;
    private final int mFlags;
    private final java.lang.String mPackageName;
    private final java.lang.String mSplitName;

    public void <init>(java.lang.String, int, int)
    {
        com.android.server.pm.dex.DexoptOptions r0;
        java.lang.String r1, $r2;
        int i0, i1;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getCompilerFilterForReason(int)>(i0);

        specialinvoke r0.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)>(r1, i0, $r2, null, i1);

        return;
    }

    public void <init>(java.lang.String, int, java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int i0, i1, $i2;
        java.lang.String r1, r2, $r5, $r8, r9;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = 3711 & i1;

        if $i2 != 0 goto label1;

        r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mPackageName> = r9;

        r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mCompilerFilter> = r1;

        r0.<com.android.server.pm.dex.DexoptOptions: int mFlags> = i1;

        r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mSplitName> = r2;

        r0.<com.android.server.pm.dex.DexoptOptions: int mCompilationReason> = i0;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid flags : ");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void <init>(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.dex.DexoptOptions r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)>(r1, -1, r2, null, i0);

        return;
    }

    public int getCompilationReason()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mCompilationReason>;

        return $i0;
    }

    public java.lang.String getCompilerFilter()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $r1 = r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mCompilerFilter>;

        return $r1;
    }

    public int getFlags()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        return $i0;
    }

    public java.lang.String getPackageName()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $r1 = r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mPackageName>;

        return $r1;
    }

    public java.lang.String getSplitName()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $r1 = r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mSplitName>;

        return $r1;
    }

    public boolean isBootComplete()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isCheckForProfileUpdates()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDexoptAsSharedLibrary()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDexoptIdleBackgroundJob()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDexoptInstallForRestore()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDexoptInstallWithDexMetadata()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDexoptOnlySecondaryDex()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDexoptOnlySharedDex()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDowngrade()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isForce()
    {
        com.android.server.pm.dex.DexoptOptions r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public com.android.server.pm.dex.DexoptOptions overrideCompilerFilter(java.lang.String)
    {
        com.android.server.pm.dex.DexoptOptions r0, $r2;
        java.lang.String r1, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.server.pm.dex.DexoptOptions;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.android.server.pm.dex.DexoptOptions;

        $r4 = r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mPackageName>;

        $i1 = r0.<com.android.server.pm.dex.DexoptOptions: int mCompilationReason>;

        $r3 = r0.<com.android.server.pm.dex.DexoptOptions: java.lang.String mSplitName>;

        $i0 = r0.<com.android.server.pm.dex.DexoptOptions: int mFlags>;

        specialinvoke $r2.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)>($r4, $i1, r1, $r3, $i0);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_ONLY_SHARED_DEX> = 16;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_ONLY_SECONDARY_DEX> = 8;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_INSTALL_WITH_DEX_METADATA_FILE> = 1024;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_IDLE_BACKGROUND_JOB> = 512;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_FOR_RESTORE> = 2048;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_FORCE> = 2;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_DOWNGRADE> = 32;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_CHECK_FOR_PROFILES_UPDATES> = 1;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_BOOT_COMPLETE> = 4;

        <com.android.server.pm.dex.DexoptOptions: int DEXOPT_AS_SHARED_LIBRARY> = 64;

        return;
    }
}
