class com.android.server.pm.dex.PackageDynamicCodeLoading extends com.android.server.pm.AbstractStatsBase
{
    private static final char FIELD_SEPARATOR;
    static final int FILE_TYPE_DEX;
    static final int FILE_TYPE_NATIVE;
    private static final java.lang.String FILE_VERSION_HEADER;
    static final int MAX_FILES_PER_OWNER;
    private static final java.util.regex.Pattern PACKAGE_LINE_PATTERN;
    private static final java.lang.String PACKAGE_PREFIX;
    private static final java.lang.String PACKAGE_SEPARATOR;
    private static final java.lang.String TAG;
    private final java.lang.Object mLock;
    private java.util.Map mPackageMap;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.String TAG> = "PackageDynamicCodeLoading";

        <com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.String PACKAGE_SEPARATOR> = ",";

        <com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.String PACKAGE_PREFIX> = "P:";

        <com.android.server.pm.dex.PackageDynamicCodeLoading: int MAX_FILES_PER_OWNER> = 100;

        <com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.String FILE_VERSION_HEADER> = "DCL1";

        <com.android.server.pm.dex.PackageDynamicCodeLoading: int FILE_TYPE_NATIVE> = 78;

        <com.android.server.pm.dex.PackageDynamicCodeLoading: int FILE_TYPE_DEX> = 68;

        <com.android.server.pm.dex.PackageDynamicCodeLoading: char FIELD_SEPARATOR> = 58;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([A-Z]):([0-9]+):([^:]*):(.*)");

        <com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.regex.Pattern PACKAGE_LINE_PATTERN> = $r0;

        return;
    }

    void <init>()
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object $r1;
        java.util.HashMap $r2;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: void <init>(java.lang.String,java.lang.String,boolean)>("package-dcl.list", "PackageDynamicCodeLoading_DiskWriter", 0);

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap> = $r2;

        return;
    }

    static java.lang.String escape(java.lang.String)
    {
        java.lang.String r0, $r2;
        char c0;
        int $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.StringBuilder $r7;

        r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92);

        if $i1 != -1 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(10);

        if $i2 != -1 goto label1;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(13);

        if $i3 != -1 goto label1;

        return r0;

     label1:
        $r7 = new java.lang.StringBuilder;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 + 10;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i5);

        i6 = 0;

     label2:
        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        if i6 >= $i7 goto label7;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if c0 == 10 goto label5;

        if c0 == 13 goto label4;

        if c0 == 92 goto label3;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label6;

     label3:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\\\");

        goto label6;

     label4:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

        goto label6;

     label5:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

     label6:
        i6 = i6 + 1;

        goto label2;

     label7:
        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static boolean isValidFileType(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 68 goto label2;

        if i0 != 78 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private static void read(java.io.InputStream, java.util.Map) throws java.io.IOException
    {
        java.io.BufferedReader $r2;
        java.io.InputStreamReader $r3;
        java.lang.String $r4, $r9, $r10, $r18, r21, r22, r23, r25;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r5, $r14;
        java.io.IOException $r8, $r17;
        int $i0;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode $r11;
        java.util.Map $r12, r20;
        java.io.InputStream r19;

        r19 := @parameter0: java.io.InputStream;

        r20 := @parameter1: java.util.Map;

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r19);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        r21 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        $r4 = "DCL1";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z0 == 0 goto label8;

        r22 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        r23 = r22;

        if r22 == null goto label2;

        $z3 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("P:");

        if $z3 == 0 goto label1;

        r23 = r22;

        goto label2;

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed line: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r17 = new java.io.IOException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label2:
        if r23 == null goto label7;

        $r10 = "P:";

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        r25 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int)>($i0);

        $r11 = new com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode;

        specialinvoke $r11.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: void <init>(com.android.server.pm.dex.PackageDynamicCodeLoading$1)>(null);

     label3:
        r23 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        if r23 == null goto label5;

        $z2 = virtualinvoke r23.<java.lang.String: boolean startsWith(java.lang.String)>("P:");

        if $z2 == 0 goto label4;

        goto label5;

     label4:
        staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: void readFileInfo(java.lang.String,com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode)>(r23, $r11);

        goto label3;

     label5:
        $r12 = $r11.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: java.util.Map mFileUsageMap>;

        $z1 = interfaceinvoke $r12.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r11);

     label6:
        goto label2;

     label7:
        return;

     label8:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect version line: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private static void readFileInfo(java.lang.String, com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) throws java.io.IOException
    {
        java.lang.String r0, $r5, $r6, $r7, $r8, $r9, $r12, $r15, $r22, r26;
        boolean z0, $z1;
        char c0;
        int i1, $i2;
        com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile r1;
        java.util.regex.Pattern $r2;
        java.lang.RuntimeException $r17;
        java.lang.StringBuilder $r18, r29, r31, r33;
        java.io.IOException $r21, r28, r30, r32;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r23;
        java.util.regex.Matcher r24;
        java.lang.String[] r25;
        java.util.Map r27;

        r0 := @parameter0: java.lang.String;

        r23 := @parameter1: com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode;

     label1:
        $r2 = <com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.regex.Pattern PACKAGE_LINE_PATTERN>;

        r24 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        z0 = virtualinvoke r24.<java.util.regex.Matcher: boolean matches()>();

     label2:
        if z0 == 0 goto label7;

     label3:
        $r6 = virtualinvoke r24.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        c0 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $r7 = virtualinvoke r24.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $r8 = virtualinvoke r24.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        r25 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r9 = virtualinvoke r24.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        r26 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.String unescape(java.lang.String)>($r9);

        $i2 = lengthof r25;

        if $i2 == 0 goto label6;

        $z1 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: boolean isValidFileType(int)>(c0);

        if $z1 == 0 goto label5;

        r27 = r23.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: java.util.Map mFileUsageMap>;

        r1 = new com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile;

        specialinvoke r1.<com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile: void <init>(char,int,java.lang.String[],com.android.server.pm.dex.PackageDynamicCodeLoading$1)>(c0, i1, r25, null);

        interfaceinvoke r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r1);

     label4:
        return;

     label5:
        r28 = new java.io.IOException;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown file type: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw r28;

     label6:
        r30 = new java.io.IOException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed line: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw r30;

     label7:
        r32 = new java.io.IOException;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed line: ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r32.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw r32;

     label8:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse line: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = new java.io.IOException;

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r17);

        throw $r21;

        catch java.lang.RuntimeException from label1 to label2 with label8;
        catch java.lang.RuntimeException from label3 to label4 with label8;
        catch java.lang.RuntimeException from label5 to label6 with label8;
        catch java.lang.RuntimeException from label6 to label7 with label8;
        catch java.lang.RuntimeException from label7 to label8 with label8;
    }

    static java.lang.String unescape(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r6, $r10, $r16;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.StringBuilder $r1, $r2, $r12;
        java.io.IOException $r5, $r15;
        char c9;

        r0 := @parameter0: java.lang.String;

        i7 = 0;

        i8 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92);

        if i8 != -1 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i2);

     label2:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        if i8 >= $i4 goto label7;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i7, i8);

        $i5 = i8 + 1;

        c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        if c9 == 92 goto label5;

        if c9 == 110 goto label4;

        if c9 != 114 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(13);

        goto label6;

     label3:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad escape in: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = new java.io.IOException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label6;

     label5:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label6:
        i0 = i8 + 2;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(92, i0);

        i7 = i0;

        i8 = i1;

        if i1 != -1 goto label2;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i0, $i6);

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected \\ in: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = new java.io.IOException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private static void write(java.io.OutputStream, java.util.Map) throws java.io.IOException
    {
        java.util.Iterator r1, r22, r27;
        java.lang.String r2, r3, $r9, $r18, r26;
        com.android.internal.util.FastPrintWriter $r4;
        java.util.Set $r5, $r13, $r17;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r6;
        java.lang.Object $r7, $r8, $r10, $r14, $r15, $r16, $r19;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode $r11;
        java.util.Map $r12, r21;
        char $c0;
        int $i1;
        java.io.OutputStream r20;
        java.util.Map$Entry r23, r24;
        com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile r25;

        r20 := @parameter0: java.io.OutputStream;

        r21 := @parameter1: java.util.Map;

        $r4 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r4.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r20);

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>("DCL1");

        $r5 = interfaceinvoke r21.<java.util.Map: java.util.Set entrySet()>();

        r22 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r7;

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>("P:");

        $r8 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r10;

        $r12 = $r11.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: java.util.Map mFileUsageMap>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r14 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        r25 = (com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile) $r16;

        $c0 = r25.<com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile: char mFileType>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(char)>($c0);

        virtualinvoke $r4.<java.io.PrintWriter: void print(char)>(58);

        $i1 = r25.<com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile: int mUserId>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke $r4.<java.io.PrintWriter: void print(char)>(58);

        r26 = "";

        $r17 = r25.<com.android.server.pm.dex.PackageDynamicCodeLoading$DynamicCodeFile: java.util.Set mLoadingPackages>;

        r27 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r19 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r19;

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>(r26);

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        r26 = ",";

        goto label3;

     label4:
        virtualinvoke $r4.<java.io.PrintWriter: void print(char)>(58);

        $r18 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.String escape(java.lang.String)>(r2);

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        goto label2;

     label5:
        goto label1;

     label6:
        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

        $z1 = virtualinvoke $r4.<java.io.PrintWriter: boolean checkError()>();

        if $z1 != 0 goto label7;

        return;

     label7:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Writer failed");

        throw $r6;
    }

    void clear()
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1;
        java.util.Map $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.util.Set getAllPackagesWithDynamicCodeLoading()
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Throwable $r4;
        java.util.HashSet r5;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r5 = new java.util.HashSet;

        $r2 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke r5.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode getPackageDynamicCodeInfo(java.lang.String)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1, $r4;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r2, $r5, r8;
        java.util.Map $r3;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r7 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r2 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r4;

     label2:
        r8 = null;

        if r2 != null goto label3;

        goto label4;

     label3:
        $r5 = new com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode;

        specialinvoke $r5.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: void <init>(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode,com.android.server.pm.dex.PackageDynamicCodeLoading$1)>(r2, null);

        r8 = $r5;

     label4:
        exitmonitor r1;

     label5:
        return r8;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void maybeWriteAsync()
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: boolean maybeWriteAsync(java.lang.Object)>(null);

        return;
    }

    void read()
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: void read(java.lang.Object)>(null);

        return;
    }

    void read(java.io.InputStream) throws java.io.IOException
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;
        java.io.InputStream r3;
        java.lang.Object r5;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r3 := @parameter0: java.io.InputStream;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: void read(java.io.InputStream,java.util.Map)>(r3, $r1);

        r5 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap> = $r1;

        exitmonitor r5;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r5;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected volatile void readInternal(java.lang.Object)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: void readInternal(java.lang.Void)>($r2);

        return;
    }

    protected final void readInternal(java.lang.Void)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Throwable $r1, $r2, $r3;
        java.lang.Void r4;
        android.util.AtomicFile r5;
        java.io.FileInputStream r6, r7, r8, r9;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r4 := @parameter0: java.lang.Void;

        r5 = virtualinvoke r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: android.util.AtomicFile getFile()>();

        r6 = null;

        r7 = null;

        r8 = null;

     label01:
        r9 = virtualinvoke r5.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r8 = r9;

        r6 = r9;

        r7 = r9;

     label03:
        virtualinvoke r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: void read(java.io.InputStream)>(r9);

     label04:
        goto label11;

     label05:
        $r3 := @caughtexception;

        goto label09;

     label06:
        $r1 := @caughtexception;

        r8 = r6;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageDynamicCodeLoading", "Failed to parse dynamic usage for secondary code files.", $r1);

     label08:
        goto label12;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r8);

        throw $r3;

     label10:
        $r2 := @caughtexception;

        r9 = r7;

     label11:
        r6 = r9;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r6);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label10;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.FileNotFoundException from label03 to label04 with label10;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
    }

    boolean record(java.lang.String, java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.String r1, r2, $r9, r15;
        int i0, i1;
        java.lang.Object r3, $r11;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r4, r16;
        boolean z0, $z1;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r8;
        java.util.Map $r10, $r12;
        char $c2;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r15 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        $z1 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: boolean isValidFileType(int)>(i0);

        if $z1 == 0 goto label10;

        r3 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r10 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        r4 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r11;

     label02:
        r16 = r4;

        if r4 != null goto label05;

     label03:
        r16 = new com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode;

        specialinvoke r16.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: void <init>(com.android.server.pm.dex.PackageDynamicCodeLoading$1)>(null);

     label04:
        $r12 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16);

     label05:
        $c2 = (char) i0;

        z0 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: boolean access$100(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode,java.lang.String,char,int,java.lang.String)>(r16, r1, $c2, i1, r2);

        exitmonitor r3;

     label06:
        return z0;

     label07:
        $r14 := @caughtexception;

     label08:
        exitmonitor r3;

     label09:
        throw $r14;

     label10:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad file type: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    boolean removeFile(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.String r1, r10;
        int i0;
        java.lang.Object r2, $r5;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r3;
        java.util.Map $r4, $r6, $r7;
        boolean $z0, $z1;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r3 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r5;

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        return 0;

     label05:
        $z0 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: boolean access$400(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode,java.lang.String,int)>(r3, r1, i0);

        if $z0 == 0 goto label08;

        $r6 = r3.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: java.util.Map mFileUsageMap>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label06;

        $r7 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

     label06:
        exitmonitor r2;

     label07:
        return 1;

     label08:
        exitmonitor r2;

     label09:
        return 0;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    boolean removePackage(java.lang.String)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;
        boolean z0;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean removeUserPackage(java.lang.String, int)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        int i0;
        java.lang.Object r1, $r4;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r2;
        java.util.Map $r3, $r5, $r6;
        boolean $z0, $z1;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r2 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r4;

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        $z0 = staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: boolean access$300(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode,int)>(r2, i0);

        if $z0 == 0 goto label08;

        $r5 = r2.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: java.util.Map mFileUsageMap>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label06;

        $r6 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r9);

     label06:
        exitmonitor r1;

     label07:
        return 1;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void syncData(java.util.Map)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1, $r6, $r7, $r8, $r9;
        java.util.Iterator r2;
        java.util.Set r3, $r5;
        java.util.Map $r4, $r10, r12;
        boolean $z0, $z1;
        java.lang.Throwable $r11;
        java.util.Map$Entry r13;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r14;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r12 := @parameter0: java.util.Map;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r3 = (java.util.Set) $r8;

     label03:
        if r3 != null goto label06;

     label04:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label05:
        goto label07;

     label06:
        $r9 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r9;

        staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: void access$500(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode,java.util.Map,java.util.Set)>(r14, r12, r3);

        $r10 = r14.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: java.util.Map mFileUsageMap>;

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label07;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label07:
        goto label02;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void write(java.io.OutputStream) throws java.io.IOException
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1, $r9, $r10, $r12;
        java.util.HashMap r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode r5, $r11;
        java.util.Map $r6, $r7;
        int $i0;
        java.util.Set $r8;
        boolean $z0;
        java.lang.String $r13;
        java.lang.Throwable $r15;
        java.io.OutputStream r16;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r16 := @parameter0: java.io.OutputStream;

        r1 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new java.util.HashMap;

        $r6 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        specialinvoke r2.<java.util.HashMap: void <init>(int)>($i0);

        $r7 = r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: java.util.Map mPackageMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        r5 = new com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode) $r10;

        specialinvoke r5.<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: void <init>(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode,com.android.server.pm.dex.PackageDynamicCodeLoading$1)>($r11, null);

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r5);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.pm.dex.PackageDynamicCodeLoading: void write(java.io.OutputStream,java.util.Map)>(r16, r2);

        return;

     label6:
        $r15 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected volatile void writeInternal(java.lang.Object)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: void writeInternal(java.lang.Void)>($r2);

        return;
    }

    protected final void writeInternal(java.lang.Void)
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;
        android.util.AtomicFile r1;
        java.lang.Throwable $r2;
        java.lang.Void r3;
        java.io.FileOutputStream r4, r5;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        r3 := @parameter0: java.lang.Void;

        r1 = virtualinvoke r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: android.util.AtomicFile getFile()>();

        r4 = null;

     label1:
        r5 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label2:
        r4 = r5;

     label3:
        virtualinvoke r0.<com.android.server.pm.dex.PackageDynamicCodeLoading: void write(java.io.OutputStream)>(r5);

     label4:
        r4 = r5;

     label5:
        virtualinvoke r1.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r5);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        virtualinvoke r1.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r4);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageDynamicCodeLoading", "Failed to write dynamic usage for secondary code files.", $r2);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    void writeNow()
    {
        com.android.server.pm.dex.PackageDynamicCodeLoading r0;

        r0 := @this: com.android.server.pm.dex.PackageDynamicCodeLoading;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: void writeNow(java.lang.Object)>(null);

        return;
    }
}
