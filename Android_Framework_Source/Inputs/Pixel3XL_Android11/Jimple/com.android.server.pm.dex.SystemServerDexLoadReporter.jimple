public class com.android.server.pm.dex.SystemServerDexLoadReporter extends java.lang.Object implements dalvik.system.BaseDexClassLoader$Reporter
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final android.content.pm.IPackageManager mPackageManager;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.pm.dex.SystemServerDexLoadReporter: java.lang.String TAG> = "SystemServerDexLoadReporter";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SystemServerDexLoadReporter", 3);

        <com.android.server.pm.dex.SystemServerDexLoadReporter: boolean DEBUG> = $z0;

        return;
    }

    private void <init>(android.content.pm.IPackageManager)
    {
        com.android.server.pm.dex.SystemServerDexLoadReporter r0;
        android.content.pm.IPackageManager r1;

        r0 := @this: com.android.server.pm.dex.SystemServerDexLoadReporter;

        r1 := @parameter0: android.content.pm.IPackageManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.dex.SystemServerDexLoadReporter: android.content.pm.IPackageManager mPackageManager> = r1;

        return;
    }

    public static void configureSystemServerDexReporter(android.content.pm.IPackageManager)
    {
        com.android.server.pm.dex.SystemServerDexLoadReporter $r1;
        java.lang.Class $r2, $r5;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r8;
        dalvik.system.BaseDexClassLoader $r9;
        android.content.pm.IPackageManager r10;
        java.lang.ClassLoader r12;

        r10 := @parameter0: android.content.pm.IPackageManager;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServerDexLoadReporter", "Configuring system server dex reporter");

        $r1 = new com.android.server.pm.dex.SystemServerDexLoadReporter;

        specialinvoke $r1.<com.android.server.pm.dex.SystemServerDexLoadReporter: void <init>(android.content.pm.IPackageManager)>(r10);

        staticinvoke <dalvik.system.BaseDexClassLoader: void setReporter(dalvik.system.BaseDexClassLoader$Reporter)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        r12 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = r12 instanceof dalvik.system.BaseDexClassLoader;

        if $z0 == 0 goto label1;

        $r9 = (dalvik.system.BaseDexClassLoader) r12;

        virtualinvoke $r9.<dalvik.system.BaseDexClassLoader: void reportClassLoaderChain()>();

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System server class loader is not a BaseDexClassLoader. type=");

        $r5 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("SystemServerDexLoadReporter", $r8);

     label2:
        return;
    }

    public void report(java.util.Map)
    {
        com.android.server.pm.dex.SystemServerDexLoadReporter r0;
        boolean $z0, $z1;
        android.content.pm.IPackageManager $r2;
        dalvik.system.VMRuntime $r3;
        java.lang.String $r4, $r8;
        java.lang.StringBuilder $r5;
        android.os.RemoteException $r9;
        java.util.Map r10;

        r0 := @this: com.android.server.pm.dex.SystemServerDexLoadReporter;

        r10 := @parameter0: java.util.Map;

        $z0 = <com.android.server.pm.dex.SystemServerDexLoadReporter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServerDexLoadReporter", $r8);

     label1:
        $z1 = interfaceinvoke r10.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("SystemServerDexLoadReporter", "Bad call to DexLoadReporter: empty classLoaderContextMap");

        return;

     label2:
        $r2 = r0.<com.android.server.pm.dex.SystemServerDexLoadReporter: android.content.pm.IPackageManager mPackageManager>;

        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r4 = virtualinvoke $r3.<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>();

        interfaceinvoke $r2.<android.content.pm.IPackageManager: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>("android", r10, $r4);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }
}
