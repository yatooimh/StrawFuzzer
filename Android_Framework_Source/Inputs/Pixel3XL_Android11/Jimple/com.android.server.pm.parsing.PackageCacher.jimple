public class com.android.server.pm.parsing.PackageCacher extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final java.util.concurrent.atomic.AtomicInteger sCachedPackageReadCount;
    private java.io.File mCacheDir;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        <com.android.server.pm.parsing.PackageCacher: java.lang.String TAG> = "PackageCacher";

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <com.android.server.pm.parsing.PackageCacher: java.util.concurrent.atomic.AtomicInteger sCachedPackageReadCount> = $r0;

        return;
    }

    public void <init>(java.io.File)
    {
        com.android.server.pm.parsing.PackageCacher r0;
        java.io.File r1;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.parsing.PackageCacher: java.io.File mCacheDir> = r1;

        return;
    }

    public static com.android.server.pm.parsing.pkg.ParsedPackage fromCacheEntryStatic(byte[])
    {
        android.os.Parcel r0;
        int $i0;
        android.content.pm.PackageParserCacheHelper$ReadHelper $r1;
        com.android.server.pm.parsing.pkg.PackageImpl $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        byte[] r4;

        r4 := @parameter0: byte[];

        r0 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $i0 = lengthof r4;

        virtualinvoke r0.<android.os.Parcel: void unmarshall(byte[],int,int)>(r4, 0, $i0);

        virtualinvoke r0.<android.os.Parcel: void setDataPosition(int)>(0);

        $r1 = new android.content.pm.PackageParserCacheHelper$ReadHelper;

        specialinvoke $r1.<android.content.pm.PackageParserCacheHelper$ReadHelper: void <init>(android.os.Parcel)>(r0);

        virtualinvoke $r1.<android.content.pm.PackageParserCacheHelper$ReadHelper: void startAndInstall()>();

        $r2 = new com.android.server.pm.parsing.pkg.PackageImpl;

        specialinvoke $r2.<com.android.server.pm.parsing.pkg.PackageImpl: void <init>(android.os.Parcel)>(r0);

        virtualinvoke r0.<android.os.Parcel: void recycle()>();

        $r3 = <com.android.server.pm.parsing.PackageCacher: java.util.concurrent.atomic.AtomicInteger sCachedPackageReadCount>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return $r2;
    }

    private java.lang.String getCacheKey(java.io.File, int)
    {
        com.android.server.pm.parsing.PackageCacher r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r5;
        java.io.File r6;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r6 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r6.<java.io.File: java.lang.String getName()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static boolean isCacheUpToDate(java.io.File, java.io.File)
    {
        long l0, l1;
        java.lang.String $r0, $r1;
        byte $b2;
        java.lang.Throwable $r2;
        int $i3, $i4;
        java.io.File r3, r4;
        boolean z0;
        android.system.StructStat r5, r6;
        android.system.ErrnoException r8;

        r3 := @parameter0: java.io.File;

        r4 := @parameter1: java.io.File;

        z0 = 0;

     label1:
        $r0 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r5 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>($r0);

        $r1 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        r6 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>($r1);

        l0 = r5.<android.system.StructStat: long st_mtime>;

        l1 = r6.<android.system.StructStat: long st_mtime>;

     label2:
        $b2 = l0 cmp l1;

        if $b2 >= 0 goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r2 := @caughtexception;

        r8 = (android.system.ErrnoException) $r2;

        $i4 = r8.<android.system.ErrnoException: int errno>;

        $i3 = <android.system.OsConstants: int ENOENT>;

        if $i4 == $i3 goto label5;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("Error while stating package cache : ", $r2);

     label5:
        return 0;

        catch android.system.ErrnoException from label1 to label2 with label4;
    }

    static boolean lambda$cleanCachedResult$0(java.lang.String, java.io.File, java.lang.String)
    {
        java.lang.String r0, r2;
        java.io.File r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        return $z0;
    }

    public static byte[] toCacheEntryStatic(com.android.server.pm.parsing.pkg.ParsedPackage)
    {
        android.os.Parcel r0;
        android.content.pm.PackageParserCacheHelper$WriteHelper $r2;
        com.android.server.pm.parsing.pkg.ParsedPackage r3;
        byte[] r4;

        r3 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        r0 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r2 = new android.content.pm.PackageParserCacheHelper$WriteHelper;

        specialinvoke $r2.<android.content.pm.PackageParserCacheHelper$WriteHelper: void <init>(android.os.Parcel)>(r0);

        interfaceinvoke r3.<com.android.server.pm.parsing.pkg.ParsedPackage: void writeToParcel(android.os.Parcel,int)>(r0, 0);

        virtualinvoke $r2.<android.content.pm.PackageParserCacheHelper$WriteHelper: void finishAndUninstall()>();

        r4 = virtualinvoke r0.<android.os.Parcel: byte[] marshall()>();

        virtualinvoke r0.<android.os.Parcel: void recycle()>();

        return r4;
    }

    public void cacheResult(java.io.File, int, com.android.server.pm.parsing.pkg.ParsedPackage)
    {
        com.android.server.pm.parsing.PackageCacher r0;
        int i0;
        java.io.File $r1, r9, r12;
        boolean $z0, $z1;
        java.lang.String $r4, r11;
        java.lang.Throwable $r5, $r6, $r7, $r8;
        com.android.server.pm.parsing.pkg.ParsedPackage r10;
        java.lang.StringBuilder r13;
        byte[] r14;
        java.io.FileOutputStream r15;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r9 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r10 := @parameter2: com.android.server.pm.parsing.pkg.ParsedPackage;

     label01:
        r11 = specialinvoke r0.<com.android.server.pm.parsing.PackageCacher: java.lang.String getCacheKey(java.io.File,int)>(r9, i0);

        r12 = new java.io.File;

        $r1 = r0.<com.android.server.pm.parsing.PackageCacher: java.io.File mCacheDir>;

        specialinvoke r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, r11);

        $z0 = virtualinvoke r12.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label02;

        $z1 = virtualinvoke r12.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label02;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete cache file: ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r4 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageCacher", $r4);

     label02:
        r14 = virtualinvoke r0.<com.android.server.pm.parsing.PackageCacher: byte[] toCacheEntry(com.android.server.pm.parsing.pkg.ParsedPackage)>(r10);

     label03:
        if r14 != null goto label04;

        return;

     label04:
        r15 = new java.io.FileOutputStream;

        specialinvoke r15.<java.io.FileOutputStream: void <init>(java.io.File)>(r12);

     label05:
        virtualinvoke r15.<java.io.FileOutputStream: void write(byte[])>(r14);

     label06:
        virtualinvoke r15.<java.io.FileOutputStream: void close()>();

     label07:
        goto label16;

     label08:
        $r6 := @caughtexception;

     label09:
        virtualinvoke r15.<java.io.FileOutputStream: void close()>();

     label10:
        goto label13;

     label11:
        $r5 := @caughtexception;

     label12:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label13:
        throw $r6;

     label14:
        $r8 := @caughtexception;

     label15:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageCacher", "Error writing cache entry.", $r8);

        virtualinvoke r12.<java.io.File: boolean delete()>();

     label16:
        goto label18;

     label17:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageCacher", "Error saving package cache.", $r7);

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.io.IOException from label04 to label05 with label14;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label13 to label14 with label14;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void cleanCachedResult(java.io.File)
    {
        com.android.server.pm.parsing.PackageCacher r0;
        java.io.File[] r1;
        int i0, i2;
        com.android.server.pm.parsing._$$Lambda$PackageCacher$m5SLKIgIcu0a0YKFji5p6LENHas $r3;
        java.io.File $r4, r9, r11;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r10;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r9 := @parameter0: java.io.File;

        r10 = virtualinvoke r9.<java.io.File: java.lang.String getName()>();

        $r4 = r0.<com.android.server.pm.parsing.PackageCacher: java.io.File mCacheDir>;

        $r3 = new com.android.server.pm.parsing._$$Lambda$PackageCacher$m5SLKIgIcu0a0YKFji5p6LENHas;

        specialinvoke $r3.<com.android.server.pm.parsing._$$Lambda$PackageCacher$m5SLKIgIcu0a0YKFji5p6LENHas: void <init>(java.lang.String)>(r10);

        r1 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File,java.io.FilenameFilter)>($r4, $r3);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r11 = r1[i2];

        $z0 = virtualinvoke r11.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to clean cache file: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageCacher", $r8);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    protected com.android.server.pm.parsing.pkg.ParsedPackage fromCacheEntry(byte[])
    {
        com.android.server.pm.parsing.PackageCacher r0;
        byte[] r1;
        com.android.server.pm.parsing.pkg.ParsedPackage $r2;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <com.android.server.pm.parsing.PackageCacher: com.android.server.pm.parsing.pkg.ParsedPackage fromCacheEntryStatic(byte[])>(r1);

        return $r2;
    }

    public com.android.server.pm.parsing.pkg.ParsedPackage getCachedResult(java.io.File, int)
    {
        com.android.server.pm.parsing.PackageCacher r0;
        int i0;
        java.io.File $r1, $r2, r6;
        boolean $z0;
        java.lang.String $r3, r7;
        byte[] $r4;
        java.lang.Throwable $r5;
        com.android.server.pm.parsing.pkg.ParsedPackage r9;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r6 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r7 = specialinvoke r0.<com.android.server.pm.parsing.PackageCacher: java.lang.String getCacheKey(java.io.File,int)>(r6, i0);

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.pm.parsing.PackageCacher: java.io.File mCacheDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, r7);

     label1:
        $z0 = staticinvoke <com.android.server.pm.parsing.PackageCacher: boolean isCacheUpToDate(java.io.File,java.io.File)>(r6, $r1);

        if $z0 != 0 goto label3;

     label2:
        return null;

     label3:
        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = staticinvoke <libcore.io.IoUtils: byte[] readFileAsByteArray(java.lang.String)>($r3);

        r9 = virtualinvoke r0.<com.android.server.pm.parsing.PackageCacher: com.android.server.pm.parsing.pkg.ParsedPackage fromCacheEntry(byte[])>($r4);

     label4:
        return r9;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageCacher", "Error reading package cache: ", $r5);

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return null;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected byte[] toCacheEntry(com.android.server.pm.parsing.pkg.ParsedPackage)
    {
        com.android.server.pm.parsing.PackageCacher r0;
        com.android.server.pm.parsing.pkg.ParsedPackage r1;
        byte[] $r2;

        r0 := @this: com.android.server.pm.parsing.PackageCacher;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        $r2 = staticinvoke <com.android.server.pm.parsing.PackageCacher: byte[] toCacheEntryStatic(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        return $r2;
    }
}
