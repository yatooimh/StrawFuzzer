public class com.android.server.pm.parsing.library.AndroidTestBaseUpdater extends com.android.server.pm.parsing.library.PackageSharedLibraryUpdater
{
    private static final long REMOVE_ANDROID_TEST_BASE;
    private static final java.lang.String TAG;

    public void <init>()
    {
        com.android.server.pm.parsing.library.AndroidTestBaseUpdater r0;

        r0 := @this: com.android.server.pm.parsing.library.AndroidTestBaseUpdater;

        specialinvoke r0.<com.android.server.pm.parsing.library.PackageSharedLibraryUpdater: void <init>()>();

        return;
    }

    private static boolean isChangeEnabled(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        boolean $z0, z1, z2;
        int $i0;
        android.os.IBinder $r1;
        android.content.pm.ApplicationInfo $r2;
        java.lang.Exception $r3;
        com.android.internal.compat.IPlatformCompat r4;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z0 != 0 goto label4;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("platform_compat");

        r4 = staticinvoke <com.android.internal.compat.IPlatformCompat$Stub: com.android.internal.compat.IPlatformCompat asInterface(android.os.IBinder)>($r1);

     label1:
        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        z1 = interfaceinvoke r4.<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>(133396946L, $r2);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestBaseUpdater", "Failed to get a response from PLATFORM_COMPAT_SERVICE", $r3);

     label4:
        $i0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i0 <= 29 goto label5;

        z2 = 1;

        goto label6;

     label5:
        z2 = 0;

     label6:
        return z2;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage, boolean)
    {
        com.android.server.pm.parsing.library.AndroidTestBaseUpdater r0;
        com.android.server.pm.parsing.pkg.ParsedPackage r1;
        boolean z0, $z1;

        r0 := @this: com.android.server.pm.parsing.library.AndroidTestBaseUpdater;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <com.android.server.pm.parsing.library.AndroidTestBaseUpdater: boolean isChangeEnabled(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<com.android.server.pm.parsing.library.AndroidTestBaseUpdater: void prefixRequiredLibrary(com.android.server.pm.parsing.pkg.ParsedPackage,java.lang.String)>(r1, "android.test.base");

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.pm.parsing.library.AndroidTestBaseUpdater: void prefixImplicitDependency(com.android.server.pm.parsing.pkg.ParsedPackage,java.lang.String,java.lang.String)>(r1, "android.test.runner", "android.test.base");

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.parsing.library.AndroidTestBaseUpdater: java.lang.String TAG> = "AndroidTestBaseUpdater";

        <com.android.server.pm.parsing.library.AndroidTestBaseUpdater: long REMOVE_ANDROID_TEST_BASE> = 133396946L;

        return;
    }
}
