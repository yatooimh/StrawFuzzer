public class com.android.server.pm.parsing.library.PackageBackwardCompatibility extends com.android.server.pm.parsing.library.PackageSharedLibraryUpdater
{
    private static final com.android.server.pm.parsing.library.PackageBackwardCompatibility INSTANCE;
    private static final java.lang.String TAG;
    private final boolean mBootClassPathContainsATB;
    private final com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[] mPackageUpdaters;

    static void <clinit>()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3;
        com.android.server.pm.parsing.library.ComGoogleAndroidMapsUpdater $r4;
        com.android.server.pm.parsing.library.OrgApacheHttpLegacyUpdater $r5;
        com.android.server.pm.parsing.library.AndroidHidlUpdater $r6;
        com.android.server.pm.parsing.library.PackageBackwardCompatibility$AndroidTestRunnerSplitUpdater $r7;
        com.android.server.pm.parsing.library.PackageBackwardCompatibility $r8;
        boolean $z4, $z5;
        com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[] $r9, $r11;
        java.lang.Object[] $r10;

        $r1 = class "Lcom/android/server/pm/parsing/library/PackageBackwardCompatibility;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.pm.parsing.library.PackageBackwardCompatibility: java.lang.String TAG> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new com.android.server.pm.parsing.library.ComGoogleAndroidMapsUpdater;

        specialinvoke $r4.<com.android.server.pm.parsing.library.ComGoogleAndroidMapsUpdater: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = new com.android.server.pm.parsing.library.OrgApacheHttpLegacyUpdater;

        specialinvoke $r5.<com.android.server.pm.parsing.library.OrgApacheHttpLegacyUpdater: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = new com.android.server.pm.parsing.library.AndroidHidlUpdater;

        specialinvoke $r6.<com.android.server.pm.parsing.library.AndroidHidlUpdater: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = new com.android.server.pm.parsing.library.PackageBackwardCompatibility$AndroidTestRunnerSplitUpdater;

        specialinvoke $r7.<com.android.server.pm.parsing.library.PackageBackwardCompatibility$AndroidTestRunnerSplitUpdater: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new com.android.server.pm.parsing.library.PackageBackwardCompatibility;

        $z4 = staticinvoke <com.android.server.pm.parsing.library.PackageBackwardCompatibility: boolean addUpdaterForAndroidTestBase(java.util.List)>($r3);

        $z5 = $z4 ^ 1;

        $r9 = newarray (com.android.server.pm.parsing.library.PackageSharedLibraryUpdater)[0];

        $r10 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[]) $r10;

        specialinvoke $r8.<com.android.server.pm.parsing.library.PackageBackwardCompatibility: void <init>(boolean,com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[])>($z5, $r11);

        <com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageBackwardCompatibility INSTANCE> = $r8;

        return;
    }

    private void <init>(boolean, com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[])
    {
        com.android.server.pm.parsing.library.PackageBackwardCompatibility r0;
        boolean z0;
        com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[] r1;

        r0 := @this: com.android.server.pm.parsing.library.PackageBackwardCompatibility;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[];

        specialinvoke r0.<com.android.server.pm.parsing.library.PackageSharedLibraryUpdater: void <init>()>();

        r0.<com.android.server.pm.parsing.library.PackageBackwardCompatibility: boolean mBootClassPathContainsATB> = z0;

        r0.<com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[] mPackageUpdaters> = r1;

        return;
    }

    private static boolean addUpdaterForAndroidTestBase(java.util.List)
    {
        java.util.List r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;
        java.lang.String $r6, $r14, r15, r18;
        com.android.server.pm.parsing.library.PackageBackwardCompatibility$RemoveUnnecessaryAndroidTestBaseLibrary $r7;
        com.android.server.pm.parsing.library.AndroidTestBaseUpdater $r8;
        java.lang.ClassNotFoundException $r9;
        java.lang.StringBuilder $r10, r16;
        boolean z2, z3;

        r0 := @parameter0: java.util.List;

        z2 = 0;

     label01:
        $r1 = class "Landroid/content/pm/PackageParser;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("android.content.pm.AndroidTestBaseUpdater");

        if $r3 == null goto label03;

     label02:
        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        z2 = z3;

     label05:
        r15 = <com.android.server.pm.parsing.library.PackageBackwardCompatibility: java.lang.String TAG>;

     label06:
        z2 = z3;

     label07:
        r16 = new java.lang.StringBuilder;

     label08:
        z2 = z3;

     label09:
        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

     label10:
        z2 = z3;

     label11:
        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded ");

     label12:
        z2 = z3;

     label13:
        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.content.pm.AndroidTestBaseUpdater");

     label14:
        z2 = z3;

     label15:
        $r6 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r15, $r6);

     label16:
        z2 = z3;

        goto label18;

     label17:
        $r9 := @caughtexception;

        r18 = <com.android.server.pm.parsing.library.PackageBackwardCompatibility: java.lang.String TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.content.pm.AndroidTestBaseUpdater");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r18, $r14);

     label18:
        if z2 == 0 goto label19;

        $r8 = new com.android.server.pm.parsing.library.AndroidTestBaseUpdater;

        specialinvoke $r8.<com.android.server.pm.parsing.library.AndroidTestBaseUpdater: void <init>()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label20;

     label19:
        $r7 = new com.android.server.pm.parsing.library.PackageBackwardCompatibility$RemoveUnnecessaryAndroidTestBaseLibrary;

        specialinvoke $r7.<com.android.server.pm.parsing.library.PackageBackwardCompatibility$RemoveUnnecessaryAndroidTestBaseLibrary: void <init>()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label20:
        return z2;

        catch java.lang.ClassNotFoundException from label01 to label02 with label17;
        catch java.lang.ClassNotFoundException from label05 to label06 with label17;
        catch java.lang.ClassNotFoundException from label07 to label08 with label17;
        catch java.lang.ClassNotFoundException from label09 to label10 with label17;
        catch java.lang.ClassNotFoundException from label11 to label12 with label17;
        catch java.lang.ClassNotFoundException from label13 to label14 with label17;
        catch java.lang.ClassNotFoundException from label15 to label16 with label17;
    }

    public static boolean bootClassPathContainsATB()
    {
        com.android.server.pm.parsing.library.PackageBackwardCompatibility $r0;
        boolean $z0;

        $r0 = <com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageBackwardCompatibility INSTANCE>;

        $z0 = $r0.<com.android.server.pm.parsing.library.PackageBackwardCompatibility: boolean mBootClassPathContainsATB>;

        return $z0;
    }

    public static com.android.server.pm.parsing.library.PackageSharedLibraryUpdater getInstance()
    {
        com.android.server.pm.parsing.library.PackageBackwardCompatibility $r0;

        $r0 = <com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageBackwardCompatibility INSTANCE>;

        return $r0;
    }

    public static void modifySharedLibraries(com.android.server.pm.parsing.pkg.ParsedPackage, boolean)
    {
        com.android.server.pm.parsing.pkg.ParsedPackage r0;
        boolean z0;
        com.android.server.pm.parsing.library.PackageBackwardCompatibility $r1;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        z0 := @parameter1: boolean;

        $r1 = <com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageBackwardCompatibility INSTANCE>;

        virtualinvoke $r1.<com.android.server.pm.parsing.library.PackageBackwardCompatibility: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>(r0, z0);

        return;
    }

    public void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage, boolean)
    {
        com.android.server.pm.parsing.library.PackageBackwardCompatibility r0;
        com.android.server.pm.parsing.pkg.ParsedPackage r1;
        boolean z0;
        com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[] r2;
        int i0, i1;
        com.android.server.pm.parsing.library.PackageSharedLibraryUpdater $r3;

        r0 := @this: com.android.server.pm.parsing.library.PackageBackwardCompatibility;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        z0 := @parameter1: boolean;

        r2 = r0.<com.android.server.pm.parsing.library.PackageBackwardCompatibility: com.android.server.pm.parsing.library.PackageSharedLibraryUpdater[] mPackageUpdaters>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<com.android.server.pm.parsing.library.PackageSharedLibraryUpdater: void updatePackage(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>(r1, z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
