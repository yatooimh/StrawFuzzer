public class com.android.server.pm.permission.PermissionManagerService$Injector extends java.lang.Object
{
    private final android.content.Context mContext;

    public void <init>(android.content.Context)
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService$Injector: android.content.Context mContext> = r1;

        return;
    }

    public int checkPermission(java.lang.String, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.Context $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService$Injector: android.content.Context mContext>;

        $i2 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

        return $i2;
    }

    public long clearCallingIdentity()
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        long $l0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        return $l0;
    }

    public void disablePackageNamePermissionCache()
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        staticinvoke <android.permission.PermissionManager: void disablePackageNamePermissionCache()>();

        return;
    }

    public void disablePermissionCache()
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        staticinvoke <android.permission.PermissionManager: void disablePermissionCache()>();

        return;
    }

    public int getCallingPid()
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        int $i0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        return $i0;
    }

    public int getCallingUid()
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        int $i0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i0;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>(r1);

        return $r3;
    }

    public void invalidatePackageInfoCache()
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        staticinvoke <android.content.pm.PackageManager: void invalidatePackageInfoCache()>();

        return;
    }

    public void restoreCallingIdentity(long)
    {
        com.android.server.pm.permission.PermissionManagerService$Injector r0;
        long l0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService$Injector;

        l0 := @parameter0: long;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;
    }
}
