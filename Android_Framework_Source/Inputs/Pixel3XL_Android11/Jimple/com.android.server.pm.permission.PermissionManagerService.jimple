public class com.android.server.pm.permission.PermissionManagerService extends android.permission.IPermissionManager$Stub
{
    private static final long BACKGROUND_RATIONALE_CHANGE_ID;
    private static final long BACKUP_TIMEOUT_MILLIS;
    private static final int BLOCKING_PERMISSION_FLAGS;
    private static final int[] EMPTY_INT_ARRAY;
    private static final java.util.Map FULLER_PERMISSION_MAP;
    private static final int GRANT_DENIED;
    private static final int GRANT_INSTALL;
    private static final int GRANT_RUNTIME;
    private static final int GRANT_UPGRADE;
    private static final int MAX_PERMISSION_TREE_FOOTPRINT;
    private static final java.lang.String TAG;
    private static final int UPDATE_PERMISSIONS_ALL;
    private static final int UPDATE_PERMISSIONS_REPLACE_ALL;
    private static final int UPDATE_PERMISSIONS_REPLACE_PKG;
    private static final int USER_PERMISSION_FLAGS;
    private final android.app.AppOpsManager mAppOpsManager;
    private android.util.ArrayMap mBackgroundPermissions;
    private android.permission.PermissionManagerInternal$CheckPermissionDelegate mCheckPermissionDelegate;
    private final android.content.Context mContext;
    private com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider mDefaultBrowserProvider;
    private com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider mDefaultDialerProvider;
    private com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider mDefaultHomeProvider;
    private com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback;
    private final com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy;
    private final int[] mGlobalGids;
    private final android.os.Handler mHandler;
    private final android.os.HandlerThread mHandlerThread;
    private final android.util.SparseBooleanArray mHasNoDelayedPermBackup;
    private final com.android.server.pm.permission.PermissionManagerService$Injector mInjector;
    private final java.lang.Object mLock;
    private final com.android.internal.logging.MetricsLogger mMetricsLogger;
    private final com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners;
    private final android.util.SparseArray mOneTimePermissionUserManagers;
    private final android.content.pm.PackageManagerInternal mPackageManagerInt;
    private android.permission.PermissionControllerManager mPermissionControllerManager;
    private com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal;
    private final com.android.internal.compat.IPlatformCompat mPlatformCompat;
    private android.util.ArraySet mPrivappPermissionsViolations;
    private final java.util.ArrayList mRuntimePermissionStateChangedListeners;
    private final com.android.server.pm.permission.PermissionSettings mSettings;
    private final android.util.SparseArray mSystemPermissions;
    private boolean mSystemReady;
    private final android.os.UserManagerInternal mUserManagerInt;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        int[] $r2;
        java.util.HashMap $r3;
        java.util.Map $r5;

        <com.android.server.pm.permission.PermissionManagerService: int USER_PERMISSION_FLAGS> = 3;

        <com.android.server.pm.permission.PermissionManagerService: int UPDATE_PERMISSIONS_REPLACE_PKG> = 2;

        <com.android.server.pm.permission.PermissionManagerService: int UPDATE_PERMISSIONS_REPLACE_ALL> = 4;

        <com.android.server.pm.permission.PermissionManagerService: int UPDATE_PERMISSIONS_ALL> = 1;

        <com.android.server.pm.permission.PermissionManagerService: java.lang.String TAG> = "PackageManager";

        <com.android.server.pm.permission.PermissionManagerService: int MAX_PERMISSION_TREE_FOOTPRINT> = 32768;

        <com.android.server.pm.permission.PermissionManagerService: int GRANT_UPGRADE> = 4;

        <com.android.server.pm.permission.PermissionManagerService: int GRANT_RUNTIME> = 3;

        <com.android.server.pm.permission.PermissionManagerService: int GRANT_INSTALL> = 2;

        <com.android.server.pm.permission.PermissionManagerService: int GRANT_DENIED> = 1;

        <com.android.server.pm.permission.PermissionManagerService: int BLOCKING_PERMISSION_FLAGS> = 52;

        <com.android.server.pm.permission.PermissionManagerService: long BACKGROUND_RATIONALE_CHANGE_ID> = 147316723L;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(60L);

        <com.android.server.pm.permission.PermissionManagerService: long BACKUP_TIMEOUT_MILLIS> = $l0;

        $r2 = newarray (int)[0];

        <com.android.server.pm.permission.PermissionManagerService: int[] EMPTY_INT_ARRAY> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <com.android.server.pm.permission.PermissionManagerService: java.util.Map FULLER_PERMISSION_MAP> = $r3;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.permission.ACCESS_COARSE_LOCATION", "android.permission.ACCESS_FINE_LOCATION");

        $r5 = <com.android.server.pm.permission.PermissionManagerService: java.util.Map FULLER_PERMISSION_MAP>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.permission.INTERACT_ACROSS_USERS", "android.permission.INTERACT_ACROSS_USERS_FULL");

        return;
    }

    void <init>(android.content.Context, java.lang.Object)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.content.Context r1;
        java.lang.Object r2;
        com.android.server.pm.permission.PermissionManagerService$Injector $r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Object;

        $r3 = new com.android.server.pm.permission.PermissionManagerService$Injector;

        specialinvoke $r3.<com.android.server.pm.permission.PermissionManagerService$Injector: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void <init>(android.content.Context,java.lang.Object,com.android.server.pm.permission.PermissionManagerService$Injector)>(r1, r2, $r3);

        return;
    }

    void <init>(android.content.Context, java.lang.Object, com.android.server.pm.permission.PermissionManagerService$Injector)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.util.ArrayMap r1;
        com.android.server.SystemConfig$PermissionEntry r2;
        android.util.SparseArray $r3, $r29;
        com.android.internal.logging.MetricsLogger $r4;
        android.os.IBinder $r5;
        com.android.internal.compat.IPlatformCompat $r6;
        android.util.SparseBooleanArray $r7;
        java.util.ArrayList $r8;
        com.android.server.pm.permission.PermissionManagerService$1 $r9;
        com.android.server.pm.permission.PermissionManagerService$Injector $r10, $r11, r47;
        java.lang.Object $r12, $r14, $r17, $r18, $r36, r46, r50;
        android.content.pm.PackageManagerInternal $r13;
        android.os.UserManagerInternal $r15;
        com.android.server.pm.permission.PermissionSettings $r16, $r38, $r43;
        android.app.AppOpsManager $r19;
        com.android.server.ServiceThread $r20;
        android.os.Handler $r21, $r25;
        android.os.HandlerThread $r22, $r27;
        android.os.Looper $r23, $r28, $r33;
        com.android.server.Watchdog $r24;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r26;
        int[] $r30, $r39, $r40;
        com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners $r31;
        com.android.server.FgThread $r32;
        com.android.server.SystemConfig $r34, r49;
        int $i0, i1;
        com.android.server.pm.permission.PermissionManagerService$PermissionManagerServiceInternalImpl $r35;
        java.lang.String $r37, $r41, $r42;
        boolean $z0;
        java.lang.Throwable $r44;
        android.content.Context r45;
        com.android.server.pm.permission.BasePermission r51, r52;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r45 := @parameter0: android.content.Context;

        r46 := @parameter1: java.lang.Object;

        r47 := @parameter2: com.android.server.pm.permission.PermissionManagerService$Injector;

        specialinvoke r0.<android.permission.IPermissionManager$Stub: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseArray mOneTimePermissionUserManagers> = $r3;

        $r4 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r4.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.internal.logging.MetricsLogger mMetricsLogger> = $r4;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("platform_compat");

        $r6 = staticinvoke <com.android.internal.compat.IPlatformCompat$Stub: com.android.internal.compat.IPlatformCompat asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.internal.compat.IPlatformCompat mPlatformCompat> = $r6;

        $r7 = new android.util.SparseBooleanArray;

        specialinvoke $r7.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseBooleanArray mHasNoDelayedPermBackup> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: java.util.ArrayList mRuntimePermissionStateChangedListeners> = $r8;

        $r9 = new com.android.server.pm.permission.PermissionManagerService$1;

        specialinvoke $r9.<com.android.server.pm.permission.PermissionManagerService$1: void <init>(com.android.server.pm.permission.PermissionManagerService)>(r0);

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback> = $r9;

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector> = r47;

        virtualinvoke r47.<com.android.server.pm.permission.PermissionManagerService$Injector: void invalidatePackageInfoCache()>();

        $r10 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        virtualinvoke $r10.<com.android.server.pm.permission.PermissionManagerService$Injector: void disablePermissionCache()>();

        $r11 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        virtualinvoke $r11.<com.android.server.pm.permission.PermissionManagerService$Injector: void disablePackageNamePermissionCache()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext> = r45;

        r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock> = r46;

        $r12 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r13 = (android.content.pm.PackageManagerInternal) $r12;

        r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt> = $r13;

        $r14 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r15 = (android.os.UserManagerInternal) $r14;

        r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt> = $r15;

        $r16 = new com.android.server.pm.permission.PermissionSettings;

        $r17 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        specialinvoke $r16.<com.android.server.pm.permission.PermissionSettings: void <init>(java.lang.Object)>($r17);

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings> = $r16;

        $r18 = virtualinvoke r45.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r19 = (android.app.AppOpsManager) $r18;

        r0.<com.android.server.pm.permission.PermissionManagerService: android.app.AppOpsManager mAppOpsManager> = $r19;

        $r20 = new com.android.server.ServiceThread;

        specialinvoke $r20.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("PackageManager", 10, 1);

        r0.<com.android.server.pm.permission.PermissionManagerService: android.os.HandlerThread mHandlerThread> = $r20;

        virtualinvoke $r20.<android.os.HandlerThread: void start()>();

        $r21 = new android.os.Handler;

        $r22 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.HandlerThread mHandlerThread>;

        $r23 = virtualinvoke $r22.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r21.<android.os.Handler: void <init>(android.os.Looper)>($r23);

        r0.<com.android.server.pm.permission.PermissionManagerService: android.os.Handler mHandler> = $r21;

        $r24 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r25 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.Handler mHandler>;

        virtualinvoke $r24.<com.android.server.Watchdog: void addThread(android.os.Handler)>($r25);

        $r26 = new com.android.server.pm.permission.DefaultPermissionGrantPolicy;

        $r27 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.HandlerThread mHandlerThread>;

        $r28 = virtualinvoke $r27.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r26.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void <init>(android.content.Context,android.os.Looper)>(r45, $r28);

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy> = $r26;

        r49 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r29 = virtualinvoke r49.<com.android.server.SystemConfig: android.util.SparseArray getSystemPermissions()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseArray mSystemPermissions> = $r29;

        $r30 = virtualinvoke r49.<com.android.server.SystemConfig: int[] getGlobalGids()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: int[] mGlobalGids> = $r30;

        $r31 = new com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners;

        $r32 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r33 = virtualinvoke $r32.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r31.<com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners: void <init>(android.os.Looper)>($r33);

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners> = $r31;

        $r34 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        r1 = virtualinvoke $r34.<com.android.server.SystemConfig: android.util.ArrayMap getPermissions()>();

        r50 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r50;

        i1 = 0;

     label01:
        $i0 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        if i1 >= $i0 goto label07;

        $r36 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.SystemConfig$PermissionEntry) $r36;

        $r38 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r37 = r2.<com.android.server.SystemConfig$PermissionEntry: java.lang.String name>;

        r51 = virtualinvoke $r38.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>($r37);

     label02:
        r52 = r51;

        if r51 != null goto label05;

     label03:
        r52 = new com.android.server.pm.permission.BasePermission;

        $r41 = r2.<com.android.server.SystemConfig$PermissionEntry: java.lang.String name>;

        specialinvoke r52.<com.android.server.pm.permission.BasePermission: void <init>(java.lang.String,java.lang.String,int)>($r41, "android", 1);

     label04:
        $r43 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r42 = r2.<com.android.server.SystemConfig$PermissionEntry: java.lang.String name>;

        virtualinvoke $r43.<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>($r42, r52);

     label05:
        $r39 = r2.<com.android.server.SystemConfig$PermissionEntry: int[] gids>;

        if $r39 == null goto label06;

        $r40 = r2.<com.android.server.SystemConfig$PermissionEntry: int[] gids>;

        $z0 = r2.<com.android.server.SystemConfig$PermissionEntry: boolean perUser>;

        virtualinvoke r52.<com.android.server.pm.permission.BasePermission: void setGids(int[],boolean)>($r40, $z0);

     label06:
        i1 = i1 + 1;

        goto label01;

     label07:
        exitmonitor r50;

     label08:
        $r35 = new com.android.server.pm.permission.PermissionManagerService$PermissionManagerServiceInternalImpl;

        specialinvoke $r35.<com.android.server.pm.permission.PermissionManagerService$PermissionManagerServiceInternalImpl: void <init>(com.android.server.pm.permission.PermissionManagerService,com.android.server.pm.permission.PermissionManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;", $r35);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/permission/PermissionManagerInternal;", $r35);

        return;

     label09:
        $r44 := @caughtexception;

     label10:
        exitmonitor r50;

     label11:
        throw $r44;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    static android.os.Handler access$000(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    static com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners access$100(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        return $r1;
    }

    static void access$1000(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void removeAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r1, z0);

        return;
    }

    static void access$1100(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, int[], java.lang.String[], int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int[] r2;
        java.lang.String[] r3;
        int i0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.String[];

        i0 := @parameter4: int;

        r4 := @parameter5: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void grantRequestedRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.lang.String[],int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, r2, r3, i0, r4);

        return;
    }

    static void access$1200(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, int[], java.util.List, int, int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int[] r2;
        java.util.List r3;
        int i0, i1;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.util.List;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r4 := @parameter6: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void setWhitelistedRestrictedPermissionsForUsers(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.util.List,int,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, r2, r3, i0, i1, r4);

        return;
    }

    static boolean access$1300(com.android.server.pm.permission.PermissionManagerService, java.lang.String, java.util.List, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        java.util.List r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean setWhitelistedRestrictedPermissionsInternal(java.lang.String,java.util.List,int,int)>(r1, r2, i0, i1);

        return $z0;
    }

    static void access$1400(com.android.server.pm.permission.PermissionManagerService, java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r3;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter3: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, r2, r3);

        return;
    }

    static void access$1500(com.android.server.pm.permission.PermissionManagerService, java.lang.String, boolean, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        boolean z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r2;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 := @parameter3: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updateAllPermissions(java.lang.String,boolean,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, z0, r2);

        return;
    }

    static void access$1600(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void resetRuntimePermissionsInternal(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, i0);

        return;
    }

    static java.lang.String[] access$1700(com.android.server.pm.permission.PermissionManagerService, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.String[] getAppOpPermissionPackagesInternal(java.lang.String,int)>(r1, i0);

        return $r2;
    }

    static void access$1800(com.android.server.pm.permission.PermissionManagerService, int, int, boolean, boolean, boolean, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        boolean z0, z1, z2;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        r1 := @parameter6: java.lang.String;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i0, i1, z0, z1, z2, r1);

        return;
    }

    static void access$1900(com.android.server.pm.permission.PermissionManagerService, int, int, boolean, boolean, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        boolean z0, z1;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r1 := @parameter5: java.lang.String;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserOrProfilePermission(int,int,boolean,boolean,java.lang.String)>(i0, i1, z0, z1, r1);

        return;
    }

    static android.content.pm.PackageManagerInternal access$200(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.content.pm.PackageManagerInternal $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        return $r1;
    }

    static void access$2000(com.android.server.pm.permission.PermissionManagerService, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>(r1);

        return;
    }

    static com.android.server.pm.permission.PermissionSettings access$2100(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionSettings $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        return $r1;
    }

    static java.lang.Object access$2200(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static byte[] access$2300(com.android.server.pm.permission.PermissionManagerService, android.os.UserHandle)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.os.UserHandle r1;
        byte[] $r2;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: android.os.UserHandle;

        $r2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: byte[] backupRuntimePermissions(android.os.UserHandle)>(r1);

        return $r2;
    }

    static void access$2400(com.android.server.pm.permission.PermissionManagerService, byte[], android.os.UserHandle)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        byte[] r1;
        android.os.UserHandle r2;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: byte[];

        r2 := @parameter2: android.os.UserHandle;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void restoreRuntimePermissions(byte[],android.os.UserHandle)>(r1, r2);

        return;
    }

    static void access$2500(com.android.server.pm.permission.PermissionManagerService, java.lang.String, android.os.UserHandle)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        android.os.UserHandle r2;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void restoreDelayedRuntimePermissions(java.lang.String,android.os.UserHandle)>(r1, r2);

        return;
    }

    static void access$2600(com.android.server.pm.permission.PermissionManagerService, android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void addOnRuntimePermissionStateChangedListener(android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)>(r1);

        return;
    }

    static void access$2700(com.android.server.pm.permission.PermissionManagerService, android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void removeOnRuntimePermissionStateChangedListener(android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)>(r1);

        return;
    }

    static android.permission.PermissionManagerInternal$CheckPermissionDelegate access$2800(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.permission.PermissionManagerInternal$CheckPermissionDelegate $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionManagerInternal$CheckPermissionDelegate mCheckPermissionDelegate>;

        return $r1;
    }

    static android.permission.PermissionManagerInternal$CheckPermissionDelegate access$2802(com.android.server.pm.permission.PermissionManagerService, android.permission.PermissionManagerInternal$CheckPermissionDelegate)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.permission.PermissionManagerInternal$CheckPermissionDelegate r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: android.permission.PermissionManagerInternal$CheckPermissionDelegate;

        r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionManagerInternal$CheckPermissionDelegate mCheckPermissionDelegate> = r1;

        return r1;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider access$2900(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider mDefaultBrowserProvider>;

        return $r1;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider access$2902(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider;

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider mDefaultBrowserProvider> = r1;

        return r1;
    }

    static boolean access$3000(com.android.server.pm.permission.PermissionManagerService, java.lang.String, boolean, boolean, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        boolean z0, z1, $z2;
        int i0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        $z2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean setDefaultBrowserInternal(java.lang.String,boolean,boolean,int)>(r1, z0, z1, i0);

        return $z2;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider access$3100(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider mDefaultDialerProvider>;

        return $r1;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider access$3102(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider;

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider mDefaultDialerProvider> = r1;

        return r1;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider access$3200(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider mDefaultHomeProvider>;

        return $r1;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider access$3202(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider;

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider mDefaultHomeProvider> = r1;

        return r1;
    }

    static com.android.server.pm.permission.DefaultPermissionGrantPolicy access$3300(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        return $r1;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback access$400(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback $r1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        return $r1;
    }

    static void access$500(com.android.server.pm.permission.PermissionManagerService)
    {
        com.android.server.pm.permission.PermissionManagerService r0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void systemReady()>();

        return;
    }

    static boolean access$600(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean isPermissionsReviewRequired(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, i0);

        return $z0;
    }

    static void access$700(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.parsing.pkg.AndroidPackage, java.util.ArrayList, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, r2;
        java.util.ArrayList r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter3: java.util.ArrayList;

        r4 := @parameter4: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermissionsIfGroupChanged(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.ArrayList,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, r2, r3, r4);

        return;
    }

    static void access$800(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void addAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r1, z0);

        return;
    }

    static void access$900(com.android.server.pm.permission.PermissionManagerService, com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void addAllPermissionGroups(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r1, z0);

        return;
    }

    private void addAllPermissionGroups(com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, i2;
        android.content.pm.parsing.component.ParsedPermissionGroup r2, r3;
        java.util.List $r4, $r5;
        java.lang.Object $r6, $r10;
        com.android.server.pm.permission.PermissionSettings $r7, $r12;
        android.util.ArrayMap $r8, $r13;
        java.lang.String $r9, $r11, $r14, $r18, $r21, $r24, $r26, r27;
        java.lang.StringBuilder $r16;
        boolean z0, z1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissionGroups()>();

        i0 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r4);

        i2 = 0;

     label1:
        if i2 >= i0 goto label7;

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissionGroups()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (android.content.pm.parsing.component.ParsedPermissionGroup) $r6;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r8 = $r7.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        $r9 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r9);

        r3 = (android.content.pm.parsing.component.ParsedPermissionGroup) $r10;

        if r3 != null goto label2;

        r27 = null;

        goto label3;

     label2:
        r27 = virtualinvoke r3.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getPackageName()>();

     label3:
        $r11 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getPackageName()>();

        z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if r3 == null goto label5;

        if z1 == 0 goto label4;

        goto label5;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission group ");

        $r18 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r21 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getPackageName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: original from ");

        $r24 = virtualinvoke r3.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getPackageName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r26);

        goto label6;

     label5:
        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r13 = $r12.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        $r14 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getName()>();

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r2);

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return;
    }

    private void addAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, i4;
        android.content.pm.parsing.component.ParsedPermission r1;
        java.lang.Object r2, $r5, $r26;
        java.util.List $r3, $r4;
        android.content.pm.PackageManagerInternal $r7, $r15;
        com.android.server.pm.permission.PermissionSettings $r8, $r11, $r13, $r16, $r19, $r21, $r23;
        java.lang.String $r9, $r14, $r17, $r22, $r25;
        com.android.server.pm.permission.BasePermission $r10, $r18, r31, r32;
        java.util.Collection $r12, $r20;
        android.util.ArrayMap $r24;
        android.content.pm.parsing.component.ParsedPermissionGroup $r27;
        java.lang.Throwable $r29;
        com.android.server.pm.parsing.pkg.AndroidPackage r30;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r30 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        $r3 = interfaceinvoke r30.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        i0 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r3);

        i4 = 0;

     label01:
        if i4 >= i0 goto label11;

        $r4 = interfaceinvoke r30.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        r1 = (android.content.pm.parsing.component.ParsedPermission) $r5;

        $i1 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: int getFlags()>();

        $i2 = $i1 & -1073741825;

        virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermission setFlags(int)>($i2);

        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        $i3 = interfaceinvoke r30.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i3 <= 22 goto label03;

        $r23 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r24 = $r23.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        $r25 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getGroup()>();

        $r26 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r25);

        $r27 = (android.content.pm.parsing.component.ParsedPermissionGroup) $r26;

        virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermission setParsedPermissionGroup(android.content.pm.parsing.component.ParsedPermissionGroup)>($r27);

     label03:
        $z1 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: boolean isTree()>();

        if $z1 == 0 goto label05;

        $r15 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r16 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r17 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionTreeLocked(java.lang.String)>($r17);

        $r19 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r20 = virtualinvoke $r19.<com.android.server.pm.permission.PermissionSettings: java.util.Collection getAllPermissionTreesLocked()>();

        r31 = staticinvoke <com.android.server.pm.permission.BasePermission: com.android.server.pm.permission.BasePermission createOrUpdate(android.content.pm.PackageManagerInternal,com.android.server.pm.permission.BasePermission,android.content.pm.parsing.component.ParsedPermission,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Collection,boolean)>($r15, $r18, r1, r30, $r20, z0);

        $r21 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r22 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        virtualinvoke $r21.<com.android.server.pm.permission.PermissionSettings: void putPermissionTreeLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>($r22, r31);

     label04:
        goto label06;

     label05:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r9 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>($r9);

        $r11 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r12 = virtualinvoke $r11.<com.android.server.pm.permission.PermissionSettings: java.util.Collection getAllPermissionTreesLocked()>();

        r32 = staticinvoke <com.android.server.pm.permission.BasePermission: com.android.server.pm.permission.BasePermission createOrUpdate(android.content.pm.PackageManagerInternal,com.android.server.pm.permission.BasePermission,android.content.pm.parsing.component.ParsedPermission,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Collection,boolean)>($r7, $r10, r1, r30, $r12, z0);

        $r13 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r14 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        virtualinvoke $r13.<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>($r14, r32);

     label06:
        exitmonitor r2;

     label07:
        i4 = i4 + 1;

        goto label01;

     label08:
        $r29 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r29;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void addOnRuntimePermissionStateChangedListener(android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;
        android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.util.ArrayList mRuntimePermissionStateChangedListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int adjustPermissionProtectionFlagsLocked(int, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, $i2, $i3, i4, i5;
        android.content.pm.PackageManagerInternal $r1, $r2;
        java.lang.String $r3, r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r5;
        com.android.server.pm.PackageSetting r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        i1 = i0 & 3;

        if i1 != 2 goto label1;

        return i0;

     label1:
        i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i4);

        if i5 == 1000 goto label7;

        if i5 == 0 goto label7;

        if i5 != 2000 goto label2;

        goto label7;

     label2:
        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r5 = virtualinvoke $r1.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r4);

        if r5 != null goto label3;

        return i0;

     label3:
        $i2 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i2 >= 26 goto label4;

        return i1;

     label4:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r6 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r3);

        if r6 != null goto label5;

        return i0;

     label5:
        $i3 = virtualinvoke r6.<com.android.server.pm.PackageSetting: int getAppId()>();

        if $i3 == i5 goto label6;

        return i0;

     label6:
        return i0;

     label7:
        return i0;
    }

    private byte[] backupRuntimePermissions(android.os.UserHandle)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.os.UserHandle r1;
        android.permission.PermissionControllerManager r2;
        java.util.concurrent.CompletableFuture $r3;
        android.content.Context $r4;
        com.android.server.pm.permission._$$Lambda$oynlBn0BbcU0KODvfUDDUHb5LKY $r6;
        java.util.concurrent.TimeUnit $r7;
        long $l0;
        java.lang.Object $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r13;
        java.util.concurrent.Executor r15;
        byte[] r16;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: android.os.UserHandle;

        $r3 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r3.<java.util.concurrent.CompletableFuture: void <init>()>();

        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionControllerManager mPermissionControllerManager>;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        r15 = virtualinvoke $r4.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r6 = new com.android.server.pm.permission._$$Lambda$oynlBn0BbcU0KODvfUDDUHb5LKY;

        specialinvoke $r6.<com.android.server.pm.permission._$$Lambda$oynlBn0BbcU0KODvfUDDUHb5LKY: void <init>(java.util.concurrent.CompletableFuture)>($r3);

        virtualinvoke r2.<android.permission.PermissionControllerManager: void getRuntimePermissionBackup(android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>(r1, r15, $r6);

     label1:
        $l0 = <com.android.server.pm.permission.PermissionManagerService: long BACKUP_TIMEOUT_MILLIS>;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r8 = virtualinvoke $r3.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l0, $r7);

        r16 = (byte[]) $r8;

     label2:
        return r16;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create permission backup for ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r13, $r9);

        return null;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    private static java.lang.String buildInvalidCrossUserOrProfilePermissionMessage(java.lang.String, boolean, boolean)
    {
        java.lang.String r0, $r8, $r12;
        boolean z0, z1;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        if r0 == null goto label1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requires ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if z0 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if z1 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INTERACT_ACROSS_PROFILES");

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static java.lang.String buildInvalidCrossUserPermissionMessage(java.lang.String, boolean)
    {
        java.lang.String r0, $r8, $r10;
        boolean z0;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        if r0 == null goto label1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requires ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if z0 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void cacheBackgroundToForegoundPermissionMapping()
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1, $r9, $r15, r21;
        java.util.Iterator r2;
        java.lang.String r3, r4, $r12;
        java.util.List r5, r25;
        android.util.ArrayMap $r6, $r14, $r16, r23;
        com.android.server.pm.permission.PermissionSettings $r7;
        java.util.Collection $r8;
        boolean $z0;
        android.content.pm.parsing.component.ParsedPermission $r10, $r11, $r13;
        java.lang.Throwable $r18;
        com.android.server.pm.permission.BasePermission r20;
        java.util.ArrayList r24;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArrayMap mBackgroundPermissions>;

        if $r6 != null goto label08;

        r23 = new android.util.ArrayMap;

        specialinvoke r23.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArrayMap mBackgroundPermissions> = r23;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r8 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionSettings: java.util.Collection getAllPermissionsLocked()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.android.server.pm.permission.BasePermission) $r9;

        $r10 = r20.<com.android.server.pm.permission.BasePermission: android.content.pm.parsing.component.ParsedPermission perm>;

        if $r10 == null goto label07;

        $r11 = r20.<com.android.server.pm.permission.BasePermission: android.content.pm.parsing.component.ParsedPermission perm>;

        $r12 = virtualinvoke $r11.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getBackgroundPermission()>();

        if $r12 == null goto label07;

        r3 = r20.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $r13 = r20.<com.android.server.pm.permission.BasePermission: android.content.pm.parsing.component.ParsedPermission perm>;

        r4 = virtualinvoke $r13.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getBackgroundPermission()>();

        $r14 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArrayMap mBackgroundPermissions>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.util.List) $r15;

     label03:
        r21 = r5;

        if r5 != null goto label06;

     label04:
        r24 = new java.util.ArrayList;

        r21 = r24;

        specialinvoke r24.<java.util.ArrayList: void <init>()>();

     label05:
        $r16 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArrayMap mBackgroundPermissions>;

        virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r24);

     label06:
        r25 = (java.util.List) r21;

        interfaceinvoke r25.<java.util.List: boolean add(java.lang.Object)>(r3);

     label07:
        goto label02;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r18 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private int calculateCurrentPermissionFootprintLocked(com.android.server.pm.permission.BasePermission)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.BasePermission r1, $r7;
        java.util.Iterator r2;
        com.android.server.pm.permission.PermissionSettings $r3;
        android.util.ArrayMap $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        int $i0, i1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.permission.BasePermission;

        i1 = 0;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r4 = $r3.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissions>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.pm.permission.BasePermission) $r6;

        $i0 = virtualinvoke r1.<com.android.server.pm.permission.BasePermission: int calculateFootprint(com.android.server.pm.permission.BasePermission)>($r7);

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    private static boolean canGrantOemPermission(com.android.server.pm.PackageSetting, java.lang.String)
    {
        com.android.server.pm.PackageSetting r0;
        java.lang.String r1, $r3, $r10, $r14;
        boolean z0, z1;
        com.android.server.SystemConfig $r2;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalStateException $r13;
        java.lang.Boolean $r15, r16;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        r1 := @parameter1: java.lang.String;

        z0 = virtualinvoke r0.<com.android.server.pm.PackageSetting: boolean isOem()>();

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r3 = r0.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r4 = virtualinvoke $r2.<com.android.server.SystemConfig: java.util.Map getOemPermissions(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r16 = (java.lang.Boolean) $r5;

        if r16 == null goto label3;

        $r15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r15 != r16 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OEM permission");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requested by package ");

        $r10 = r0.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be explicitly declared granted or not");

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    private boolean checkAutoRevokeAccess(com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, $i1;
        boolean z0, z1;
        android.content.Context $r2;
        android.content.pm.PackageManagerInternal $r3;
        java.lang.SecurityException $r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        z1 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS");

        if $i1 != 0 goto label2;

        z1 = 1;

     label2:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        z0 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: boolean isCallerInstallerOfRecord(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, i0);

        if z1 != 0 goto label4;

        if z0 == 0 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must either hold android.permission.WHITELIST_AUTO_REVOKE_PERMISSIONS or be the installer on record");

        throw $r4;

     label4:
        return 1;
    }

    private boolean checkExistsAndEnforceCannotModifyImmutablyRestrictedPermission(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2, r14;
        com.android.server.pm.permission.PermissionSettings $r3;
        boolean $z0, $z1;
        android.content.Context $r4;
        int $i0;
        java.lang.String $r7, $r10, r12;
        java.lang.Throwable $r11;
        com.android.server.pm.permission.BasePermission r13;
        java.lang.SecurityException r15;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r12 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r13 = virtualinvoke $r3.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r12);

     label02:
        if r13 != null goto label05;

     label03:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such permissions: ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r10 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

        exitmonitor r1;

     label04:
        return 0;

     label05:
        $z0 = virtualinvoke r13.<com.android.server.pm.permission.BasePermission: boolean isHardOrSoftRestricted()>();

        if $z0 == 0 goto label08;

        $z1 = virtualinvoke r13.<com.android.server.pm.permission.BasePermission: boolean isImmutablyRestricted()>();

        if $z1 == 0 goto label08;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        if $i0 != 0 goto label07;

     label06:
        goto label08;

     label07:
        r15 = new java.lang.SecurityException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot modify whitelisting of an immutably restricted permission: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw r15;

     label08:
        exitmonitor r1;

     label09:
        return 1;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private int[] checkIfLegacyStorageOpsNeedToBeUpdated(com.android.server.pm.parsing.pkg.AndroidPackage, boolean, int[])
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean z0, $z1, $z2, $z3;
        int[] r2, $r5;
        java.util.List $r3, $r6;
        com.android.server.pm.UserManagerService $r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        r2 := @parameter2: int[];

        if z0 == 0 goto label2;

        $z1 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isRequestLegacyExternalStorage()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z2 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>("android.permission.READ_EXTERNAL_STORAGE");

        if $z2 != 0 goto label1;

        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z3 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("android.permission.WRITE_EXTERNAL_STORAGE");

        if $z3 == 0 goto label2;

     label1:
        $r4 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        $r5 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        return $r5;

     label2:
        return r2;
    }

    private int checkPermissionImpl(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r3;
        int i0, $i1;
        android.content.pm.PackageManagerInternal $r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r4 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r3);

        if r4 != null goto label1;

        return -1;

     label1:
        $i1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermissionInternal(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,int)>(r4, 1, r1, i0);

        return $i1;
    }

    private int checkPermissionInternal(com.android.server.pm.parsing.pkg.AndroidPackage, boolean, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, i2, i3;
        android.content.pm.PackageManagerInternal $r1, $r2, $r7;
        java.lang.String $r3, $r6, $r8, r10, r13;
        java.util.Map $r4;
        java.lang.Object $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r9;
        com.android.server.pm.PackageSetting r11;
        com.android.server.pm.permission.PermissionsState r12;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r9 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        r10 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i0 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        if z0 != 0 goto label2;

        $r6 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        if $r6 != null goto label1;

        goto label2;

     label1:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r8 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r8 == null goto label3;

        return -1;

     label2:
        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z1 = virtualinvoke $r1.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r9, i0, i2);

        if $z1 == 0 goto label3;

        return -1;

     label3:
        $i1 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i2, $i1);

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r11 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r3);

        if r11 != null goto label4;

        return -1;

     label4:
        r12 = virtualinvoke r11.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkSinglePermissionInternal(int,com.android.server.pm.permission.PermissionsState,java.lang.String)>(i3, r12, r10);

        if $z2 == 0 goto label5;

        return 0;

     label5:
        $r4 = <com.android.server.pm.permission.PermissionManagerService: java.util.Map FULLER_PERMISSION_MAP>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r13 = (java.lang.String) $r5;

        if r13 == null goto label6;

        $z3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkSinglePermissionInternal(int,com.android.server.pm.permission.PermissionsState,java.lang.String)>(i3, r12, r13);

        if $z3 == 0 goto label6;

        return 0;

     label6:
        return -1;
    }

    private boolean checkSinglePermissionInternal(int, com.android.server.pm.permission.PermissionsState, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1;
        com.android.server.pm.permission.PermissionsState r1;
        java.lang.String r2, $r4;
        boolean $z0, $z1;
        android.content.pm.PackageManagerInternal $r3;
        com.android.server.pm.permission.PermissionSettings $r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.pm.permission.PermissionsState;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>(r2, $i1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.permission.PermissionSettings: boolean isPermissionInstant(java.lang.String)>(r2);

        return $z1;

     label2:
        return 1;
    }

    private boolean checkSingleUidPermissionInternal(int, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        java.lang.Object r1, $r4;
        android.util.ArraySet r2;
        android.util.SparseArray $r3;
        boolean $z0, z1;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseArray mSystemPermissions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.util.ArraySet) $r4;

     label02:
        if r2 == null goto label05;

     label03:
        $z0 = virtualinvoke r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r6);

        if $z0 == 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private int checkUidPermissionImpl(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.pm.PackageManagerInternal $r2;
        com.android.server.pm.parsing.pkg.AndroidPackage $r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int)>(i0);

        $i1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkUidPermissionInternal(com.android.server.pm.parsing.pkg.AndroidPackage,int,java.lang.String)>($r3, i0, r1);

        return $i1;
    }

    private int checkUidPermissionInternal(com.android.server.pm.parsing.pkg.AndroidPackage, int, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1, $i2;
        java.lang.String r1, r5;
        boolean $z0, $z1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if r4 == null goto label1;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermissionInternal(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,int)>(r4, 0, r1, $i1);

        return $i2;

     label1:
        $z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkSingleUidPermissionInternal(int,java.lang.String)>(i0, r1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r2 = <com.android.server.pm.permission.PermissionManagerService: java.util.Map FULLER_PERMISSION_MAP>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.lang.String) $r3;

        if r5 == null goto label3;

        $z1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkSingleUidPermissionInternal(int,java.lang.String)>(i0, r5);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        return -1;
    }

    public static com.android.server.pm.permission.PermissionManagerServiceInternal create(android.content.Context, java.lang.Object)
    {
        android.content.Context r0;
        java.lang.Object r1, $r3, $r6;
        com.android.server.pm.permission.PermissionManagerServiceInternal r2, $r7;
        android.os.IBinder $r4;
        com.android.server.pm.permission.PermissionManagerService $r5, $r8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;");

        r2 = (com.android.server.pm.permission.PermissionManagerServiceInternal) $r3;

        if r2 == null goto label1;

        return r2;

     label1:
        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("permissionmgr");

        $r5 = (com.android.server.pm.permission.PermissionManagerService) $r4;

        if $r5 != null goto label2;

        $r8 = new com.android.server.pm.permission.PermissionManagerService;

        specialinvoke $r8.<com.android.server.pm.permission.PermissionManagerService: void <init>(android.content.Context,java.lang.Object)>(r0, r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("permissionmgr", $r8);

     label2:
        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;");

        $r7 = (com.android.server.pm.permission.PermissionManagerServiceInternal) $r6;

        return $r7;
    }

    private void doNotifyRuntimePermissionStateChanged(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r5;
        java.util.ArrayList r2, $r3, $r4;
        boolean $z0;
        android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: java.util.ArrayList mRuntimePermissionStateChangedListeners>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r2 = new java.util.ArrayList;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: java.util.ArrayList mRuntimePermissionStateChangedListeners>;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        exitmonitor r1;

     label4:
        i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener) $r5;

        interfaceinvoke $r6.<android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener: void onRuntimePermissionStateChanged(java.lang.String,int)>(r8, i0);

        i2 = i2 + 1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void enforceCrossUserOrProfilePermission(int, int, boolean, boolean, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2, $i4;
        boolean z0, $z1, z2, z3;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r10, r12, r13;
        java.lang.SecurityException $r6;
        android.content.pm.PackageManagerInternal $r7;
        android.content.Context $r8;
        com.android.server.pm.parsing.pkg.AndroidPackage $r9;
        android.os.UserManagerInternal $r11;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r12 := @parameter4: java.lang.String;

        if i1 < 0 goto label4;

        if z2 == 0 goto label1;

        $r11 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceShellRestriction(android.os.UserManagerInternal,java.lang.String,int,int)>($r11, "no_debugging_features", i0, i1);

     label1:
        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean hasCrossUserPermission(int,int,int,boolean,boolean)>(i0, i2, i1, z0, 0);

        if $z1 == 0 goto label2;

        return;

     label2:
        z3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean isSameProfileGroup(int,int)>(i2, i1);

        if z3 == 0 goto label3;

        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r9 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int)>(i0);

        $r10 = interfaceinvoke $r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i4 = staticinvoke <android.content.PermissionChecker: int checkPermissionForPreflight(android.content.Context,java.lang.String,int,int,java.lang.String)>($r8, "android.permission.INTERACT_ACROSS_PROFILES", -1, i0, $r10);

        if $i4 != 0 goto label3;

        return;

     label3:
        r13 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: java.lang.String buildInvalidCrossUserOrProfilePermissionMessage(java.lang.String,boolean,boolean)>(r12, z0, z3);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", r13);

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>(r13);

        throw $r6;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void enforceCrossUserPermission(int, int, boolean, boolean, boolean, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, $i2;
        boolean z0, z1, z2, $z3;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r8, r9;
        java.lang.SecurityException $r6;
        android.os.UserManagerInternal $r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r8 := @parameter5: java.lang.String;

        if i1 < 0 goto label3;

        if z1 == 0 goto label1;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceShellRestriction(android.os.UserManagerInternal,java.lang.String,int,int)>($r7, "no_debugging_features", i0, i1);

     label1:
        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean hasCrossUserPermission(int,int,int,boolean,boolean)>(i0, $i2, i1, z0, z2);

        if $z3 == 0 goto label2;

        return;

     label2:
        r9 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: java.lang.String buildInvalidCrossUserPermissionMessage(java.lang.String,boolean)>(r8, z0);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", r9);

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>(r9);

        throw $r6;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void enforceGrantRevokeGetRuntimePermissionPermissions(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r15;
        android.content.Context $r3, $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r6;
        java.lang.SecurityException $r14;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.GET_RUNTIME_PERMISSIONS");

        if $i0 == 0 goto label2;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS");

        if $i1 == 0 goto label2;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS");

        if $i2 != 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.GET_RUNTIME_PERMISSIONS");

        $r14 = new java.lang.SecurityException;

        $r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label2:
        return;
    }

    private void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r12;
        android.content.Context $r3, $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS");

        if $i0 == 0 goto label2;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS");

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS");

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        return;
    }

    private void enforcePermissionCapLocked(android.content.pm.PermissionInfo, com.android.server.pm.permission.BasePermission)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.content.pm.PermissionInfo r1;
        com.android.server.pm.permission.BasePermission r2;
        int i0, $i1, $i2, $i3;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: android.content.pm.PermissionInfo;

        r2 := @parameter1: com.android.server.pm.permission.BasePermission;

        $i1 = virtualinvoke r2.<com.android.server.pm.permission.BasePermission: int getUid()>();

        if $i1 == 1000 goto label2;

        i0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int calculateCurrentPermissionFootprintLocked(com.android.server.pm.permission.BasePermission)>(r2);

        $i2 = virtualinvoke r1.<android.content.pm.PermissionInfo: int calculateFootprint()>();

        $i3 = $i2 + i0;

        if $i3 > 32768 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Permission tree size cap exceeded");

        throw $r3;

     label2:
        return;
    }

    private java.lang.String[] getAppOpPermissionPackagesInternal(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r6;
        android.content.pm.PackageManagerInternal $r2;
        java.lang.String $r3, r10;
        com.android.server.pm.permission.PermissionSettings $r4;
        android.util.ArrayMap $r5;
        java.lang.String[] $r7, r12;
        java.lang.Object[] $r8;
        java.lang.Throwable $r9;
        android.util.ArraySet r11;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r3 == null goto label01;

        return null;

     label01:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r5 = $r4.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mAppOpPermissionPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (android.util.ArraySet) $r6;

     label03:
        if r11 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        $i1 = virtualinvoke r11.<android.util.ArraySet: int size()>();

        $r7 = newarray (java.lang.String)[$i1];

        $r8 = virtualinvoke r11.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r12 = (java.lang.String[]) $r8;

        exitmonitor r1;

     label07:
        return r12;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        java.lang.Object r1, $r3;
        android.util.SparseArray $r2, $r7;
        android.content.Context $r4, $r6;
        android.os.UserHandle $r5;
        java.lang.Throwable $r8;
        com.android.server.pm.permission.OneTimePermissionUserManager r9, r10;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseArray mOneTimePermissionUserManagers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r9 = (com.android.server.pm.permission.OneTimePermissionUserManager) $r3;

     label2:
        if r9 == null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return r9;

     label5:
        r10 = new com.android.server.pm.permission.OneTimePermissionUserManager;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r6 = virtualinvoke $r4.<android.content.Context: android.content.Context createContextAsUser(android.os.UserHandle,int)>($r5, 0);

        specialinvoke r10.<com.android.server.pm.permission.OneTimePermissionUserManager: void <init>(android.content.Context)>($r6);

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseArray mOneTimePermissionUserManagers>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r10);

        exitmonitor r1;

     label6:
        virtualinvoke r10.<com.android.server.pm.permission.OneTimePermissionUserManager: void registerUninstallListener()>();

        return r10;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private java.util.List getPackagesWithAutoRevokePolicy(int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        android.content.Context $r2;
        java.util.ArrayList $r3;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$7UbsdDkY7eb6gD8CfMZMTcb6R5Y $r4;
        android.content.pm.PackageManagerInternal $r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", "Must hold android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r4 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$7UbsdDkY7eb6gD8CfMZMTcb6R5Y;

        specialinvoke $r4.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$7UbsdDkY7eb6gD8CfMZMTcb6R5Y: void <init>(int,java.util.List)>(i0, $r3);

        virtualinvoke $r5.<android.content.pm.PackageManagerInternal: void forEachInstalledPackage(java.util.function.Consumer,int)>($r4, i1);

        return $r3;
    }

    private int getPermissionFlagsInternal(java.lang.String, java.lang.String, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, $i2;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageSetting r2;
        android.os.UserManagerInternal $r3;
        boolean $z0, $z1;
        android.content.pm.PackageManagerInternal $r4, $r5, $r9;
        java.lang.String $r6, r12, r13;
        com.android.server.pm.permission.PermissionSettings $r7;
        com.android.server.pm.permission.BasePermission $r8;
        com.android.server.pm.permission.PermissionsState $r10;
        java.lang.Throwable $r11;
        java.lang.Object r14;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean exists(int)>(i1);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceGrantRevokeGetRuntimePermissionPermissions(java.lang.String)>("getPermissionFlags");

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i0, i1, 1, 0, 0, "getPermissionFlags");

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r1 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r13);

        if r1 != null goto label02;

        return 0;

     label02:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r2 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r6);

        if r2 != null goto label03;

        return 0;

     label03:
        r14 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label04:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r8 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r12);

        if $r8 != null goto label06;

        exitmonitor r14;

     label05:
        return 0;

     label06:
        exitmonitor r14;

     label07:
        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z1 = virtualinvoke $r9.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i0, i1);

        if $z1 == 0 goto label08;

        return 0;

     label08:
        $r10 = virtualinvoke r2.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $i2 = virtualinvoke $r10.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r12, i1);

        return $i2;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r14;

     label11:
        throw $r11;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private com.android.server.pm.PackageSetting getSourcePackageSetting(com.android.server.pm.permission.BasePermission)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.content.pm.PackageManagerInternal $r1;
        com.android.server.pm.PackageSetting $r2;
        com.android.server.pm.permission.BasePermission r3;
        java.lang.String r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r3 := @parameter0: com.android.server.pm.permission.BasePermission;

        r4 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r2 = virtualinvoke $r1.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r4);

        return $r2;
    }

    private android.content.pm.PackageParser$SigningDetails getSourcePackageSigningDetails(com.android.server.pm.permission.BasePermission)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.content.pm.PackageParser$SigningDetails $r1, $r2;
        com.android.server.pm.permission.BasePermission r3;
        com.android.server.pm.PackageSetting r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r3 := @parameter0: com.android.server.pm.permission.BasePermission;

        r4 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.PackageSetting getSourcePackageSetting(com.android.server.pm.permission.BasePermission)>(r3);

        if r4 != null goto label1;

        $r2 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        return $r2;

     label1:
        $r1 = virtualinvoke r4.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        return $r1;
    }

    private static java.lang.String getVolumeUuidForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        boolean $z0, $z1;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        if r0 != null goto label1;

        $r4 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        return $r4;

     label1:
        $z0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z1 == 0 goto label2;

        return "primary_physical";

     label2:
        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        return $r3;

     label3:
        $r1 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        return $r1;
    }

    private void grantRequestedRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage, int[], java.lang.String[], int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int[] r2;
        java.lang.String[] r3;
        int i0, i1, $i2, i3;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        r4 := @parameter4: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        i1 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $i2 = r2[i3];

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void grantRequestedRuntimePermissionsForUser(com.android.server.pm.parsing.pkg.AndroidPackage,int,java.lang.String[],int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, $i2, r3, i0, r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void grantRequestedRuntimePermissionsForUser(com.android.server.pm.parsing.pkg.AndroidPackage, int, java.lang.String[], int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String[] r1;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r2;
        com.android.server.pm.permission.PermissionsState r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, $z7;
        java.util.Iterator r4;
        java.lang.String r5, $r8, $r10, $r14, $r15;
        com.android.server.pm.permission.BasePermission r6;
        android.content.pm.PackageManagerInternal $r7, $r9;
        java.util.List $r11;
        java.lang.Object $r12, r20;
        com.android.server.pm.permission.PermissionSettings $r13;
        java.lang.Throwable $r16, $r17, r21;
        com.android.server.pm.parsing.pkg.AndroidPackage r18;
        com.android.server.pm.PackageSetting r19;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r18 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String[];

        i1 := @parameter3: int;

        r2 := @parameter4: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r8 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r19 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r8);

        if r19 != null goto label01;

        return;

     label01:
        r3 = virtualinvoke r19.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $i3 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i3 < 23 goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r10 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        z0 = virtualinvoke $r9.<android.content.pm.PackageManagerInternal: boolean isInstantApp(java.lang.String,int)>($r10, i0);

        $r11 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label18;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r12;

        r20 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r20;

     label05:
        $r13 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r6 = virtualinvoke $r13.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r5);

        exitmonitor r20;

     label06:
        if r6 == null goto label13;

        $z1 = virtualinvoke r6.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z1 != 0 goto label07;

        $z5 = virtualinvoke r6.<com.android.server.pm.permission.BasePermission: boolean isDevelopment()>();

        if $z5 == 0 goto label13;

     label07:
        if z0 == 0 goto label08;

        $z4 = virtualinvoke r6.<com.android.server.pm.permission.BasePermission: boolean isInstant()>();

        if $z4 == 0 goto label13;

     label08:
        if z6 != 0 goto label09;

        $z3 = virtualinvoke r6.<com.android.server.pm.permission.BasePermission: boolean isRuntimeOnly()>();

        if $z3 != 0 goto label13;

     label09:
        if r1 == null goto label10;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r1, r5);

        if $z2 == 0 goto label13;

     label10:
        i2 = virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r5, i0);

        if z6 == 0 goto label11;

        $i5 = i2 & 20;

        if $i5 != 0 goto label13;

        $r15 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void grantRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r5, $r15, 0, i1, i0, r2);

        goto label13;

     label11:
        $i4 = i2 & 72;

        if $i4 == 0 goto label12;

        $r14 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsInternal(java.lang.String,java.lang.String,int,int,int,int,boolean,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r5, $r14, 72, 0, i1, i0, 0, r2);

        goto label13;

     label12:
        goto label13;

     label13:
        goto label04;

     label14:
        $r17 := @caughtexception;

        r21 = $r17;

     label15:
        exitmonitor r20;

     label16:
        throw r21;

     label17:
        $r16 := @caughtexception;

        r21 = $r16;

        goto label15;

     label18:
        return;

        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private void grantRuntimePermissionInternal(java.lang.String, java.lang.String, boolean, int, int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i15, i19, i20, i21, i22;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.permission.BasePermission r3;
        long l1;
        android.os.UserManagerInternal $r4, $r25;
        android.content.Context $r5, $r36;
        android.content.pm.PackageManagerInternal $r6, $r7, $r18;
        java.lang.StringBuilder $r8, $r13, $r19, $r29, $r40, $r46, $r52, $r58, $r64;
        java.lang.String $r11, $r17, $r23, $r24, $r28, $r35, $r45, $r51, $r57, $r63, $r67, r71, r72;
        com.android.server.pm.permission.PermissionSettings $r12;
        java.lang.IllegalArgumentException $r16, $r22;
        java.lang.Object $r26, r75;
        android.os.storage.StorageManagerInternal $r27;
        java.lang.SecurityException $r34;
        android.content.pm.ApplicationInfo $r37;
        android.os.UserHandle $r38;
        com.android.server.policy.SoftRestrictedPermissionPolicy $r39;
        java.lang.Throwable $r68, $r69, $r70, r85;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r73;
        com.android.server.pm.permission.PermissionsState r76;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r71 := @parameter0: java.lang.String;

        r72 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i19 := @parameter3: int;

        i0 := @parameter4: int;

        r73 := @parameter5: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z1 = virtualinvoke $r4.<android.os.UserManagerInternal: boolean exists(int)>(i0);

        if $z1 != 0 goto label01;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such user:");

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r67 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r67);

        return;

     label01:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS", "grantRuntimePermission");

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i19, i0, 1, 1, 0, "grantRuntimePermission");

        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r1 = virtualinvoke $r6.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r72);

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r2 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r72);

        if r1 == null goto label32;

        if r2 != null goto label02;

        goto label32;

     label02:
        r75 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r75;

     label03:
        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r3 = virtualinvoke $r12.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r71);

        exitmonitor r75;

     label04:
        if r3 == null goto label27;

        $r18 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z2 = virtualinvoke $r18.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i19, i0);

        if $z2 != 0 goto label26;

        virtualinvoke r3.<com.android.server.pm.permission.BasePermission: void enforceDeclaredUsedAndRuntimeOrDevelopment(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, r2);

        $i3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i3 >= 23 goto label05;

        $z13 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z13 == 0 goto label05;

        return;

     label05:
        $i4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i4);

        i20 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i5);

        r76 = virtualinvoke r2.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        i21 = virtualinvoke r76.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r71, i0);

        $i6 = i21 & 16;

        if $i6 == 0 goto label06;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot grant system fixed permission ");

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r63 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r63);

        return;

     label06:
        if z0 != 0 goto label07;

        $i15 = i21 & 4;

        if $i15 == 0 goto label07;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot grant policy fixed permission ");

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r57 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r57);

        return;

     label07:
        $z3 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isHardRestricted()>();

        if $z3 == 0 goto label08;

        $i13 = i21 & 14336;

        if $i13 != 0 goto label08;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot grant hard restricted non-exempt permission ");

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r51);

        return;

     label08:
        $z4 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isSoftRestricted()>();

        if $z4 == 0 goto label09;

        $r36 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r37 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        $r38 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r39 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy forPermission(android.content.Context,android.content.pm.ApplicationInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.os.UserHandle,java.lang.String)>($r36, $r37, r1, $r38, r71);

        $z12 = virtualinvoke $r39.<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayGrantPermission()>();

        if $z12 != 0 goto label09;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot grant soft restricted permission ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r45 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r45);

        return;

     label09:
        $z5 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isDevelopment()>();

        if $z5 == 0 goto label11;

        $i11 = virtualinvoke r76.<com.android.server.pm.permission.PermissionsState: int grantInstallPermission(com.android.server.pm.permission.BasePermission)>(r3);

        if $i11 == -1 goto label10;

        if r73 == null goto label10;

        virtualinvoke r73.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onInstallPermissionGranted()>();

     label10:
        return;

     label11:
        $z6 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

        if $z6 == 0 goto label13;

        $z11 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isInstant()>();

        if $z11 == 0 goto label12;

        goto label13;

     label12:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot grant non-ephemeral permission");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r34 = new java.lang.SecurityException;

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.SecurityException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label13:
        $i7 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i7 >= 23 goto label14;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot grant runtime permission to a legacy app");

        return;

     label14:
        i22 = virtualinvoke r76.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r3, i0);

        if i22 == -1 goto label25;

        if i22 == 1 goto label15;

        goto label16;

     label15:
        if r73 == null goto label16;

        $i8 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $i9 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i8);

        virtualinvoke r73.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onGidsChanged(int,int)>($i9, i0);

     label16:
        $z14 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z14 == 0 goto label17;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void logPermission(int,java.lang.String,java.lang.String)>(1243, r71, r72);

     label17:
        if r73 == null goto label18;

        virtualinvoke r73.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onPermissionGranted(int,int)>(i20, i0);

     label18:
        $z7 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z7 == 0 goto label19;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void notifyRuntimePermissionStateChanged(java.lang.String,int)>(r72, i0);

     label19:
        $r24 = "android.permission.READ_EXTERNAL_STORAGE";

        $z8 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r71);

        if $z8 != 0 goto label20;

        $r28 = "android.permission.WRITE_EXTERNAL_STORAGE";

        $z10 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r71);

        if $z10 == 0 goto label23;

     label20:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label21:
        $r25 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z9 = virtualinvoke $r25.<android.os.UserManagerInternal: boolean isUserInitialized(int)>(i0);

        if $z9 == 0 goto label22;

        $r26 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/storage/StorageManagerInternal;");

        $r27 = (android.os.storage.StorageManagerInternal) $r26;

        virtualinvoke $r27.<android.os.storage.StorageManagerInternal: void onExternalStoragePolicyChanged(int,java.lang.String)>(i20, r72);

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label23:
        return;

     label24:
        $r70 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r70;

     label25:
        return;

     label26:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label27:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label28:
        $r68 := @caughtexception;

        r85 = $r68;

     label29:
        exitmonitor r75;

     label30:
        throw r85;

     label31:
        $r69 := @caughtexception;

        r85 = $r69;

        goto label29;

     label32:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r11);

        return;

        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label29 to label30 with label31;
    }

    private boolean grantSignaturePermission(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, com.android.server.pm.permission.BasePermission, com.android.server.pm.permission.PermissionsState)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r45, $r48, $r50, $r59, $r64, $r67, $r70, $r73, $r76, $r80, $r83, $r85, $r87, $r90, $r91, $r92, $r93, r95, r103, $r114;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r105, r109;
        com.android.server.pm.permission.BasePermission r3;
        com.android.server.pm.permission.PermissionsState r4, $r51;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z57, $z58, $z59, z60, z61, z62, z63, $z64, $z65, z66, z67, z68, z69, $z70, z71, z72, z73, z74, z75, z76, z77, z78, z79, z80;
        android.content.pm.PackageManagerInternal $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r39, $r49, $r100, $r104, $r112;
        java.lang.String[] $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r101, $r113;
        int $i0, $i1;
        com.android.server.pm.pkg.PackageStateUnserialized $r38, $r57;
        java.lang.StringBuilder $r41, $r60, $r72;
        android.content.pm.PackageParser$SigningDetails $r52, $r53, $r54, $r55, $r56, r106, $r107;
        com.android.server.SystemConfig $r58, $r82, $r84, $r86;
        android.util.ArraySet $r71, $r81, r96, r98;
        android.content.pm.PackageInfo $r88;
        com.android.server.pm.PackageSetting r89, r108, r110;
        com.android.server.pm.ApexManager r94;
        java.lang.Object $r102;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r89 := @parameter2: com.android.server.pm.PackageSetting;

        r3 := @parameter3: com.android.server.pm.permission.BasePermission;

        r4 := @parameter4: com.android.server.pm.permission.PermissionsState;

        z0 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isOEM()>();

        z1 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isVendorPrivileged()>();

        $z3 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isPrivileged()>();

        if $z3 != 0 goto label02;

        $z59 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isVendorPrivileged()>();

        if $z59 == 0 goto label01;

        goto label02;

     label01:
        z60 = 0;

        goto label03;

     label02:
        z60 = 1;

     label03:
        z61 = <com.android.internal.os.RoSystemProperties: boolean CONTROL_PRIVAPP_PERMISSIONS_DISABLE>;

        $r90 = "android";

        $r91 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        z2 = virtualinvoke $r90.<java.lang.String: boolean equals(java.lang.Object)>($r91);

        $r92 = "android";

        $r93 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        z62 = virtualinvoke $r92.<java.lang.String: boolean equals(java.lang.Object)>($r93);

        if z61 != 0 goto label19;

        if z60 == 0 goto label19;

        $z48 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

        if $z48 == 0 goto label19;

        if z62 != 0 goto label19;

        if z2 == 0 goto label19;

        $z49 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean hasPrivappWhitelistEntry(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>(r1, r2);

        if $z49 != 0 goto label18;

        $z50 = r0.<com.android.server.pm.permission.PermissionManagerService: boolean mSystemReady>;

        if $z50 != 0 goto label17;

        $r57 = virtualinvoke r89.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z51 = virtualinvoke $r57.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if $z51 != 0 goto label16;

        r94 = staticinvoke <com.android.server.pm.ApexManager: com.android.server.pm.ApexManager getInstance()>();

        r95 = virtualinvoke r94.<com.android.server.pm.ApexManager: java.lang.String getActiveApexPackageNameContainingPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        if r95 == null goto label05;

        $r88 = virtualinvoke r94.<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r95, 1);

        $z58 = staticinvoke <com.android.server.pm.ApexManager: boolean isFactory(android.content.pm.PackageInfo)>($r88);

        if $z58 == 0 goto label04;

        goto label05;

     label04:
        goto label17;

     label05:
        $z52 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVendor()>();

        if $z52 == 0 goto label06;

        $r86 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r87 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r96 = virtualinvoke $r86.<com.android.server.SystemConfig: android.util.ArraySet getVendorPrivAppDenyPermissions(java.lang.String)>($r87);

        goto label09;

     label06:
        $z53 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isProduct()>();

        if $z53 == 0 goto label07;

        $r84 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r85 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r96 = virtualinvoke $r84.<com.android.server.SystemConfig: android.util.ArraySet getProductPrivAppDenyPermissions(java.lang.String)>($r85);

        goto label09;

     label07:
        $z54 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystemExt()>();

        if $z54 == 0 goto label08;

        $r82 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r83 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r96 = virtualinvoke $r82.<com.android.server.SystemConfig: android.util.ArraySet getSystemExtPrivAppDenyPermissions(java.lang.String)>($r83);

        goto label09;

     label08:
        $r58 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r59 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r96 = virtualinvoke $r58.<com.android.server.SystemConfig: android.util.ArraySet getPrivAppDenyPermissions(java.lang.String)>($r59);

     label09:
        if r96 == null goto label11;

        $z57 = virtualinvoke r96.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z57 != 0 goto label10;

        goto label11;

     label10:
        z63 = 0;

        goto label12;

     label11:
        z63 = 1;

     label12:
        if z63 == 0 goto label15;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Privileged permission ");

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        $r64 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r67 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not in privapp-permissions whitelist");

        $r70 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r70);

        $z55 = <com.android.internal.os.RoSystemProperties: boolean CONTROL_PRIVAPP_PERMISSIONS_ENFORCE>;

        if $z55 == 0 goto label14;

        $r71 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArraySet mPrivappPermissionsViolations>;

        if $r71 != null goto label13;

        $r81 = new android.util.ArraySet;

        specialinvoke $r81.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArraySet mPrivappPermissionsViolations> = $r81;

     label13:
        r98 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArraySet mPrivappPermissionsViolations>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r76 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r80 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<android.util.ArraySet: boolean add(java.lang.Object)>($r80);

        goto label17;

     label14:
        goto label17;

     label15:
        return 0;

     label16:
        goto label17;

     label17:
        $z64 = <com.android.internal.os.RoSystemProperties: boolean CONTROL_PRIVAPP_PERMISSIONS_ENFORCE>;

        if $z64 == 0 goto label19;

        return 0;

     label18:
        goto label19;

     label19:
        $r100 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r101 = virtualinvoke $r100.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(0, 0);

        $r102 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object firstOrNull(java.lang.Object[])>($r101);

        r103 = (java.lang.String) $r102;

        $r104 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r105 = virtualinvoke $r104.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r103);

        r106 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageParser$SigningDetails getSourcePackageSigningDetails(com.android.server.pm.permission.BasePermission)>(r3);

        $r107 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z65 = virtualinvoke $r107.<android.content.pm.PackageParser$SigningDetails: boolean hasAncestorOrSelf(android.content.pm.PackageParser$SigningDetails)>(r106);

        if $z65 != 0 goto label21;

        $r52 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z45 = virtualinvoke r106.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r52, 4);

        if $z45 != 0 goto label21;

        $r53 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r54 = interfaceinvoke r105.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z46 = virtualinvoke $r53.<android.content.pm.PackageParser$SigningDetails: boolean hasAncestorOrSelf(android.content.pm.PackageParser$SigningDetails)>($r54);

        if $z46 != 0 goto label21;

        $r55 = interfaceinvoke r105.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r56 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z47 = virtualinvoke $r55.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r56, 4);

        if $z47 == 0 goto label20;

        goto label21;

     label20:
        z66 = 0;

        goto label22;

     label21:
        z66 = 1;

     label22:
        if z66 != 0 goto label40;

        if z60 != 0 goto label24;

        if z0 == 0 goto label23;

        goto label24;

     label23:
        goto label40;

     label24:
        $z31 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z31 == 0 goto label39;

        $r38 = virtualinvoke r89.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z32 = virtualinvoke $r38.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if $z32 == 0 goto label33;

        $r49 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r50 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r108 = virtualinvoke $r49.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getDisabledSystemPackage(java.lang.String)>($r50);

        if r108 != null goto label25;

        r109 = null;

        goto label26;

     label25:
        r109 = r108.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label26:
        if r108 == null goto label29;

        $r51 = virtualinvoke r108.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z41 = virtualinvoke $r51.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r1);

        if $z41 == 0 goto label29;

        if z60 == 0 goto label27;

        $z44 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z44 != 0 goto label28;

     label27:
        z67 = z66;

        if z0 == 0 goto label32;

        z67 = z66;

        $z42 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean isOem()>();

        if $z42 == 0 goto label32;

        z67 = z66;

        $z43 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: boolean canGrantOemPermission(com.android.server.pm.PackageSetting,java.lang.String)>(r108, r1);

        if $z43 == 0 goto label32;

     label28:
        z67 = 1;

        goto label32;

     label29:
        z67 = z66;

        if r108 == null goto label32;

        z67 = z66;

        if r109 == null goto label32;

        z67 = z66;

        $z37 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean isPackageRequestingPermission(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r109, r1);

        if $z37 == 0 goto label32;

        if z60 == 0 goto label30;

        $z40 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z40 != 0 goto label31;

     label30:
        z67 = z66;

        if z0 == 0 goto label32;

        z67 = z66;

        $z38 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean isOem()>();

        if $z38 == 0 goto label32;

        z67 = z66;

        $z39 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: boolean canGrantOemPermission(com.android.server.pm.PackageSetting,java.lang.String)>(r108, r1);

        if $z39 == 0 goto label32;

     label31:
        z67 = 1;

     label32:
        goto label38;

     label33:
        $r39 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r40 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r110 = virtualinvoke $r39.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r40);

        if z60 == 0 goto label34;

        $z36 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

        if $z36 != 0 goto label35;

     label34:
        if z0 == 0 goto label36;

        $z34 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isOem()>();

        if $z34 == 0 goto label36;

        $z35 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: boolean canGrantOemPermission(com.android.server.pm.PackageSetting,java.lang.String)>(r110, r1);

        if $z35 == 0 goto label36;

     label35:
        z68 = 1;

        goto label37;

     label36:
        z68 = 0;

     label37:
        z67 = z68;

     label38:
        z66 = z67;

        if z67 == 0 goto label40;

        z66 = z67;

        if z60 == 0 goto label40;

        z66 = z67;

        if z1 != 0 goto label40;

        z66 = z67;

        $z33 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVendor()>();

        if $z33 == 0 goto label40;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be granted to privileged vendor apk ");

        $r45 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it isn\'t a \'vendorPrivileged\' permission.");

        $r48 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r48);

        z66 = 0;

        goto label40;

     label39:
        goto label40;

     label40:
        if z66 != 0 goto label56;

        z69 = z66;

        if z66 != 0 goto label41;

        z69 = z66;

        $z30 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isPre23()>();

        if $z30 == 0 goto label41;

        z69 = z66;

        $i1 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i1 >= 23 goto label41;

        z69 = 1;

     label41:
        if z69 != 0 goto label42;

        $z28 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isInstaller()>();

        if $z28 == 0 goto label42;

        $r35 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r36 = virtualinvoke $r35.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(2, 0);

        $r37 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z29 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r36, $r37);

        if $z29 != 0 goto label43;

     label42:
        $r112 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r113 = virtualinvoke $r112.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(6, 0);

        $r114 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z70 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r113, $r114);

        if $z70 == 0 goto label44;

     label43:
        z69 = 1;

     label44:
        z71 = z69;

        if z69 != 0 goto label45;

        z71 = z69;

        $z26 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isVerifier()>();

        if $z26 == 0 goto label45;

        z71 = z69;

        $r32 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r33 = virtualinvoke $r32.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(3, 0);

        $r34 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z27 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r33, $r34);

        if $z27 == 0 goto label45;

        z71 = 1;

     label45:
        z72 = z71;

        if z71 != 0 goto label46;

        z72 = z71;

        $z24 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isPreInstalled()>();

        if $z24 == 0 goto label46;

        z72 = z71;

        $z25 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z25 == 0 goto label46;

        z72 = 1;

     label46:
        if z72 != 0 goto label47;

        $z23 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isDevelopment()>();

        if $z23 == 0 goto label47;

        z72 = virtualinvoke r4.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r1);

        goto label47;

     label47:
        z73 = z72;

        if z72 != 0 goto label48;

        z73 = z72;

        $z21 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isSetup()>();

        if $z21 == 0 goto label48;

        z73 = z72;

        $r29 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r30 = virtualinvoke $r29.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(1, 0);

        $r31 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z22 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r30, $r31);

        if $z22 == 0 goto label48;

        z73 = 1;

     label48:
        z74 = z73;

        if z73 != 0 goto label49;

        z74 = z73;

        $z19 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isSystemTextClassifier()>();

        if $z19 == 0 goto label49;

        z74 = z73;

        $r26 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r27 = virtualinvoke $r26.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(5, 0);

        $r28 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z20 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r27, $r28);

        if $z20 == 0 goto label49;

        z74 = 1;

     label49:
        z75 = z74;

        if z74 != 0 goto label50;

        z75 = z74;

        $z17 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isConfigurator()>();

        if $z17 == 0 goto label50;

        z75 = z74;

        $r23 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r24 = virtualinvoke $r23.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(9, 0);

        $r25 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z18 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r24, $r25);

        if $z18 == 0 goto label50;

        z75 = 1;

     label50:
        z76 = z75;

        if z75 != 0 goto label51;

        z76 = z75;

        $z15 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isWellbeing()>();

        if $z15 == 0 goto label51;

        z76 = z75;

        $r20 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r21 = virtualinvoke $r20.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(7, 0);

        $r22 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z16 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r21, $r22);

        if $z16 == 0 goto label51;

        z76 = 1;

     label51:
        z77 = z76;

        if z76 != 0 goto label52;

        z77 = z76;

        $z13 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isDocumenter()>();

        if $z13 == 0 goto label52;

        z77 = z76;

        $r17 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r18 = virtualinvoke $r17.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(8, 0);

        $r19 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z14 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r18, $r19);

        if $z14 == 0 goto label52;

        z77 = 1;

     label52:
        z78 = z77;

        if z77 != 0 goto label53;

        z78 = z77;

        $z11 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isIncidentReportApprover()>();

        if $z11 == 0 goto label53;

        z78 = z77;

        $r14 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r15 = virtualinvoke $r14.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(10, 0);

        $r16 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z12 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r15, $r16);

        if $z12 == 0 goto label53;

        z78 = 1;

     label53:
        z79 = z78;

        if z78 != 0 goto label54;

        z79 = z78;

        $z9 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isAppPredictor()>();

        if $z9 == 0 goto label54;

        z79 = z78;

        $r11 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r12 = virtualinvoke $r11.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(11, 0);

        $r13 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z10 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r12, $r13);

        if $z10 == 0 goto label54;

        z79 = 1;

     label54:
        z80 = z79;

        if z79 != 0 goto label55;

        z80 = z79;

        $z7 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isCompanion()>();

        if $z7 == 0 goto label55;

        z80 = z79;

        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r9 = virtualinvoke $r8.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(14, 0);

        $r10 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z8 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r9, $r10);

        if $z8 == 0 goto label55;

        z80 = 1;

     label55:
        z66 = z80;

        if z80 != 0 goto label56;

        z66 = z80;

        $z4 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRetailDemo()>();

        if $z4 == 0 goto label56;

        z66 = z80;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(15, 0);

        $r7 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z5 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r6, $r7);

        if $z5 == 0 goto label56;

        z66 = z80;

        $i0 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $z6 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: boolean isProfileOwner(int)>($i0);

        if $z6 == 0 goto label56;

        z66 = 1;

        goto label56;

     label56:
        return z66;
    }

    private boolean hasCrossUserPermission(int, int, int, boolean, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2;
        boolean z0, $z2, $z3, $z4, z5, z6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z5 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        if z0 != 0 goto label1;

        if i2 != i1 goto label1;

        return 1;

     label1:
        if i0 == 1000 goto label7;

        if i0 != 0 goto label2;

        goto label7;

     label2:
        if z5 == 0 goto label3;

        $z4 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        return $z4;

     label3:
        $z2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $z2 != 0 goto label5;

        $z3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $z3 == 0 goto label4;

        goto label5;

     label4:
        z6 = 0;

        goto label6;

     label5:
        z6 = 1;

     label6:
        return z6;

     label7:
        return 1;
    }

    private static boolean hasPermission(com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.lang.String r1, $r7;
        java.util.List $r2, $r3, $r4;
        boolean $z0, $z1;
        int $i0, i1;
        java.lang.Object $r5;
        android.content.pm.parsing.component.ParsedPermission $r6;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r4 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.content.pm.parsing.component.ParsedPermission) $r5;

        $r7 = virtualinvoke $r6.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return 0;
    }

    private boolean hasPermission(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasPrivappWhitelistEntry(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r3, $r5, $r7, $r9;
        boolean $z0, $z1, $z2, $z3, z4;
        com.android.server.SystemConfig $r2, $r4, $r6, $r8;
        com.android.server.pm.parsing.pkg.AndroidPackage r10;
        android.util.ArraySet r11;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r10 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVendor()>();

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r9 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r11 = virtualinvoke $r8.<com.android.server.SystemConfig: android.util.ArraySet getVendorPrivAppPermissions(java.lang.String)>($r9);

        goto label4;

     label1:
        $z1 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isProduct()>();

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r7 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r11 = virtualinvoke $r6.<com.android.server.SystemConfig: android.util.ArraySet getProductPrivAppPermissions(java.lang.String)>($r7);

        goto label4;

     label2:
        $z2 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystemExt()>();

        if $z2 == 0 goto label3;

        $r4 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r5 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r11 = virtualinvoke $r4.<com.android.server.SystemConfig: android.util.ArraySet getSystemExtPrivAppPermissions(java.lang.String)>($r5);

        goto label4;

     label3:
        $r2 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r3 = interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r11 = virtualinvoke $r2.<com.android.server.SystemConfig: android.util.ArraySet getPrivAppPermissions(java.lang.String)>($r3);

     label4:
        if r11 == null goto label5;

        $z3 = virtualinvoke r11.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z3 == 0 goto label5;

        z4 = 1;

        goto label6;

     label5:
        z4 = 0;

     label6:
        return z4;
    }

    private void inheritPermissionStateToNewImplicitPermissionLocked(android.util.ArraySet, java.lang.String, com.android.server.pm.permission.PermissionsState, com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.util.ArraySet r1;
        java.lang.String r2, r11;
        com.android.server.pm.permission.PermissionsState r3;
        int i0, i1, $i3, $i4, i5, i6, i7;
        com.android.server.pm.permission.PermissionSettings $r5, $r7;
        com.android.server.pm.permission.BasePermission $r6, $r8;
        java.lang.Object $r9;
        boolean $z1, $z2, z3, z4;
        com.android.server.pm.parsing.pkg.AndroidPackage r10;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: android.util.ArraySet;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.server.pm.permission.PermissionsState;

        r10 := @parameter3: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter4: int;

        interfaceinvoke r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        z3 = 0;

        i5 = 0;

        i1 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i6 = 0;

     label1:
        if i6 >= i1 goto label6;

        $r9 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i6);

        r11 = (java.lang.String) $r9;

        $z1 = virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: boolean hasRuntimePermission(java.lang.String,int)>(r11, i0);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r11);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z4 = z3;

        i7 = i5;

        if z3 != 0 goto label5;

        $i4 = virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r11, i0);

        i7 = i5 | $i4;

        z4 = z3;

        goto label5;

     label3:
        if z3 != 0 goto label4;

        i5 = 0;

     label4:
        z4 = 1;

        $i3 = virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r11, i0);

        i7 = i5 | $i3;

     label5:
        i6 = i6 + 1;

        z3 = z4;

        i5 = i7;

        goto label1;

     label6:
        if z3 == 0 goto label7;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r8 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r2);

        virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>($r8, i0);

     label7:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>(r2);

        virtualinvoke r3.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>($r6, i0, i5, i5);

        return;
    }

    private boolean isNewPlatformPermissionForPackage(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r5, $r10, $r12;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int i0, $i1, $i2, i4;
        android.content.pm.PackageParser$NewPermissionInfo[] $r3, $r4;
        boolean $z1, z2;
        java.lang.StringBuilder $r6;
        android.content.pm.PackageParser$NewPermissionInfo r13;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r3 = <android.content.pm.PackageParser: android.content.pm.PackageParser$NewPermissionInfo[] NEW_PERMISSIONS>;

        i0 = lengthof $r3;

        i4 = 0;

     label1:
        z2 = 0;

        if i4 >= i0 goto label3;

        $r4 = <android.content.pm.PackageParser: android.content.pm.PackageParser$NewPermissionInfo[] NEW_PERMISSIONS>;

        r13 = $r4[i4];

        $r5 = r13.<android.content.pm.PackageParser$NewPermissionInfo: java.lang.String name>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $i1 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        $i2 = r13.<android.content.pm.PackageParser$NewPermissionInfo: int sdkVersion>;

        if $i1 >= $i2 goto label2;

        z2 = 1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-granting ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to old pkg ");

        $r10 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r12);

        goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return z2;
    }

    private boolean isPackageRequestingPermission(com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String r2, $r6;
        int i0, i1;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: java.lang.String;

        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (java.lang.String) $r5;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isPermissionsReviewRequired(com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1;
        android.content.pm.PackageManagerInternal $r1;
        java.lang.String $r2;
        com.android.server.pm.permission.PermissionsState $r3;
        boolean $z0;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;
        com.android.server.pm.PackageSetting r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i1 < 23 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r2 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r5 = virtualinvoke $r1.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r2);

        if r5 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r5.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z0 = virtualinvoke $r3.<com.android.server.pm.permission.PermissionsState: boolean isPermissionReviewRequired(int)>(i0);

        return $z0;
    }

    private static boolean isProfileOwner(int)
    {
        int i0;
        android.app.admin.DevicePolicyManagerInternal r0;
        java.lang.Object $r1;
        boolean $z0;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        r0 = (android.app.admin.DevicePolicyManagerInternal) $r1;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<android.app.admin.DevicePolicyManagerInternal: boolean isActiveAdminWithPolicy(int,int)>(i0, -1);

        return $z0;

     label1:
        return 0;
    }

    private boolean isSameProfileGroup(int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        long l2;
        boolean z0;
        com.android.server.pm.UserManagerService $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean isSameProfileGroup(int,int)>(i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void killUid(int, int, java.lang.String)
    {
        int i0, i1;
        long l2;
        android.app.IActivityManager r0;
        java.lang.Throwable $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label2:
        if r0 == null goto label6;

     label3:
        interfaceinvoke r0.<android.app.IActivityManager: void killUidForPermissionChange(int,int,java.lang.String)>(i0, i1, r3);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public static void lambda$NPd9St1HBvGAtg1uhMV2Upfww4g(com.android.server.pm.permission.PermissionManagerService, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void doNotifyRuntimePermissionStateChanged(java.lang.String,int)>(r1, i0);

        return;
    }

    public static int lambda$eApyRxwI3JHTSVAxV9EbP43gFOo(com.android.server.pm.permission.PermissionManagerService, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkUidPermissionImpl(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    static void lambda$getPackagesWithAutoRevokePolicy$10(int, java.util.List, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        int i0, $i1;
        java.util.List r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        $i1 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getAutoRevokePermissions()>();

        if $i1 != i0 goto label1;

        $r2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    public static int lambda$iwnRBDwjg4K5iRGbRU5_sVt0zaU(com.android.server.pm.permission.PermissionManagerService, java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @parameter0: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $i1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermissionImpl(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $i1;
    }

    static void lambda$resetRuntimePermissionsInternal$2(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        staticinvoke <com.android.server.pm.permission.PermissionManagerService: void killUid(int,int,java.lang.String)>($i2, i1, "permissions revoked");

        return;
    }

    private void logPermission(int, java.lang.String, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        java.lang.String r1, r2;
        android.metrics.LogMaker $r4;
        com.android.internal.logging.MetricsLogger $r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r4 = new android.metrics.LogMaker;

        specialinvoke $r4.<android.metrics.LogMaker: void <init>(int)>(i0);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>(r2);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1241, r1);

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        virtualinvoke $r7.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r4);

        return;
    }

    private void notifyRuntimePermissionStateChanged(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0;
        android.os.Handler $r2;
        com.android.server.pm.permission.'-$$Lambda$PermissionManagerService$NPd9St1HBvGAtg1uhMV2Upfww4g' $r3;
        java.lang.Integer $r4;
        android.os.Message $r5;
        com.android.internal.util.function.TriConsumer r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        $r3 = <com.android.server.pm.permission._$$Lambda$PermissionManagerService$NPd9St1HBvGAtg1uhMV2Upfww4g: com.android.server.pm.permission.'-$$Lambda$PermissionManagerService$NPd9St1HBvGAtg1uhMV2Upfww4g' INSTANCE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (com.android.internal.util.function.TriConsumer) $r3;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r6, r0, r1, $r4);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    private void removeAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z1, $z3, $z5, $z6;
        java.lang.Object r1, $r6, $r10, $r16, $r20, $r24, $r29;
        android.content.pm.parsing.component.ParsedPermission r2;
        java.util.List $r3, $r4, $r5, $r15;
        com.android.server.pm.permission.PermissionSettings $r7, $r8, $r12, $r17, $r21, $r26;
        android.util.ArrayMap $r9, $r13, $r18, $r22, $r27;
        java.lang.String $r11, $r19, $r23, $r25, $r28, r35;
        java.lang.Throwable $r30;
        com.android.server.pm.parsing.pkg.AndroidPackage r31;
        int i0, i1, i2, i3;
        com.android.server.pm.permission.BasePermission r32, r33;
        android.util.ArraySet r34, r36;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r31 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        i0 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r3);

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label13;

     label04:
        $r15 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (android.content.pm.parsing.component.ParsedPermission) $r16;

        $r17 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r18 = $r17.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissions>;

        $r19 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r19);

        r32 = (com.android.server.pm.permission.BasePermission) $r20;

     label05:
        r33 = r32;

        if r32 != null goto label07;

     label06:
        $r26 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r27 = $r26.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionTrees>;

        $r28 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r28);

        r33 = (com.android.server.pm.permission.BasePermission) $r29;

     label07:
        if r33 == null goto label09;

     label08:
        $z5 = virtualinvoke r33.<com.android.server.pm.permission.BasePermission: boolean isPermission(android.content.pm.parsing.component.ParsedPermission)>(r2);

        if $z5 == 0 goto label09;

        virtualinvoke r33.<com.android.server.pm.permission.BasePermission: void setPermission(android.content.pm.parsing.component.ParsedPermission)>(null);

     label09:
        $z6 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermission: boolean isAppOp()>();

        if $z6 == 0 goto label12;

        $r21 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r22 = $r21.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mAppOpPermissionPackages>;

        $r23 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r23);

        r34 = (android.util.ArraySet) $r24;

     label10:
        if r34 == null goto label12;

     label11:
        $r25 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r34.<android.util.ArraySet: boolean remove(java.lang.Object)>($r25);

     label12:
        i1 = i1 + 1;

        goto label03;

     label13:
        $r4 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i2 = interfaceinvoke $r4.<java.util.List: int size()>();

     label14:
        i3 = 0;

     label15:
        if i3 >= i2 goto label20;

     label16:
        $r5 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        r35 = (java.lang.String) $r6;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $z1 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionSettings: boolean isPermissionAppOp(java.lang.String)>(r35);

        if $z1 == 0 goto label19;

        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r9 = $r8.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mAppOpPermissionPackages>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r35);

        r36 = (android.util.ArraySet) $r10;

     label17:
        if r36 == null goto label19;

     label18:
        $r11 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r36.<android.util.ArraySet: boolean remove(java.lang.Object)>($r11);

        $z3 = virtualinvoke r36.<android.util.ArraySet: boolean isEmpty()>();

        if $z3 == 0 goto label19;

        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r13 = $r12.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mAppOpPermissionPackages>;

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r35);

     label19:
        i3 = i3 + 1;

        goto label15;

     label20:
        exitmonitor r1;

     label21:
        return;

     label22:
        $r30 := @caughtexception;

     label23:
        exitmonitor r1;

     label24:
        throw $r30;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void removeOnRuntimePermissionStateChangedListener(android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;
        android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.util.ArrayList mRuntimePermissionStateChangedListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void resetRuntimePermissionsInternal(com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r7, $r30, $r34, r41;
        boolean[] r2;
        com.android.server.pm.permission.BasePermission r8;
        int i1, $i4, $i5, $i6, $i7, $i8, i10, i11, i12, i13, i14, i15, i17, i18, i19, i20;
        java.util.List $r9, $r26, $r35;
        android.util.ArraySet $r10;
        android.util.IntArray $r11, $r12;
        com.android.server.pm.permission.PermissionManagerService$2 $r13;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, z7, $z8;
        android.content.pm.PackageManagerInternal $r14, $r16, $r29, $r31, $r32, $r33;
        int[] $r15, $r17;
        java.lang.Object $r18, $r20, $r27, r39;
        java.lang.Long $r19, $r21;
        long $l2, $l3;
        com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners $r22;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$igfYI7thImnYrDxs3qWtqs2SCRk $r23;
        android.os.Handler $r24;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback $r25;
        com.android.server.pm.permission.PermissionSettings $r28;
        byte $b9, b16;
        java.lang.Throwable $r36, $r37, r44;
        com.android.server.pm.parsing.pkg.AndroidPackage r38, r42;
        java.lang.String[] r40;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r38 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i10 := @parameter1: int;

        r1 = interfaceinvoke r38.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r9 = interfaceinvoke r38.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i11 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r9);

        r2 = newarray (boolean)[1];

        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        $r11 = new android.util.IntArray;

        specialinvoke $r11.<android.util.IntArray: void <init>(int)>(i11);

        $r12 = new android.util.IntArray;

        specialinvoke $r12.<android.util.IntArray: void <init>(int)>(i11);

        $r13 = new com.android.server.pm.permission.PermissionManagerService$2;

        specialinvoke $r13.<com.android.server.pm.permission.PermissionManagerService$2: void <init>(com.android.server.pm.permission.PermissionManagerService,android.util.ArraySet,android.util.IntArray,android.util.IntArray,boolean[])>(r0, $r10, $r11, $r12, r2);

        i12 = 0;

     label01:
        if i12 >= i11 goto label21;

        $r26 = interfaceinvoke r38.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i12);

        r7 = (java.lang.String) $r27;

        r39 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r39;

     label02:
        $r28 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r8 = virtualinvoke $r28.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r7);

        exitmonitor r39;

     label03:
        if r8 != null goto label04;

        goto label16;

     label04:
        $z3 = virtualinvoke r8.<com.android.server.pm.permission.BasePermission: boolean isRemoved()>();

        if $z3 == 0 goto label05;

        goto label16;

     label05:
        $r29 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r30 = interfaceinvoke r38.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r40 = virtualinvoke $r29.<android.content.pm.PackageManagerInternal: java.lang.String[] getSharedUserPackagesForPackage(java.lang.String,int)>($r30, i10);

        $i4 = lengthof r40;

        if $i4 <= 0 goto label09;

        z7 = 0;

        i1 = lengthof r40;

        i13 = 0;

     label06:
        if i13 >= i1 goto label08;

        r41 = r40[i13];

        $r33 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r42 = virtualinvoke $r33.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r41);

        if r42 == null goto label07;

        $r34 = interfaceinvoke r42.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 != 0 goto label07;

        $r35 = interfaceinvoke r42.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z6 = interfaceinvoke $r35.<java.util.List: boolean contains(java.lang.Object)>(r7);

        if $z6 == 0 goto label07;

        z7 = 1;

        goto label08;

     label07:
        i13 = i13 + 1;

        goto label06;

     label08:
        if z7 == 0 goto label09;

        goto label16;

     label09:
        i14 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int getPermissionFlagsInternal(java.lang.String,java.lang.String,int,int)>(r7, r1, 1000, i10);

        $r31 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        i15 = virtualinvoke $r31.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>(r1, 0, i10);

        $r32 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $i5 = virtualinvoke $r32.<android.content.pm.PackageManagerInternal: int getUidTargetSdkVersion(int)>(i15);

        if $i5 >= 23 goto label10;

        $z4 = virtualinvoke r8.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z4 == 0 goto label10;

        b16 = 72;

        goto label11;

     label10:
        b16 = 0;

     label11:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsInternal(java.lang.String,java.lang.String,int,int,int,int,boolean,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r7, r1, 65611, b16, 1000, i10, 0, $r13);

        $z8 = virtualinvoke r8.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z8 != 0 goto label12;

        goto label16;

     label12:
        $i6 = i14 & 20;

        if $i6 == 0 goto label13;

        goto label16;

     label13:
        $i7 = i14 & 32;

        if $i7 != 0 goto label15;

        $i8 = 32768 & i14;

        if $i8 == 0 goto label14;

        goto label15;

     label14:
        $b9 = b16 & 64;

        if $b9 != 0 goto label16;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r7, r1, 0, 1000, i10, null, $r13);

        goto label16;

     label15:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void grantRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r7, r1, 0, 1000, i10, $r13);

     label16:
        i12 = i12 + 1;

        goto label01;

     label17:
        $r37 := @caughtexception;

        r44 = $r37;

     label18:
        exitmonitor r39;

     label19:
        throw r44;

     label20:
        $r36 := @caughtexception;

        r44 = $r36;

        goto label18;

     label21:
        $z0 = r2[0];

        if $z0 == 0 goto label22;

        $r25 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        virtualinvoke $r25.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onPermissionRemoved()>();

     label22:
        $z1 = virtualinvoke $r10.<android.util.ArraySet: boolean isEmpty()>();

        if $z1 != 0 goto label25;

        i17 = virtualinvoke $r10.<android.util.ArraySet: int size()>();

        i18 = 0;

     label23:
        if i18 >= i17 goto label24;

        $r18 = virtualinvoke $r10.<android.util.ArraySet: java.lang.Object valueAt(int)>(i18);

        $r19 = (java.lang.Long) $r18;

        $l2 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        i19 = staticinvoke <com.android.internal.util.IntPair: int first(long)>($l2);

        $r20 = virtualinvoke $r10.<android.util.ArraySet: java.lang.Object valueAt(int)>(i18);

        $r21 = (java.lang.Long) $r20;

        $l3 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        i20 = staticinvoke <com.android.internal.util.IntPair: int second(long)>($l3);

        $r22 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        virtualinvoke $r22.<com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners: void onPermissionsChanged(int)>(i19);

        $r24 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.Handler mHandler>;

        $r23 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$igfYI7thImnYrDxs3qWtqs2SCRk;

        specialinvoke $r23.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$igfYI7thImnYrDxs3qWtqs2SCRk: void <init>(int,int)>(i19, i20);

        virtualinvoke $r24.<android.os.Handler: boolean post(java.lang.Runnable)>($r23);

        i18 = i18 + 1;

        goto label23;

     label24:
        goto label25;

     label25:
        $r14 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r15 = virtualinvoke $r11.<android.util.IntArray: int[] toArray()>();

        virtualinvoke $r14.<android.content.pm.PackageManagerInternal: void writePermissionSettings(int[],boolean)>($r15, 0);

        $r16 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r17 = virtualinvoke $r12.<android.util.IntArray: int[] toArray()>();

        virtualinvoke $r16.<android.content.pm.PackageManagerInternal: void writePermissionSettings(int[],boolean)>($r17, 1);

        return;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    private void restoreDelayedRuntimePermissions(java.lang.String, android.os.UserHandle)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.os.UserHandle r1;
        java.lang.Object r2;
        android.permission.PermissionControllerManager r3;
        java.util.concurrent.Executor r4;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$5wIJaBo3ATYcr96ofI23sjuUqoA r5;
        android.util.SparseBooleanArray $r6;
        int $i0;
        boolean $z0;
        android.content.Context $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseBooleanArray mHasNoDelayedPermBackup>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = virtualinvoke $r6.<android.util.SparseBooleanArray: boolean get(int,boolean)>($i0, 0);

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionControllerManager mPermissionControllerManager>;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r7.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        r5 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$5wIJaBo3ATYcr96ofI23sjuUqoA;

        specialinvoke r5.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$5wIJaBo3ATYcr96ofI23sjuUqoA: void <init>(com.android.server.pm.permission.PermissionManagerService,android.os.UserHandle)>(r0, r1);

        virtualinvoke r3.<android.permission.PermissionControllerManager: void applyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.concurrent.Executor,java.util.function.Consumer)>(r9, r1, r4, r5);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void restorePermissionState(com.android.server.pm.parsing.pkg.AndroidPackage, boolean, java.lang.String, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z2, $z7, $z8, $z9, $z10, $z12, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z36, z38, $z39, z40, z41, z42, $z43, z44, z45, z46, z47, z48, z49, z54, z56, z59, z60, z64, z65, z66, z67, z68, z69, z70, z71, z72, z73, z74, z75, z78, z79, z80, z81, z82, z83, z84, $z85, z86, z87, z88, z89;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r1;
        com.android.server.pm.permission.PermissionsState r2, r83, r160;
        java.lang.String r5, $r8, $r10, $r14, $r18, $r19, $r20, $r21, $r24, $r25, $r27, $r28, $r30, $r43, r71, r73, r81, r93, r97, r100, r101, $r124, r139, $r145;
        com.android.server.pm.permission.PermissionsState$PermissionState r6, $r17, r144;
        android.content.pm.PackageManagerInternal $r7;
        com.android.server.pm.UserManagerService $r9, $r16, $r36;
        java.util.List $r11, $r31, $r32, $r34, $r45, r78, $r88, r95;
        java.lang.Object $r12, $r33, $r41, $r44, r77, r84, r87, r99;
        com.android.server.pm.permission.PermissionSettings $r13, $r23, $r29, $r42;
        com.android.server.pm.PackageSetting $r15, r74, r91, r135;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i31, i32, i33, i34, i35, $i36, $i37, i38, i39, $i40, i41, $i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, $i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64;
        com.android.server.policy.PermissionPolicyInternal $r22, $r26, r122, r143;
        com.android.server.pm.SharedUserSetting $r35, $r40;
        int[] $r37, r75, r76, $r86, r89, r90, r103, r131, r137, r140, r146, r147, r148, r156, r157, r158;
        java.lang.Throwable $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, r98;
        com.android.server.pm.parsing.pkg.AndroidPackage r70, r79;
        java.util.Iterator r80;
        com.android.server.pm.permission.BasePermission r82, r94, r107;
        android.content.pm.permission.SplitPermissionInfoParcelable r96;
        byte b29, b30;
        com.android.server.pm.pkg.PackageStateUnserialized $r155;
        android.util.ArraySet r159, r161;
        java.util.Collection r162, r163;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r70 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        r71 := @parameter2: java.lang.String;

        r1 := @parameter3: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        r73 = r71;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r8 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r74 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r8);

        if r74 != null goto label001;

        return;

     label001:
        r2 = virtualinvoke r74.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $r9 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r75 = virtualinvoke $r9.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        z38 = 0;

        r76 = <com.android.server.pm.permission.PermissionManagerService: int[] EMPTY_INT_ARRAY>;

        i17 = lengthof r75;

        i18 = 0;

     label002:
        if i18 >= i17 goto label013;

        i19 = r75[i18];

        $z28 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean isMissing(int)>(i19);

        if $z28 == 0 goto label012;

        $z29 = virtualinvoke r74.<com.android.server.pm.PackageSetting: boolean isSharedUser()>();

        if $z29 != 0 goto label003;

        r77 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i20 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        goto label005;

     label003:
        r159 = new android.util.ArraySet;

        specialinvoke r159.<android.util.ArraySet: void <init>()>();

        r77 = r159;

        $r40 = virtualinvoke r74.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        r78 = virtualinvoke $r40.<com.android.server.pm.SharedUserSetting: java.util.List getPackages()>();

        i21 = interfaceinvoke r78.<java.util.List: int size()>();

        i20 = 10000;

        i22 = 0;

     label004:
        if i22 >= i21 goto label005;

        $r44 = interfaceinvoke r78.<java.util.List: java.lang.Object get(int)>(i22);

        r79 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r44;

        $r45 = interfaceinvoke r79.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        r162 = (java.util.Collection) r159;

        interfaceinvoke r162.<java.util.Collection: boolean addAll(java.util.Collection)>($r45);

        $i16 = interfaceinvoke r79.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        i20 = staticinvoke <java.lang.Math: int min(int,int)>(i20, $i16);

        i22 = i22 + 1;

        goto label004;

     label005:
        r163 = (java.util.Collection) r77;

        r80 = interfaceinvoke r163.<java.util.Collection: java.util.Iterator iterator()>();

     label006:
        $z39 = interfaceinvoke r80.<java.util.Iterator: boolean hasNext()>();

        if $z39 == 0 goto label011;

        $r41 = interfaceinvoke r80.<java.util.Iterator: java.lang.Object next()>();

        r81 = (java.lang.String) $r41;

        $r42 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r82 = virtualinvoke $r42.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>(r81);

        if r82 != null goto label007;

        goto label006;

     label007:
        $r43 = virtualinvoke r82.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        $z30 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r43, "android");

        if $z30 == 0 goto label010;

        $z31 = virtualinvoke r82.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z31 == 0 goto label010;

        $z32 = virtualinvoke r82.<com.android.server.pm.permission.BasePermission: boolean isRemoved()>();

        if $z32 != 0 goto label010;

        $z33 = virtualinvoke r82.<com.android.server.pm.permission.BasePermission: boolean isHardOrSoftRestricted()>();

        if $z33 != 0 goto label008;

        $z36 = virtualinvoke r82.<com.android.server.pm.permission.BasePermission: boolean isImmutablyRestricted()>();

        if $z36 == 0 goto label009;

     label008:
        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r82, i19, 8192, 8192);

     label009:
        if i20 >= 23 goto label010;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r82, i19, 72, 72);

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r82, i19);

     label010:
        goto label006;

     label011:
        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: void setMissing(boolean,int)>(0, i19);

        r76 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r76, i19);

        goto label012;

     label012:
        i18 = i18 + 1;

        goto label002;

     label013:
        if z0 == 0 goto label023;

        virtualinvoke r74.<com.android.server.pm.PackageSetting: void setInstallPermissionsFixed(boolean)>(0);

        $z26 = virtualinvoke r74.<com.android.server.pm.PackageSetting: boolean isSharedUser()>();

        if $z26 != 0 goto label014;

        r160 = new com.android.server.pm.permission.PermissionsState;

        specialinvoke r160.<com.android.server.pm.permission.PermissionsState: void <init>(com.android.server.pm.permission.PermissionsState)>(r2);

        r83 = r160;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: void reset()>();

        goto label024;

     label014:
        r84 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r84;

     label015:
        $r35 = virtualinvoke r74.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r36 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        $r37 = virtualinvoke $r36.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        r76 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int[] revokeUnusedSharedUserPermissionsLocked(com.android.server.pm.SharedUserSetting,int[])>($r35, $r37);

     label016:
        $z27 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(int[])>(r76);

        if $z27 != 0 goto label018;

     label017:
        z38 = 1;

     label018:
        exitmonitor r84;

     label019:
        r83 = r2;

        goto label024;

     label020:
        $r64 := @caughtexception;

     label021:
        exitmonitor r84;

     label022:
        throw $r64;

     label023:
        r83 = r2;

     label024:
        $r86 = r0.<com.android.server.pm.permission.PermissionManagerService: int[] mGlobalGids>;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: void setGlobalGids(int[])>($r86);

        r87 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r87;

     label025:
        r161 = new android.util.ArraySet;

        specialinvoke r161.<android.util.ArraySet: void <init>()>();

        $r88 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i23 = interfaceinvoke $r88.<java.util.List: int size()>();

     label026:
        z40 = 0;

        r89 = r76;

        i24 = 0;

        r90 = r75;

        r91 = r74;

     label027:
        if i24 >= i23 goto label238;

     label028:
        $r11 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i24);

        r93 = (java.lang.String) $r12;

     label029:
        $r13 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r94 = virtualinvoke $r13.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r93);

     label030:
        i25 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

     label031:
        if i25 < 23 goto label032;

        z41 = 1;

        goto label033;

     label032:
        z41 = 0;

     label033:
        if r94 == null goto label230;

     label034:
        $r15 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.PackageSetting getSourcePackageSetting(com.android.server.pm.permission.BasePermission)>(r94);

        if $r15 != null goto label036;

     label035:
        goto label230;

     label036:
        z42 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: boolean hasRequestedPermission(java.lang.String)>(r93);

     label037:
        if z42 != 0 goto label051;

     label038:
        $r31 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getImplicitPermissions()>();

        $z19 = interfaceinvoke $r31.<java.util.List: boolean contains(java.lang.Object)>(r93);

        if $z19 != 0 goto label041;

        $z25 = virtualinvoke r93.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.ACTIVITY_RECOGNITION");

        if $z25 == 0 goto label040;

     label039:
        goto label041;

     label040:
        goto label051;

     label041:
        $r32 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getImplicitPermissions()>();

        $z20 = interfaceinvoke $r32.<java.util.List: boolean contains(java.lang.Object)>(r93);

        if $z20 == 0 goto label043;

        virtualinvoke r161.<android.util.ArraySet: boolean add(java.lang.Object)>(r93);

     label042:
        goto label051;

     label043:
        r95 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getSplitPermissions()>();

        i26 = interfaceinvoke r95.<java.util.List: int size()>();

     label044:
        i27 = 0;

     label045:
        if i27 >= i26 goto label049;

     label046:
        $r33 = interfaceinvoke r95.<java.util.List: java.lang.Object get(int)>(i27);

        r96 = (android.content.pm.permission.SplitPermissionInfoParcelable) $r33;

        r97 = virtualinvoke r96.<android.content.pm.permission.SplitPermissionInfoParcelable: java.lang.String getSplitPermission()>();

        $r34 = virtualinvoke r96.<android.content.pm.permission.SplitPermissionInfoParcelable: java.util.List getNewPermissions()>();

        $z21 = interfaceinvoke $r34.<java.util.List: boolean contains(java.lang.Object)>(r93);

        if $z21 == 0 goto label048;

        $z22 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r97);

        if $z22 == 0 goto label048;

        virtualinvoke r161.<android.util.ArraySet: boolean add(java.lang.Object)>(r93);

     label047:
        i28 = i23;

        goto label052;

     label048:
        i27 = i27 + 1;

        goto label045;

     label049:
        goto label051;

     label050:
        $r65 := @caughtexception;

        r98 = $r65;

        r99 = r87;

        goto label261;

     label051:
        r97 = null;

        i28 = i23;

     label052:
        $z43 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isRuntimeOnly()>();

        if $z43 == 0 goto label054;

     label053:
        if z41 != 0 goto label054;

        r100 = r73;

        goto label234;

     label054:
        r101 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

     label055:
        z44 = 0;

     label056:
        z45 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isAppOp()>();

     label057:
        if z45 == 0 goto label060;

     label058:
        $r29 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r30 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r29.<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>(r101, $r30);

     label059:
        goto label060;

     label060:
        $z2 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isNormal()>();

        if $z2 == 0 goto label062;

     label061:
        b29 = 2;

        goto label075;

     label062:
        z46 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

     label063:
        if z46 == 0 goto label068;

     label064:
        $r28 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        z47 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>($r28);

     label065:
        if z47 != 0 goto label067;

        if r97 == null goto label066;

        goto label067;

     label066:
        b29 = 3;

        goto label075;

     label067:
        b29 = 4;

        goto label075;

     label068:
        z48 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isSignature()>();

     label069:
        if z48 == 0 goto label074;

     label070:
        z44 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean grantSignaturePermission(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.permission.BasePermission,com.android.server.pm.permission.PermissionsState)>(r101, r70, r91, r94, r83);

     label071:
        if z44 == 0 goto label072;

        b29 = 2;

        goto label075;

     label072:
        b29 = 1;

        goto label075;

     label073:
        $r68 := @caughtexception;

        r99 = r87;

        r98 = $r68;

        goto label261;

     label074:
        b29 = 1;

     label075:
        r5 = r97;

        r103 = r89;

        if b29 == 1 goto label223;

     label076:
        z49 = virtualinvoke r91.<com.android.server.pm.PackageSetting: boolean isSystem()>();

     label077:
        if z49 != 0 goto label085;

     label078:
        $z15 = virtualinvoke r91.<com.android.server.pm.PackageSetting: boolean areInstallPermissionsFixed()>();

        if $z15 == 0 goto label085;

        $z16 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z16 != 0 goto label085;

     label079:
        if z44 != 0 goto label084;

        b30 = b29;

     label080:
        $z17 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r101);

        if $z17 != 0 goto label086;

     label081:
        b30 = b29;

     label082:
        $z18 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean isNewPlatformPermissionForPackage(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>(r101, r70);

        if $z18 != 0 goto label086;

     label083:
        b30 = 1;

        goto label086;

     label084:
        b30 = b29;

        goto label086;

     label085:
        b30 = b29;

     label086:
        if b30 == 2 goto label212;

        if b30 == 3 goto label151;

        if b30 == 4 goto label090;

        if r73 == null goto label089;

     label087:
        $r27 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r73.<java.lang.String: boolean equals(java.lang.Object)>($r27);

     label088:
        r100 = r73;

        goto label234;

     label089:
        r100 = r73;

        goto label234;

     label090:
        r6 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getInstallPermissionState(java.lang.String)>(r101);

     label091:
        if r6 == null goto label094;

     label092:
        i31 = virtualinvoke r6.<com.android.server.pm.permission.PermissionsState$PermissionState: int getFlags()>();

     label093:
        goto label095;

     label094:
        i31 = 0;

     label095:
        if r5 != null goto label096;

        r107 = r94;

        goto label097;

     label096:
        $r23 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r107 = virtualinvoke $r23.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r5);

     label097:
        i32 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: int revokeInstallPermission(com.android.server.pm.permission.BasePermission)>(r107);

     label098:
        if i32 == -1 goto label101;

     label099:
        virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r107, -1, 244735, 0);

     label100:
        z40 = 1;

        goto label101;

     label101:
        z54 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isHardRestricted()>();

     label102:
        z56 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isSoftRestricted()>();

     label103:
        i33 = lengthof r90;

     label104:
        i34 = 0;

     label105:
        if i34 >= i33 goto label149;

        i35 = r90[i34];

     label106:
        r122 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal>;

     label107:
        if r122 == null goto label111;

     label108:
        $r26 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal>;

        z59 = virtualinvoke $r26.<com.android.server.policy.PermissionPolicyInternal: boolean isInitialized(int)>(i35);

     label109:
        if z59 == 0 goto label111;

        z60 = 1;

        goto label112;

     label110:
        $r59 := @caughtexception;

        r98 = $r59;

        r99 = r87;

        goto label261;

     label111:
        z60 = 0;

     label112:
        $r124 = r94.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $i36 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>($r124, i35);

        $i37 = $i36 & 14336;

        if $i37 == 0 goto label114;

     label113:
        z64 = 1;

        goto label115;

     label114:
        z64 = 0;

     label115:
        $r24 = r94.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $i10 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>($r24, i35);

        $i11 = $i10 & 16384;

        if $i11 == 0 goto label117;

     label116:
        z65 = 1;

        goto label118;

     label117:
        z65 = 0;

     label118:
        if z41 == 0 goto label133;

        if z60 == 0 goto label126;

        if z54 == 0 goto label126;

        if z64 != 0 goto label125;

        if r6 == null goto label123;

     label119:
        $z12 = virtualinvoke r6.<com.android.server.pm.permission.PermissionsState$PermissionState: boolean isGranted()>();

        if $z12 == 0 goto label123;

     label120:
        z66 = 0;

     label121:
        $i14 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i35);

        if $i14 == -1 goto label124;

     label122:
        z66 = 1;

        goto label124;

     label123:
        z66 = 0;

     label124:
        i38 = i31;

        if z65 != 0 goto label127;

        i38 = i31 | 16384;

        z66 = 1;

        goto label127;

     label125:
        i38 = i31;

        z66 = 0;

        goto label127;

     label126:
        i38 = i31;

        z66 = 0;

        if z60 == 0 goto label127;

        i38 = i31;

        z66 = 0;

        if z56 == 0 goto label127;

        i38 = i31;

        z66 = 0;

        if z64 != 0 goto label127;

        i38 = i31;

        z66 = 0;

        if z65 != 0 goto label127;

        i38 = i31 | 16384;

        z66 = 1;

     label127:
        i39 = i38;

        z67 = z66;

        $i40 = i38 & 64;

        if $i40 == 0 goto label128;

        i39 = i38 & -65;

        z67 = 1;

     label128:
        $i13 = i39 & 8;

        if $i13 == 0 goto label129;

        i41 = i39 & -9;

        z68 = 1;

        goto label140;

     label129:
        if z60 == 0 goto label130;

        if z54 == 0 goto label130;

        i41 = i39;

        z68 = z67;

        if z64 == 0 goto label140;

     label130:
        i41 = i39;

        z68 = z67;

     label131:
        $i42 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i35);

        if $i42 == -1 goto label140;

     label132:
        z68 = 1;

        i41 = i39;

        goto label140;

     label133:
        i43 = i31;

        z69 = 0;

     label134:
        $r25 = r94.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $z10 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean hasRuntimePermission(java.lang.String,int)>($r25, i35);

        if $z10 != 0 goto label138;

     label135:
        i43 = i31;

        z69 = 0;

     label136:
        $i12 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i35);

        if $i12 == -1 goto label138;

     label137:
        i43 = i31 | 64;

        z69 = 1;

     label138:
        i41 = i43;

        z68 = z69;

        if z60 == 0 goto label140;

        if z54 != 0 goto label139;

        i41 = i43;

        z68 = z69;

        if z56 == 0 goto label140;

     label139:
        i41 = i43;

        z68 = z69;

        if z64 != 0 goto label140;

        i41 = i43;

        z68 = z69;

        if z65 != 0 goto label140;

        i41 = i43 | 16384;

        z68 = 1;

     label140:
        i44 = i41;

        z70 = z68;

        if z60 == 0 goto label144;

        if z54 != 0 goto label141;

        if z56 == 0 goto label142;

     label141:
        i44 = i41;

        z70 = z68;

        if z64 == 0 goto label144;

     label142:
        i44 = i41;

        z70 = z68;

        if z65 == 0 goto label144;

        i45 = i41 & -16385;

        i46 = i45;

        if z41 != 0 goto label143;

        i46 = i45 | 64;

     label143:
        z70 = 1;

        i44 = i46;

     label144:
        r131 = r103;

        if z70 == 0 goto label146;

     label145:
        r131 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r103, i35);

     label146:
        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r94, i35, 261119, i44);

     label147:
        i34 = i34 + 1;

        i31 = i44;

        r103 = r131;

        goto label105;

     label148:
        $r60 := @caughtexception;

        r98 = $r60;

        r99 = r87;

        goto label261;

     label149:
        r135 = r91;

        r137 = r103;

        r139 = r71;

        r140 = r90;

        goto label235;

     label150:
        $r51 := @caughtexception;

        r98 = $r51;

        r99 = r87;

        goto label261;

     label151:
        r135 = r91;

     label152:
        z71 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isHardRestricted()>();

        z72 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isSoftRestricted()>();

        i47 = lengthof r90;

     label153:
        r137 = r103;

        i48 = 0;

     label154:
        if i48 >= i47 goto label210;

        i49 = r90[i48];

     label155:
        r143 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal>;

     label156:
        if r143 == null goto label160;

     label157:
        $r22 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal>;

        z73 = virtualinvoke $r22.<com.android.server.policy.PermissionPolicyInternal: boolean isInitialized(int)>(i49);

     label158:
        if z73 == 0 goto label160;

        z74 = 1;

        goto label161;

     label159:
        $r54 := @caughtexception;

        r98 = $r54;

        r99 = r87;

        goto label261;

     label160:
        z74 = 0;

     label161:
        r144 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(r101, i49);

     label162:
        if r144 == null goto label165;

     label163:
        i50 = virtualinvoke r144.<com.android.server.pm.permission.PermissionsState$PermissionState: int getFlags()>();

     label164:
        goto label166;

     label165:
        i50 = 0;

     label166:
        $r18 = r94.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $i2 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>($r18, i49);

        $i3 = $i2 & 14336;

        if $i3 == 0 goto label168;

     label167:
        z75 = 1;

        goto label169;

     label168:
        z75 = 0;

     label169:
        z78 = 0;

     label170:
        $r19 = r94.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $i4 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>($r19, i49);

        $i5 = $i4 & 16384;

        if $i5 == 0 goto label172;

     label171:
        z79 = 1;

        goto label173;

     label172:
        z79 = 0;

     label173:
        if z41 == 0 goto label189;

        if z74 == 0 goto label180;

        if z71 == 0 goto label180;

        if z75 != 0 goto label179;

        if r144 == null goto label178;

     label174:
        z80 = virtualinvoke r144.<com.android.server.pm.permission.PermissionsState$PermissionState: boolean isGranted()>();

     label175:
        if z80 == 0 goto label178;

     label176:
        $i9 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i49);

        if $i9 == -1 goto label178;

     label177:
        z78 = 1;

        goto label178;

     label178:
        i51 = i50;

        if z79 != 0 goto label181;

        i51 = i50 | 16384;

        z78 = 1;

        goto label181;

     label179:
        i51 = i50;

        z78 = 0;

        goto label181;

     label180:
        i51 = i50;

        z78 = 0;

        if z74 == 0 goto label181;

        i51 = i50;

        z78 = 0;

        if z72 == 0 goto label181;

        i51 = i50;

        z78 = 0;

        if z75 != 0 goto label181;

        i51 = i50;

        z78 = 0;

        if z79 != 0 goto label181;

        i51 = i50 | 16384;

        z78 = 1;

     label181:
        i52 = i51;

        z81 = z78;

        $i53 = i51 & 64;

        if $i53 == 0 goto label182;

        i52 = i51 & -65;

        z81 = 1;

     label182:
        $i7 = i52 & 8;

        if $i7 == 0 goto label183;

        i54 = i52 & -9;

        z82 = 1;

        goto label201;

     label183:
        if z74 == 0 goto label184;

        if z71 == 0 goto label184;

        i54 = i52;

        z82 = z81;

        if z75 == 0 goto label201;

     label184:
        i54 = i52;

        z82 = z81;

        if r144 == null goto label201;

        i54 = i52;

        z82 = z81;

     label185:
        $z9 = virtualinvoke r144.<com.android.server.pm.permission.PermissionsState$PermissionState: boolean isGranted()>();

        if $z9 == 0 goto label201;

     label186:
        i54 = i52;

        z82 = z81;

     label187:
        $i8 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i49);

        if $i8 != -1 goto label201;

     label188:
        z82 = 1;

        i54 = i52;

        goto label201;

     label189:
        i55 = i50;

        z83 = 0;

        if r144 != null goto label194;

        i55 = i50;

        z83 = 0;

     label190:
        $r20 = "android";

        $r21 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z7 == 0 goto label194;

     label191:
        i55 = i50;

        z83 = 0;

     label192:
        $z8 = virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isRemoved()>();

        if $z8 != 0 goto label194;

     label193:
        i55 = i50 | 72;

        z83 = 1;

     label194:
        z84 = z83;

     label195:
        $r145 = r94.<com.android.server.pm.permission.BasePermission: java.lang.String name>;

        $z85 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean hasRuntimePermission(java.lang.String,int)>($r145, i49);

        if $z85 != 0 goto label199;

     label196:
        z84 = z83;

     label197:
        $i6 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i49);

        if $i6 == -1 goto label199;

     label198:
        z84 = 1;

     label199:
        i54 = i55;

        z82 = z84;

        if z74 == 0 goto label201;

        if z71 != 0 goto label200;

        i54 = i55;

        z82 = z84;

        if z72 == 0 goto label201;

     label200:
        i54 = i55;

        z82 = z84;

        if z75 != 0 goto label201;

        i54 = i55;

        z82 = z84;

        if z79 != 0 goto label201;

        i54 = i55 | 16384;

        z82 = 1;

     label201:
        i56 = i54;

        z86 = z82;

        if z74 == 0 goto label205;

        if z71 != 0 goto label202;

        if z72 == 0 goto label203;

     label202:
        i56 = i54;

        z86 = z82;

        if z75 == 0 goto label205;

     label203:
        i56 = i54;

        z86 = z82;

        if z79 == 0 goto label205;

        i57 = i54 & -16385;

        if z41 != 0 goto label204;

        i57 = i57 | 64;

        goto label204;

     label204:
        z86 = 1;

        i56 = i57;

     label205:
        r146 = r137;

        if z86 == 0 goto label207;

     label206:
        r146 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r137, i49);

     label207:
        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r94, i49, 261119, i56);

     label208:
        i48 = i48 + 1;

        r137 = r146;

        goto label154;

     label209:
        $r52 := @caughtexception;

        r98 = $r52;

        r99 = r87;

        goto label261;

     label210:
        r140 = r90;

        r139 = r71;

        goto label235;

     label211:
        $r62 := @caughtexception;

        r98 = $r62;

        r99 = r87;

        goto label261;

     label212:
        r135 = r91;

        r140 = r90;

     label213:
        $r16 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r147 = virtualinvoke $r16.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i58 = lengthof r147;

     label214:
        r137 = r103;

        i59 = 0;

     label215:
        if i59 >= i58 goto label218;

        i60 = r147[i59];

        r148 = r137;

     label216:
        $r17 = virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(r101, i60);

        if $r17 == null goto label217;

        virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r94, i60);

        virtualinvoke r83.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r94, i60, 261119, 0);

        r148 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r137, i60);

     label217:
        i59 = i59 + 1;

        r137 = r148;

        goto label215;

     label218:
        i61 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantInstallPermission(com.android.server.pm.permission.BasePermission)>(r94);

     label219:
        if i61 == -1 goto label220;

        r139 = r71;

        z40 = 1;

        goto label235;

     label220:
        r139 = r71;

        goto label235;

     label221:
        $r55 := @caughtexception;

        r98 = $r55;

        r99 = r87;

        goto label261;

     label222:
        $r63 := @caughtexception;

        r98 = $r63;

        r99 = r87;

        goto label261;

     label223:
        r140 = r90;

     label224:
        $i0 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int revokeInstallPermission(com.android.server.pm.permission.BasePermission)>(r94);

        if $i0 == -1 goto label226;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r94, -1, 261119, 0);

     label225:
        r139 = r71;

        z40 = 1;

        r137 = r89;

        r135 = r91;

        goto label235;

     label226:
        virtualinvoke r94.<com.android.server.pm.permission.BasePermission: boolean isAppOp()>();

     label227:
        r100 = r71;

        goto label234;

     label228:
        $r50 := @caughtexception;

        r98 = $r50;

        r99 = r87;

        goto label261;

     label229:
        $r46 := @caughtexception;

        r98 = $r46;

        r99 = r87;

        goto label261;

     label230:
        r100 = r71;

        i28 = i23;

        if r71 == null goto label234;

     label231:
        $r14 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r71.<java.lang.String: boolean equals(java.lang.Object)>($r14);

     label232:
        r100 = r71;

        i28 = i23;

        goto label234;

     label233:
        $r49 := @caughtexception;

        r98 = $r49;

        r99 = r87;

        goto label261;

     label234:
        r137 = r89;

        r135 = r91;

        r140 = r90;

        r139 = r100;

     label235:
        i24 = i24 + 1;

        i23 = i28;

        r90 = r140;

        r89 = r137;

        r73 = r139;

        r91 = r135;

        goto label027;

     label236:
        $r66 := @caughtexception;

        r98 = $r66;

        r99 = r87;

        goto label261;

     label237:
        $r58 := @caughtexception;

        r98 = $r58;

        r99 = r87;

        goto label261;

     label238:
        r99 = r87;

        i62 = 0;

        if z40 != 0 goto label239;

        if z0 == 0 goto label244;

        goto label239;

     label239:
        z87 = virtualinvoke r91.<com.android.server.pm.PackageSetting: boolean areInstallPermissionsFixed()>();

     label240:
        if z87 != 0 goto label244;

     label241:
        z88 = virtualinvoke r91.<com.android.server.pm.PackageSetting: boolean isSystem()>();

     label242:
        if z88 == 0 goto label246;

        goto label244;

     label243:
        $r53 := @caughtexception;

        r98 = $r53;

        goto label261;

     label244:
        $r155 = virtualinvoke r91.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z89 = virtualinvoke $r155.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

     label245:
        if z89 == 0 goto label249;

     label246:
        virtualinvoke r91.<com.android.server.pm.PackageSetting: void setInstallPermissionsFixed(boolean)>(1);

     label247:
        goto label249;

     label248:
        $r47 := @caughtexception;

        r98 = $r47;

        goto label261;

     label249:
        r156 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int[] revokePermissionsNoLongerImplicitLocked(com.android.server.pm.permission.PermissionsState,com.android.server.pm.parsing.pkg.AndroidPackage,int[])>(r2, r70, r89);

     label250:
        r157 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int[] setInitialGrantForNewImplicitPermissionsLocked(com.android.server.pm.permission.PermissionsState,com.android.server.pm.permission.PermissionsState,com.android.server.pm.parsing.pkg.AndroidPackage,android.util.ArraySet,int[])>(r83, r2, r70, r161, r156);

     label251:
        r158 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int[] checkIfLegacyStorageOpsNeedToBeUpdated(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,int[])>(r70, z0, r157);

        exitmonitor r87;

     label252:
        if r1 == null goto label253;

        virtualinvoke r1.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onPermissionUpdated(int[],boolean)>(r158, z38);

        goto label253;

     label253:
        i63 = lengthof r158;

     label254:
        if i62 >= i63 goto label255;

        i64 = r158[i62];

        $r10 = interfaceinvoke r70.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void notifyRuntimePermissionStateChanged(java.lang.String,int)>($r10, i64);

        i62 = i62 + 1;

        goto label254;

     label255:
        return;

     label256:
        $r61 := @caughtexception;

        r98 = $r61;

        goto label261;

     label257:
        $r67 := @caughtexception;

        r98 = $r67;

        goto label261;

     label258:
        $r57 := @caughtexception;

        r98 = $r57;

        goto label261;

     label259:
        $r69 := @caughtexception;

        r98 = $r69;

        goto label261;

     label260:
        $r48 := @caughtexception;

        r98 = $r48;

        r99 = r87;

     label261:
        exitmonitor r99;

     label262:
        throw r98;

     label263:
        $r56 := @caughtexception;

        r98 = $r56;

        goto label261;

        catch java.lang.Throwable from label015 to label016 with label020;
        catch java.lang.Throwable from label016 to label017 with label020;
        catch java.lang.Throwable from label018 to label019 with label020;
        catch java.lang.Throwable from label021 to label022 with label020;
        catch java.lang.Throwable from label025 to label026 with label260;
        catch java.lang.Throwable from label028 to label029 with label237;
        catch java.lang.Throwable from label029 to label030 with label236;
        catch java.lang.Throwable from label030 to label031 with label236;
        catch java.lang.Throwable from label034 to label035 with label229;
        catch java.lang.Throwable from label036 to label037 with label229;
        catch java.lang.Throwable from label038 to label039 with label050;
        catch java.lang.Throwable from label041 to label042 with label050;
        catch java.lang.Throwable from label043 to label044 with label050;
        catch java.lang.Throwable from label046 to label047 with label050;
        catch java.lang.Throwable from label052 to label053 with label229;
        catch java.lang.Throwable from label054 to label055 with label229;
        catch java.lang.Throwable from label056 to label057 with label229;
        catch java.lang.Throwable from label058 to label059 with label050;
        catch java.lang.Throwable from label060 to label061 with label229;
        catch java.lang.Throwable from label062 to label063 with label229;
        catch java.lang.Throwable from label064 to label065 with label050;
        catch java.lang.Throwable from label068 to label069 with label229;
        catch java.lang.Throwable from label070 to label071 with label073;
        catch java.lang.Throwable from label076 to label077 with label222;
        catch java.lang.Throwable from label078 to label079 with label073;
        catch java.lang.Throwable from label080 to label081 with label073;
        catch java.lang.Throwable from label082 to label083 with label073;
        catch java.lang.Throwable from label087 to label088 with label073;
        catch java.lang.Throwable from label090 to label091 with label150;
        catch java.lang.Throwable from label092 to label093 with label073;
        catch java.lang.Throwable from label096 to label097 with label150;
        catch java.lang.Throwable from label097 to label098 with label150;
        catch java.lang.Throwable from label099 to label100 with label073;
        catch java.lang.Throwable from label101 to label102 with label150;
        catch java.lang.Throwable from label102 to label103 with label150;
        catch java.lang.Throwable from label103 to label104 with label150;
        catch java.lang.Throwable from label106 to label107 with label150;
        catch java.lang.Throwable from label108 to label109 with label110;
        catch java.lang.Throwable from label112 to label113 with label148;
        catch java.lang.Throwable from label115 to label116 with label148;
        catch java.lang.Throwable from label119 to label120 with label148;
        catch java.lang.Throwable from label121 to label122 with label148;
        catch java.lang.Throwable from label131 to label132 with label148;
        catch java.lang.Throwable from label134 to label135 with label148;
        catch java.lang.Throwable from label136 to label137 with label148;
        catch java.lang.Throwable from label145 to label146 with label148;
        catch java.lang.Throwable from label146 to label147 with label148;
        catch java.lang.Throwable from label152 to label153 with label211;
        catch java.lang.Throwable from label155 to label156 with label209;
        catch java.lang.Throwable from label157 to label158 with label159;
        catch java.lang.Throwable from label161 to label162 with label209;
        catch java.lang.Throwable from label163 to label164 with label159;
        catch java.lang.Throwable from label166 to label167 with label209;
        catch java.lang.Throwable from label170 to label171 with label209;
        catch java.lang.Throwable from label174 to label175 with label209;
        catch java.lang.Throwable from label176 to label177 with label221;
        catch java.lang.Throwable from label185 to label186 with label221;
        catch java.lang.Throwable from label187 to label188 with label221;
        catch java.lang.Throwable from label190 to label191 with label221;
        catch java.lang.Throwable from label192 to label193 with label221;
        catch java.lang.Throwable from label195 to label196 with label221;
        catch java.lang.Throwable from label197 to label198 with label221;
        catch java.lang.Throwable from label206 to label207 with label221;
        catch java.lang.Throwable from label207 to label208 with label221;
        catch java.lang.Throwable from label213 to label214 with label228;
        catch java.lang.Throwable from label216 to label217 with label221;
        catch java.lang.Throwable from label218 to label219 with label221;
        catch java.lang.Throwable from label224 to label225 with label228;
        catch java.lang.Throwable from label226 to label227 with label228;
        catch java.lang.Throwable from label231 to label232 with label233;
        catch java.lang.Throwable from label239 to label240 with label259;
        catch java.lang.Throwable from label241 to label242 with label243;
        catch java.lang.Throwable from label244 to label245 with label259;
        catch java.lang.Throwable from label246 to label247 with label248;
        catch java.lang.Throwable from label249 to label250 with label258;
        catch java.lang.Throwable from label250 to label251 with label257;
        catch java.lang.Throwable from label251 to label252 with label256;
        catch java.lang.Throwable from label261 to label262 with label263;
    }

    private void restoreRuntimePermissions(byte[], android.os.UserHandle)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.os.UserHandle r1;
        java.lang.Object r2;
        android.util.SparseBooleanArray $r3;
        int $i0;
        android.permission.PermissionControllerManager $r4;
        java.lang.Throwable $r5;
        byte[] r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r6 := @parameter0: byte[];

        r1 := @parameter1: android.os.UserHandle;

        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseBooleanArray mHasNoDelayedPermBackup>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r3.<android.util.SparseBooleanArray: void delete(int)>($i0);

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionControllerManager mPermissionControllerManager>;

        virtualinvoke $r4.<android.permission.PermissionControllerManager: void stageAndApplyRuntimePermissionsBackup(byte[],android.os.UserHandle)>(r6, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void revokePermissionFromPackageForUser(java.lang.String, java.lang.String, boolean, int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2, $r10;
        boolean z0;
        int i0, $i1, $i2;
        android.content.pm.PackageManagerInternal $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r11;
        android.content.pm.ApplicationInfo r12;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r11 := @parameter4: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r12 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int,int)>(r1, 0, 1000, 0);

        if r12 == null goto label1;

        $i2 = r12.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= 23 goto label1;

        return;

     label1:
        $i1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermissionImpl(java.lang.String,java.lang.String,int)>(r2, r1, i0);

        if $i1 != 0 goto label5;

     label2:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r2, r1, z0, 1000, i0, null, r11);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to revoke ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r10, $r4);

     label5:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private int[] revokePermissionsNoLongerImplicitLocked(com.android.server.pm.permission.PermissionsState, com.android.server.pm.parsing.pkg.AndroidPackage, int[])
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionsState r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int[] r3, r12;
        int i0, i1, i2, $i4, $i5, $i6, i8;
        java.util.Iterator r4;
        com.android.server.pm.UserManagerService $r6;
        java.util.Set $r7;
        boolean $z0, $z1, $z2, z4;
        java.lang.Object $r8;
        java.util.List $r9;
        com.android.server.pm.permission.PermissionsState$PermissionState $r10;
        com.android.server.pm.permission.PermissionSettings $r11;
        java.lang.String r13;
        com.android.server.pm.permission.BasePermission r14;
        short s9;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.permission.PermissionsState;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r12 := @parameter2: int[];

        interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i4 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i4 < 23 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        $r6 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r3 = virtualinvoke $r6.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i0 = lengthof r3;

        i8 = 0;

     label03:
        if i8 >= i0 goto label10;

        i1 = r3[i8];

        $r7 = virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: java.util.Set getPermissions(int)>(i1);

        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r8;

        $r9 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getImplicitPermissions()>();

        $z1 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r13);

        if $z1 != 0 goto label08;

        $z2 = virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r13);

        if $z2 != 0 goto label07;

        $r10 = virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(r13, i1);

        i2 = virtualinvoke $r10.<com.android.server.pm.permission.PermissionsState$PermissionState: int getFlags()>();

        $i5 = i2 & 128;

        if $i5 == 0 goto label06;

        $r11 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r14 = virtualinvoke $r11.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r13);

        s9 = 128;

        $i6 = i2 & 52;

        if $i6 != 0 goto label05;

        s9 = 128;

        if z4 == 0 goto label05;

        virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r14, i1);

        s9 = 128 | 3;

     label05:
        virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r14, i1, s9, 0);

        r12 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r12, i1);

        goto label08;

     label06:
        goto label08;

     label07:
        goto label08;

     label08:
        goto label04;

     label09:
        i8 = i8 + 1;

        goto label03;

     label10:
        return r12;
    }

    private void revokeRuntimePermissionInternal(java.lang.String, java.lang.String, boolean, int, int, java.lang.String, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r1, $r24;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.permission.BasePermission r3;
        android.os.UserManagerInternal $r4;
        android.content.Context $r5;
        android.content.pm.PackageManagerInternal $r6, $r7, $r12;
        java.lang.StringBuilder $r8, $r13, $r19, $r25, $r32, $r39;
        java.lang.String $r11, $r17, $r23, $r31, $r38, $r42, r43, r44, r45;
        java.lang.IllegalArgumentException $r16, $r22;
        com.android.server.pm.permission.PermissionSettings $r18;
        java.lang.SecurityException $r30, $r37;
        com.android.server.pm.PackageSetting r47;
        com.android.server.pm.permission.PermissionsState r48;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r43 := @parameter0: java.lang.String;

        r44 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i12 := @parameter3: int;

        i0 := @parameter4: int;

        r45 := @parameter5: java.lang.String;

        r1 := @parameter6: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z1 = virtualinvoke $r4.<android.os.UserManagerInternal: boolean exists(int)>(i0);

        if $z1 != 0 goto label01;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such user:");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r42);

        return;

     label01:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i12, i0, 1, 1, 0, "revokeRuntimePermission");

        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r2 = virtualinvoke $r6.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r44);

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r47 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r44);

        if r2 == null goto label17;

        if r47 != null goto label02;

        goto label17;

     label02:
        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z2 = virtualinvoke $r12.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r2, i12, i0);

        if $z2 != 0 goto label16;

        $r18 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r3 = virtualinvoke $r18.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r43);

        if r3 == null goto label15;

        virtualinvoke r3.<com.android.server.pm.permission.BasePermission: void enforceDeclaredUsedAndRuntimeOrDevelopment(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r2, r47);

        $i2 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i2 >= 23 goto label03;

        $z7 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z7 == 0 goto label03;

        return;

     label03:
        r48 = virtualinvoke r47.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        i13 = virtualinvoke r48.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r43, i0);

        $i3 = i13 & 16;

        if $i3 == 0 goto label05;

        $i10 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        if $i10 != 1000 goto label04;

        goto label05;

     label04:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-System UID cannot revoke system fixed permission ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r37 = new java.lang.SecurityException;

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.SecurityException: void <init>(java.lang.String)>($r38);

        throw $r37;

     label05:
        if z0 != 0 goto label07;

        $i9 = i13 & 4;

        if $i9 != 0 goto label06;

        goto label07;

     label06:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot revoke policy fixed permission ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r30 = new java.lang.SecurityException;

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.SecurityException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label07:
        $z3 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isDevelopment()>();

        if $z3 == 0 goto label09;

        $i8 = virtualinvoke r48.<com.android.server.pm.permission.PermissionsState: int revokeInstallPermission(com.android.server.pm.permission.BasePermission)>(r3);

        if $i8 == -1 goto label08;

        if r1 == null goto label08;

        $r24 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        virtualinvoke $r24.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onInstallPermissionRevoked()>();

     label08:
        return;

     label09:
        $z4 = virtualinvoke r48.<com.android.server.pm.permission.PermissionsState: boolean hasRuntimePermission(java.lang.String,int)>(r43, i0);

        if $z4 != 0 goto label10;

        return;

     label10:
        $i4 = virtualinvoke r48.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r3, i0);

        if $i4 != -1 goto label11;

        return;

     label11:
        $z5 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z5 == 0 goto label12;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void logPermission(int,java.lang.String,java.lang.String)>(1245, r43, r44);

     label12:
        if r1 == null goto label13;

        $i5 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $i6 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i5);

        $i7 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i6);

        virtualinvoke r1.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onPermissionRevoked(int,int,java.lang.String)>($i7, i0, r45);

        goto label13;

     label13:
        $z6 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z6 == 0 goto label14;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void notifyRuntimePermissionStateChanged(java.lang.String,int)>(r44, i0);

     label14:
        return;

     label15:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label16:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label17:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r11);

        return;
    }

    private void revokeRuntimePermissionsIfGroupChanged(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.parsing.pkg.AndroidPackage, java.util.ArrayList, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, r45;
        java.util.ArrayList r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, i11, i12, i13, i15, i16;
        java.lang.String r5, r7, $r30, $r34, $r36, $r44, r48, r49;
        int[] r6;
        java.util.List $r9, $r11, $r12, $r31;
        android.util.ArrayMap $r10;
        java.lang.Object $r13, $r16, $r18, $r32;
        android.content.pm.parsing.component.ParsedPermissionGroup $r14, $r15, $r33, $r35;
        boolean $z0;
        android.os.UserManagerInternal $r17;
        java.lang.StringBuilder $r19, $r39;
        java.lang.Object[] $r28;
        java.lang.Integer $r29;
        java.lang.Throwable $r38;
        android.content.pm.parsing.component.ParsedPermission r46, r47;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r45 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter2: java.util.ArrayList;

        r3 := @parameter3: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r9 = interfaceinvoke r45.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        i11 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r9);

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>(int)>(i11);

        i12 = 0;

     label01:
        if i12 >= i11 goto label03;

        $r31 = interfaceinvoke r45.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $r32 = interfaceinvoke $r31.<java.util.List: java.lang.Object get(int)>(i12);

        r46 = (android.content.pm.parsing.component.ParsedPermission) $r32;

        $r33 = virtualinvoke r46.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermissionGroup getParsedPermissionGroup()>();

        if $r33 == null goto label02;

        $r34 = virtualinvoke r46.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r35 = virtualinvoke r46.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermissionGroup getParsedPermissionGroup()>();

        $r36 = virtualinvoke $r35.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getName()>();

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r36);

     label02:
        i12 = i12 + 1;

        goto label01;

     label03:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        i1 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r11);

        i13 = 0;

     label04:
        if i13 >= i1 goto label18;

        $r12 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i13);

        r47 = (android.content.pm.parsing.component.ParsedPermission) $r13;

        $i6 = virtualinvoke r47.<android.content.pm.parsing.component.ParsedPermission: int getProtection()>();

        $i7 = $i6 & 1;

        if $i7 == 0 goto label17;

        r5 = virtualinvoke r47.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r14 = virtualinvoke r47.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermissionGroup getParsedPermissionGroup()>();

        if $r14 != null goto label05;

        r48 = null;

        goto label06;

     label05:
        $r15 = virtualinvoke r47.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermissionGroup getParsedPermissionGroup()>();

        r48 = virtualinvoke $r15.<android.content.pm.parsing.component.ParsedPermissionGroup: java.lang.String getName()>();

     label06:
        $r16 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r49 = (java.lang.String) $r16;

        if r48 == null goto label16;

        $z0 = virtualinvoke r48.<java.lang.String: boolean equals(java.lang.Object)>(r49);

        if $z0 != 0 goto label15;

        $r17 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        r6 = virtualinvoke $r17.<android.os.UserManagerInternal: int[] getUserIds()>();

        i2 = lengthof r6;

        i15 = 0;

     label07:
        if i15 >= i2 goto label14;

        i3 = r6[i15];

        i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i16 = 0;

     label08:
        if i16 >= i4 goto label13;

        $r18 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i16);

        r7 = (java.lang.String) $r18;

        $i8 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(r5, r7, i3);

        if $i8 != 0 goto label12;

        i5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Revoking permission ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as the group changed from ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        $r28 = newarray (java.lang.Object)[3];

        $r28[0] = "72710897";

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r28[1] = $r29;

        $r30 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[2] = $r30;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r28);

     label09:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r5, r7, 0, i0, i3, null, r3);

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not revoke ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r44, $r38);

        goto label12;

     label12:
        i16 = i16 + 1;

        goto label08;

     label13:
        i15 = i15 + 1;

        goto label07;

     label14:
        goto label17;

     label15:
        goto label17;

     label16:
        goto label17;

     label17:
        i13 = i13 + 1;

        goto label04;

     label18:
        return;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    private int[] revokeUnusedSharedUserPermissionsLocked(com.android.server.pm.SharedUserSetting, int[])
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int[] r1, $r5, r30;
        java.util.Iterator r3;
        int i0, i1, $i2, $i3, $i4, i7, i8, i9, i11, i12;
        android.util.ArraySet $r4;
        java.lang.Object $r6, $r10, $r14, $r18;
        java.lang.String $r7, $r9, $r11, $r13, r25;
        boolean $z0, $z2, $z4, $z6;
        com.android.server.pm.permission.PermissionSettings $r8, $r12, $r19;
        java.util.List $r15, $r16, $r17, r23, r27, r31;
        com.android.server.pm.permission.BasePermission $r20, r29, r33;
        com.android.server.pm.SharedUserSetting r21;
        com.android.server.pm.parsing.pkg.AndroidPackage r24;
        com.android.server.pm.permission.PermissionsState r26;
        com.android.server.pm.permission.PermissionsState$PermissionState r28, r32;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r21 := @parameter0: com.android.server.pm.SharedUserSetting;

        r1 := @parameter1: int[];

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r23 = virtualinvoke r21.<com.android.server.pm.SharedUserSetting: java.util.List getPackages()>();

        if r23 == null goto label17;

        $i2 = interfaceinvoke r23.<java.util.List: int size()>();

        if $i2 != 0 goto label01;

        goto label17;

     label01:
        r3 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label07;

        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r14;

        $r15 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z4 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label03;

        goto label02;

     label03:
        $r16 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i7 = interfaceinvoke $r16.<java.util.List: int size()>();

        i8 = 0;

     label04:
        if i8 >= i7 goto label06;

        $r17 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i8);

        r25 = (java.lang.String) $r18;

        $r19 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r20 = virtualinvoke $r19.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r25);

        if $r20 == null goto label05;

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r25);

     label05:
        i8 = i8 + 1;

        goto label04;

     label06:
        goto label02;

     label07:
        r26 = virtualinvoke r21.<com.android.server.pm.SharedUserSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        r27 = virtualinvoke r26.<com.android.server.pm.permission.PermissionsState: java.util.List getInstallPermissionStates()>();

        $i3 = interfaceinvoke r27.<java.util.List: int size()>();

        i9 = $i3 - 1;

     label08:
        if i9 < 0 goto label10;

        $r10 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(i9);

        r28 = (com.android.server.pm.permission.PermissionsState$PermissionState) $r10;

        $r11 = virtualinvoke r28.<com.android.server.pm.permission.PermissionsState$PermissionState: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>($r11);

        if $z2 != 0 goto label09;

        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r13 = virtualinvoke r28.<com.android.server.pm.permission.PermissionsState$PermissionState: java.lang.String getName()>();

        r29 = virtualinvoke $r12.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>($r13);

        if r29 == null goto label09;

        virtualinvoke r26.<com.android.server.pm.permission.PermissionsState: int revokeInstallPermission(com.android.server.pm.permission.BasePermission)>(r29);

        virtualinvoke r26.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r29, -1, 261119, 0);

     label09:
        i9 = i9 + -1;

        goto label08;

     label10:
        r30 = <libcore.util.EmptyArray: int[] INT>;

        i0 = lengthof r1;

        i11 = 0;

     label11:
        if i11 >= i0 goto label16;

        i1 = r1[i11];

        r31 = virtualinvoke r26.<com.android.server.pm.permission.PermissionsState: java.util.List getRuntimePermissionStates(int)>(i1);

        $i4 = interfaceinvoke r31.<java.util.List: int size()>();

        i12 = $i4 - 1;

     label12:
        if i12 < 0 goto label15;

        $r6 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i12);

        r32 = (com.android.server.pm.permission.PermissionsState$PermissionState) $r6;

        $r7 = virtualinvoke r32.<com.android.server.pm.permission.PermissionsState$PermissionState: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>($r7);

        if $z0 != 0 goto label14;

        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r9 = virtualinvoke r32.<com.android.server.pm.permission.PermissionsState$PermissionState: java.lang.String getName()>();

        r33 = virtualinvoke $r8.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>($r9);

        if r33 == null goto label13;

        virtualinvoke r26.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r33, i1);

        virtualinvoke r26.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r33, i1, 261119, 0);

        r30 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r30, i1);

        goto label14;

     label13:
        goto label14;

     label14:
        i12 = i12 + -1;

        goto label12;

     label15:
        i11 = i11 + 1;

        goto label11;

     label16:
        return r30;

     label17:
        $r5 = <libcore.util.EmptyArray: int[] INT>;

        return $r5;
    }

    private boolean setDefaultBrowserInternal(java.lang.String, boolean, boolean, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, z1, $z2;
        int i0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider r1;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        java.lang.Object r6, r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        if i0 != -1 goto label01;

        return 0;

     label01:
        r6 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r6;

     label02:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider mDefaultBrowserProvider>;

        exitmonitor r6;

     label03:
        if r1 != null goto label04;

        return 0;

     label04:
        if z0 == 0 goto label05;

        interfaceinvoke r1.<com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider: void setDefaultBrowserAsync(java.lang.String,int)>(r5, i0);

        goto label06;

     label05:
        $z2 = interfaceinvoke r1.<com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider: boolean setDefaultBrowser(java.lang.String,int)>(r5, i0);

        if $z2 != 0 goto label06;

        return 0;

     label06:
        if z1 == 0 goto label12;

        if r5 == null goto label12;

        r7 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r7;

     label07:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToDefaultBrowser(java.lang.String,int)>(r5, i0);

        exitmonitor r7;

     label08:
        goto label12;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r7;

     label11:
        throw $r4;

     label12:
        return 1;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r6;

     label15:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private int[] setInitialGrantForNewImplicitPermissionsLocked(com.android.server.pm.permission.PermissionsState, com.android.server.pm.permission.PermissionsState, com.android.server.pm.parsing.pkg.AndroidPackage, android.util.ArraySet, int[])
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionsState r1, r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        android.util.ArraySet r4, $r19, r25, r26, r30;
        java.util.List r6, r23;
        android.content.pm.permission.SplitPermissionInfoParcelable r7;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10;
        android.util.ArrayMap $r8;
        java.lang.Object $r9, $r10, $r13, $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, z7;
        com.android.server.pm.permission.PermissionSettings $r11;
        com.android.server.pm.UserManagerService $r12;
        java.lang.String $r14, $r18, r24, r29;
        int[] r21, r27, r32;
        com.android.server.pm.permission.BasePermission r31;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.permission.PermissionsState;

        r2 := @parameter1: com.android.server.pm.permission.PermissionsState;

        r3 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r4 := @parameter3: android.util.ArraySet;

        r21 := @parameter4: int[];

        interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r8 = new android.util.ArrayMap;

        specialinvoke $r8.<android.util.ArrayMap: void <init>()>();

        r6 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getSplitPermissions()>();

        i2 = interfaceinvoke r6.<java.util.List: int size()>();

        i3 = 0;

     label01:
        if i3 >= i2 goto label05;

        $r15 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (android.content.pm.permission.SplitPermissionInfoParcelable) $r15;

        r23 = virtualinvoke r7.<android.content.pm.permission.SplitPermissionInfoParcelable: java.util.List getNewPermissions()>();

        i4 = interfaceinvoke r23.<java.util.List: int size()>();

        i5 = 0;

     label02:
        if i5 >= i4 goto label04;

        $r16 = interfaceinvoke r23.<java.util.List: java.lang.Object get(int)>(i5);

        r24 = (java.lang.String) $r16;

        $r17 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r24);

        r25 = (android.util.ArraySet) $r17;

        r26 = r25;

        if r25 != null goto label03;

        $r19 = new android.util.ArraySet;

        specialinvoke $r19.<android.util.ArraySet: void <init>()>();

        r26 = $r19;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, $r19);

     label03:
        $r18 = virtualinvoke r7.<android.content.pm.permission.SplitPermissionInfoParcelable: java.lang.String getSplitPermission()>();

        virtualinvoke r26.<android.util.ArraySet: boolean add(java.lang.Object)>($r18);

        i5 = i5 + 1;

        goto label02;

     label04:
        i3 = i3 + 1;

        goto label01;

     label05:
        i0 = virtualinvoke r4.<android.util.ArraySet: int size()>();

        i6 = 0;

        r27 = r21;

     label06:
        if i6 >= i0 goto label17;

        $r9 = virtualinvoke r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i6);

        r29 = (java.lang.String) $r9;

        $r10 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r29);

        r30 = (android.util.ArraySet) $r10;

        if r30 == null goto label16;

        $z0 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>(r29);

        if $z0 != 0 goto label15;

        $r11 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r31 = virtualinvoke $r11.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r29);

        $r12 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r32 = virtualinvoke $r12.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i7 = lengthof r32;

        i8 = 0;

     label07:
        if i8 >= i7 goto label14;

        i1 = r32[i8];

        $z1 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.ACTIVITY_RECOGNITION");

        if $z1 != 0 goto label08;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r31, i1, 128, 128);

     label08:
        r27 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r27, i1);

        i9 = 0;

     label09:
        z7 = 0;

        $i10 = virtualinvoke r30.<android.util.ArraySet: int size()>();

        if i9 >= $i10 goto label11;

        $r13 = virtualinvoke r30.<android.util.ArraySet: java.lang.Object valueAt(int)>(i9);

        $r14 = (java.lang.String) $r13;

        $z3 = virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean hasInstallPermission(java.lang.String)>($r14);

        if $z3 == 0 goto label10;

        z7 = 1;

        goto label11;

     label10:
        i9 = i9 + 1;

        goto label09;

     label11:
        $z2 = virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: boolean hasRequestedPermission(android.util.ArraySet)>(r30);

        if $z2 != 0 goto label12;

        if z7 != 0 goto label12;

        goto label13;

     label12:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void inheritPermissionStateToNewImplicitPermissionLocked(android.util.ArraySet,java.lang.String,com.android.server.pm.permission.PermissionsState,com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r30, r29, r2, r3, i1);

     label13:
        i8 = i8 + 1;

        goto label07;

     label14:
        goto label16;

     label15:
        goto label16;

     label16:
        i6 = i6 + 1;

        goto label06;

     label17:
        return r27;
    }

    private void setWhitelistedRestrictedPermissionsForUsers(com.android.server.pm.parsing.pkg.AndroidPackage, int[], java.util.List, int, int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int[] r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r3;
        com.android.server.pm.permission.PermissionsState r4, $r14;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i15, i16, i17, i19, i20, i21, i24, i25, i27, i28, i30, i31, i32, $i34, i35, i36, i37, i38;
        com.android.server.pm.permission.BasePermission r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z8, z9, z11, z12;
        android.content.pm.PackageManagerInternal $r7, $r13;
        android.util.SparseArray $r8;
        java.util.List $r9, $r15, r22;
        java.lang.String $r10, r23, $r24, r26;
        java.lang.Object $r11, $r12, $r16, $r18, $r19;
        com.android.server.pm.permission.PermissionSettings $r17;
        android.util.ArraySet $r20, $r21, r25;
        short s18, s22, s23, s26, s29, s33;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: int[];

        r22 := @parameter2: java.util.List;

        i11 := @parameter3: int;

        i12 := @parameter4: int;

        r3 := @parameter5: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r4 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: com.android.server.pm.permission.PermissionsState getPermissionsState(android.content.pm.PackageManagerInternal,com.android.server.pm.parsing.pkg.AndroidPackage)>($r7, r1);

        if r4 != null goto label01;

        return;

     label01:
        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        z8 = 0;

        $r9 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        i13 = 0;

     label02:
        $i4 = lengthof r2;

        if i13 >= $i4 goto label25;

        i1 = r2[i13];

        i2 = i13;

        i15 = 0;

     label03:
        if i15 >= i0 goto label24;

        $r15 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i15);

        r23 = (java.lang.String) $r16;

        $r17 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r6 = virtualinvoke $r17.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r23);

        if r6 == null goto label23;

        $z2 = virtualinvoke r6.<com.android.server.pm.permission.BasePermission: boolean isHardOrSoftRestricted()>();

        if $z2 != 0 goto label04;

        goto label23;

     label04:
        $z3 = virtualinvoke r4.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>(r23, i1);

        if $z3 == 0 goto label06;

        $r18 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        if $r18 != null goto label05;

        $r21 = new android.util.ArraySet;

        specialinvoke $r21.<android.util.ArraySet: void <init>()>();

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, $r21);

     label05:
        $r19 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r20 = (android.util.ArraySet) $r19;

        virtualinvoke $r20.<android.util.ArraySet: boolean add(java.lang.Object)>(r23);

     label06:
        i3 = virtualinvoke r4.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r23, i1);

        i16 = i3;

        i17 = i12;

        s18 = 0;

        i19 = i15;

        z9 = z8;

     label07:
        if i17 == 0 goto label15;

        $i10 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i17);

        i20 = 1 << $i10;

        i17 = i17 & i20;

        if i20 == 1 goto label12;

        if i20 == 2 goto label10;

        if i20 == 4 goto label08;

        i21 = i16;

        s22 = s18;

        goto label14;

     label08:
        s23 = s18 | 8192;

        if r22 == null goto label09;

        $z6 = interfaceinvoke r22.<java.util.List: boolean contains(java.lang.Object)>(r23);

        if $z6 == 0 goto label09;

        i24 = i16 | 8192;

        s22 = s23;

        i21 = i24;

        goto label14;

     label09:
        i25 = i16 & -8193;

        s22 = s23;

        i21 = i25;

        goto label14;

     label10:
        s26 = s18 | 2048;

        if r22 == null goto label11;

        $z5 = interfaceinvoke r22.<java.util.List: boolean contains(java.lang.Object)>(r23);

        if $z5 == 0 goto label11;

        i27 = i16 | 2048;

        s22 = s26;

        i21 = i27;

        goto label14;

     label11:
        i28 = i16 & -2049;

        s22 = s26;

        i21 = i28;

        goto label14;

     label12:
        s29 = s18 | 4096;

        if r22 == null goto label13;

        $z4 = interfaceinvoke r22.<java.util.List: boolean contains(java.lang.Object)>(r23);

        if $z4 == 0 goto label13;

        i30 = i16 | 4096;

        s22 = s29;

        i21 = i30;

        goto label14;

     label13:
        i31 = i16 & -4097;

        s22 = s29;

        i21 = i31;

     label14:
        i16 = i21;

        s18 = s22;

        goto label07;

     label15:
        i15 = i19;

        if i3 != i16 goto label16;

        z8 = z9;

        goto label23;

     label16:
        $i7 = i3 & 14336;

        if $i7 == 0 goto label17;

        z11 = 1;

        goto label18;

     label17:
        z11 = 0;

     label18:
        $i8 = i16 & 14336;

        if $i8 == 0 goto label19;

        z12 = 1;

        goto label20;

     label19:
        z12 = 0;

     label20:
        i32 = i16;

        s33 = s18;

        $i9 = i3 & 4;

        if $i9 == 0 goto label21;

        z0 = virtualinvoke r4.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>(r23, i1);

        i32 = i16;

        s33 = s18;

        if z12 != 0 goto label21;

        i32 = i16;

        s33 = s18;

        if z0 == 0 goto label21;

        s33 = s18 | 4;

        i32 = i16 & -5;

     label21:
        $i34 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i34 >= 23 goto label22;

        if z11 != 0 goto label22;

        if z12 == 0 goto label22;

        i32 = i32 | 64;

        s33 = s33 | 64;

        goto label22;

     label22:
        $r24 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsInternal(java.lang.String,java.lang.String,int,int,int,int,boolean,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r23, $r24, s33, i32, i11, i1, 0, null);

        z8 = 1;

        goto label23;

     label23:
        i15 = i15 + 1;

        goto label03;

     label24:
        i13 = i2 + 1;

        goto label02;

     label25:
        if z8 == 0 goto label32;

        $r10 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void restorePermissionState(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, 0, $r10, r3);

        i35 = 0;

     label26:
        $i5 = lengthof r2;

        if i35 >= $i5 goto label31;

        i36 = r2[i35];

        $r11 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i36);

        r25 = (android.util.ArraySet) $r11;

        if r25 != null goto label27;

        goto label30;

     label27:
        i37 = virtualinvoke r25.<android.util.ArraySet: int size()>();

        i38 = 0;

     label28:
        if i38 >= i37 goto label30;

        $r12 = virtualinvoke r25.<android.util.ArraySet: java.lang.Object valueAt(int)>(i38);

        r26 = (java.lang.String) $r12;

        $r13 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r14 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: com.android.server.pm.permission.PermissionsState getPermissionsState(android.content.pm.PackageManagerInternal,com.android.server.pm.parsing.pkg.AndroidPackage)>($r13, r1);

        $z1 = virtualinvoke $r14.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>(r26, i36);

        if $z1 != 0 goto label29;

        $i6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        virtualinvoke r3.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onPermissionRevoked(int,int,java.lang.String)>($i6, i36, null);

        goto label30;

     label29:
        i38 = i38 + 1;

        goto label28;

     label30:
        i35 = i35 + 1;

        goto label26;

     label31:
        goto label32;

     label32:
        return;
    }

    private boolean setWhitelistedRestrictedPermissionsInternal(java.lang.String, java.util.List, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.util.List r1, r22;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        long l3;
        float $f0;
        android.content.pm.PackageManagerInternal $r4, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6;
        android.content.Context $r6, r20;
        java.lang.String $r8, $r17, r19;
        java.lang.SecurityException $r9, $r10, $r12, $r13;
        java.lang.Object $r11;
        java.lang.StringBuilder $r14;
        java.lang.Throwable $r18;
        com.android.server.pm.parsing.pkg.AndroidPackage r21;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r23;
        int[] $r24;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r19 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r19);

        staticinvoke <com.android.internal.util.Preconditions: int checkFlagsArgument(int,int)>(i0, 7);

        $i5 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        if $i5 != 1 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z4);

        $f0 = (float) i1;

        staticinvoke <com.android.internal.util.Preconditions: float checkArgumentNonNegative(float,java.lang.String)>($f0, null);

        $i6 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i6 == i1 goto label03;

        r20 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWhitelistedRestrictedPermissions for user ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r20.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", $r17);

     label03:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r21 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r19);

        if r21 != null goto label04;

        return 0;

     label04:
        i12 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $i7 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r21, i12, $i7);

        if $z0 == 0 goto label05;

        return 0;

     label05:
        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i8 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        if $i8 != 0 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        z6 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: boolean isCallerInstallerOfRecord(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r21, i12);

        $i9 = i0 & 1;

        if $i9 == 0 goto label09;

        if z5 == 0 goto label08;

        goto label09;

     label08:
        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Modifying system whitelist requires android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        throw $r13;

     label09:
        $i10 = i0 & 4;

        if $i10 == 0 goto label21;

        if z5 != 0 goto label11;

        if z6 == 0 goto label10;

        goto label11;

     label10:
        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Modifying upgrade whitelist requires being installer on record or android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        throw $r12;

     label11:
        $r8 = interfaceinvoke r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r22 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)>($r8, i0, i1);

        if r1 == null goto label17;

        $z2 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label12;

        goto label17;

     label12:
        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i13 = 0;

     label13:
        if i13 >= i2 goto label18;

        if r22 == null goto label14;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i13);

        $z3 = interfaceinvoke r22.<java.util.List: boolean contains(java.lang.Object)>($r11);

        if $z3 != 0 goto label15;

     label14:
        if z5 == 0 goto label16;

     label15:
        i13 = i13 + 1;

        goto label13;

     label16:
        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Adding to upgrade whitelist requiresandroid.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        throw $r10;

     label17:
        if r22 == null goto label20;

        $z1 = interfaceinvoke r22.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label18;

        goto label20;

     label18:
        $i11 = i0 & 2;

        if $i11 == 0 goto label21;

        if z5 != 0 goto label21;

        if z6 == 0 goto label19;

        goto label21;

     label19:
        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Modifying installer whitelist requires being installer on record or android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        throw $r9;

     label20:
        return 1;

     label21:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label22:
        i14 = staticinvoke <android.os.Process: int myUid()>();

        r23 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        $r24 = newarray (int)[1];

        $r24[0] = i1;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void setWhitelistedRestrictedPermissionsForUsers(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.util.List,int,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r21, $r24, r1, i14, i0, r23);

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return 1;

     label24:
        $r18 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r18;

        catch java.lang.Throwable from label22 to label23 with label24;
    }

    private void systemReady()
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int[] r1, $r15, r19, r20;
        int i0, i1, i3, i4, i5, i6;
        android.util.ArraySet $r2, $r5;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8;
        android.content.Context $r9;
        java.lang.Object $r10, $r12;
        android.permission.PermissionControllerManager $r11;
        com.android.server.policy.PermissionPolicyInternal $r13;
        com.android.server.pm.UserManagerService $r14;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r16, $r17;
        android.content.pm.PackageManagerInternal $r18;
        boolean $z0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r0.<com.android.server.pm.permission.PermissionManagerService: boolean mSystemReady> = 1;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArraySet mPrivappPermissionsViolations>;

        if $r2 != null goto label7;

        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/permission/PermissionControllerManager;");

        $r11 = (android.permission.PermissionControllerManager) $r10;

        r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionControllerManager mPermissionControllerManager> = $r11;

        $r12 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/policy/PermissionPolicyInternal;");

        $r13 = (com.android.server.policy.PermissionPolicyInternal) $r12;

        r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal> = $r13;

        r19 = <com.android.server.pm.permission.PermissionManagerService: int[] EMPTY_INT_ARRAY>;

        $r14 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r1 = virtualinvoke $r14.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        i0 = r1[i3];

        r20 = r19;

        $r18 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z0 = virtualinvoke $r18.<android.content.pm.PackageManagerInternal: boolean isPermissionUpgradeNeeded(int)>(i0);

        if $z0 == 0 goto label2;

        r20 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r19, i0);

     label2:
        i3 = i3 + 1;

        r19 = r20;

        goto label1;

     label3:
        i4 = lengthof r19;

        i5 = 0;

     label4:
        if i5 >= i4 goto label5;

        i6 = r19[i5];

        $r17 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r17.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissions(int)>(i6);

        i5 = i5 + 1;

        goto label4;

     label5:
        $r15 = <com.android.server.pm.permission.PermissionManagerService: int[] EMPTY_INT_ARRAY>;

        if r19 != $r15 goto label6;

        $r16 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r16.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void scheduleReadDefaultPermissionExceptions()>();

     label6:
        return;

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature|privileged permissions not in privapp-permissions whitelist: ");

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArraySet mPrivappPermissionsViolations>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private void updateAllPermissions(java.lang.String, boolean, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r1;
        byte $b0, b1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        staticinvoke <android.content.pm.PackageManager: void corkPackageInfoCache()>();

        if z0 == 0 goto label1;

        b1 = 6;

        goto label2;

     label1:
        b1 = 0;

     label2:
        $b0 = 1 | b1;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(null, null, r3, $b0, r1);

     label3:
        staticinvoke <android.content.pm.PackageManager: void uncorkPackageInfoCache()>();

        return;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.content.pm.PackageManager: void uncorkPackageInfoCache()>();

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void updatePermissionFlagsInternal(java.lang.String, java.lang.String, int, int, int, int, boolean, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, r47;
        com.android.server.pm.permission.BasePermission r2;
        android.os.UserManagerInternal $r3;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9;
        android.content.pm.PackageManagerInternal $r4, $r5, $r10, $r33, $r34;
        java.lang.StringBuilder $r6, $r11, $r17, $r27;
        java.lang.String $r9, $r15, $r21, $r32, r39, r40, r46;
        java.lang.IllegalArgumentException $r14, $r20;
        com.android.server.pm.permission.PermissionSettings $r16;
        com.android.server.pm.permission.PermissionsState$PermissionState $r22, $r23, $r24;
        int[] $r25;
        java.util.List $r26, $r35;
        java.lang.SecurityException $r36;
        java.lang.Throwable $r37, $r38, r50;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r41;
        com.android.server.pm.PackageSetting r42;
        java.lang.Object r43;
        com.android.server.pm.permission.PermissionsState r44;
        java.lang.String[] r45;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r39 := @parameter0: java.lang.String;

        r40 := @parameter1: java.lang.String;

        i15 := @parameter2: int;

        i16 := @parameter3: int;

        i17 := @parameter4: int;

        i0 := @parameter5: int;

        z5 := @parameter6: boolean;

        r41 := @parameter7: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>("updatePermissionFlags");

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i17, i0, 1, 1, 0, "updatePermissionFlags");

        $i2 = i15 & 4;

        if $i2 == 0 goto label03;

        if z5 == 0 goto label02;

        goto label03;

     label02:
        $r36 = new java.lang.SecurityException;

        specialinvoke $r36.<java.lang.SecurityException: void <init>(java.lang.String)>("updatePermissionFlags requires android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY");

        throw $r36;

     label03:
        if i17 == 1000 goto label04;

        $i8 = i16 & -17;

        $i9 = $i8 & -33;

        $i10 = $i9 & -65;

        $i11 = $i10 & -4097;

        $i12 = $i11 & -2049;

        $i13 = $i12 & -8193;

        i18 = $i13 & -16385;

        $i14 = i15 & -17;

        i19 = $i14 & -33;

        goto label05;

     label04:
        i18 = i16;

        i19 = i15;

     label05:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r1 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r40);

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r42 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r40);

        if r1 == null goto label28;

        if r42 != null goto label06;

        goto label28;

     label06:
        $r10 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z1 = virtualinvoke $r10.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i17, i0);

        if $z1 != 0 goto label27;

        r43 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r43;

     label07:
        $r16 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r2 = virtualinvoke $r16.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r39);

        exitmonitor r43;

     label08:
        if r2 == null goto label22;

        r44 = virtualinvoke r42.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $r22 = virtualinvoke r44.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(r39, i0);

        if $r22 == null goto label09;

        z6 = 1;

        goto label10;

     label09:
        z6 = 0;

     label10:
        if z6 != 0 goto label16;

        z7 = 0;

        $r26 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z3 = interfaceinvoke $r26.<java.util.List: boolean contains(java.lang.Object)>(r39);

        if $z3 == 0 goto label11;

        z7 = 1;

     label11:
        if z7 != 0 goto label14;

        $r33 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r45 = virtualinvoke $r33.<android.content.pm.PackageManagerInternal: java.lang.String[] getSharedUserPackagesForPackage(java.lang.String,int)>(r40, i0);

        i1 = lengthof r45;

        i20 = 0;

     label12:
        z8 = z7;

        if i20 >= i1 goto label15;

        r46 = r45[i20];

        $r34 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r47 = virtualinvoke $r34.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r46);

        if r47 == null goto label13;

        $r35 = interfaceinvoke r47.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z4 = interfaceinvoke $r35.<java.util.List: boolean contains(java.lang.Object)>(r39);

        if $z4 == 0 goto label13;

        z8 = 1;

        goto label15;

     label13:
        i20 = i20 + 1;

        goto label12;

     label14:
        z8 = z7;

     label15:
        if z8 != 0 goto label16;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isn\'t requested by package ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r32);

        return;

     label16:
        z9 = virtualinvoke r44.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r2, i0, i19, i18);

        if z9 == 0 goto label17;

        $z2 = virtualinvoke r2.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z2 == 0 goto label17;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void notifyRuntimePermissionStateChanged(java.lang.String,int)>(r40, i0);

     label17:
        if z9 == 0 goto label21;

        if r41 == null goto label21;

        $r23 = virtualinvoke r44.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getInstallPermissionState(java.lang.String)>(r39);

        if $r23 == null goto label19;

        $i4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i4);

        $i6 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i5);

        virtualinvoke r41.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onInstallPermissionUpdatedNotifyListener(int)>($i6);

     label18:
        goto label21;

     label19:
        $r24 = virtualinvoke r44.<com.android.server.pm.permission.PermissionsState: com.android.server.pm.permission.PermissionsState$PermissionState getRuntimePermissionState(java.lang.String,int)>(r39, i0);

        if $r24 != null goto label20;

        if z6 == 0 goto label18;

     label20:
        i21 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $r25 = newarray (int)[1];

        $r25[0] = i0;

        virtualinvoke r41.<com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback: void onPermissionUpdatedNotifyListener(int[],boolean,int)>($r25, 0, i21);

     label21:
        return;

     label22:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label23:
        $r38 := @caughtexception;

        r50 = $r38;

     label24:
        exitmonitor r43;

     label25:
        throw r50;

     label26:
        $r37 := @caughtexception;

        r50 = $r37;

        goto label24;

     label27:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label28:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r9);

        return;

        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    private boolean updatePermissionSourcePackage(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1, $r9, $r23, r52;
        java.util.Iterator r2, r48;
        com.android.server.pm.permission.BasePermission r3, r49;
        int[] r4;
        int i0, i1, $i4, i5;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$tAcOXvvLnf8YMDota79zZypUyds r5;
        com.android.server.pm.permission.PermissionSettings $r6, $r21, $r32, $r36;
        android.util.ArrayMap $r7, $r33, $r37;
        java.util.Collection $r8, $r38;
        android.content.pm.PackageManagerInternal $r10, $r12, r46;
        java.lang.String $r11, $r13, $r15, $r18, $r20, $r22, $r24, $r26, $r29, $r31, $r35, r41;
        boolean $z0, $z1, $z2, $z4, z5, $z6, $z7;
        android.os.UserManagerInternal $r34;
        java.lang.Throwable $r39, $r40;
        com.android.server.pm.parsing.pkg.AndroidPackage r42, r50;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r43;
        android.util.ArraySet r44, r47;
        java.lang.StringBuilder r45, r53;
        com.android.server.pm.PackageSetting r51;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r41 := @parameter0: java.lang.String;

        r42 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r43 := @parameter2: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        if r41 != null goto label01;

        return 1;

     label01:
        z5 = 0;

        r44 = null;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r7 = $r6.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissions>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label18;

        $r23 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.permission.BasePermission) $r23;

        $z0 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isDynamic()>();

        if $z0 == 0 goto label04;

        $r36 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r37 = $r36.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionTrees>;

        $r38 = virtualinvoke $r37.<android.util.ArrayMap: java.util.Collection values()>();

        virtualinvoke r3.<com.android.server.pm.permission.BasePermission: void updateDynamicPermission(java.util.Collection)>($r38);

     label04:
        $r24 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        $z1 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z1 != 0 goto label06;

     label05:
        goto label03;

     label06:
        z5 = 1;

        if r42 == null goto label08;

     label07:
        $r35 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        $z4 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: boolean hasPermission(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r42, $r35);

        if $z4 != 0 goto label14;

     label08:
        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing permission ");

        $r26 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that used to be declared by ");

        $r29 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r31);

        $z2 = virtualinvoke r3.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z2 == 0 goto label13;

        $r34 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        r4 = virtualinvoke $r34.<android.os.UserManagerInternal: int[] getUserIds()>();

        i0 = lengthof r4;

     label09:
        i5 = 0;

     label10:
        if i5 >= i0 goto label13;

        i1 = r4[i5];

     label11:
        r46 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r5 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$tAcOXvvLnf8YMDota79zZypUyds;

        specialinvoke r5.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$tAcOXvvLnf8YMDota79zZypUyds: void <init>(com.android.server.pm.permission.PermissionManagerService,com.android.server.pm.permission.BasePermission,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r0, r3, i1, r43);

        virtualinvoke r46.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>(r5);

     label12:
        i5 = i5 + 1;

        goto label10;

     label13:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label14:
        r47 = r44;

        if r44 != null goto label16;

     label15:
        r47 = new android.util.ArraySet;

        $r32 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r33 = $r32.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissions>;

        $i4 = virtualinvoke $r33.<android.util.ArrayMap: int size()>();

        specialinvoke r47.<android.util.ArraySet: void <init>(int)>($i4);

     label16:
        interfaceinvoke r47.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label17:
        r44 = r47;

        goto label03;

     label18:
        exitmonitor r1;

     label19:
        if r44 == null goto label28;

        r48 = interfaceinvoke r44.<java.util.Set: java.util.Iterator iterator()>();

     label20:
        $z7 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label28;

        $r9 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (com.android.server.pm.permission.BasePermission) $r9;

        $r10 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r11 = virtualinvoke r49.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        r50 = virtualinvoke $r10.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>($r11);

        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r13 = virtualinvoke r49.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        r51 = virtualinvoke $r12.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r13);

        r52 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r52;

        if r50 == null goto label23;

        if r51 == null goto label23;

     label21:
        exitmonitor r52;

     label22:
        goto label20;

     label23:
        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling permission: ");

        $r15 = virtualinvoke r49.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r18 = virtualinvoke r49.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r20);

        $r21 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r22 = virtualinvoke r49.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        virtualinvoke $r21.<com.android.server.pm.permission.PermissionSettings: void removePermissionLocked(java.lang.String)>($r22);

        exitmonitor r52;

     label24:
        goto label20;

     label25:
        $r40 := @caughtexception;

     label26:
        exitmonitor r52;

     label27:
        throw $r40;

     label28:
        return z5;

     label29:
        $r39 := @caughtexception;

     label30:
        exitmonitor r1;

     label31:
        throw $r39;

        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label08 to label09 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    private boolean updatePermissionTreeSourcePackage(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.util.Iterator r1, r40;
        com.android.server.pm.permission.BasePermission r2, r41;
        com.android.server.pm.permission.PermissionSettings $r3, $r18, $r29;
        android.util.ArrayMap $r4, $r30;
        java.util.Collection $r5;
        java.lang.Object $r6, $r20, r37, r44;
        android.content.pm.PackageManagerInternal $r7, $r9;
        java.lang.String $r8, $r10, $r12, $r15, $r17, $r19, $r21, $r23, $r26, $r28, $r31, r34;
        boolean $z0, $z2, z3, $z4, $z5;
        int $i2;
        java.lang.Throwable $r32, $r33;
        com.android.server.pm.parsing.pkg.AndroidPackage r35, r42;
        android.util.ArraySet r36, r39;
        java.lang.StringBuilder r38, r45;
        com.android.server.pm.PackageSetting r43;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r34 := @parameter0: java.lang.String;

        r35 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        if r34 != null goto label01;

        return 1;

     label01:
        z3 = 0;

        r36 = null;

        r37 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r37;

     label02:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r4 = $r3.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionTrees>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r20 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.pm.permission.BasePermission) $r20;

        $r21 = virtualinvoke r2.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        $z0 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z0 != 0 goto label05;

     label04:
        goto label03;

     label05:
        z3 = 1;

        if r35 == null goto label07;

     label06:
        $r31 = virtualinvoke r2.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        $z2 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: boolean hasPermission(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r35, $r31);

        if $z2 != 0 goto label08;

     label07:
        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing permission tree ");

        $r23 = virtualinvoke r2.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that used to be declared by ");

        $r26 = virtualinvoke r2.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r28);

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label08:
        r39 = r36;

        if r36 != null goto label10;

     label09:
        r39 = new android.util.ArraySet;

        $r29 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r30 = $r29.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionTrees>;

        $i2 = virtualinvoke $r30.<android.util.ArrayMap: int size()>();

        specialinvoke r39.<android.util.ArraySet: void <init>(int)>($i2);

     label10:
        interfaceinvoke r39.<java.util.Set: boolean add(java.lang.Object)>(r2);

     label11:
        r36 = r39;

        goto label03;

     label12:
        exitmonitor r37;

     label13:
        if r36 == null goto label22;

        r40 = interfaceinvoke r36.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z5 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label22;

        $r6 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (com.android.server.pm.permission.BasePermission) $r6;

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r8 = virtualinvoke r41.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        r42 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>($r8);

        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r10 = virtualinvoke r41.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        r43 = virtualinvoke $r9.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r10);

        r44 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r44;

        if r42 == null goto label17;

        if r43 == null goto label17;

     label15:
        exitmonitor r44;

     label16:
        goto label14;

     label17:
        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling permission tree: ");

        $r12 = virtualinvoke r41.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from package ");

        $r15 = virtualinvoke r41.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

        $r18 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r19 = virtualinvoke r41.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        virtualinvoke $r18.<com.android.server.pm.permission.PermissionSettings: void removePermissionLocked(java.lang.String)>($r19);

        exitmonitor r44;

     label18:
        goto label14;

     label19:
        $r33 := @caughtexception;

     label20:
        exitmonitor r44;

     label21:
        throw $r33;

     label22:
        return z3;

     label23:
        $r32 := @caughtexception;

     label24:
        exitmonitor r37;

     label25:
        throw $r32;

        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label10 to label11 with label23;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private void updatePermissions(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r3;
        byte b0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter2: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        if r2 != null goto label1;

        b0 = 3;

        goto label2;

     label1:
        b0 = 2;

     label2:
        $r4 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: java.lang.String getVolumeUuidForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, r2, $r4, b0, r3);

        return;
    }

    private void updatePermissions(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String, int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r3, r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r4;
        boolean $z1, $z2, $z3, $z4, z5, z6;
        int $i0, $i1, $i2, i4;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$_Kakccz__nomXOc_Nhv5q_uqA7I $r6;
        android.content.pm.PackageManagerInternal $r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter2: java.lang.String;

        i4 := @parameter3: int;

        r4 := @parameter4: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        $z1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean updatePermissionTreeSourcePackage(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>(r1, r2);

        $z2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean updatePermissionSourcePackage(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r1, r2, r4);

        $z3 = $z1 | $z2;

        if $z3 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Permission ownership changed. Updating all permissions.");

        i4 = i4 | 1;

        goto label1;

     label1:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void cacheBackgroundToForegoundPermissionMapping()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "restorePermissionState");

        $i0 = i4 & 1;

        if $i0 == 0 goto label4;

        $i2 = i4 & 4;

        if $i2 == 0 goto label2;

        z5 = 1;

        goto label3;

     label2:
        z5 = 0;

     label3:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r6 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$_Kakccz__nomXOc_Nhv5q_uqA7I;

        specialinvoke $r6.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$_Kakccz__nomXOc_Nhv5q_uqA7I: void <init>(com.android.server.pm.permission.PermissionManagerService,com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r0, r2, z5, r3, r1, r4);

        virtualinvoke $r7.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r6);

     label4:
        if r2 == null goto label7;

        r5 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: java.lang.String getVolumeUuidForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        $i1 = i4 & 2;

        if $i1 == 0 goto label5;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r3, r5);

        if $z4 == 0 goto label5;

        z6 = 1;

        goto label6;

     label5:
        z6 = 0;

     label6:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void restorePermissionState(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r2, z6, r1, r4);

        goto label7;

     label7:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;
    }

    public void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1;
        android.content.Context $r2;
        com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners $r3;
        java.lang.Throwable $r4;
        android.permission.IOnPermissionsChangeListener r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: android.permission.IOnPermissionsChangeListener;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS", "addOnPermissionsChangeListener");

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners: void addListenerLocked(android.permission.IOnPermissionsChangeListener)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean addPermission(android.content.pm.PermissionInfo, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, z1, $z2, z3;
        java.lang.Object r1;
        android.content.pm.PackageManagerInternal $r2, $r13;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r14, $r16, $r17;
        java.lang.SecurityException $r4, $r19, r24;
        int $i0, $i1, i2, i3;
        com.android.server.pm.permission.PermissionSettings $r6, $r8, $r15;
        java.lang.CharSequence $r18;
        java.lang.Throwable $r20;
        android.content.pm.PermissionInfo r21;
        com.android.server.pm.permission.BasePermission r22, r23;
        java.lang.StringBuilder r25;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r21 := @parameter0: android.content.pm.PermissionInfo;

        z0 := @parameter1: boolean;

        i2 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i2);

        if $r3 != null goto label21;

        $i0 = r21.<android.content.pm.PermissionInfo: int labelRes>;

        if $i0 != 0 goto label02;

        $r18 = r21.<android.content.pm.PermissionInfo: java.lang.CharSequence nonLocalizedLabel>;

        if $r18 == null goto label01;

        goto label02;

     label01:
        $r19 = new java.lang.SecurityException;

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("Label must be specified in permission");

        throw $r19;

     label02:
        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r5 = r21.<android.content.pm.PermissionInfo: java.lang.String name>;

        r22 = virtualinvoke $r6.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission enforcePermissionTree(java.lang.String,int)>($r5, i2);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r7 = r21.<android.content.pm.PermissionInfo: java.lang.String name>;

        r23 = virtualinvoke $r8.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>($r7);

     label04:
        if r23 != null goto label05;

        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

     label06:
        $i1 = r21.<android.content.pm.PermissionInfo: int protectionLevel>;

        i3 = staticinvoke <android.content.pm.PermissionInfo: int fixProtectionLevel(int)>($i1);

     label07:
        if z3 == 0 goto label10;

     label08:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforcePermissionCapLocked(android.content.pm.PermissionInfo,com.android.server.pm.permission.BasePermission)>(r21, r22);

        r23 = new com.android.server.pm.permission.BasePermission;

        $r16 = r21.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r17 = virtualinvoke r22.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

        specialinvoke r23.<com.android.server.pm.permission.BasePermission: void <init>(java.lang.String,java.lang.String,int)>($r16, $r17, 2);

     label09:
        goto label11;

     label10:
        $z2 = virtualinvoke r23.<com.android.server.pm.permission.BasePermission: boolean isDynamic()>();

        if $z2 == 0 goto label17;

     label11:
        z1 = virtualinvoke r23.<com.android.server.pm.permission.BasePermission: boolean addToTree(int,android.content.pm.PermissionInfo,com.android.server.pm.permission.BasePermission)>(i3, r21, r22);

     label12:
        if z3 == 0 goto label14;

     label13:
        $r15 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r14 = r21.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke $r15.<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>($r14, r23);

     label14:
        exitmonitor r1;

     label15:
        if z1 == 0 goto label16;

        $r13 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        virtualinvoke $r13.<android.content.pm.PackageManagerInternal: void writeSettings(boolean)>(z0);

     label16:
        return z3;

     label17:
        r24 = new java.lang.SecurityException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to modify non-dynamic permission ");

        $r10 = r21.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw r24;

     label18:
        $r20 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r20;

     label21:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Instant apps can\'t add permissions");

        throw $r4;

        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public boolean addWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;
        java.util.List r3, r8, r9, r10;
        boolean $z0, $z2;
        java.lang.Object r6;
        java.util.ArrayList r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkExistsAndEnforceCannotModifyImmutablyRestrictedPermission(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)>(r1, i0, i1);

        r6 = r3;

        if r3 != null goto label2;

        r7 = new java.util.ArrayList;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>(1);

        r6 = r7;

     label2:
        r8 = (java.util.List) r6;

        $i2 = interfaceinvoke r8.<java.util.List: int indexOf(java.lang.Object)>(r2);

        if $i2 >= 0 goto label3;

        r9 = (java.util.List) r6;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r2);

        r10 = (java.util.List) r6;

        $z2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean setWhitelistedRestrictedPermissionsInternal(java.lang.String,java.util.List,int,int)>(r1, r10, i0, i1);

        return $z2;

     label3:
        return 0;
    }

    public int checkDeviceIdentifierAccess(java.lang.String, java.lang.String, java.lang.String, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r21, r22, r23;
        int i0, i1, i2, $i4, $i5, i7, i8, i9;
        long l3;
        android.app.AppOpsManager r2;
        com.android.server.pm.permission.PermissionManagerService$Injector $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r20;
        java.lang.Object $r8, $r11;
        boolean $z0;
        java.lang.Object[] $r13;
        java.lang.Integer $r14, $r15, $r16, $r17;
        java.lang.SecurityException $r18;
        java.lang.Throwable $r19;
        android.app.admin.DevicePolicyManager r24;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r21 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        i7 = virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerService$Injector: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        i2 = virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerService$Injector: int getCallingPid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i7);

        if $i4 < 10000 goto label02;

        if i7 != i1 goto label01;

        if i2 != i0 goto label01;

        goto label02;

     label01:
        $r13 = newarray (java.lang.Object)[5];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r13[1] = $r15;

        $r13[2] = r21;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r13[3] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[4] = $r17;

        r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Calling uid %d, pid %d cannot check device identifier access for package %s (uid=%d, pid=%d)", $r13);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", r23);

        $r18 = new java.lang.SecurityException;

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>(r23);

        throw $r18;

     label02:
        i8 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        if i8 == 1000 goto label11;

        if i8 != 0 goto label03;

        goto label11;

     label03:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        $i5 = virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerService$Injector: int checkPermission(java.lang.String,int,int)>("android.permission.READ_PRIVILEGED_PHONE_STATE", i0, i1);

        if $i5 != 0 goto label04;

        return 0;

     label04:
        if r21 == null goto label10;

        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        l3 = virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerService$Injector: long clearCallingIdentity()>();

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionManagerService$Injector: java.lang.Object getSystemService(java.lang.String)>("appops");

        r2 = (android.app.AppOpsManager) $r8;

     label05:
        i9 = virtualinvoke r2.<android.app.AppOpsManager: int noteOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>("android:read_device_identifiers", i1, r21, r1, r22);

     label06:
        if i9 != 0 goto label07;

        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        virtualinvoke $r12.<com.android.server.pm.permission.PermissionManagerService$Injector: void restoreCallingIdentity(long)>(l3);

        return 0;

     label07:
        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        virtualinvoke $r9.<com.android.server.pm.permission.PermissionManagerService$Injector: void restoreCallingIdentity(long)>(l3);

        $r10 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        $r11 = virtualinvoke $r10.<com.android.server.pm.permission.PermissionManagerService$Injector: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        r24 = (android.app.admin.DevicePolicyManager) $r11;

        if r24 == null goto label10;

        $z0 = virtualinvoke r24.<android.app.admin.DevicePolicyManager: boolean hasDeviceIdentifierAccess(java.lang.String,int,int)>(r21, i0, i1);

        if $z0 == 0 goto label10;

        return 0;

     label08:
        $r19 := @caughtexception;

        goto label09;

     label09:
        $r20 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$Injector mInjector>;

        virtualinvoke $r20.<com.android.server.pm.permission.PermissionManagerService$Injector: void restoreCallingIdentity(long)>(l3);

        throw $r19;

     label10:
        return -1;

     label11:
        return 0;

        catch java.lang.Throwable from label05 to label06 with label08;
    }

    public int checkPermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r7;
        int i0, $i1, $i2;
        java.lang.Object r2;
        android.permission.PermissionManagerInternal$CheckPermissionDelegate r3;
        android.os.UserManagerInternal $r4;
        boolean $z0;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$iwnRBDwjg4K5iRGbRU5_sVt0zaU $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r7 == null goto label9;

        if r1 != null goto label1;

        goto label9;

     label1:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z0 = virtualinvoke $r4.<android.os.UserManagerInternal: boolean exists(int)>(i0);

        if $z0 != 0 goto label2;

        return -1;

     label2:
        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionManagerInternal$CheckPermissionDelegate mCheckPermissionDelegate>;

        exitmonitor r2;

     label4:
        if r3 != null goto label5;

        $i2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermissionImpl(java.lang.String,java.lang.String,int)>(r7, r1, i0);

        return $i2;

     label5:
        $r5 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$iwnRBDwjg4K5iRGbRU5_sVt0zaU;

        specialinvoke $r5.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$iwnRBDwjg4K5iRGbRU5_sVt0zaU: void <init>(com.android.server.pm.permission.PermissionManagerService)>(r0);

        $i1 = interfaceinvoke r3.<android.permission.PermissionManagerInternal$CheckPermissionDelegate: int checkPermission(java.lang.String,java.lang.String,int,com.android.internal.util.function.TriFunction)>(r7, r1, i0, $r5);

        return $i1;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r6;

     label9:
        return -1;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int checkUidPermission(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        android.permission.PermissionManagerInternal$CheckPermissionDelegate r2;
        android.os.UserManagerInternal $r3;
        boolean $z0;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$eApyRxwI3JHTSVAxV9EbP43gFOo $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r6 != null goto label1;

        return -1;

     label1:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean exists(int)>(i1);

        if $z0 != 0 goto label2;

        return -1;

     label2:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.permission.PermissionManagerInternal$CheckPermissionDelegate mCheckPermissionDelegate>;

        exitmonitor r1;

     label4:
        if r2 != null goto label5;

        $i3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkUidPermissionImpl(java.lang.String,int)>(r6, i0);

        return $i3;

     label5:
        $r4 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$eApyRxwI3JHTSVAxV9EbP43gFOo;

        specialinvoke $r4.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$eApyRxwI3JHTSVAxV9EbP43gFOo: void <init>(com.android.server.pm.permission.PermissionManagerService)>(r0);

        $i2 = interfaceinvoke r2.<android.permission.PermissionManagerInternal$CheckPermissionDelegate: int checkUidPermission(java.lang.String,int,java.util.function.BiFunction)>(r6, i0, $r4);

        return $i2;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.content.Context $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.permission.PermissionControllerManager $r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "PackageManager", r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/permission/PermissionControllerManager;");

        $r7 = (android.permission.PermissionControllerManager) $r6;

        virtualinvoke $r7.<android.permission.PermissionControllerManager: void dump(java.io.FileDescriptor,java.lang.String[])>(r1, r3);

        return;
    }

    public android.content.pm.ParceledListSlice getAllPermissionGroups(int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r9;
        android.content.pm.PackageManagerInternal $r2;
        java.lang.String $r3;
        com.android.server.pm.permission.PermissionSettings $r4, $r6;
        android.util.ArrayMap $r5, $r7;
        java.util.Collection $r8;
        boolean $z0;
        android.content.pm.parsing.component.ParsedPermissionGroup $r10;
        android.content.pm.PermissionGroupInfo $r11;
        android.content.pm.ParceledListSlice $r12, r16;
        java.lang.Throwable $r13;
        java.util.ArrayList r14;
        java.util.Iterator r15;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r3 == null goto label1;

        $r12 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r12;

     label1:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r5 = $r4.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        i2 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        r14 = new java.util.ArrayList;

        specialinvoke r14.<java.util.ArrayList: void <init>(int)>(i2);

        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r7 = $r6.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.util.Collection values()>();

        r15 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.content.pm.parsing.component.ParsedPermissionGroup) $r9;

        $r11 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.parsing.component.ParsedPermissionGroup,int)>($r10, i0);

        virtualinvoke r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label4:
        goto label3;

     label5:
        r16 = new android.content.pm.ParceledListSlice;

        specialinvoke r16.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r14);

        exitmonitor r1;

     label6:
        return r16;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String[] getAppOpPermissionPackages(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int $i0;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.String[] getAppOpPermissionPackagesInternal(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public java.util.List getAutoRevokeExemptionGrantedPackages(int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        java.util.List $r1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getPackagesWithAutoRevokePolicy(int,int)>(2, i0);

        return $r1;
    }

    public java.util.List getAutoRevokeExemptionRequestedPackages(int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        java.util.List $r1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getPackagesWithAutoRevokePolicy(int,int)>(1, i0);

        return $r1;
    }

    public android.util.ArrayMap getBackgroundPermissions()
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        android.util.ArrayMap $r1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.ArrayMap mBackgroundPermissions>;

        return $r1;
    }

    public java.lang.String getDefaultBrowser(int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider r2;
        android.content.pm.PackageManagerInternal $r3;
        java.lang.String $r4, r7;
        android.content.Context $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r7 = null;

        if i2 == i0 goto label1;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r4 == null goto label2;

        return null;

     label2:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider mDefaultBrowserProvider>;

        exitmonitor r1;

     label4:
        if r2 == null goto label5;

        r7 = interfaceinvoke r2.<com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider: java.lang.String getDefaultBrowser(int)>(i0);

     label5:
        return r7;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    com.android.server.pm.permission.BasePermission getPermission(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1;
        com.android.server.pm.permission.PermissionSettings $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        com.android.server.pm.permission.BasePermission r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r5 = virtualinvoke $r2.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r4);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getPermissionFlags(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $i2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int getPermissionFlagsInternal(java.lang.String,java.lang.String,int,int)>(r1, r2, $i1, i0);

        return $i2;
    }

    public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r6;
        android.content.pm.PackageManagerInternal $r2;
        java.lang.String $r3, r9;
        com.android.server.pm.permission.PermissionSettings $r4;
        android.util.ArrayMap $r5;
        android.content.pm.parsing.component.ParsedPermissionGroup $r7;
        java.lang.Throwable $r8;
        android.content.pm.PermissionGroupInfo r10;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r3 == null goto label1;

        return null;

     label1:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r5 = $r4.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        $r7 = (android.content.pm.parsing.component.ParsedPermissionGroup) $r6;

        r10 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.parsing.component.ParsedPermissionGroup,int)>($r7, i0);

        exitmonitor r1;

     label3:
        return r10;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r4, r7;
        int i0, i1, $i2, $i3;
        java.lang.Object r2;
        android.content.pm.PackageManagerInternal $r3;
        com.android.server.pm.permission.PermissionSettings $r5;
        java.lang.Throwable $r6;
        com.android.server.pm.permission.BasePermission r8;
        android.content.pm.PermissionInfo r9;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r4 == null goto label01;

        return null;

     label01:
        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r8 = virtualinvoke $r5.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r7);

     label03:
        if r8 != null goto label06;

     label04:
        exitmonitor r2;

     label05:
        return null;

     label06:
        $i2 = virtualinvoke r8.<com.android.server.pm.permission.BasePermission: int getProtectionLevel()>();

        $i3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int adjustPermissionProtectionFlagsLocked(int,java.lang.String,int)>($i2, r1, i1);

        r9 = virtualinvoke r8.<com.android.server.pm.permission.BasePermission: android.content.pm.PermissionInfo generatePermissionInfo(int,int)>($i3, i0);

        exitmonitor r2;

     label07:
        return r9;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.util.List getSplitPermissions()
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.SystemConfig $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        $r1 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r2 = virtualinvoke $r1.<com.android.server.SystemConfig: java.util.ArrayList getSplitPermissions()>();

        $r3 = staticinvoke <android.permission.PermissionManager: java.util.List splitPermissionInfoListToParcelableList(java.util.List)>($r2);

        return $r3;
    }

    public java.util.List getWhitelistedRestrictedPermissions(java.lang.String, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i18, i19;
        boolean z0, $z1, z3;
        long l1;
        com.android.server.pm.permission.PermissionsState r1;
        java.lang.String r2, $r16, r18;
        float $f0;
        android.content.pm.PackageManagerInternal $r4, $r5, $r7, $r22;
        android.content.Context $r6, r19;
        java.util.List $r8, $r9;
        java.lang.Object $r10;
        java.lang.SecurityException $r11, $r12;
        java.lang.StringBuilder $r13;
        java.lang.Throwable $r17;
        com.android.server.pm.parsing.pkg.AndroidPackage r21;
        short s15, s16, s17;
        java.util.ArrayList r23, r24;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r18 := @parameter0: java.lang.String;

        i13 := @parameter1: int;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r18);

        staticinvoke <com.android.internal.util.Preconditions: int checkFlagsArgument(int,int)>(i13, 7);

        $f0 = (float) i0;

        staticinvoke <com.android.internal.util.Preconditions: float checkArgumentNonNegative(float,java.lang.String)>($f0, null);

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i3 == i0 goto label01;

        r19 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getWhitelistedRestrictedPermissions for user ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r19.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", $r16);

     label01:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r21 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r18);

        if r21 != null goto label02;

        return null;

     label02:
        i14 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z1 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r21, i14, $i4);

        if $z1 == 0 goto label03;

        return null;

     label03:
        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $i5 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        if $i5 != 0 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        z0 = virtualinvoke $r7.<android.content.pm.PackageManagerInternal: boolean isCallerInstallerOfRecord(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r21, i14);

        $i6 = i13 & 1;

        if $i6 == 0 goto label07;

        if z3 == 0 goto label06;

        goto label07;

     label06:
        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Querying system whitelist requires android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        throw $r12;

     label07:
        $i7 = i13 & 6;

        if $i7 == 0 goto label09;

        if z3 != 0 goto label09;

        if z0 == 0 goto label08;

        goto label09;

     label08:
        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Querying upgrade or installer whitelist requires being installer on record or android.permission.WHITELIST_RESTRICTED_PERMISSIONS");

        throw $r11;

     label09:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label10:
        $r22 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: com.android.server.pm.permission.PermissionsState getPermissionsState(android.content.pm.PackageManagerInternal,com.android.server.pm.parsing.pkg.AndroidPackage)>($r22, r21);

     label11:
        if r1 != null goto label12;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return null;

     label12:
        s15 = 0;

        $i8 = i13 & 1;

        if $i8 == 0 goto label13;

        s15 = 0 | 4096;

     label13:
        s16 = s15;

        $i9 = i13 & 4;

        if $i9 == 0 goto label14;

        s16 = s15 | 8192;

     label14:
        s17 = s16;

        $i10 = i13 & 2;

        if $i10 == 0 goto label15;

        s17 = s16 | 2048;

     label15:
        r23 = null;

     label16:
        $r8 = interfaceinvoke r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        i18 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r8);

     label17:
        i19 = 0;

     label18:
        if i19 >= i18 goto label26;

     label19:
        $r9 = interfaceinvoke r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i19);

        r2 = (java.lang.String) $r10;

     label20:
        r24 = r23;

     label21:
        $i11 = virtualinvoke r1.<com.android.server.pm.permission.PermissionsState: int getPermissionFlags(java.lang.String,int)>(r2, i0);

        $i12 = $i11 & s17;

        if $i12 == 0 goto label25;

     label22:
        r24 = r23;

        if r23 != null goto label24;

     label23:
        r24 = new java.util.ArrayList;

        specialinvoke r24.<java.util.ArrayList: void <init>()>();

     label24:
        virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label25:
        i19 = i19 + 1;

        r23 = r24;

        goto label18;

     label26:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r23;

     label27:
        $r17 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r17;

        catch java.lang.Throwable from label10 to label11 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
    }

    public void grantDefaultPermissionsToActiveLuiApp(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$oG7YD8MVgcqcPbx_HXQ04PEUOXM r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("grantDefaultPermissionsToActiveLuiApp", i1);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$oG7YD8MVgcqcPbx_HXQ04PEUOXM;

        specialinvoke r2.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$oG7YD8MVgcqcPbx_HXQ04PEUOXM: void <init>(com.android.server.pm.permission.PermissionManagerService,java.lang.String,int)>(r0, r4, i0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[], int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$aQWnOfCuKK_rSxzDPI_dUOtzv8I r2;
        java.lang.Throwable $r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("grantPermissionsToEnabledCarrierApps", i1);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$aQWnOfCuKK_rSxzDPI_dUOtzv8I;

        specialinvoke r2.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$aQWnOfCuKK_rSxzDPI_dUOtzv8I: void <init>(com.android.server.pm.permission.PermissionManagerService,java.lang.String[],int)>(r0, r4, i0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void grantDefaultPermissionsToEnabledImsServices(java.lang.String[], int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$BEPoV9HmbUN2_ZgCcIqC6xfzvew r2;
        java.lang.Throwable $r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("grantDefaultPermissionsToEnabledImsServices", $i1);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$BEPoV9HmbUN2_ZgCcIqC6xfzvew;

        specialinvoke r2.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$BEPoV9HmbUN2_ZgCcIqC6xfzvew: void <init>(com.android.server.pm.permission.PermissionManagerService,java.lang.String[],int)>(r0, r4, i0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[], int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$JcWw5txStfnrnbvcFd2durv6YOo r2;
        java.lang.Throwable $r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("grantDefaultPermissionsToEnabledTelephonyDataServices", $i1);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$JcWw5txStfnrnbvcFd2durv6YOo;

        specialinvoke r2.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$JcWw5txStfnrnbvcFd2durv6YOo: void <init>(com.android.server.pm.permission.PermissionManagerService,java.lang.String[],int)>(r0, r4, i0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback $r3;
        boolean z0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", i1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void grantRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r2, r1, z0, i1, i0, $r3);

        return;
    }

    public boolean isAutoRevokeWhitelisted(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, $i2, i3, i4, i5;
        boolean z0, z1;
        long l1;
        android.content.pm.PackageManagerInternal $r3;
        android.app.AppOpsManager $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r6 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r1 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r6);

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i4 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i3, $i2);

        z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkAutoRevokeAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, i0);

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.app.AppOpsManager mAppOpsManager>;

        i5 = virtualinvoke $r4.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(97, i4, r6);

     label3:
        if i5 != 1 goto label4;

        z1 = 1;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z1;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public boolean isPermissionEnforced(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

    public boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r8, r10;
        android.content.Context r2;
        long l0;
        int $i1, $i2, i3, i4, i5, i6;
        android.content.pm.PackageManagerInternal $r4;
        boolean $z0, z1;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i1 == i3 goto label1;

        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isPermissionRevokedByPolicy for user ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r8);

     label1:
        i4 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(r10, r1, i3);

        z1 = 0;

        if i4 != 0 goto label2;

        return 0;

     label2:
        i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: boolean filterAppAccess(java.lang.String,int,int)>(r1, i5, i3);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        i6 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int getPermissionFlagsInternal(java.lang.String,java.lang.String,int,int)>(r10, r1, i5, i3);

     label5:
        $i2 = i6 & 4;

        if $i2 == 0 goto label6;

        z1 = 1;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label7:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r9;

        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public void lambda$grantDefaultPermissionsToActiveLuiApp$7$PermissionManagerService(java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)>(r1, i0);

        return;
    }

    public void lambda$grantDefaultPermissionsToEnabledCarrierApps$3$PermissionManagerService(java.lang.String[], int) throws java.lang.Exception
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String[] r1;
        int i0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>(r1, i0);

        return;
    }

    public void lambda$grantDefaultPermissionsToEnabledImsServices$4$PermissionManagerService(java.lang.String[], int) throws java.lang.Exception
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String[] r1;
        int i0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>(r1, i0);

        return;
    }

    public void lambda$grantDefaultPermissionsToEnabledTelephonyDataServices$5$PermissionManagerService(java.lang.String[], int) throws java.lang.Exception
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String[] r1;
        int i0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>(r1, i0);

        return;
    }

    public void lambda$resetRuntimePermissions$1$PermissionManagerService(int, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void resetRuntimePermissionsInternal(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, i0);

        return;
    }

    public void lambda$restoreDelayedRuntimePermissions$9$PermissionManagerService(android.os.UserHandle, java.lang.Boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean $z0;
        android.util.SparseBooleanArray $r1;
        int $i0;
        java.lang.Throwable $r2;
        android.os.UserHandle r3;
        java.lang.Boolean r4;
        java.lang.Object r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r3 := @parameter0: android.os.UserHandle;

        r4 := @parameter1: java.lang.Boolean;

        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r5 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r5;

     label2:
        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.util.SparseBooleanArray mHasNoDelayedPermBackup>;

        $i0 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i0, 1);

        exitmonitor r5;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r5;

     label6:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lambda$revokeDefaultPermissionsFromDisabledTelephonyDataServices$6$PermissionManagerService(java.lang.String[], int) throws java.lang.Exception
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String[] r1;
        int i0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>(r1, i0);

        return;
    }

    public void lambda$revokeDefaultPermissionsFromLuiApps$8$PermissionManagerService(java.lang.String[], int) throws java.lang.Exception
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String[] r1;
        int i0;
        com.android.server.pm.permission.DefaultPermissionGrantPolicy $r2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.DefaultPermissionGrantPolicy mDefaultPermissionGrantPolicy>;

        virtualinvoke $r2.<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>(r1, i0);

        return;
    }

    public void lambda$updatePermissionFlagsForAllApps$0$PermissionManagerService(boolean[], int, int, int, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean[] r1;
        int i0, i1, i2, $i3;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        android.content.pm.PackageManagerInternal $r3;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;
        com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners $r5;
        com.android.server.pm.PackageSetting r6;
        com.android.server.pm.permission.PermissionsState r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: boolean[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r4 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r6 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r4);

        if r6 != null goto label1;

        return;

     label1:
        r7 = virtualinvoke r6.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z0 = r1[0];

        $z1 = virtualinvoke r7.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlagsForAllPermissions(int,int,int)>(i0, i1, i2);

        $z2 = $z0 | $z1;

        r1[0] = $z2;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        $i3 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners: void onPermissionsChanged(int)>($i3);

        return;
    }

    public void lambda$updatePermissionSourcePackage$12$PermissionManagerService(com.android.server.pm.permission.BasePermission, int, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.BasePermission r1;
        int i0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        java.lang.String $r4, $r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: com.android.server.pm.permission.BasePermission;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        r3 := @parameter3: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r4 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r5 = virtualinvoke r1.<com.android.server.pm.permission.BasePermission: java.lang.String getName()>();

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void revokePermissionFromPackageForUser(java.lang.String,java.lang.String,boolean,int,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>($r4, $r5, 1, i0, r2);

        return;
    }

    public void lambda$updatePermissions$11$PermissionManagerService(com.android.server.pm.parsing.pkg.AndroidPackage, boolean, java.lang.String, java.lang.String, com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2, r6;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r4, r5;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback;

        r4 := @parameter5: com.android.server.pm.parsing.pkg.AndroidPackage;

        if r4 != r5 goto label1;

        return;

     label1:
        r6 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: java.lang.String getVolumeUuidForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r4);

        if z1 == 0 goto label2;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, r6);

        if $z0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void restorePermissionState(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r4, z2, r2, r3);

        return;
    }

    public android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r10;
        java.util.ArrayList r2;
        java.util.Iterator r3;
        android.content.pm.PermissionInfo r4;
        android.content.pm.PackageManagerInternal $r5;
        java.lang.String $r6, r15;
        com.android.server.pm.permission.PermissionSettings $r7, $r12;
        android.util.ArrayMap $r8, $r13;
        java.util.Collection $r9;
        com.android.server.pm.permission.BasePermission $r11;
        boolean $z1, $z2;
        java.lang.Throwable $r14;
        android.content.pm.ParceledListSlice r16;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r15 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r6 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r6 == null goto label01;

        return null;

     label01:
        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if r15 == null goto label04;

     label02:
        $r12 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r13 = $r12.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissionGroups>;

        $z1 = virtualinvoke $r13.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r15);

        if $z1 != 0 goto label04;

        exitmonitor r1;

     label03:
        return null;

     label04:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(10);

        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        $r8 = $r7.<com.android.server.pm.permission.PermissionSettings: android.util.ArrayMap mPermissions>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.pm.permission.BasePermission) $r10;

        r4 = virtualinvoke $r11.<com.android.server.pm.permission.BasePermission: android.content.pm.PermissionInfo generatePermissionInfo(java.lang.String,int)>(r15, i0);

     label06:
        if r4 == null goto label08;

     label07:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label08:
        goto label05;

     label09:
        r16 = new android.content.pm.ParceledListSlice;

        specialinvoke r16.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r2);

        exitmonitor r1;

     label10:
        return r16;

     label11:
        $r14 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.Object r1;
        android.content.pm.PackageManagerInternal $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.SecurityException $r4;
        com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners $r5;
        java.lang.Throwable $r6;
        android.permission.IOnPermissionsChangeListener r7;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r7 := @parameter0: android.permission.IOnPermissionsChangeListener;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r3 != null goto label6;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners mOnPermissionChangeListeners>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerService$OnPermissionChangeListeners: void removeListenerLocked(android.permission.IOnPermissionsChangeListener)>(r7);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

     label6:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Instant applications don\'t have access to this method");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removePermission(java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        java.lang.Object r1;
        android.content.pm.PackageManagerInternal $r2, $r9;
        java.lang.String $r3, $r12, r14;
        java.lang.SecurityException $r4;
        com.android.server.pm.permission.PermissionSettings $r5, $r7, $r8;
        boolean $z0;
        java.lang.Throwable $r13;
        com.android.server.pm.permission.BasePermission r15;
        java.lang.StringBuilder r16;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r14 := @parameter0: java.lang.String;

        i0 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r3 != null goto label11;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission enforcePermissionTree(java.lang.String,int)>(r14, i0);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r7 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        r15 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermissionLocked(java.lang.String)>(r14);

     label02:
        if r15 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $z0 = virtualinvoke r15.<com.android.server.pm.permission.BasePermission: boolean isDynamic()>();

        if $z0 == 0 goto label06;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to modify non-dynamic permission ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PackageManager", $r12);

     label06:
        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionSettings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.permission.PermissionSettings: void removePermissionLocked(java.lang.String)>(r14);

        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        virtualinvoke $r9.<android.content.pm.PackageManagerInternal: void writeSettings(boolean)>(0);

        exitmonitor r1;

     label07:
        return;

     label08:
        $r13 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r13;

     label11:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Instant applications don\'t have access to this method");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean removeWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2;
        int i0, i1;
        java.util.List r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkExistsAndEnforceCannotModifyImmutablyRestrictedPermission(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)>(r1, i0, i1);

        if r3 == null goto label2;

        $z1 = interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean setWhitelistedRestrictedPermissionsInternal(java.lang.String,java.util.List,int,int)>(r1, r3, i0, i1);

        return $z2;

     label2:
        return 0;
    }

    public void resetRuntimePermissions()
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback r1;
        int i0, i1, i2, i3;
        android.content.Context $r2, $r5;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$9BsOvIfsXOY41ZJQWdN0BGdfLqM $r3;
        android.content.pm.PackageManagerInternal $r4;
        java.lang.String r6;
        com.android.server.pm.UserManagerService $r7;
        int[] r8;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REVOKE_RUNTIME_PERMISSIONS", "revokeRuntimePermission");

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i2 == 1000 goto label1;

        if i2 == 0 goto label1;

        $r5 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "resetRuntimePermissions");

     label1:
        r6 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        i3 = 0;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updateAllPermissions(java.lang.String,boolean,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r6, 0, r1);

        $r7 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r8 = virtualinvoke $r7.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i0 = lengthof r8;

     label2:
        if i3 >= i0 goto label3;

        i1 = r8[i3];

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$9BsOvIfsXOY41ZJQWdN0BGdfLqM;

        specialinvoke $r3.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$9BsOvIfsXOY41ZJQWdN0BGdfLqM: void <init>(com.android.server.pm.permission.PermissionManagerService,int)>(r0, i1);

        virtualinvoke $r4.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r3);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[], int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$T4uCZ9__oEXYpzLBYEW1T_BN3SU r2;
        java.lang.Throwable $r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("revokeDefaultPermissionsFromDisabledTelephonyDataServices", $i1);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$T4uCZ9__oEXYpzLBYEW1T_BN3SU;

        specialinvoke r2.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$T4uCZ9__oEXYpzLBYEW1T_BN3SU: void <init>(com.android.server.pm.permission.PermissionManagerService,java.lang.String[],int)>(r0, r4, i0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void revokeDefaultPermissionsFromLuiApps(java.lang.String[], int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$E0rM1FNIqzKUZzqphmkzeY3ZdTk r2;
        java.lang.Throwable $r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r4 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("revokeDefaultPermissionsFromLuiApps", i1);

        r1 = r0.<com.android.server.pm.permission.PermissionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$E0rM1FNIqzKUZzqphmkzeY3ZdTk;

        specialinvoke r2.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$E0rM1FNIqzKUZzqphmkzeY3ZdTk: void <init>(com.android.server.pm.permission.PermissionManagerService,java.lang.String[],int)>(r0, r4, i0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r2, r3;
        int i0, i1, $i2;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback $r4;
        boolean z0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", i1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermissionInternal(java.lang.String,java.lang.String,boolean,int,int,java.lang.String,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r2, r1, z0, i1, i0, r3, $r4);

        return;
    }

    public boolean setAutoRevokeWhitelisted(java.lang.String, boolean, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, z1;
        int i0, i1, $i3, $i4, i5;
        long l2;
        android.content.pm.PackageManagerInternal $r2;
        android.app.AppOpsManager $r3, r7;
        java.lang.Throwable $r4;
        java.lang.String r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r6;
        byte b6;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i5 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        r6 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r5);

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = interfaceinvoke r6.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i5, $i3);

        z1 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean checkAutoRevokeAccess(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r6, i0);

        b6 = 0;

        if z1 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.app.AppOpsManager mAppOpsManager>;

        $i4 = virtualinvoke $r3.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(98, i1, r5);

        if $i4 == 0 goto label2;

        return 0;

     label2:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        r7 = r0.<com.android.server.pm.permission.PermissionManagerService: android.app.AppOpsManager mAppOpsManager>;

     label4:
        if z0 == 0 goto label5;

        b6 = 1;

     label5:
        virtualinvoke r7.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(97, i1, r5, b6);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean setDefaultBrowser(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.Context $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i1 == i0 goto label1;

        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

     label1:
        $z0 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: boolean setDefaultBrowserInternal(java.lang.String,boolean,boolean,int)>(r1, 0, 1, i0);

        return $z0;
    }

    public void setPermissionEnforced(java.lang.String, boolean)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        boolean z0, $z1;
        long l0;
        android.content.Context $r2;
        java.lang.String $r3, $r8, r12;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        android.content.pm.PackageManagerInternal $r9;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;
        android.app.IActivityManager r13;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r12 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.GRANT_RUNTIME_PERMISSIONS", "setPermissionEnforced");

        $r3 = "android.permission.READ_EXTERNAL_STORAGE";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z1 == 0 goto label7;

        $r9 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        virtualinvoke $r9.<android.content.pm.PackageManagerInternal: void setReadExternalStorageEnforced(boolean)>(z0);

        r13 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        if r13 == null goto label6;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        interfaceinvoke r13.<android.app.IActivityManager: boolean killProcessesBelowForeground(java.lang.String)>("setPermissionEnforcement");

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label6:
        return;

     label7:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No selective enforcement for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean shouldShowRequestPermissionRationale(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, $r8, r14;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i11;
        android.content.Context r2;
        android.content.pm.PackageManagerInternal $r4;
        boolean $z0, z1, z2;
        java.lang.StringBuilder $r5;
        android.os.RemoteException $r9, $r12, r16;
        java.lang.Throwable $r10, $r11, $r13, r17;
        long l10, l12;
        com.android.internal.compat.IPlatformCompat r15;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 == i0 goto label01;

        r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canShowRequestPermissionRationale for user ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r8);

     label01:
        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        i9 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>(r1, 268435456, i0);

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i9);

        if $i3 == $i4 goto label02;

        return 0;

     label02:
        $i5 = virtualinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(r14, r1, i0);

        if $i5 != 0 goto label03;

        return 0;

     label03:
        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        i11 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: int getPermissionFlagsInternal(java.lang.String,java.lang.String,int,int)>(r14, r1, i1, i0);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        $i6 = i11 & 22;

        if $i6 == 0 goto label06;

        return 0;

     label06:
        l12 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $z0 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.ACCESS_BACKGROUND_LOCATION");

        if $z0 == 0 goto label11;

        r15 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.internal.compat.IPlatformCompat mPlatformCompat>;

     label08:
        z1 = interfaceinvoke r15.<com.android.internal.compat.IPlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>(147316723L, r1, i0);

     label09:
        if z1 == 0 goto label11;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        return 1;

     label10:
        $r12 := @caughtexception;

        r16 = $r12;

        goto label14;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        goto label16;

     label12:
        $r11 := @caughtexception;

        r17 = $r11;

        goto label20;

     label13:
        $r9 := @caughtexception;

        r16 = $r9;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Unable to check if compatibility change is enabled.", r16);

     label15:
        goto label11;

     label16:
        $i7 = i11 & 1;

        if $i7 == 0 goto label17;

        z2 = 1;

        goto label18;

     label17:
        z2 = 0;

     label18:
        return z2;

     label19:
        $r13 := @caughtexception;

        r17 = $r13;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l12);

        throw r17;

     label21:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        throw $r10;

        catch java.lang.Throwable from label04 to label05 with label21;
        catch android.os.RemoteException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
    }

    public void startOneTimePermissionSession(java.lang.String, int, long, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i2, i3;
        long l1, l4;
        android.content.Context $r1;
        com.android.server.pm.permission.OneTimePermissionUserManager $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS", "Must hold android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS to register permissions as one time.");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>(i0);

        virtualinvoke $r3.<com.android.server.pm.permission.OneTimePermissionUserManager: void startPackageOneTimeSession(java.lang.String,long,int,int)>(r5, l1, i2, i3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopOneTimePermissionSession(java.lang.String, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0;
        long l1;
        android.content.Context $r1;
        com.android.server.pm.permission.OneTimePermissionUserManager $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS", "Must hold android.permission.MANAGE_ONE_TIME_PERMISSION_SESSIONS to remove permissions as one time.");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>(i0);

        virtualinvoke $r3.<com.android.server.pm.permission.OneTimePermissionUserManager: void stopPackageOneTimeSession(java.lang.String)>(r5);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void updatePermissionFlags(java.lang.String, java.lang.String, int, int, boolean, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        java.lang.String r1, r5;
        int i0, i1, i2, i3, $i5, $i6;
        long l4;
        android.content.pm.PackageManagerInternal $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;
        boolean z0, z1, z2;
        java.lang.IllegalArgumentException r6;
        com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback $r8;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        i3 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        z1 = 0;

        if i3 == 1000 goto label8;

        if i3 == 0 goto label8;

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $i5 = i0 & 4;

        if $i5 == 0 goto label7;

        if z0 == 0 goto label3;

     label1:
        $r3 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY", "Need android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY to change policy flags");

     label2:
        goto label4;

     label3:
        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $i6 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: int getUidTargetSdkVersion(int)>(i3);

        if $i6 >= 29 goto label5;

     label4:
        z1 = 1;

        goto label7;

     label5:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY needs  to be checked for packages targeting 29 or later when changing policy flags");

        throw r6;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw $r4;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        z2 = z1;

        goto label9;

     label8:
        z2 = 0;

     label9:
        $r8 = r0.<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback mDefaultPermissionCallback>;

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsInternal(java.lang.String,java.lang.String,int,int,int,int,boolean,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>(r5, r1, i0, i1, i3, i2, z2, $r8);

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void updatePermissionFlagsForAllApps(int, int, int)
    {
        com.android.server.pm.permission.PermissionManagerService r0;
        int i0, i1, i2, i3;
        boolean[] r1;
        android.os.UserManagerInternal $r2;
        boolean $z0, $z1;
        com.android.server.pm.permission._$$Lambda$PermissionManagerService$8MsCUqeSxDj_MAni8qzyAjlwj_8 $r3;
        android.content.pm.PackageManagerInternal $r4, $r6;
        int[] $r5;

        r0 := @this: com.android.server.pm.permission.PermissionManagerService;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.permission.PermissionManagerService: android.os.UserManagerInternal mUserManagerInt>;

        $z0 = virtualinvoke $r2.<android.os.UserManagerInternal: boolean exists(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String)>("updatePermissionFlagsForAllApps");

        specialinvoke r0.<com.android.server.pm.permission.PermissionManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, 0, "updatePermissionFlagsForAllApps");

        if i1 == 1000 goto label2;

        goto label3;

     label2:
        i2 = i2 & -17;

     label3:
        if i1 == 1000 goto label4;

        goto label5;

     label4:
        i3 = i3 & -17;

     label5:
        r1 = newarray (boolean)[1];

        $r4 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r3 = new com.android.server.pm.permission._$$Lambda$PermissionManagerService$8MsCUqeSxDj_MAni8qzyAjlwj_8;

        specialinvoke $r3.<com.android.server.pm.permission._$$Lambda$PermissionManagerService$8MsCUqeSxDj_MAni8qzyAjlwj_8: void <init>(com.android.server.pm.permission.PermissionManagerService,boolean[],int,int,int)>(r0, r1, i0, i2, i3);

        virtualinvoke $r4.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r3);

        $z1 = r1[0];

        if $z1 == 0 goto label6;

        $r6 = r0.<com.android.server.pm.permission.PermissionManagerService: android.content.pm.PackageManagerInternal mPackageManagerInt>;

        $r5 = newarray (int)[1];

        $r5[0] = i0;

        virtualinvoke $r6.<android.content.pm.PackageManagerInternal: void writePermissionSettings(int[],boolean)>($r5, 1);

     label6:
        return;
    }
}
