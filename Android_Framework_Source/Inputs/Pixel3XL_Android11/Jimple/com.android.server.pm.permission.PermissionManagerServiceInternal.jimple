public abstract class com.android.server.pm.permission.PermissionManagerServiceInternal extends android.permission.PermissionManagerInternal
{

    public void <init>()
    {
        com.android.server.pm.permission.PermissionManagerServiceInternal r0;

        r0 := @this: com.android.server.pm.permission.PermissionManagerServiceInternal;

        specialinvoke r0.<android.permission.PermissionManagerInternal: void <init>()>();

        return;
    }

    public abstract void addAllPermissionGroups(com.android.server.pm.parsing.pkg.AndroidPackage, boolean);

    public abstract void addAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage, boolean);

    public abstract void enforceCrossUserOrProfilePermission(int, int, boolean, boolean, java.lang.String);

    public abstract void enforceCrossUserPermission(int, int, boolean, boolean, java.lang.String);

    public abstract void enforceCrossUserPermission(int, int, boolean, boolean, boolean, java.lang.String);

    public abstract void enforceGrantRevokeRuntimePermissionPermissions(java.lang.String);

    public abstract java.util.ArrayList getAllPermissionsWithProtection(int);

    public abstract java.util.ArrayList getAllPermissionsWithProtectionFlags(int);

    public abstract java.lang.String[] getAppOpPermissionPackages(java.lang.String, int);

    public abstract android.permission.PermissionManagerInternal$CheckPermissionDelegate getCheckPermissionDelegate();

    public abstract java.lang.String getDefaultBrowser(int);

    public abstract java.lang.String getDefaultDialer(int);

    public abstract java.lang.String getDefaultHome(int);

    public abstract com.android.server.pm.permission.PermissionSettings getPermissionSettings();

    public abstract com.android.server.pm.permission.BasePermission getPermissionTEMP(java.lang.String);

    public abstract void grantDefaultPermissionsToDefaultBrowser(java.lang.String, int);

    public abstract void grantDefaultPermissionsToDefaultSimCallManager(java.lang.String, int);

    public abstract void grantDefaultPermissionsToDefaultUseOpenWifiApp(java.lang.String, int);

    public abstract void grantRequestedRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage, int[], java.lang.String[], int);

    public abstract boolean isPermissionsReviewRequired(com.android.server.pm.parsing.pkg.AndroidPackage, int);

    public abstract void onNewUserCreated(int);

    public abstract void removeAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage, boolean);

    public abstract void resetAllRuntimePermissions(int);

    public abstract void resetRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage, int);

    public abstract void retainHardAndSoftRestrictedPermissions(java.util.List);

    public abstract void revokeRuntimePermissionsIfGroupChanged(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.parsing.pkg.AndroidPackage, java.util.ArrayList);

    public abstract void setAutoRevokeWhitelisted(java.lang.String, boolean, int);

    public abstract void setCheckPermissionDelegate(android.permission.PermissionManagerInternal$CheckPermissionDelegate);

    public abstract void setDefaultBrowser(java.lang.String, boolean, boolean, int);

    public abstract void setDefaultBrowserProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultBrowserProvider);

    public abstract void setDefaultDialerProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultDialerProvider);

    public abstract void setDefaultHome(java.lang.String, int, java.util.function.Consumer);

    public abstract void setDefaultHomeProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$DefaultHomeProvider);

    public abstract void setDialerAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setLocationExtraPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setLocationPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setSimCallManagerPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setSmsAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setSyncAdapterPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$SyncAdapterPackagesProvider);

    public abstract void setUseOpenWifiAppPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setVoiceInteractionPackagesProvider(com.android.server.pm.permission.PermissionManagerServiceInternal$PackagesProvider);

    public abstract void setWhitelistedRestrictedPermissions(com.android.server.pm.parsing.pkg.AndroidPackage, int[], java.util.List, int, int);

    public abstract void setWhitelistedRestrictedPermissions(java.lang.String, java.util.List, int, int);

    public abstract void systemReady();

    public abstract void updateAllPermissions(java.lang.String, boolean);

    public abstract void updatePermissions(java.lang.String, com.android.server.pm.parsing.pkg.AndroidPackage);
}
