class com.android.server.policy.DisplayFoldDurationLogger extends java.lang.Object
{
    private static final int LOG_SUBTYPE_DURATION_MASK;
    private static final int LOG_SUBTYPE_FOLDED;
    private static final int LOG_SUBTYPE_UNFOLDED;
    static final int SCREEN_STATE_OFF;
    static final int SCREEN_STATE_ON_FOLDED;
    static final int SCREEN_STATE_ON_UNFOLDED;
    static final int SCREEN_STATE_UNKNOWN;
    private java.lang.Long mLastChanged;
    private final com.android.internal.logging.MetricsLogger mLogger;
    private int mScreenState;

    void <init>()
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;
        com.android.internal.logging.MetricsLogger $r1;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState> = -1;

        r0.<com.android.server.policy.DisplayFoldDurationLogger: java.lang.Long mLastChanged> = null;

        $r1 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r1.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.policy.DisplayFoldDurationLogger: com.android.internal.logging.MetricsLogger mLogger> = $r1;

        return;
    }

    private boolean isOn()
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;
        int i0;
        boolean z1;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        i0 = r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState>;

        z1 = 1;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void log()
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;
        java.lang.Long $r1, $r6;
        android.metrics.LogMaker $r2, $r4, $r5, $r7;
        com.android.internal.logging.MetricsLogger $r3;
        long $l0, $l1, $l2;
        int i3, i4;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        $r1 = r0.<com.android.server.policy.DisplayFoldDurationLogger: java.lang.Long mLastChanged>;

        if $r1 != null goto label1;

        return;

     label1:
        i3 = r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState>;

        if i3 == 1 goto label3;

        if i3 == 2 goto label2;

        return;

     label2:
        i4 = -2147483647;

        goto label4;

     label3:
        i4 = -2147483648;

     label4:
        $r3 = r0.<com.android.server.policy.DisplayFoldDurationLogger: com.android.internal.logging.MetricsLogger mLogger>;

        $r2 = new android.metrics.LogMaker;

        specialinvoke $r2.<android.metrics.LogMaker: void <init>(int)>(1594);

        $r4 = virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>(4);

        $r5 = virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>(i4);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r6 = r0.<com.android.server.policy.DisplayFoldDurationLogger: java.lang.Long mLastChanged>;

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $l2 = $l0 - $l1;

        $r7 = virtualinvoke $r5.<android.metrics.LogMaker: android.metrics.LogMaker setLatency(long)>($l2);

        virtualinvoke $r3.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r7);

        return;
    }

    void logFocusedAppWithFoldState(boolean, java.lang.String)
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;
        boolean z0;
        java.lang.String r1;
        android.metrics.LogMaker $r2, $r4, $r5, $r6;
        com.android.internal.logging.MetricsLogger $r3;
        int i0;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.policy.DisplayFoldDurationLogger: com.android.internal.logging.MetricsLogger mLogger>;

        $r2 = new android.metrics.LogMaker;

        specialinvoke $r2.<android.metrics.LogMaker: void <init>(int)>(1594);

        $r4 = virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>(4);

        i0 = (int) z0;

        $r5 = virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>(i0);

        $r6 = virtualinvoke $r5.<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>(r1);

        virtualinvoke $r3.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r6);

        return;
    }

    void onFinishedGoingToSleep()
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        specialinvoke r0.<com.android.server.policy.DisplayFoldDurationLogger: void log()>();

        r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState> = 0;

        r0.<com.android.server.policy.DisplayFoldDurationLogger: java.lang.Long mLastChanged> = null;

        return;
    }

    void onFinishedWakingUp(java.lang.Boolean)
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;
        java.lang.Boolean r1;
        boolean $z0;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        r1 := @parameter0: java.lang.Boolean;

        if r1 != null goto label1;

        r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState> = -1;

        goto label3;

     label1:
        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState> = 2;

        goto label3;

     label2:
        r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState> = 1;

     label3:
        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        r0.<com.android.server.policy.DisplayFoldDurationLogger: java.lang.Long mLastChanged> = $r2;

        return;
    }

    void setDeviceFolded(boolean)
    {
        com.android.server.policy.DisplayFoldDurationLogger r0;
        boolean z0, $z1;
        long $l0;
        java.lang.Long $r1;
        byte b1;

        r0 := @this: com.android.server.policy.DisplayFoldDurationLogger;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<com.android.server.policy.DisplayFoldDurationLogger: boolean isOn()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.policy.DisplayFoldDurationLogger: void log()>();

        if z0 == 0 goto label2;

        b1 = 2;

        goto label3;

     label2:
        b1 = 1;

     label3:
        r0.<com.android.server.policy.DisplayFoldDurationLogger: int mScreenState> = b1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        r0.<com.android.server.policy.DisplayFoldDurationLogger: java.lang.Long mLastChanged> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.policy.DisplayFoldDurationLogger: int SCREEN_STATE_UNKNOWN> = -1;

        <com.android.server.policy.DisplayFoldDurationLogger: int SCREEN_STATE_ON_UNFOLDED> = 1;

        <com.android.server.policy.DisplayFoldDurationLogger: int SCREEN_STATE_ON_FOLDED> = 2;

        <com.android.server.policy.DisplayFoldDurationLogger: int SCREEN_STATE_OFF> = 0;

        <com.android.server.policy.DisplayFoldDurationLogger: int LOG_SUBTYPE_UNFOLDED> = 0;

        <com.android.server.policy.DisplayFoldDurationLogger: int LOG_SUBTYPE_FOLDED> = 1;

        <com.android.server.policy.DisplayFoldDurationLogger: int LOG_SUBTYPE_DURATION_MASK> = -2147483648;

        return;
    }
}
