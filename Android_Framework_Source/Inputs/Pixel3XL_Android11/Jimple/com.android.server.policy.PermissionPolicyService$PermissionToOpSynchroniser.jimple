class com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser extends java.lang.Object
{
    private final android.app.AppOpsManager mAppOpsManager;
    private final android.app.AppOpsManagerInternal mAppOpsManagerInternal;
    private final android.content.Context mContext;
    private final java.util.ArrayList mOpsToAllow;
    private final java.util.ArrayList mOpsToForeground;
    private final java.util.ArrayList mOpsToIgnore;
    private final java.util.ArrayList mOpsToIgnoreIfNotAllowed;
    private final android.content.pm.PackageManager mPackageManager;
    private final android.util.ArrayMap mRuntimePermissionInfos;
    final com.android.server.policy.PermissionPolicyService this$0;

    void <init>(com.android.server.policy.PermissionPolicyService, android.content.Context)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, i1;
        java.util.ArrayList $r1, $r2, $r3, $r4, r19;
        android.content.pm.PackageManager $r5;
        java.lang.Object $r6, $r8, $r11, $r12;
        android.app.AppOpsManager $r7;
        android.app.AppOpsManagerInternal $r9;
        android.util.ArrayMap $r10, $r14;
        java.lang.String $r13;
        com.android.server.policy.PermissionPolicyService r16;
        android.content.Context r17;
        com.android.server.pm.permission.PermissionManagerServiceInternal r18;
        android.content.pm.PermissionInfo r20;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r16 := @parameter0: com.android.server.policy.PermissionPolicyService;

        r17 := @parameter1: android.content.Context;

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: com.android.server.policy.PermissionPolicyService this$0> = r16;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToAllow> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnore> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnoreIfNotAllowed> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToForeground> = $r4;

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext> = r17;

        $r5 = virtualinvoke r17.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.pm.PackageManager mPackageManager> = $r5;

        $r6 = virtualinvoke r17.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r7 = (android.app.AppOpsManager) $r6;

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManager mAppOpsManager> = $r7;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/AppOpsManagerInternal;");

        $r9 = (android.app.AppOpsManagerInternal) $r8;

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManagerInternal mAppOpsManagerInternal> = $r9;

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.util.ArrayMap mRuntimePermissionInfos> = $r10;

        $r11 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;");

        r18 = (com.android.server.pm.permission.PermissionManagerServiceInternal) $r11;

        r19 = virtualinvoke r18.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.util.ArrayList getAllPermissionsWithProtection(int)>(1);

        i0 = interfaceinvoke r19.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r12 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i1);

        r20 = (android.content.pm.PermissionInfo) $r12;

        $r14 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.util.ArrayMap mRuntimePermissionInfos>;

        $r13 = r20.<android.content.pm.PermissionInfo: java.lang.String name>;

        virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r20);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static void access$700(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void syncPackages()>();

        return;
    }

    private void addAppOps(android.content.pm.PackageInfo, com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        android.content.pm.PackageInfo r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        java.lang.String r5;
        android.content.pm.PermissionInfo r6;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r1 := @parameter0: android.content.pm.PackageInfo;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r5 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.util.ArrayMap mRuntimePermissionInfos>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (android.content.pm.PermissionInfo) $r4;

        if r6 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void addPermissionAppOp(android.content.pm.PackageInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.PermissionInfo)>(r1, r2, r6);

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void addExtraAppOp(android.content.pm.PackageInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.PermissionInfo)>(r1, r2, r6);

        return;
    }

    private void addExtraAppOp(android.content.pm.PackageInfo, com.android.server.pm.parsing.pkg.AndroidPackage, android.content.pm.PermissionInfo)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        android.content.Context $r1, $r2;
        android.content.pm.ApplicationInfo $r3, $r6;
        android.os.UserHandle $r4;
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange $r5;
        java.lang.String $r7, r14;
        java.util.ArrayList $r8, $r9, $r10;
        android.content.pm.PackageInfo r11;
        com.android.server.pm.parsing.pkg.AndroidPackage r12;
        android.content.pm.PermissionInfo r13;
        com.android.server.policy.SoftRestrictedPermissionPolicy r15;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r11 := @parameter0: android.content.pm.PackageInfo;

        r12 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r13 := @parameter2: android.content.pm.PermissionInfo;

        $z0 = virtualinvoke r13.<android.content.pm.PermissionInfo: boolean isSoftRestricted()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r14 = r13.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r2 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext>;

        $r3 = r11.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r1 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext>;

        $r4 = virtualinvoke $r1.<android.content.Context: android.os.UserHandle getUser()>();

        r15 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy forPermission(android.content.Context,android.content.pm.ApplicationInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.os.UserHandle,java.lang.String)>($r2, $r3, r12, $r4, r14);

        i0 = virtualinvoke r15.<com.android.server.policy.SoftRestrictedPermissionPolicy: int getExtraAppOpCode()>();

        if i0 != -1 goto label2;

        return;

     label2:
        $r5 = new com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange;

        $r6 = r11.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        $r7 = r11.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r5.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: void <init>(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser,int,java.lang.String,int)>(r0, $i1, $r7, i0);

        $z1 = virtualinvoke r15.<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayAllowExtraAppOp()>();

        if $z1 == 0 goto label3;

        $r10 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToAllow>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label5;

     label3:
        $z2 = virtualinvoke r15.<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayDenyExtraAppOpIfGranted()>();

        if $z2 == 0 goto label4;

        $r9 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnore>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label5;

     label4:
        $r8 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnoreIfNotAllowed>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label5:
        return;
    }

    private void addPermissionAppOp(android.content.pm.PackageInfo, com.android.server.pm.parsing.pkg.AndroidPackage, android.content.pm.PermissionInfo)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String r2, r3, $r10, $r11;
        int i1, $i2, i3, $i5;
        boolean $z0, $z1, $z5, z6, z7;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        android.os.UserHandle $r6;
        java.util.ArrayList $r7, $r8, $r9;
        android.util.ArrayMap $r12;
        java.lang.Object $r13;
        android.content.pm.PackageInfo r14;
        android.content.pm.PermissionInfo r15, r16;
        byte b4;
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange $r17;
        android.content.pm.ApplicationInfo $r18;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r14 := @parameter0: android.content.pm.PackageInfo;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r15 := @parameter2: android.content.pm.PermissionInfo;

        $z0 = virtualinvoke r15.<android.content.pm.PermissionInfo: boolean isRuntime()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r2 = r15.<android.content.pm.PermissionInfo: java.lang.String name>;

        r3 = r14.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r5 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.pm.PackageManager mPackageManager>;

        $r4 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: android.os.UserHandle getUser()>();

        i3 = virtualinvoke $r5.<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>(r2, r3, $r6);

        $i2 = i3 & 64;

        if $i2 == 0 goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        if z6 == 0 goto label04;

        return;

     label04:
        i1 = staticinvoke <com.android.server.policy.PermissionPolicyService: int access$800(java.lang.String)>(r2);

        if i1 != -1 goto label05;

        return;

     label05:
        $z1 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: boolean shouldGrantAppOp(android.content.pm.PackageInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.PermissionInfo)>(r14, r1, r15);

        if $z1 == 0 goto label11;

        $r10 = r15.<android.content.pm.PermissionInfo: java.lang.String backgroundPermission>;

        if $r10 == null goto label10;

        $r12 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.util.ArrayMap mRuntimePermissionInfos>;

        $r11 = r15.<android.content.pm.PermissionInfo: java.lang.String backgroundPermission>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r11);

        r16 = (android.content.pm.PermissionInfo) $r13;

        if r16 == null goto label06;

        $z5 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: boolean shouldGrantAppOp(android.content.pm.PackageInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.PermissionInfo)>(r14, r1, r16);

        if $z5 == 0 goto label06;

        z7 = 1;

        goto label07;

     label06:
        z7 = 0;

     label07:
        if z7 == 0 goto label08;

        b4 = 0;

        goto label09;

     label08:
        b4 = 4;

     label09:
        goto label12;

     label10:
        b4 = 0;

        goto label12;

     label11:
        b4 = 1;

     label12:
        $r17 = new com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange;

        $r18 = r14.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r18.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke $r17.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: void <init>(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser,int,java.lang.String,int)>(r0, $i5, r3, i1);

        if b4 == 0 goto label15;

        if b4 == 1 goto label14;

        if b4 == 4 goto label13;

        goto label16;

     label13:
        $r9 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToForeground>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        goto label16;

     label14:
        $r8 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnore>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        goto label16;

     label15:
        $r7 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToAllow>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

     label16:
        return;
    }

    private void setUidMode(int, int, int, java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r1, $r3, $r8;
        android.app.AppOpsManager $r2, $r7;
        com.android.server.policy.PermissionPolicyService $r4, $r10;
        android.app.AppOpsManagerInternal $r5, $r9;
        com.android.internal.app.IAppOpsCallback $r6, $r11;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r2 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManager mAppOpsManager>;

        $r3 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPublicName(int)>(i0);

        $i3 = virtualinvoke $r2.<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)>($r3, i1, r1);

        if $i3 == i2 goto label1;

        $r5 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManagerInternal mAppOpsManagerInternal>;

        $r4 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: com.android.server.policy.PermissionPolicyService this$0>;

        $r6 = staticinvoke <com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback access$900(com.android.server.policy.PermissionPolicyService)>($r4);

        virtualinvoke $r5.<android.app.AppOpsManagerInternal: void setUidModeFromPermissionPolicy(int,int,int,com.android.internal.app.IAppOpsCallback)>(i0, i1, i2, $r6);

        $r7 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManager mAppOpsManager>;

        $r8 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPublicName(int)>(i0);

        $i4 = virtualinvoke $r7.<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)>($r8, i1, r1);

        if $i4 == i2 goto label1;

        $r9 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManagerInternal mAppOpsManagerInternal>;

        $i5 = staticinvoke <android.app.AppOpsManager: int opToDefaultMode(int)>(i0);

        $r10 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: com.android.server.policy.PermissionPolicyService this$0>;

        $r11 = staticinvoke <com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback access$900(com.android.server.policy.PermissionPolicyService)>($r10);

        virtualinvoke $r9.<android.app.AppOpsManagerInternal: void setModeFromPermissionPolicy(int,int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>(i0, i1, r1, $i5, $r11);

     label1:
        return;
    }

    private void setUidModeAllowed(int, int, java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void setUidMode(int,int,int,java.lang.String)>(i0, i1, 0, r1);

        return;
    }

    private void setUidModeForeground(int, int, java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void setUidMode(int,int,int,java.lang.String)>(i0, i1, 4, r1);

        return;
    }

    private void setUidModeIgnored(int, int, java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void setUidMode(int,int,int,java.lang.String)>(i0, i1, 1, r1);

        return;
    }

    private boolean setUidModeIgnoredIfNotAllowed(int, int, java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        int i0, i1, i2;
        java.lang.String r1, $r3;
        android.app.AppOpsManager $r2;
        com.android.server.policy.PermissionPolicyService $r4;
        android.app.AppOpsManagerInternal $r5;
        com.android.internal.app.IAppOpsCallback $r6;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManager mAppOpsManager>;

        $r3 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPublicName(int)>(i0);

        i2 = virtualinvoke $r2.<android.app.AppOpsManager: int unsafeCheckOpRaw(java.lang.String,int,java.lang.String)>($r3, i1, r1);

        if i2 == 0 goto label2;

        if i2 == 1 goto label1;

        $r5 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.app.AppOpsManagerInternal mAppOpsManagerInternal>;

        $r4 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: com.android.server.policy.PermissionPolicyService this$0>;

        $r6 = staticinvoke <com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback access$900(com.android.server.policy.PermissionPolicyService)>($r4);

        virtualinvoke $r5.<android.app.AppOpsManagerInternal: void setUidModeFromPermissionPolicy(int,int,int,com.android.internal.app.IAppOpsCallback)>(i0, i1, 1, $r6);

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean shouldGrantAppOp(android.content.pm.PackageInfo, com.android.server.pm.parsing.pkg.AndroidPackage, android.content.pm.PermissionInfo)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        android.content.pm.PackageInfo r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        android.content.pm.PermissionInfo r3;
        java.lang.String r4, r5;
        int i0, $i1, $i2, i3;
        android.content.pm.PackageManager $r6, $r8;
        android.content.Context $r7, $r10, $r11;
        android.os.UserHandle $r9, $r13;
        boolean $z0, $z1, $z2, z3, z4, z5, z6;
        android.content.pm.ApplicationInfo $r12;
        com.android.server.policy.SoftRestrictedPermissionPolicy $r14;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r1 := @parameter0: android.content.pm.PackageInfo;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter2: android.content.pm.PermissionInfo;

        r4 = r3.<android.content.pm.PermissionInfo: java.lang.String name>;

        r5 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r6 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.pm.PackageManager mPackageManager>;

        i3 = virtualinvoke $r6.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>(r4, r5);

        z3 = 1;

        if i3 != 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        if z4 != 0 goto label03;

        return 0;

     label03:
        $r8 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.pm.PackageManager mPackageManager>;

        $r7 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: android.os.UserHandle getUser()>();

        i0 = virtualinvoke $r8.<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>(r4, r5, $r9);

        $i1 = i0 & 8;

        if $i1 != 8 goto label04;

        z5 = 1;

        goto label05;

     label04:
        z5 = 0;

     label05:
        if z5 == 0 goto label06;

        return 0;

     label06:
        $z0 = virtualinvoke r3.<android.content.pm.PermissionInfo: boolean isHardRestricted()>();

        if $z0 == 0 goto label11;

        $i2 = i0 & 16384;

        if $i2 != 16384 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        if z6 != 0 goto label09;

        goto label10;

     label09:
        z3 = 0;

     label10:
        return z3;

     label11:
        $z1 = virtualinvoke r3.<android.content.pm.PermissionInfo: boolean isSoftRestricted()>();

        if $z1 == 0 goto label12;

        $r11 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext>;

        $r12 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.Context mContext>;

        $r13 = virtualinvoke $r10.<android.content.Context: android.os.UserHandle getUser()>();

        $r14 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy forPermission(android.content.Context,android.content.pm.ApplicationInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.os.UserHandle,java.lang.String)>($r11, $r12, r2, $r13, r4);

        $z2 = virtualinvoke $r14.<com.android.server.policy.SoftRestrictedPermissionPolicy: boolean mayGrantPermission()>();

        return $z2;

     label12:
        return 1;
    }

    private void syncPackages()
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        android.util.LongSparseLongArray $r2;
        java.util.ArrayList $r3, $r4, $r5, $r6, $r7, $r10, $r13, $r16;
        java.lang.Object $r8, $r11, $r14, $r17;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, i32, i33, i34, i35, i36, i37, i38, i39;
        long $l2, $l8, $l11, $l17, $l20, $l26, $l31;
        java.lang.String $r9, $r12, $r15, $r18;
        boolean $z0;
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange r19, r20, r21, r22;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        $r2 = new android.util.LongSparseLongArray;

        specialinvoke $r2.<android.util.LongSparseLongArray: void <init>()>();

        $r3 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToAllow>;

        i32 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i33 = 0;

     label01:
        if i33 >= i32 goto label02;

        $r16 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToAllow>;

        $r17 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(i33);

        r19 = (com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange) $r17;

        $i28 = r19.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $i27 = r19.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $r18 = r19.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: java.lang.String packageName>;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void setUidModeAllowed(int,int,java.lang.String)>($i28, $i27, $r18);

        $i30 = r19.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i29 = r19.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l31 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i30, $i29);

        virtualinvoke $r2.<android.util.LongSparseLongArray: void put(long,long)>($l31, 1L);

        i33 = i33 + 1;

        goto label01;

     label02:
        $r4 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToForeground>;

        i34 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i35 = 0;

     label03:
        if i35 >= i34 goto label06;

        $r13 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToForeground>;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i35);

        r20 = (com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange) $r14;

        $i19 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i18 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l20 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i19, $i18);

        $i21 = virtualinvoke $r2.<android.util.LongSparseLongArray: int indexOfKey(long)>($l20);

        if $i21 < 0 goto label04;

        goto label05;

     label04:
        $i23 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $i22 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $r15 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: java.lang.String packageName>;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void setUidModeForeground(int,int,java.lang.String)>($i23, $i22, $r15);

        $i25 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i24 = r20.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l26 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i25, $i24);

        virtualinvoke $r2.<android.util.LongSparseLongArray: void put(long,long)>($l26, 1L);

     label05:
        i35 = i35 + 1;

        goto label03;

     label06:
        $r5 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnore>;

        i36 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i37 = 0;

     label07:
        if i37 >= i36 goto label10;

        $r10 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnore>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i37);

        r21 = (com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange) $r11;

        $i10 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i9 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l11 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i10, $i9);

        $i12 = virtualinvoke $r2.<android.util.LongSparseLongArray: int indexOfKey(long)>($l11);

        if $i12 < 0 goto label08;

        goto label09;

     label08:
        $i14 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $i13 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $r12 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: java.lang.String packageName>;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void setUidModeIgnored(int,int,java.lang.String)>($i14, $i13, $r12);

        $i16 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i15 = r21.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l17 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i16, $i15);

        virtualinvoke $r2.<android.util.LongSparseLongArray: void put(long,long)>($l17, 1L);

     label09:
        i37 = i37 + 1;

        goto label07;

     label10:
        $r6 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnoreIfNotAllowed>;

        i38 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i39 = 0;

     label11:
        if i39 >= i38 goto label14;

        $r7 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: java.util.ArrayList mOpsToIgnoreIfNotAllowed>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i39);

        r22 = (com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange) $r8;

        $i1 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i0 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l2 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i1, $i0);

        $i3 = virtualinvoke $r2.<android.util.LongSparseLongArray: int indexOfKey(long)>($l2);

        if $i3 < 0 goto label12;

        goto label13;

     label12:
        $i5 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $i4 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $r9 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: java.lang.String packageName>;

        $z0 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: boolean setUidModeIgnoredIfNotAllowed(int,int,java.lang.String)>($i5, $i4, $r9);

        if $z0 == 0 goto label13;

        $i7 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int uid>;

        $i6 = r22.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser$OpToChange: int code>;

        $l8 = staticinvoke <com.android.internal.util.IntPair: long of(int,int)>($i7, $i6);

        virtualinvoke $r2.<android.util.LongSparseLongArray: void put(long,long)>($l8, 1L);

     label13:
        i39 = i39 + 1;

        goto label11;

     label14:
        return;
    }

    void addPackage(java.lang.String)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        android.content.pm.PackageInfo r1;
        int i0, i1, i2;
        java.lang.Object $r2;
        android.content.pm.PackageManager $r3;
        android.content.pm.ApplicationInfo $r4, $r6;
        java.lang.String[] $r5, r12;
        java.lang.String $r7, r9;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        android.content.pm.PackageManagerInternal r10;
        com.android.server.pm.parsing.pkg.AndroidPackage r11;

        r0 := @this: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r9 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r10 = (android.content.pm.PackageManagerInternal) $r2;

     label1:
        $r3 = r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r9, 4096);

        r11 = virtualinvoke r10.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r9);

     label2:
        if r1 == null goto label8;

        if r11 == null goto label8;

        $r4 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r4 == null goto label8;

        $r5 = r1.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        if $r5 != null goto label3;

        goto label8;

     label3:
        $r6 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i1 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        if i1 == 0 goto label7;

        if i1 != 1000 goto label4;

        goto label7;

     label4:
        r12 = r1.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        i0 = lengthof r12;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r7 = r12[i2];

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void addAppOps(android.content.pm.PackageInfo,com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r1, r11, $r7);

        i2 = i2 + 1;

        goto label5;

     label6:
        return;

     label7:
        return;

     label8:
        return;

     label9:
        $r8 := @caughtexception;

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label9;
    }
}
