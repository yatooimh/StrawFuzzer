public final class com.android.server.policy.PermissionPolicyService extends com.android.server.SystemService
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private static final long USER_SENSITIVE_UPDATE_DELAY_MS;
    private java.util.List mAppOpPermissions;
    private com.android.internal.app.IAppOpsCallback mAppOpsCallback;
    private final android.util.ArraySet mIsPackageSyncsScheduled;
    private final android.util.SparseBooleanArray mIsStarted;
    private final android.util.SparseBooleanArray mIsUidSyncScheduled;
    private final java.lang.Object mLock;
    private com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback mOnInitializedCallback;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.policy.PermissionPolicyService: long USER_SENSITIVE_UPDATE_DELAY_MS> = 10000L;

        <com.android.server.policy.PermissionPolicyService: boolean DEBUG> = 0;

        $r0 = class "Lcom/android/server/policy/PermissionPolicyService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.policy.PermissionPolicyService: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.policy.PermissionPolicyService r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.util.SparseBooleanArray $r3, $r5;
        android.util.ArraySet $r4;
        com.android.server.policy.PermissionPolicyService$Internal $r6;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock> = $r2;

        $r3 = new android.util.SparseBooleanArray;

        specialinvoke $r3.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsStarted> = $r3;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService: android.util.ArraySet mIsPackageSyncsScheduled> = $r4;

        $r5 = new android.util.SparseBooleanArray;

        specialinvoke $r5.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsUidSyncScheduled> = $r5;

        $r6 = new com.android.server.policy.PermissionPolicyService$Internal;

        specialinvoke $r6.<com.android.server.policy.PermissionPolicyService$Internal: void <init>(com.android.server.policy.PermissionPolicyService,com.android.server.policy.PermissionPolicyService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/policy/PermissionPolicyInternal;", $r6);

        return;
    }

    static boolean access$100(com.android.server.policy.PermissionPolicyService, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService: boolean isStarted(int)>(i0);

        return $z0;
    }

    static java.lang.String access$1000()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.policy.PermissionPolicyService: java.lang.String LOG_TAG>;

        return $r0;
    }

    static java.lang.Object access$1100(com.android.server.policy.PermissionPolicyService)
    {
        com.android.server.policy.PermissionPolicyService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        $r1 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback access$1202(com.android.server.policy.PermissionPolicyService, com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback)
    {
        com.android.server.policy.PermissionPolicyService r0;
        com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback r1;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        r1 := @parameter1: com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback;

        r0.<com.android.server.policy.PermissionPolicyService: com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback mOnInitializedCallback> = r1;

        return r1;
    }

    static void access$200(com.android.server.policy.PermissionPolicyService, java.lang.String, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void synchronizePackagePermissionsAndAppOpsForUser(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$300(com.android.server.policy.PermissionPolicyService, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void resetAppOpPermissionsIfNotRequestedForUid(int)>(i0);

        return;
    }

    static void access$400(com.android.server.policy.PermissionPolicyService, java.lang.String, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void synchronizePackagePermissionsAndAppOpsAsyncForUser(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$500(com.android.server.policy.PermissionPolicyService, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void resetAppOpPermissionsIfNotRequestedForUidAsync(int)>(i0);

        return;
    }

    static android.content.Context access$600(android.content.Context, android.os.UserHandle)
    {
        android.content.Context r0, $r2;
        android.os.UserHandle r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.UserHandle;

        $r2 = staticinvoke <com.android.server.policy.PermissionPolicyService: android.content.Context getUserContext(android.content.Context,android.os.UserHandle)>(r0, r1);

        return $r2;
    }

    static int access$800(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.android.server.policy.PermissionPolicyService: int getSwitchOp(java.lang.String)>(r0);

        return $i0;
    }

    static com.android.internal.app.IAppOpsCallback access$900(com.android.server.policy.PermissionPolicyService)
    {
        com.android.server.policy.PermissionPolicyService r0;
        com.android.internal.app.IAppOpsCallback $r1;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        $r1 = r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        return $r1;
    }

    private static int getSwitchOp(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>(r0);

        if i0 != -1 goto label1;

        return -1;

     label1:
        $i1 = staticinvoke <android.app.AppOpsManager: int opToSwitch(int)>(i0);

        return $i1;
    }

    private static android.content.Context getUserContext(android.content.Context, android.os.UserHandle)
    {
        android.os.UserHandle r0, $r3;
        boolean $z0;
        java.lang.String $r4, $r9, r12;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.StringBuilder $r6;
        android.content.Context r10, r11;

        r10 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.UserHandle;

        $r3 = virtualinvoke r10.<android.content.Context: android.os.UserHandle getUser()>();

        $z0 = virtualinvoke $r3.<android.os.UserHandle: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r10;

     label1:
        $r4 = virtualinvoke r10.<android.content.Context: java.lang.String getPackageName()>();

        r11 = virtualinvoke r10.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r4, 0, r0);

     label2:
        return r11;

     label3:
        $r5 := @caughtexception;

        r12 = <com.android.server.policy.PermissionPolicyService: java.lang.String LOG_TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create context for user ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r12, $r9, $r5);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void grantOrUpgradeDefaultRuntimePermissionsIfNeeded(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        com.android.internal.infra.AndroidFuture $r3;
        android.permission.PermissionControllerManager $r4;
        android.content.Context $r5, $r7;
        android.os.UserHandle $r6;
        android.os.Handler $r8, r20;
        java.util.concurrent.Executor $r9;
        com.android.server.policy._$$Lambda$PermissionPolicyService$enZnky8NIhd5B9lAhmYeFn1Y6mk $r10;
        com.android.server.policy._$$Lambda$jaDybyCEM2y6SS96P5BBES0UITE $r13;
        java.lang.Throwable $r14;
        java.lang.IllegalStateException $r15;
        android.content.pm.PackageManagerInternal r16;
        com.android.server.pm.permission.PermissionManagerServiceInternal r17;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r16 = (android.content.pm.PackageManagerInternal) $r1;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;");

        r17 = (com.android.server.pm.permission.PermissionManagerServiceInternal) $r2;

        $z0 = virtualinvoke r16.<android.content.pm.PackageManagerInternal: boolean isPermissionUpgradeNeeded(int)>(i0);

        if $z0 == 0 goto label4;

        $r3 = new com.android.internal.infra.AndroidFuture;

        specialinvoke $r3.<com.android.internal.infra.AndroidFuture: void <init>()>();

        $r4 = new android.permission.PermissionControllerManager;

        $r5 = virtualinvoke r0.<com.android.server.policy.PermissionPolicyService: android.content.Context getContext()>();

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r7 = staticinvoke <com.android.server.policy.PermissionPolicyService: android.content.Context getUserContext(android.content.Context,android.os.UserHandle)>($r5, $r6);

        $r8 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        specialinvoke $r4.<android.permission.PermissionControllerManager: void <init>(android.content.Context,android.os.Handler)>($r7, $r8);

        $r9 = staticinvoke <com.android.server.FgThread: java.util.concurrent.Executor getExecutor()>();

        $r10 = new com.android.server.policy._$$Lambda$PermissionPolicyService$enZnky8NIhd5B9lAhmYeFn1Y6mk;

        specialinvoke $r10.<com.android.server.policy._$$Lambda$PermissionPolicyService$enZnky8NIhd5B9lAhmYeFn1Y6mk: void <init>(com.android.internal.infra.AndroidFuture,int)>($r3, i0);

        virtualinvoke $r4.<android.permission.PermissionControllerManager: void grantOrUpgradeDefaultRuntimePermissions(java.util.concurrent.Executor,java.util.function.Consumer)>($r9, $r10);

     label1:
        virtualinvoke $r3.<com.android.internal.infra.AndroidFuture: java.lang.Object get()>();

     label2:
        r20 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4);

        $r13 = new com.android.server.policy._$$Lambda$jaDybyCEM2y6SS96P5BBES0UITE;

        specialinvoke $r13.<com.android.server.policy._$$Lambda$jaDybyCEM2y6SS96P5BBES0UITE: void <init>(android.permission.PermissionControllerManager)>($r4);

        virtualinvoke r20.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r13, 10000L);

        virtualinvoke r16.<android.content.pm.PackageManagerInternal: void updateRuntimePermissionsFingerprint(int)>(i0);

        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    private boolean isStarted(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        android.util.SparseBooleanArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsStarted>;

        z0 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void lambda$RYery4oeHNcS8uZ6BgM2MtZIvKw(com.android.server.policy.PermissionPolicyService, java.lang.String, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void synchronizePackagePermissionsAndAppOpsForUser(java.lang.String,int)>(r1, i0);

        return;
    }

    public static void lambda$V2gOjn4rTBH_rbxagOz-eOTvNfc(com.android.server.policy.PermissionPolicyService, java.lang.String, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void synchronizePackagePermissionsAndAppOpsAsyncForUser(java.lang.String,int)>(r1, i0);

        return;
    }

    static void lambda$grantOrUpgradeDefaultRuntimePermissionsIfNeeded$0(com.android.internal.infra.AndroidFuture, int, java.lang.Boolean)
    {
        com.android.internal.infra.AndroidFuture r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, r8;
        java.lang.IllegalStateException $r5;
        java.lang.Boolean r6;

        r0 := @parameter0: com.android.internal.infra.AndroidFuture;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.Boolean;

        $z0 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.infra.AndroidFuture: boolean complete(java.lang.Object)>(null);

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error granting/upgrading runtime permissions for user ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = <com.android.server.policy.PermissionPolicyService: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r4, r8);

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r8);

        virtualinvoke r0.<com.android.internal.infra.AndroidFuture: boolean completeExceptionally(java.lang.Throwable)>($r5);

     label2:
        return;
    }

    static void lambda$synchronizePermissionsAndAppOpsForUser$1(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String $r2;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r0.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void addPackage(java.lang.String)>($r2);

        return;
    }

    public static void lambda$vRo3eblf_94ockkD9_pc4n6dU_Q(com.android.server.policy.PermissionPolicyService, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;

        r0 := @parameter0: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void resetAppOpPermissionsIfNotRequestedForUid(int)>(i0);

        return;
    }

    private void resetAppOpPermissionsIfNotRequestedForUid(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8, i9, i10;
        java.lang.String[] r1, $r16, $r17;
        android.app.AppOpsManagerInternal r3;
        java.lang.String r4, r23, r27;
        android.util.SparseBooleanArray $r5;
        android.os.UserHandle $r6;
        android.content.Context $r7, r21;
        android.util.ArraySet $r8;
        java.lang.Object $r9, $r10, $r13, r20;
        java.util.List $r11, $r12;
        boolean $z0;
        com.android.internal.app.IAppOpsCallback $r14, $r15;
        android.content.pm.PackageManager$NameNotFoundException $r18;
        java.lang.Throwable $r19;
        android.content.pm.PackageManager r22;
        android.content.pm.PackageInfo r24;
        android.app.AppOpsManager r26;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        r20 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r20;

     label01:
        $r5 = r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsUidSyncScheduled>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void delete(int)>(i0);

        exitmonitor r20;

     label02:
        r21 = virtualinvoke r0.<com.android.server.policy.PermissionPolicyService: android.content.Context getContext()>();

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i0);

        $r7 = staticinvoke <com.android.server.policy.PermissionPolicyService: android.content.Context getUserContext(android.content.Context,android.os.UserHandle)>(r21, $r6);

        r22 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r1 = virtualinvoke r22.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r1 == null goto label17;

        $i4 = lengthof r1;

        if $i4 != 0 goto label03;

        goto label17;

     label03:
        $r8 = new android.util.ArraySet;

        specialinvoke $r8.<android.util.ArraySet: void <init>()>();

        i6 = lengthof r1;

        i7 = 0;

     label04:
        if i7 >= i6 goto label10;

        r23 = r1[i7];

     label05:
        r24 = virtualinvoke r22.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r23, 4096);

     label06:
        if r24 == null goto label09;

        $r16 = r24.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        if $r16 != null goto label07;

        goto label09;

     label07:
        $r17 = r24.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r8, $r17);

        goto label09;

     label08:
        $r18 := @caughtexception;

     label09:
        i7 = i7 + 1;

        goto label04;

     label10:
        $r9 = virtualinvoke r21.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        r26 = (android.app.AppOpsManager) $r9;

        $r10 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/AppOpsManagerInternal;");

        r3 = (android.app.AppOpsManagerInternal) $r10;

        $r11 = r0.<com.android.server.policy.PermissionPolicyService: java.util.List mAppOpPermissions>;

        i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        i8 = 0;

     label11:
        if i8 >= i1 goto label16;

        $r12 = r0.<com.android.server.policy.PermissionPolicyService: java.util.List mAppOpPermissions>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i8);

        r27 = (java.lang.String) $r13;

        $z0 = virtualinvoke $r8.<android.util.ArraySet: boolean contains(java.lang.Object)>(r27);

        if $z0 != 0 goto label15;

        i9 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>(r27);

        i2 = staticinvoke <android.app.AppOpsManager: int opToDefaultMode(int)>(i9);

        i3 = lengthof r1;

        i10 = 0;

     label12:
        if i10 >= i3 goto label14;

        r4 = r1[i10];

        $i5 = virtualinvoke r26.<android.app.AppOpsManager: int unsafeCheckOpRawNoThrow(int,int,java.lang.String)>(i9, i0, r4);

        if $i5 == i2 goto label13;

        $r14 = r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        virtualinvoke r3.<android.app.AppOpsManagerInternal: void setUidModeFromPermissionPolicy(int,int,int,com.android.internal.app.IAppOpsCallback)>(i9, i0, i2, $r14);

        $r15 = r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        virtualinvoke r3.<android.app.AppOpsManagerInternal: void setModeFromPermissionPolicy(int,int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>(i9, i0, r4, i2, $r15);

        goto label13;

     label13:
        i10 = i10 + 1;

        goto label12;

     label14:
        goto label15;

     label15:
        i8 = i8 + 1;

        goto label11;

     label16:
        return;

     label17:
        return;

     label18:
        $r19 := @caughtexception;

     label19:
        exitmonitor r20;

     label20:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label08;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private void resetAppOpPermissionsIfNotRequestedForUidAsync(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1;
        android.util.SparseBooleanArray $r3, $r4;
        android.os.Handler $r5;
        com.android.server.policy.'-$$Lambda$PermissionPolicyService$vRo3eblf_94ockkD9_pc4n6dU_Q' $r6;
        java.lang.Integer $r7;
        android.os.Message $r8;
        java.lang.Throwable $r9;
        java.util.function.BiConsumer r10;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService: boolean isStarted(int)>($i1);

        if $z0 == 0 goto label7;

        r1 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsUidSyncScheduled>;

        $z1 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsUidSyncScheduled>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        $r5 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        $r6 = <com.android.server.policy._$$Lambda$PermissionPolicyService$vRo3eblf_94ockkD9_pc4n6dU_Q: com.android.server.policy.'-$$Lambda$PermissionPolicyService$vRo3eblf_94ockkD9_pc4n6dU_Q' INSTANCE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r10 = (java.util.function.BiConsumer) $r6;

        $r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r10, r0, $r7);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r8);

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void synchronizePackagePermissionsAndAppOpsAsyncForUser(java.lang.String, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        java.lang.Object r1;
        android.util.ArraySet r2;
        boolean $z0, $z1;
        java.lang.Integer $r4, $r7;
        android.os.Handler $r5;
        com.android.server.policy.'-$$Lambda$PermissionPolicyService$RYery4oeHNcS8uZ6BgM2MtZIvKw' $r6;
        android.os.Message $r8;
        java.lang.Throwable $r9;
        java.lang.String r10;
        android.util.Pair r12;
        com.android.internal.util.function.TriConsumer r13;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService: boolean isStarted(int)>(i0);

        if $z0 == 0 goto label7;

        r1 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = r0.<com.android.server.policy.PermissionPolicyService: android.util.ArraySet mIsPackageSyncsScheduled>;

        r12 = new android.util.Pair;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r12.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r10, $r4);

        $z1 = virtualinvoke r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r12);

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        $r6 = <com.android.server.policy._$$Lambda$PermissionPolicyService$RYery4oeHNcS8uZ6BgM2MtZIvKw: com.android.server.policy.'-$$Lambda$PermissionPolicyService$RYery4oeHNcS8uZ6BgM2MtZIvKw' INSTANCE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r13 = (com.android.internal.util.function.TriConsumer) $r6;

        $r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r13, r0, r10, $r7);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r8);

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void synchronizePackagePermissionsAndAppOpsForUser(java.lang.String, int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i1, i2, i3;
        java.lang.Integer $r1;
        java.lang.Object $r2, r12;
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser $r3;
        android.content.Context $r4, $r6;
        android.os.UserHandle $r5;
        java.lang.String $r7, $r8, $r9, r11, r19;
        java.lang.Throwable $r10;
        android.util.ArraySet r13;
        android.util.Pair r14;
        android.content.pm.PackageManagerInternal r15;
        android.content.pm.PackageInfo r16;
        java.lang.String[] r18;
        com.android.server.pm.parsing.pkg.AndroidPackage r20;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        r11 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r12 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r12;

     label1:
        r13 = r0.<com.android.server.policy.PermissionPolicyService: android.util.ArraySet mIsPackageSyncsScheduled>;

        r14 = new android.util.Pair;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke r14.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r11, $r1);

        virtualinvoke r13.<android.util.ArraySet: boolean remove(java.lang.Object)>(r14);

        exitmonitor r12;

     label2:
        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r15 = (android.content.pm.PackageManagerInternal) $r2;

        r16 = virtualinvoke r15.<android.content.pm.PackageManagerInternal: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int,int)>(r11, 0, 1000, i2);

        if r16 != null goto label3;

        return;

     label3:
        $r3 = new com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        $r4 = virtualinvoke r0.<com.android.server.policy.PermissionPolicyService: android.content.Context getContext()>();

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i2);

        $r6 = staticinvoke <com.android.server.policy.PermissionPolicyService: android.content.Context getUserContext(android.content.Context,android.os.UserHandle)>($r4, $r5);

        specialinvoke $r3.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void <init>(com.android.server.policy.PermissionPolicyService,android.content.Context)>(r0, $r6);

        $r7 = r16.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r3.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void addPackage(java.lang.String)>($r7);

        $r8 = r16.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r18 = virtualinvoke r15.<android.content.pm.PackageManagerInternal: java.lang.String[] getSharedUserPackagesForPackage(java.lang.String,int)>($r8, i2);

        i1 = lengthof r18;

        i3 = 0;

     label4:
        if i3 >= i1 goto label6;

        r19 = r18[i3];

        r20 = virtualinvoke r15.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>(r19);

        if r20 == null goto label5;

        $r9 = interfaceinvoke r20.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r3.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void addPackage(java.lang.String)>($r9);

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        staticinvoke <com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void access$700(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser)>($r3);

        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r12;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void synchronizePermissionsAndAppOpsForUser(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        android.content.pm.PackageManagerInternal r1;
        java.lang.Object $r3;
        com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser $r4;
        android.content.Context $r5, $r7;
        android.os.UserHandle $r6;
        com.android.server.policy._$$Lambda$PermissionPolicyService$i87nwVknDNR_kxbgdgQq3zYShyg $r8;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r1 = (android.content.pm.PackageManagerInternal) $r3;

        $r4 = new com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser;

        $r5 = virtualinvoke r0.<com.android.server.policy.PermissionPolicyService: android.content.Context getContext()>();

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r7 = staticinvoke <com.android.server.policy.PermissionPolicyService: android.content.Context getUserContext(android.content.Context,android.os.UserHandle)>($r5, $r6);

        specialinvoke $r4.<com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void <init>(com.android.server.policy.PermissionPolicyService,android.content.Context)>(r0, $r7);

        $r8 = new com.android.server.policy._$$Lambda$PermissionPolicyService$i87nwVknDNR_kxbgdgQq3zYShyg;

        specialinvoke $r8.<com.android.server.policy._$$Lambda$PermissionPolicyService$i87nwVknDNR_kxbgdgQq3zYShyg: void <init>(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser)>($r4);

        virtualinvoke r1.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r8);

        staticinvoke <com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser: void access$700(com.android.server.policy.PermissionPolicyService$PermissionToOpSynchroniser)>($r4);

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        android.os.UserManagerInternal r1;
        int[] r2;
        int i0, i1, i2, i3;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i2 := @parameter0: int;

        if i2 != 550 goto label3;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        r1 = (android.os.UserManagerInternal) $r3;

        r2 = virtualinvoke r1.<android.os.UserManagerInternal: int[] getUserIds()>();

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = r2[i3];

        $z0 = virtualinvoke r1.<android.os.UserManagerInternal: boolean isUserRunning(int)>(i1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.policy.PermissionPolicyService: void onStartUser(int)>(i1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void onStart()
    {
        com.android.server.policy.PermissionPolicyService r0;
        android.content.pm.PackageManagerInternal r1;
        com.android.internal.app.IAppOpsService r2;
        java.lang.Object $r3, $r4, $r16, $r20;
        android.os.IBinder $r5;
        com.android.server.policy.PermissionPolicyService$1 $r6;
        com.android.server.policy._$$Lambda$PermissionPolicyService$V2gOjn4rTBH_rbxagOz_eOTvNfc $r8;
        com.android.server.policy.PermissionPolicyService$2 $r9;
        java.util.ArrayList $r10, r32, r35;
        android.content.IntentFilter $r11;
        android.content.Context $r12;
        com.android.server.policy.PermissionPolicyService$3 $r13;
        android.os.UserHandle $r14;
        boolean $z0, $z2, $z3, $z4, $z5;
        java.lang.String $r17, $r18, $r21, $r24, $r27, $r30, r37;
        java.util.List $r19;
        com.android.server.policy.SoftRestrictedPermissionPolicy $r22;
        com.android.internal.app.IAppOpsCallback $r23, $r25, r38;
        int $i0, i3, i4, i5, i6, i7, i8, i10;
        android.os.RemoteException $r26, $r28, $r29, r39;
        com.android.server.pm.permission.PermissionManagerServiceInternal r31;
        android.content.pm.PermissionInfo r33, r36;
        byte b9;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r1 = (android.content.pm.PackageManagerInternal) $r3;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;");

        r31 = (com.android.server.pm.permission.PermissionManagerServiceInternal) $r4;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        r2 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>($r5);

        $r6 = new com.android.server.policy.PermissionPolicyService$1;

        specialinvoke $r6.<com.android.server.policy.PermissionPolicyService$1: void <init>(com.android.server.policy.PermissionPolicyService)>(r0);

        virtualinvoke r1.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageList getPackageList(android.content.pm.PackageManagerInternal$PackageListObserver)>($r6);

        $r8 = new com.android.server.policy._$$Lambda$PermissionPolicyService$V2gOjn4rTBH_rbxagOz_eOTvNfc;

        specialinvoke $r8.<com.android.server.policy._$$Lambda$PermissionPolicyService$V2gOjn4rTBH_rbxagOz_eOTvNfc: void <init>(com.android.server.policy.PermissionPolicyService)>(r0);

        virtualinvoke r31.<com.android.server.pm.permission.PermissionManagerServiceInternal: void addOnRuntimePermissionStateChangedListener(android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)>($r8);

        $r9 = new com.android.server.policy.PermissionPolicyService$2;

        specialinvoke $r9.<com.android.server.policy.PermissionPolicyService$2: void <init>(com.android.server.policy.PermissionPolicyService)>(r0);

        r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback> = $r9;

        r32 = virtualinvoke r31.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.util.ArrayList getAllPermissionsWithProtection(int)>(1);

     label01:
        i3 = virtualinvoke r32.<java.util.ArrayList: int size()>();

     label02:
        i4 = 0;

     label03:
        if i4 >= i3 goto label09;

     label04:
        $r20 = virtualinvoke r32.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r33 = (android.content.pm.PermissionInfo) $r20;

        $z4 = virtualinvoke r33.<android.content.pm.PermissionInfo: boolean isRuntime()>();

        if $z4 == 0 goto label05;

        $r24 = r33.<android.content.pm.PermissionInfo: java.lang.String name>;

        $i0 = staticinvoke <com.android.server.policy.PermissionPolicyService: int getSwitchOp(java.lang.String)>($r24);

        $r25 = r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        interfaceinvoke r2.<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>($i0, null, $r25);

     label05:
        $z5 = virtualinvoke r33.<android.content.pm.PermissionInfo: boolean isSoftRestricted()>();

        if $z5 == 0 goto label08;

        $r21 = r33.<android.content.pm.PermissionInfo: java.lang.String name>;

        $r22 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy forPermission(android.content.Context,android.content.pm.ApplicationInfo,com.android.server.pm.parsing.pkg.AndroidPackage,android.os.UserHandle,java.lang.String)>(null, null, null, null, $r21);

        i5 = virtualinvoke $r22.<com.android.server.policy.SoftRestrictedPermissionPolicy: int getExtraAppOpCode()>();

     label06:
        if i5 == -1 goto label08;

     label07:
        $r23 = r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        interfaceinvoke r2.<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>(i5, null, $r23);

     label08:
        i4 = i4 + 1;

        goto label03;

     label09:
        goto label11;

     label10:
        $r29 := @caughtexception;

        $r30 = <com.android.server.policy.PermissionPolicyService: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r30, "Cannot set up app-ops listener");

     label11:
        r35 = virtualinvoke r31.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.util.ArrayList getAllPermissionsWithProtectionFlags(int)>(64);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.policy.PermissionPolicyService: java.util.List mAppOpPermissions> = $r10;

        i6 = interfaceinvoke r35.<java.util.List: int size()>();

        i7 = 0;

     label12:
        if i7 >= i6 goto label28;

        $r16 = interfaceinvoke r35.<java.util.List: java.lang.Object get(int)>(i7);

        r36 = (android.content.pm.PermissionInfo) $r16;

        r37 = r36.<android.content.pm.PermissionInfo: java.lang.String name>;

        i8 = virtualinvoke r37.<java.lang.String: int hashCode()>();

        if i8 == 309844284 goto label16;

        if i8 == 1353874541 goto label15;

        if i8 == 1777263169 goto label14;

     label13:
        goto label17;

     label14:
        $z3 = virtualinvoke r37.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.REQUEST_INSTALL_PACKAGES");

        if $z3 == 0 goto label13;

        b9 = 2;

        goto label18;

     label15:
        $z2 = virtualinvoke r37.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.ACCESS_NOTIFICATIONS");

        if $z2 == 0 goto label13;

        b9 = 0;

        goto label18;

     label16:
        $z0 = virtualinvoke r37.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.MANAGE_IPSEC_TUNNELS");

        if $z0 == 0 goto label13;

        b9 = 1;

        goto label18;

     label17:
        b9 = -1;

     label18:
        if b9 == 0 goto label27;

        if b9 == 1 goto label27;

        if b9 == 2 goto label26;

        $r17 = r36.<android.content.pm.PermissionInfo: java.lang.String name>;

        i10 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>($r17);

        if i10 == -1 goto label25;

        $r19 = r0.<com.android.server.policy.PermissionPolicyService: java.util.List mAppOpPermissions>;

        $r18 = r36.<android.content.pm.PermissionInfo: java.lang.String name>;

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r18);

     label19:
        r38 = r0.<com.android.server.policy.PermissionPolicyService: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

     label20:
        interfaceinvoke r2.<com.android.internal.app.IAppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>(i10, null, r38);

     label21:
        goto label27;

     label22:
        $r28 := @caughtexception;

        r39 = $r28;

        goto label24;

     label23:
        $r26 := @caughtexception;

        r39 = $r26;

     label24:
        $r27 = <com.android.server.policy.PermissionPolicyService: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>($r27, "Cannot set up app-ops listener", r39);

        goto label27;

     label25:
        goto label27;

     label26:
        goto label27;

     label27:
        i7 = i7 + 1;

        goto label12;

     label28:
        $r11 = new android.content.IntentFilter;

        specialinvoke $r11.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r11.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke $r11.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke $r11.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r12 = virtualinvoke r0.<com.android.server.policy.PermissionPolicyService: android.content.Context getContext()>();

        $r13 = new com.android.server.policy.PermissionPolicyService$3;

        specialinvoke $r13.<com.android.server.policy.PermissionPolicyService$3: void <init>(com.android.server.policy.PermissionPolicyService,android.content.pm.PackageManagerInternal)>(r0, r1);

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r12.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r13, $r14, $r11, null, null);

        return;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label04 to label05 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch android.os.RemoteException from label19 to label20 with label23;
        catch android.os.RemoteException from label20 to label21 with label22;
    }

    public void onStartUser(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        android.util.SparseBooleanArray $r2;
        java.lang.Throwable $r3;
        com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback r4;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.policy.PermissionPolicyService: boolean isStarted(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void grantOrUpgradeDefaultRuntimePermissionsIfNeeded(int)>(i0);

        r1 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsStarted>;

        virtualinvoke $r2.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        r4 = r0.<com.android.server.policy.PermissionPolicyService: com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback mOnInitializedCallback>;

        exitmonitor r1;

     label3:
        specialinvoke r0.<com.android.server.policy.PermissionPolicyService: void synchronizePermissionsAndAppOpsForUser(int)>(i0);

        if r4 == null goto label4;

        interfaceinvoke r4.<com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback: void onInitialized(int)>(i0);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onStopUser(int)
    {
        com.android.server.policy.PermissionPolicyService r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseBooleanArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.policy.PermissionPolicyService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.policy.PermissionPolicyService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.PermissionPolicyService: android.util.SparseBooleanArray mIsStarted>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void delete(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
