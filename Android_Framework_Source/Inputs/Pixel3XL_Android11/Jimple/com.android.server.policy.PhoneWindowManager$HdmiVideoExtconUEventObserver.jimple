class com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver extends com.android.server.ExtconStateObserver
{
    private static final java.lang.String HDMI_EXIST;
    private static final java.lang.String NAME;
    private final com.android.server.ExtconUEventObserver$ExtconInfo mHdmi;
    final com.android.server.policy.PhoneWindowManager this$0;

    private void <init>(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.policy.PhoneWindowManager r1;
        com.android.server.ExtconUEventObserver$ExtconInfo $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        r1 := @parameter0: com.android.server.policy.PhoneWindowManager;

        r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.policy.PhoneWindowManager this$0> = r1;

        specialinvoke r0.<com.android.server.ExtconStateObserver: void <init>()>();

        $r2 = new com.android.server.ExtconUEventObserver$ExtconInfo;

        specialinvoke $r2.<com.android.server.ExtconUEventObserver$ExtconInfo: void <init>(java.lang.String)>("hdmi");

        r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.ExtconUEventObserver$ExtconInfo mHdmi> = $r2;

        return;
    }

    void <init>(com.android.server.policy.PhoneWindowManager, com.android.server.policy.PhoneWindowManager$1)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.policy.PhoneWindowManager r1;
        com.android.server.policy.PhoneWindowManager$1 r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        r1 := @parameter0: com.android.server.policy.PhoneWindowManager;

        r2 := @parameter1: com.android.server.policy.PhoneWindowManager$1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: void <init>(com.android.server.policy.PhoneWindowManager)>(r1);

        return;
    }

    static boolean access$3700(com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        $z0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: boolean init()>();

        return $z0;
    }

    private boolean init()
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.ExtconUEventObserver$ExtconInfo $r1, $r4, $r8, $r15;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        java.lang.Throwable $r5, $r13;
        java.lang.StringBuilder $r6, $r14;
        java.lang.String $r9, $r12, $r16, $r19;
        boolean z2;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

     label1:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.ExtconUEventObserver$ExtconInfo mHdmi>;

        $r2 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: java.lang.Object parseStateFromFile(com.android.server.ExtconUEventObserver$ExtconInfo)>($r1);

        $r3 = (java.lang.Boolean) $r2;

        z2 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading ");

        $r8 = r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.ExtconUEventObserver$ExtconInfo mHdmi>;

        $r9 = virtualinvoke $r8.<com.android.server.ExtconUEventObserver$ExtconInfo: java.lang.String getStatePath()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while attempting to determine initial state");

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r12, $r5);

        z2 = 0;

        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.ExtconUEventObserver$ExtconInfo mHdmi>;

        $r16 = virtualinvoke $r15.<com.android.server.ExtconUEventObserver$ExtconInfo: java.lang.String getStatePath()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found while attempting to determine initial state");

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r19, $r13);

        z2 = 0;

        goto label2;

     label5:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.ExtconUEventObserver$ExtconInfo mHdmi>;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: void startObserving(com.android.server.ExtconUEventObserver$ExtconInfo)>($r4);

        return z2;

        catch java.io.FileNotFoundException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Boolean parseState(com.android.server.ExtconUEventObserver$ExtconInfo, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.ExtconUEventObserver$ExtconInfo r1;
        java.lang.String r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        r1 := @parameter0: com.android.server.ExtconUEventObserver$ExtconInfo;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("HDMI=1");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public volatile java.lang.Object parseState(com.android.server.ExtconUEventObserver$ExtconInfo, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.ExtconUEventObserver$ExtconInfo r1;
        java.lang.String r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        r1 := @parameter0: com.android.server.ExtconUEventObserver$ExtconInfo;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: java.lang.Boolean parseState(com.android.server.ExtconUEventObserver$ExtconInfo,java.lang.String)>(r1, r2);

        return $r3;
    }

    public void updateState(com.android.server.ExtconUEventObserver$ExtconInfo, java.lang.String, java.lang.Boolean)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.ExtconUEventObserver$ExtconInfo r1;
        java.lang.String r2;
        java.lang.Boolean r3;
        com.android.server.policy.PhoneWindowManager $r4;
        com.android.server.wm.DisplayPolicy $r5;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        r1 := @parameter0: com.android.server.ExtconUEventObserver$ExtconInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Boolean;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: com.android.server.policy.PhoneWindowManager this$0>;

        $r5 = $r4.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: void setHdmiPlugged(boolean)>($z0);

        return;
    }

    public volatile void updateState(com.android.server.ExtconUEventObserver$ExtconInfo, java.lang.String, java.lang.Object)
    {
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver r0;
        com.android.server.ExtconUEventObserver$ExtconInfo r1;
        java.lang.String r2;
        java.lang.Object r3;
        java.lang.Boolean $r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        r1 := @parameter0: com.android.server.ExtconUEventObserver$ExtconInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r4 = (java.lang.Boolean) r3;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: void updateState(com.android.server.ExtconUEventObserver$ExtconInfo,java.lang.String,java.lang.Boolean)>(r1, r2, $r4);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: java.lang.String NAME> = "hdmi";

        <com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: java.lang.String HDMI_EXIST> = "HDMI=1";

        return;
    }
}
