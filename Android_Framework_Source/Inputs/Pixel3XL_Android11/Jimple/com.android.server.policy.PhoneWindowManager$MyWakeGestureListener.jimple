class com.android.server.policy.PhoneWindowManager$MyWakeGestureListener extends com.android.server.policy.WakeGestureListener
{
    final com.android.server.policy.PhoneWindowManager this$0;

    void <init>(com.android.server.policy.PhoneWindowManager, android.content.Context, android.os.Handler)
    {
        com.android.server.policy.PhoneWindowManager$MyWakeGestureListener r0;
        com.android.server.policy.PhoneWindowManager r1;
        android.content.Context r2;
        android.os.Handler r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener;

        r1 := @parameter0: com.android.server.policy.PhoneWindowManager;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.Handler;

        r0.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: com.android.server.policy.PhoneWindowManager this$0> = r1;

        specialinvoke r0.<com.android.server.policy.WakeGestureListener: void <init>(android.content.Context,android.os.Handler)>(r2, r3);

        return;
    }

    public void onWakeUp()
    {
        com.android.server.policy.PhoneWindowManager$MyWakeGestureListener r0;
        java.lang.Object r1;
        com.android.server.policy.PhoneWindowManager $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z2;
        long $l0;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: com.android.server.policy.PhoneWindowManager this$0>;

        r1 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.Object access$1800(com.android.server.policy.PhoneWindowManager)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: com.android.server.policy.PhoneWindowManager this$0>;

        $z0 = staticinvoke <com.android.server.policy.PhoneWindowManager: boolean access$1900(com.android.server.policy.PhoneWindowManager)>($r4);

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: com.android.server.policy.PhoneWindowManager this$0>;

        staticinvoke <com.android.server.policy.PhoneWindowManager: boolean access$2000(com.android.server.policy.PhoneWindowManager,int,boolean,java.lang.String)>($r5, 1, 0, "Wake Up");

        $r6 = r0.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: com.android.server.policy.PhoneWindowManager this$0>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r7 = r0.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: com.android.server.policy.PhoneWindowManager this$0>;

        $z2 = staticinvoke <com.android.server.policy.PhoneWindowManager: boolean access$2100(com.android.server.policy.PhoneWindowManager)>($r7);

        staticinvoke <com.android.server.policy.PhoneWindowManager: boolean access$2200(com.android.server.policy.PhoneWindowManager,long,boolean,int,java.lang.String)>($r6, $l0, $z2, 4, "android.policy:GESTURE");

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
