public class com.android.server.policy.PhoneWindowManager extends java.lang.Object implements com.android.server.policy.WindowManagerPolicy
{
    private static final int BRIGHTNESS_STEPS;
    private static final long BUGREPORT_TV_GESTURE_TIMEOUT_MILLIS;
    static final boolean DEBUG_INPUT;
    static final boolean DEBUG_KEYGUARD;
    static final boolean DEBUG_SPLASH_SCREEN;
    static final boolean DEBUG_WAKEUP;
    static final int DOUBLE_TAP_HOME_NOTHING;
    static final int DOUBLE_TAP_HOME_RECENT_SYSTEM_UI;
    static final boolean ENABLE_DESK_DOCK_HOME_CAPTURE;
    static final boolean ENABLE_VR_HEADSET_HOME_CAPTURE;
    private static final float KEYGUARD_SCREENSHOT_CHORD_DELAY_MULTIPLIER;
    static final int LAST_LONG_PRESS_HOME_BEHAVIOR;
    static final int LONG_PRESS_BACK_GO_TO_VOICE_ASSIST;
    static final int LONG_PRESS_BACK_NOTHING;
    static final int LONG_PRESS_HOME_ALL_APPS;
    static final int LONG_PRESS_HOME_ASSIST;
    static final int LONG_PRESS_HOME_NOTHING;
    static final int LONG_PRESS_POWER_ASSISTANT;
    static final int LONG_PRESS_POWER_GLOBAL_ACTIONS;
    static final int LONG_PRESS_POWER_GO_TO_VOICE_ASSIST;
    static final int LONG_PRESS_POWER_NOTHING;
    static final int LONG_PRESS_POWER_SHUT_OFF;
    static final int LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM;
    private static final int MSG_ACCESSIBILITY_SHORTCUT;
    private static final int MSG_ACCESSIBILITY_TV;
    private static final int MSG_BACK_LONG_PRESS;
    private static final int MSG_BUGREPORT_TV;
    private static final int MSG_DISPATCH_BACK_KEY_TO_AUTOFILL;
    private static final int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK;
    private static final int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK;
    private static final int MSG_DISPATCH_SHOW_GLOBAL_ACTIONS;
    private static final int MSG_DISPATCH_SHOW_RECENTS;
    private static final int MSG_HANDLE_ALL_APPS;
    private static final int MSG_HIDE_BOOT_MESSAGE;
    private static final int MSG_KEYGUARD_DRAWN_COMPLETE;
    private static final int MSG_KEYGUARD_DRAWN_TIMEOUT;
    private static final int MSG_LAUNCH_ASSIST;
    private static final int MSG_LAUNCH_ASSIST_LONG_PRESS;
    private static final int MSG_LAUNCH_VOICE_ASSIST_WITH_WAKE_LOCK;
    private static final int MSG_POWER_DELAYED_PRESS;
    private static final int MSG_POWER_LONG_PRESS;
    private static final int MSG_POWER_VERY_LONG_PRESS;
    private static final int MSG_RINGER_TOGGLE_CHORD;
    private static final int MSG_SHOW_PICTURE_IN_PICTURE_MENU;
    private static final int MSG_SYSTEM_KEY_PRESS;
    private static final int MSG_WINDOW_MANAGER_DRAWN_COMPLETE;
    static final int MULTI_PRESS_POWER_BRIGHTNESS_BOOST;
    static final int MULTI_PRESS_POWER_NOTHING;
    static final int MULTI_PRESS_POWER_THEATER_MODE;
    static final int PENDING_KEY_NULL;
    private static final int POWER_BUTTON_SUPPRESSION_DELAY_DEFAULT_MILLIS;
    private static final long SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS;
    static final int SHORT_PRESS_POWER_CLOSE_IME_OR_GO_HOME;
    static final int SHORT_PRESS_POWER_GO_HOME;
    static final int SHORT_PRESS_POWER_GO_TO_SLEEP;
    static final int SHORT_PRESS_POWER_NOTHING;
    static final int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP;
    static final int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP_AND_GO_HOME;
    static final int SHORT_PRESS_SLEEP_GO_TO_SLEEP;
    static final int SHORT_PRESS_SLEEP_GO_TO_SLEEP_AND_GO_HOME;
    static final int SHORT_PRESS_WINDOW_NOTHING;
    static final int SHORT_PRESS_WINDOW_PICTURE_IN_PICTURE;
    static final boolean SHOW_SPLASH_SCREENS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_ASSIST;
    public static final java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_HOME_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_SCREENSHOT;
    static final java.lang.String TAG;
    public static final int TOAST_WINDOW_TIMEOUT;
    static final int VERY_LONG_PRESS_POWER_GLOBAL_ACTIONS;
    static final int VERY_LONG_PRESS_POWER_NOTHING;
    private static final android.media.AudioAttributes VIBRATION_ATTRIBUTES;
    static final int WAITING_FOR_DRAWN_TIMEOUT;
    private static final int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK;
    static final boolean localLOGV;
    static android.util.SparseArray sApplicationLaunchKeyCategories;
    private boolean mA11yShortcutChordVolumeUpKeyConsumed;
    private long mA11yShortcutChordVolumeUpKeyTime;
    private boolean mA11yShortcutChordVolumeUpKeyTriggered;
    android.view.accessibility.AccessibilityManager mAccessibilityManager;
    private com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController;
    private boolean mAccessibilityTvKey1Pressed;
    private boolean mAccessibilityTvKey2Pressed;
    private boolean mAccessibilityTvScheduled;
    android.app.ActivityManagerInternal mActivityManagerInternal;
    com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal;
    private java.util.HashSet mAllowLockscreenWhenOnDisplays;
    boolean mAllowStartActivityForLongPressOnPowerDuringSetup;
    private boolean mAllowTheaterModeWakeFromCameraLens;
    private boolean mAllowTheaterModeWakeFromKey;
    private boolean mAllowTheaterModeWakeFromLidSwitch;
    private boolean mAllowTheaterModeWakeFromMotion;
    private boolean mAllowTheaterModeWakeFromMotionWhenNotDreaming;
    private boolean mAllowTheaterModeWakeFromPowerKey;
    private boolean mAllowTheaterModeWakeFromWakeGesture;
    private boolean mAodShowing;
    android.app.AppOpsManager mAppOpsManager;
    android.media.AudioManagerInternal mAudioManagerInternal;
    android.view.autofill.AutofillManagerInternal mAutofillManagerInternal;
    volatile boolean mBackKeyHandled;
    volatile boolean mBeganFromNonInteractive;
    boolean mBootMessageNeedsHiding;
    android.app.ProgressDialog mBootMsgDialog;
    android.os.PowerManager$WakeLock mBroadcastWakeLock;
    private boolean mBugreportTvKey1Pressed;
    private boolean mBugreportTvKey2Pressed;
    private boolean mBugreportTvScheduled;
    com.android.server.policy.BurnInProtectionHelper mBurnInProtectionHelper;
    long[] mCalendarDateVibePattern;
    volatile boolean mCameraGestureTriggeredDuringGoingToSleep;
    int mCameraLensCoverState;
    android.content.Intent mCarDockIntent;
    boolean mConsumeSearchKeyUp;
    android.content.Context mContext;
    private int mCurrentUserId;
    android.view.Display mDefaultDisplay;
    com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy;
    com.android.server.wm.DisplayRotation mDefaultDisplayRotation;
    android.content.Intent mDeskDockIntent;
    private volatile boolean mDismissImeOnBackKeyPressed;
    private com.android.server.policy.DisplayFoldController mDisplayFoldController;
    private final android.util.SparseArray mDisplayHomeButtonHandlers;
    android.hardware.display.DisplayManager mDisplayManager;
    android.content.BroadcastReceiver mDockReceiver;
    int mDoublePressOnPowerBehavior;
    private int mDoubleTapOnHomeBehavior;
    android.service.dreams.DreamManagerInternal mDreamManagerInternal;
    android.content.BroadcastReceiver mDreamReceiver;
    private boolean mEnableCarDockHomeCapture;
    boolean mEnableShiftMenuBugReports;
    volatile boolean mEndCallKeyHandled;
    private final java.lang.Runnable mEndCallLongPress;
    int mEndcallBehavior;
    private final android.util.SparseArray mFallbackActions;
    com.android.server.policy.GlobalActions mGlobalActions;
    private com.android.server.policy.GlobalKeyManager mGlobalKeyManager;
    private boolean mGoToSleepOnButtonPressTheaterMode;
    volatile boolean mGoingToSleep;
    private android.os.UEventObserver mHDMIObserver;
    private boolean mHandleVolumeKeysInWM;
    android.os.Handler mHandler;
    boolean mHapticTextHandleEnabled;
    private boolean mHasFeatureAuto;
    private boolean mHasFeatureHdmiCec;
    private boolean mHasFeatureLeanback;
    private boolean mHasFeatureWatch;
    boolean mHasSoftInput;
    boolean mHaveBuiltInKeyboard;
    boolean mHavePendingMediaKeyRepeatWithWakeLock;
    com.android.server.policy.PhoneWindowManager$HdmiControl mHdmiControl;
    android.content.Intent mHomeIntent;
    int mIncallBackBehavior;
    int mIncallPowerBehavior;
    int mInitialMetaState;
    android.hardware.input.InputManagerInternal mInputManagerInternal;
    com.android.server.inputmethod.InputMethodManagerInternal mInputMethodManagerInternal;
    private boolean mKeyguardBound;
    private com.android.server.policy.WindowManagerPolicy$WindowState mKeyguardCandidate;
    com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate;
    final com.android.server.policy.keyguard.KeyguardServiceDelegate$DrawnListener mKeyguardDrawnCallback;
    private boolean mKeyguardDrawnOnce;
    volatile boolean mKeyguardOccluded;
    private boolean mKeyguardOccludedChanged;
    boolean mLanguageSwitchKeyPressed;
    private boolean mLidControlsDisplayFold;
    int mLidKeyboardAccessibility;
    int mLidNavigationAccessibility;
    private final java.lang.Object mLock;
    int mLockScreenTimeout;
    boolean mLockScreenTimerActive;
    private final com.android.server.policy.LogDecelerateInterpolator mLogDecelerateInterpolator;
    com.android.internal.logging.MetricsLogger mLogger;
    int mLongPressOnBackBehavior;
    private int mLongPressOnHomeBehavior;
    int mLongPressOnPowerBehavior;
    long[] mLongPressVibePattern;
    int mMetaState;
    android.content.BroadcastReceiver mMultiuserReceiver;
    volatile boolean mNavBarVirtualKeyHapticFeedbackEnabled;
    android.content.pm.PackageManager mPackageManager;
    boolean mPendingCapsLockToggle;
    private boolean mPendingKeyguardOccluded;
    boolean mPendingMetaAction;
    volatile int mPendingWakeKey;
    private boolean mPerDisplayFocusEnabled;
    final android.service.vr.IPersistentVrStateCallbacks mPersistentVrModeListener;
    volatile boolean mPictureInPictureVisible;
    private java.lang.Runnable mPossibleVeryLongPressReboot;
    private int mPowerButtonSuppressionDelayMillis;
    volatile boolean mPowerKeyHandled;
    volatile int mPowerKeyPressCounter;
    android.os.PowerManager$WakeLock mPowerKeyWakeLock;
    android.os.PowerManager mPowerManager;
    android.os.PowerManagerInternal mPowerManagerInternal;
    boolean mPreloadedRecentApps;
    int mRecentAppsHeldModifiers;
    volatile boolean mRecentsVisible;
    volatile boolean mRequestedOrGoingToSleep;
    private int mRingerToggleChord;
    boolean mSafeMode;
    long[] mSafeModeEnabledVibePattern;
    com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout;
    com.android.server.wm.ActivityTaskManagerInternal$SleepToken mScreenOffSleepToken;
    private boolean mScreenshotChordEnabled;
    private long mScreenshotChordPowerKeyTime;
    private boolean mScreenshotChordPowerKeyTriggered;
    private boolean mScreenshotChordVolumeDownKeyConsumed;
    private long mScreenshotChordVolumeDownKeyTime;
    private boolean mScreenshotChordVolumeDownKeyTriggered;
    private final com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable;
    boolean mSearchKeyShortcutPending;
    android.app.SearchManager mSearchManager;
    final java.lang.Object mServiceAquireLock;
    com.android.server.policy.PhoneWindowManager$SettingsObserver mSettingsObserver;
    int mShortPressOnPowerBehavior;
    int mShortPressOnSleepBehavior;
    int mShortPressOnWindowBehavior;
    private android.util.LongSparseArray mShortcutKeyServices;
    com.android.server.policy.ShortcutManager mShortcutManager;
    com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal;
    com.android.internal.statusbar.IStatusBarService mStatusBarService;
    private boolean mSupportLongPressPowerWhenNonInteractive;
    boolean mSystemBooted;
    boolean mSystemNavigationKeysEnabled;
    boolean mSystemReady;
    private final android.util.MutableBoolean mTmpBoolean;
    private volatile int mTopFocusedDisplayId;
    int mTriplePressOnPowerBehavior;
    int mUiMode;
    android.app.IUiModeManager mUiModeManager;
    boolean mUseTvRouting;
    int mVeryLongPressOnPowerBehavior;
    int mVeryLongPressTimeout;
    android.os.Vibrator mVibrator;
    android.content.Intent mVrHeadsetHomeIntent;
    volatile com.android.server.vr.VrManagerInternal mVrManagerInternal;
    boolean mWakeGestureEnabledSetting;
    com.android.server.policy.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener;
    boolean mWakeOnAssistKeyPress;
    boolean mWakeOnBackKeyPress;
    boolean mWakeOnDpadKeyPress;
    android.view.IWindowManager mWindowManager;
    final java.lang.Runnable mWindowManagerDrawCallback;
    com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs;
    com.android.server.wm.WindowManagerInternal mWindowManagerInternal;

    static void <clinit>()
    {
        android.media.AudioAttributes$Builder $r1, $r2, $r3;
        android.media.AudioAttributes $r4;
        android.util.SparseArray $r5, $r6, $r7, $r8, $r9, $r10;
        int[] $r11;

        <com.android.server.policy.PhoneWindowManager: boolean localLOGV> = 0;

        <com.android.server.policy.PhoneWindowManager: int WAITING_FOR_DRAWN_TIMEOUT> = 1000;

        <com.android.server.policy.PhoneWindowManager: int VERY_LONG_PRESS_POWER_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int VERY_LONG_PRESS_POWER_GLOBAL_ACTIONS> = 1;

        <com.android.server.policy.PhoneWindowManager: int TOAST_WINDOW_TIMEOUT> = 3500;

        <com.android.server.policy.PhoneWindowManager: java.lang.String TAG> = "WindowManager";

        <com.android.server.policy.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_SCREENSHOT> = "screenshot";

        <com.android.server.policy.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS> = "recentapps";

        <com.android.server.policy.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_KEY> = "reason";

        <com.android.server.policy.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_HOME_KEY> = "homekey";

        <com.android.server.policy.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS> = "globalactions";

        <com.android.server.policy.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_ASSIST> = "assist";

        <com.android.server.policy.PhoneWindowManager: boolean SHOW_SPLASH_SCREENS> = 1;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_WINDOW_PICTURE_IN_PICTURE> = 1;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_WINDOW_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_SLEEP_GO_TO_SLEEP_AND_GO_HOME> = 1;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_SLEEP_GO_TO_SLEEP> = 0;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP_AND_GO_HOME> = 3;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP> = 2;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_POWER_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_POWER_GO_TO_SLEEP> = 1;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_POWER_GO_HOME> = 4;

        <com.android.server.policy.PhoneWindowManager: int SHORT_PRESS_POWER_CLOSE_IME_OR_GO_HOME> = 5;

        <com.android.server.policy.PhoneWindowManager: long SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS> = 150L;

        <com.android.server.policy.PhoneWindowManager: int POWER_BUTTON_SUPPRESSION_DELAY_DEFAULT_MILLIS> = 800;

        <com.android.server.policy.PhoneWindowManager: int PENDING_KEY_NULL> = -1;

        <com.android.server.policy.PhoneWindowManager: int MULTI_PRESS_POWER_THEATER_MODE> = 1;

        <com.android.server.policy.PhoneWindowManager: int MULTI_PRESS_POWER_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int MULTI_PRESS_POWER_BRIGHTNESS_BOOST> = 2;

        <com.android.server.policy.PhoneWindowManager: int MSG_WINDOW_MANAGER_DRAWN_COMPLETE> = 7;

        <com.android.server.policy.PhoneWindowManager: int MSG_SYSTEM_KEY_PRESS> = 21;

        <com.android.server.policy.PhoneWindowManager: int MSG_SHOW_PICTURE_IN_PICTURE_MENU> = 15;

        <com.android.server.policy.PhoneWindowManager: int MSG_RINGER_TOGGLE_CHORD> = 26;

        <com.android.server.policy.PhoneWindowManager: int MSG_POWER_VERY_LONG_PRESS> = 25;

        <com.android.server.policy.PhoneWindowManager: int MSG_POWER_LONG_PRESS> = 14;

        <com.android.server.policy.PhoneWindowManager: int MSG_POWER_DELAYED_PRESS> = 13;

        <com.android.server.policy.PhoneWindowManager: int MSG_LAUNCH_VOICE_ASSIST_WITH_WAKE_LOCK> = 12;

        <com.android.server.policy.PhoneWindowManager: int MSG_LAUNCH_ASSIST_LONG_PRESS> = 24;

        <com.android.server.policy.PhoneWindowManager: int MSG_LAUNCH_ASSIST> = 23;

        <com.android.server.policy.PhoneWindowManager: int MSG_KEYGUARD_DRAWN_TIMEOUT> = 6;

        <com.android.server.policy.PhoneWindowManager: int MSG_KEYGUARD_DRAWN_COMPLETE> = 5;

        <com.android.server.policy.PhoneWindowManager: int MSG_HIDE_BOOT_MESSAGE> = 11;

        <com.android.server.policy.PhoneWindowManager: int MSG_HANDLE_ALL_APPS> = 22;

        <com.android.server.policy.PhoneWindowManager: int MSG_DISPATCH_SHOW_RECENTS> = 9;

        <com.android.server.policy.PhoneWindowManager: int MSG_DISPATCH_SHOW_GLOBAL_ACTIONS> = 10;

        <com.android.server.policy.PhoneWindowManager: int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK> = 3;

        <com.android.server.policy.PhoneWindowManager: int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK> = 4;

        <com.android.server.policy.PhoneWindowManager: int MSG_DISPATCH_BACK_KEY_TO_AUTOFILL> = 20;

        <com.android.server.policy.PhoneWindowManager: int MSG_BUGREPORT_TV> = 18;

        <com.android.server.policy.PhoneWindowManager: int MSG_BACK_LONG_PRESS> = 16;

        <com.android.server.policy.PhoneWindowManager: int MSG_ACCESSIBILITY_TV> = 19;

        <com.android.server.policy.PhoneWindowManager: int MSG_ACCESSIBILITY_SHORTCUT> = 17;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM> = 3;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_POWER_SHUT_OFF> = 2;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_POWER_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_POWER_GO_TO_VOICE_ASSIST> = 4;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_POWER_GLOBAL_ACTIONS> = 1;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_POWER_ASSISTANT> = 5;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_HOME_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_HOME_ASSIST> = 2;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_HOME_ALL_APPS> = 1;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_BACK_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: int LONG_PRESS_BACK_GO_TO_VOICE_ASSIST> = 1;

        <com.android.server.policy.PhoneWindowManager: int LAST_LONG_PRESS_HOME_BEHAVIOR> = 2;

        <com.android.server.policy.PhoneWindowManager: float KEYGUARD_SCREENSHOT_CHORD_DELAY_MULTIPLIER> = 2.5F;

        <com.android.server.policy.PhoneWindowManager: boolean ENABLE_VR_HEADSET_HOME_CAPTURE> = 1;

        <com.android.server.policy.PhoneWindowManager: boolean ENABLE_DESK_DOCK_HOME_CAPTURE> = 0;

        <com.android.server.policy.PhoneWindowManager: int DOUBLE_TAP_HOME_RECENT_SYSTEM_UI> = 1;

        <com.android.server.policy.PhoneWindowManager: int DOUBLE_TAP_HOME_NOTHING> = 0;

        <com.android.server.policy.PhoneWindowManager: boolean DEBUG_WAKEUP> = 0;

        <com.android.server.policy.PhoneWindowManager: boolean DEBUG_SPLASH_SCREEN> = 0;

        <com.android.server.policy.PhoneWindowManager: boolean DEBUG_KEYGUARD> = 0;

        <com.android.server.policy.PhoneWindowManager: boolean DEBUG_INPUT> = 0;

        <com.android.server.policy.PhoneWindowManager: long BUGREPORT_TV_GESTURE_TIMEOUT_MILLIS> = 1000L;

        <com.android.server.policy.PhoneWindowManager: int BRIGHTNESS_STEPS> = 10;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>(4);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(13);

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        <com.android.server.policy.PhoneWindowManager: android.media.AudioAttributes VIBRATION_ATTRIBUTES> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories> = $r5;

        virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(64, "android.intent.category.APP_BROWSER");

        $r6 = <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r6.<android.util.SparseArray: void append(int,java.lang.Object)>(65, "android.intent.category.APP_EMAIL");

        $r7 = <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r7.<android.util.SparseArray: void append(int,java.lang.Object)>(207, "android.intent.category.APP_CONTACTS");

        $r8 = <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>(208, "android.intent.category.APP_CALENDAR");

        $r9 = <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r9.<android.util.SparseArray: void append(int,java.lang.Object)>(209, "android.intent.category.APP_MUSIC");

        $r10 = <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        virtualinvoke $r10.<android.util.SparseArray: void append(int,java.lang.Object)>(210, "android.intent.category.APP_CALCULATOR");

        $r11 = newarray (int)[2];

        $r11[0] = 2003;

        $r11[1] = 2010;

        <com.android.server.policy.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK> = $r11;

        return;
    }

    public void <init>()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object $r1, $r2;
        android.util.LongSparseArray $r3;
        com.android.server.policy.PhoneWindowManager$1 $r4;
        com.android.server.policy.PhoneWindowManager$2 $r5;
        java.util.HashSet $r6;
        android.util.SparseArray $r7, $r15;
        com.android.server.policy.LogDecelerateInterpolator $r8;
        android.util.MutableBoolean $r9;
        com.android.server.policy.PhoneWindowManager$3 $r10;
        com.android.server.policy.PhoneWindowManager$4 $r11;
        com.android.server.policy.PhoneWindowManager$5 $r12;
        com.android.server.policy.PhoneWindowManager$6 $r13;
        com.android.server.policy.PhoneWindowManager$ScreenshotRunnable $r14;
        com.android.server.policy.PhoneWindowManager$10 $r16;
        com.android.server.policy.PhoneWindowManager$11 $r17;
        com.android.server.policy.PhoneWindowManager$12 $r18;
        com.android.server.policy.PhoneWindowManager$ScreenLockTimeout $r19;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mServiceAquireLock> = $r2;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = 0;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowState mKeyguardCandidate> = null;

        $r3 = new android.util.LongSparseArray;

        specialinvoke $r3.<android.util.LongSparseArray: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: android.util.LongSparseArray mShortcutKeyServices> = $r3;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableCarDockHomeCapture> = 1;

        $r4 = new com.android.server.policy.PhoneWindowManager$1;

        specialinvoke $r4.<com.android.server.policy.PhoneWindowManager$1: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mWindowManagerDrawCallback> = $r4;

        $r5 = new com.android.server.policy.PhoneWindowManager$2;

        specialinvoke $r5.<com.android.server.policy.PhoneWindowManager$2: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate$DrawnListener mKeyguardDrawnCallback> = $r5;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mNavBarVirtualKeyHapticFeedbackEnabled> = 1;

        r0.<com.android.server.policy.PhoneWindowManager: int mPendingWakeKey> = -1;

        r0.<com.android.server.policy.PhoneWindowManager: int mCameraLensCoverState> = -1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHasSoftInput> = 0;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: java.util.HashSet mAllowLockscreenWhenOnDisplays> = $r6;

        r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord> = 0;

        $r7 = new android.util.SparseArray;

        specialinvoke $r7.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mFallbackActions> = $r7;

        $r8 = new com.android.server.policy.LogDecelerateInterpolator;

        specialinvoke $r8.<com.android.server.policy.LogDecelerateInterpolator: void <init>(int,int)>(100, 0);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.LogDecelerateInterpolator mLogDecelerateInterpolator> = $r8;

        $r9 = new android.util.MutableBoolean;

        specialinvoke $r9.<android.util.MutableBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.policy.PhoneWindowManager: android.util.MutableBoolean mTmpBoolean> = $r9;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPerDisplayFocusEnabled> = 0;

        r0.<com.android.server.policy.PhoneWindowManager: int mTopFocusedDisplayId> = -1;

        r0.<com.android.server.policy.PhoneWindowManager: int mPowerButtonSuppressionDelayMillis> = 800;

        $r10 = new com.android.server.policy.PhoneWindowManager$3;

        specialinvoke $r10.<com.android.server.policy.PhoneWindowManager$3: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: android.os.UEventObserver mHDMIObserver> = $r10;

        $r11 = new com.android.server.policy.PhoneWindowManager$4;

        specialinvoke $r11.<com.android.server.policy.PhoneWindowManager$4: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: android.service.vr.IPersistentVrStateCallbacks mPersistentVrModeListener> = $r11;

        $r12 = new com.android.server.policy.PhoneWindowManager$5;

        specialinvoke $r12.<com.android.server.policy.PhoneWindowManager$5: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mPossibleVeryLongPressReboot> = $r12;

        $r13 = new com.android.server.policy.PhoneWindowManager$6;

        specialinvoke $r13.<com.android.server.policy.PhoneWindowManager$6: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mEndCallLongPress> = $r13;

        $r14 = new com.android.server.policy.PhoneWindowManager$ScreenshotRunnable;

        specialinvoke $r14.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void <init>(com.android.server.policy.PhoneWindowManager,com.android.server.policy.PhoneWindowManager$1)>(r0, null);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable> = $r14;

        $r15 = new android.util.SparseArray;

        specialinvoke $r15.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mDisplayHomeButtonHandlers> = $r15;

        $r16 = new com.android.server.policy.PhoneWindowManager$10;

        specialinvoke $r16.<com.android.server.policy.PhoneWindowManager$10: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.BroadcastReceiver mDockReceiver> = $r16;

        $r17 = new com.android.server.policy.PhoneWindowManager$11;

        specialinvoke $r17.<com.android.server.policy.PhoneWindowManager$11: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.BroadcastReceiver mDreamReceiver> = $r17;

        $r18 = new com.android.server.policy.PhoneWindowManager$12;

        specialinvoke $r18.<com.android.server.policy.PhoneWindowManager$12: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.BroadcastReceiver mMultiuserReceiver> = $r18;

        r0.<com.android.server.policy.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog> = null;

        $r19 = new com.android.server.policy.PhoneWindowManager$ScreenLockTimeout;

        specialinvoke $r19.<com.android.server.policy.PhoneWindowManager$ScreenLockTimeout: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout> = $r19;

        return;
    }

    static void access$000(com.android.server.policy.PhoneWindowManager, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void showRecentApps(boolean)>(z0);

        return;
    }

    static void access$100(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishKeyguardDrawn()>();

        return;
    }

    static void access$1000(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void showPictureInPictureMenuInternal()>();

        return;
    }

    static void access$1100(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void backLongPress()>();

        return;
    }

    static void access$1200(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void accessibilityShortcutActivated()>();

        return;
    }

    static void access$1300(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void requestBugreportForTv()>();

        return;
    }

    static com.android.internal.accessibility.AccessibilityShortcutController access$1400(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.internal.accessibility.AccessibilityShortcutController $r1;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController>;

        return $r1;
    }

    static void access$1500(com.android.server.policy.PhoneWindowManager, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendSystemKeyToStatusBar(int)>(i0);

        return;
    }

    static void access$1600(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchAllAppsAction()>();

        return;
    }

    static void access$1700(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void handleRingerChordGesture()>();

        return;
    }

    static java.lang.Object access$1800(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$1900(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean shouldEnableWakeGestureLp()>();

        return $z0;
    }

    static void access$200(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishWindowsDrawn()>();

        return;
    }

    static boolean access$2000(com.android.server.policy.PhoneWindowManager, int, boolean, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean z0, $z1;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(i0, z0, r1);

        return $z1;
    }

    static boolean access$2100(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromWakeGesture>;

        return $z0;
    }

    static boolean access$2200(com.android.server.policy.PhoneWindowManager, long, boolean, int, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        boolean z0, $z1;
        int i1;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>(l0, z0, i1, r1);

        return $z1;
    }

    static void access$2700(com.android.server.policy.PhoneWindowManager, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void handleShortPressOnHome(int)>(i0);

        return;
    }

    static void access$2800(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPreloadRecentApps()>();

        return;
    }

    static int access$2900(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        return $i0;
    }

    static void access$300(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void handleHideBootMessage()>();

        return;
    }

    static int[] access$3000()
    {
        int[] $r0;

        $r0 = <com.android.server.policy.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        return $r0;
    }

    static void access$3100(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void preloadRecentApps()>();

        return;
    }

    static void access$3200(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void toggleRecentApps()>();

        return;
    }

    static int access$3300(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        return $i0;
    }

    static int access$3500(com.android.server.policy.PhoneWindowManager, int, long)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i2;
        long l1;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $i2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int handleStartTransitionForKeyguardLw(int,long)>(i0, l1);

        return $i2;
    }

    static void access$400(com.android.server.policy.PhoneWindowManager, java.lang.String, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchAssistAction(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$500(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchAssistLongPressAction()>();

        return;
    }

    static void access$600(com.android.server.policy.PhoneWindowManager, long, boolean, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        boolean z0;
        int i1;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerPress(long,boolean,int)>(l0, z0, i1);

        return;
    }

    static void access$700(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishPowerKeyPress()>();

        return;
    }

    static void access$800(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerLongPress()>();

        return;
    }

    static void access$900(com.android.server.policy.PhoneWindowManager)
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @parameter0: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerVeryLongPress()>();

        return;
    }

    private void accessibilityShortcutActivated()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.internal.accessibility.AccessibilityShortcutController $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController>;

        virtualinvoke $r1.<com.android.internal.accessibility.AccessibilityShortcutController: void performAccessibilityShortcut()>();

        return;
    }

    private void addSplashscreenContent(com.android.internal.policy.PhoneWindow, android.content.Context)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.internal.policy.PhoneWindow r1;
        int i0;
        int[] $r2;
        android.view.View $r3;
        android.content.Context r4;
        android.content.res.TypedArray r5;
        android.graphics.drawable.Drawable r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow;

        r4 := @parameter1: android.content.Context;

        $r2 = <com.android.internal.R$styleable: int[] Window>;

        r5 = virtualinvoke r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2);

        i0 = virtualinvoke r5.<android.content.res.TypedArray: int getResourceId(int,int)>(47, 0);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        if i0 != 0 goto label1;

        return;

     label1:
        r6 = virtualinvoke r4.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        if r6 != null goto label2;

        return;

     label2:
        $r3 = new android.view.View;

        specialinvoke $r3.<android.view.View: void <init>(android.content.Context)>(r4);

        virtualinvoke $r3.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>(r6);

        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setContentView(android.view.View)>($r3);

        return;
    }

    private void applyLidSwitchState()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1;
        com.android.server.wm.DisplayPolicy $r2;
        long $l0;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r3;
        java.lang.Throwable $r4;
        int i1, i2;
        com.android.server.policy.DisplayFoldController r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        i1 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: int getLidState()>();

        z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mLidControlsDisplayFold>;

        z1 = 1;

        if z0 == 0 goto label03;

        r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r5 == null goto label03;

        if i1 != 0 goto label01;

        goto label02;

     label01:
        z1 = 0;

     label02:
        virtualinvoke r5.<com.android.server.policy.DisplayFoldController: void requestDeviceFolded(boolean)>(z1);

        goto label06;

     label03:
        if i1 != 0 goto label06;

        i2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getLidBehavior()>();

        if i2 == 1 goto label05;

        if i2 == 2 goto label04;

        goto label06;

     label04:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: void lockDeviceNow()>();

        goto label06;

     label05:
        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void goToSleep(long,int,int)>($l0, 3, 1);

     label06:
        r6 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r6;

     label07:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateWakeGestureListenerLp()>();

        exitmonitor r6;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r6;

     label11:
        throw $r4;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private static void awakenDreams()
    {
        android.os.RemoteException $r0;
        android.service.dreams.IDreamManager r1;

        r1 = staticinvoke <com.android.server.policy.PhoneWindowManager: android.service.dreams.IDreamManager getDreamManager()>();

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.service.dreams.IDreamManager: void awaken()>();

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void backLongPress()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBackKeyHandled> = 1;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnBackBehavior>;

        if $i0 == 1 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchVoiceAssist(boolean)>(0);

     label2:
        return;
    }

    private void bindKeyguard()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        boolean $z0;
        android.content.Context $r3;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardBound>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardBound> = 1;

        exitmonitor r1;

     label4:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r4.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void bindService(android.content.Context)>($r3);

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void cancelPendingAccessibilityShortcutAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(17);

        return;
    }

    private void cancelPendingBackKeyAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBackKeyHandled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBackKeyHandled> = 1;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(16);

     label1:
        return;
    }

    private void cancelPendingPowerKeyAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0, $z1;
        android.os.Handler $r1, $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(14);

     label1:
        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean hasVeryLongPressOnPowerBehavior()>();

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(25);

     label2:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPossibleVeryLongPressReboot()>();

        return;
    }

    private void cancelPendingRingerToggleChordAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(26);

        return;
    }

    private void cancelPendingScreenshotChordAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.PhoneWindowManager$ScreenshotRunnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    private void cancelPossibleVeryLongPressReboot()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mPossibleVeryLongPressReboot>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    private void cancelPreloadRecentApps()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.statusbar.StatusBarManagerInternal r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPreloadedRecentApps>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void cancelPreloadRecentApps()>();

     label1:
        return;
    }

    private void dismissKeyboardShortcutsMenu()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void dismissKeyboardShortcutsMenu()>();

     label1:
        return;
    }

    private void dispatchDirectAudioEvent(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        boolean $z0, $z1, z2, $z3;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, $r12;
        android.hardware.hdmi.HdmiControlManager r8;
        android.hardware.hdmi.HdmiAudioSystemClient r9;
        android.media.IAudioService $r10;
        android.content.Context $r11;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        r8 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: android.hardware.hdmi.HdmiControlManager getHdmiControlManager()>();

        if r8 == null goto label3;

        $z0 = virtualinvoke r8.<android.hardware.hdmi.HdmiControlManager: boolean getSystemAudioMode()>();

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean shouldCecAudioDeviceForwardVolumeKeysSystemAudioModeOff()>();

        if $z1 == 0 goto label3;

        r9 = virtualinvoke r8.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiAudioSystemClient getAudioSystemClient()>();

        if r9 == null goto label3;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        virtualinvoke r9.<android.hardware.hdmi.HdmiAudioSystemClient: void sendKeyEvent(int,boolean)>(i0, z2);

        return;

     label3:
        $r10 = staticinvoke <com.android.server.policy.PhoneWindowManager: android.media.IAudioService getAudioService()>();

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mUseTvRouting>;

        $r11 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r10.<android.media.IAudioService: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>(r1, $z3, $r12, "WindowManager");

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error dispatching volume key in handleVolumeKey for event:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r7, $r3);

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static java.lang.String doubleTapOnHomeBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "DOUBLE_TAP_HOME_RECENT_SYSTEM_UI";

     label2:
        return "DOUBLE_TAP_HOME_NOTHING";
    }

    private static java.lang.String endcallBehaviorToString(int)
    {
        java.lang.StringBuilder $r1;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r2;

        i3 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = i3 & 1;

        if $i0 == 0 goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("home|");

     label1:
        $i1 = i3 & 2;

        if $i1 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sleep|");

     label2:
        i4 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if i4 != 0 goto label3;

        return "<nothing>";

     label3:
        $i2 = i4 - 1;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, $i2);

        return $r2;
    }

    private void finishKeyguardDrawn()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        com.android.server.wm.DisplayPolicy $r3;
        boolean $z0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r4;
        java.lang.Runnable $r5;
        com.android.server.wm.WindowManagerInternal $r6;
        android.os.Handler $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: boolean finishKeyguardDrawn()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r4 == null goto label3;

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r7.<android.os.Handler: void removeMessages(int)>(6);

     label3:
        exitmonitor r1;

     label4:
        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mWindowManagerDrawCallback>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerInternal: void waitForAllWindowsDrawn(java.lang.Runnable,long,int)>($r5, 1000L, -1);

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void finishPowerKeyPress()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBeganFromNonInteractive> = 0;

        r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter> = 0;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mPowerKeyWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mPowerKeyWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        return;
    }

    private void finishScreenTurningOn()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z2, $z3, $z4, z5;
        com.android.server.wm.DisplayRotation $r1;
        com.android.server.wm.DisplayPolicy $r2, $r3, $r4;
        android.view.IWindowManager $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        com.android.server.policy.WindowManagerPolicy$ScreenOnListener r8;
        java.lang.Object r9;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        virtualinvoke $r1.<com.android.server.wm.DisplayRotation: void updateOrientationListener()>();

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        r8 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: com.android.server.policy.WindowManagerPolicy$ScreenOnListener getScreenOnListener()>();

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z2 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: boolean finishScreenTurningOn()>();

        if $z2 != 0 goto label01;

        return;

     label01:
        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(32L, "screenTurningOn", 0);

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        z0 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: boolean isAwake()>();

        r9 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r9;

     label02:
        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardDrawnOnce>;

        if $z3 != 0 goto label08;

     label03:
        if z0 == 0 goto label08;

     label04:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardDrawnOnce> = 1;

     label05:
        z5 = 1;

     label06:
        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBootMessageNeedsHiding>;

        if $z4 == 0 goto label09;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBootMessageNeedsHiding> = 0;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void hideBootMessages()>();

     label07:
        z5 = 1;

        goto label09;

     label08:
        z5 = 0;

     label09:
        exitmonitor r9;

     label10:
        if r8 == null goto label11;

        interfaceinvoke r8.<com.android.server.policy.WindowManagerPolicy$ScreenOnListener: void onScreenOn()>();

     label11:
        if z5 == 0 goto label15;

     label12:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r5.<android.view.IWindowManager: void enableScreenIfNeeded()>();

     label13:
        goto label15;

     label14:
        $r7 := @caughtexception;

     label15:
        return;

     label16:
        $r6 := @caughtexception;

     label17:
        exitmonitor r9;

     label18:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void finishWindowsDrawn()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.wm.DisplayPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean finishWindowsDrawn()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishScreenTurningOn()>();

        return;
    }

    private long getAccessibilityShortcutTimeout()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.ViewConfiguration r1;
        android.content.Context $r2, $r3;
        android.content.ContentResolver $r4;
        int $i0, $i1;
        long l2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r1 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r4, "accessibility_shortcut_dialog_shown", 0, $i0);

        if $i1 != 0 goto label1;

        l2 = virtualinvoke r1.<android.view.ViewConfiguration: long getAccessibilityShortcutKeyTimeout()>();

        goto label2;

     label1:
        l2 = virtualinvoke r1.<android.view.ViewConfiguration: long getAccessibilityShortcutKeyTimeoutAfterConfirmation()>();

     label2:
        return l2;
    }

    static android.media.IAudioService getAudioService()
    {
        android.media.IAudioService r0;
        android.os.IBinder $r1;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("audio");

        r0 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Unable to find IAudioService interface.");

     label1:
        return r0;
    }

    private android.content.Context getDisplayContext(android.content.Context, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context r1, $r4;
        int i0;
        android.view.Display r2;
        android.hardware.display.DisplayManager $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return r1;

     label1:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.hardware.display.DisplayManager mDisplayManager>;

        r2 = virtualinvoke $r3.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if r2 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r1.<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>(r2);

        return $r4;
    }

    static android.service.dreams.IDreamManager getDreamManager()
    {
        android.os.IBinder $r0;
        android.service.dreams.IDreamManager $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("dreams");

        $r1 = staticinvoke <android.service.dreams.IDreamManager$Stub: android.service.dreams.IDreamManager asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    private com.android.server.policy.PhoneWindowManager$HdmiControl getHdmiControl()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.hardware.hdmi.HdmiControlManager r1;
        com.android.server.policy.PhoneWindowManager$HdmiControl $r2, $r5, $r7;
        boolean $z0;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.hardware.hdmi.HdmiPlaybackClient r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$HdmiControl mHdmiControl>;

        if $r2 != null goto label3;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureHdmiCec>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("hdmi_control");

        r1 = (android.hardware.hdmi.HdmiControlManager) $r4;

        r6 = null;

        if r1 == null goto label2;

        r6 = virtualinvoke r1.<android.hardware.hdmi.HdmiControlManager: android.hardware.hdmi.HdmiPlaybackClient getPlaybackClient()>();

     label2:
        $r5 = new com.android.server.policy.PhoneWindowManager$HdmiControl;

        specialinvoke $r5.<com.android.server.policy.PhoneWindowManager$HdmiControl: void <init>(android.hardware.hdmi.HdmiPlaybackClient,com.android.server.policy.PhoneWindowManager$1)>(r6, null);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$HdmiControl mHdmiControl> = $r5;

     label3:
        $r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$HdmiControl mHdmiControl>;

        return $r7;
    }

    private android.hardware.hdmi.HdmiControlManager getHdmiControlManager()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.hardware.hdmi.HdmiControlManager $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureHdmiCec>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/hdmi/HdmiControlManager;");

        $r3 = (android.hardware.hdmi.HdmiControlManager) $r2;

        return $r3;
    }

    private long getKeyguardDrawnTimeout()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object $r1;
        com.android.server.SystemServiceManager $r2;
        boolean $z0;
        long l0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/SystemServiceManager;");

        $r2 = (com.android.server.SystemServiceManager) $r1;

        $z0 = virtualinvoke $r2.<com.android.server.SystemServiceManager: boolean isBootCompleted()>();

        if $z0 == 0 goto label1;

        l0 = 1000L;

        goto label2;

     label1:
        l0 = 5000L;

     label2:
        return l0;
    }

    private int getLidBehavior()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "lid_behavior", 0);

        return $i0;
    }

    static long[] getLongIntArray(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0;
        int[] $r1;
        long[] $r2;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.res.Resources: int[] getIntArray(int)>(i0);

        $r2 = staticinvoke <com.android.internal.util.ArrayUtils: long[] convertToLongArray(int[])>($r1);

        return $r2;
    }

    private int getMaxMultiPressPowerCount()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0, $i1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mTriplePressOnPowerBehavior>;

        if $i0 == 0 goto label1;

        return 3;

     label1:
        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mDoublePressOnPowerBehavior>;

        if $i1 == 0 goto label2;

        return 2;

     label2:
        return 1;
    }

    private int getResolvedLongPressOnPowerBehavior()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = staticinvoke <android.os.FactoryTest: boolean isLongPressOnPowerOffEnabled()>();

        if $z0 == 0 goto label1;

        return 3;

     label1:
        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnPowerBehavior>;

        return $i0;
    }

    private long getRingerToggleChordDelay()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;
        long $l1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getTapTimeout()>();

        $l1 = (long) $i0;

        return $l1;
    }

    private long getScreenshotChordLongPressDelay()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r1;
        boolean $z0;
        android.content.Context $r2, $r4;
        android.view.ViewConfiguration $r3, $r5;
        long $l0, $l1, $l2;
        float $f0, $f1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z0 = virtualinvoke $r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $l1 = virtualinvoke $r5.<android.view.ViewConfiguration: long getScreenshotChordKeyTimeout()>();

        $f0 = (float) $l1;

        $f1 = $f0 * 2.5F;

        $l2 = (long) $f1;

        return $l2;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        $l0 = virtualinvoke $r3.<android.view.ViewConfiguration: long getScreenshotChordKeyTimeout()>();

        return $l0;
    }

    private android.app.SearchManager getSearchManager()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.app.SearchManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.app.SearchManager mSearchManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r5 = (android.app.SearchManager) $r4;

        r0.<com.android.server.policy.PhoneWindowManager: android.app.SearchManager mSearchManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.app.SearchManager mSearchManager>;

        return $r2;
    }

    private android.os.VibrationEffect getVibrationEffect(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1, $i2;
        android.os.VibrationEffect $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        long $l3;
        boolean $z0;
        long[] r9;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 == 0 goto label13;

        if i0 == 1 goto label12;

        if i0 == 10001 goto label08;

        tableswitch(i0)
        {
            case 3: goto label12;
            case 4: goto label07;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label04;
            case 9: goto label03;
            case 10: goto label04;
            case 11: goto label04;
            case 12: goto label12;
            case 13: goto label04;
            case 14: goto label13;
            case 15: goto label12;
            case 16: goto label12;
            case 17: goto label02;
            default: goto label01;
        };

     label01:
        return null;

     label02:
        $r5 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(1);

        return $r5;

     label03:
        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHapticTextHandleEnabled>;

        if $z0 != 0 goto label07;

        return null;

     label04:
        $r7 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int,boolean)>(2, 0);

        return $r7;

     label05:
        $r8 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(2);

        return $r8;

     label06:
        r9 = r0.<com.android.server.policy.PhoneWindowManager: long[] mCalendarDateVibePattern>;

        goto label09;

     label07:
        $r6 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(21);

        return $r6;

     label08:
        r9 = r0.<com.android.server.policy.PhoneWindowManager: long[] mSafeModeEnabledVibePattern>;

     label09:
        $i1 = lengthof r9;

        if $i1 != 0 goto label10;

        return null;

     label10:
        $i2 = lengthof r9;

        if $i2 != 1 goto label11;

        $l3 = r9[0];

        $r4 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>($l3, -1);

        return $r4;

     label11:
        $r3 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>(r9, -1);

        return $r3;

     label12:
        $r2 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(0);

        return $r2;

     label13:
        $r1 = staticinvoke <android.os.VibrationEffect: android.os.VibrationEffect get(int)>(5);

        return $r1;
    }

    private void goToSleep(long, int, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        int i1, i2;
        android.os.PowerManager $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mRequestedOrGoingToSleep> = 1;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r1.<android.os.PowerManager: void goToSleep(long,int,int)>(l0, i1, i2);

        return;
    }

    private boolean goToSleepFromPowerButton(long, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, l2, $l7, $l8, $l9, $l11, $l12;
        int i1, $i3, $i5, $i6;
        android.os.PowerManager$WakeData r1;
        android.os.PowerManagerInternal $r3;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        byte $b10;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManagerInternal mPowerManagerInternal>;

        r1 = virtualinvoke $r3.<android.os.PowerManagerInternal: android.os.PowerManager$WakeData getLastWakeup()>();

        if r1 == null goto label1;

        $i3 = r1.<android.os.PowerManager$WakeData: int wakeReason>;

        if $i3 != 4 goto label1;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "power_button_suppression_delay_after_gesture_wake", 800);

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i5 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerButtonSuppressionDelayMillis>;

        if $i5 <= 0 goto label1;

        $l8 = r1.<android.os.PowerManager$WakeData: long wakeTime>;

        $i6 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerButtonSuppressionDelayMillis>;

        $l7 = (long) $i6;

        $l9 = $l8 + $l7;

        $b10 = l2 cmp $l9;

        if $b10 >= 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sleep from power button suppressed. Time since gesture: ");

        $l11 = r1.<android.os.PowerManager$WakeData: long wakeTime>;

        $l12 = l2 - $l11;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r10);

        return 0;

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void goToSleep(long,int,int)>(l0, 4, i1);

        return 1;
    }

    private void handleHideBootMessage()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.Object r3;
        android.app.ProgressDialog r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r3 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardDrawnOnce>;

        if $z0 != 0 goto label3;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBootMessageNeedsHiding> = 1;

        exitmonitor r3;

     label2:
        return;

     label3:
        exitmonitor r3;

     label4:
        r4 = r0.<com.android.server.policy.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog>;

        if r4 == null goto label5;

        virtualinvoke r4.<android.app.ProgressDialog: void dismiss()>();

        r0.<com.android.server.policy.PhoneWindowManager: android.app.ProgressDialog mBootMsgDialog> = null;

     label5:
        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r3;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void handleRingerChordGesture()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0, $i1;
        android.media.AudioManagerInternal $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        com.android.internal.logging.MetricsLogger $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord>;

        if $i0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.media.AudioManagerInternal getAudioManagerInternal()>();

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.media.AudioManagerInternal mAudioManagerInternal>;

        virtualinvoke $r2.<android.media.AudioManagerInternal: void silenceRingerModeInternal(java.lang.String)>("volume_hush");

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r4, "hush_gesture_used", 1);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.logging.MetricsLogger mLogger>;

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord>;

        virtualinvoke $r5.<com.android.internal.logging.MetricsLogger: void action(int,int)>(1440, $i1);

        return;
    }

    private void handleShortPressOnHome(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean $z0;
        android.service.dreams.DreamManagerInternal $r1, r3;
        com.android.server.policy.PhoneWindowManager$HdmiControl r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$HdmiControl getHdmiControl()>();

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.policy.PhoneWindowManager$HdmiControl: void turnOnTv()>();

     label1:
        r3 = r0.<com.android.server.policy.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal>;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<android.service.dreams.DreamManagerInternal: boolean isDreaming()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal>;

        virtualinvoke $r1.<android.service.dreams.DreamManagerInternal: void stopDream(boolean)>(0);

        return;

     label2:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchHomeFromHotKey(int)>(i0);

        return;
    }

    private int handleStartTransitionForKeyguardLw(int, long)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        long l1, $l2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccludedChanged>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccludedChanged> = 0;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingKeyguardOccluded>;

        $z3 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean setKeyguardOccludedLw(boolean,boolean)>($z2, 0);

        if $z3 == 0 goto label1;

        return 5;

     label1:
        $z1 = staticinvoke <com.android.server.wm.AppTransition: boolean isKeyguardGoingAwayTransit(int)>(i0);

        if $z1 == 0 goto label2;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void startKeyguardExitAnimation(long,long)>($l2, l1);

     label2:
        return 0;
    }

    private boolean hasLongPressOnBackBehavior()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnBackBehavior>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasLongPressOnPowerBehavior()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getResolvedLongPressOnPowerBehavior()>();

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasVeryLongPressOnPowerBehavior()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressOnPowerBehavior>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void hideRecentApps(boolean, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void hideRecentApps(boolean,boolean)>(z0, z1);

     label1:
        return;
    }

    private static java.lang.String incallBackBehaviorToString(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        return "hangup";

     label1:
        return "<nothing>";
    }

    private static java.lang.String incallPowerBehaviorToString(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        return "hangup";

     label1:
        return "sleep";
    }

    private boolean interceptAccessibilityGestureTv(int, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean z0, $z1, $z2, $z3, $z5, $z6;
        android.os.Message r1;
        android.os.Handler $r2, $r3, $r4;
        long $l1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 != 4 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvKey1Pressed> = z0;

        goto label2;

     label1:
        if i0 != 20 goto label2;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvKey2Pressed> = z0;

     label2:
        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvKey1Pressed>;

        if $z5 == 0 goto label3;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvKey2Pressed>;

        if $z2 == 0 goto label3;

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvScheduled>;

        if $z3 != 0 goto label4;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvScheduled> = 1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r3, 19);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $l1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: long getAccessibilityShortcutTimeout()>();

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r1, $l1);

        goto label4;

     label3:
        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvScheduled>;

        if $z1 == 0 goto label4;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(19);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvScheduled> = 0;

     label4:
        $z6 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvScheduled>;

        return $z6;
    }

    private void interceptAccessibilityShortcutChord()
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, $l1, $l2, $l4, $l5, $l7;
        android.os.Handler r1;
        com.android.internal.accessibility.AccessibilityShortcutController $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b3, $b6;
        android.os.Message $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController>;

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardLocked()>();

        $z1 = virtualinvoke $r2.<com.android.internal.accessibility.AccessibilityShortcutController: boolean isAccessibilityShortcutAvailable(boolean)>($z0);

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        if $z2 == 0 goto label1;

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        if $z3 == 0 goto label1;

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered>;

        if $z4 != 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordVolumeDownKeyTime>;

        $l2 = $l1 + 150L;

        $b3 = l0 cmp $l2;

        if $b3 > 0 goto label1;

        $l4 = r0.<com.android.server.policy.PhoneWindowManager: long mA11yShortcutChordVolumeUpKeyTime>;

        $l5 = $l4 + 150L;

        $b6 = l0 cmp $l5;

        if $b6 > 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed> = 1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed> = 1;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = virtualinvoke r1.<android.os.Handler: android.os.Message obtainMessage(int)>(17);

        $l7 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: long getAccessibilityShortcutTimeout()>();

        virtualinvoke r1.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l7);

     label1:
        return;
    }

    private void interceptBackKeyDown()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Message r1;
        com.android.internal.logging.MetricsLogger $r2;
        boolean $z0;
        android.os.Handler $r3, $r5;
        android.content.Context $r4;
        android.view.ViewConfiguration $r6;
        long $l0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.logging.MetricsLogger mLogger>;

        virtualinvoke $r2.<com.android.internal.logging.MetricsLogger: void count(java.lang.String,int)>("key_back_down", 1);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBackKeyHandled> = 0;

        $z0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean hasLongPressOnBackBehavior()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r1 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(16);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $l0 = virtualinvoke $r6.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r1, $l0);

     label1:
        return;
    }

    private boolean interceptBackKeyUp(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z1, $z3, $z4, $z5;
        android.telecom.TelecomManager r1;
        com.android.internal.logging.MetricsLogger $r2;
        int $i0, $i1, $i2;
        android.os.Message $r3;
        android.view.KeyEvent r4;
        android.view.autofill.AutofillManagerInternal $r5;
        android.os.Handler r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r4 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.logging.MetricsLogger mLogger>;

        virtualinvoke $r2.<com.android.internal.logging.MetricsLogger: void count(java.lang.String,int)>("key_back_up", 1);

        z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBackKeyHandled>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingBackKeyAction()>();

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureWatch>;

        if $z1 == 0 goto label2;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        if r1 == null goto label2;

        $z3 = virtualinvoke r1.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z3 == 0 goto label1;

        virtualinvoke r1.<android.telecom.TelecomManager: void silenceRinger()>();

        return 0;

     label1:
        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mIncallBackBehavior>;

        $i2 = 1 & $i1;

        if $i2 == 0 goto label2;

        $z4 = virtualinvoke r1.<android.telecom.TelecomManager: boolean isInCall()>();

        if $z4 == 0 goto label2;

        $z5 = virtualinvoke r1.<android.telecom.TelecomManager: boolean endCall()>();

        return $z5;

     label2:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.view.autofill.AutofillManagerInternal mAutofillManagerInternal>;

        if $r5 == null goto label3;

        $i0 = virtualinvoke r4.<android.view.KeyEvent: int getKeyCode()>();

        if $i0 != 4 goto label3;

        r6 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = virtualinvoke r6.<android.os.Handler: android.os.Message obtainMessage(int)>(20);

        virtualinvoke r6.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3);

     label3:
        return z0;
    }

    private boolean interceptBugreportGestureTv(int, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean z0, $z1, $z2, $z3, $z5, $z6;
        android.os.Message r1;
        android.os.Handler $r2, $r3, $r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 != 23 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvKey1Pressed> = z0;

        goto label2;

     label1:
        if i0 != 4 goto label2;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvKey2Pressed> = z0;

     label2:
        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvKey1Pressed>;

        if $z5 == 0 goto label3;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvKey2Pressed>;

        if $z2 == 0 goto label3;

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvScheduled>;

        if $z3 != 0 goto label4;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvScheduled> = 1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r3, 18);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r1, 1000L);

        goto label4;

     label3:
        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvScheduled>;

        if $z1 == 0 goto label4;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(18);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvScheduled> = 0;

     label4:
        $z6 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBugreportTvScheduled>;

        return $z6;
    }

    private boolean interceptFallback(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.IBinder r1;
        android.view.KeyEvent r2;
        int i0, $i1, $i2;
        long $l3;
        byte $b4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>(r2, i0);

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $l3 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: long interceptKeyBeforeDispatching(android.os.IBinder,android.view.KeyEvent,int)>(r1, r2, i0);

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void interceptPowerKeyDown(android.view.KeyEvent, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1, $z2, $z3, $z4, $z6, $z8, $z10, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z20, z21, z22, $z23;
        android.os.PowerManager$WakeLock $r1, $r18;
        int $i0, $i2, $i3, $i4, $i6, $i8, $i9, $i11, $i13, $i14, $i15, $i16, $i18;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r2;
        long $l1, $l5, $l7, $l10, $l12, $l17;
        android.os.Handler $r3, $r5, $r7, $r8, $r9, $r11, $r13, $r14, $r17;
        android.content.Context $r4, $r10;
        android.view.ViewConfiguration $r6, $r12;
        android.util.MutableBoolean $r15, $r16;
        android.view.KeyEvent r19;
        android.telecom.TelecomManager r20;
        java.lang.Object $r21;
        com.android.server.GestureLauncherService r22;
        android.os.Message r23, r24, r25, r26;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r19 := @parameter0: android.view.KeyEvent;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mPowerKeyWakeLock>;

        $z2 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 != 0 goto label01;

        $r18 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mPowerKeyWakeLock>;

        virtualinvoke $r18.<android.os.PowerManager$WakeLock: void acquire()>();

     label01:
        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter>;

        if $i0 == 0 goto label02;

        $r17 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r17.<android.os.Handler: void removeMessages(int)>(13);

     label02:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: void onPowerKeyDown(boolean)>(z0);

        if z0 == 0 goto label03;

        $z18 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered>;

        if $z18 != 0 goto label03;

        $i15 = virtualinvoke r19.<android.view.KeyEvent: int getFlags()>();

        $i16 = $i15 & 1024;

        if $i16 != 0 goto label03;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered> = 1;

        $l17 = virtualinvoke r19.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordPowerKeyTime> = $l17;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptScreenshotChord()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptRingerToggleChord()>();

     label03:
        r20 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        z20 = 0;

        if r20 == null goto label05;

        $z16 = virtualinvoke r20.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z16 == 0 goto label04;

        virtualinvoke r20.<android.telecom.TelecomManager: void silenceRinger()>();

        z20 = 0;

        goto label05;

     label04:
        z20 = 0;

        $i13 = r0.<com.android.server.policy.PhoneWindowManager: int mIncallPowerBehavior>;

        $i14 = $i13 & 2;

        if $i14 == 0 goto label05;

        z20 = 0;

        $z17 = virtualinvoke r20.<android.telecom.TelecomManager: boolean isInCall()>();

        if $z17 == 0 goto label05;

        z20 = 0;

        if z0 == 0 goto label05;

        z20 = virtualinvoke r20.<android.telecom.TelecomManager: boolean endCall()>();

     label05:
        $r21 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/GestureLauncherService;");

        r22 = (com.android.server.GestureLauncherService) $r21;

        z21 = 0;

        if r22 == null goto label06;

        $r15 = r0.<com.android.server.policy.PhoneWindowManager: android.util.MutableBoolean mTmpBoolean>;

        z1 = virtualinvoke r22.<com.android.server.GestureLauncherService: boolean interceptPowerKeyDown(android.view.KeyEvent,boolean,android.util.MutableBoolean)>(r19, z0, $r15);

        z21 = z1;

        $r16 = r0.<com.android.server.policy.PhoneWindowManager: android.util.MutableBoolean mTmpBoolean>;

        $z14 = $r16.<android.util.MutableBoolean: boolean value>;

        if $z14 == 0 goto label06;

        z21 = z1;

        $z15 = r0.<com.android.server.policy.PhoneWindowManager: boolean mRequestedOrGoingToSleep>;

        if $z15 == 0 goto label06;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mCameraGestureTriggeredDuringGoingToSleep> = 1;

        z21 = z1;

     label06:
        $i18 = virtualinvoke r19.<android.view.KeyEvent: int getKeyCode()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendSystemKeyToStatusBarAsync(int)>($i18);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void schedulePossibleVeryLongPressReboot()>();

        if z20 != 0 goto label08;

        $z12 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        if $z12 != 0 goto label08;

        $z13 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        if $z13 != 0 goto label08;

        if z21 == 0 goto label07;

        goto label08;

     label07:
        z22 = 0;

        goto label09;

     label08:
        z22 = 1;

     label09:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = z22;

        $z23 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled>;

        if $z23 != 0 goto label17;

        if z0 == 0 goto label12;

        $z8 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean hasLongPressOnPowerBehavior()>();

        if $z8 == 0 goto label17;

        $i8 = virtualinvoke r19.<android.view.KeyEvent: int getFlags()>();

        $i9 = $i8 & 128;

        if $i9 == 0 goto label10;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerLongPress()>();

        goto label17;

     label10:
        $r9 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r23 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int)>(14);

        virtualinvoke r23.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r11 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r10 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r12 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r10);

        $l10 = virtualinvoke $r12.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        virtualinvoke $r11.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r23, $l10);

        $z10 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean hasVeryLongPressOnPowerBehavior()>();

        if $z10 == 0 goto label11;

        $r13 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r24 = virtualinvoke $r13.<android.os.Handler: android.os.Message obtainMessage(int)>(25);

        virtualinvoke r24.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r14 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $i11 = r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressTimeout>;

        $l12 = (long) $i11;

        virtualinvoke $r14.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r24, $l12);

     label11:
        goto label17;

     label12:
        $l1 = virtualinvoke r19.<android.view.KeyEvent: long getDownTime()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void wakeUpFromPowerKey(long)>($l1);

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSupportLongPressPowerWhenNonInteractive>;

        if $z3 == 0 goto label15;

        $z4 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean hasLongPressOnPowerBehavior()>();

        if $z4 == 0 goto label15;

        $i3 = virtualinvoke r19.<android.view.KeyEvent: int getFlags()>();

        $i4 = $i3 & 128;

        if $i4 == 0 goto label13;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerLongPress()>();

        goto label14;

     label13:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r25 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(14);

        virtualinvoke r25.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $l5 = virtualinvoke $r6.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r25, $l5);

        $z6 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean hasVeryLongPressOnPowerBehavior()>();

        if $z6 == 0 goto label14;

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r26 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(25);

        virtualinvoke r26.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $i6 = r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressTimeout>;

        $l7 = (long) $i6;

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r26, $l7);

     label14:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mBeganFromNonInteractive> = 1;

        goto label17;

     label15:
        $i2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getMaxMultiPressPowerCount()>();

        if $i2 > 1 goto label16;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        goto label17;

     label16:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mBeganFromNonInteractive> = 1;

     label17:
        return;
    }

    private void interceptPowerKeyUp(android.view.KeyEvent, boolean, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1, $z4, z5;
        android.os.Handler r1, $r3, $r5;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs r2;
        long l0, $l9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11;
        java.lang.Long $r4;
        com.android.server.policy._$$Lambda$oXa0y3A_00RiQs6_KTPBgpkGtgw $r7;
        android.view.KeyEvent r8;
        android.os.Message r9;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r8 := @parameter0: android.view.KeyEvent;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z1 != 0 goto label2;

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled>;

        if $z4 == 0 goto label1;

        goto label2;

     label1:
        z5 = 0;

        goto label3;

     label2:
        z5 = 1;

     label3:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered> = 0;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        if z5 != 0 goto label6;

        $i1 = virtualinvoke r8.<android.view.KeyEvent: int getFlags()>();

        $i2 = $i1 & 128;

        if $i2 != 0 goto label4;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r7 = new com.android.server.policy._$$Lambda$oXa0y3A_00RiQs6_KTPBgpkGtgw;

        specialinvoke $r7.<com.android.server.policy._$$Lambda$oXa0y3A_00RiQs6_KTPBgpkGtgw: void <init>(com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs)>(r2);

        virtualinvoke r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

     label4:
        $i3 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter>;

        $i4 = $i3 + 1;

        r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter> = $i4;

        i10 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getMaxMultiPressPowerCount()>();

        l0 = virtualinvoke r8.<android.view.KeyEvent: long getDownTime()>();

        $i5 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter>;

        if $i5 >= i10 goto label5;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $i7 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        i11 = (int) z0;

        r9 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(13, i11, $i7, $r4);

        virtualinvoke r9.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $i8 = staticinvoke <android.view.ViewConfiguration: int getMultiPressTimeout()>();

        $l9 = (long) $i8;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r9, $l9);

        return;

     label5:
        $i6 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerPress(long,boolean,int)>(l0, z0, $i6);

     label6:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishPowerKeyPress()>();

        return;
    }

    private void interceptRingerToggleChord()
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, $l2, $l3, $l5, $l6, $l8;
        android.os.Handler r1;
        int $i1;
        boolean $z0, $z1;
        byte $b4, $b7;
        android.os.Message $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord>;

        if $i1 == 0 goto label1;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        if $z1 == 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = r0.<com.android.server.policy.PhoneWindowManager: long mA11yShortcutChordVolumeUpKeyTime>;

        $l3 = $l2 + 150L;

        $b4 = l0 cmp $l3;

        if $b4 > 0 goto label1;

        $l5 = r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordPowerKeyTime>;

        $l6 = $l5 + 150L;

        $b7 = l0 cmp $l6;

        if $b7 > 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = virtualinvoke r1.<android.os.Handler: android.os.Message obtainMessage(int)>(26);

        $l8 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: long getRingerToggleChordDelay()>();

        virtualinvoke r1.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r2, $l8);

     label1:
        return;
    }

    private void interceptScreenshotChord()
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, $l1, $l2, $l4, $l5, $l7;
        boolean $z0, $z1, $z2, $z3;
        byte $b3, $b6;
        com.android.server.policy.PhoneWindowManager$ScreenshotRunnable $r1, $r2, $r4;
        android.os.Handler $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordEnabled>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered>;

        if $z2 == 0 goto label1;

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        if $z3 != 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordVolumeDownKeyTime>;

        $l2 = $l1 + 150L;

        $b3 = l0 cmp $l2;

        if $b3 > 0 goto label1;

        $l4 = r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordPowerKeyTime>;

        $l5 = $l4 + 150L;

        $b6 = l0 cmp $l5;

        if $b6 > 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r1.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void setScreenshotType(int)>(1);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r2.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void setScreenshotSource(int)>(1);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        $l7 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: long getScreenshotChordLongPressDelay()>();

        virtualinvoke $r3.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r4, $l7);

     label1:
        return;
    }

    private void interceptSystemNavigationKey(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        int $i0, $i1, $i2;
        android.view.accessibility.AccessibilityManager $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i0 != 1 goto label2;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z2 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean sendFingerprintGesture(int)>($i2);

        if $z2 != 0 goto label2;

     label1:
        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemNavigationKeysEnabled>;

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendSystemKeyToStatusBarAsync(int)>($i1);

     label2:
        return;
    }

    private boolean isHidden(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, i1;
        com.android.server.wm.DisplayPolicy $r1;
        boolean z1, z2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        i1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int getLidState()>();

        z1 = 0;

        if i0 == 1 goto label3;

        if i0 == 2 goto label1;

        return 0;

     label1:
        if i1 != 1 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        z2 = 0;

        if i1 != 0 goto label4;

        z2 = 1;

     label4:
        return z2;
    }

    private boolean isRoundWindow()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.content.res.Configuration $r3;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z0 = virtualinvoke $r3.<android.content.res.Configuration: boolean isScreenRound()>();

        return $z0;
    }

    private boolean isTheaterModeEnabled()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "theater_mode_on", 0);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private boolean isTvUserSetupComplete()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "tv_user_setup_complete", 0, -2);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private static boolean isValidGlobalKey(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 26 goto label1;

        if i0 == 223 goto label1;

        if i0 == 224 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isWakeKeyWhenScreenOff(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.DisplayPolicy $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        if i0 == 4 goto label8;

        z3 = 0;

        if i0 == 79 goto label7;

        if i0 == 130 goto label7;

        if i0 == 164 goto label5;

        if i0 == 219 goto label4;

        if i0 == 222 goto label7;

        if i0 == 126 goto label7;

        if i0 == 127 goto label7;

        tableswitch(i0)
        {
            case 19: goto label3;
            case 20: goto label3;
            case 21: goto label3;
            case 22: goto label3;
            case 23: goto label3;
            case 24: goto label5;
            case 25: goto label5;
            default: goto label1;
        };

     label1:
        tableswitch(i0)
        {
            case 85: goto label7;
            case 86: goto label7;
            case 87: goto label7;
            case 88: goto label7;
            case 89: goto label7;
            case 90: goto label7;
            case 91: goto label7;
            default: goto label2;
        };

     label2:
        return 1;

     label3:
        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeOnDpadKeyPress>;

        return $z2;

     label4:
        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeOnAssistKeyPress>;

        return $z1;

     label5:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $i1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int getDockMode()>();

        if $i1 == 0 goto label6;

        z3 = 1;

     label6:
        return z3;

     label7:
        return 0;

     label8:
        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeOnBackKeyPress>;

        return $z0;
    }

    private void launchAllAppsAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Intent $r2, $r3;
        boolean $z0;
        int $i0;
        android.content.pm.PackageManager $r5;
        android.content.pm.ActivityInfo $r6;
        java.lang.String $r7;
        android.content.pm.ResolveInfo r10;
        android.os.UserHandle $r11;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.ALL_APPS");

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureLeanback>;

        if $z0 == 0 goto label1;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        r10 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>($r3, 1048576, $i0);

        if r10 == null goto label1;

        $r6 = r10.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r7);

     label1:
        $r11 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r2, $r11);

        return;
    }

    private void launchAssistAction(java.lang.String, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.String r1;
        int i0, $i1;
        boolean $z0;
        android.os.Bundle $r3, r4;
        android.content.Context $r5, $r7;
        android.os.UserHandle $r6;
        java.lang.Object $r8;
        android.app.SearchManager $r9;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r4 = null;

        if i0 > -2147483648 goto label2;

        if r1 == null goto label4;

     label2:
        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        if i0 <= -2147483648 goto label3;

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.ASSIST_INPUT_DEVICE_ID", i0);

     label3:
        r4 = $r3;

        if r1 == null goto label4;

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>(r1, 1);

        r4 = $r3;

     label4:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        $r7 = virtualinvoke $r5.<android.content.Context: android.content.Context createContextAsUser(android.os.UserHandle,int)>($r6, 0);

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r9 = (android.app.SearchManager) $r8;

        virtualinvoke $r9.<android.app.SearchManager: void launchAssist(android.os.Bundle)>(r4);

        return;
    }

    private void launchAssistLongPressAction()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Intent $r2;
        android.os.UserHandle $r4;
        android.content.ActivityNotFoundException $r5;
        android.app.SearchManager r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(0, 0, "Assist - Long Press");

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SEARCH_LONG_PRESS");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label1:
        r6 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: android.app.SearchManager getSearchManager()>();

     label2:
        if r6 == null goto label4;

     label3:
        virtualinvoke r6.<android.app.SearchManager: void stopSearch()>();

     label4:
        $r4 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r2, $r4);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "No activity to handle assist long press action.", $r5);

     label7:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label6;
        catch android.content.ActivityNotFoundException from label3 to label4 with label6;
        catch android.content.ActivityNotFoundException from label4 to label5 with label6;
    }

    private void launchVoiceAssist(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        android.content.Intent $r2;
        android.os.UserHandle $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 != null goto label1;

        z1 = 0;

        goto label2;

     label1:
        z1 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

     label2:
        if z1 != 0 goto label3;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.VOICE_ASSIST");

        $r3 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle,boolean)>($r2, null, $r3, z0);

     label3:
        return;
    }

    private static java.lang.String lidBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "LID_BEHAVIOR_LOCK";

     label2:
        return "LID_BEHAVIOR_SLEEP";

     label3:
        return "LID_BEHAVIOR_NONE";
    }

    private static java.lang.String longPressOnBackBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "LONG_PRESS_BACK_GO_TO_VOICE_ASSIST";

     label2:
        return "LONG_PRESS_BACK_NOTHING";
    }

    private static java.lang.String longPressOnHomeBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "LONG_PRESS_HOME_ASSIST";

     label2:
        return "LONG_PRESS_HOME_ALL_APPS";

     label3:
        return "LONG_PRESS_HOME_NOTHING";
    }

    private static java.lang.String longPressOnPowerBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "LONG_PRESS_POWER_ASSISTANT";

     label2:
        return "LONG_PRESS_POWER_GO_TO_VOICE_ASSIST";

     label3:
        return "LONG_PRESS_POWER_SHUT_OFF_NO_CONFIRM";

     label4:
        return "LONG_PRESS_POWER_SHUT_OFF";

     label5:
        return "LONG_PRESS_POWER_GLOBAL_ACTIONS";

     label6:
        return "LONG_PRESS_POWER_NOTHING";
    }

    private static java.lang.String multiPressOnPowerBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "MULTI_PRESS_POWER_BRIGHTNESS_BOOST";

     label2:
        return "MULTI_PRESS_POWER_THEATER_MODE";

     label3:
        return "MULTI_PRESS_POWER_NOTHING";
    }

    private boolean performHapticFeedback(int, boolean, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1;
        boolean z0, $z1;
        java.lang.String r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $z1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,java.lang.String,int,boolean,java.lang.String)>($i1, $r3, i0, z0, r1);

        return $z1;
    }

    private void powerLongPress()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs r1;
        boolean $z3, z5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getResolvedLongPressOnPowerBehavior()>();

        z5 = 1;

        if i0 == 1 goto label6;

        if i0 == 2 goto label3;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        goto label7;

     label1:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(0, 0, "Power - Long Press - Go To Assistant");

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchAssistAction(java.lang.String,int)>(null, -2147483648);

        goto label7;

     label2:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(0, 0, "Power - Long Press - Go To Voice Assist");

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowStartActivityForLongPressOnPowerDuringSetup>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchVoiceAssist(boolean)>($z3);

        goto label7;

     label3:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(0, 0, "Power - Long Press - Shut Off");

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("globalactions");

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        if i0 != 2 goto label4;

        goto label5;

     label4:
        z5 = 0;

     label5:
        interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)>(z5);

        goto label7;

     label6:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(0, 0, "Power - Long Press - Global Actions");

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void showGlobalActionsInternal()>();

     label7:
        return;
    }

    private void powerMultiPressAction(long, boolean, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        boolean z0, $z1, $z2, $z4;
        int i1;
        android.content.Context $r1, $r3;
        android.content.ContentResolver $r2, $r4;
        android.os.PowerManager $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        if i1 == 1 goto label3;

        if i1 == 2 goto label1;

        goto label6;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Starting brightness boost.");

        if z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void wakeUpFromPowerKey(long)>(l0);

     label2:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r5.<android.os.PowerManager: void boostScreenBrightness(long)>(l0);

        goto label6;

     label3:
        $z1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Ignoring toggling theater mode - device not setup.");

        goto label6;

     label4:
        $z2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isTheaterModeEnabled()>();

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Toggling theater mode off.");

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r4, "theater_mode_on", 0);

        if z0 != 0 goto label6;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void wakeUpFromPowerKey(long)>(l0);

        goto label6;

     label5:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Toggling theater mode on.");

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "theater_mode_on", 1);

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mGoToSleepOnButtonPressTheaterMode>;

        if $z4 == 0 goto label6;

        if z0 == 0 goto label6;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void goToSleep(long,int,int)>(l0, 4, 0);

     label6:
        return;
    }

    private void powerPress(long, boolean, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        boolean z0, $z1, $z2, $z3, $z6, $z7, $z8;
        com.android.server.wm.DisplayPolicy $r1, $r17;
        java.lang.StringBuilder $r2;
        int $i1, $i3, $i4, i6, i7;
        java.lang.String $r13;
        com.android.server.inputmethod.InputMethodManagerInternal $r14, $r16, r19;
        java.lang.Object $r15;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i6 := @parameter2: int;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean isScreenOnEarly()>();

        if $z1 == 0 goto label01;

        $r17 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z8 = virtualinvoke $r17.<com.android.server.wm.DisplayPolicy: boolean isScreenOnFully()>();

        if $z8 != 0 goto label01;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Suppressed redundant power key press while already in the process of turning the screen on.");

        return;

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("powerPress: eventTime=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" interactive=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" beganFromNonInteractive=");

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBeganFromNonInteractive>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mShortPressOnPowerBehavior=");

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnPowerBehavior>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowManager", $r13);

        if i6 != 2 goto label02;

        $i4 = r0.<com.android.server.policy.PhoneWindowManager: int mDoublePressOnPowerBehavior>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerMultiPressAction(long,boolean,int)>(l0, z0, $i4);

        goto label11;

     label02:
        if i6 != 3 goto label03;

        $i3 = r0.<com.android.server.policy.PhoneWindowManager: int mTriplePressOnPowerBehavior>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void powerMultiPressAction(long,boolean,int)>(l0, z0, $i3);

        goto label11;

     label03:
        if z0 == 0 goto label11;

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mBeganFromNonInteractive>;

        if $z3 != 0 goto label11;

        i7 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnPowerBehavior>;

        if i7 == 1 goto label10;

        if i7 == 2 goto label09;

        if i7 == 3 goto label08;

        if i7 == 4 goto label07;

        if i7 == 5 goto label04;

        goto label11;

     label04:
        $z7 = r0.<com.android.server.policy.PhoneWindowManager: boolean mDismissImeOnBackKeyPressed>;

        if $z7 == 0 goto label06;

        $r14 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.inputmethod.InputMethodManagerInternal mInputMethodManagerInternal>;

        if $r14 != null goto label05;

        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/inputmethod/InputMethodManagerInternal;");

        $r16 = (com.android.server.inputmethod.InputMethodManagerInternal) $r15;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.inputmethod.InputMethodManagerInternal mInputMethodManagerInternal> = $r16;

     label05:
        r19 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.inputmethod.InputMethodManagerInternal mInputMethodManagerInternal>;

        if r19 == null goto label11;

        virtualinvoke r19.<com.android.server.inputmethod.InputMethodManagerInternal: void hideCurrentInputMethod(int)>(16);

        goto label11;

     label06:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void shortPressPowerGoHome()>();

        goto label11;

     label07:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void shortPressPowerGoHome()>();

        goto label11;

     label08:
        $z6 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean goToSleepFromPowerButton(long,int)>(l0, 1);

        if $z6 == 0 goto label11;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchHomeFromHotKey(int)>(0);

        goto label11;

     label09:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean goToSleepFromPowerButton(long,int)>(l0, 1);

        goto label11;

     label10:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean goToSleepFromPowerButton(long,int)>(l0, 0);

     label11:
        return;
    }

    private void powerVeryLongPress()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressOnPowerBehavior>;

        if $i0 == 1 goto label1;

        goto label2;

     label1:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled> = 1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(0, 0, "Power - Very Long Press - Show Global Actions");

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void showGlobalActionsInternal()>();

     label2:
        return;
    }

    private void preloadRecentApps()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPreloadedRecentApps> = 1;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void preloadRecentApps()>();

     label1:
        return;
    }

    private void readCameraLensCoverState()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r1;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i0 = interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int getCameraLensCoverState()>();

        r0.<com.android.server.policy.PhoneWindowManager: int mCameraLensCoverState> = $i0;

        return;
    }

    private void readConfigurationDependentBehaviors()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.res.Resources r1;
        android.content.Context $r2;
        int i0, i1;
        android.content.pm.PackageManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694826);

        r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnHomeBehavior> = i0;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnHomeBehavior> = 0;

     label2:
        i1 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694801);

        r0.<com.android.server.policy.PhoneWindowManager: int mDoubleTapOnHomeBehavior> = i1;

        if i1 < 0 goto label3;

        if i1 <= 1 goto label4;

     label3:
        r0.<com.android.server.policy.PhoneWindowManager: int mDoubleTapOnHomeBehavior> = 0;

     label4:
        r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnWindowBehavior> = 0;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        $z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.picture_in_picture");

        if $z0 == 0 goto label5;

        r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnWindowBehavior> = 1;

     label5:
        return;
    }

    private void reportScreenStateToVrManager(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        com.android.server.vr.VrManagerInternal $r1, $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.vr.VrManagerInternal mVrManagerInternal>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.vr.VrManagerInternal mVrManagerInternal>;

        virtualinvoke $r2.<com.android.server.vr.VrManagerInternal: void onScreenStateChanged(boolean)>(z0);

        return;
    }

    private void requestBugreportForTv()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;
        android.app.IActivityManager $r4, $r5;
        android.content.Context $r6;
        android.content.ContentResolver $r7;
        int $i0;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = "1";

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.debuggable");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r7, "development_settings_enabled", 0);

        if $i0 != 1 goto label4;

     label1:
        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $z1 = interfaceinvoke $r4.<android.app.IActivityManager: boolean launchBugReportHandlerApp()>();

        if $z1 != 0 goto label2;

        $r5 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r5.<android.app.IActivityManager: void requestInteractiveBugReport()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Error taking bugreport", $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void schedulePossibleVeryLongPressReboot()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Runnable $r1, $r3;
        android.os.Handler $r2, $r4;
        int $i0;
        long $l1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mPossibleVeryLongPressReboot>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mPossibleVeryLongPressReboot>;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1);

        return;
    }

    private void sendSystemKeyToStatusBar(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        android.os.RemoteException $r1;
        com.android.internal.statusbar.IStatusBarService r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r2 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<com.android.internal.statusbar.IStatusBarService: void handleSystemKey(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void sendSystemKeyToStatusBarAsync(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(21, i0, 0);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private boolean setKeyguardOccludedLw(boolean, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1, z2, z3, $z4, z5;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r1, $r2, $r3, $r4, $r6;
        int $i0, $i1, $i2, $i3;
        com.android.server.policy.WindowManagerPolicy$WindowState $r5, $r7, r9;
        android.view.WindowManager$LayoutParams r8, r10;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        z3 = virtualinvoke $r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if z2 != z0 goto label2;

        if z1 == 0 goto label1;

        goto label2;

     label1:
        z5 = 0;

        goto label3;

     label2:
        z5 = 1;

     label3:
        if z0 != 0 goto label5;

        if z5 == 0 goto label5;

        if z3 == 0 goto label5;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded> = 0;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r4.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setOccluded(boolean,boolean)>(0, 1);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowState mKeyguardCandidate>;

        if $r5 == null goto label4;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z4 = virtualinvoke $r6.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean hasLockscreenWallpaper()>();

        if $z4 != 0 goto label4;

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowState mKeyguardCandidate>;

        r8 = interfaceinvoke $r7.<com.android.server.policy.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i2 = r8.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i2 | 1048576;

        r8.<android.view.WindowManager$LayoutParams: int flags> = $i3;

     label4:
        return 1;

     label5:
        if z0 == 0 goto label7;

        if z5 == 0 goto label7;

        if z3 == 0 goto label7;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded> = 1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setOccluded(boolean,boolean)>(1, 0);

        r9 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowState mKeyguardCandidate>;

        if r9 == null goto label6;

        r10 = interfaceinvoke r9.<com.android.server.policy.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = r10.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & -1048577;

        r10.<android.view.WindowManager$LayoutParams: int flags> = $i1;

     label6:
        return 1;

     label7:
        if z5 == 0 goto label8;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded> = z0;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r2.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setOccluded(boolean,boolean)>(z0, 0);

        return 0;

     label8:
        return 0;
    }

    private static java.lang.String shortPressOnPowerBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "SHORT_PRESS_POWER_CLOSE_IME_OR_GO_HOME";

     label2:
        return "SHORT_PRESS_POWER_GO_HOME";

     label3:
        return "SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP_AND_GO_HOME";

     label4:
        return "SHORT_PRESS_POWER_REALLY_GO_TO_SLEEP";

     label5:
        return "SHORT_PRESS_POWER_GO_TO_SLEEP";

     label6:
        return "SHORT_PRESS_POWER_NOTHING";
    }

    private static java.lang.String shortPressOnSleepBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "SHORT_PRESS_SLEEP_GO_TO_SLEEP_AND_GO_HOME";

     label2:
        return "SHORT_PRESS_SLEEP_GO_TO_SLEEP";
    }

    private static java.lang.String shortPressOnWindowBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "SHORT_PRESS_WINDOW_PICTURE_IN_PICTURE";

     label2:
        return "SHORT_PRESS_WINDOW_NOTHING";
    }

    private void shortPressPowerGoHome()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchHomeFromHotKey(int,boolean,boolean)>(0, 1, 0);

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onShortPowerPressedGoHome()>();

     label1:
        return;
    }

    private boolean shouldBeHiddenByKeyguard(com.android.server.policy.WindowManagerPolicy$WindowState, com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowState r1, r2;
        android.view.WindowManager$LayoutParams r3;
        boolean z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, $z14, z15, z16, z17, z18;
        int $i0, $i1, $i2, i3;
        com.android.server.wm.DisplayPolicy $r4;
        com.android.server.wm.WindowManagerInternal $r5;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        r2 := @parameter1: com.android.server.policy.WindowManagerPolicy$WindowState;

        r3 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        i3 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if i3 != 2034 goto label01;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        $z10 = virtualinvoke $r5.<com.android.server.wm.WindowManagerInternal: boolean isStackVisibleLw(int)>(3);

        if $z10 != 0 goto label01;

        z11 = 1;

        goto label02;

     label01:
        z11 = 0;

     label02:
        if z11 == 0 goto label03;

        return 1;

     label03:
        $z2 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean isInputMethodWindow()>();

        if $z2 == 0 goto label05;

        $z8 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAodShowing>;

        if $z8 != 0 goto label04;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z9 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: boolean isWindowManagerDrawComplete()>();

        if $z9 != 0 goto label05;

     label04:
        z12 = 1;

        goto label06;

     label05:
        z12 = 0;

     label06:
        if z12 == 0 goto label07;

        return 1;

     label07:
        if r2 == null goto label09;

        $z5 = interfaceinvoke r2.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z5 == 0 goto label09;

        $z6 = interfaceinvoke r2.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean canShowWhenLocked()>();

        if $z6 != 0 goto label08;

        $z7 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r2);

        if $z7 != 0 goto label09;

     label08:
        z13 = 1;

        goto label10;

     label09:
        z13 = 0;

     label10:
        $z14 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean isInputMethodWindow()>();

        if $z14 == 0 goto label11;

        if z13 == 0 goto label11;

        z15 = 1;

        goto label12;

     label11:
        z15 = 0;

     label12:
        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        z1 = virtualinvoke $r6.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        z16 = z15;

        if z1 == 0 goto label16;

        z16 = z15;

        $z3 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardOccluded()>();

        if $z3 == 0 goto label16;

        $z4 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean canShowWhenLocked()>();

        if $z4 != 0 goto label14;

        $i1 = r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i2 = $i1 & 256;

        if $i2 == 0 goto label13;

        goto label14;

     label13:
        z17 = 0;

        goto label15;

     label14:
        z17 = 1;

     label15:
        z16 = z15 | z17;

     label16:
        z18 = 0;

        if z1 == 0 goto label17;

        z18 = 0;

        if z16 != 0 goto label17;

        z18 = 0;

        $i0 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: int getDisplayId()>();

        if $i0 != 0 goto label17;

        z18 = 1;

     label17:
        return z18;
    }

    private boolean shouldCecAudioDeviceForwardVolumeKeysSystemAudioModeOff()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = <com.android.internal.os.RoSystemProperties: boolean CEC_AUDIO_DEVICE_FORWARD_VOLUME_KEYS_SYSTEM_AUDIO_MODE_OFF>;

        return $z0;
    }

    private boolean shouldDispatchInputWhenNonInteractive(int, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1, i3;
        boolean z0, $z1, $z2, $z3, z4, z5;
        android.hardware.display.DisplayManager $r1;
        android.os.RemoteException $r2;
        android.view.Display r3;
        android.service.dreams.IDreamManager r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        if i3 == 0 goto label02;

        if i3 != -1 goto label01;

        goto label02;

     label01:
        z4 = 0;

        goto label03;

     label02:
        z4 = 1;

     label03:
        if z4 == 0 goto label04;

        r3 = r0.<com.android.server.policy.PhoneWindowManager: android.view.Display mDefaultDisplay>;

        goto label05;

     label04:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.hardware.display.DisplayManager mDisplayManager>;

        r3 = virtualinvoke $r1.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i3);

     label05:
        if r3 == null goto label07;

        $i1 = virtualinvoke r3.<android.view.Display: int getState()>();

        if $i1 != 1 goto label06;

        goto label07;

     label06:
        z5 = 0;

        goto label08;

     label07:
        z5 = 1;

     label08:
        if z5 == 0 goto label09;

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureWatch>;

        if $z3 != 0 goto label09;

        return 0;

     label09:
        $z1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        if $z1 == 0 goto label10;

        if z5 != 0 goto label10;

        return 1;

     label10:
        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureWatch>;

        if $z2 == 0 goto label12;

        if i0 == 4 goto label11;

        if i0 != 264 goto label12;

     label11:
        return 0;

     label12:
        if z4 == 0 goto label16;

        r4 = staticinvoke <com.android.server.policy.PhoneWindowManager: android.service.dreams.IDreamManager getDreamManager()>();

        if r4 == null goto label16;

     label13:
        z0 = interfaceinvoke r4.<android.service.dreams.IDreamManager: boolean isDreaming()>();

     label14:
        if z0 == 0 goto label16;

        return 1;

     label15:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException when checking if dreaming", $r2);

     label16:
        return 0;

        catch android.os.RemoteException from label13 to label14 with label15;
    }

    private boolean shouldEnableWakeGestureLp()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z1, $z2, z3;
        com.android.server.wm.DisplayPolicy $r1, $r3;
        int $i0, $i1;
        com.android.server.policy.PhoneWindowManager$MyWakeGestureListener $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeGestureEnabledSetting>;

        z3 = 1;

        if z0 == 0 goto label2;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean isAwake()>();

        if $z1 != 0 goto label2;

        $i0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getLidBehavior()>();

        if $i0 != 1 goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $i1 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: int getLidState()>();

        if $i1 == 0 goto label2;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        $z2 = virtualinvoke $r2.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: boolean isSupported()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    private void showPictureInPictureMenu(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Handler $r1, $r2;
        android.view.KeyEvent r3;
        android.os.Message r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r3 := @parameter0: android.view.KeyEvent;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(15);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r4 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(15);

        virtualinvoke r4.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void showPictureInPictureMenuInternal()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void showPictureInPictureMenu()>();

     label1:
        return;
    }

    private void showRecentApps(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void showRecentApps(boolean)>(z0);

     label1:
        return;
    }

    private void sleepPress()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnSleepBehavior>;

        if $i0 != 1 goto label1;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchHomeFromHotKey(int,boolean,boolean)>(0, 0, 1);

     label1:
        return;
    }

    private void sleepRelease(long)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        int i1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        i1 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnSleepBehavior>;

        if i1 == 0 goto label1;

        if i1 == 1 goto label1;

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "sleepRelease() calling goToSleep(GO_TO_SLEEP_REASON_SLEEP_BUTTON)");

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void goToSleep(long,int,int)>(l0, 6, 0);

     label2:
        return;
    }

    private void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        android.os.UserHandle r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.UserHandle;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle,boolean)>(r1, r2, r3, 0);

        return;
    }

    private void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        boolean z0, $z1;
        android.content.Context $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.os.Bundle r8;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.content.Intent;

        r8 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.os.UserHandle;

        z0 := @parameter3: boolean;

        if z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not starting activity because user setup is in progress: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        goto label3;

     label2:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>(r1, r8, r2);

     label3:
        return;
    }

    private void startActivityAsUser(android.content.Intent, android.os.UserHandle)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Intent r1;
        android.os.UserHandle r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>(r1, null, r2);

        return;
    }

    private void toggleKeyboardShortcutsMenu(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void toggleKeyboardShortcutsMenu(int)>(i0);

     label1:
        return;
    }

    private void toggleRecentApps()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.statusbar.StatusBarManagerInternal r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPreloadedRecentApps> = 0;

        r1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void toggleRecentApps()>();

     label1:
        return;
    }

    private void updateLockScreenTimeout()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.PhoneWindowManager$ScreenLockTimeout r1, $r4, $r6, $r8;
        java.util.HashSet $r3;
        boolean $z0, $z2, $z3, z4, $z5;
        android.os.Handler $r5, $r7, $r9;
        int $i0, $i2;
        long $l1;
        com.android.server.wm.DisplayPolicy $r10;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r11, $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: java.util.HashSet mAllowLockscreenWhenOnDisplays>;

        $z0 = virtualinvoke $r3.<java.util.HashSet: boolean isEmpty()>();

        if $z0 != 0 goto label03;

        $r10 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z2 = virtualinvoke $r10.<com.android.server.wm.DisplayPolicy: boolean isAwake()>();

        if $z2 == 0 goto label03;

        $r11 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r11 == null goto label03;

        $r12 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $i2 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        $z3 = virtualinvoke $r12.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isSecure(int)>($i2);

        if $z3 == 0 goto label03;

     label02:
        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mLockScreenTimerActive>;

        if $z5 == z4 goto label10;

     label05:
        if z4 == 0 goto label08;

     label06:
        $r7 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r7.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r6);

        $r9 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mLockScreenTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r9.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r8, $l1);

     label07:
        goto label09;

     label08:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

     label09:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mLockScreenTimerActive> = z4;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void updateScreenOffSleepToken(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        com.android.server.wm.ActivityTaskManagerInternal$SleepToken r1, $r2, $r4;
        com.android.server.wm.ActivityTaskManagerInternal $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mScreenOffSleepToken>;

        if $r2 != null goto label2;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerInternal: com.android.server.wm.ActivityTaskManagerInternal$SleepToken acquireSleepToken(java.lang.String,int)>("ScreenOff", 0);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mScreenOffSleepToken> = $r4;

        goto label2;

     label1:
        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mScreenOffSleepToken>;

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.wm.ActivityTaskManagerInternal$SleepToken: void release()>();

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mScreenOffSleepToken> = null;

     label2:
        return;
    }

    private void updateWakeGestureListenerLp()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        com.android.server.policy.PhoneWindowManager$MyWakeGestureListener $r1, $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean shouldEnableWakeGestureLp()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        virtualinvoke $r2.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: void requestWakeUpTrigger()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        virtualinvoke $r1.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: void cancelWakeUpTrigger()>();

     label2:
        return;
    }

    private static java.lang.String veryLongPressOnPowerBehaviorToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "VERY_LONG_PRESS_POWER_GLOBAL_ACTIONS";

     label2:
        return "VERY_LONG_PRESS_POWER_NOTHING";
    }

    private boolean wakeUp(long, boolean, int, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        boolean z0, z1;
        int i1;
        android.os.PowerManager $r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        java.lang.String r4;
        com.android.server.policy.PhoneWindowManager$HdmiControl r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isTheaterModeEnabled()>();

        if z0 != 0 goto label1;

        if z1 == 0 goto label1;

        return 0;

     label1:
        if z1 == 0 goto label2;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, "theater_mode_on", 0);

     label2:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        virtualinvoke $r1.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>(l0, i1, r4);

        r5 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$HdmiControl getHdmiControl()>();

        if r5 == null goto label3;

        virtualinvoke r5.<com.android.server.policy.PhoneWindowManager$HdmiControl: void turnOnTv()>();

     label3:
        return 1;
    }

    private void wakeUpFromPowerKey(long)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromPowerKey>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>(l0, $z0, 1, "android.policy:POWER");

        return;
    }

    public com.android.server.policy.WindowManagerPolicy$StartingSurface addSplashScreen(android.os.IBinder, java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int, android.content.res.Configuration, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        com.android.internal.policy.PhoneWindow r1;
        boolean z0, $z1, $z2;
        android.content.Context $r2, r37, r38, r39, r40, r41, r43;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r3;
        java.lang.String $r4, r33, $r69, $r72, $r73;
        java.lang.Object $r5, r46;
        android.view.ViewParent $r6, $r7, $r14, $r16, $r18;
        com.android.server.policy.SplashScreenSurface $r8, r60;
        android.content.res.Configuration $r9, r36;
        int[] $r10;
        android.graphics.drawable.Drawable $r11;
        java.lang.RuntimeException $r13, $r19, $r25, $r26, r62;
        android.view.WindowManager$BadTokenException $r15, $r23, $r28, $r29, r65;
        java.lang.Throwable $r17, $r21, $r22, $r24, $r27, $r30, $r31, r47, r61;
        android.content.pm.PackageManager$NameNotFoundException $r20;
        android.os.IBinder r32;
        android.content.res.CompatibilityInfo r34;
        java.lang.CharSequence r35, r45;
        android.content.res.TypedArray r42, $r55;
        android.content.res.Resources $r44;
        android.view.WindowManager r48, r50, r52, r57, r63, r66, r70;
        android.view.View r49, r51, r53, r58, r64, r67;
        android.view.WindowManager$LayoutParams r54;
        java.lang.StringBuilder r56, r68, r71;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r32 := @parameter0: android.os.IBinder;

        r33 := @parameter1: java.lang.String;

        i7 := @parameter2: int;

        r34 := @parameter3: android.content.res.CompatibilityInfo;

        r35 := @parameter4: java.lang.CharSequence;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        i8 := @parameter8: int;

        r36 := @parameter9: android.content.res.Configuration;

        i3 := @parameter10: int;

        if r33 != null goto label001;

        return null;

     label001:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r37 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: android.content.Context getDisplayContext(android.content.Context,int)>($r2, i3);

     label002:
        if r37 != null goto label004;

        goto label003;

     label003:
        return null;

     label004:
        i4 = virtualinvoke r37.<android.content.Context: int getThemeResId()>();

     label005:
        if i7 != i4 goto label006;

        r38 = r37;

        if i0 == 0 goto label012;

     label006:
        r38 = r37;

     label007:
        r39 = virtualinvoke r37.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r33, 4);

     label008:
        r38 = r39;

     label009:
        virtualinvoke r39.<android.content.Context: void setTheme(int)>(i7);

     label010:
        r38 = r39;

        goto label012;

     label011:
        $r20 := @caughtexception;

     label012:
        r40 = r38;

        if r36 == null goto label019;

        r40 = r38;

     label013:
        $r9 = <android.content.res.Configuration: android.content.res.Configuration EMPTY>;

        $z1 = virtualinvoke r36.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r9);

        if $z1 != 0 goto label019;

        r41 = virtualinvoke r38.<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>(r36);

        virtualinvoke r41.<android.content.Context: void setTheme(int)>(i7);

        $r10 = <com.android.internal.R$styleable: int[] Window>;

        r42 = virtualinvoke r41.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r10);

        i9 = virtualinvoke r42.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

     label014:
        r43 = r38;

        if i9 == 0 goto label017;

        r43 = r38;

     label015:
        $r11 = virtualinvoke r41.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i9);

        if $r11 == null goto label017;

     label016:
        r43 = r41;

     label017:
        virtualinvoke r42.<android.content.res.TypedArray: void recycle()>();

     label018:
        r40 = r43;

     label019:
        r1 = new com.android.internal.policy.PhoneWindow;

        specialinvoke r1.<com.android.internal.policy.PhoneWindow: void <init>(android.content.Context)>(r40);

        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setIsStartingWindow(boolean)>(1);

        $r44 = virtualinvoke r40.<android.content.Context: android.content.res.Resources getResources()>();

        r45 = virtualinvoke $r44.<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>(i0, null);

     label020:
        if r45 == null goto label023;

     label021:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setTitle(java.lang.CharSequence,boolean)>(r45, 1);

     label022:
        goto label024;

     label023:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setTitle(java.lang.CharSequence,boolean)>(r35, 0);

     label024:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setType(int)>(3);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        r46 = interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: java.lang.Object getWindowManagerLock()>();

        entermonitor r46;

     label025:
        if i3 != 0 goto label029;

     label026:
        z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

     label027:
        if z0 == 0 goto label029;

        i8 = i8 | 524288;

        goto label029;

     label028:
        $r30 := @caughtexception;

        r47 = $r30;

        goto label083;

     label029:
        exitmonitor r46;

     label030:
        $i10 = i8 | 16;

        $i11 = $i10 | 8;

        $i12 = $i11 | 131072;

        $i13 = i8 | 16;

        $i14 = $i13 | 8;

        $i15 = $i14 | 131072;

        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>($i12, $i15);

     label031:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label032:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setDefaultIcon(int)>(i1);

     label033:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label034:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setDefaultLogo(int)>(i2);

     label035:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label036:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow: void setLayout(int,int)>(-1, -1);

     label037:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label038:
        r54 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

     label039:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label040:
        r54.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = r32;

     label041:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label042:
        r54.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = r33;

     label043:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label044:
        $r55 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $i16 = virtualinvoke $r55.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        r54.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i16;

     label045:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label046:
        $i17 = r54.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i18 = $i17 | 1;

        r54.<android.view.WindowManager$LayoutParams: int privateFlags> = $i18;

     label047:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label048:
        $i19 = r54.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i20 = $i19 | 16;

        r54.<android.view.WindowManager$LayoutParams: int privateFlags> = $i20;

     label049:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label050:
        $z2 = virtualinvoke r34.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        if $z2 != 0 goto label053;

     label051:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label052:
        $i5 = r54.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i6 = $i5 | 128;

        r54.<android.view.WindowManager$LayoutParams: int privateFlags> = $i6;

     label053:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label054:
        r56 = new java.lang.StringBuilder;

     label055:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label056:
        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

     label057:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label058:
        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Splash Screen ");

     label059:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label060:
        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

     label061:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label062:
        $r4 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r54.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r4);

     label063:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label064:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void addSplashscreenContent(com.android.internal.policy.PhoneWindow,android.content.Context)>(r1, r40);

     label065:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label066:
        $r5 = virtualinvoke r40.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r57 = (android.view.WindowManager) $r5;

     label067:
        r48 = r57;

        r49 = null;

        r50 = r57;

        r51 = null;

        r52 = r57;

        r53 = null;

     label068:
        r58 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow: android.view.View getDecorView()>();

     label069:
        r48 = r57;

        r49 = r58;

        r50 = r57;

        r51 = r58;

        r52 = r57;

        r53 = r58;

     label070:
        interfaceinvoke r57.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r58, r54);

     label071:
        r48 = r57;

        r49 = r58;

        r50 = r57;

        r51 = r58;

        r52 = r57;

        r53 = r58;

     label072:
        $r6 = virtualinvoke r58.<android.view.View: android.view.ViewParent getParent()>();

        if $r6 == null goto label076;

     label073:
        r48 = r57;

        r49 = r58;

        r50 = r57;

        r51 = r58;

        r52 = r57;

        r53 = r58;

     label074:
        $r8 = new com.android.server.policy.SplashScreenSurface;

        specialinvoke $r8.<com.android.server.policy.SplashScreenSurface: void <init>(android.view.View,android.os.IBinder)>(r58, r32);

     label075:
        r60 = $r8;

        goto label077;

     label076:
        r60 = null;

     label077:
        if r58 == null goto label078;

        $r7 = virtualinvoke r58.<android.view.View: android.view.ViewParent getParent()>();

        if $r7 != null goto label078;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r57.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r58);

     label078:
        return r60;

     label079:
        $r31 := @caughtexception;

        r61 = $r31;

        r52 = null;

        r53 = null;

        goto label125;

     label080:
        $r25 := @caughtexception;

        r62 = $r25;

        r63 = null;

        r64 = null;

        goto label096;

     label081:
        $r29 := @caughtexception;

        r65 = $r29;

        r66 = null;

        r67 = null;

        goto label110;

     label082:
        $r22 := @caughtexception;

        r47 = $r22;

     label083:
        exitmonitor r46;

     label084:
        r48 = null;

        r49 = null;

        r50 = null;

        r51 = null;

        r52 = null;

        r53 = null;

     label085:
        throw r47;

     label086:
        $r19 := @caughtexception;

        r62 = $r19;

        r63 = r48;

        r64 = r49;

        goto label096;

     label087:
        $r23 := @caughtexception;

        r65 = $r23;

        r66 = r50;

        r67 = r51;

        goto label110;

     label088:
        $r21 := @caughtexception;

        r47 = $r21;

        goto label083;

     label089:
        $r17 := @caughtexception;

        r61 = $r17;

        goto label093;

     label090:
        $r13 := @caughtexception;

        r62 = $r13;

        goto label095;

     label091:
        $r15 := @caughtexception;

        r65 = $r15;

        goto label109;

     label092:
        $r24 := @caughtexception;

        r61 = $r24;

     label093:
        r52 = null;

        r53 = null;

        goto label125;

     label094:
        $r26 := @caughtexception;

        r62 = $r26;

     label095:
        r64 = null;

        r63 = null;

     label096:
        r52 = r63;

        r53 = r64;

     label097:
        r68 = new java.lang.StringBuilder;

     label098:
        r52 = r63;

        r53 = r64;

     label099:
        specialinvoke r68.<java.lang.StringBuilder: void <init>()>();

     label100:
        r52 = r63;

        r53 = r64;

     label101:
        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

     label102:
        r52 = r63;

        r53 = r64;

     label103:
        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed creating starting window");

     label104:
        r52 = r63;

        r53 = r64;

     label105:
        $r69 = virtualinvoke r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r69, r62);

     label106:
        if r64 == null goto label123;

        $r14 = virtualinvoke r64.<android.view.View: android.view.ViewParent getParent()>();

        if $r14 != null goto label123;

        r70 = r63;

     label107:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r70.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r64);

        goto label123;

     label108:
        $r28 := @caughtexception;

        r65 = $r28;

     label109:
        r67 = null;

        r66 = null;

     label110:
        r52 = r66;

        r53 = r67;

     label111:
        r71 = new java.lang.StringBuilder;

     label112:
        r52 = r66;

        r53 = r67;

     label113:
        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

     label114:
        r52 = r66;

        r53 = r67;

     label115:
        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

     label116:
        r52 = r66;

        r53 = r67;

     label117:
        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already running, starting window not displayed. ");

     label118:
        r52 = r66;

        r53 = r67;

     label119:
        $r72 = virtualinvoke r65.<android.view.WindowManager$BadTokenException: java.lang.String getMessage()>();

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

     label120:
        r52 = r66;

        r53 = r67;

     label121:
        $r73 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r73);

     label122:
        if r67 == null goto label123;

        $r16 = virtualinvoke r67.<android.view.View: android.view.ViewParent getParent()>();

        if $r16 != null goto label123;

        r70 = r66;

        r64 = r67;

        goto label107;

     label123:
        return null;

     label124:
        $r27 := @caughtexception;

        r61 = $r27;

     label125:
        if r53 == null goto label126;

        $r18 = virtualinvoke r53.<android.view.View: android.view.ViewParent getParent()>();

        if $r18 != null goto label126;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "view not successfully added to wm, removing view");

        interfaceinvoke r52.<android.view.WindowManager: void removeViewImmediate(android.view.View)>(r53);

     label126:
        throw r61;

        catch android.view.WindowManager$BadTokenException from label001 to label002 with label108;
        catch java.lang.RuntimeException from label001 to label002 with label094;
        catch java.lang.Throwable from label001 to label002 with label092;
        catch android.view.WindowManager$BadTokenException from label004 to label005 with label108;
        catch java.lang.RuntimeException from label004 to label005 with label094;
        catch java.lang.Throwable from label004 to label005 with label092;
        catch android.content.pm.PackageManager$NameNotFoundException from label007 to label008 with label011;
        catch android.view.WindowManager$BadTokenException from label007 to label008 with label108;
        catch java.lang.RuntimeException from label007 to label008 with label094;
        catch java.lang.Throwable from label007 to label008 with label092;
        catch android.content.pm.PackageManager$NameNotFoundException from label009 to label010 with label011;
        catch android.view.WindowManager$BadTokenException from label009 to label010 with label108;
        catch java.lang.RuntimeException from label009 to label010 with label094;
        catch java.lang.Throwable from label009 to label010 with label092;
        catch android.view.WindowManager$BadTokenException from label013 to label014 with label108;
        catch java.lang.RuntimeException from label013 to label014 with label094;
        catch java.lang.Throwable from label013 to label014 with label092;
        catch android.view.WindowManager$BadTokenException from label015 to label016 with label108;
        catch java.lang.RuntimeException from label015 to label016 with label094;
        catch java.lang.Throwable from label015 to label016 with label092;
        catch android.view.WindowManager$BadTokenException from label017 to label018 with label108;
        catch java.lang.RuntimeException from label017 to label018 with label094;
        catch java.lang.Throwable from label017 to label018 with label092;
        catch android.view.WindowManager$BadTokenException from label019 to label020 with label108;
        catch java.lang.RuntimeException from label019 to label020 with label094;
        catch java.lang.Throwable from label019 to label020 with label092;
        catch android.view.WindowManager$BadTokenException from label021 to label022 with label108;
        catch java.lang.RuntimeException from label021 to label022 with label094;
        catch java.lang.Throwable from label021 to label022 with label092;
        catch android.view.WindowManager$BadTokenException from label023 to label024 with label091;
        catch java.lang.RuntimeException from label023 to label024 with label090;
        catch java.lang.Throwable from label023 to label024 with label089;
        catch android.view.WindowManager$BadTokenException from label024 to label025 with label091;
        catch java.lang.RuntimeException from label024 to label025 with label090;
        catch java.lang.Throwable from label024 to label025 with label089;
        catch java.lang.Throwable from label026 to label027 with label028;
        catch java.lang.Throwable from label029 to label030 with label082;
        catch android.view.WindowManager$BadTokenException from label030 to label031 with label081;
        catch java.lang.RuntimeException from label030 to label031 with label080;
        catch java.lang.Throwable from label030 to label031 with label079;
        catch android.view.WindowManager$BadTokenException from label032 to label033 with label087;
        catch java.lang.RuntimeException from label032 to label033 with label086;
        catch java.lang.Throwable from label032 to label033 with label124;
        catch android.view.WindowManager$BadTokenException from label034 to label035 with label087;
        catch java.lang.RuntimeException from label034 to label035 with label086;
        catch java.lang.Throwable from label034 to label035 with label124;
        catch android.view.WindowManager$BadTokenException from label036 to label037 with label087;
        catch java.lang.RuntimeException from label036 to label037 with label086;
        catch java.lang.Throwable from label036 to label037 with label124;
        catch android.view.WindowManager$BadTokenException from label038 to label039 with label087;
        catch java.lang.RuntimeException from label038 to label039 with label086;
        catch java.lang.Throwable from label038 to label039 with label124;
        catch android.view.WindowManager$BadTokenException from label040 to label041 with label087;
        catch java.lang.RuntimeException from label040 to label041 with label086;
        catch java.lang.Throwable from label040 to label041 with label124;
        catch android.view.WindowManager$BadTokenException from label042 to label043 with label087;
        catch java.lang.RuntimeException from label042 to label043 with label086;
        catch java.lang.Throwable from label042 to label043 with label124;
        catch android.view.WindowManager$BadTokenException from label044 to label045 with label087;
        catch java.lang.RuntimeException from label044 to label045 with label086;
        catch java.lang.Throwable from label044 to label045 with label124;
        catch android.view.WindowManager$BadTokenException from label046 to label047 with label087;
        catch java.lang.RuntimeException from label046 to label047 with label086;
        catch java.lang.Throwable from label046 to label047 with label124;
        catch android.view.WindowManager$BadTokenException from label048 to label049 with label087;
        catch java.lang.RuntimeException from label048 to label049 with label086;
        catch java.lang.Throwable from label048 to label049 with label124;
        catch android.view.WindowManager$BadTokenException from label050 to label051 with label087;
        catch java.lang.RuntimeException from label050 to label051 with label086;
        catch java.lang.Throwable from label050 to label051 with label124;
        catch android.view.WindowManager$BadTokenException from label052 to label053 with label087;
        catch java.lang.RuntimeException from label052 to label053 with label086;
        catch java.lang.Throwable from label052 to label053 with label124;
        catch android.view.WindowManager$BadTokenException from label054 to label055 with label087;
        catch java.lang.RuntimeException from label054 to label055 with label086;
        catch java.lang.Throwable from label054 to label055 with label124;
        catch android.view.WindowManager$BadTokenException from label056 to label057 with label087;
        catch java.lang.RuntimeException from label056 to label057 with label086;
        catch java.lang.Throwable from label056 to label057 with label124;
        catch android.view.WindowManager$BadTokenException from label058 to label059 with label087;
        catch java.lang.RuntimeException from label058 to label059 with label086;
        catch java.lang.Throwable from label058 to label059 with label124;
        catch android.view.WindowManager$BadTokenException from label060 to label061 with label087;
        catch java.lang.RuntimeException from label060 to label061 with label086;
        catch java.lang.Throwable from label060 to label061 with label124;
        catch android.view.WindowManager$BadTokenException from label062 to label063 with label087;
        catch java.lang.RuntimeException from label062 to label063 with label086;
        catch java.lang.Throwable from label062 to label063 with label124;
        catch android.view.WindowManager$BadTokenException from label064 to label065 with label087;
        catch java.lang.RuntimeException from label064 to label065 with label086;
        catch java.lang.Throwable from label064 to label065 with label124;
        catch android.view.WindowManager$BadTokenException from label066 to label067 with label087;
        catch java.lang.RuntimeException from label066 to label067 with label086;
        catch java.lang.Throwable from label066 to label067 with label124;
        catch android.view.WindowManager$BadTokenException from label068 to label069 with label087;
        catch java.lang.RuntimeException from label068 to label069 with label086;
        catch java.lang.Throwable from label068 to label069 with label124;
        catch android.view.WindowManager$BadTokenException from label070 to label071 with label087;
        catch java.lang.RuntimeException from label070 to label071 with label086;
        catch java.lang.Throwable from label070 to label071 with label124;
        catch android.view.WindowManager$BadTokenException from label072 to label073 with label087;
        catch java.lang.RuntimeException from label072 to label073 with label086;
        catch java.lang.Throwable from label072 to label073 with label124;
        catch android.view.WindowManager$BadTokenException from label074 to label075 with label087;
        catch java.lang.RuntimeException from label074 to label075 with label086;
        catch java.lang.Throwable from label074 to label075 with label124;
        catch java.lang.Throwable from label083 to label084 with label088;
        catch android.view.WindowManager$BadTokenException from label085 to label086 with label087;
        catch java.lang.RuntimeException from label085 to label086 with label086;
        catch java.lang.Throwable from label085 to label086 with label124;
        catch java.lang.Throwable from label097 to label098 with label124;
        catch java.lang.Throwable from label099 to label100 with label124;
        catch java.lang.Throwable from label101 to label102 with label124;
        catch java.lang.Throwable from label103 to label104 with label124;
        catch java.lang.Throwable from label105 to label106 with label124;
        catch java.lang.Throwable from label111 to label112 with label124;
        catch java.lang.Throwable from label113 to label114 with label124;
        catch java.lang.Throwable from label115 to label116 with label124;
        catch java.lang.Throwable from label117 to label118 with label124;
        catch java.lang.Throwable from label119 to label120 with label124;
        catch java.lang.Throwable from label121 to label122 with label124;
    }

    public void adjustConfigurationLw(android.content.res.Configuration, int, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.res.Configuration r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 & 1;

        if $i2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mHaveBuiltInKeyboard> = z3;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void readConfigurationDependentBehaviors()>();

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void readLidState()>();

        $i3 = r1.<android.content.res.Configuration: int keyboard>;

        if $i3 == 1 goto label3;

        if i0 != 1 goto label4;

        $i5 = r0.<com.android.server.policy.PhoneWindowManager: int mLidKeyboardAccessibility>;

        $z2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isHidden(int)>($i5);

        if $z2 == 0 goto label4;

     label3:
        r1.<android.content.res.Configuration: int hardKeyboardHidden> = 2;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasSoftInput>;

        if $z0 != 0 goto label4;

        r1.<android.content.res.Configuration: int keyboardHidden> = 2;

     label4:
        $i6 = r1.<android.content.res.Configuration: int navigation>;

        if $i6 == 1 goto label5;

        if i1 != 1 goto label6;

        $i4 = r0.<com.android.server.policy.PhoneWindowManager: int mLidNavigationAccessibility>;

        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isHidden(int)>($i4);

        if $z1 == 0 goto label6;

     label5:
        r1.<android.content.res.Configuration: int navigationHidden> = 2;

     label6:
        return;
    }

    public void applyKeyguardPolicyLw(com.android.server.policy.WindowManagerPolicy$WindowState, com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowState r1, r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        r2 := @parameter1: com.android.server.policy.WindowManagerPolicy$WindowState;

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r1);

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean shouldBeHiddenByKeyguard(com.android.server.policy.WindowManagerPolicy$WindowState,com.android.server.policy.WindowManagerPolicy$WindowState)>(r1, r2);

        if $z1 == 0 goto label1;

        interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean hideLw(boolean)>(0);

        goto label2;

     label1:
        interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean showLw(boolean)>(0);

     label2:
        return;
    }

    public boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowState r1;
        android.view.IApplicationToken r2;
        int i0, $i1, $i2;
        android.view.WindowManager$LayoutParams $r3;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        r2 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: android.view.IApplicationToken getAppToken()>();

        z0 = 0;

        if r2 == null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if i0 == 2000 goto label3;

        if i0 == 2013 goto label3;

        if i0 == 2019 goto label3;

        if i0 == 2040 goto label3;

        $i1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: int getWindowLayerLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r1);

        $i2 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: int getWindowLayerFromTypeLw(int)>(2040);

        if $i1 >= $i2 goto label2;

        z0 = 1;

     label2:
        return z0;

     label3:
        return 0;
    }

    public boolean canDismissBootAnimation()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.wm.DisplayPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean isKeyguardDrawComplete()>();

        return $z0;
    }

    public int checkAddPermission(int, boolean, java.lang.String, int[])
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z1;
        java.lang.String r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i12;
        android.content.Context $r3, $r5, $r6, $r7;
        android.app.AppOpsManager $r4;
        android.content.pm.PackageManager$NameNotFoundException $r8, $r9;
        byte b11;
        android.content.pm.PackageManager r10;
        android.content.pm.ApplicationInfo r11;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i10 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: int[];

        b11 = -8;

        if z0 == 0 goto label01;

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i9 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        if $i9 == 0 goto label01;

        return -8;

     label01:
        r2[0] = -1;

        if i10 < 1 goto label02;

        if i10 <= 99 goto label04;

     label02:
        if i10 < 1000 goto label03;

        if i10 <= 1999 goto label04;

     label03:
        if i10 < 2000 goto label26;

        if i10 <= 2999 goto label04;

        goto label26;

     label04:
        if i10 < 2000 goto label25;

        if i10 <= 2999 goto label05;

        goto label25;

     label05:
        $z1 = staticinvoke <android.view.WindowManager$LayoutParams: boolean isSystemAlertWindowType(int)>(i10);

        if $z1 != 0 goto label10;

        if i10 == 2005 goto label09;

        if i10 == 2011 goto label08;

        if i10 == 2013 goto label08;

        if i10 == 2024 goto label08;

        if i10 == 2035 goto label08;

        if i10 == 2037 goto label08;

        tableswitch(i10)
        {
            case 2030: goto label08;
            case 2031: goto label08;
            case 2032: goto label08;
            default: goto label06;
        };

     label06:
        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i8 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        if $i8 != 0 goto label07;

        b11 = 0;

        goto label07;

     label07:
        return b11;

     label08:
        return 0;

     label09:
        r2[0] = 45;

        return 0;

     label10:
        r2[0] = 24;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i2 != 1000 goto label11;

        return 0;

     label11:
        r10 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

     label12:
        r11 = virtualinvoke r10.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r1, 0, i1);

     label13:
        goto label17;

     label14:
        $r8 := @caughtexception;

        goto label16;

     label15:
        $r9 := @caughtexception;

     label16:
        r11 = null;

     label17:
        if r11 == null goto label23;

        if i10 == 2038 goto label18;

        $i7 = r11.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i7 < 26 goto label18;

        goto label23;

     label18:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.app.AppOpsManager mAppOpsManager>;

        $i4 = r2[0];

        i12 = virtualinvoke $r4.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>($i4, i0, r1, null, "check-add");

        if i12 == 0 goto label22;

        if i12 == 1 goto label22;

        if i12 == 2 goto label20;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i6 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SYSTEM_ALERT_WINDOW");

        if $i6 != 0 goto label19;

        b11 = 0;

        goto label19;

     label19:
        return b11;

     label20:
        $i5 = r11.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i5 >= 23 goto label21;

        return 0;

     label21:
        return -8;

     label22:
        return 0;

     label23:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i3 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        if $i3 != 0 goto label24;

        b11 = 0;

        goto label24;

     label24:
        return b11;

     label25:
        return 0;

     label26:
        return -10;

        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label15;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label14;
    }

    public android.view.animation.Animation createHiddenByKeyguardExit(boolean, boolean, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1, z2;
        android.view.animation.AnimationSet r1;
        java.util.List r2;
        java.lang.Object $r3;
        com.android.server.policy.LogDecelerateInterpolator $r4;
        android.view.animation.Animation $r5, $r7, $r9;
        android.content.Context $r6, $r8;
        int i0, $i1, i2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        if z1 == 0 goto label1;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r7 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r6, 17432684);

        return $r7;

     label1:
        if z2 == 0 goto label2;

        i0 = 17432685;

        goto label4;

     label2:
        if z0 == 0 goto label3;

        i0 = 17432686;

        goto label4;

     label3:
        i0 = 17432683;

     label4:
        $r8 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r9 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r8, i0);

        r1 = (android.view.animation.AnimationSet) $r9;

        r2 = virtualinvoke r1.<android.view.animation.AnimationSet: java.util.List getAnimations()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label5:
        if i2 < 0 goto label6;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (android.view.animation.Animation) $r3;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.LogDecelerateInterpolator mLogDecelerateInterpolator>;

        virtualinvoke $r5.<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>($r4);

        i2 = i2 + -1;

        goto label5;

     label6:
        return r1;
    }

    android.content.Intent createHomeDockIntent()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.pm.ResolveInfo r1;
        int $i0, i1, i2;
        android.content.pm.PackageManager $r2;
        android.os.Bundle $r3, $r4;
        boolean $z0, $z1;
        android.content.Intent $r5, r9;
        java.lang.String $r6, $r7;
        com.android.server.wm.DisplayPolicy $r8;
        android.content.pm.ActivityInfo r10;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r9 = null;

        i1 = r0.<com.android.server.policy.PhoneWindowManager: int mUiMode>;

        if i1 != 3 goto label1;

        r9 = null;

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableCarDockHomeCapture>;

        if $z1 == 0 goto label6;

        r9 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        goto label6;

     label1:
        if i1 != 2 goto label2;

        r9 = null;

        goto label6;

     label2:
        if i1 != 6 goto label5;

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        i2 = virtualinvoke $r8.<com.android.server.wm.DisplayPolicy: int getDockMode()>();

        if i2 == 1 goto label3;

        if i2 == 4 goto label3;

        if i2 != 3 goto label4;

     label3:
        r9 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

     label4:
        goto label6;

     label5:
        if i1 != 7 goto label4;

        r9 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mVrHeadsetHomeIntent>;

     label6:
        if r9 != null goto label7;

        return null;

     label7:
        r10 = null;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        r1 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent,int,int)>(r9, 65664, $i0);

        if r1 == null goto label8;

        r10 = r1.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

     label8:
        if r10 == null goto label9;

        $r3 = r10.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r3 == null goto label9;

        $r4 = r10.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $z0 = virtualinvoke $r4.<android.os.Bundle: boolean getBoolean(java.lang.String)>("android.dock_home");

        if $z0 == 0 goto label9;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(android.content.Intent)>(r9);

        $r7 = r10.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r6 = r10.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r7, $r6);

        return $r5;

     label9:
        return null;
    }

    public android.view.animation.Animation createKeyguardWallpaperExit(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        android.content.Context $r1;
        android.view.animation.Animation $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r1, 17432689);

        return $r2;
    }

    public void dismissKeyguardLw(com.android.internal.policy.IKeyguardDismissCallback, java.lang.CharSequence)
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.CharSequence r1;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r2, $r3;
        boolean $z0;
        android.os.RemoteException $r4;
        com.android.internal.policy.IKeyguardDismissCallback r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r5 := @parameter0: com.android.internal.policy.IKeyguardDismissCallback;

        r1 := @parameter1: java.lang.CharSequence;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void dismiss(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>(r5, r1);

        goto label5;

     label1:
        if r5 == null goto label5;

     label2:
        interfaceinvoke r5.<com.android.internal.policy.IKeyguardDismissCallback: void onDismissError()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to call callback", $r4);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    void dispatchMediaKeyRepeatWithWakeLock(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.KeyEvent r1, $r2;
        long $l0;
        int $i1, $i2;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 0;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = $i1 | 128;

        $r2 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>(r1, $l0, 1, $i2);

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)>($r2);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

        return;
    }

    void dispatchMediaKeyWithWakeLock(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        int $i0, $i1, $i2;
        android.os.PowerManager$WakeLock $r1, $r5;
        android.os.Handler $r2, $r3, $r4;
        long $l3;
        android.view.KeyEvent r6;
        android.os.Message r7;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r6 := @parameter0: android.view.KeyEvent;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(4);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 0;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)>(r6);

        $i0 = virtualinvoke r6.<android.view.KeyEvent: int getAction()>();

        if $i0 != 0 goto label2;

        $i1 = virtualinvoke r6.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label2;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHavePendingMediaKeyRepeatWithWakeLock> = 1;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r7 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r6);

        virtualinvoke r7.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $i2 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatTimeout()>();

        $l3 = (long) $i2;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r7, $l3);

        goto label3;

     label2:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

     label3:
        return;
    }

    void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.KeyEvent r1;
        android.app.ActivityManagerInternal $r2;
        boolean $z0;
        android.content.Context $r3;
        android.media.session.MediaSessionLegacyHelper $r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.app.ActivityManagerInternal mActivityManagerInternal>;

        $z0 = virtualinvoke $r2.<android.app.ActivityManagerInternal: boolean isSystemReady()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r3);

        virtualinvoke $r4.<android.media.session.MediaSessionLegacyHelper: void sendMediaButtonEvent(android.view.KeyEvent,boolean)>(r1, 1);

     label1:
        return;
    }

    public android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.KeyEvent r1, r2, r10, r11;
        int i0, i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        android.util.SparseArray $r3, $r5, $r6;
        java.lang.Object $r4;
        long $l5, $l6;
        boolean $z0, z1;
        android.os.IBinder r7;
        android.view.KeyCharacterMap r8;
        android.view.KeyCharacterMap$FallbackAction r9;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r7 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i3 = $i2 & 1024;

        if $i3 != 0 goto label8;

        r8 = virtualinvoke r1.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        i18 = virtualinvoke r1.<android.view.KeyEvent: int getMetaState()>();

        $i4 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i4 != 0 goto label1;

        $i17 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i17 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label3;

        r9 = virtualinvoke r8.<android.view.KeyCharacterMap: android.view.KeyCharacterMap$FallbackAction getFallbackAction(int,int)>(i1, i18);

        goto label4;

     label3:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r9 = (android.view.KeyCharacterMap$FallbackAction) $r4;

     label4:
        if r9 == null goto label7;

        i19 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $l5 = virtualinvoke r1.<android.view.KeyEvent: long getDownTime()>();

        $l6 = virtualinvoke r1.<android.view.KeyEvent: long getEventTime()>();

        $i7 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        $i8 = r9.<android.view.KeyCharacterMap$FallbackAction: int keyCode>;

        $i9 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        $i10 = r9.<android.view.KeyCharacterMap$FallbackAction: int metaState>;

        $i11 = virtualinvoke r1.<android.view.KeyEvent: int getDeviceId()>();

        $i12 = virtualinvoke r1.<android.view.KeyEvent: int getScanCode()>();

        $i13 = i19 | 1024;

        $i14 = virtualinvoke r1.<android.view.KeyEvent: int getSource()>();

        $i15 = virtualinvoke r1.<android.view.KeyEvent: int getDisplayId()>();

        r2 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(long,long,int,int,int,int,int,int,int,int,int,java.lang.String)>($l5, $l6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, null);

        r10 = r2;

        $z0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean interceptFallback(android.os.IBinder,android.view.KeyEvent,int)>(r7, r2, i0);

        if $z0 != 0 goto label5;

        virtualinvoke r2.<android.view.KeyEvent: void recycle()>();

        r10 = null;

     label5:
        if z1 == 0 goto label6;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r9);

        r11 = r10;

        goto label9;

     label6:
        r11 = r10;

        $i16 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i16 != 1 goto label9;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mFallbackActions>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>(i1);

        virtualinvoke r9.<android.view.KeyCharacterMap$FallbackAction: void recycle()>();

        r11 = r10;

        goto label9;

     label7:
        r11 = null;

        goto label9;

     label8:
        r11 = null;

     label9:
        return r11;
    }

    public void dump(java.lang.String, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        android.util.SparseArray $r19, $r28, $r29;
        java.util.HashSet $r20;
        com.android.server.policy.GlobalKeyManager $r21;
        android.os.Handler $r22;
        android.util.PrintWriterPrinter $r23;
        java.lang.StringBuilder $r24;
        java.lang.Object $r30;
        java.io.PrintWriter r31;
        java.lang.String[] r32;
        com.android.server.policy.PhoneWindowManager$MyWakeGestureListener r33;
        com.android.server.policy.BurnInProtectionHelper r34;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r35;
        android.os.Looper r36;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        r31 := @parameter1: java.io.PrintWriter;

        r32 := @parameter2: java.lang.String[];

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mSafeMode=");

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSafeMode>;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mSystemReady=");

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemReady>;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mSystemBooted=");

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemBooted>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mCameraLensCoverState=");

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mCameraLensCoverState>;

        $r3 = staticinvoke <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: java.lang.String cameraLensStateToString(int)>($i1);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mWakeGestureEnabledSetting=");

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeGestureEnabledSetting>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mUiMode=");

        $i2 = r0.<com.android.server.policy.PhoneWindowManager: int mUiMode>;

        $r4 = staticinvoke <android.content.res.Configuration: java.lang.String uiModeToString(int)>($i2);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mEnableCarDockHomeCapture=");

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableCarDockHomeCapture>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mLidKeyboardAccessibility=");

        $i3 = r0.<com.android.server.policy.PhoneWindowManager: int mLidKeyboardAccessibility>;

        virtualinvoke r31.<java.io.PrintWriter: void print(int)>($i3);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mLidNavigationAccessibility=");

        $i4 = r0.<com.android.server.policy.PhoneWindowManager: int mLidNavigationAccessibility>;

        virtualinvoke r31.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" getLidBehavior=");

        $i5 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getLidBehavior()>();

        $r5 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String lidBehaviorToString(int)>($i5);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mLongPressOnBackBehavior=");

        $i6 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnBackBehavior>;

        $r6 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String longPressOnBackBehaviorToString(int)>($i6);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mLongPressOnHomeBehavior=");

        $i7 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnHomeBehavior>;

        $r7 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String longPressOnHomeBehaviorToString(int)>($i7);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mDoubleTapOnHomeBehavior=");

        $i8 = r0.<com.android.server.policy.PhoneWindowManager: int mDoubleTapOnHomeBehavior>;

        $r8 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String doubleTapOnHomeBehaviorToString(int)>($i8);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mShortPressOnPowerBehavior=");

        $i9 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnPowerBehavior>;

        $r9 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String shortPressOnPowerBehaviorToString(int)>($i9);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mLongPressOnPowerBehavior=");

        $i10 = r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnPowerBehavior>;

        $r10 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String longPressOnPowerBehaviorToString(int)>($i10);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mVeryLongPressOnPowerBehavior=");

        $i11 = r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressOnPowerBehavior>;

        $r11 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String veryLongPressOnPowerBehaviorToString(int)>($i11);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mDoublePressOnPowerBehavior=");

        $i12 = r0.<com.android.server.policy.PhoneWindowManager: int mDoublePressOnPowerBehavior>;

        $r12 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String multiPressOnPowerBehaviorToString(int)>($i12);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mTriplePressOnPowerBehavior=");

        $i13 = r0.<com.android.server.policy.PhoneWindowManager: int mTriplePressOnPowerBehavior>;

        $r13 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String multiPressOnPowerBehaviorToString(int)>($i13);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mShortPressOnSleepBehavior=");

        $i14 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnSleepBehavior>;

        $r14 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String shortPressOnSleepBehaviorToString(int)>($i14);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mShortPressOnWindowBehavior=");

        $i15 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnWindowBehavior>;

        $r15 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String shortPressOnWindowBehaviorToString(int)>($i15);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mAllowStartActivityForLongPressOnPowerDuringSetup=");

        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowStartActivityForLongPressOnPowerDuringSetup>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z5);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mHasSoftInput=");

        $z6 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasSoftInput>;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mHapticTextHandleEnabled=");

        $z7 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHapticTextHandleEnabled>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z7);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mDismissImeOnBackKeyPressed=");

        $z8 = r0.<com.android.server.policy.PhoneWindowManager: boolean mDismissImeOnBackKeyPressed>;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z8);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mIncallPowerBehavior=");

        $i16 = r0.<com.android.server.policy.PhoneWindowManager: int mIncallPowerBehavior>;

        $r16 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String incallPowerBehaviorToString(int)>($i16);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mIncallBackBehavior=");

        $i17 = r0.<com.android.server.policy.PhoneWindowManager: int mIncallBackBehavior>;

        $r17 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String incallBackBehaviorToString(int)>($i17);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>($r17);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mEndcallBehavior=");

        $i18 = r0.<com.android.server.policy.PhoneWindowManager: int mEndcallBehavior>;

        $r18 = staticinvoke <com.android.server.policy.PhoneWindowManager: java.lang.String endcallBehaviorToString(int)>($i18);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mDisplayHomeButtonHandlers=");

        i21 = 0;

     label1:
        $r19 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mDisplayHomeButtonHandlers>;

        $i19 = virtualinvoke $r19.<android.util.SparseArray: int size()>();

        if i21 >= $i19 goto label2;

        $r28 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mDisplayHomeButtonHandlers>;

        i0 = virtualinvoke $r28.<android.util.SparseArray: int keyAt(int)>(i21);

        $r29 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mDisplayHomeButtonHandlers>;

        $r30 = virtualinvoke $r29.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.Object)>($r30);

        i21 = i21 + 1;

        goto label1;

     label2:
        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mKeyguardOccluded=");

        $z9 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z9);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mKeyguardOccludedChanged=");

        $z10 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccludedChanged>;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z10);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingKeyguardOccluded=");

        $z11 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingKeyguardOccluded>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z11);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mAllowLockscreenWhenOnDisplays=");

        $r20 = r0.<com.android.server.policy.PhoneWindowManager: java.util.HashSet mAllowLockscreenWhenOnDisplays>;

        $z12 = virtualinvoke $r20.<java.util.HashSet: boolean isEmpty()>();

        $z13 = $z12 ^ 1;

        virtualinvoke r31.<java.io.PrintWriter: void print(boolean)>($z13);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mLockScreenTimeout=");

        $i20 = r0.<com.android.server.policy.PhoneWindowManager: int mLockScreenTimeout>;

        virtualinvoke r31.<java.io.PrintWriter: void print(int)>($i20);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(" mLockScreenTimerActive=");

        $z14 = r0.<com.android.server.policy.PhoneWindowManager: boolean mLockScreenTimerActive>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z14);

        $z15 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureLeanback>;

        if $z15 == 0 goto label3;

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mAccessibilityTvKey1Pressed=");

        $z16 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvKey1Pressed>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z16);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mAccessibilityTvKey2Pressed=");

        $z17 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvKey2Pressed>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z17);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>("mAccessibilityTvScheduled=");

        $z18 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAccessibilityTvScheduled>;

        virtualinvoke r31.<java.io.PrintWriter: void println(boolean)>($z18);

     label3:
        $r21 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalKeyManager mGlobalKeyManager>;

        virtualinvoke $r21.<com.android.server.policy.GlobalKeyManager: void dump(java.lang.String,java.io.PrintWriter)>(r1, r31);

        r33 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener>;

        if r33 == null goto label4;

        virtualinvoke r33.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: void dump(java.io.PrintWriter,java.lang.String)>(r31, r1);

     label4:
        r34 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.BurnInProtectionHelper mBurnInProtectionHelper>;

        if r34 == null goto label5;

        virtualinvoke r34.<com.android.server.policy.BurnInProtectionHelper: void dump(java.lang.String,java.io.PrintWriter)>(r1, r31);

     label5:
        r35 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r35 == null goto label6;

        virtualinvoke r35.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void dump(java.lang.String,java.io.PrintWriter)>(r1, r31);

     label6:
        virtualinvoke r31.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r31.<java.io.PrintWriter: void println(java.lang.String)>("Looper state:");

        $r22 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r36 = virtualinvoke $r22.<android.os.Handler: android.os.Looper getLooper()>();

        $r23 = new android.util.PrintWriterPrinter;

        specialinvoke $r23.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r31);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r36.<android.os.Looper: void dump(android.util.Printer,java.lang.String)>($r23, $r27);

        return;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.util.proto.ProtoOutputStream r1;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r2;
        com.android.server.wm.DisplayRotation $r3, $r4, $r5;
        int $i0, $i1, $i2;
        com.android.server.wm.DisplayPolicy $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        long l3, l4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l3 := @parameter1: long;

        l4 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l3);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.DisplayRotation: int getUserRotationMode()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169922L, $i0);

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        $i1 = virtualinvoke $r4.<com.android.server.wm.DisplayRotation: int getUserRotation()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169923L, $i1);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        $i2 = virtualinvoke $r5.<com.android.server.wm.DisplayRotation: int getCurrentAppOrientation()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169924L, $i2);

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r6.<com.android.server.wm.DisplayPolicy: boolean isScreenOnFully()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z0);

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z1 = virtualinvoke $r7.<com.android.server.wm.DisplayPolicy: boolean isKeyguardDrawComplete()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z1);

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z2 = virtualinvoke $r8.<com.android.server.wm.DisplayPolicy: boolean isWindowManagerDrawComplete()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, $z2);

        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366156L, $z3);

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccludedChanged>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366157L, $z4);

        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingKeyguardOccluded>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366158L, $z5);

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268052L);

     label1:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l4);

        return;
    }

    public void enableKeyguard(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setKeyguardEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void enableScreenAfterBoot()
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void readLidState()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void applyLidSwitchState()>();

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateRotation(boolean)>(1);

        return;
    }

    public void exitKeyguardSecurely(com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult r1;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void verifyUnlock(com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult)>(r1);

     label1:
        return;
    }

    public void finishedGoingToSleep(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1, $i2;
        android.content.Context $r2;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.wm.DisplayRotation $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.Object r6;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r7;
        com.android.server.policy.DisplayFoldController r8;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.policy.EventLogTags: void writeScreenToggled(int)>(0);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mLockScreenTimeout>;

        $i2 = $i1 / 1000;

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r2, "screen_timeout", $i2);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mGoingToSleep> = 0;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mRequestedOrGoingToSleep> = 0;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: void setAwake(boolean)>(0);

        r6 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r6;

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateWakeGestureListenerLp()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateLockScreenTimeout()>();

        exitmonitor r6;

     label2:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        virtualinvoke $r4.<com.android.server.wm.DisplayRotation: void updateOrientationListener()>();

        r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r7 == null goto label3;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mCameraGestureTriggeredDuringGoingToSleep>;

        virtualinvoke r7.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onFinishedGoingToSleep(int,boolean)>(i0, $z0);

     label3:
        r8 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r8 == null goto label4;

        virtualinvoke r8.<com.android.server.policy.DisplayFoldController: void finishedGoingToSleep()>();

     label4:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mCameraGestureTriggeredDuringGoingToSleep> = 0;

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r6;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void finishedWakingUp(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        com.android.server.policy.DisplayFoldController r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onFinishedWakingUp()>();

     label1:
        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.server.policy.DisplayFoldController: void finishedWakingUp()>();

     label2:
        return;
    }

    android.media.AudioManagerInternal getAudioManagerInternal()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        android.media.AudioManagerInternal $r2, $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mServiceAquireLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.media.AudioManagerInternal mAudioManagerInternal>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/media/AudioManagerInternal;");

        $r4 = (android.media.AudioManagerInternal) $r3;

        r0.<com.android.server.policy.PhoneWindowManager: android.media.AudioManagerInternal mAudioManagerInternal> = $r4;

     label2:
        r6 = r0.<com.android.server.policy.PhoneWindowManager: android.media.AudioManagerInternal mAudioManagerInternal>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.graphics.Rect getFoldedArea()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.DisplayFoldController r1;
        android.graphics.Rect $r2, $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.policy.DisplayFoldController: android.graphics.Rect getFoldedArea()>();

        return $r3;

     label1:
        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        return $r2;
    }

    public int getMaxWallpaperLayer()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: int getWindowLayerFromTypeLw(int)>(2040);

        return $i0;
    }

    android.app.NotificationManager getNotificationService()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.NotificationManager $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/NotificationManager;");

        $r3 = (android.app.NotificationManager) $r2;

        return $r3;
    }

    com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1, $r3;
        com.android.server.statusbar.StatusBarManagerInternal $r2, $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mServiceAquireLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/statusbar/StatusBarManagerInternal;");

        $r4 = (com.android.server.statusbar.StatusBarManagerInternal) $r3;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal> = $r4;

     label2:
        r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    com.android.internal.statusbar.IStatusBarService getStatusBarService()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        com.android.internal.statusbar.IStatusBarService $r2, $r4, r6;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mServiceAquireLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("statusbar");

        $r4 = staticinvoke <com.android.internal.statusbar.IStatusBarService$Stub: com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService> = $r4;

     label2:
        r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService mStatusBarService>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    android.telecom.TelecomManager getTelecommService()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telecom.TelecomManager $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        $r3 = (android.telecom.TelecomManager) $r2;

        return $r3;
    }

    public int getUiMode()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mUiMode>;

        return $i0;
    }

    boolean goHome()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1, $i2;
        boolean $z0;
        android.app.IActivityManager $r1;
        android.app.IActivityTaskManager $r2, $r12;
        android.content.Context $r3, $r5, $r7, $r13, $r15, $r19;
        java.lang.String $r4, $r6, $r9, $r14, $r16, $r21;
        android.content.ContentResolver $r8, $r20;
        android.os.RemoteException $r10;
        android.content.Intent r11, $r17, $r18;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Not going home because user setup is in progress.");

        return 0;

     label01:
        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.uts-test-mode", 0);

        if $i1 != 1 goto label03;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowManager", "UTS-TEST-MODE");

     label02:
        goto label07;

     label03:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void stopAppSwitches()>();

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendCloseSystemWindows()>();

        r11 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent createHomeDockIntent()>();

     label04:
        if r11 == null goto label07;

     label05:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getBasePackageName()>();

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getAttributionTag()>();

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = virtualinvoke r11.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r8);

        $i2 = interfaceinvoke $r2.<android.app.IActivityTaskManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(null, $r4, $r6, r11, $r9, null, null, 0, 1, null, null, -2);

        if $i2 != 1 goto label07;

     label06:
        return 0;

     label07:
        $r12 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        $r13 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getBasePackageName()>();

        $r15 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.String getAttributionTag()>();

        $r17 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r18 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r19 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r20 = virtualinvoke $r19.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r21 = virtualinvoke $r18.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r20);

        i0 = interfaceinvoke $r12.<android.app.IActivityTaskManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(null, $r14, $r16, $r17, $r21, null, null, 0, 1, null, null, -2);

     label08:
        if i0 != 1 goto label09;

        return 0;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        return 1;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label10;
    }

    public boolean hasNavigationBar()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.wm.DisplayPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean hasNavigationBar()>();

        return $z0;
    }

    public void hideBootMessages()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(11);

        return;
    }

    public boolean inKeyguardRestrictedKeyInputMode()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>();

        return $z0;
    }

    public void init(android.content.Context, android.view.IWindowManager, com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context r1, $r15, $r18, $r21, $r27, $r29, $r40, $r42, $r52, $r55, $r58, $r61, $r64, $r70, $r74, $r83, $r109, $r111, $r113, $r115, $r117, $r119, $r121, $r123, $r125, $r127, $r129, $r131, $r133, $r135, $r137, $r139, $r141, $r143, $r145, $r147, $r149, $r151;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs r2;
        java.lang.Object $r3, $r5, $r7, $r9, $r11, $r13, $r16, $r19, $r50, $r102, $r152;
        com.android.server.wm.WindowManagerInternal $r4, $r67;
        android.app.ActivityManagerInternal $r6;
        com.android.server.wm.ActivityTaskManagerInternal $r8;
        android.hardware.input.InputManagerInternal $r10;
        android.service.dreams.DreamManagerInternal $r12;
        android.os.PowerManagerInternal $r14;
        android.app.AppOpsManager $r17;
        android.hardware.display.DisplayManager $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15, z16, $z17, $z19, $z20, z21, z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, z32;
        android.content.pm.PackageManager $r22, $r23, $r24, r77;
        com.android.internal.accessibility.AccessibilityShortcutController $r25;
        android.os.Handler $r26, $r85;
        int $i1, $i2, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        com.android.internal.logging.MetricsLogger $r28;
        android.content.res.Resources $r30, $r41, $r43, $r53, $r56, $r59, $r62, $r75, r78, r79, $r88, $r92, $r110, $r112, $r114, $r116, $r118, $r120, $r122, $r124, $r126, $r128, $r130, $r132, $r134, $r136, $r138, $r140, $r142, $r144, $r146, $r148, $r150;
        com.android.server.policy.BurnInProtectionHelper $r31;
        android.content.IntentFilter $r44, $r47, $r154;
        android.content.BroadcastReceiver $r45, $r48, $r160;
        android.os.Vibrator $r51;
        long[] $r54, $r57, $r60;
        com.android.server.policy.GlobalKeyManager $r63;
        android.os.PowerManager $r65, r103, $r105;
        com.android.server.policy.PhoneWindowManager$7 $r66;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r68;
        com.android.server.policy.PhoneWindowManager$8 $r69;
        com.android.server.wm.DisplayPolicy $r71;
        com.android.server.policy.DisplayFoldController $r72, $r73;
        android.view.IWindowManager r76;
        byte b3;
        com.android.server.policy.PhoneWindowManager$PolicyHandler $r80;
        com.android.server.policy.PhoneWindowManager$MyWakeGestureListener $r82;
        com.android.server.policy.PhoneWindowManager$SettingsObserver $r84;
        com.android.server.policy.ShortcutManager $r87;
        android.content.Intent $r89, $r91, $r93, $r95, $r96, $r98, $r99, $r101, r161;
        android.os.PowerManager$WakeLock $r104, $r106;
        java.lang.String $r107, $r108, $r156, $r157, $r158, $r159;
        android.view.accessibility.AccessibilityManager $r153;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.content.Context;

        r76 := @parameter1: android.view.IWindowManager;

        r2 := @parameter2: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs;

        r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext> = r1;

        r0.<com.android.server.policy.PhoneWindowManager: android.view.IWindowManager mWindowManager> = r76;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs> = r2;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r4 = (com.android.server.wm.WindowManagerInternal) $r3;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal> = $r4;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r6 = (android.app.ActivityManagerInternal) $r5;

        r0.<com.android.server.policy.PhoneWindowManager: android.app.ActivityManagerInternal mActivityManagerInternal> = $r6;

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r8 = (com.android.server.wm.ActivityTaskManagerInternal) $r7;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal> = $r8;

        $r9 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/input/InputManagerInternal;");

        $r10 = (android.hardware.input.InputManagerInternal) $r9;

        r0.<com.android.server.policy.PhoneWindowManager: android.hardware.input.InputManagerInternal mInputManagerInternal> = $r10;

        $r11 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/service/dreams/DreamManagerInternal;");

        $r12 = (android.service.dreams.DreamManagerInternal) $r11;

        r0.<com.android.server.policy.PhoneWindowManager: android.service.dreams.DreamManagerInternal mDreamManagerInternal> = $r12;

        $r13 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        $r14 = (android.os.PowerManagerInternal) $r13;

        r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManagerInternal mPowerManagerInternal> = $r14;

        $r15 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r17 = (android.app.AppOpsManager) $r16;

        r0.<com.android.server.policy.PhoneWindowManager: android.app.AppOpsManager mAppOpsManager> = $r17;

        $r18 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r20 = (android.hardware.display.DisplayManager) $r19;

        r0.<com.android.server.policy.PhoneWindowManager: android.hardware.display.DisplayManager mDisplayManager> = $r20;

        $r21 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r77 = virtualinvoke $r21.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager> = r77;

        $z0 = virtualinvoke r77.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureWatch> = $z0;

        $r22 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        $z1 = virtualinvoke $r22.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureLeanback> = $z1;

        $r23 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        $z2 = virtualinvoke $r23.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureAuto> = $z2;

        $r24 = r0.<com.android.server.policy.PhoneWindowManager: android.content.pm.PackageManager mPackageManager>;

        $z3 = virtualinvoke $r24.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.hdmi.cec");

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureHdmiCec> = $z3;

        $r25 = new com.android.internal.accessibility.AccessibilityShortcutController;

        $r27 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r26 = new android.os.Handler;

        specialinvoke $r26.<android.os.Handler: void <init>()>();

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        specialinvoke $r25.<com.android.internal.accessibility.AccessibilityShortcutController: void <init>(android.content.Context,android.os.Handler,int)>($r27, $r26, $i1);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController> = $r25;

        $r28 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r28.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.logging.MetricsLogger mLogger> = $r28;

        $r29 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r78 = virtualinvoke $r29.<android.content.Context: android.content.res.Resources getResources()>();

        $z4 = virtualinvoke r78.<android.content.res.Resources: boolean getBoolean(int)>(17891588);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeOnDpadKeyPress> = $z4;

        $z5 = virtualinvoke r78.<android.content.res.Resources: boolean getBoolean(int)>(17891586);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeOnAssistKeyPress> = $z5;

        $z6 = virtualinvoke r78.<android.content.res.Resources: boolean getBoolean(int)>(17891587);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeOnBackKeyPress> = $z6;

        $r30 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        z15 = virtualinvoke $r30.<android.content.res.Resources: boolean getBoolean(int)>(17891437);

        z16 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.debug.force_burn_in", 0);

        if z15 != 0 goto label01;

        if z16 == 0 goto label06;

     label01:
        if z16 == 0 goto label04;

        $z14 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isRoundWindow()>();

        if $z14 == 0 goto label02;

        b3 = 6;

        goto label03;

     label02:
        b3 = -1;

     label03:
        i4 = 8;

        i5 = -8;

        i6 = -4;

        i7 = b3;

        i8 = -8;

        goto label05;

     label04:
        r79 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        i8 = virtualinvoke r79.<android.content.res.Resources: int getInteger(int)>(17694758);

        i4 = virtualinvoke r79.<android.content.res.Resources: int getInteger(int)>(17694755);

        i5 = virtualinvoke r79.<android.content.res.Resources: int getInteger(int)>(17694759);

        i6 = virtualinvoke r79.<android.content.res.Resources: int getInteger(int)>(17694757);

        i7 = virtualinvoke r79.<android.content.res.Resources: int getInteger(int)>(17694756);

     label05:
        $r31 = new com.android.server.policy.BurnInProtectionHelper;

        specialinvoke $r31.<com.android.server.policy.BurnInProtectionHelper: void <init>(android.content.Context,int,int,int,int,int)>(r1, i8, i4, i5, i6, i7);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.BurnInProtectionHelper mBurnInProtectionHelper> = $r31;

     label06:
        $r80 = new com.android.server.policy.PhoneWindowManager$PolicyHandler;

        specialinvoke $r80.<com.android.server.policy.PhoneWindowManager$PolicyHandler: void <init>(com.android.server.policy.PhoneWindowManager,com.android.server.policy.PhoneWindowManager$1)>(r0, null);

        r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler> = $r80;

        $r82 = new com.android.server.policy.PhoneWindowManager$MyWakeGestureListener;

        $r83 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r82.<com.android.server.policy.PhoneWindowManager$MyWakeGestureListener: void <init>(com.android.server.policy.PhoneWindowManager,android.content.Context,android.os.Handler)>(r0, $r83, $r80);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$MyWakeGestureListener mWakeGestureListener> = $r82;

        $r84 = new com.android.server.policy.PhoneWindowManager$SettingsObserver;

        $r85 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r84.<com.android.server.policy.PhoneWindowManager$SettingsObserver: void <init>(com.android.server.policy.PhoneWindowManager,android.os.Handler)>(r0, $r85);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$SettingsObserver mSettingsObserver> = $r84;

        virtualinvoke $r84.<com.android.server.policy.PhoneWindowManager$SettingsObserver: void observe()>();

        $r87 = new com.android.server.policy.ShortcutManager;

        specialinvoke $r87.<com.android.server.policy.ShortcutManager: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.ShortcutManager mShortcutManager> = $r87;

        $r88 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i9 = virtualinvoke $r88.<android.content.res.Resources: int getInteger(int)>(17694786);

        r0.<com.android.server.policy.PhoneWindowManager: int mUiMode> = $i9;

        $r89 = new android.content.Intent;

        specialinvoke $r89.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mHomeIntent> = $r89;

        virtualinvoke $r89.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r91 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r91.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r92 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z17 = virtualinvoke $r92.<android.content.res.Resources: boolean getBoolean(int)>(17891438);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableCarDockHomeCapture> = $z17;

        $r93 = new android.content.Intent;

        specialinvoke $r93.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mCarDockIntent> = $r93;

        virtualinvoke $r93.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.CAR_DOCK");

        $r95 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mCarDockIntent>;

        virtualinvoke $r95.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r96 = new android.content.Intent;

        specialinvoke $r96.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mDeskDockIntent> = $r96;

        virtualinvoke $r96.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DESK_DOCK");

        $r98 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mDeskDockIntent>;

        virtualinvoke $r98.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r99 = new android.content.Intent;

        specialinvoke $r99.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mVrHeadsetHomeIntent> = $r99;

        virtualinvoke $r99.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.VR_HOME");

        $r101 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent mVrHeadsetHomeIntent>;

        virtualinvoke $r101.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r102 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r103 = (android.os.PowerManager) $r102;

        r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager> = r103;

        $r104 = virtualinvoke r103.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "PhoneWindowManager.mBroadcastWakeLock");

        r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock> = $r104;

        $r105 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $r106 = virtualinvoke $r105.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "PhoneWindowManager.mPowerKeyWakeLock");

        r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mPowerKeyWakeLock> = $r106;

        $r107 = "1";

        $r108 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.debuggable");

        $z19 = virtualinvoke $r107.<java.lang.String: boolean equals(java.lang.Object)>($r108);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = $z19;

        $r109 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r110 = virtualinvoke $r109.<android.content.Context: android.content.res.Resources getResources()>();

        $i10 = virtualinvoke $r110.<android.content.res.Resources: int getInteger(int)>(17694820);

        r0.<com.android.server.policy.PhoneWindowManager: int mLidKeyboardAccessibility> = $i10;

        $r111 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r112 = virtualinvoke $r111.<android.content.Context: android.content.res.Resources getResources()>();

        $i11 = virtualinvoke $r112.<android.content.res.Resources: int getInteger(int)>(17694821);

        r0.<com.android.server.policy.PhoneWindowManager: int mLidNavigationAccessibility> = $i11;

        $r113 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r114 = virtualinvoke $r113.<android.content.Context: android.content.res.Resources getResources()>();

        $z20 = virtualinvoke $r114.<android.content.res.Resources: boolean getBoolean(int)>(17891478);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mLidControlsDisplayFold> = $z20;

        $r115 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r116 = virtualinvoke $r115.<android.content.Context: android.content.res.Resources getResources()>();

        z21 = virtualinvoke $r116.<android.content.res.Resources: boolean getBoolean(int)>(17891352);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromKey> = z21;

        if z21 != 0 goto label08;

        $r74 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r75 = virtualinvoke $r74.<android.content.Context: android.content.res.Resources getResources()>();

        $z13 = virtualinvoke $r75.<android.content.res.Resources: boolean getBoolean(int)>(17891356);

        if $z13 == 0 goto label07;

        goto label08;

     label07:
        z22 = 0;

        goto label09;

     label08:
        z22 = 1;

     label09:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromPowerKey> = z22;

        $r117 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r118 = virtualinvoke $r117.<android.content.Context: android.content.res.Resources getResources()>();

        $z23 = virtualinvoke $r118.<android.content.res.Resources: boolean getBoolean(int)>(17891354);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromMotion> = $z23;

        $r119 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r120 = virtualinvoke $r119.<android.content.Context: android.content.res.Resources getResources()>();

        $z24 = virtualinvoke $r120.<android.content.res.Resources: boolean getBoolean(int)>(17891355);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromMotionWhenNotDreaming> = $z24;

        $r121 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r122 = virtualinvoke $r121.<android.content.Context: android.content.res.Resources getResources()>();

        $z25 = virtualinvoke $r122.<android.content.res.Resources: boolean getBoolean(int)>(17891349);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromCameraLens> = $z25;

        $r123 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r124 = virtualinvoke $r123.<android.content.Context: android.content.res.Resources getResources()>();

        $z26 = virtualinvoke $r124.<android.content.res.Resources: boolean getBoolean(int)>(17891353);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromLidSwitch> = $z26;

        $r125 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r126 = virtualinvoke $r125.<android.content.Context: android.content.res.Resources getResources()>();

        $z27 = virtualinvoke $r126.<android.content.res.Resources: boolean getBoolean(int)>(17891351);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromWakeGesture> = $z27;

        $r127 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r128 = virtualinvoke $r127.<android.content.Context: android.content.res.Resources getResources()>();

        $z28 = virtualinvoke $r128.<android.content.res.Resources: boolean getBoolean(int)>(17891467);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mGoToSleepOnButtonPressTheaterMode> = $z28;

        $r129 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r130 = virtualinvoke $r129.<android.content.Context: android.content.res.Resources getResources()>();

        $z29 = virtualinvoke $r130.<android.content.res.Resources: boolean getBoolean(int)>(17891544);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mSupportLongPressPowerWhenNonInteractive> = $z29;

        $r131 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r132 = virtualinvoke $r131.<android.content.Context: android.content.res.Resources getResources()>();

        $i12 = virtualinvoke $r132.<android.content.res.Resources: int getInteger(int)>(17694825);

        r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnBackBehavior> = $i12;

        $r133 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r134 = virtualinvoke $r133.<android.content.Context: android.content.res.Resources getResources()>();

        $i13 = virtualinvoke $r134.<android.content.res.Resources: int getInteger(int)>(17694901);

        r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnPowerBehavior> = $i13;

        $r135 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r136 = virtualinvoke $r135.<android.content.Context: android.content.res.Resources getResources()>();

        $i14 = virtualinvoke $r136.<android.content.res.Resources: int getInteger(int)>(17694827);

        r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnPowerBehavior> = $i14;

        $r137 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r138 = virtualinvoke $r137.<android.content.Context: android.content.res.Resources getResources()>();

        $i15 = virtualinvoke $r138.<android.content.res.Resources: int getInteger(int)>(17694916);

        r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressOnPowerBehavior> = $i15;

        $r139 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r140 = virtualinvoke $r139.<android.content.Context: android.content.res.Resources getResources()>();

        $i16 = virtualinvoke $r140.<android.content.res.Resources: int getInteger(int)>(17694800);

        r0.<com.android.server.policy.PhoneWindowManager: int mDoublePressOnPowerBehavior> = $i16;

        $r141 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r142 = virtualinvoke $r141.<android.content.Context: android.content.res.Resources getResources()>();

        $i17 = virtualinvoke $r142.<android.content.res.Resources: int getInteger(int)>(17694912);

        r0.<com.android.server.policy.PhoneWindowManager: int mTriplePressOnPowerBehavior> = $i17;

        $r143 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r144 = virtualinvoke $r143.<android.content.Context: android.content.res.Resources getResources()>();

        $i18 = virtualinvoke $r144.<android.content.res.Resources: int getInteger(int)>(17694902);

        r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnSleepBehavior> = $i18;

        $r145 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r146 = virtualinvoke $r145.<android.content.Context: android.content.res.Resources getResources()>();

        $i19 = virtualinvoke $r146.<android.content.res.Resources: int getInteger(int)>(17694917);

        r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressTimeout> = $i19;

        $r147 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r148 = virtualinvoke $r147.<android.content.Context: android.content.res.Resources getResources()>();

        $z30 = virtualinvoke $r148.<android.content.res.Resources: boolean getBoolean(int)>(17891348);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowStartActivityForLongPressOnPowerDuringSetup> = $z30;

        $r149 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r150 = virtualinvoke $r149.<android.content.Context: android.content.res.Resources getResources()>();

        $z31 = virtualinvoke $r150.<android.content.res.Resources: boolean getBoolean(int)>(17891443);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHapticTextHandleEnabled> = $z31;

        $r151 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $i20 = staticinvoke <android.media.AudioSystem: int getPlatformType(android.content.Context)>($r151);

        if $i20 != 2 goto label10;

        z32 = 1;

        goto label11;

     label10:
        z32 = 0;

     label11:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mUseTvRouting> = z32;

        $r40 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r41 = virtualinvoke $r40.<android.content.Context: android.content.res.Resources getResources()>();

        $z7 = virtualinvoke $r41.<android.content.res.Resources: boolean getBoolean(int)>(17891469);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHandleVolumeKeysInWM> = $z7;

        $r42 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r43 = virtualinvoke $r42.<android.content.Context: android.content.res.Resources getResources()>();

        $z8 = virtualinvoke $r43.<android.content.res.Resources: boolean getBoolean(int)>(17891332);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPerDisplayFocusEnabled> = $z8;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void readConfigurationDependentBehaviors()>();

        $z9 = r0.<com.android.server.policy.PhoneWindowManager: boolean mLidControlsDisplayFold>;

        if $z9 == 0 goto label12;

        $r73 = staticinvoke <com.android.server.policy.DisplayFoldController: com.android.server.policy.DisplayFoldController create(android.content.Context,int)>(r1, 0);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController> = $r73;

        goto label13;

     label12:
        $z10 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.debug.force_foldable", 0);

        if $z10 == 0 goto label13;

        $r72 = staticinvoke <com.android.server.policy.DisplayFoldController: com.android.server.policy.DisplayFoldController createWithProxSensor(android.content.Context,int)>(r1, 0);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController> = $r72;

     label13:
        $r152 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        $r153 = (android.view.accessibility.AccessibilityManager) $r152;

        r0.<com.android.server.policy.PhoneWindowManager: android.view.accessibility.AccessibilityManager mAccessibilityManager> = $r153;

        $r154 = new android.content.IntentFilter;

        specialinvoke $r154.<android.content.IntentFilter: void <init>()>();

        $r156 = <android.app.UiModeManager: java.lang.String ACTION_ENTER_CAR_MODE>;

        virtualinvoke $r154.<android.content.IntentFilter: void addAction(java.lang.String)>($r156);

        $r157 = <android.app.UiModeManager: java.lang.String ACTION_EXIT_CAR_MODE>;

        virtualinvoke $r154.<android.content.IntentFilter: void addAction(java.lang.String)>($r157);

        $r158 = <android.app.UiModeManager: java.lang.String ACTION_ENTER_DESK_MODE>;

        virtualinvoke $r154.<android.content.IntentFilter: void addAction(java.lang.String)>($r158);

        $r159 = <android.app.UiModeManager: java.lang.String ACTION_EXIT_DESK_MODE>;

        virtualinvoke $r154.<android.content.IntentFilter: void addAction(java.lang.String)>($r159);

        virtualinvoke $r154.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        $r160 = r0.<com.android.server.policy.PhoneWindowManager: android.content.BroadcastReceiver mDockReceiver>;

        r161 = virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r160, $r154);

        if r161 == null goto label14;

        $r71 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $i2 = virtualinvoke r161.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.DOCK_STATE", 0);

        virtualinvoke $r71.<com.android.server.wm.DisplayPolicy: void setDockMode(int)>($i2);

     label14:
        $r44 = new android.content.IntentFilter;

        specialinvoke $r44.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r44.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STARTED");

        virtualinvoke $r44.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STOPPED");

        $r45 = r0.<com.android.server.policy.PhoneWindowManager: android.content.BroadcastReceiver mDreamReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r45, $r44);

        $r47 = new android.content.IntentFilter;

        specialinvoke $r47.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r48 = r0.<com.android.server.policy.PhoneWindowManager: android.content.BroadcastReceiver mMultiuserReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r48, $r47);

        $r50 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r51 = (android.os.Vibrator) $r50;

        r0.<com.android.server.policy.PhoneWindowManager: android.os.Vibrator mVibrator> = $r51;

        $r52 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r53 = virtualinvoke $r52.<android.content.Context: android.content.res.Resources getResources()>();

        $r54 = staticinvoke <com.android.server.policy.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r53, 17236049);

        r0.<com.android.server.policy.PhoneWindowManager: long[] mLongPressVibePattern> = $r54;

        $r55 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r56 = virtualinvoke $r55.<android.content.Context: android.content.res.Resources getResources()>();

        $r57 = staticinvoke <com.android.server.policy.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r56, 17235996);

        r0.<com.android.server.policy.PhoneWindowManager: long[] mCalendarDateVibePattern> = $r57;

        $r58 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r59 = virtualinvoke $r58.<android.content.Context: android.content.res.Resources getResources()>();

        $r60 = staticinvoke <com.android.server.policy.PhoneWindowManager: long[] getLongIntArray(android.content.res.Resources,int)>($r59, 17236069);

        r0.<com.android.server.policy.PhoneWindowManager: long[] mSafeModeEnabledVibePattern> = $r60;

        $r61 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r62 = virtualinvoke $r61.<android.content.Context: android.content.res.Resources getResources()>();

        $z11 = virtualinvoke $r62.<android.content.res.Resources: boolean getBoolean(int)>(17891450);

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordEnabled> = $z11;

        $r63 = new com.android.server.policy.GlobalKeyManager;

        $r64 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r63.<com.android.server.policy.GlobalKeyManager: void <init>(android.content.Context)>($r64);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalKeyManager mGlobalKeyManager> = $r63;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void initializeHdmiState()>();

        $r65 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $z12 = virtualinvoke $r65.<android.os.PowerManager: boolean isInteractive()>();

        if $z12 != 0 goto label15;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void startedGoingToSleep(int)>(2);

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishedGoingToSleep(int)>(2);

     label15:
        $r67 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        $r66 = new com.android.server.policy.PhoneWindowManager$7;

        specialinvoke $r66.<com.android.server.policy.PhoneWindowManager$7: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        virtualinvoke $r67.<com.android.server.wm.WindowManagerInternal: void registerAppTransitionListener(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>($r66);

        $r68 = new com.android.server.policy.keyguard.KeyguardServiceDelegate;

        $r70 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r69 = new com.android.server.policy.PhoneWindowManager$8;

        specialinvoke $r69.<com.android.server.policy.PhoneWindowManager$8: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        specialinvoke $r68.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void <init>(android.content.Context,com.android.server.policy.keyguard.KeyguardStateMonitor$StateCallback)>($r70, $r69);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate> = $r68;

        return;
    }

    void initializeHdmiState()
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 = staticinvoke <android.os.StrictMode: int allowThreadDiskReadsMask()>();

     label1:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void initializeHdmiStateInternal()>();

     label2:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void initializeHdmiStateInternal()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.io.File $r1;
        boolean $z0, $z1, $z2, z3, z4;
        com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver $r2;
        android.os.UEventObserver $r3;
        int $i0, i1, i2;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8, $r10, r17;
        java.io.FileReader r11, r12, r13, r14;
        char[] r16;
        java.lang.StringBuilder r20, r22;
        com.android.server.wm.DisplayPolicy $r24;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z3 = 0;

        z4 = 0;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/sys/devices/virtual/switch/hdmi/state");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label52;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.UEventObserver mHDMIObserver>;

        virtualinvoke $r3.<android.os.UEventObserver: void startObserving(java.lang.String)>("DEVPATH=/devices/virtual/switch/hdmi");

        r11 = null;

        r12 = null;

        r13 = null;

     label01:
        r14 = new java.io.FileReader;

     label02:
        r11 = null;

        r12 = null;

        r13 = null;

     label03:
        specialinvoke r14.<java.io.FileReader: void <init>(java.lang.String)>("/sys/class/switch/hdmi/state");

     label04:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label05:
        r16 = newarray (char)[15];

     label06:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label07:
        i1 = virtualinvoke r14.<java.io.FileReader: int read(char[])>(r16);

     label08:
        if i1 <= 1 goto label15;

        r11 = r14;

        r12 = r14;

        r13 = r14;

     label09:
        r17 = new java.lang.String;

     label10:
        z4 = 0;

        r11 = r14;

        r12 = r14;

        r13 = r14;

     label11:
        $i0 = i1 - 1;

        specialinvoke r17.<java.lang.String: void <init>(char[],int,int)>(r16, 0, $i0);

     label12:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label13:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r17);

     label14:
        if i2 == 0 goto label15;

        z4 = 1;

     label15:
        z3 = z4;

     label16:
        virtualinvoke r14.<java.io.FileReader: void close()>();

     label17:
        goto label46;

     label18:
        $r6 := @caughtexception;

        z4 = z3;

        goto label17;

     label19:
        $r5 := @caughtexception;

        goto label47;

     label20:
        $r9 := @caughtexception;

        r11 = r12;

     label21:
        r20 = new java.lang.StringBuilder;

     label22:
        r11 = r12;

     label23:
        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

     label24:
        r11 = r12;

     label25:
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read hdmi state from /sys/class/switch/hdmi/state: ");

     label26:
        r11 = r12;

     label27:
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

     label28:
        r11 = r12;

     label29:
        $r10 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r10);

     label30:
        z4 = 0;

        if r12 == null goto label46;

     label31:
        virtualinvoke r12.<java.io.FileReader: void close()>();

     label32:
        z4 = 0;

        goto label17;

     label33:
        $r7 := @caughtexception;

        r11 = r13;

     label34:
        r22 = new java.lang.StringBuilder;

     label35:
        r11 = r13;

     label36:
        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

     label37:
        r11 = r13;

     label38:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t read hdmi state from /sys/class/switch/hdmi/state: ");

     label39:
        r11 = r13;

     label40:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label41:
        r11 = r13;

     label42:
        $r8 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r8);

     label43:
        z4 = 0;

        if r13 == null goto label46;

     label44:
        virtualinvoke r13.<java.io.FileReader: void close()>();

     label45:
        z4 = 0;

        goto label17;

     label46:
        goto label53;

     label47:
        if r11 == null goto label51;

     label48:
        virtualinvoke r11.<java.io.FileReader: void close()>();

     label49:
        goto label51;

     label50:
        $r4 := @caughtexception;

     label51:
        throw $r5;

     label52:
        z4 = 0;

        $z1 = staticinvoke <com.android.server.ExtconUEventObserver: boolean extconExists()>();

        if $z1 == 0 goto label46;

        z4 = 0;

        $z2 = staticinvoke <com.android.server.ExtconUEventObserver: boolean namedExtconDirExists(java.lang.String)>("hdmi");

        if $z2 == 0 goto label53;

        $r2 = new com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver;

        specialinvoke $r2.<com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: void <init>(com.android.server.policy.PhoneWindowManager,com.android.server.policy.PhoneWindowManager$1)>(r0, null);

        z4 = staticinvoke <com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver: boolean access$3700(com.android.server.policy.PhoneWindowManager$HdmiVideoExtconUEventObserver)>($r2);

        r0.<com.android.server.policy.PhoneWindowManager: android.os.UEventObserver mHDMIObserver> = $r2;

     label53:
        $r24 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        virtualinvoke $r24.<com.android.server.wm.DisplayPolicy: void setHdmiPlugged(boolean,boolean)>(z4, 1);

        return;

        catch java.io.IOException from label01 to label02 with label33;
        catch java.lang.NumberFormatException from label01 to label02 with label20;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.io.IOException from label03 to label04 with label33;
        catch java.lang.NumberFormatException from label03 to label04 with label20;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.io.IOException from label05 to label06 with label33;
        catch java.lang.NumberFormatException from label05 to label06 with label20;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.io.IOException from label07 to label08 with label33;
        catch java.lang.NumberFormatException from label07 to label08 with label20;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.io.IOException from label09 to label10 with label33;
        catch java.lang.NumberFormatException from label09 to label10 with label20;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.io.IOException from label11 to label12 with label33;
        catch java.lang.NumberFormatException from label11 to label12 with label20;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.io.IOException from label13 to label14 with label33;
        catch java.lang.NumberFormatException from label13 to label14 with label20;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label21 to label22 with label19;
        catch java.lang.Throwable from label23 to label24 with label19;
        catch java.lang.Throwable from label25 to label26 with label19;
        catch java.lang.Throwable from label27 to label28 with label19;
        catch java.lang.Throwable from label29 to label30 with label19;
        catch java.io.IOException from label31 to label32 with label18;
        catch java.lang.Throwable from label34 to label35 with label19;
        catch java.lang.Throwable from label36 to label37 with label19;
        catch java.lang.Throwable from label38 to label39 with label19;
        catch java.lang.Throwable from label40 to label41 with label19;
        catch java.lang.Throwable from label42 to label43 with label19;
        catch java.io.IOException from label44 to label45 with label18;
        catch java.io.IOException from label48 to label49 with label50;
    }

    public long interceptKeyBeforeDispatching(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z2, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z26, $z27, $z28, $z29, $z30, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, z50, $z51, $z52, $z53, $z54, $z56, z57, z58, $z59, $z60;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i27, $i28, $i29, $i31, $i35, $i38, i45, i46, i47, $i53, i57, i58;
        com.android.server.policy.PhoneWindowManager$DisplayHomeButtonHandler r1, $r52, r79;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10;
        android.content.Context $r2, $r6, $r9, $r13, $r18, $r49;
        android.content.ContentResolver $r3, $r7, $r10, $r14;
        android.os.PowerManager $r4, $r5, $r8;
        android.content.Intent $r11, $r47, r86, r91, r95;
        android.os.UserHandle $r12, $r24, $r27, $r35, $r48;
        com.android.server.wm.DisplayPolicy $r15;
        android.util.LongSparseArray $r16, $r75;
        java.lang.Object $r17, $r22, $r51;
        com.android.server.policy.GlobalKeyManager $r19;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r20;
        android.util.SparseArray $r21, $r50, $r53;
        com.android.server.policy.ShortcutManager $r25, $r28;
        java.lang.StringBuilder $r29, $r55, $r61, $r68;
        java.lang.String $r31, $r33, $r57, $r59, $r66, $r70, $r72, r94;
        android.hardware.input.InputManagerInternal $r36;
        android.os.Handler $r37, $r38, $r42, $r46;
        com.android.server.policy.PhoneWindowManager$ScreenshotRunnable $r39, $r40, $r41, $r43, $r44, $r45;
        long $l30, $l32, $l34, $l37, $l39, $l41, l48, l49, l50, l51, l52, l54, l55, l60, l61, l62, l63, l64;
        byte $b33, $b36, $b40, b56, b59, b65;
        android.content.ActivityNotFoundException $r54, $r60, $r67;
        android.os.RemoteException $r73, $r74;
        android.os.IBinder r76;
        android.view.KeyEvent r77;
        com.android.internal.accessibility.AccessibilityShortcutController $r78;
        com.android.internal.statusbar.IStatusBarService r81;
        android.os.Message r83;
        android.view.InputDevice r84;
        android.view.KeyCharacterMap r85, r90;
        com.android.internal.policy.IShortcutService r98;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r76 := @parameter0: android.os.IBinder;

        r77 := @parameter1: android.view.KeyEvent;

        i45 := @parameter2: int;

        z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean keyguardOn()>();

        i0 = virtualinvoke r77.<android.view.KeyEvent: int getKeyCode()>();

        i1 = virtualinvoke r77.<android.view.KeyEvent: int getRepeatCount()>();

        i2 = virtualinvoke r77.<android.view.KeyEvent: int getMetaState()>();

        i46 = virtualinvoke r77.<android.view.KeyEvent: int getFlags()>();

        $i6 = virtualinvoke r77.<android.view.KeyEvent: int getAction()>();

        if $i6 != 0 goto label001;

        z50 = 1;

        goto label002;

     label001:
        z50 = 0;

     label002:
        virtualinvoke r77.<android.view.KeyEvent: boolean isCanceled()>();

        i47 = virtualinvoke r77.<android.view.KeyEvent: int getDisplayId()>();

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordEnabled>;

        if $z2 == 0 goto label005;

        $i38 = i46 & 1024;

        if $i38 != 0 goto label005;

        $z47 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        if $z47 == 0 goto label003;

        $z49 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered>;

        if $z49 != 0 goto label003;

        l48 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l39 = r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordVolumeDownKeyTime>;

        l49 = $l39 + 150L;

        $b40 = l48 cmp l49;

        if $b40 >= 0 goto label003;

        $l41 = l49 - l48;

        return $l41;

     label003:
        if i0 != 25 goto label005;

        $z48 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed>;

        if $z48 == 0 goto label005;

        if z50 != 0 goto label004;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed> = 0;

     label004:
        return -1L;

     label005:
        $r78 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController>;

        $z51 = virtualinvoke $r78.<com.android.internal.accessibility.AccessibilityShortcutController: boolean isAccessibilityShortcutAvailable(boolean)>(0);

        if $z51 == 0 goto label012;

        $i35 = i46 & 1024;

        if $i35 != 0 goto label012;

        $z42 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        $z41 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        $z43 = $z42 ^ $z41;

        if $z43 == 0 goto label008;

        l50 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z46 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        if $z46 == 0 goto label006;

        l51 = r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordVolumeDownKeyTime>;

        goto label007;

     label006:
        l51 = r0.<com.android.server.policy.PhoneWindowManager: long mA11yShortcutChordVolumeUpKeyTime>;

     label007:
        l52 = l51 + 150L;

        $b36 = l50 cmp l52;

        if $b36 >= 0 goto label008;

        $l37 = l52 - l50;

        return $l37;

     label008:
        if i0 != 25 goto label010;

        $z45 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed>;

        if $z45 == 0 goto label010;

        if z50 != 0 goto label009;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed> = 0;

     label009:
        return -1L;

     label010:
        if i0 != 24 goto label012;

        $z44 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed>;

        if $z44 == 0 goto label012;

        if z50 != 0 goto label011;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed> = 0;

     label011:
        return -1L;

     label012:
        $i53 = r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord>;

        if $i53 == 0 goto label015;

        $i31 = i46 & 1024;

        if $i31 != 0 goto label015;

        $z38 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        if $z38 == 0 goto label013;

        $z40 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordPowerKeyTriggered>;

        if $z40 != 0 goto label013;

        l54 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l32 = r0.<com.android.server.policy.PhoneWindowManager: long mA11yShortcutChordVolumeUpKeyTime>;

        l55 = $l32 + 150L;

        $b33 = l54 cmp l55;

        if $b33 >= 0 goto label013;

        $l34 = l55 - l54;

        return $l34;

     label013:
        if i0 != 24 goto label015;

        $z39 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed>;

        if $z39 == 0 goto label015;

        if z50 != 0 goto label014;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed> = 0;

     label014:
        return -1L;

     label015:
        $z52 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingMetaAction>;

        if $z52 == 0 goto label016;

        $z37 = staticinvoke <android.view.KeyEvent: boolean isMetaKey(int)>(i0);

        if $z37 != 0 goto label016;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingMetaAction> = 0;

     label016:
        $z53 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingCapsLockToggle>;

        if $z53 == 0 goto label017;

        $z35 = staticinvoke <android.view.KeyEvent: boolean isMetaKey(int)>(i0);

        if $z35 != 0 goto label017;

        $z36 = staticinvoke <android.view.KeyEvent: boolean isAltKey(int)>(i0);

        if $z36 != 0 goto label017;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingCapsLockToggle> = 0;

     label017:
        if i0 != 3 goto label019;

        $r50 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mDisplayHomeButtonHandlers>;

        $r51 = virtualinvoke $r50.<android.util.SparseArray: java.lang.Object get(int)>(i47);

        r1 = (com.android.server.policy.PhoneWindowManager$DisplayHomeButtonHandler) $r51;

        r79 = r1;

        if r1 != null goto label018;

        $r52 = new com.android.server.policy.PhoneWindowManager$DisplayHomeButtonHandler;

        specialinvoke $r52.<com.android.server.policy.PhoneWindowManager$DisplayHomeButtonHandler: void <init>(com.android.server.policy.PhoneWindowManager,int)>(r0, i47);

        r79 = $r52;

        $r53 = r0.<com.android.server.policy.PhoneWindowManager: android.util.SparseArray mDisplayHomeButtonHandlers>;

        virtualinvoke $r53.<android.util.SparseArray: void put(int,java.lang.Object)>(i47, $r52);

     label018:
        $i29 = virtualinvoke r79.<com.android.server.policy.PhoneWindowManager$DisplayHomeButtonHandler: int handleHomeButton(android.os.IBinder,android.view.KeyEvent)>(r76, r77);

        $l30 = (long) $i29;

        return $l30;

     label019:
        if i0 != 82 goto label021;

        if z50 == 0 goto label020;

        if i1 != 0 goto label020;

        $z34 = r0.<com.android.server.policy.PhoneWindowManager: boolean mEnableShiftMenuBugReports>;

        if $z34 == 0 goto label020;

        $i28 = i2 & 1;

        if $i28 != 1 goto label020;

        $r47 = new android.content.Intent;

        specialinvoke $r47.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BUG_REPORT");

        $r49 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r48 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r49.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r47, $r48, null, null, null, 0, null, null);

        return -1L;

     label020:
        goto label048;

     label021:
        if i0 != 84 goto label024;

        if z50 == 0 goto label022;

        if i1 != 0 goto label023;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

        goto label023;

     label022:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 0;

        $z33 = r0.<com.android.server.policy.PhoneWindowManager: boolean mConsumeSearchKeyUp>;

        if $z33 == 0 goto label023;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

        return -1L;

     label023:
        return 0L;

     label024:
        if i0 != 187 goto label027;

        if z0 != 0 goto label026;

        if z50 == 0 goto label025;

        if i1 != 0 goto label025;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void preloadRecentApps()>();

        goto label026;

     label025:
        if z50 != 0 goto label026;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void toggleRecentApps()>();

     label026:
        return -1L;

     label027:
        if i0 != 42 goto label032;

        $z32 = virtualinvoke r77.<android.view.KeyEvent: boolean isMetaPressed()>();

        if $z32 == 0 goto label032;

        if z50 == 0 goto label048;

        r81 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.statusbar.IStatusBarService getStatusBarService()>();

        if r81 == null goto label031;

     label028:
        interfaceinvoke r81.<com.android.internal.statusbar.IStatusBarService: void expandNotificationsPanel()>();

     label029:
        goto label031;

     label030:
        $r73 := @caughtexception;

     label031:
        goto label048;

     label032:
        if i0 != 47 goto label035;

        $z28 = virtualinvoke r77.<android.view.KeyEvent: boolean isMetaPressed()>();

        if $z28 == 0 goto label035;

        $z29 = virtualinvoke r77.<android.view.KeyEvent: boolean isCtrlPressed()>();

        if $z29 == 0 goto label035;

        if z50 == 0 goto label048;

        if i1 != 0 goto label048;

        $z30 = virtualinvoke r77.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z30 == 0 goto label033;

        b56 = 2;

        goto label034;

     label033:
        b56 = 1;

     label034:
        $r43 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r43.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void setScreenshotType(int)>(b56);

        $r44 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r44.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void setScreenshotSource(int)>(2);

        $r46 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r45 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r46.<android.os.Handler: boolean post(java.lang.Runnable)>($r45);

        return -1L;

     label035:
        if i0 != 76 goto label036;

        $z26 = virtualinvoke r77.<android.view.KeyEvent: boolean isMetaPressed()>();

        if $z26 == 0 goto label036;

        if z50 == 0 goto label048;

        if i1 != 0 goto label048;

        $z27 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardLocked()>();

        if $z27 != 0 goto label048;

        $i27 = virtualinvoke r77.<android.view.KeyEvent: int getDeviceId()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void toggleKeyboardShortcutsMenu(int)>($i27);

        goto label048;

     label036:
        if i0 != 219 goto label037;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowManager", "KEYCODE_ASSIST should be handled in interceptKeyBeforeQueueing");

        return -1L;

     label037:
        if i0 != 231 goto label038;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowManager", "KEYCODE_VOICE_ASSIST should be handled in interceptKeyBeforeQueueing");

        return -1L;

     label038:
        if i0 != 120 goto label040;

        if z50 == 0 goto label039;

        if i1 != 0 goto label039;

        $r39 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r39.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void setScreenshotType(int)>(1);

        $r40 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r40.<com.android.server.policy.PhoneWindowManager$ScreenshotRunnable: void setScreenshotSource(int)>(2);

        $r42 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r41 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenshotRunnable mScreenshotRunnable>;

        virtualinvoke $r42.<android.os.Handler: boolean post(java.lang.Runnable)>($r41);

     label039:
        return -1L;

     label040:
        if i0 == 221 goto label097;

        if i0 != 220 goto label041;

        goto label097;

     label041:
        if i0 == 24 goto label046;

        if i0 == 25 goto label046;

        if i0 != 164 goto label042;

        goto label046;

     label042:
        if i0 != 61 goto label043;

        $z24 = virtualinvoke r77.<android.view.KeyEvent: boolean isMetaPressed()>();

        if $z24 == 0 goto label043;

        return 0L;

     label043:
        $z22 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureLeanback>;

        if $z22 == 0 goto label044;

        $z23 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean interceptBugreportGestureTv(int,boolean)>(i0, z50);

        if $z23 == 0 goto label044;

        return -1L;

     label044:
        if i0 != 284 goto label048;

        if z50 != 0 goto label045;

        $r37 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r37.<android.os.Handler: void removeMessages(int)>(22);

        $r38 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r83 = virtualinvoke $r38.<android.os.Handler: android.os.Message obtainMessage(int)>(22);

        virtualinvoke r83.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r83.<android.os.Message: void sendToTarget()>();

     label045:
        return -1L;

     label046:
        $z54 = r0.<com.android.server.policy.PhoneWindowManager: boolean mUseTvRouting>;

        if $z54 != 0 goto label096;

        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHandleVolumeKeysInWM>;

        if $z5 == 0 goto label047;

        goto label096;

     label047:
        $r15 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z6 = virtualinvoke $r15.<com.android.server.wm.DisplayPolicy: boolean isPersistentVrModeEnabled()>();

        if $z6 == 0 goto label048;

        r84 = virtualinvoke r77.<android.view.KeyEvent: android.view.InputDevice getDevice()>();

        if r84 == null goto label048;

        $z21 = virtualinvoke r84.<android.view.InputDevice: boolean isExternal()>();

        if $z21 != 0 goto label048;

        return -1L;

     label048:
        $z56 = staticinvoke <android.view.KeyEvent: boolean isModifierKey(int)>(i0);

        if $z56 == 0 goto label051;

        $z20 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingCapsLockToggle>;

        if $z20 != 0 goto label049;

        $i24 = r0.<com.android.server.policy.PhoneWindowManager: int mMetaState>;

        r0.<com.android.server.policy.PhoneWindowManager: int mInitialMetaState> = $i24;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingCapsLockToggle> = 1;

        goto label051;

     label049:
        $i19 = virtualinvoke r77.<android.view.KeyEvent: int getAction()>();

        if $i19 != 1 goto label051;

        i3 = r0.<com.android.server.policy.PhoneWindowManager: int mMetaState>;

        i4 = i3 & 50;

        i5 = i3 & 458752;

        z57 = 0;

        if i5 == 0 goto label050;

        z57 = 0;

        if i4 == 0 goto label050;

        z57 = 0;

        $i22 = r0.<com.android.server.policy.PhoneWindowManager: int mInitialMetaState>;

        $i20 = i4 | i5;

        $i21 = i3 ^ $i20;

        if $i22 != $i21 goto label050;

        $r36 = r0.<com.android.server.policy.PhoneWindowManager: android.hardware.input.InputManagerInternal mInputManagerInternal>;

        $i23 = virtualinvoke r77.<android.view.KeyEvent: int getDeviceId()>();

        virtualinvoke $r36.<android.hardware.input.InputManagerInternal: void toggleCapsLock(int)>($i23);

        z57 = 1;

     label050:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingCapsLockToggle> = 0;

        goto label052;

     label051:
        z57 = 0;

     label052:
        r0.<com.android.server.policy.PhoneWindowManager: int mMetaState> = i2;

        if z57 == 0 goto label053;

        return -1L;

     label053:
        $z7 = staticinvoke <android.view.KeyEvent: boolean isMetaKey(int)>(i0);

        if $z7 == 0 goto label056;

        if z50 == 0 goto label054;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingMetaAction> = 1;

        goto label055;

     label054:
        $z19 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingMetaAction>;

        if $z19 == 0 goto label055;

        $i18 = virtualinvoke r77.<android.view.KeyEvent: int getDeviceId()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchAssistAction(java.lang.String,int)>("android.intent.extra.ASSIST_INPUT_HINT_KEYBOARD", $i18);

     label055:
        return -1L;

     label056:
        $z8 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSearchKeyShortcutPending>;

        if $z8 == 0 goto label063;

        r85 = virtualinvoke r77.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $z18 = virtualinvoke r85.<android.view.KeyCharacterMap: boolean isPrintingKey(int)>(i0);

        if $z18 == 0 goto label063;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mSearchKeyShortcutPending> = 0;

        if z50 == 0 goto label062;

        if i1 != 0 goto label062;

        if z0 != 0 goto label062;

        $r28 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.ShortcutManager mShortcutManager>;

        r86 = virtualinvoke $r28.<com.android.server.policy.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>(r85, i0, i2);

        if r86 == null goto label061;

        virtualinvoke r86.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label057:
        $r35 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r86, $r35);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void dismissKeyboardShortcutsMenu()>();

     label058:
        goto label060;

     label059:
        $r67 := @caughtexception;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping shortcut key combination because the activity to which it is registered was not found: SEARCH+");

        $r70 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i0);

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r72, $r67);

     label060:
        goto label062;

     label061:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping unregistered shortcut key combination: SEARCH+");

        $r31 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i0);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r33);

     label062:
        return -1L;

     label063:
        if z50 == 0 goto label068;

        if i1 != 0 goto label068;

        if z0 != 0 goto label068;

        $i15 = i2 & 65536;

        if $i15 == 0 goto label068;

        r90 = virtualinvoke r77.<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>();

        $z17 = virtualinvoke r90.<android.view.KeyCharacterMap: boolean isPrintingKey(int)>(i0);

        if $z17 == 0 goto label068;

        $r25 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.ShortcutManager mShortcutManager>;

        $i16 = i2 & -458753;

        r91 = virtualinvoke $r25.<com.android.server.policy.ShortcutManager: android.content.Intent getIntent(android.view.KeyCharacterMap,int,int)>(r90, i0, $i16);

        if r91 == null goto label068;

        virtualinvoke r91.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label064:
        $r27 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r91, $r27);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void dismissKeyboardShortcutsMenu()>();

     label065:
        goto label067;

     label066:
        $r54 := @caughtexception;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping shortcut key combination because the activity to which it is registered was not found: META+");

        $r57 = staticinvoke <android.view.KeyEvent: java.lang.String keyCodeToString(int)>(i0);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r59, $r54);

     label067:
        return -1L;

     label068:
        if z50 == 0 goto label073;

        if i1 != 0 goto label073;

        if z0 != 0 goto label073;

        $r21 = <com.android.server.policy.PhoneWindowManager: android.util.SparseArray sApplicationLaunchKeyCategories>;

        $r22 = virtualinvoke $r21.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r94 = (java.lang.String) $r22;

        if r94 == null goto label073;

        r95 = staticinvoke <android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>("android.intent.action.MAIN", r94);

        virtualinvoke r95.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label069:
        $r24 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r95, $r24);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void dismissKeyboardShortcutsMenu()>();

     label070:
        goto label072;

     label071:
        $r60 := @caughtexception;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping application launch key because the activity to which it is registered was not found: keyCode=");

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", category=");

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r66 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r66, $r60);

     label072:
        return -1L;

     label073:
        if z50 == 0 goto label075;

        if i1 != 0 goto label075;

        if i0 != 61 goto label075;

        $i13 = r0.<com.android.server.policy.PhoneWindowManager: int mRecentAppsHeldModifiers>;

        if $i13 != 0 goto label076;

        if z0 != 0 goto label076;

        $z15 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z15 == 0 goto label076;

        $i14 = virtualinvoke r77.<android.view.KeyEvent: int getModifiers()>();

        i57 = $i14 & -194;

        $z16 = staticinvoke <android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>(i57, 2);

        if $z16 == 0 goto label074;

        r0.<com.android.server.policy.PhoneWindowManager: int mRecentAppsHeldModifiers> = i57;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void showRecentApps(boolean)>(1);

        return -1L;

     label074:
        goto label076;

     label075:
        if z50 != 0 goto label076;

        i58 = r0.<com.android.server.policy.PhoneWindowManager: int mRecentAppsHeldModifiers>;

        if i58 == 0 goto label076;

        $i12 = i58 & i2;

        if $i12 != 0 goto label076;

        r0.<com.android.server.policy.PhoneWindowManager: int mRecentAppsHeldModifiers> = 0;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void hideRecentApps(boolean,boolean)>(1, 0);

     label076:
        if i0 != 62 goto label077;

        $i11 = 487424 & i2;

        if $i11 == 0 goto label077;

        z58 = 1;

        goto label078;

     label077:
        z58 = 0;

     label078:
        if z50 == 0 goto label082;

        if i1 != 0 goto label082;

        if i0 == 204 goto label079;

        if z58 == 0 goto label082;

     label079:
        $i9 = i2 & 193;

        if $i9 == 0 goto label080;

        b59 = -1;

        goto label081;

     label080:
        b59 = 1;

     label081:
        $r20 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i10 = virtualinvoke r77.<android.view.KeyEvent: int getDeviceId()>();

        interfaceinvoke $r20.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: void switchKeyboardLayout(int,int)>($i10, b59);

        return -1L;

     label082:
        $z59 = r0.<com.android.server.policy.PhoneWindowManager: boolean mLanguageSwitchKeyPressed>;

        if $z59 == 0 goto label084;

        if z50 != 0 goto label084;

        if i0 == 204 goto label083;

        if i0 != 62 goto label084;

     label083:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mLanguageSwitchKeyPressed> = 0;

        return -1L;

     label084:
        $z60 = staticinvoke <com.android.server.policy.PhoneWindowManager: boolean isValidGlobalKey(int)>(i0);

        if $z60 == 0 goto label085;

        $r19 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalKeyManager mGlobalKeyManager>;

        $r18 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $z14 = virtualinvoke $r19.<com.android.server.policy.GlobalKeyManager: boolean handleGlobalKey(android.content.Context,int,android.view.KeyEvent)>($r18, i0, r77);

        if $z14 == 0 goto label085;

        return -1L;

     label085:
        if z50 == 0 goto label094;

        l60 = (long) i0;

        l61 = l60;

        $z9 = virtualinvoke r77.<android.view.KeyEvent: boolean isCtrlPressed()>();

        if $z9 == 0 goto label086;

        l61 = l60 | 17592186044416L;

     label086:
        l62 = l61;

        $z10 = virtualinvoke r77.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z10 == 0 goto label087;

        l62 = l61 | 8589934592L;

     label087:
        l63 = l62;

        $z11 = virtualinvoke r77.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z11 == 0 goto label088;

        l63 = l62 | 4294967296L;

     label088:
        l64 = l63;

        $z12 = virtualinvoke r77.<android.view.KeyEvent: boolean isMetaPressed()>();

        if $z12 == 0 goto label089;

        l64 = l63 | 281474976710656L;

     label089:
        $r16 = r0.<com.android.server.policy.PhoneWindowManager: android.util.LongSparseArray mShortcutKeyServices>;

        $r17 = virtualinvoke $r16.<android.util.LongSparseArray: java.lang.Object get(long)>(l64);

        r98 = (com.android.internal.policy.IShortcutService) $r17;

        if r98 == null goto label094;

     label090:
        $z13 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z13 == 0 goto label091;

        interfaceinvoke r98.<com.android.internal.policy.IShortcutService: void notifyShortcutKeyPressed(long)>(l64);

     label091:
        goto label093;

     label092:
        $r74 := @caughtexception;

        $r75 = r0.<com.android.server.policy.PhoneWindowManager: android.util.LongSparseArray mShortcutKeyServices>;

        virtualinvoke $r75.<android.util.LongSparseArray: void delete(long)>(l64);

     label093:
        return -1L;

     label094:
        $i8 = 65536 & i2;

        if $i8 == 0 goto label095;

        return -1L;

     label095:
        return 0L;

     label096:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void dispatchDirectAudioEvent(android.view.KeyEvent)>(r77);

        return -1L;

     label097:
        if z50 == 0 goto label101;

        if i0 != 221 goto label098;

        b65 = 1;

        goto label099;

     label098:
        b65 = -1;

     label099:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i7 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "screen_brightness_mode", 0, -3);

        if $i7 == 0 goto label100;

        $r13 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r14, "screen_brightness_mode", 0, -3);

     label100:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        f9 = virtualinvoke $r4.<android.os.PowerManager: float getBrightnessConstraint(int)>(0);

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        f0 = virtualinvoke $r5.<android.os.PowerManager: float getBrightnessConstraint(int)>(1);

        $f3 = f0 - f9;

        f1 = $f3 / 10.0F;

        f2 = (float) b65;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $f4 = virtualinvoke $r8.<android.os.PowerManager: float getBrightnessConstraint(int)>(2);

        $f5 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r7, "screen_brightness_float", $f4, -3);

        $f6 = f1 * f2;

        $f7 = $f5 + $f6;

        $f8 = staticinvoke <java.lang.Math: float min(float,float)>(f0, $f7);

        f10 = staticinvoke <java.lang.Math: float max(float,float)>(f9, $f8);

        $r9 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r10, "screen_brightness_float", f10, -3);

        $r11 = new android.content.Intent;

        specialinvoke $r11.<android.content.Intent: void <init>(java.lang.String)>("com.android.intent.action.SHOW_BRIGHTNESS_DIALOG");

        $r12 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>($r11, $r12);

     label101:
        return -1L;

        catch android.os.RemoteException from label028 to label029 with label030;
        catch android.content.ActivityNotFoundException from label057 to label058 with label059;
        catch android.content.ActivityNotFoundException from label064 to label065 with label066;
        catch android.content.ActivityNotFoundException from label069 to label070 with label071;
        catch android.os.RemoteException from label090 to label091 with label092;
    }

    public int interceptKeyBeforeQueueing(android.view.KeyEvent, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z8, $z9, $z11, $z12, $z13, $z14, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z30, $z31, $z32, z33, z34, z35, z39, z40, z41, $z42, z43, z44, z45, z46, z47, z48, z49, z50, z51, $z52, $z53, z54, z55, z56, $z57, $z58, $z59;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i12, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i23, $i24, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i38, i40, $i41, i42, i45, i46, i47, i48, i49, i50, i51, i53, i54, i55, i56, i57, i58;
        java.lang.StringBuilder $r2;
        java.lang.String $r6, $r27;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r7;
        long $l10, $l16, $l17, $l25, $l28, $l34, $l37;
        android.os.Message $r8, r33, r34, r35, r41;
        java.lang.Runnable $r9, $r13;
        android.os.Handler $r10, $r12, $r17, $r22, $r23, $r25, r45;
        android.content.Context $r11, $r18, $r20, $r39;
        android.view.ViewConfiguration $r14;
        android.os.PowerManager$WakeLock $r15, $r24;
        android.view.KeyEvent $r16, r31;
        android.media.session.MediaSessionLegacyHelper $r19, $r21, $r40;
        android.os.PowerManagerInternal $r26;
        android.os.PowerManager $r28;
        com.android.server.policy.GlobalKeyManager $r29;
        java.lang.Exception $r30;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r32;
        android.app.NotificationManager r36;
        android.telecom.TelecomManager r37, r42, r43;
        android.media.IAudioService $r38;
        com.android.internal.accessibility.AccessibilityShortcutController $r44;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r31 := @parameter0: android.view.KeyEvent;

        i40 := @parameter1: int;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemBooted>;

        if $z2 != 0 goto label01;

        return 0;

     label01:
        $i2 = i40 & 536870912;

        if $i2 == 0 goto label02;

        z33 = 1;

        goto label03;

     label02:
        z33 = 0;

     label03:
        $i3 = virtualinvoke r31.<android.view.KeyEvent: int getAction()>();

        if $i3 != 0 goto label04;

        z34 = 1;

        goto label05;

     label04:
        z34 = 0;

     label05:
        z0 = virtualinvoke r31.<android.view.KeyEvent: boolean isCanceled()>();

        i0 = virtualinvoke r31.<android.view.KeyEvent: int getKeyCode()>();

        i1 = virtualinvoke r31.<android.view.KeyEvent: int getDisplayId()>();

        $i4 = i40 & 16777216;

        if $i4 == 0 goto label06;

        z35 = 1;

        goto label07;

     label06:
        z35 = 0;

     label07:
        r32 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r32 != null goto label08;

        goto label10;

     label08:
        if z33 == 0 goto label09;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        goto label10;

     label09:
        virtualinvoke r32.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

     label10:
        $i41 = i40 & 1;

        if $i41 != 0 goto label12;

        $z32 = virtualinvoke r31.<android.view.KeyEvent: boolean isWakeKey()>();

        if $z32 == 0 goto label11;

        goto label12;

     label11:
        z39 = 0;

        goto label13;

     label12:
        z39 = 1;

     label13:
        if z33 != 0 goto label19;

        if z35 == 0 goto label14;

        if z39 != 0 goto label14;

        goto label19;

     label14:
        if z33 != 0 goto label15;

        $z31 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean shouldDispatchInputWhenNonInteractive(int,int)>(i1, i0);

        if $z31 == 0 goto label15;

        r0.<com.android.server.policy.PhoneWindowManager: int mPendingWakeKey> = -1;

        i42 = 1;

        z40 = z39;

        goto label22;

     label15:
        z41 = z39;

        if z39 == 0 goto label17;

        if z34 == 0 goto label16;

        z41 = z39;

        $z30 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isWakeKeyWhenScreenOff(int)>(i0);

        if $z30 != 0 goto label17;

     label16:
        z41 = 0;

     label17:
        if z41 == 0 goto label18;

        if z34 == 0 goto label18;

        r0.<com.android.server.policy.PhoneWindowManager: int mPendingWakeKey> = i0;

     label18:
        z40 = z41;

        i42 = 0;

        goto label22;

     label19:
        if z33 == 0 goto label21;

        i45 = 1;

        $i38 = r0.<com.android.server.policy.PhoneWindowManager: int mPendingWakeKey>;

        if i0 != $i38 goto label20;

        i45 = 1;

        if z34 != 0 goto label20;

        i45 = 0;

     label20:
        r0.<com.android.server.policy.PhoneWindowManager: int mPendingWakeKey> = -1;

        z40 = 0;

        i42 = i45;

        goto label22;

     label21:
        z40 = 0;

        i42 = 1;

     label22:
        $z42 = staticinvoke <com.android.server.policy.PhoneWindowManager: boolean isValidGlobalKey(int)>(i0);

        if $z42 == 0 goto label24;

        $r29 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalKeyManager mGlobalKeyManager>;

        $z27 = virtualinvoke $r29.<com.android.server.policy.GlobalKeyManager: boolean shouldHandleGlobalKey(int,android.view.KeyEvent)>(i0, r31);

        if $z27 == 0 goto label24;

        if z40 == 0 goto label23;

        $l37 = virtualinvoke r31.<android.view.KeyEvent: long getEventTime()>();

        $z28 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromKey>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>($l37, $z28, 6, "android.policy:KEY");

     label23:
        return i42;

     label24:
        $i5 = virtualinvoke r31.<android.view.KeyEvent: int getFlags()>();

        $i6 = $i5 & 64;

        if $i6 == 0 goto label25;

        z43 = 1;

        goto label26;

     label25:
        z43 = 0;

     label26:
        if z34 == 0 goto label28;

        $i35 = i40 & 2;

        if $i35 == 0 goto label28;

        if z43 == 0 goto label27;

        $z26 = r0.<com.android.server.policy.PhoneWindowManager: boolean mNavBarVirtualKeyHapticFeedbackEnabled>;

        if $z26 == 0 goto label28;

     label27:
        $i36 = virtualinvoke r31.<android.view.KeyEvent: int getRepeatCount()>();

        if $i36 != 0 goto label28;

        z44 = 1;

        goto label29;

     label28:
        z44 = 0;

     label29:
        z45 = z44;

        if i0 == 4 goto label81;

        if i0 == 5 goto label79;

        if i0 == 6 goto label73;

        if i0 == 79 goto label71;

        if i0 == 130 goto label71;

        if i0 == 164 goto label54;

        if i0 == 171 goto label52;

        if i0 == 219 goto label47;

        if i0 == 231 goto label45;

        if i0 == 276 goto label43;

        if i0 == 126 goto label39;

        if i0 == 127 goto label39;

        tableswitch(i0)
        {
            case 24: goto label42;
            case 25: goto label42;
            case 26: goto label40;
            default: goto label30;
        };

     label30:
        tableswitch(i0)
        {
            case 85: goto label39;
            case 86: goto label39;
            case 87: goto label39;
            case 88: goto label39;
            case 89: goto label39;
            case 90: goto label39;
            case 91: goto label39;
            default: goto label31;
        };

     label31:
        tableswitch(i0)
        {
            case 222: goto label39;
            case 223: goto label36;
            case 224: goto label35;
            default: goto label32;
        };

     label32:
        tableswitch(i0)
        {
            case 280: goto label34;
            case 281: goto label34;
            case 282: goto label34;
            case 283: goto label34;
            default: goto label33;
        };

     label33:
        z46 = z40;

        i46 = i42;

        goto label84;

     label34:
        i47 = i42 & -2;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptSystemNavigationKey(android.view.KeyEvent)>(r31);

        z46 = z40;

        i46 = i47;

        goto label84;

     label35:
        i48 = i42 & -2;

        z46 = 1;

        i46 = i48;

        goto label84;

     label36:
        i49 = i42 & -2;

        $r28 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $z25 = virtualinvoke $r28.<android.os.PowerManager: boolean isInteractive()>();

        if $z25 != 0 goto label37;

        z45 = 0;

     label37:
        if z34 == 0 goto label38;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void sleepPress()>();

        z47 = z45;

        goto label44;

     label38:
        $l34 = virtualinvoke r31.<android.view.KeyEvent: long getEventTime()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void sleepRelease(long)>($l34);

        z47 = z45;

        goto label44;

     label39:
        goto label71;

     label40:
        $i32 = virtualinvoke r31.<android.view.KeyEvent: int getAction()>();

        $r27 = staticinvoke <android.view.KeyEvent: java.lang.String actionToString(int)>($i32);

        $z24 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPowerKeyHandled>;

        $i33 = r0.<com.android.server.policy.PhoneWindowManager: int mPowerKeyPressCounter>;

        i58 = (int) $z24;

        staticinvoke <com.android.server.policy.EventLogTags: void writeInterceptPower(java.lang.String,int,int)>($r27, i58, $i33);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingAccessibilityShortcutAction()>();

        i49 = i42 & -2;

        if z34 == 0 goto label41;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptPowerKeyDown(android.view.KeyEvent,boolean)>(r31, z33);

        z47 = z44;

        goto label44;

     label41:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptPowerKeyUp(android.view.KeyEvent,boolean,boolean)>(r31, z33, z0);

        z47 = z44;

        goto label44;

     label42:
        goto label54;

     label43:
        i50 = i42 & -2;

        z47 = z44;

        i49 = i50;

        if z34 != 0 goto label44;

        $r26 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManagerInternal mPowerManagerInternal>;

        virtualinvoke $r26.<android.os.PowerManagerInternal: void setUserInactiveOverrideFromWindowManager()>();

        i49 = i50;

        z47 = z44;

     label44:
        z46 = 0;

        i46 = i49;

        z44 = z47;

        goto label84;

     label45:
        if z34 != 0 goto label46;

        $r24 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r24.<android.os.PowerManager$WakeLock: void acquire()>();

        $r25 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r33 = virtualinvoke $r25.<android.os.Handler: android.os.Message obtainMessage(int)>(12);

        virtualinvoke r33.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r33.<android.os.Message: void sendToTarget()>();

     label46:
        i51 = i42 & -2;

        z44 = z45;

        z46 = z40;

        i46 = i51;

        goto label84;

     label47:
        $i30 = virtualinvoke r31.<android.view.KeyEvent: int getRepeatCount()>();

        if $i30 <= 0 goto label48;

        z48 = 1;

        goto label49;

     label48:
        z48 = 0;

     label49:
        if z34 == 0 goto label50;

        if z48 == 0 goto label50;

        $r23 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r34 = virtualinvoke $r23.<android.os.Handler: android.os.Message obtainMessage(int)>(24);

        virtualinvoke r34.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r34.<android.os.Message: void sendToTarget()>();

     label50:
        if z34 != 0 goto label51;

        if z48 != 0 goto label51;

        $r22 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $i31 = virtualinvoke r31.<android.view.KeyEvent: int getDeviceId()>();

        r35 = virtualinvoke $r22.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(23, $i31, 0, null);

        virtualinvoke r35.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r35.<android.os.Message: void sendToTarget()>();

        goto label51;

     label51:
        i46 = i42 & -2;

        z46 = z40;

        goto label84;

     label52:
        z49 = z44;

        z46 = z40;

        i46 = i42;

        $i29 = r0.<com.android.server.policy.PhoneWindowManager: int mShortPressOnWindowBehavior>;

        if $i29 != 1 goto label84;

        z46 = z40;

        i46 = i42;

        z44 = z49;

        $z23 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPictureInPictureVisible>;

        if $z23 == 0 goto label84;

        if z34 != 0 goto label53;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void showPictureInPictureMenu(android.view.KeyEvent)>(r31);

     label53:
        i46 = i42 & -2;

        z46 = z40;

        z44 = z49;

        goto label84;

     label54:
        z50 = z44;

        if i0 != 25 goto label56;

        if z34 == 0 goto label55;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingRingerToggleChordAction()>();

        if z33 == 0 goto label58;

        $z22 = r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered>;

        if $z22 != 0 goto label58;

        $i26 = virtualinvoke r31.<android.view.KeyEvent: int getFlags()>();

        $i27 = $i26 & 1024;

        if $i27 != 0 goto label58;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered> = 1;

        $l28 = virtualinvoke r31.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.server.policy.PhoneWindowManager: long mScreenshotChordVolumeDownKeyTime> = $l28;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyConsumed> = 0;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptScreenshotChord()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptAccessibilityShortcutChord()>();

        goto label58;

     label55:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mScreenshotChordVolumeDownKeyTriggered> = 0;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingAccessibilityShortcutAction()>();

        goto label58;

     label56:
        if i0 != 24 goto label58;

        if z34 == 0 goto label57;

        if z33 == 0 goto label58;

        $z21 = r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered>;

        if $z21 != 0 goto label58;

        $i23 = virtualinvoke r31.<android.view.KeyEvent: int getFlags()>();

        $i24 = $i23 & 1024;

        if $i24 != 0 goto label58;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered> = 1;

        $l25 = virtualinvoke r31.<android.view.KeyEvent: long getDownTime()>();

        r0.<com.android.server.policy.PhoneWindowManager: long mA11yShortcutChordVolumeUpKeyTime> = $l25;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyConsumed> = 0;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingPowerKeyAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingRingerToggleChordAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptAccessibilityShortcutChord()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptRingerToggleChord()>();

        goto label58;

     label57:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mA11yShortcutChordVolumeUpKeyTriggered> = 0;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingScreenshotChordAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingAccessibilityShortcutAction()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void cancelPendingRingerToggleChordAction()>();

     label58:
        if z34 == 0 goto label68;

        $i20 = virtualinvoke r31.<android.view.KeyEvent: int getKeyCode()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendSystemKeyToStatusBarAsync(int)>($i20);

        r36 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.app.NotificationManager getNotificationService()>();

        if r36 == null goto label59;

        $z20 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHandleVolumeKeysInWM>;

        if $z20 != 0 goto label59;

        virtualinvoke r36.<android.app.NotificationManager: void silenceNotificationSound()>();

     label59:
        r37 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        if r37 == null goto label60;

        $z18 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHandleVolumeKeysInWM>;

        if $z18 != 0 goto label60;

        $z19 = virtualinvoke r37.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z19 == 0 goto label60;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyBeforeQueueing: VOLUME key-down while ringing: Silence ringer!");

        virtualinvoke r37.<android.telecom.TelecomManager: void silenceRinger()>();

        i46 = i42 & -2;

        z46 = z40;

        z44 = z50;

        goto label84;

     label60:
        $r38 = staticinvoke <com.android.server.policy.PhoneWindowManager: android.media.IAudioService getAudioService()>();

        i53 = interfaceinvoke $r38.<android.media.IAudioService: int getMode()>();

     label61:
        goto label63;

     label62:
        $r30 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Error getting AudioService in interceptKeyBeforeQueueing.", $r30);

        i53 = 0;

     label63:
        if r37 == null goto label64;

        $z17 = virtualinvoke r37.<android.telecom.TelecomManager: boolean isInCall()>();

        if $z17 != 0 goto label65;

     label64:
        if i53 != 3 goto label66;

     label65:
        z51 = 1;

        goto label67;

     label66:
        z51 = 0;

     label67:
        if z51 == 0 goto label68;

        $i21 = i42 & 1;

        if $i21 != 0 goto label68;

        $r20 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r21 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r20);

        virtualinvoke $r21.<android.media.session.MediaSessionLegacyHelper: void sendVolumeKeyEvent(android.view.KeyEvent,int,boolean)>(r31, -2147483648, 0);

        z46 = z40;

        i46 = i42;

        z44 = z50;

        goto label84;

     label68:
        $z52 = r0.<com.android.server.policy.PhoneWindowManager: boolean mUseTvRouting>;

        if $z52 != 0 goto label70;

        $z16 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHandleVolumeKeysInWM>;

        if $z16 == 0 goto label69;

        goto label70;

     label69:
        z46 = z40;

        i46 = i42;

        z44 = z50;

        $i19 = i42 & 1;

        if $i19 != 0 goto label84;

        $r18 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r19 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r18);

        virtualinvoke $r19.<android.media.session.MediaSessionLegacyHelper: void sendVolumeKeyEvent(android.view.KeyEvent,int,boolean)>(r31, -2147483648, 1);

        z46 = z40;

        i46 = i42;

        z44 = z50;

        goto label84;

     label70:
        i46 = i42 | 1;

        z46 = z40;

        z44 = z50;

        goto label84;

     label71:
        z1 = z44;

        i54 = i42;

        $r39 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r40 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper getHelper(android.content.Context)>($r39);

        $z53 = virtualinvoke $r40.<android.media.session.MediaSessionLegacyHelper: boolean isGlobalPriorityActive()>();

        if $z53 == 0 goto label72;

        i54 = i42 & -2;

     label72:
        z46 = z40;

        i46 = i54;

        z44 = z1;

        $i18 = i54 & 1;

        if $i18 != 0 goto label84;

        $r15 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r15.<android.os.PowerManager$WakeLock: void acquire()>();

        $r17 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r16 = new android.view.KeyEvent;

        specialinvoke $r16.<android.view.KeyEvent: void <init>(android.view.KeyEvent)>(r31);

        r41 = virtualinvoke $r17.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, $r16);

        virtualinvoke r41.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r41.<android.os.Message: void sendToTarget()>();

        z46 = z40;

        i46 = i54;

        z44 = z1;

        goto label84;

     label73:
        z54 = z44;

        i55 = i42 & -2;

        if z34 == 0 goto label77;

        r42 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        z55 = 0;

        if r42 == null goto label74;

        z55 = virtualinvoke r42.<android.telecom.TelecomManager: boolean endCall()>();

     label74:
        if z33 == 0 goto label75;

        if z55 != 0 goto label75;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mEndCallKeyHandled> = 0;

        $r12 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r13 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mEndCallLongPress>;

        $r11 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r14 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r11);

        $l17 = virtualinvoke $r14.<android.view.ViewConfiguration: long getDeviceGlobalActionKeyTimeout()>();

        virtualinvoke $r12.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r13, $l17);

        goto label76;

     label75:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mEndCallKeyHandled> = 1;

     label76:
        z46 = z40;

        i46 = i55;

        z44 = z54;

        goto label84;

     label77:
        z46 = z40;

        i46 = i55;

        $z13 = r0.<com.android.server.policy.PhoneWindowManager: boolean mEndCallKeyHandled>;

        if $z13 != 0 goto label84;

        $r10 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r9 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Runnable mEndCallLongPress>;

        virtualinvoke $r10.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r9);

        z46 = z40;

        i46 = i55;

        z44 = z54;

        if z0 != 0 goto label84;

        $i12 = r0.<com.android.server.policy.PhoneWindowManager: int mEndcallBehavior>;

        $i13 = $i12 & 1;

        if $i13 == 0 goto label78;

        $z14 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean goHome()>();

        if $z14 == 0 goto label78;

        z46 = z40;

        i46 = i55;

        z44 = z54;

        goto label84;

     label78:
        z46 = z40;

        i46 = i55;

        z44 = z54;

        $i14 = r0.<com.android.server.policy.PhoneWindowManager: int mEndcallBehavior>;

        $i15 = $i14 & 2;

        if $i15 == 0 goto label84;

        $l16 = virtualinvoke r31.<android.view.KeyEvent: long getEventTime()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void goToSleep(long,int,int)>($l16, 4, 0);

        z46 = 0;

        i46 = i55;

        z44 = z54;

        goto label84;

     label79:
        z56 = z44;

        z46 = z40;

        i46 = i42;

        if z34 == 0 goto label84;

        r43 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.telecom.TelecomManager getTelecommService()>();

        i46 = i42;

        if r43 == null goto label80;

        i46 = i42;

        $z12 = virtualinvoke r43.<android.telecom.TelecomManager: boolean isRinging()>();

        if $z12 == 0 goto label80;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyBeforeQueueing: CALL key-down while ringing: Answer the call!");

        virtualinvoke r43.<android.telecom.TelecomManager: void acceptRingingCall()>();

        i46 = i42 & -2;

     label80:
        z46 = z40;

        z44 = z56;

        goto label84;

     label81:
        if z34 == 0 goto label82;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void interceptBackKeyDown()>();

        z46 = z40;

        i46 = i42;

        goto label84;

     label82:
        i46 = i42;

        $z3 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean interceptBackKeyUp(android.view.KeyEvent)>(r31);

        if $z3 == 0 goto label83;

        i46 = i42 & -2;

     label83:
        z46 = z40;

     label84:
        i56 = i46;

        $z57 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureLeanback>;

        if $z57 == 0 goto label86;

        if i0 == 4 goto label85;

        if i0 == 20 goto label85;

        i56 = i46;

        goto label86;

     label85:
        i56 = i46;

        $z11 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean interceptAccessibilityGestureTv(int,boolean)>(i0, z34);

        if $z11 == 0 goto label86;

        i56 = i46 & -2;

     label86:
        i57 = i56;

        $r44 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController>;

        $z58 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardLocked()>();

        $z59 = virtualinvoke $r44.<com.android.internal.accessibility.AccessibilityShortcutController: boolean isAccessibilityShortcutAvailable(boolean)>($z58);

        if $z59 == 0 goto label88;

        if i0 == 54 goto label87;

        i57 = i56;

        goto label88;

     label87:
        i57 = i56;

        if z34 == 0 goto label88;

        i57 = i56;

        $z8 = virtualinvoke r31.<android.view.KeyEvent: boolean isCtrlPressed()>();

        if $z8 == 0 goto label88;

        i57 = i56;

        $z9 = virtualinvoke r31.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z9 == 0 goto label88;

        r45 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r8 = virtualinvoke r45.<android.os.Handler: android.os.Message obtainMessage(int)>(17);

        virtualinvoke r45.<android.os.Handler: boolean sendMessage(android.os.Message)>($r8);

        i57 = i56 & -2;

     label88:
        if z44 == 0 goto label89;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(1, 0, "Virtual Key - Press");

     label89:
        if z46 == 0 goto label90;

        $l10 = virtualinvoke r31.<android.view.KeyEvent: long getEventTime()>();

        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromKey>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>($l10, $z5, 6, "android.policy:KEY");

        goto label90;

     label90:
        $i7 = i57 & 1;

        if $i7 == 0 goto label91;

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mPerDisplayFocusEnabled>;

        if $z4 != 0 goto label91;

        if i1 == -1 goto label91;

        $i8 = r0.<com.android.server.policy.PhoneWindowManager: int mTopFocusedDisplayId>;

        if i1 == $i8 goto label91;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Moving non-focused display ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to top because a key is targeting it");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r6);

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        interfaceinvoke $r7.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: void moveDisplayToTop(int)>(i1);

     label91:
        return i57;

        catch java.lang.Exception from label60 to label61 with label62;
    }

    public int interceptMotionBeforeQueueingNonInteractive(int, long, int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, i2, $i3, $i4;
        long l1, $l5, $l6;
        boolean $z0, $z1, $z2, $z4, $z5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $i3 = i2 & 1;

        if $i3 == 0 goto label1;

        $l6 = l1 / 1000000L;

        $z4 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromMotion>;

        $z5 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>($l6, $z4, 7, "android.policy:MOTION");

        if $z5 == 0 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean shouldDispatchInputWhenNonInteractive(int,int)>(i0, 0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isTheaterModeEnabled()>();

        if $z1 == 0 goto label3;

        $i4 = i2 & 1;

        if $i4 == 0 goto label3;

        $l5 = l1 / 1000000L;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromMotionWhenNotDreaming>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>($l5, $z2, 7, "android.policy:MOTION");

     label3:
        return 0;
    }

    boolean isDeviceProvisioned()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "device_provisioned", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isKeyguardDrawnLw()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardDrawnOnce>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2040 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isKeyguardLocked()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean keyguardOn()>();

        return $z0;
    }

    public boolean isKeyguardOccluded()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        return $z0;
    }

    public boolean isKeyguardSecure(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isSecure(int)>(i0);

        return $z0;
    }

    public boolean isKeyguardShowing()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        return $z0;
    }

    public boolean isKeyguardShowingAndNotOccluded()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        boolean $z1, $z2, z3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 != null goto label1;

        return 0;

     label1:
        z3 = 0;

        $z1 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z1 == 0 goto label2;

        z3 = 0;

        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        if $z2 != 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    public boolean isKeyguardTrustedLw()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isTrusted()>();

        return $z0;
    }

    public boolean isScreenOn()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.wm.DisplayPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean isScreenOnEarly()>();

        return $z0;
    }

    public boolean isTopLevelWindow(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 = 1;

        if i0 < 1000 goto label3;

        if i0 > 1999 goto label3;

        if i0 != 1003 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        return 1;
    }

    public boolean isUserSetupComplete()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z2 = 0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_setup_complete", 0, -2);

        if $i0 == 0 goto label1;

        z2 = 1;

     label1:
        z3 = z2;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureLeanback>;

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isTvUserSetupComplete()>();

        z3 = z2 & $z1;

     label2:
        return z3;
    }

    public void keepScreenOnStartedLw()
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        return;
    }

    public void keepScreenOnStoppedLw()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        android.os.PowerManager $r1;
        long $l0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void userActivity(long,boolean)>($l0, 0);

     label1:
        return;
    }

    boolean keyguardOn()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean inKeyguardRestrictedKeyInputMode()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    void launchHomeFromHotKey(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void launchHomeFromHotKey(int,boolean,boolean)>(i0, 1, 1);

        return;
    }

    void launchHomeFromHotKey(int, boolean, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        android.app.IActivityManager $r2;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r3, $r5;
        com.android.server.policy.PhoneWindowManager$9 $r4;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        if $z2 == 0 goto label1;

        return;

     label1:
        $z3 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        if $z3 != 0 goto label2;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z4 = virtualinvoke $r3.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isInputRestricted()>();

        if $z4 == 0 goto label2;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r4 = new com.android.server.policy.PhoneWindowManager$9;

        specialinvoke $r4.<com.android.server.policy.PhoneWindowManager$9: void <init>(com.android.server.policy.PhoneWindowManager,int,boolean)>(r0, i0, z0);

        virtualinvoke $r5.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void verifyUnlock(com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult)>($r4);

        return;

     label2:
        $z5 = r0.<com.android.server.policy.PhoneWindowManager: boolean mRecentsVisible>;

        if $z5 == 0 goto label8;

     label3:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void stopAppSwitches()>();

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        if z0 == 0 goto label7;

        staticinvoke <com.android.server.policy.PhoneWindowManager: void awakenDreams()>();

     label7:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void hideRecentApps(boolean,boolean)>(0, 1);

        goto label9;

     label8:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void startDockOrHome(int,boolean,boolean)>(i0, 1, z0);

     label9:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    void launchVoiceAssistWithWakeLock()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean $z0;
        android.os.IBinder $r1;
        android.content.Intent $r3, r5, $r8;
        android.os.RemoteException $r4;
        android.os.IDeviceIdleController r6;
        android.os.UserHandle $r9;
        android.os.PowerManager$WakeLock $r10;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("assist");

        $z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean keyguardOn()>();

        if $z0 != 0 goto label1;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.speech.action.WEB_SEARCH");

        r5 = $r3;

        goto label6;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("deviceidle");

        r6 = staticinvoke <android.os.IDeviceIdleController$Stub: android.os.IDeviceIdleController asInterface(android.os.IBinder)>($r1);

        if r6 == null goto label5;

     label2:
        interfaceinvoke r6.<android.os.IDeviceIdleController: void exitIdle(java.lang.String)>("voice-search");

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.speech.action.VOICE_SEARCH_HANDS_FREE");

        r5 = $r8;

        virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.speech.extras.EXTRA_SECURE", 1);

     label6:
        $r9 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r5, $r9);

        $r10 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r10.<android.os.PowerManager$WakeLock: void release()>();

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void lockNow(android.os.Bundle)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Bundle r1;
        android.content.Context $r2;
        com.android.server.policy.PhoneWindowManager$ScreenLockTimeout $r3, $r5, $r7;
        android.os.Handler $r4, $r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        if r1 == null goto label1;

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r7.<com.android.server.policy.PhoneWindowManager$ScreenLockTimeout: void setLockOptions(android.os.Bundle)>(r1);

     label1:
        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }

    public void notifyCameraLensCoverSwitchChanged(long, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, $l2;
        boolean z0, $z1, z3;
        int i1, i3, i4;
        android.content.Intent $r1, $r3, r5;
        android.os.UserHandle $r2;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 = r0.<com.android.server.policy.PhoneWindowManager: int mCameraLensCoverState>;

        i3 = (int) z0;

        if i1 != i3 goto label1;

        return;

     label1:
        if i1 != 1 goto label6;

        if z0 != 0 goto label6;

        r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r4 != null goto label2;

        z3 = 0;

        goto label3;

     label2:
        z3 = virtualinvoke r4.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

     label3:
        if z3 == 0 goto label4;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.media.action.STILL_IMAGE_CAMERA_SECURE");

        r5 = $r3;

        goto label5;

     label4:
        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.media.action.STILL_IMAGE_CAMERA");

        r5 = $r1;

     label5:
        $l2 = l0 / 1000000L;

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromCameraLens>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>($l2, $z1, 5, "android.policy:CAMERA_COVER");

        $r2 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r5, $r2);

     label6:
        i4 = (int) z0;

        r0.<com.android.server.policy.PhoneWindowManager: int mCameraLensCoverState> = i4;

        return;
    }

    public void notifyLidSwitchChanged(long, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, $l3, $l4;
        boolean z0, $z1;
        com.android.server.wm.DisplayPolicy $r1, $r2;
        int $i1, $i2, i5, i6;
        android.os.PowerManager $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $i1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int getLidState()>();

        i5 = (int) z0;

        if i5 != $i1 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        i6 = (int) z0;

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void setLidState(int)>(i6);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void applyLidSwitchState()>();

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateRotation(boolean)>(1);

        if z0 == 0 goto label2;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAllowTheaterModeWakeFromLidSwitch>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean wakeUp(long,boolean,int,java.lang.String)>($l4, $z1, 9, "android.policy:LID");

        goto label3;

     label2:
        $i2 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: int getLidBehavior()>();

        if $i2 == 1 goto label3;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void userActivity(long,boolean)>($l3, 0);

     label3:
        return;
    }

    public boolean okToAnimate()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.wm.DisplayPolicy $r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean isAwake()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mGoingToSleep>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public void onDefaultDisplayFocusChangedLw(com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.DisplayFoldController r1;
        com.android.server.policy.WindowManagerPolicy$WindowState r2;
        java.lang.String r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r2 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r1 == null goto label3;

        if r2 == null goto label1;

        r3 = interfaceinvoke r2.<com.android.server.policy.WindowManagerPolicy$WindowState: java.lang.String getOwningPackage()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        virtualinvoke r1.<com.android.server.policy.DisplayFoldController: void onDefaultDisplayFocusChanged(java.lang.String)>(r3);

     label3:
        return;
    }

    public void onKeyguardOccludedChangedLw(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z2;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 == null goto label1;

        $z2 = virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean isShowing()>();

        if $z2 == 0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPendingKeyguardOccluded> = z0;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccludedChanged> = 1;

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean setKeyguardOccludedLw(boolean,boolean)>(z0, 0);

     label2:
        return;
    }

    public void onSystemUiStarted()
    {
        com.android.server.policy.PhoneWindowManager r0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void bindKeyguard()>();

        return;
    }

    public boolean performHapticFeedback(int, java.lang.String, int, boolean, java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, i1, $i2;
        java.lang.String r1, r2;
        boolean z0, $z1, z2;
        android.os.VibrationEffect r3;
        android.os.Vibrator $r4, $r8;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        android.media.AudioAttributes $r7;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: java.lang.String;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $z1 = virtualinvoke $r4.<android.os.Vibrator: boolean hasVibrator()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r6, "haptic_feedback_enabled", 0, -2);

        if $i2 != 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if z2 == 0 goto label4;

        if z0 != 0 goto label4;

        return 0;

     label4:
        r3 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: android.os.VibrationEffect getVibrationEffect(int)>(i1);

        if r3 != null goto label5;

        return 0;

     label5:
        $r8 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $r7 = <com.android.server.policy.PhoneWindowManager: android.media.AudioAttributes VIBRATION_ATTRIBUTES>;

        virtualinvoke $r8.<android.os.Vibrator: void vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.media.AudioAttributes)>(i0, r1, r3, r2, $r7);

        return 1;
    }

    void readLidState()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r1;
        com.android.server.wm.DisplayPolicy $r2;
        int $i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        $i0 = interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int getLidState()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void setLidState(int)>($i0);

        return;
    }

    public void registerDisplayFoldListener(android.view.IDisplayFoldListener)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.IDisplayFoldListener r1;
        com.android.server.policy.DisplayFoldController r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.policy.DisplayFoldController: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>(r1);

     label1:
        return;
    }

    public void registerShortcutKey(long, com.android.internal.policy.IShortcutService) throws android.os.RemoteException
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0;
        java.lang.Object r1, $r4;
        com.android.internal.policy.IShortcutService r2, r8;
        android.util.LongSparseArray $r3, $r5;
        android.os.IBinder $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        android.os.RemoteException r9;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        r8 := @parameter1: com.android.internal.policy.IShortcutService;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.util.LongSparseArray mShortcutKeyServices>;

        $r4 = virtualinvoke $r3.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r2 = (com.android.internal.policy.IShortcutService) $r4;

     label02:
        if r2 == null goto label06;

     label03:
        $r6 = interfaceinvoke r2.<com.android.internal.policy.IShortcutService: android.os.IBinder asBinder()>();

        $z0 = interfaceinvoke $r6.<android.os.IBinder: boolean pingBinder()>();

        if $z0 != 0 goto label05;

     label04:
        goto label06;

     label05:
        r9 = new android.os.RemoteException;

        specialinvoke r9.<android.os.RemoteException: void <init>(java.lang.String)>("Key already exists.");

        throw r9;

     label06:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: android.util.LongSparseArray mShortcutKeyServices>;

        virtualinvoke $r5.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r8);

        exitmonitor r1;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void screenTurnedOff()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r4, $r6;
        com.android.server.wm.DisplayRotation $r5;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateScreenOffSleepToken(boolean)>(1);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: void screenTurnedOff()>();

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r4 == null goto label2;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r6.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurnedOff()>();

     label2:
        exitmonitor r1;

     label3:
        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        virtualinvoke $r5.<com.android.server.wm.DisplayRotation: void updateOrientationListener()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void reportScreenStateToVrManager(boolean)>(0);

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void screenTurnedOn()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r4.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurnedOn()>();

     label2:
        exitmonitor r1;

     label3:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void reportScreenStateToVrManager(boolean)>(1);

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r2;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r3, $r4;
        java.lang.Throwable $r5;
        com.android.server.policy.WindowManagerPolicy$ScreenOffListener r6;
        java.lang.Object r7;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r6 := @parameter0: com.android.server.policy.WindowManagerPolicy$ScreenOffListener;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)>(r6);

        r7 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r7;

     label1:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r4.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurningOff()>();

     label2:
        exitmonitor r7;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r7;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void screenTurningOn(com.android.server.policy.WindowManagerPolicy$ScreenOnListener)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.wm.DisplayPolicy $r2;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r3, $r5, $r9;
        android.os.Handler $r4, $r6, $r7;
        boolean $z1;
        long $l0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate$DrawnListener $r8;
        java.lang.Throwable $r10;
        com.android.server.policy.WindowManagerPolicy$ScreenOnListener r11;
        java.lang.Object r12;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r11 := @parameter0: com.android.server.policy.WindowManagerPolicy$ScreenOnListener;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(32L, "screenTurningOn", 0);

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateScreenOffSleepToken(boolean)>(0);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void screenTurnedOn(com.android.server.policy.WindowManagerPolicy$ScreenOnListener)>(r11);

        r12 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r12;

     label1:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if $r3 == null goto label3;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $z1 = virtualinvoke $r5.<com.android.server.policy.keyguard.KeyguardServiceDelegate: boolean hasKeyguard()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(6);

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $l0 = specialinvoke r0.<com.android.server.policy.PhoneWindowManager: long getKeyguardDrawnTimeout()>();

        virtualinvoke $r7.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(6, $l0);

        $r9 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate$DrawnListener mKeyguardDrawnCallback>;

        virtualinvoke $r9.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onScreenTurningOn(com.android.server.policy.keyguard.KeyguardServiceDelegate$DrawnListener)>($r8);

     label2:
        goto label4;

     label3:
        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendEmptyMessage(int)>(5);

     label4:
        exitmonitor r12;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r12;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void sendCloseSystemWindows()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, r1);

        return;
    }

    public void setAllowLockscreenWhenOn(int, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        boolean z0;
        java.util.HashSet $r1, $r3;
        java.lang.Integer $r2, $r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: java.util.HashSet mAllowLockscreenWhenOnDisplays>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>($r4);

        goto label2;

     label1:
        $r1 = r0.<com.android.server.policy.PhoneWindowManager: java.util.HashSet mAllowLockscreenWhenOnDisplays>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.util.HashSet: boolean remove(java.lang.Object)>($r2);

     label2:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateLockScreenTimeout()>();

        return;
    }

    public boolean setAodShowing(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mAodShowing>;

        if $z1 == z0 goto label1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mAodShowing> = z0;

        return 1;

     label1:
        return 0;
    }

    public void setCurrentUserLw(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;
        com.android.internal.accessibility.AccessibilityShortcutController r2;
        com.android.server.statusbar.StatusBarManagerInternal r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId> = i0;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setCurrentUser(int)>(i0);

     label1:
        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.internal.accessibility.AccessibilityShortcutController mAccessibilityShortcutController>;

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.internal.accessibility.AccessibilityShortcutController: void setCurrentUser(int)>(i0);

     label2:
        r3 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: com.android.server.statusbar.StatusBarManagerInternal getStatusBarManagerInternal()>();

        if r3 == null goto label3;

        interfaceinvoke r3.<com.android.server.statusbar.StatusBarManagerInternal: void setCurrentUser(int)>(i0);

     label3:
        return;
    }

    public void setDefaultDisplay(com.android.server.policy.WindowManagerPolicy$DisplayContentInfo)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.Display $r1;
        com.android.server.wm.DisplayPolicy $r2;
        com.android.server.policy.WindowManagerPolicy$DisplayContentInfo r3;
        com.android.server.wm.DisplayRotation r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r3 := @parameter0: com.android.server.policy.WindowManagerPolicy$DisplayContentInfo;

        $r1 = interfaceinvoke r3.<com.android.server.policy.WindowManagerPolicy$DisplayContentInfo: android.view.Display getDisplay()>();

        r0.<com.android.server.policy.PhoneWindowManager: android.view.Display mDefaultDisplay> = $r1;

        r4 = interfaceinvoke r3.<com.android.server.policy.WindowManagerPolicy$DisplayContentInfo: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation> = r4;

        $r2 = virtualinvoke r4.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy> = $r2;

        return;
    }

    public void setDismissImeOnBackKeyPressed(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mDismissImeOnBackKeyPressed> = z0;

        return;
    }

    public void setKeyguardCandidateLw(com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.WindowManagerPolicy$WindowState r1;
        boolean $z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowState mKeyguardCandidate> = r1;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mKeyguardOccluded>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean setKeyguardOccludedLw(boolean,boolean)>($z0, 1);

        return;
    }

    public void setNavBarVirtualKeyHapticFeedbackEnabledLw(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mNavBarVirtualKeyHapticFeedbackEnabled> = z0;

        return;
    }

    public void setOverrideFoldedArea(android.graphics.Rect)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.graphics.Rect r1;
        com.android.server.policy.DisplayFoldController r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.policy.DisplayFoldController: void setOverrideFoldedArea(android.graphics.Rect)>(r1);

     label1:
        return;
    }

    public void setPipVisibilityLw(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mPictureInPictureVisible> = z0;

        return;
    }

    public void setRecentsVisibilityLw(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mRecentsVisible> = z0;

        return;
    }

    public void setSafeMode(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mSafeMode> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean performHapticFeedback(int,boolean,java.lang.String)>(10001, 1, "Safe Mode Enabled");

     label1:
        return;
    }

    public void setSwitchingUser(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void setSwitchingUser(boolean)>(z0);

        return;
    }

    public void setTopFocusedDisplay(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r0.<com.android.server.policy.PhoneWindowManager: int mTopFocusedDisplayId> = i0;

        return;
    }

    public void showBootMessage(java.lang.CharSequence, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.CharSequence r1;
        boolean z0;
        com.android.server.policy.PhoneWindowManager$14 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r2 = new com.android.server.policy.PhoneWindowManager$14;

        specialinvoke $r2.<com.android.server.policy.PhoneWindowManager$14: void <init>(com.android.server.policy.PhoneWindowManager,java.lang.CharSequence)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void showGlobalActions()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Handler $r1, $r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(10);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessage(int)>(10);

        return;
    }

    void showGlobalActionsInternal()
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0, $z1;
        com.android.server.policy.GlobalActions $r1, $r2, $r4;
        android.os.PowerManager $r3;
        long $l0;
        com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs $r5;
        android.content.Context $r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalActions mGlobalActions>;

        if $r1 != null goto label1;

        $r4 = new com.android.server.policy.GlobalActions;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        specialinvoke $r4.<com.android.server.policy.GlobalActions: void <init>(android.content.Context,com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs)>($r6, $r5);

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalActions mGlobalActions> = $r4;

     label1:
        z0 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isKeyguardShowingAndNotOccluded()>();

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.GlobalActions mGlobalActions>;

        $z1 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isDeviceProvisioned()>();

        virtualinvoke $r2.<com.android.server.policy.GlobalActions: void showDialog(boolean,boolean)>(z0, $z1);

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void userActivity(long,boolean)>($l0, 0);

        return;
    }

    public void showRecentApps()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.os.Handler $r1, $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r1 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(9);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(9);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void startDockOrHome(int, boolean, boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0, $i1;
        boolean z0, z1, $z2, $z4;
        android.app.IActivityManager $r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        android.os.UserHandle $r3;
        android.content.ActivityNotFoundException $r5;
        android.os.RemoteException $r6;
        android.content.Intent r8;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label01:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void stopAppSwitches()>();

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

     label04:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("homekey");

        if z1 == 0 goto label05;

        staticinvoke <com.android.server.policy.PhoneWindowManager: void awakenDreams()>();

     label05:
        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasFeatureAuto>;

        if $z2 != 0 goto label06;

        $z4 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: boolean isUserSetupComplete()>();

        if $z4 != 0 goto label06;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Not going home because user setup is in progress.");

        return;

     label06:
        r8 = virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: android.content.Intent createHomeDockIntent()>();

        if r8 == null goto label11;

        if z0 == 0 goto label08;

     label07:
        virtualinvoke r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.intent.extra.FROM_HOME_KEY", z0);

     label08:
        $r3 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r8, $r3);

     label09:
        return;

     label10:
        $r5 := @caughtexception;

     label11:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        $i1 = r0.<com.android.server.policy.PhoneWindowManager: int mCurrentUserId>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: boolean startHomeOnDisplay(int,java.lang.String,int,boolean,boolean)>($i1, "startDockOrHome", i0, 1, z0);

        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.content.ActivityNotFoundException from label07 to label08 with label10;
        catch android.content.ActivityNotFoundException from label08 to label09 with label10;
    }

    public void startKeyguardExitAnimation(long, long)
    {
        com.android.server.policy.PhoneWindowManager r0;
        long l0, l1;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void startKeyguardExitAnimation(long,long)>(l0, l1);

     label1:
        return;
    }

    public void startedGoingToSleep(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r1;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mGoingToSleep> = 1;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mRequestedOrGoingToSleep> = 1;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onStartedGoingToSleep(int)>(i0);

     label1:
        return;
    }

    public void startedWakingUp(int)
    {
        com.android.server.policy.PhoneWindowManager r0;
        int i0;
        com.android.server.wm.DisplayPolicy $r2;
        com.android.server.wm.DisplayRotation $r3;
        java.lang.Throwable $r4;
        java.lang.Object r5;
        com.android.server.policy.keyguard.KeyguardServiceDelegate r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.policy.EventLogTags: void writeScreenToggled(int)>(1);

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayPolicy mDefaultDisplayPolicy>;

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void setAwake(boolean)>(1);

        r5 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateWakeGestureListenerLp()>();

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateLockScreenTimeout()>();

        exitmonitor r5;

     label2:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        virtualinvoke $r3.<com.android.server.wm.DisplayRotation: void updateOrientationListener()>();

        r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        if r6 == null goto label3;

        virtualinvoke r6.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onStartedWakingUp()>();

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r5;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void systemBooted()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void bindKeyguard()>();

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemBooted> = 1;

        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemReady>;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onBootCompleted()>();

     label2:
        exitmonitor r1;

     label3:
        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void startedWakingUp(int)>(3);

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void finishedWakingUp(int)>(3);

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void screenTurningOn(com.android.server.policy.WindowManagerPolicy$ScreenOnListener)>(null);

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void screenTurnedOn()>();

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void systemReady()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1, $r4, $r8;
        android.os.Handler r2;
        com.android.server.policy.keyguard.KeyguardServiceDelegate $r3, $r10;
        com.android.server.vr.VrManagerInternal $r5, $r6, $r12;
        com.android.server.wm.DisplayRotation $r7;
        boolean $z1;
        android.view.autofill.AutofillManagerInternal $r9;
        android.service.vr.IPersistentVrStateCallbacks $r11;
        java.lang.Throwable $r13;
        com.android.server.policy.PhoneWindowManager$13 r14;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r3.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onSystemReady()>();

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/vr/VrManagerInternal;");

        $r5 = (com.android.server.vr.VrManagerInternal) $r4;

        r0.<com.android.server.policy.PhoneWindowManager: com.android.server.vr.VrManagerInternal mVrManagerInternal> = $r5;

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.vr.VrManagerInternal mVrManagerInternal>;

        if $r6 == null goto label1;

        $r12 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.vr.VrManagerInternal mVrManagerInternal>;

        $r11 = r0.<com.android.server.policy.PhoneWindowManager: android.service.vr.IPersistentVrStateCallbacks mPersistentVrModeListener>;

        virtualinvoke $r12.<com.android.server.vr.VrManagerInternal: void addPersistentVrModeStateListener(android.service.vr.IPersistentVrStateCallbacks)>($r11);

     label1:
        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void readCameraLensCoverState()>();

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateUiMode()>();

        $r7 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.wm.DisplayRotation mDefaultDisplayRotation>;

        virtualinvoke $r7.<com.android.server.wm.DisplayRotation: void updateOrientationListener()>();

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemReady> = 1;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        r14 = new com.android.server.policy.PhoneWindowManager$13;

        specialinvoke r14.<com.android.server.policy.PhoneWindowManager$13: void <init>(com.android.server.policy.PhoneWindowManager)>(r0);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r14);

        $z1 = r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemBooted>;

        if $z1 == 0 goto label3;

        $r10 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.keyguard.KeyguardServiceDelegate mKeyguardDelegate>;

        virtualinvoke $r10.<com.android.server.policy.keyguard.KeyguardServiceDelegate: void onBootCompleted()>();

     label3:
        exitmonitor r1;

     label4:
        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/view/autofill/AutofillManagerInternal;");

        $r9 = (android.view.autofill.AutofillManagerInternal) $r8;

        r0.<com.android.server.policy.PhoneWindowManager: android.view.autofill.AutofillManagerInternal mAutofillManagerInternal> = $r9;

        return;

     label5:
        $r13 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.view.IDisplayFoldListener r1;
        com.android.server.policy.DisplayFoldController r2;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        r2 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.DisplayFoldController mDisplayFoldController>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.policy.DisplayFoldController: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>(r1);

     label1:
        return;
    }

    void updateRotation(boolean)
    {
        com.android.server.policy.PhoneWindowManager r0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void updateRotation(boolean,boolean)>(z0, 0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateSettings()
    {
        com.android.server.policy.PhoneWindowManager r0;
        java.lang.Object r1;
        java.lang.String r2;
        android.content.Context $r3, $r4, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.content.res.Resources $r5, $r7, $r9;
        boolean $z1, $z2, z3, z4, z5, z6, $z7;
        java.lang.Throwable $r10;
        android.content.ContentResolver r11;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        r11 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z3 = 0;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "end_button_behavior", 2, -2);

        r0.<com.android.server.policy.PhoneWindowManager: int mEndcallBehavior> = $i0;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "incall_power_button_behavior", 1, -2);

        r0.<com.android.server.policy.PhoneWindowManager: int mIncallPowerBehavior> = $i1;

     label02:
        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "incall_back_button_behavior", 0, -2);

        r0.<com.android.server.policy.PhoneWindowManager: int mIncallBackBehavior> = $i2;

        $i3 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "system_navigation_keys_enabled", 0, -2);

        if $i3 != 1 goto label04;

     label03:
        z4 = 1;

        goto label05;

     label04:
        z4 = 0;

     label05:
        r0.<com.android.server.policy.PhoneWindowManager: boolean mSystemNavigationKeysEnabled> = z4;

        $i4 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "volume_hush_gesture", 0, -2);

        r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord> = $i4;

        $i5 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r11, "power_button_suppression_delay_after_gesture_wake", 800);

        r0.<com.android.server.policy.PhoneWindowManager: int mPowerButtonSuppressionDelayMillis> = $i5;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r5.<android.content.res.Resources: boolean getBoolean(int)>(17891585);

        if $z1 != 0 goto label06;

        r0.<com.android.server.policy.PhoneWindowManager: int mRingerToggleChord> = 0;

     label06:
        $i6 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "wake_gesture_enabled", 0, -2);

        if $i6 == 0 goto label08;

     label07:
        z5 = 1;

        goto label09;

     label08:
        z5 = 0;

     label09:
        $z2 = r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeGestureEnabledSetting>;

        if $z2 == z5 goto label10;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mWakeGestureEnabledSetting> = z5;

        specialinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateWakeGestureListenerLp()>();

     label10:
        $i7 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r11, "screen_off_timeout", 0, -2);

        r0.<com.android.server.policy.PhoneWindowManager: int mLockScreenTimeout> = $i7;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r11, "default_input_method", -2);

     label11:
        z6 = 0;

        if r2 == null goto label14;

        z6 = 0;

     label12:
        $i12 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i12 <= 0 goto label14;

     label13:
        z6 = 1;

     label14:
        $z7 = r0.<com.android.server.policy.PhoneWindowManager: boolean mHasSoftInput>;

        if $z7 == z6 goto label16;

        r0.<com.android.server.policy.PhoneWindowManager: boolean mHasSoftInput> = z6;

     label15:
        z3 = 1;

     label16:
        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $i8 = virtualinvoke $r7.<android.content.res.Resources: int getInteger(int)>(17694827);

        $i9 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r11, "power_button_long_press", $i8);

        r0.<com.android.server.policy.PhoneWindowManager: int mLongPressOnPowerBehavior> = $i9;

        $r8 = r0.<com.android.server.policy.PhoneWindowManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $i10 = virtualinvoke $r9.<android.content.res.Resources: int getInteger(int)>(17694916);

        $i11 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r11, "power_button_very_long_press", $i10);

        r0.<com.android.server.policy.PhoneWindowManager: int mVeryLongPressOnPowerBehavior> = $i11;

        exitmonitor r1;

     label17:
        if z3 == 0 goto label18;

        virtualinvoke r0.<com.android.server.policy.PhoneWindowManager: void updateRotation(boolean)>(1);

     label18:
        return;

     label19:
        $r10 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    void updateUiMode()
    {
        com.android.server.policy.PhoneWindowManager r0;
        android.app.IUiModeManager $r2, $r3, $r5;
        int $i0;
        android.os.IBinder $r4;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        $r2 = r0.<com.android.server.policy.PhoneWindowManager: android.app.IUiModeManager mUiModeManager>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("uimode");

        $r5 = staticinvoke <android.app.IUiModeManager$Stub: android.app.IUiModeManager asInterface(android.os.IBinder)>($r4);

        r0.<com.android.server.policy.PhoneWindowManager: android.app.IUiModeManager mUiModeManager> = $r5;

     label1:
        $r3 = r0.<com.android.server.policy.PhoneWindowManager: android.app.IUiModeManager mUiModeManager>;

        $i0 = interfaceinvoke $r3.<android.app.IUiModeManager: int getCurrentModeType()>();

        r0.<com.android.server.policy.PhoneWindowManager: int mUiMode> = $i0;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void userActivity()
    {
        com.android.server.policy.PhoneWindowManager r0;
        com.android.server.policy.PhoneWindowManager$ScreenLockTimeout r1, $r3, $r5;
        boolean $z0;
        android.os.Handler $r4, $r6;
        int $i0;
        long $l1;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.policy.PhoneWindowManager;

        r1 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.policy.PhoneWindowManager: boolean mLockScreenTimerActive>;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        $r6 = r0.<com.android.server.policy.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = r0.<com.android.server.policy.PhoneWindowManager: com.android.server.policy.PhoneWindowManager$ScreenLockTimeout mScreenLockTimeout>;

        $i0 = r0.<com.android.server.policy.PhoneWindowManager: int mLockScreenTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r6.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, $l1);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
