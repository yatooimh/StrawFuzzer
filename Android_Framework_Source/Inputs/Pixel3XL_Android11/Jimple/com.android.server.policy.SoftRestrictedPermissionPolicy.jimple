public abstract class com.android.server.policy.SoftRestrictedPermissionPolicy extends java.lang.Object
{
    private static final com.android.server.policy.SoftRestrictedPermissionPolicy DUMMY_POLICY;
    private static final int FLAGS_PERMISSION_RESTRICTION_ANY_EXEMPT;
    private static final java.util.HashSet sForcedScopedStorageAppWhitelist;

    static void <clinit>()
    {
        com.android.server.policy.SoftRestrictedPermissionPolicy$1 $r0;
        java.util.HashSet $r1;
        java.lang.String[] $r2;
        java.util.List $r3;

        <com.android.server.policy.SoftRestrictedPermissionPolicy: int FLAGS_PERMISSION_RESTRICTION_ANY_EXEMPT> = 14336;

        $r0 = new com.android.server.policy.SoftRestrictedPermissionPolicy$1;

        specialinvoke $r0.<com.android.server.policy.SoftRestrictedPermissionPolicy$1: void <init>()>();

        <com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy DUMMY_POLICY> = $r0;

        $r1 = new java.util.HashSet;

        $r2 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: java.lang.String[] getForcedScopedStorageAppWhitelist()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        <com.android.server.policy.SoftRestrictedPermissionPolicy: java.util.HashSet sForcedScopedStorageAppWhitelist> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.server.policy.SoftRestrictedPermissionPolicy r0;

        r0 := @this: com.android.server.policy.SoftRestrictedPermissionPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.server.policy.SoftRestrictedPermissionPolicy forPermission(android.content.Context, android.content.pm.ApplicationInfo, com.android.server.pm.parsing.pkg.AndroidPackage, android.os.UserHandle, java.lang.String)
    {
        android.content.Context r0;
        android.content.pm.ApplicationInfo r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        android.os.UserHandle r3;
        java.lang.String r4, $r9, $r10, $r14;
        android.content.pm.PackageManager r5, $r13;
        android.os.storage.StorageManagerInternal r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i9, i10, $i11;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, z9, z10, z11, z12, z13;
        com.android.server.policy.SoftRestrictedPermissionPolicy$2 $r7;
        java.lang.Object $r8;
        java.util.HashSet $r11;
        com.android.server.policy.SoftRestrictedPermissionPolicy$3 $r12;
        com.android.server.policy.SoftRestrictedPermissionPolicy $r15;
        byte b8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        r2 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter3: android.os.UserHandle;

        r4 := @parameter4: java.lang.String;

        i7 = virtualinvoke r4.<java.lang.String: int hashCode()>();

        z6 = 0;

        z7 = 0;

        if i7 == -406040016 goto label03;

        if i7 == 1365911975 goto label02;

     label01:
        goto label04;

     label02:
        $z5 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.WRITE_EXTERNAL_STORAGE");

        if $z5 == 0 goto label01;

        b8 = 1;

        goto label05;

     label03:
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("android.permission.READ_EXTERNAL_STORAGE");

        if $z1 == 0 goto label01;

        b8 = 0;

        goto label05;

     label04:
        b8 = -1;

     label05:
        if b8 == 0 goto label10;

        if b8 == 1 goto label06;

        $r15 = <com.android.server.policy.SoftRestrictedPermissionPolicy: com.android.server.policy.SoftRestrictedPermissionPolicy DUMMY_POLICY>;

        return $r15;

     label06:
        if r1 == null goto label08;

        $r13 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r14 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i5 = virtualinvoke $r13.<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>(r4, $r14, r3);

        $i6 = $i5 & 14336;

        if $i6 == 0 goto label07;

        z7 = 1;

     label07:
        i9 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: int getMinimumTargetSDK(android.content.Context,android.content.pm.ApplicationInfo,android.os.UserHandle)>(r0, r1, r3);

        goto label09;

     label08:
        z7 = 0;

        i9 = 0;

     label09:
        $r12 = new com.android.server.policy.SoftRestrictedPermissionPolicy$3;

        specialinvoke $r12.<com.android.server.policy.SoftRestrictedPermissionPolicy$3: void <init>(boolean,int)>(z7, i9);

        return $r12;

     label10:
        if r1 == null goto label18;

        r5 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/storage/StorageManagerInternal;");

        r6 = (android.os.storage.StorageManagerInternal) $r8;

        $r9 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        i0 = virtualinvoke r5.<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>(r4, $r9, r3);

        $i1 = i0 & 14336;

        if $i1 == 0 goto label11;

        z8 = 1;

        goto label12;

     label11:
        z8 = 0;

     label12:
        $i2 = r1.<android.content.pm.ApplicationInfo: int uid>;

        z9 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: boolean hasUidRequestedLegacyExternalStorage(int,android.content.Context)>($i2, r0);

        $i3 = r1.<android.content.pm.ApplicationInfo: int uid>;

        z0 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: boolean hasWriteMediaStorageGrantedForUid(int,android.content.Context)>($i3, r0);

        $z2 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean hasPreserveLegacyExternalStorage()>();

        if $z2 == 0 goto label13;

        $i4 = r1.<android.content.pm.ApplicationInfo: int uid>;

        $z4 = virtualinvoke r6.<android.os.storage.StorageManagerInternal: boolean hasLegacyExternalStorage(int)>($i4);

        if $z4 == 0 goto label13;

        z10 = 1;

        goto label14;

     label13:
        z10 = 0;

     label14:
        i10 = staticinvoke <com.android.server.policy.SoftRestrictedPermissionPolicy: int getMinimumTargetSDK(android.content.Context,android.content.pm.ApplicationInfo,android.os.UserHandle)>(r0, r1, r3);

        $i11 = i0 & 16384;

        if $i11 != 0 goto label16;

        if i10 <= 29 goto label15;

        if z10 == 0 goto label16;

     label15:
        $r11 = <com.android.server.policy.SoftRestrictedPermissionPolicy: java.util.HashSet sForcedScopedStorageAppWhitelist>;

        $r10 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z3 = virtualinvoke $r11.<java.util.HashSet: boolean contains(java.lang.Object)>($r10);

        if $z3 == 0 goto label17;

     label16:
        z6 = 1;

     label17:
        z11 = z6;

        z12 = z8;

        z13 = z0;

        goto label19;

     label18:
        z12 = 0;

        z11 = 0;

        i10 = 0;

        z9 = 0;

        z10 = 0;

        z13 = 0;

     label19:
        $r7 = new com.android.server.policy.SoftRestrictedPermissionPolicy$2;

        specialinvoke $r7.<com.android.server.policy.SoftRestrictedPermissionPolicy$2: void <init>(boolean,int,boolean,boolean,boolean,boolean)>(z12, i10, z11, z9, z13, z10);

        return $r7;
    }

    private static java.lang.String[] getForcedScopedStorageAppWhitelist()
    {
        java.lang.String r0;
        java.lang.String[] $r1, $r2;
        boolean $z0;

        r0 = staticinvoke <android.provider.DeviceConfig: java.lang.String getString(java.lang.String,java.lang.String,java.lang.String)>("storage_native_boot", "forced_scoped_storage_whitelist", "");

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        return $r2;

     label2:
        $r1 = newarray (java.lang.String)[0];

        return $r1;
    }

    private static int getMinimumTargetSDK(android.content.Context, android.content.pm.ApplicationInfo, android.os.UserHandle)
    {
        android.content.pm.ApplicationInfo r0, r8;
        android.os.UserHandle r1;
        android.content.pm.PackageManager r2;
        int i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.String $r3, r7;
        boolean $z0;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.content.Context r5;
        java.lang.String[] r6;

        r5 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.pm.ApplicationInfo;

        r1 := @parameter2: android.os.UserHandle;

        r2 = virtualinvoke r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i3 = r0.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $i1 = r0.<android.content.pm.ApplicationInfo: int uid>;

        r6 = virtualinvoke r2.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i1);

        i4 = i3;

        if r6 == null goto label6;

        i0 = lengthof r6;

        i5 = 0;

     label1:
        i4 = i3;

        if i5 >= i0 goto label6;

        r7 = r6[i5];

        i6 = i3;

        $r3 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label5;

     label2:
        r8 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)>(r7, 0, r1);

     label3:
        $i2 = r8.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        i6 = staticinvoke <java.lang.Integer: int min(int,int)>(i3, $i2);

        goto label5;

     label4:
        $r4 := @caughtexception;

        i6 = i3;

     label5:
        i5 = i5 + 1;

        i3 = i6;

        goto label1;

     label6:
        return i4;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label4;
    }

    private static boolean hasUidRequestedLegacyExternalStorage(int, android.content.Context)
    {
        java.lang.String[] r0;
        android.os.UserHandle r1;
        int i0, i1, i2;
        boolean $z0;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        android.content.Context r3;
        android.content.pm.PackageManager r4;
        java.lang.String r5;
        android.content.pm.ApplicationInfo r6;

        i1 := @parameter0: int;

        r3 := @parameter1: android.content.Context;

        r4 = virtualinvoke r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0 = virtualinvoke r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i1);

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i1);

        i0 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label7;

        r5 = r0[i2];

     label3:
        r6 = virtualinvoke r4.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)>(r5, 0, r1);

     label4:
        $z0 = virtualinvoke r6.<android.content.pm.ApplicationInfo: boolean hasRequestedLegacyExternalStorage()>();

        if $z0 == 0 goto label6;

        return 1;

     label5:
        $r2 := @caughtexception;

     label6:
        i2 = i2 + 1;

        goto label2;

     label7:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    private static boolean hasWriteMediaStorageGrantedForUid(int, android.content.Context)
    {
        android.content.pm.PackageManager r0;
        int i0, $i1, i2, i3;
        java.lang.String $r1;
        android.content.Context r2;
        java.lang.String[] r3;

        i2 := @parameter0: int;

        r2 := @parameter1: android.content.Context;

        r0 = virtualinvoke r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke r0.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i2);

        if r3 != null goto label1;

        return 0;

     label1:
        i0 = lengthof r3;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $r1 = r3[i3];

        $i1 = virtualinvoke r0.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_MEDIA_STORAGE", $r1);

        if $i1 != 0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public int getExtraAppOpCode()
    {
        com.android.server.policy.SoftRestrictedPermissionPolicy r0;

        r0 := @this: com.android.server.policy.SoftRestrictedPermissionPolicy;

        return -1;
    }

    public boolean mayAllowExtraAppOp()
    {
        com.android.server.policy.SoftRestrictedPermissionPolicy r0;

        r0 := @this: com.android.server.policy.SoftRestrictedPermissionPolicy;

        return 0;
    }

    public boolean mayDenyExtraAppOpIfGranted()
    {
        com.android.server.policy.SoftRestrictedPermissionPolicy r0;

        r0 := @this: com.android.server.policy.SoftRestrictedPermissionPolicy;

        return 0;
    }

    public abstract boolean mayGrantPermission();
}
