public abstract class com.android.server.policy.WakeGestureListener extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.os.Handler mHandler;
    private final android.hardware.TriggerEventListener mListener;
    private final java.lang.Object mLock;
    private android.hardware.Sensor mSensor;
    private final android.hardware.SensorManager mSensorManager;
    private boolean mTriggerRequested;
    private final java.lang.Runnable mWakeUpRunnable;

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.policy.WakeGestureListener r0;
        android.os.Handler r1;
        java.lang.Object $r2, $r5;
        com.android.server.policy.WakeGestureListener$1 $r3;
        com.android.server.policy.WakeGestureListener$2 $r4;
        android.hardware.Sensor $r6;
        android.content.Context r7;
        android.hardware.SensorManager r8;

        r0 := @this: com.android.server.policy.WakeGestureListener;

        r7 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.WakeGestureListener: java.lang.Object mLock> = $r2;

        $r3 = new com.android.server.policy.WakeGestureListener$1;

        specialinvoke $r3.<com.android.server.policy.WakeGestureListener$1: void <init>(com.android.server.policy.WakeGestureListener)>(r0);

        r0.<com.android.server.policy.WakeGestureListener: android.hardware.TriggerEventListener mListener> = $r3;

        $r4 = new com.android.server.policy.WakeGestureListener$2;

        specialinvoke $r4.<com.android.server.policy.WakeGestureListener$2: void <init>(com.android.server.policy.WakeGestureListener)>(r0);

        r0.<com.android.server.policy.WakeGestureListener: java.lang.Runnable mWakeUpRunnable> = $r4;

        $r5 = virtualinvoke r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        r8 = (android.hardware.SensorManager) $r5;

        r0.<com.android.server.policy.WakeGestureListener: android.hardware.SensorManager mSensorManager> = r8;

        r0.<com.android.server.policy.WakeGestureListener: android.os.Handler mHandler> = r1;

        $r6 = virtualinvoke r8.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(23);

        r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor> = $r6;

        return;
    }

    static java.lang.Object access$000(com.android.server.policy.WakeGestureListener)
    {
        com.android.server.policy.WakeGestureListener r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.policy.WakeGestureListener;

        $r1 = r0.<com.android.server.policy.WakeGestureListener: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$102(com.android.server.policy.WakeGestureListener, boolean)
    {
        com.android.server.policy.WakeGestureListener r0;
        boolean z0;

        r0 := @parameter0: com.android.server.policy.WakeGestureListener;

        z0 := @parameter1: boolean;

        r0.<com.android.server.policy.WakeGestureListener: boolean mTriggerRequested> = z0;

        return z0;
    }

    static java.lang.Runnable access$200(com.android.server.policy.WakeGestureListener)
    {
        com.android.server.policy.WakeGestureListener r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.server.policy.WakeGestureListener;

        $r1 = r0.<com.android.server.policy.WakeGestureListener: java.lang.Runnable mWakeUpRunnable>;

        return $r1;
    }

    static android.os.Handler access$300(com.android.server.policy.WakeGestureListener)
    {
        com.android.server.policy.WakeGestureListener r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.policy.WakeGestureListener;

        $r1 = r0.<com.android.server.policy.WakeGestureListener: android.os.Handler mHandler>;

        return $r1;
    }

    public void cancelWakeUpTrigger()
    {
        com.android.server.policy.WakeGestureListener r0;
        java.lang.Object r1;
        android.hardware.Sensor $r3, $r4;
        boolean $z0;
        android.hardware.TriggerEventListener $r5;
        android.hardware.SensorManager $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.policy.WakeGestureListener;

        r1 = r0.<com.android.server.policy.WakeGestureListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor>;

        if $r3 == null goto label2;

        $z0 = r0.<com.android.server.policy.WakeGestureListener: boolean mTriggerRequested>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.policy.WakeGestureListener: boolean mTriggerRequested> = 0;

        $r6 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.SensorManager mSensorManager>;

        $r5 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.TriggerEventListener mListener>;

        $r4 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor>;

        virtualinvoke $r6.<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>($r5, $r4);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.policy.WakeGestureListener r0;
        java.lang.Object r1;
        java.lang.String $r4, $r10, $r15, r18, r21;
        boolean $z0;
        android.hardware.Sensor $r13;
        java.lang.Throwable $r16;
        java.io.PrintWriter r17;
        java.lang.StringBuilder r19, r20, r22, r23;

        r0 := @this: com.android.server.policy.WakeGestureListener;

        r17 := @parameter0: java.io.PrintWriter;

        r18 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.policy.WakeGestureListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WakeGestureListener");

        $r4 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTriggerRequested=");

        $z0 = r0.<com.android.server.policy.WakeGestureListener: boolean mTriggerRequested>;

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r10 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSensor=");

        $r13 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor>;

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r16 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isSupported()
    {
        com.android.server.policy.WakeGestureListener r0;
        java.lang.Object r1;
        android.hardware.Sensor $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.policy.WakeGestureListener;

        r1 = r0.<com.android.server.policy.WakeGestureListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor>;

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public abstract void onWakeUp();

    public void requestWakeUpTrigger()
    {
        com.android.server.policy.WakeGestureListener r0;
        java.lang.Object r1;
        android.hardware.Sensor $r3, $r4;
        boolean $z0;
        android.hardware.TriggerEventListener $r5;
        android.hardware.SensorManager $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.policy.WakeGestureListener;

        r1 = r0.<com.android.server.policy.WakeGestureListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor>;

        if $r3 == null goto label2;

        $z0 = r0.<com.android.server.policy.WakeGestureListener: boolean mTriggerRequested>;

        if $z0 != 0 goto label2;

        r0.<com.android.server.policy.WakeGestureListener: boolean mTriggerRequested> = 1;

        $r6 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.SensorManager mSensorManager>;

        $r5 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.TriggerEventListener mListener>;

        $r4 = r0.<com.android.server.policy.WakeGestureListener: android.hardware.Sensor mSensor>;

        virtualinvoke $r6.<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>($r5, $r4);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void <clinit>()
    {
        <com.android.server.policy.WakeGestureListener: java.lang.String TAG> = "WakeGestureListener";

        return;
    }
}
