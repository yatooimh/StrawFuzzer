public interface  com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs extends java.lang.Object
{
    public static final int CAMERA_LENS_COVERED;
    public static final int CAMERA_LENS_COVER_ABSENT;
    public static final int CAMERA_LENS_UNCOVERED;
    public static final int LID_ABSENT;
    public static final int LID_BEHAVIOR_LOCK;
    public static final int LID_BEHAVIOR_NONE;
    public static final int LID_BEHAVIOR_SLEEP;
    public static final int LID_CLOSED;
    public static final int LID_OPEN;

    public static java.lang.String cameraLensStateToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == -1 goto label3;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "CAMERA_LENS_COVERED";

     label2:
        return "CAMERA_LENS_UNCOVERED";

     label3:
        return "CAMERA_LENS_COVER_ABSENT";
    }

    public static java.lang.String lidStateToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == -1 goto label3;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "LID_OPEN";

     label2:
        return "LID_CLOSED";

     label3:
        return "LID_ABSENT";
    }

    public abstract int getCameraLensCoverState();

    public abstract com.android.server.policy.WindowManagerPolicy$WindowState getInputMethodWindowLw();

    public abstract int getLidState();

    public abstract java.lang.Object getWindowManagerLock();

    public abstract void lockDeviceNow();

    public abstract void moveDisplayToTop(int);

    public abstract void notifyKeyguardTrustedChanged();

    public abstract void onKeyguardShowingAndNotOccludedChanged();

    public abstract void onPowerKeyDown(boolean);

    public abstract void onUserSwitched();

    public abstract void reboot(boolean);

    public abstract void rebootSafeMode(boolean);

    public abstract void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener, int);

    public abstract void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener);

    public abstract void shutdown(boolean);

    public abstract void switchKeyboardLayout(int, int);

    public abstract void triggerAnimationFailsafe();

    public abstract void unregisterPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener, int);

    public static void <clinit>()
    {
        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int LID_OPEN> = 1;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int LID_CLOSED> = 0;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int LID_BEHAVIOR_SLEEP> = 1;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int LID_BEHAVIOR_NONE> = 0;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int LID_BEHAVIOR_LOCK> = 2;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int LID_ABSENT> = -1;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int CAMERA_LENS_UNCOVERED> = 0;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int CAMERA_LENS_COVER_ABSENT> = -1;

        <com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs: int CAMERA_LENS_COVERED> = 1;

        return;
    }
}
