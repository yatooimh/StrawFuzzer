public interface  com.android.server.policy.WindowManagerPolicy extends java.lang.Object implements android.view.WindowManagerPolicyConstants
{
    public static final int ACTION_PASS_TO_USER;
    public static final int COLOR_FADE_LAYER;
    public static final int FINISH_LAYOUT_REDO_ANIM;
    public static final int FINISH_LAYOUT_REDO_CONFIG;
    public static final int FINISH_LAYOUT_REDO_LAYOUT;
    public static final int FINISH_LAYOUT_REDO_WALLPAPER;
    public static final int TRANSIT_ENTER;
    public static final int TRANSIT_EXIT;
    public static final int TRANSIT_HIDE;
    public static final int TRANSIT_PREVIEW_DONE;
    public static final int TRANSIT_SHOW;
    public static final int USER_ROTATION_FREE;
    public static final int USER_ROTATION_LOCKED;

    public static java.lang.String userRotationModeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "USER_ROTATION_LOCKED";

     label2:
        return "USER_ROTATION_FREE";
    }

    public abstract com.android.server.policy.WindowManagerPolicy$StartingSurface addSplashScreen(android.os.IBinder, java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int, android.content.res.Configuration, int);

    public abstract void adjustConfigurationLw(android.content.res.Configuration, int, int);

    public abstract void applyKeyguardPolicyLw(com.android.server.policy.WindowManagerPolicy$WindowState, com.android.server.policy.WindowManagerPolicy$WindowState);

    public abstract boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState);

    public abstract boolean canDismissBootAnimation();

    public abstract int checkAddPermission(int, boolean, java.lang.String, int[]);

    public abstract android.view.animation.Animation createHiddenByKeyguardExit(boolean, boolean, boolean);

    public abstract android.view.animation.Animation createKeyguardWallpaperExit(boolean);

    public abstract void dismissKeyguardLw(com.android.internal.policy.IKeyguardDismissCallback, java.lang.CharSequence);

    public abstract android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder, android.view.KeyEvent, int);

    public abstract void dump(java.lang.String, java.io.PrintWriter, java.lang.String[]);

    public abstract void dumpDebug(android.util.proto.ProtoOutputStream, long);

    public abstract void enableKeyguard(boolean);

    public abstract void enableScreenAfterBoot();

    public abstract void exitKeyguardSecurely(com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult);

    public abstract void finishedGoingToSleep(int);

    public abstract void finishedWakingUp(int);

    public android.graphics.Rect getFoldedArea()
    {
        com.android.server.policy.WindowManagerPolicy r0;
        android.graphics.Rect $r1;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        return $r1;
    }

    public abstract int getMaxWallpaperLayer();

    public int getMaxWindowLayer()
    {
        com.android.server.policy.WindowManagerPolicy r0;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        return 35;
    }

    public int getSubWindowLayerFromTypeLw(int)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1000: goto label6;
            case 1001: goto label5;
            case 1002: goto label4;
            case 1003: goto label6;
            case 1004: goto label3;
            case 1005: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown sub-window type: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r5);

        return 0;

     label2:
        return 3;

     label3:
        return -1;

     label4:
        return 2;

     label5:
        return -2;

     label6:
        return 1;
    }

    public abstract int getUiMode();

    public int getWindowLayerFromTypeLw(int)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        int i0, $i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.view.WindowManager$LayoutParams: boolean isSystemAlertWindowType(int)>(i0);

        if $z0 != 0 goto label1;

        $i1 = interfaceinvoke r0.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int,boolean)>(i0, 0);

        return $i1;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Use getWindowLayerFromTypeLw() or getWindowLayerLw() for alert window types");

        throw $r1;
    }

    public int getWindowLayerFromTypeLw(int, boolean)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        boolean z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        int i1;
        byte b2, b3;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i1 < 1 goto label01;

        if i1 > 99 goto label01;

        return 2;

     label01:
        b2 = 10;

        tableswitch(i1)
        {
            case 2000: goto label40;
            case 2001: goto label39;
            case 2002: goto label38;
            case 2003: goto label36;
            case 2004: goto label02;
            case 2005: goto label35;
            case 2006: goto label32;
            case 2007: goto label31;
            case 2008: goto label30;
            case 2009: goto label29;
            case 2010: goto label27;
            case 2011: goto label26;
            case 2012: goto label25;
            case 2013: goto label24;
            case 2014: goto label02;
            case 2015: goto label23;
            case 2016: goto label22;
            case 2017: goto label21;
            case 2018: goto label20;
            case 2019: goto label19;
            case 2020: goto label18;
            case 2021: goto label17;
            case 2022: goto label16;
            case 2023: goto label02;
            case 2024: goto label15;
            case 2025: goto label02;
            case 2026: goto label14;
            case 2027: goto label13;
            case 2028: goto label02;
            case 2029: goto label02;
            case 2030: goto label12;
            case 2031: goto label11;
            case 2032: goto label10;
            case 2033: goto label39;
            case 2034: goto label09;
            case 2035: goto label08;
            case 2036: goto label07;
            case 2037: goto label12;
            case 2038: goto label06;
            case 2039: goto label05;
            case 2040: goto label04;
            case 2041: goto label03;
            case 2042: goto label06;
            default: goto label02;
        };

     label02:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown window type: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r5);

        return 2;

     label03:
        return 18;

     label04:
        return 19;

     label05:
        return 32;

     label06:
        return 12;

     label07:
        return 26;

     label08:
        return 2;

     label09:
        return 2;

     label10:
        return 31;

     label11:
        return 5;

     label12:
        return 2;

     label13:
        return 28;

     label14:
        return 29;

     label15:
        return 25;

     label16:
        return 6;

     label17:
        return 34;

     label18:
        return 22;

     label19:
        return 24;

     label20:
        return 35;

     label21:
        return 20;

     label22:
        return 30;

     label23:
        return 33;

     label24:
        return 1;

     label25:
        return 16;

     label26:
        return 15;

     label27:
        if z0 == 0 goto label28;

        b2 = 27;

     label28:
        return b2;

     label29:
        return 21;

     label30:
        return 7;

     label31:
        return 9;

     label32:
        if z0 == 0 goto label33;

        b3 = 23;

        goto label34;

     label33:
        b3 = 11;

     label34:
        return b3;

     label35:
        return 8;

     label36:
        if z0 == 0 goto label37;

        b2 = 13;

     label37:
        return b2;

     label38:
        return 3;

     label39:
        return 4;

     label40:
        return 17;
    }

    public int getWindowLayerLw(com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        com.android.server.policy.WindowManagerPolicy$WindowState r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        $i0 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: int getBaseType()>();

        $z0 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$WindowState: boolean canAddInternalSystemWindow()>();

        $i1 = interfaceinvoke r0.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int,boolean)>($i0, $z0);

        return $i1;
    }

    public abstract boolean hasNavigationBar();

    public abstract void hideBootMessages();

    public abstract boolean inKeyguardRestrictedKeyInputMode();

    public abstract void init(android.content.Context, android.view.IWindowManager, com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs);

    public abstract long interceptKeyBeforeDispatching(android.os.IBinder, android.view.KeyEvent, int);

    public abstract int interceptKeyBeforeQueueing(android.view.KeyEvent, int);

    public abstract int interceptMotionBeforeQueueingNonInteractive(int, long, int);

    public abstract boolean isKeyguardDrawnLw();

    public abstract boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams);

    public abstract boolean isKeyguardLocked();

    public abstract boolean isKeyguardOccluded();

    public abstract boolean isKeyguardSecure(int);

    public abstract boolean isKeyguardShowing();

    public abstract boolean isKeyguardShowingAndNotOccluded();

    public abstract boolean isKeyguardTrustedLw();

    public abstract boolean isScreenOn();

    public abstract boolean isTopLevelWindow(int);

    public abstract boolean isUserSetupComplete();

    public abstract void keepScreenOnStartedLw();

    public abstract void keepScreenOnStoppedLw();

    public abstract void lockNow(android.os.Bundle);

    public abstract void notifyCameraLensCoverSwitchChanged(long, boolean);

    public abstract void notifyLidSwitchChanged(long, boolean);

    public abstract boolean okToAnimate();

    public void onDefaultDisplayFocusChangedLw(com.android.server.policy.WindowManagerPolicy$WindowState)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        com.android.server.policy.WindowManagerPolicy$WindowState r1;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$WindowState;

        return;
    }

    public abstract void onKeyguardOccludedChangedLw(boolean);

    public abstract void onSystemUiStarted();

    public abstract boolean performHapticFeedback(int, java.lang.String, int, boolean, java.lang.String);

    public void registerDisplayFoldListener(android.view.IDisplayFoldListener)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        android.view.IDisplayFoldListener r1;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        return;
    }

    public abstract void registerShortcutKey(long, com.android.internal.policy.IShortcutService) throws android.os.RemoteException;

    public abstract void screenTurnedOff();

    public abstract void screenTurnedOn();

    public abstract void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener);

    public abstract void screenTurningOn(com.android.server.policy.WindowManagerPolicy$ScreenOnListener);

    public abstract void setAllowLockscreenWhenOn(int, boolean);

    public abstract boolean setAodShowing(boolean);

    public abstract void setCurrentUserLw(int);

    public abstract void setDefaultDisplay(com.android.server.policy.WindowManagerPolicy$DisplayContentInfo);

    public void setDismissImeOnBackKeyPressed(boolean)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        boolean z0;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        z0 := @parameter0: boolean;

        return;
    }

    public abstract void setKeyguardCandidateLw(com.android.server.policy.WindowManagerPolicy$WindowState);

    public abstract void setNavBarVirtualKeyHapticFeedbackEnabledLw(boolean);

    public void setOverrideFoldedArea(android.graphics.Rect)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        android.graphics.Rect r1;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        r1 := @parameter0: android.graphics.Rect;

        return;
    }

    public abstract void setPipVisibilityLw(boolean);

    public abstract void setRecentsVisibilityLw(boolean);

    public abstract void setSafeMode(boolean);

    public abstract void setSwitchingUser(boolean);

    public abstract void setTopFocusedDisplay(int);

    public abstract void showBootMessage(java.lang.CharSequence, boolean);

    public abstract void showGlobalActions();

    public abstract void showRecentApps();

    public abstract void startKeyguardExitAnimation(long, long);

    public abstract void startedGoingToSleep(int);

    public abstract void startedWakingUp(int);

    public abstract void systemBooted();

    public abstract void systemReady();

    public void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        android.view.IDisplayFoldListener r1;

        r0 := @this: com.android.server.policy.WindowManagerPolicy;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        return;
    }

    public abstract void userActivity();

    public static void <clinit>()
    {
        <com.android.server.policy.WindowManagerPolicy: int USER_ROTATION_LOCKED> = 1;

        <com.android.server.policy.WindowManagerPolicy: int USER_ROTATION_FREE> = 0;

        <com.android.server.policy.WindowManagerPolicy: int TRANSIT_SHOW> = 3;

        <com.android.server.policy.WindowManagerPolicy: int TRANSIT_PREVIEW_DONE> = 5;

        <com.android.server.policy.WindowManagerPolicy: int TRANSIT_HIDE> = 4;

        <com.android.server.policy.WindowManagerPolicy: int TRANSIT_EXIT> = 2;

        <com.android.server.policy.WindowManagerPolicy: int TRANSIT_ENTER> = 1;

        <com.android.server.policy.WindowManagerPolicy: int FINISH_LAYOUT_REDO_WALLPAPER> = 4;

        <com.android.server.policy.WindowManagerPolicy: int FINISH_LAYOUT_REDO_LAYOUT> = 1;

        <com.android.server.policy.WindowManagerPolicy: int FINISH_LAYOUT_REDO_CONFIG> = 2;

        <com.android.server.policy.WindowManagerPolicy: int FINISH_LAYOUT_REDO_ANIM> = 8;

        <com.android.server.policy.WindowManagerPolicy: int COLOR_FADE_LAYER> = 1073741825;

        <com.android.server.policy.WindowManagerPolicy: int ACTION_PASS_TO_USER> = 1;

        return;
    }
}
