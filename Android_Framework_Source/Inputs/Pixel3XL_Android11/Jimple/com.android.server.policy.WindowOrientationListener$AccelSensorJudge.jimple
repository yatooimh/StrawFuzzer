final class com.android.server.policy.WindowOrientationListener$AccelSensorJudge extends com.android.server.policy.WindowOrientationListener$OrientationJudge
{
    private static final float ACCELERATION_TOLERANCE;
    private static final int ACCELEROMETER_DATA_X;
    private static final int ACCELEROMETER_DATA_Y;
    private static final int ACCELEROMETER_DATA_Z;
    private static final int ADJACENT_ORIENTATION_ANGLE_GAP;
    private static final float FILTER_TIME_CONSTANT_MS;
    private static final float FLAT_ANGLE;
    private static final long FLAT_TIME_NANOS;
    private static final float MAX_ACCELERATION_MAGNITUDE;
    private static final long MAX_FILTER_DELTA_TIME_NANOS;
    private static final int MAX_TILT;
    private static final float MIN_ACCELERATION_MAGNITUDE;
    private static final float NEAR_ZERO_MAGNITUDE;
    private static final long PROPOSAL_MIN_TIME_SINCE_ACCELERATION_ENDED_NANOS;
    private static final long PROPOSAL_MIN_TIME_SINCE_FLAT_ENDED_NANOS;
    private static final long PROPOSAL_MIN_TIME_SINCE_SWING_ENDED_NANOS;
    private static final long PROPOSAL_SETTLE_TIME_NANOS;
    private static final float RADIANS_TO_DEGREES;
    private static final float SWING_AWAY_ANGLE_DELTA;
    private static final long SWING_TIME_NANOS;
    private static final int TILT_HISTORY_SIZE;
    private static final int TILT_OVERHEAD_ENTER;
    private static final int TILT_OVERHEAD_EXIT;
    private boolean mAccelerating;
    private long mAccelerationTimestampNanos;
    private boolean mFlat;
    private long mFlatTimestampNanos;
    private long mLastFilteredTimestampNanos;
    private float mLastFilteredX;
    private float mLastFilteredY;
    private float mLastFilteredZ;
    private boolean mOverhead;
    private int mPredictedRotation;
    private long mPredictedRotationTimestampNanos;
    private int mProposedRotation;
    private long mSwingTimestampNanos;
    private boolean mSwinging;
    private float[] mTiltHistory;
    private int mTiltHistoryIndex;
    private long[] mTiltHistoryTimestampNanos;
    private final int[][] mTiltToleranceConfig;
    private long mTouchEndedTimestampNanos;
    private boolean mTouched;
    final com.android.server.policy.WindowOrientationListener this$0;

    public void <init>(com.android.server.policy.WindowOrientationListener, android.content.Context)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        int i0, i1, $i2, $i4, $i5, $i6, i8;
        int[] $r1, $r3, $r4, $r5, $r13, $r14, r18;
        int[][] $r2, r19;
        float[] $r6;
        long[] $r7;
        android.content.res.Resources $r8;
        com.android.server.policy.WindowOrientationListener r15;
        android.content.Context r16;
        java.lang.StringBuilder $r20;
        java.lang.String $r22;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        r15 := @parameter0: com.android.server.policy.WindowOrientationListener;

        r16 := @parameter1: android.content.Context;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: com.android.server.policy.WindowOrientationListener this$0> = r15;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationJudge: void <init>(com.android.server.policy.WindowOrientationListener)>(r15);

        $r1 = newarray (int)[2];

        $r1[0] = -25;

        $r1[1] = 60;

        $r2 = newarray (int[])[4];

        $r3 = newarray (int)[2];

        $r3[0] = -25;

        $r3[1] = 70;

        $r2[0] = $r3;

        $r4 = newarray (int)[2];

        $r4[0] = -25;

        $r4[1] = 65;

        $r2[1] = $r4;

        $r2[2] = $r1;

        $r5 = newarray (int)[2];

        $r5[0] = -25;

        $r5[1] = 65;

        $r2[3] = $r5;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int[][] mTiltToleranceConfig> = $r2;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mTouchEndedTimestampNanos> = -9223372036854775808L;

        $r6 = newarray (float)[200];

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float[] mTiltHistory> = $r6;

        $r7 = newarray (long)[200];

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long[] mTiltHistoryTimestampNanos> = $r7;

        $r8 = virtualinvoke r16.<android.content.Context: android.content.res.Resources getResources()>();

        r18 = virtualinvoke $r8.<android.content.res.Resources: int[] getIntArray(int)>(17235989);

        $i2 = lengthof r18;

        if $i2 != 8 goto label5;

        i8 = 0;

     label1:
        if i8 >= 4 goto label4;

        $i4 = i8 * 2;

        i0 = r18[$i4];

        $i5 = i8 * 2;

        $i6 = $i5 + 1;

        i1 = r18[$i6];

        if i0 < -90 goto label2;

        if i0 > i1 goto label2;

        if i1 > 90 goto label2;

        r19 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int[][] mTiltToleranceConfig>;

        $r13 = r19[i8];

        $r13[0] = i0;

        $r14 = r19[i8];

        $r14[1] = i1;

        goto label3;

     label2:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_autoRotationTiltTolerance contains invalid range: min=");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", max=");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowOrientationListener", $r22);

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowOrientationListener", "config_autoRotationTiltTolerance should have exactly 8 elements");

     label6:
        return;
    }

    private void addTiltHistoryEntryLocked(long, float)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0;
        float f0;
        int $i1, i2, i3;
        float[] r1;
        long[] r2;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float[] mTiltHistory>;

        i2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mTiltHistoryIndex>;

        r1[i2] = f0;

        r2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long[] mTiltHistoryTimestampNanos>;

        r2[i2] = l0;

        $i1 = i2 + 1;

        i3 = $i1 % 200;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mTiltHistoryIndex> = i3;

        r2[i3] = -9223372036854775808L;

        return;
    }

    private void clearPredictedRotationLocked()
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation> = -1;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mPredictedRotationTimestampNanos> = -9223372036854775808L;

        return;
    }

    private void clearTiltHistoryLocked()
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long[] $r1;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long[] mTiltHistoryTimestampNanos>;

        $r1[0] = -9223372036854775808L;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mTiltHistoryIndex> = 1;

        return;
    }

    private float getLastTiltLocked()
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        int i0, $i1;
        float[] $r1;
        float f0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        $i1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mTiltHistoryIndex>;

        i0 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int nextTiltHistoryIndexLocked(int)>($i1);

        if i0 < 0 goto label1;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float[] mTiltHistory>;

        f0 = $r1[i0];

        goto label2;

     label1:
        f0 = #NaNF;

     label2:
        return f0;
    }

    private boolean isAcceleratingLocked(float)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        float f0;
        byte $b0, $b1;
        boolean z0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 5.80665F;

        if $b0 < 0 goto label2;

        $b1 = f0 cmpl 13.80665F;

        if $b1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isFlatLocked(long)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0, $l3, $l4;
        float[] $r1;
        float $f0;
        byte $b2, $b5;
        long[] $r2;
        int i6, i7;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        i6 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mTiltHistoryIndex>;

     label1:
        i7 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int nextTiltHistoryIndexLocked(int)>(i6);

        if i7 < 0 goto label3;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float[] mTiltHistory>;

        $f0 = $r1[i7];

        $b2 = $f0 cmpg 80.0F;

        if $b2 >= 0 goto label2;

        goto label3;

     label2:
        i6 = i7;

        $r2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long[] mTiltHistoryTimestampNanos>;

        $l3 = $r2[i7];

        $l4 = $l3 + 1000000000L;

        $b5 = $l4 cmp l0;

        if $b5 > 0 goto label1;

        return 1;

     label3:
        return 0;
    }

    private boolean isOrientationAngleAcceptableLocked(int, int)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        com.android.server.policy.WindowOrientationListener $r1;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        i12 = staticinvoke <com.android.server.policy.WindowOrientationListener: int access$200(com.android.server.policy.WindowOrientationListener)>($r1);

        if i12 < 0 goto label6;

        if i0 == i12 goto label1;

        $i10 = i12 + 1;

        $i11 = $i10 % 4;

        if i0 != $i11 goto label3;

     label1:
        $i3 = i0 * 90;

        $i4 = $i3 - 45;

        i2 = $i4 + 22;

        if i0 != 0 goto label2;

        if i1 < 315 goto label3;

        $i9 = i2 + 360;

        if i1 >= $i9 goto label3;

        return 0;

     label2:
        if i1 >= i2 goto label3;

        return 0;

     label3:
        if i0 == i12 goto label4;

        $i7 = i12 + 3;

        $i8 = $i7 % 4;

        if i0 != $i8 goto label6;

     label4:
        $i5 = i0 * 90;

        $i6 = $i5 + 45;

        i13 = $i6 - 22;

        if i0 != 0 goto label5;

        if i1 > 45 goto label6;

        if i1 <= i13 goto label6;

        return 0;

     label5:
        if i1 <= i13 goto label6;

        return 0;

     label6:
        return 1;
    }

    private boolean isPredictedRotationAcceptableLocked(long)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0, $l1, $l2, $l4, $l5, $l7, $l8, $l10, $l11, $l13, $l14;
        byte $b3, $b6, $b9, $b12, $b15;
        boolean $z0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mPredictedRotationTimestampNanos>;

        $l2 = $l1 + 40000000L;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label1;

        return 0;

     label1:
        $l4 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mFlatTimestampNanos>;

        $l5 = $l4 + 500000000L;

        $b6 = l0 cmp $l5;

        if $b6 >= 0 goto label2;

        return 0;

     label2:
        $l7 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mSwingTimestampNanos>;

        $l8 = $l7 + 300000000L;

        $b9 = l0 cmp $l8;

        if $b9 >= 0 goto label3;

        return 0;

     label3:
        $l10 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mAccelerationTimestampNanos>;

        $l11 = $l10 + 500000000L;

        $b12 = l0 cmp $l11;

        if $b12 >= 0 goto label4;

        return 0;

     label4:
        $z0 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mTouched>;

        if $z0 != 0 goto label6;

        $l13 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mTouchEndedTimestampNanos>;

        $l14 = $l13 + 500000000L;

        $b15 = l0 cmp $l14;

        if $b15 >= 0 goto label5;

        goto label6;

     label5:
        return 1;

     label6:
        return 0;
    }

    private boolean isSwingingLocked(long, float)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0, $l2, $l3;
        float f0, $f1, $f2;
        long[] $r1;
        byte $b4, $b5;
        float[] $r2;
        int i6, i7;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        i6 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mTiltHistoryIndex>;

     label1:
        i7 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int nextTiltHistoryIndexLocked(int)>(i6);

        if i7 < 0 goto label3;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long[] mTiltHistoryTimestampNanos>;

        $l2 = $r1[i7];

        $l3 = $l2 + 300000000L;

        $b4 = $l3 cmp l0;

        if $b4 >= 0 goto label2;

        goto label3;

     label2:
        i6 = i7;

        $r2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float[] mTiltHistory>;

        $f1 = $r2[i7];

        $f2 = $f1 + 20.0F;

        $b5 = $f2 cmpg f0;

        if $b5 > 0 goto label1;

        return 1;

     label3:
        return 0;
    }

    private boolean isTiltAngleAcceptableLocked(int, int)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        int i0, i1, $i2, $i3;
        int[][] r1;
        int[] r2, $r3;
        boolean z1;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int[][] mTiltToleranceConfig>;

        r2 = r1[i0];

        z1 = 0;

        $i2 = r2[0];

        if i1 < $i2 goto label1;

        z1 = 0;

        $r3 = r1[i0];

        $i3 = $r3[1];

        if i1 > $i3 goto label1;

        z1 = 1;

     label1:
        return z1;
    }

    private int nextTiltHistoryIndexLocked(int)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long[] $r1;
        long $l0;
        byte $b1;
        int i2, i3;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        i2 := @parameter0: int;

        if i2 != 0 goto label1;

        i2 = 200;

        goto label1;

     label1:
        i3 = i2 + -1;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long[] mTiltHistoryTimestampNanos>;

        $l0 = $r1[i3];

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label2;

        goto label3;

     label2:
        i3 = -1;

     label3:
        return i3;
    }

    private float remainingMS(long, long)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0, l1, $l3;
        byte $b2;
        float $f0, f1;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        f1 = 0.0F;

        goto label2;

     label1:
        $l3 = l1 - l0;

        $f0 = (float) $l3;

        f1 = $f0 * 1.0E-6F;

     label2:
        return f1;
    }

    private void updatePredictedRotationLocked(long, int)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0;
        int i1, $i2;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation>;

        if $i2 == i1 goto label1;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation> = i1;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mPredictedRotationTimestampNanos> = l0;

     label1:
        return;
    }

    public void dumpLocked(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        java.io.PrintWriter r1;
        long l0, l1, $l4, $l5;
        java.lang.StringBuilder $r2, $r6, $r9, $r14, $r19, $r24, $r29, $r34, $r42, $r48, $r53, $r58, $r63, $r68, $r73;
        java.lang.String $r5, $r13, $r18, $r23, $r28, $r33, $r41, $r47, $r52, $r57, $r62, $r67, $r72, $r76, r81, r84;
        int $i2, $i3, $i6, $i7, i8;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[][] $r77, $r79;
        int[] $r78, $r80;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        r1 := @parameter0: java.io.PrintWriter;

        r81 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AccelSensorJudge");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r84 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mProposedRotation=");

        $i2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mProposedRotation>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPredictedRotation=");

        $i3 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastFilteredX=");

        $f0 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredX>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastFilteredY=");

        $f1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredY>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastFilteredZ=");

        $f2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredZ>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        l1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mLastFilteredTimestampNanos>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastFilteredTimestampNanos=");

        $l4 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mLastFilteredTimestampNanos>;

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $l5 = l0 - l1;

        $f3 = (float) $l5;

        $f4 = $f3 * 1.0E-6F;

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms ago)");

        $r41 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTiltHistory={last: ");

        $f5 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float getLastTiltLocked()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r47 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r47);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mFlat=");

        $z0 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mFlat>;

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r52 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSwinging=");

        $z1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mSwinging>;

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r57 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r57);

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAccelerating=");

        $z2 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mAccelerating>;

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r62 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r62);

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOverhead=");

        $z3 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mOverhead>;

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r67 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTouched=");

        $z4 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mTouched>;

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r72 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTiltToleranceConfig=[");

        $r76 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r76);

        i8 = 0;

     label1:
        if i8 >= 4 goto label3;

        if i8 == 0 goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("[");

        $r77 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int[][] mTiltToleranceConfig>;

        $r78 = $r77[i8];

        $i6 = $r78[0];

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(", ");

        $r79 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int[][] mTiltToleranceConfig>;

        $r80 = $r79[i8];

        $i7 = $r80[1];

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("]");

        i8 = i8 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("]");

        return;
    }

    public int getProposedRotationLocked()
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        int $i0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        $i0 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mProposedRotation>;

        return $i0;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2, $r8, r84, r85, r86, r87, r88, r89;
        long l0, l1, $l4, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l22, $l24, $l28, $l29, $l35;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, f28, f29, f30, $f31, f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, f45;
        int i2, i3, $i6, $i8, $i9, $i23, $i25, $i27, i42, i43, i44, i45, $i46, i47;
        com.android.server.policy.WindowOrientationListener $r3, $r7, $r15;
        float[] $r4, $r5, $r6;
        boolean $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, $z20, z21, z22, z23, $z24, $z25;
        byte $b5, $b21, $b36, $b37, $b39, $b40;
        java.lang.String $r13, $r43, $r48, $r57, $r60, $r63, $r72, $r81;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.lang.Throwable $r82;
        android.hardware.SensorEvent r83;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        r83 := @parameter0: android.hardware.SensorEvent;

        $r3 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        r1 = staticinvoke <com.android.server.policy.WindowOrientationListener: java.lang.Object access$000(com.android.server.policy.WindowOrientationListener)>($r3);

        entermonitor r1;

     label01:
        $r4 = r83.<android.hardware.SensorEvent: float[] values>;

        f28 = $r4[0];

        $r5 = r83.<android.hardware.SensorEvent: float[] values>;

        f29 = $r5[1];

        $r6 = r83.<android.hardware.SensorEvent: float[] values>;

        f30 = $r6[2];

        $z3 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z3 == 0 goto label02;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Raw acceleration vector: x=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f28);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f29);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", z=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f30);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", magnitude=");

        $f24 = f28 * f28;

        $f23 = f29 * f29;

        $f26 = $f24 + $f23;

        $f25 = f30 * f30;

        $f27 = $f26 + $f25;

        $d12 = (double) $f27;

        $d13 = staticinvoke <java.lang.Math: double sqrt(double)>($d12);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d13);

        $r81 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r81);

     label02:
        l0 = r83.<android.hardware.SensorEvent: long timestamp>;

        l1 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mLastFilteredTimestampNanos>;

     label03:
        $l4 = l0 - l1;

        $f1 = (float) $l4;

        f0 = $f1 * 1.0E-6F;

        $b5 = l0 cmp l1;

        if $b5 < 0 goto label08;

        $l35 = 1000000000L + l1;

        $b36 = l0 cmp $l35;

        if $b36 > 0 goto label08;

        $b37 = f28 cmpl 0.0F;

        if $b37 != 0 goto label04;

        $b39 = f29 cmpl 0.0F;

        if $b39 != 0 goto label04;

        $b40 = f30 cmpl 0.0F;

        if $b40 != 0 goto label04;

        goto label08;

     label04:
        $f31 = 200.0F + f0;

        f32 = f0 / $f31;

     label05:
        $f33 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredX>;

        $f34 = f28 - $f33;

        $f35 = $f34 * f32;

        $f36 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredX>;

        f28 = $f35 + $f36;

        $f37 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredY>;

        $f38 = f29 - $f37;

        $f39 = $f38 * f32;

        $f40 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredY>;

        f29 = $f39 + $f40;

        $f41 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredZ>;

        $f42 = f30 - $f41;

        $f43 = $f42 * f32;

        $f44 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredZ>;

        f30 = $f43 + $f44;

        $z18 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z18 == 0 goto label07;

        r84 = new java.lang.StringBuilder;

        specialinvoke r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filtered acceleration vector: x=");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f28);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y=");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f29);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", z=");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f30);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", magnitude=");

        $f19 = f28 * f28;

        $f18 = f29 * f29;

        $f21 = $f19 + $f18;

        $f20 = f30 * f30;

        $f22 = $f21 + $f20;

        $d10 = (double) $f22;

        $d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d11);

        $r72 = virtualinvoke r84.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r72);

     label06:
        goto label07;

     label07:
        z19 = 0;

        goto label11;

     label08:
        $z20 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z20 == 0 goto label09;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", "Resetting orientation listener.");

     label09:
        virtualinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void resetLocked(boolean)>(1);

     label10:
        z19 = 1;

     label11:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mLastFilteredTimestampNanos> = l0;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredX> = f28;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredY> = f29;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float mLastFilteredZ> = f30;

     label12:
        z21 = 0;

        z22 = 0;

        z23 = 0;

        if z19 != 0 goto label51;

     label13:
        $f8 = f28 * f28;

        $f7 = f29 * f29;

        $f10 = $f8 + $f7;

        $f9 = f30 * f30;

        $f11 = $f10 + $f9;

        $d0 = (double) $f11;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f45 = (float) $d1;

     label14:
        $b21 = f45 cmpg 1.0F;

        if $b21 >= 0 goto label18;

     label15:
        $z17 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z17 == 0 goto label16;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", "Ignoring sensor data, magnitude too close to zero.");

     label16:
        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void clearPredictedRotationLocked()>();

     label17:
        z22 = 0;

        z23 = 0;

        goto label52;

     label18:
        z21 = 0;

     label19:
        $z8 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean isAcceleratingLocked(float)>(f45);

        if $z8 == 0 goto label22;

     label20:
        z21 = 1;

     label21:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mAccelerationTimestampNanos> = l0;

     label22:
        $f12 = f30 / f45;

        $d2 = (double) $f12;

        $d3 = staticinvoke <java.lang.Math: double asin(double)>($d2);

        $d4 = $d3 * 57.295780181884766;

        $l22 = staticinvoke <java.lang.Math: long round(double)>($d4);

        i2 = (int) $l22;

        $f13 = (float) i2;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void addTiltHistoryEntryLocked(long,float)>(l0, $f13);

     label23:
        $z9 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean isFlatLocked(long)>(l0);

        if $z9 == 0 goto label26;

     label24:
        z22 = 1;

     label25:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mFlatTimestampNanos> = l0;

     label26:
        $f14 = (float) i2;

        $z10 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean isSwingingLocked(long,float)>(l0, $f14);

        if $z10 == 0 goto label29;

     label27:
        z23 = 1;

     label28:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mSwingTimestampNanos> = l0;

     label29:
        if i2 > -40 goto label32;

     label30:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mOverhead> = 1;

     label31:
        goto label34;

     label32:
        if i2 < -15 goto label34;

     label33:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mOverhead> = 0;

     label34:
        $z24 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mOverhead>;

        if $z24 == 0 goto label37;

        $z16 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z16 == 0 goto label35;

        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring sensor data, device is overhead: tiltAngle=");

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r63 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r63);

     label35:
        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void clearPredictedRotationLocked()>();

     label36:
        goto label50;

     label37:
        $i23 = staticinvoke <java.lang.Math: int abs(int)>(i2);

        if $i23 <= 80 goto label40;

        $z15 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z15 == 0 goto label38;

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring sensor data, tilt angle too high: tiltAngle=");

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r60 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r60);

     label38:
        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void clearPredictedRotationLocked()>();

     label39:
        goto label50;

     label40:
        $f15 = neg f28;

        $d6 = (double) $f15;

        $d5 = (double) f29;

        $d7 = staticinvoke <java.lang.Math: double atan2(double,double)>($d6, $d5);

        $d8 = neg $d7;

        $d9 = $d8 * 57.295780181884766;

        $l24 = staticinvoke <java.lang.Math: long round(double)>($d9);

        i42 = (int) $l24;

     label41:
        i43 = i42;

        if i42 >= 0 goto label42;

        i43 = i42 + 360;

     label42:
        $i25 = i43 + 45;

        i3 = $i25 / 90;

     label43:
        i44 = i3;

        if i3 != 4 goto label44;

        i44 = 0;

     label44:
        $z11 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean isTiltAngleAcceptableLocked(int,int)>(i44, i2);

        if $z11 == 0 goto label48;

        $z13 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean isOrientationAngleAcceptableLocked(int,int)>(i44, i43);

        if $z13 == 0 goto label47;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void updatePredictedRotationLocked(long,int)>(l0, i44);

        $z14 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z14 == 0 goto label46;

        r87 = new java.lang.StringBuilder;

        specialinvoke r87.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Predicted: tiltAngle=");

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", orientationAngle=");

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", predictedRotation=");

        $i27 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation>;

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", predictedRotationAgeMS=");

        $l28 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mPredictedRotationTimestampNanos>;

        $l29 = l0 - $l28;

        $f16 = (float) $l29;

        $f17 = $f16 * 1.0E-6F;

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f17);

        $r57 = virtualinvoke r87.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r57);

     label45:
        goto label50;

     label46:
        goto label50;

     label47:
        goto label48;

     label48:
        $z12 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z12 == 0 goto label49;

        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring sensor data, no predicted rotation: tiltAngle=");

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", orientationAngle=");

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

        $r48 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r48);

     label49:
        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void clearPredictedRotationLocked()>();

     label50:
        goto label52;

     label51:
        z23 = 0;

        z22 = 0;

     label52:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mFlat> = z22;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mSwinging> = z23;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mAccelerating> = z21;

        i45 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mProposedRotation>;

        $i46 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation>;

        if $i46 < 0 goto label53;

        $z7 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean isPredictedRotationAcceptableLocked(long)>(l0);

        if $z7 == 0 goto label54;

     label53:
        $i6 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation>;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mProposedRotation> = $i6;

     label54:
        i47 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mProposedRotation>;

        $z25 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z25 == 0 goto label55;

        r89 = new java.lang.StringBuilder;

        specialinvoke r89.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result: currentRotation=");

        $r15 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        $i8 = staticinvoke <com.android.server.policy.WindowOrientationListener: int access$200(com.android.server.policy.WindowOrientationListener)>($r15);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", proposedRotation=");

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i47);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", predictedRotation=");

        $i9 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mPredictedRotation>;

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeDeltaMS=");

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isAccelerating=");

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z21);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isFlat=");

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z22);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isSwinging=");

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z23);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isOverhead=");

        $z5 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mOverhead>;

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isTouched=");

        $z6 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mTouched>;

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilSettledMS=");

        $l10 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mPredictedRotationTimestampNanos>;

        $l11 = $l10 + 40000000L;

        $f2 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float remainingMS(long,long)>(l0, $l11);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilAccelerationDelayExpiredMS=");

        $l12 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mAccelerationTimestampNanos>;

        $l13 = $l12 + 500000000L;

        $f3 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float remainingMS(long,long)>(l0, $l13);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilFlatDelayExpiredMS=");

        $l14 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mFlatTimestampNanos>;

        $l15 = $l14 + 500000000L;

        $f4 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float remainingMS(long,long)>(l0, $l15);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilSwingDelayExpiredMS=");

        $l16 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mSwingTimestampNanos>;

        $l17 = $l16 + 300000000L;

        $f5 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float remainingMS(long,long)>(l0, $l17);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeUntilTouchDelayExpiredMS=");

        $l18 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mTouchEndedTimestampNanos>;

        $l19 = $l18 + 500000000L;

        $f6 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float remainingMS(long,long)>(l0, $l19);

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f6);

        $r43 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r43);

     label55:
        exitmonitor r1;

     label56:
        if i47 == i45 goto label58;

        if i47 < 0 goto label58;

        $z4 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z4 == 0 goto label57;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proposed rotation changed!  proposedRotation=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i47);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldProposedRotation=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i45);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowOrientationListener", $r13);

     label57:
        $r7 = r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        virtualinvoke $r7.<com.android.server.policy.WindowOrientationListener: void onProposedRotationChanged(int)>(i47);

     label58:
        return;

     label59:
        $r82 := @caughtexception;

     label60:
        exitmonitor r1;

     label61:
        throw $r82;

        catch java.lang.Throwable from label01 to label02 with label59;
        catch java.lang.Throwable from label02 to label03 with label59;
        catch java.lang.Throwable from label05 to label06 with label59;
        catch java.lang.Throwable from label08 to label09 with label59;
        catch java.lang.Throwable from label09 to label10 with label59;
        catch java.lang.Throwable from label11 to label12 with label59;
        catch java.lang.Throwable from label13 to label14 with label59;
        catch java.lang.Throwable from label15 to label16 with label59;
        catch java.lang.Throwable from label16 to label17 with label59;
        catch java.lang.Throwable from label19 to label20 with label59;
        catch java.lang.Throwable from label21 to label22 with label59;
        catch java.lang.Throwable from label22 to label23 with label59;
        catch java.lang.Throwable from label23 to label24 with label59;
        catch java.lang.Throwable from label25 to label26 with label59;
        catch java.lang.Throwable from label26 to label27 with label59;
        catch java.lang.Throwable from label28 to label29 with label59;
        catch java.lang.Throwable from label30 to label31 with label59;
        catch java.lang.Throwable from label33 to label34 with label59;
        catch java.lang.Throwable from label34 to label35 with label59;
        catch java.lang.Throwable from label35 to label36 with label59;
        catch java.lang.Throwable from label37 to label38 with label59;
        catch java.lang.Throwable from label38 to label39 with label59;
        catch java.lang.Throwable from label40 to label41 with label59;
        catch java.lang.Throwable from label42 to label43 with label59;
        catch java.lang.Throwable from label44 to label45 with label59;
        catch java.lang.Throwable from label48 to label49 with label59;
        catch java.lang.Throwable from label49 to label50 with label59;
        catch java.lang.Throwable from label52 to label53 with label59;
        catch java.lang.Throwable from label53 to label54 with label59;
        catch java.lang.Throwable from label54 to label55 with label59;
        catch java.lang.Throwable from label55 to label56 with label59;
        catch java.lang.Throwable from label60 to label61 with label59;
    }

    public void onTouchEndLocked(long)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        long l0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        l0 := @parameter0: long;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mTouched> = 0;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mTouchEndedTimestampNanos> = l0;

        return;
    }

    public void onTouchStartLocked()
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mTouched> = 1;

        return;
    }

    public void resetLocked(boolean)
    {
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge r0;
        boolean z0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        z0 := @parameter0: boolean;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mLastFilteredTimestampNanos> = -9223372036854775808L;

        if z0 == 0 goto label1;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int mProposedRotation> = -1;

     label1:
        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mFlatTimestampNanos> = -9223372036854775808L;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mFlat> = 0;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mSwingTimestampNanos> = -9223372036854775808L;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mSwinging> = 0;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long mAccelerationTimestampNanos> = -9223372036854775808L;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mAccelerating> = 0;

        r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: boolean mOverhead> = 0;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void clearPredictedRotationLocked()>();

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void clearTiltHistoryLocked()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int TILT_OVERHEAD_EXIT> = -15;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int TILT_OVERHEAD_ENTER> = -40;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int TILT_HISTORY_SIZE> = 200;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long SWING_TIME_NANOS> = 300000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float SWING_AWAY_ANGLE_DELTA> = 20.0F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float RADIANS_TO_DEGREES> = 57.29578F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long PROPOSAL_SETTLE_TIME_NANOS> = 40000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long PROPOSAL_MIN_TIME_SINCE_SWING_ENDED_NANOS> = 300000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long PROPOSAL_MIN_TIME_SINCE_FLAT_ENDED_NANOS> = 500000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long PROPOSAL_MIN_TIME_SINCE_ACCELERATION_ENDED_NANOS> = 500000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float NEAR_ZERO_MAGNITUDE> = 1.0F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float MIN_ACCELERATION_MAGNITUDE> = 5.80665F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int MAX_TILT> = 80;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long MAX_FILTER_DELTA_TIME_NANOS> = 1000000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float MAX_ACCELERATION_MAGNITUDE> = 13.80665F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: long FLAT_TIME_NANOS> = 1000000000L;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float FLAT_ANGLE> = 80.0F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float FILTER_TIME_CONSTANT_MS> = 200.0F;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int ADJACENT_ORIENTATION_ANGLE_GAP> = 45;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int ACCELEROMETER_DATA_Z> = 2;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int ACCELEROMETER_DATA_Y> = 1;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: int ACCELEROMETER_DATA_X> = 0;

        <com.android.server.policy.WindowOrientationListener$AccelSensorJudge: float ACCELERATION_TOLERANCE> = 4.0F;

        return;
    }
}
