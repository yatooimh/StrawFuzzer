final class com.android.server.policy.WindowOrientationListener$OrientationSensorJudge extends com.android.server.policy.WindowOrientationListener$OrientationJudge
{
    private int mDesiredRotation;
    private int mProposedRotation;
    private boolean mRotationEvaluationScheduled;
    private java.lang.Runnable mRotationEvaluator;
    private long mTouchEndedTimestampNanos;
    private boolean mTouching;
    final com.android.server.policy.WindowOrientationListener this$0;

    void <init>(com.android.server.policy.WindowOrientationListener)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        com.android.server.policy.WindowOrientationListener r1;
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge$1 $r2;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        r1 := @parameter0: com.android.server.policy.WindowOrientationListener;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: com.android.server.policy.WindowOrientationListener this$0> = r1;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationJudge: void <init>(com.android.server.policy.WindowOrientationListener)>(r1);

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: long mTouchEndedTimestampNanos> = -9223372036854775808L;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation> = -1;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation> = -1;

        $r2 = new com.android.server.policy.WindowOrientationListener$OrientationSensorJudge$1;

        specialinvoke $r2.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge$1: void <init>(com.android.server.policy.WindowOrientationListener$OrientationSensorJudge)>(r0);

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: java.lang.Runnable mRotationEvaluator> = $r2;

        return;
    }

    static boolean access$402(com.android.server.policy.WindowOrientationListener$OrientationSensorJudge, boolean)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        boolean z0;

        r0 := @parameter0: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        z0 := @parameter1: boolean;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mRotationEvaluationScheduled> = z0;

        return z0;
    }

    private boolean isDesiredRotationAcceptableLocked(long)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        long l0, $l1, $l2;
        boolean $z0;
        byte $b3;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mTouching>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $l1 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: long mTouchEndedTimestampNanos>;

        $l2 = $l1 + 500000000L;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private void scheduleRotationEvaluationIfNecessaryLocked(long)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        long l0, $l4, $l6, l9, l10;
        boolean $z0, $z1, $z2, $z4, $z5;
        int $i2, $i3;
        byte $b5;
        float $f0, $f1;
        double $d0, $d1;
        com.android.server.policy.WindowOrientationListener $r1;
        android.os.Handler $r2;
        java.lang.Runnable $r3;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        l9 := @parameter0: long;

        $z0 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mRotationEvaluationScheduled>;

        if $z0 != 0 goto label6;

        $i3 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation>;

        $i2 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation>;

        if $i3 != $i2 goto label1;

        goto label6;

     label1:
        $z2 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mTouching>;

        if $z2 == 0 goto label3;

        $z5 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z5 == 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "scheduleRotationEvaluationLocked: ignoring, user is still touching the screen.");

     label2:
        return;

     label3:
        $l4 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: long mTouchEndedTimestampNanos>;

        l0 = $l4 + 500000000L;

        $b5 = l9 cmp l0;

        if $b5 < 0 goto label5;

        $z4 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z4 == 0 goto label4;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "scheduleRotationEvaluationLocked: ignoring, already past the next possible time of rotation.");

     label4:
        return;

     label5:
        $l6 = l0 - l9;

        $f0 = (float) $l6;

        $f1 = $f0 * 1.0E-6F;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        l10 = (long) $d1;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        $r2 = staticinvoke <com.android.server.policy.WindowOrientationListener: android.os.Handler access$300(com.android.server.policy.WindowOrientationListener)>($r1);

        $r3 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: java.lang.Runnable mRotationEvaluator>;

        virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, l10);

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mRotationEvaluationScheduled> = 1;

        return;

     label6:
        $z1 = staticinvoke <com.android.server.policy.WindowOrientationListener: boolean access$100()>();

        if $z1 == 0 goto label7;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "scheduleRotationEvaluationLocked: ignoring, an evaluation is already scheduled or is unnecessary.");

     label7:
        return;
    }

    private void unscheduleRotationEvaluationLocked()
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        boolean $z0;
        com.android.server.policy.WindowOrientationListener $r1;
        android.os.Handler $r2;
        java.lang.Runnable $r3;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        $z0 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mRotationEvaluationScheduled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        $r2 = staticinvoke <com.android.server.policy.WindowOrientationListener: android.os.Handler access$300(com.android.server.policy.WindowOrientationListener)>($r1);

        $r3 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: java.lang.Runnable mRotationEvaluator>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mRotationEvaluationScheduled> = 0;

        return;
    }

    public void dumpLocked(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r6, $r9, $r15, $r21, $r26;
        java.lang.String $r5, $r12, $r14, $r18, $r20, $r25, $r30, r31, r34;
        int $i0, $i1;
        boolean $z0;
        long $l2;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        r1 := @parameter0: java.io.PrintWriter;

        r31 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OrientationSensorJudge");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r34 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDesiredRotation=");

        $i0 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation>;

        $r12 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mProposedRotation=");

        $i1 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation>;

        $r18 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTouching=");

        $z0 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mTouching>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTouchEndedTimestampNanos=");

        $l2 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: long mTouchEndedTimestampNanos>;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        return;
    }

    public int evaluateRotationChangeLocked()
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        long l0;
        int i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: void unscheduleRotationEvaluationLocked()>();

        $i3 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation>;

        $i2 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation>;

        if $i3 != $i2 goto label1;

        return -1;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $z0 = specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean isDesiredRotationAcceptableLocked(long)>(l0);

        if $z0 == 0 goto label2;

        i1 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation>;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation> = i1;

        return i1;

     label2:
        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: void scheduleRotationEvaluationIfNecessaryLocked(long)>(l0);

        return -1;
    }

    public int getProposedRotationLocked()
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        int $i0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        $i0 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation>;

        return $i0;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        java.lang.Object r1;
        float[] $r2;
        float $f0;
        com.android.server.policy.WindowOrientationListener $r3, $r4;
        java.lang.Throwable $r5;
        android.hardware.SensorEvent r6;
        int i0, i1;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        r6 := @parameter0: android.hardware.SensorEvent;

        $r2 = r6.<android.hardware.SensorEvent: float[] values>;

        $f0 = $r2[0];

        i0 = (int) $f0;

        if i0 < 0 goto label8;

        if i0 <= 3 goto label1;

        goto label8;

     label1:
        $r3 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        r1 = staticinvoke <com.android.server.policy.WindowOrientationListener: java.lang.Object access$000(com.android.server.policy.WindowOrientationListener)>($r3);

        entermonitor r1;

     label2:
        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation> = i0;

        i1 = virtualinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int evaluateRotationChangeLocked()>();

        exitmonitor r1;

     label3:
        if i1 < 0 goto label4;

        $r4 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: com.android.server.policy.WindowOrientationListener this$0>;

        virtualinvoke $r4.<com.android.server.policy.WindowOrientationListener: void onProposedRotationChanged(int)>(i1);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onTouchEndLocked(long)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        long l0, $l3;
        int $i1, $i2;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        l0 := @parameter0: long;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mTouching> = 0;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: long mTouchEndedTimestampNanos> = l0;

        $i2 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation>;

        $i1 = r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation>;

        if $i2 == $i1 goto label1;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: void scheduleRotationEvaluationIfNecessaryLocked(long)>($l3);

     label1:
        return;
    }

    public void onTouchStartLocked()
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mTouching> = 1;

        return;
    }

    public void resetLocked(boolean)
    {
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge r0;
        boolean z0;

        r0 := @this: com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mProposedRotation> = -1;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: int mDesiredRotation> = -1;

     label1:
        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: boolean mTouching> = 0;

        r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: long mTouchEndedTimestampNanos> = -9223372036854775808L;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: void unscheduleRotationEvaluationLocked()>();

        return;
    }
}
