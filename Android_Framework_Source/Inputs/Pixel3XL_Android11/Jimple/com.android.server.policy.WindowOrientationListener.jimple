public abstract class com.android.server.policy.WindowOrientationListener extends java.lang.Object
{
    private static final int DEFAULT_BATCH_LATENCY;
    private static final boolean LOG;
    private static final java.lang.String TAG;
    private static final boolean USE_GRAVITY_SENSOR;
    private int mCurrentRotation;
    private boolean mEnabled;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge;
    private int mRate;
    private android.hardware.Sensor mSensor;
    private android.hardware.SensorManager mSensorManager;
    private java.lang.String mSensorType;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.policy.WindowOrientationListener: boolean USE_GRAVITY_SENSOR> = 0;

        <com.android.server.policy.WindowOrientationListener: java.lang.String TAG> = "WindowOrientationListener";

        <com.android.server.policy.WindowOrientationListener: int DEFAULT_BATCH_LATENCY> = 100000;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.orientation.log", 0);

        <com.android.server.policy.WindowOrientationListener: boolean LOG> = $z0;

        return;
    }

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.policy.WindowOrientationListener r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<com.android.server.policy.WindowOrientationListener: void <init>(android.content.Context,android.os.Handler,int)>(r1, r2, 2);

        return;
    }

    private void <init>(android.content.Context, android.os.Handler, int)
    {
        com.android.server.policy.WindowOrientationListener r0;
        android.content.Context r1;
        int i0;
        java.util.Iterator r2;
        java.lang.Object $r3, $r4, $r10;
        boolean $z0, $z1;
        android.hardware.Sensor $r5, r14, r15, r16, r17;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r6;
        android.hardware.SensorManager $r7, r12;
        com.android.server.policy.WindowOrientationListener$AccelSensorJudge $r8;
        com.android.server.policy.WindowOrientationListener$OrientationSensorJudge $r9;
        android.os.Handler r11;
        java.util.List r13;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r1 := @parameter0: android.content.Context;

        r11 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.WindowOrientationListener: int mCurrentRotation> = -1;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock> = $r3;

        r0.<com.android.server.policy.WindowOrientationListener: android.os.Handler mHandler> = r11;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        r12 = (android.hardware.SensorManager) $r4;

        r0.<com.android.server.policy.WindowOrientationListener: android.hardware.SensorManager mSensorManager> = r12;

        r0.<com.android.server.policy.WindowOrientationListener: int mRate> = i0;

        r13 = virtualinvoke r12.<android.hardware.SensorManager: java.util.List getSensorList(int)>(27);

        r14 = null;

        r15 = null;

        r2 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r16 = (android.hardware.Sensor) $r10;

        $z1 = virtualinvoke r16.<android.hardware.Sensor: boolean isWakeUpSensor()>();

        if $z1 == 0 goto label2;

        r14 = r16;

        goto label3;

     label2:
        r15 = r16;

     label3:
        goto label1;

     label4:
        if r14 == null goto label5;

        r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor> = r14;

        goto label6;

     label5:
        r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor> = r15;

     label6:
        $r5 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r5 == null goto label7;

        $r9 = new com.android.server.policy.WindowOrientationListener$OrientationSensorJudge;

        specialinvoke $r9.<com.android.server.policy.WindowOrientationListener$OrientationSensorJudge: void <init>(com.android.server.policy.WindowOrientationListener)>(r0);

        r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge> = $r9;

     label7:
        $r6 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        if $r6 != null goto label8;

        $r7 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        r17 = virtualinvoke $r7.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor> = r17;

        if r17 == null goto label8;

        $r8 = new com.android.server.policy.WindowOrientationListener$AccelSensorJudge;

        specialinvoke $r8.<com.android.server.policy.WindowOrientationListener$AccelSensorJudge: void <init>(com.android.server.policy.WindowOrientationListener,android.content.Context)>(r0, r1);

        r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge> = $r8;

     label8:
        return;
    }

    static java.lang.Object access$000(com.android.server.policy.WindowOrientationListener)
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.policy.WindowOrientationListener;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <com.android.server.policy.WindowOrientationListener: boolean LOG>;

        return $z0;
    }

    static int access$200(com.android.server.policy.WindowOrientationListener)
    {
        com.android.server.policy.WindowOrientationListener r0;
        int $i0;

        r0 := @parameter0: com.android.server.policy.WindowOrientationListener;

        $i0 = r0.<com.android.server.policy.WindowOrientationListener: int mCurrentRotation>;

        return $i0;
    }

    static android.os.Handler access$300(com.android.server.policy.WindowOrientationListener)
    {
        com.android.server.policy.WindowOrientationListener r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.policy.WindowOrientationListener;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener: android.os.Handler mHandler>;

        return $r1;
    }

    public boolean canDetectOrientation()
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object r1;
        android.hardware.Sensor $r3;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r3 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void disable()
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object r1;
        android.hardware.Sensor $r3;
        boolean $z0, $z1;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r4;
        android.hardware.SensorManager $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r3 != null goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Invalid disable");

        exitmonitor r1;

     label2:
        return;

     label3:
        $z0 = r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 1 goto label5;

        $z1 = <com.android.server.policy.WindowOrientationListener: boolean LOG>;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", "WindowOrientationListener disabled");

     label4:
        $r5 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r4 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        virtualinvoke $r5.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r4);

        r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled> = 0;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object r1;
        java.lang.String $r4, $r10, $r13, $r15, $r18, $r20, $r25, $r29, r34, r37;
        boolean $z0;
        int $i0, $i1;
        android.hardware.Sensor $r23;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r30, $r31;
        java.lang.Throwable $r32;
        java.io.PrintWriter r33;
        java.lang.StringBuilder r35, r36, r38, r39, r40, r41, r42;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r33 := @parameter0: java.io.PrintWriter;

        r34 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WindowOrientationListener");

        $r4 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r37 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mEnabled=");

        $z0 = r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled>;

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r10 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentRotation=");

        $i0 = r0.<com.android.server.policy.WindowOrientationListener: int mCurrentRotation>;

        $r13 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i0);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSensorType=");

        $r18 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.String mSensorType>;

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSensor=");

        $r23 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRate=");

        $i1 = r0.<com.android.server.policy.WindowOrientationListener: int mRate>;

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r29 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        $r30 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        if $r30 == null goto label2;

        $r31 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        virtualinvoke $r31.<com.android.server.policy.WindowOrientationListener$OrientationJudge: void dumpLocked(java.io.PrintWriter,java.lang.String)>(r33, r37);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r32 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r32;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r2;
        android.util.proto.ProtoOutputStream r3;
        long l1, l2;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r3 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        l2 = virtualinvoke r3.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled>;

        virtualinvoke r3.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, $z0);

        $i0 = r0.<com.android.server.policy.WindowOrientationListener: int mCurrentRotation>;

        virtualinvoke r3.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169922L, $i0);

        exitmonitor r1;

     label2:
        virtualinvoke r3.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void enable()
    {
        com.android.server.policy.WindowOrientationListener r0;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        virtualinvoke r0.<com.android.server.policy.WindowOrientationListener: void enable(boolean)>(1);

        return;
    }

    public void enable(boolean)
    {
        com.android.server.policy.WindowOrientationListener r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        android.hardware.Sensor $r2, $r4, $r6, $r10;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r3, $r7, $r11;
        int $i0, $i1, $i2;
        android.os.Handler $r5, $r9;
        android.hardware.SensorManager $r8, $r12;
        java.lang.String $r15;
        java.lang.Throwable $r16;
        java.lang.StringBuilder r17;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r2 != null goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Not enabled");

        exitmonitor r1;

     label02:
        return;

     label03:
        $z1 = r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled>;

        if $z1 == 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $z2 = <com.android.server.policy.WindowOrientationListener: boolean LOG>;

        if $z2 == 0 goto label06;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WindowOrientationListener enabled clearCurrentRotation=");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r15 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowOrientationListener", $r15);

     label06:
        $r3 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        virtualinvoke $r3.<com.android.server.policy.WindowOrientationListener$OrientationJudge: void resetLocked(boolean)>(z0);

        $r4 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $i0 = virtualinvoke $r4.<android.hardware.Sensor: int getType()>();

        if $i0 != 1 goto label08;

        $r12 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r11 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        $r10 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $i2 = r0.<com.android.server.policy.WindowOrientationListener: int mRate>;

        $r9 = r0.<com.android.server.policy.WindowOrientationListener: android.os.Handler mHandler>;

        virtualinvoke $r12.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>($r11, $r10, $i2, 100000, $r9);

     label07:
        goto label09;

     label08:
        $r8 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r7 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        $r6 = r0.<com.android.server.policy.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $i1 = r0.<com.android.server.policy.WindowOrientationListener: int mRate>;

        $r5 = r0.<com.android.server.policy.WindowOrientationListener: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r7, $r6, $i1, $r5);

     label09:
        r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled> = 1;

        exitmonitor r1;

     label10:
        return;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.os.Handler getHandler()
    {
        com.android.server.policy.WindowOrientationListener r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        $r1 = r0.<com.android.server.policy.WindowOrientationListener: android.os.Handler mHandler>;

        return $r1;
    }

    public int getProposedRotation()
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.policy.WindowOrientationListener: boolean mEnabled>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        i0 = virtualinvoke $r3.<com.android.server.policy.WindowOrientationListener$OrientationJudge: int getProposedRotationLocked()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public abstract void onProposedRotationChanged(int);

    public void onTouchEnd()
    {
        com.android.server.policy.WindowOrientationListener r0;
        long l0;
        java.lang.Object r1;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        virtualinvoke $r4.<com.android.server.policy.WindowOrientationListener$OrientationJudge: void onTouchEndLocked(long)>(l0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void onTouchStart()
    {
        com.android.server.policy.WindowOrientationListener r0;
        java.lang.Object r1;
        com.android.server.policy.WindowOrientationListener$OrientationJudge $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.policy.WindowOrientationListener: com.android.server.policy.WindowOrientationListener$OrientationJudge mOrientationJudge>;

        virtualinvoke $r4.<com.android.server.policy.WindowOrientationListener$OrientationJudge: void onTouchStartLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setCurrentRotation(int)
    {
        com.android.server.policy.WindowOrientationListener r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.policy.WindowOrientationListener;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.policy.WindowOrientationListener: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.policy.WindowOrientationListener: int mCurrentRotation> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
