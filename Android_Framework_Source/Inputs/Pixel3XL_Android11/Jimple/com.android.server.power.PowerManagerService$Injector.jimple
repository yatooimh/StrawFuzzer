class com.android.server.power.PowerManagerService$Injector extends java.lang.Object
{

    void <init>()
    {
        com.android.server.power.PowerManagerService$Injector r0;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    android.hardware.display.AmbientDisplayConfiguration createAmbientDisplayConfiguration(android.content.Context)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        android.content.Context r1;
        android.hardware.display.AmbientDisplayConfiguration $r2;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        $r2 = new android.hardware.display.AmbientDisplayConfiguration;

        specialinvoke $r2.<android.hardware.display.AmbientDisplayConfiguration: void <init>(android.content.Context)>(r1);

        return $r2;
    }

    com.android.server.power.AmbientDisplaySuppressionController createAmbientDisplaySuppressionController(android.content.Context)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        android.content.Context r1;
        com.android.server.power.AmbientDisplaySuppressionController $r2;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.power.AmbientDisplaySuppressionController;

        specialinvoke $r2.<com.android.server.power.AmbientDisplaySuppressionController: void <init>(android.content.Context)>(r1);

        return $r2;
    }

    com.android.server.power.batterysaver.BatterySaverController createBatterySaverController(java.lang.Object, android.content.Context, com.android.server.power.batterysaver.BatterySaverPolicy, com.android.server.power.batterysaver.BatterySavingStats)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        java.lang.Object r1;
        android.content.Context r2;
        com.android.server.power.batterysaver.BatterySaverPolicy r3;
        com.android.server.power.batterysaver.BatterySavingStats r4;
        com.android.server.power.batterysaver.BatterySaverController $r5;
        com.android.internal.os.BackgroundThread $r6;
        android.os.Looper $r7;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.server.power.batterysaver.BatterySaverPolicy;

        r4 := @parameter3: com.android.server.power.batterysaver.BatterySavingStats;

        $r5 = new com.android.server.power.batterysaver.BatterySaverController;

        $r6 = staticinvoke <com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()>();

        $r7 = virtualinvoke $r6.<com.android.internal.os.BackgroundThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<com.android.server.power.batterysaver.BatterySaverController: void <init>(java.lang.Object,android.content.Context,android.os.Looper,com.android.server.power.batterysaver.BatterySaverPolicy,com.android.server.power.batterysaver.BatterySavingStats)>(r1, r2, $r7, r3, r4);

        return $r5;
    }

    com.android.server.power.batterysaver.BatterySaverPolicy createBatterySaverPolicy(java.lang.Object, android.content.Context, com.android.server.power.batterysaver.BatterySavingStats)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        java.lang.Object r1;
        android.content.Context r2;
        com.android.server.power.batterysaver.BatterySavingStats r3;
        com.android.server.power.batterysaver.BatterySaverPolicy $r4;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.server.power.batterysaver.BatterySavingStats;

        $r4 = new com.android.server.power.batterysaver.BatterySaverPolicy;

        specialinvoke $r4.<com.android.server.power.batterysaver.BatterySaverPolicy: void <init>(java.lang.Object,android.content.Context,com.android.server.power.batterysaver.BatterySavingStats)>(r1, r2, r3);

        return $r4;
    }

    com.android.server.power.batterysaver.BatterySaverStateMachine createBatterySaverStateMachine(java.lang.Object, android.content.Context, com.android.server.power.batterysaver.BatterySaverController)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        java.lang.Object r1;
        android.content.Context r2;
        com.android.server.power.batterysaver.BatterySaverController r3;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r4;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.server.power.batterysaver.BatterySaverController;

        $r4 = new com.android.server.power.batterysaver.BatterySaverStateMachine;

        specialinvoke $r4.<com.android.server.power.batterysaver.BatterySaverStateMachine: void <init>(java.lang.Object,android.content.Context,com.android.server.power.batterysaver.BatterySaverController)>(r1, r2, r3);

        return $r4;
    }

    com.android.server.power.PowerManagerService$Clock createClock()
    {
        com.android.server.power.PowerManagerService$Injector r0;
        com.android.server.power.'-$$Lambda$mJs78oyYBMDErllGe4sx87OZns8' $r1;
        com.android.server.power.PowerManagerService$Clock r2;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        $r1 = <com.android.server.power._$$Lambda$mJs78oyYBMDErllGe4sx87OZns8: com.android.server.power.'-$$Lambda$mJs78oyYBMDErllGe4sx87OZns8' INSTANCE>;

        r2 = (com.android.server.power.PowerManagerService$Clock) $r1;

        return r2;
    }

    android.os.Handler createHandler(android.os.Looper, android.os.Handler$Callback)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        android.os.Looper r1;
        android.os.Handler$Callback r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.os.Handler$Callback;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback,boolean)>(r1, r2, 1);

        return $r3;
    }

    com.android.server.power.InattentiveSleepWarningController createInattentiveSleepWarningController()
    {
        com.android.server.power.PowerManagerService$Injector r0;
        com.android.server.power.InattentiveSleepWarningController $r1;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        $r1 = new com.android.server.power.InattentiveSleepWarningController;

        specialinvoke $r1.<com.android.server.power.InattentiveSleepWarningController: void <init>()>();

        return $r1;
    }

    com.android.server.power.PowerManagerService$NativeWrapper createNativeWrapper()
    {
        com.android.server.power.PowerManagerService$Injector r0;
        com.android.server.power.PowerManagerService$NativeWrapper $r1;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        $r1 = new com.android.server.power.PowerManagerService$NativeWrapper;

        specialinvoke $r1.<com.android.server.power.PowerManagerService$NativeWrapper: void <init>()>();

        return $r1;
    }

    com.android.server.power.Notifier createNotifier(android.os.Looper, android.content.Context, com.android.internal.app.IBatteryStats, com.android.server.power.SuspendBlocker, com.android.server.policy.WindowManagerPolicy)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        android.os.Looper r1;
        android.content.Context r2;
        com.android.internal.app.IBatteryStats r3;
        com.android.server.power.SuspendBlocker r4;
        com.android.server.policy.WindowManagerPolicy r5;
        com.android.server.power.Notifier $r6;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.internal.app.IBatteryStats;

        r4 := @parameter3: com.android.server.power.SuspendBlocker;

        r5 := @parameter4: com.android.server.policy.WindowManagerPolicy;

        $r6 = new com.android.server.power.Notifier;

        specialinvoke $r6.<com.android.server.power.Notifier: void <init>(android.os.Looper,android.content.Context,com.android.internal.app.IBatteryStats,com.android.server.power.SuspendBlocker,com.android.server.policy.WindowManagerPolicy)>(r1, r2, r3, r4, r5);

        return $r6;
    }

    com.android.server.power.SuspendBlocker createSuspendBlocker(com.android.server.power.PowerManagerService, java.lang.String)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        com.android.server.power.PowerManagerService r1;
        com.android.server.power.PowerManagerService$SuspendBlockerImpl $r3;
        java.util.ArrayList $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: com.android.server.power.PowerManagerService;

        r5 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = new com.android.server.power.PowerManagerService$SuspendBlockerImpl;

        specialinvoke $r3.<com.android.server.power.PowerManagerService$SuspendBlockerImpl: void <init>(com.android.server.power.PowerManagerService,java.lang.String)>(r1, r5);

        $r4 = staticinvoke <com.android.server.power.PowerManagerService: java.util.ArrayList access$1500(com.android.server.power.PowerManagerService)>(r1);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public com.android.server.power.SystemPropertiesWrapper createSystemPropertiesWrapper()
    {
        com.android.server.power.PowerManagerService$Injector r0;
        com.android.server.power.PowerManagerService$Injector$1 $r1;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        $r1 = new com.android.server.power.PowerManagerService$Injector$1;

        specialinvoke $r1.<com.android.server.power.PowerManagerService$Injector$1: void <init>(com.android.server.power.PowerManagerService$Injector)>(r0);

        return $r1;
    }

    com.android.server.power.WirelessChargerDetector createWirelessChargerDetector(android.hardware.SensorManager, com.android.server.power.SuspendBlocker, android.os.Handler)
    {
        com.android.server.power.PowerManagerService$Injector r0;
        android.hardware.SensorManager r1;
        com.android.server.power.SuspendBlocker r2;
        android.os.Handler r3;
        com.android.server.power.WirelessChargerDetector $r4;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        r1 := @parameter0: android.hardware.SensorManager;

        r2 := @parameter1: com.android.server.power.SuspendBlocker;

        r3 := @parameter2: android.os.Handler;

        $r4 = new com.android.server.power.WirelessChargerDetector;

        specialinvoke $r4.<com.android.server.power.WirelessChargerDetector: void <init>(android.hardware.SensorManager,com.android.server.power.SuspendBlocker,android.os.Handler)>(r1, r2, r3);

        return $r4;
    }

    void invalidateIsInteractiveCaches()
    {
        com.android.server.power.PowerManagerService$Injector r0;

        r0 := @this: com.android.server.power.PowerManagerService$Injector;

        staticinvoke <android.os.PowerManager: void invalidateIsInteractiveCaches()>();

        return;
    }
}
