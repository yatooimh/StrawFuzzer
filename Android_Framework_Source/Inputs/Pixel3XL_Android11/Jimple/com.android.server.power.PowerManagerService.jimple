public final class com.android.server.power.PowerManagerService extends com.android.server.SystemService implements com.android.server.Watchdog$Monitor
{
    private static final boolean DEBUG;
    private static final boolean DEBUG_SPEW;
    private static final int DEFAULT_DOUBLE_TAP_TO_WAKE;
    private static final int DEFAULT_SCREEN_OFF_TIMEOUT;
    private static final int DEFAULT_SLEEP_TIMEOUT;
    private static final int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;
    private static final int DIRTY_ATTENTIVE;
    private static final int DIRTY_BATTERY_STATE;
    private static final int DIRTY_BOOT_COMPLETED;
    private static final int DIRTY_DOCK_STATE;
    private static final int DIRTY_IS_POWERED;
    private static final int DIRTY_PROXIMITY_POSITIVE;
    private static final int DIRTY_QUIESCENT;
    private static final int DIRTY_SCREEN_BRIGHTNESS_BOOST;
    private static final int DIRTY_SETTINGS;
    private static final int DIRTY_STAY_ON;
    private static final int DIRTY_USER_ACTIVITY;
    private static final int DIRTY_VR_MODE_CHANGED;
    private static final int DIRTY_WAKEFULNESS;
    private static final int DIRTY_WAKE_LOCKS;
    private static final int HALT_MODE_REBOOT;
    private static final int HALT_MODE_REBOOT_SAFE_MODE;
    private static final int HALT_MODE_SHUTDOWN;
    private static final float INVALID_BRIGHTNESS_IN_CONFIG;
    static final long MIN_LONG_WAKE_CHECK_INTERVAL;
    private static final int MSG_ATTENTIVE_TIMEOUT;
    private static final int MSG_CHECK_FOR_LONG_WAKELOCKS;
    private static final int MSG_SANDMAN;
    private static final int MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT;
    private static final int MSG_USER_ACTIVITY_TIMEOUT;
    private static final int POWER_FEATURE_DOUBLE_TAP_TO_WAKE;
    private static final java.lang.String REASON_BATTERY_THERMAL_STATE;
    private static final java.lang.String REASON_LOW_BATTERY;
    private static final java.lang.String REASON_REBOOT;
    private static final java.lang.String REASON_SHUTDOWN;
    private static final java.lang.String REASON_THERMAL_SHUTDOWN;
    private static final java.lang.String REASON_USERREQUESTED;
    private static final int SCREEN_BRIGHTNESS_BOOST_TIMEOUT;
    private static final int SCREEN_ON_LATENCY_WARNING_MS;
    private static final java.lang.String SYSTEM_PROPERTY_QUIESCENT;
    private static final java.lang.String SYSTEM_PROPERTY_REBOOT_REASON;
    private static final java.lang.String SYSTEM_PROPERTY_RETAIL_DEMO_ENABLED;
    private static final java.lang.String TAG;
    private static final java.lang.String TRACE_SCREEN_ON;
    private static final int USER_ACTIVITY_SCREEN_BRIGHT;
    private static final int USER_ACTIVITY_SCREEN_DIM;
    private static final int USER_ACTIVITY_SCREEN_DREAM;
    private static final int WAKE_LOCK_BUTTON_BRIGHT;
    private static final int WAKE_LOCK_CPU;
    private static final int WAKE_LOCK_DOZE;
    private static final int WAKE_LOCK_DRAW;
    private static final int WAKE_LOCK_PROXIMITY_SCREEN_OFF;
    private static final int WAKE_LOCK_SCREEN_BRIGHT;
    private static final int WAKE_LOCK_SCREEN_DIM;
    private static final int WAKE_LOCK_STAY_AWAKE;
    private static boolean sQuiescent;
    private boolean mAlwaysOnEnabled;
    private final android.hardware.display.AmbientDisplayConfiguration mAmbientDisplayConfiguration;
    private final com.android.server.power.AmbientDisplaySuppressionController mAmbientDisplaySuppressionController;
    private com.android.internal.app.IAppOpsService mAppOps;
    private final com.android.server.power.AttentionDetector mAttentionDetector;
    private com.android.server.lights.LogicalLight mAttentionLight;
    private int mAttentiveTimeoutConfig;
    private long mAttentiveTimeoutSetting;
    private long mAttentiveWarningDurationConfig;
    private int mBatteryLevel;
    private boolean mBatteryLevelLow;
    private int mBatteryLevelWhenDreamStarted;
    private android.os.BatteryManagerInternal mBatteryManagerInternal;
    private final com.android.server.power.batterysaver.BatterySaverController mBatterySaverController;
    private final com.android.server.power.batterysaver.BatterySaverPolicy mBatterySaverPolicy;
    private final com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine;
    private final com.android.server.power.batterysaver.BatterySavingStats mBatterySavingStats;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    private final com.android.server.power.PowerManagerService$BinderService mBinderService;
    private boolean mBootCompleted;
    private final com.android.server.power.PowerManagerService$Clock mClock;
    final com.android.server.power.PowerManagerService$Constants mConstants;
    private final android.content.Context mContext;
    private boolean mDecoupleHalAutoSuspendModeFromDisplayConfig;
    private boolean mDecoupleHalInteractiveModeFromDisplayConfig;
    private boolean mDeviceIdleMode;
    int[] mDeviceIdleTempWhitelist;
    int[] mDeviceIdleWhitelist;
    private int mDirty;
    private android.hardware.display.DisplayManagerInternal mDisplayManagerInternal;
    private final android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks;
    private final android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest;
    private boolean mDisplayReady;
    private final com.android.server.power.SuspendBlocker mDisplaySuspendBlocker;
    private int mDockState;
    private boolean mDoubleTapWakeEnabled;
    private boolean mDozeAfterScreenOff;
    private int mDozeScreenBrightnessOverrideFromDreamManager;
    private float mDozeScreenBrightnessOverrideFromDreamManagerFloat;
    private int mDozeScreenStateOverrideFromDreamManager;
    private boolean mDozeStartInProgress;
    private boolean mDrawWakeLockOverrideFromSidekick;
    private android.service.dreams.DreamManagerInternal mDreamManager;
    private boolean mDreamsActivateOnDockSetting;
    private boolean mDreamsActivateOnSleepSetting;
    private boolean mDreamsActivatedOnDockByDefaultConfig;
    private boolean mDreamsActivatedOnSleepByDefaultConfig;
    private int mDreamsBatteryLevelDrainCutoffConfig;
    private int mDreamsBatteryLevelMinimumWhenNotPoweredConfig;
    private int mDreamsBatteryLevelMinimumWhenPoweredConfig;
    private boolean mDreamsEnabledByDefaultConfig;
    private boolean mDreamsEnabledOnBatteryConfig;
    private boolean mDreamsEnabledSetting;
    private boolean mDreamsSupportedConfig;
    private boolean mForceSuspendActive;
    private int mForegroundProfile;
    private boolean mHalAutoSuspendModeEnabled;
    private boolean mHalInteractiveModeEnabled;
    private final android.os.Handler mHandler;
    private final com.android.server.ServiceThread mHandlerThread;
    private boolean mHoldingDisplaySuspendBlocker;
    private boolean mHoldingWakeLockSuspendBlocker;
    private com.android.server.power.InattentiveSleepWarningController mInattentiveSleepWarningOverlayController;
    private final com.android.server.power.PowerManagerService$Injector mInjector;
    private boolean mIsPowered;
    private boolean mIsVrModeEnabled;
    private long mLastInteractivePowerHintTime;
    private long mLastScreenBrightnessBoostTime;
    private int mLastSleepReason;
    private long mLastSleepTime;
    private long mLastUserActivityTime;
    private long mLastUserActivityTimeNoChangeLights;
    private int mLastWakeReason;
    private long mLastWakeTime;
    private long mLastWarningAboutUserActivityPermission;
    private boolean mLightDeviceIdleMode;
    private com.android.server.lights.LightsManager mLightsManager;
    private final com.android.server.power.PowerManagerService$LocalService mLocalService;
    private final java.lang.Object mLock;
    private long mMaximumScreenDimDurationConfig;
    private float mMaximumScreenDimRatioConfig;
    private long mMaximumScreenOffTimeoutFromDeviceAdmin;
    private long mMinimumScreenOffTimeoutConfig;
    private final com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper;
    private com.android.server.power.Notifier mNotifier;
    private long mNotifyLongDispatched;
    private long mNotifyLongNextCheck;
    private long mNotifyLongScheduled;
    private long mOverriddenTimeout;
    private int mPlugType;
    private com.android.server.policy.WindowManagerPolicy mPolicy;
    private final android.util.SparseArray mProfilePowerState;
    private boolean mProximityPositive;
    private boolean mRequestWaitForNegativeProximity;
    private boolean mSandmanScheduled;
    private boolean mSandmanSummoned;
    private boolean mScreenBrightnessBoostInProgress;
    public final float mScreenBrightnessDefault;
    public final float mScreenBrightnessDefaultVr;
    public final float mScreenBrightnessDim;
    public final float mScreenBrightnessDoze;
    public final float mScreenBrightnessMaximum;
    public final float mScreenBrightnessMaximumVr;
    public final float mScreenBrightnessMinimum;
    public final float mScreenBrightnessMinimumVr;
    private int mScreenBrightnessModeSetting;
    private float mScreenBrightnessOverrideFromWindowManager;
    private float mScreenBrightnessSettingDefault;
    private float mScreenBrightnessSettingMaximum;
    private float mScreenBrightnessSettingMinimum;
    private long mScreenOffTimeoutSetting;
    private com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver;
    private long mSleepTimeoutSetting;
    private boolean mStayOn;
    private int mStayOnWhilePluggedInSetting;
    private boolean mSupportsDoubleTapWakeConfig;
    private final java.util.ArrayList mSuspendBlockers;
    private boolean mSuspendWhenScreenOffDueToProximityConfig;
    private final com.android.server.power.SystemPropertiesWrapper mSystemProperties;
    private boolean mSystemReady;
    private boolean mTheaterModeEnabled;
    private final android.util.SparseArray mUidState;
    private boolean mUidsChanged;
    private boolean mUidsChanging;
    private int mUserActivitySummary;
    private long mUserActivityTimeoutOverrideFromWindowManager;
    private int mUserId;
    private boolean mUserInactiveOverrideFromWindowManager;
    private final android.service.vr.IVrStateCallbacks mVrStateCallbacks;
    private int mWakeLockSummary;
    private final com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker;
    private final java.util.ArrayList mWakeLocks;
    private boolean mWakeUpWhenPluggedOrUnpluggedConfig;
    private boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig;
    private boolean mWakefulnessChanging;
    private int mWakefulnessRaw;
    private com.android.server.power.WirelessChargerDetector mWirelessChargerDetector;

    public void <init>(android.content.Context)
    {
        com.android.server.power.PowerManagerService r0;
        android.content.Context r1;
        com.android.server.power.PowerManagerService$Injector $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.power.PowerManagerService$Injector;

        specialinvoke $r2.<com.android.server.power.PowerManagerService$Injector: void <init>()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void <init>(android.content.Context,com.android.server.power.PowerManagerService$Injector)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, com.android.server.power.PowerManagerService$Injector)
    {
        com.android.server.power.PowerManagerService r0;
        float f0, f1, $f2, $f3, f4, f5, f6, $f7, $f8, $f9, f10, f11, f12, $f13, $f14, $f15;
        java.lang.Object $r2, $r30, $r32, $r34, $r38, $r41, $r66, r90;
        java.util.ArrayList $r3, $r4;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r5;
        int[] $r6, $r7;
        android.util.SparseArray $r8, $r9;
        com.android.server.power.PowerManagerService$1 $r10;
        com.android.server.power.PowerManagerService$4 $r11;
        com.android.server.power.PowerManagerService$BinderService $r12;
        com.android.server.power.PowerManagerService$LocalService $r13;
        com.android.server.power.PowerManagerService$NativeWrapper $r14, $r95, $r96, $r97, $r98;
        com.android.server.power.SystemPropertiesWrapper $r15, $r62;
        com.android.server.power.PowerManagerService$Clock $r16;
        com.android.server.ServiceThread $r17, $r18;
        android.os.Looper $r19;
        com.android.server.power.PowerManagerService$PowerManagerHandlerCallback $r20;
        android.os.Handler $r21, $r23;
        com.android.server.power.PowerManagerService$Constants $r22;
        com.android.server.power.PowerManagerService$Injector $r24, $r26, $r35, $r39, $r42, $r44, r74, $r91, $r93, $r99;
        android.hardware.display.AmbientDisplayConfiguration $r25;
        com.android.server.power.AmbientDisplaySuppressionController $r27;
        com.android.server.power.AttentionDetector $r28;
        com.android.server.power._$$Lambda$PowerManagerService$FUW_os_Z9SregUE_DR9vDwaRuXo $r29;
        com.android.server.power.batterysaver.BatterySavingStats $r31, $r36;
        android.content.Context $r33, $r37, $r40, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r68, $r70, r73, $r78, $r80, $r82, $r84, $r86, $r88;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r43;
        com.android.server.power.InattentiveSleepWarningController $r45;
        android.content.res.Resources $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r69, $r71, $r79, $r81, $r83, $r85, $r87, $r89;
        byte $b0, $b1, $b2, $b3, $b4, $b7, $b8, $b12;
        java.lang.String $r63;
        boolean $z0, $z1, z2;
        java.util.Optional $r64;
        java.lang.Boolean $r65, $r67;
        int $i5, $i6, $i9, $i10, $i11, $i13, $i14, $i15;
        java.lang.Throwable $r72;
        com.android.server.power.batterysaver.BatterySaverPolicy r76;
        com.android.server.power.batterysaver.BatterySaverController r77;
        com.android.server.power.SuspendBlocker $r92, r94;

        r0 := @this: com.android.server.power.PowerManagerService;

        r73 := @parameter0: android.content.Context;

        r74 := @parameter1: com.android.server.power.PowerManagerService$Injector;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r73);

        $r2 = staticinvoke <com.android.server.LockGuard: java.lang.Object installNewLock(int)>(1);

        r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks> = $r4;

        $r5 = new android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        specialinvoke $r5.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest> = $r5;

        r0.<com.android.server.power.PowerManagerService: int mDockState> = 0;

        r0.<com.android.server.power.PowerManagerService: long mMaximumScreenOffTimeoutFromDeviceAdmin> = 9223372036854775807L;

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager> = #NaNF;

        r0.<com.android.server.power.PowerManagerService: long mOverriddenTimeout> = -1L;

        r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager> = -1L;

        r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager> = 0;

        r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager> = -1;

        r0.<com.android.server.power.PowerManagerService: float mDozeScreenBrightnessOverrideFromDreamManagerFloat> = #NaNF;

        r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission> = -9223372036854775808L;

        $r6 = newarray (int)[0];

        r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleWhitelist> = $r6;

        $r7 = newarray (int)[0];

        r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleTempWhitelist> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState> = $r8;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState> = $r9;

        $r10 = new com.android.server.power.PowerManagerService$1;

        specialinvoke $r10.<com.android.server.power.PowerManagerService$1: void <init>(com.android.server.power.PowerManagerService)>(r0);

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks> = $r10;

        $r11 = new com.android.server.power.PowerManagerService$4;

        specialinvoke $r11.<com.android.server.power.PowerManagerService$4: void <init>(com.android.server.power.PowerManagerService)>(r0);

        r0.<com.android.server.power.PowerManagerService: android.service.vr.IVrStateCallbacks mVrStateCallbacks> = $r11;

        r0.<com.android.server.power.PowerManagerService: android.content.Context mContext> = r73;

        $r12 = new com.android.server.power.PowerManagerService$BinderService;

        specialinvoke $r12.<com.android.server.power.PowerManagerService$BinderService: void <init>(com.android.server.power.PowerManagerService)>(r0);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$BinderService mBinderService> = $r12;

        $r13 = new com.android.server.power.PowerManagerService$LocalService;

        specialinvoke $r13.<com.android.server.power.PowerManagerService$LocalService: void <init>(com.android.server.power.PowerManagerService)>(r0);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$LocalService mLocalService> = $r13;

        $r14 = virtualinvoke r74.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.PowerManagerService$NativeWrapper createNativeWrapper()>();

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper> = $r14;

        $r15 = virtualinvoke r74.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.SystemPropertiesWrapper createSystemPropertiesWrapper()>();

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SystemPropertiesWrapper mSystemProperties> = $r15;

        $r16 = virtualinvoke r74.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.PowerManagerService$Clock createClock()>();

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock> = $r16;

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector> = r74;

        $r17 = new com.android.server.ServiceThread;

        specialinvoke $r17.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("PowerManagerService", -4, 0);

        r0.<com.android.server.power.PowerManagerService: com.android.server.ServiceThread mHandlerThread> = $r17;

        virtualinvoke $r17.<com.android.server.ServiceThread: void start()>();

        $r18 = r0.<com.android.server.power.PowerManagerService: com.android.server.ServiceThread mHandlerThread>;

        $r19 = virtualinvoke $r18.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        $r20 = new com.android.server.power.PowerManagerService$PowerManagerHandlerCallback;

        specialinvoke $r20.<com.android.server.power.PowerManagerService$PowerManagerHandlerCallback: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r21 = virtualinvoke r74.<com.android.server.power.PowerManagerService$Injector: android.os.Handler createHandler(android.os.Looper,android.os.Handler$Callback)>($r19, $r20);

        r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler> = $r21;

        $r22 = new com.android.server.power.PowerManagerService$Constants;

        $r23 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        specialinvoke $r22.<com.android.server.power.PowerManagerService$Constants: void <init>(com.android.server.power.PowerManagerService,android.os.Handler)>(r0, $r23);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Constants mConstants> = $r22;

        $r24 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r25 = virtualinvoke $r24.<com.android.server.power.PowerManagerService$Injector: android.hardware.display.AmbientDisplayConfiguration createAmbientDisplayConfiguration(android.content.Context)>(r73);

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.AmbientDisplayConfiguration mAmbientDisplayConfiguration> = $r25;

        $r26 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r27 = virtualinvoke $r26.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.AmbientDisplaySuppressionController createAmbientDisplaySuppressionController(android.content.Context)>(r73);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.AmbientDisplaySuppressionController mAmbientDisplaySuppressionController> = $r27;

        $r28 = new com.android.server.power.AttentionDetector;

        $r29 = new com.android.server.power._$$Lambda$PowerManagerService$FUW_os_Z9SregUE_DR9vDwaRuXo;

        specialinvoke $r29.<com.android.server.power._$$Lambda$PowerManagerService$FUW_os_Z9SregUE_DR9vDwaRuXo: void <init>(com.android.server.power.PowerManagerService)>(r0);

        $r30 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        specialinvoke $r28.<com.android.server.power.AttentionDetector: void <init>(java.lang.Runnable,java.lang.Object)>($r29, $r30);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.AttentionDetector mAttentionDetector> = $r28;

        $r31 = new com.android.server.power.batterysaver.BatterySavingStats;

        $r32 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        specialinvoke $r31.<com.android.server.power.batterysaver.BatterySavingStats: void <init>(java.lang.Object)>($r32);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySavingStats mBatterySavingStats> = $r31;

        $r35 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r34 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        $r33 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r76 = virtualinvoke $r35.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.batterysaver.BatterySaverPolicy createBatterySaverPolicy(java.lang.Object,android.content.Context,com.android.server.power.batterysaver.BatterySavingStats)>($r34, $r33, $r31);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverPolicy mBatterySaverPolicy> = r76;

        $r39 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r38 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        $r37 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r36 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySavingStats mBatterySavingStats>;

        r77 = virtualinvoke $r39.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.batterysaver.BatterySaverController createBatterySaverController(java.lang.Object,android.content.Context,com.android.server.power.batterysaver.BatterySaverPolicy,com.android.server.power.batterysaver.BatterySavingStats)>($r38, $r37, r76, $r36);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverController mBatterySaverController> = r77;

        $r42 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r41 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        $r40 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r43 = virtualinvoke $r42.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.batterysaver.BatterySaverStateMachine createBatterySaverStateMachine(java.lang.Object,android.content.Context,com.android.server.power.batterysaver.BatterySaverController)>($r41, $r40, r77);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine> = $r43;

        $r44 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r45 = virtualinvoke $r44.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.InattentiveSleepWarningController createInattentiveSleepWarningController()>();

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.InattentiveSleepWarningController mInattentiveSleepWarningOverlayController> = $r45;

        $r46 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r47 = virtualinvoke $r46.<android.content.Context: android.content.res.Resources getResources()>();

        f4 = virtualinvoke $r47.<android.content.res.Resources: float getFloat(int)>(17105085);

        $r48 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r49 = virtualinvoke $r48.<android.content.Context: android.content.res.Resources getResources()>();

        f5 = virtualinvoke $r49.<android.content.res.Resources: float getFloat(int)>(17105084);

        $r50 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r51 = virtualinvoke $r50.<android.content.Context: android.content.res.Resources getResources()>();

        f0 = virtualinvoke $r51.<android.content.res.Resources: float getFloat(int)>(17105080);

        $r52 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r53 = virtualinvoke $r52.<android.content.Context: android.content.res.Resources getResources()>();

        f6 = virtualinvoke $r53.<android.content.res.Resources: float getFloat(int)>(17105079);

        $r54 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r55 = virtualinvoke $r54.<android.content.Context: android.content.res.Resources getResources()>();

        f1 = virtualinvoke $r55.<android.content.res.Resources: float getFloat(int)>(17105078);

        $b0 = f4 cmpl -2.0F;

        if $b0 == 0 goto label02;

        $b7 = f5 cmpl -2.0F;

        if $b7 == 0 goto label02;

        $b8 = f0 cmpl -2.0F;

        if $b8 != 0 goto label01;

        goto label02;

     label01:
        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMinimum> = f4;

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMaximum> = f5;

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDefault> = f0;

        goto label03;

     label02:
        $r78 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r79 = virtualinvoke $r78.<android.content.Context: android.content.res.Resources getResources()>();

        $i9 = virtualinvoke $r79.<android.content.res.Resources: int getInteger(int)>(17694892);

        $f7 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i9, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMinimum> = $f7;

        $r80 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r81 = virtualinvoke $r80.<android.content.Context: android.content.res.Resources getResources()>();

        $i10 = virtualinvoke $r81.<android.content.res.Resources: int getInteger(int)>(17694891);

        $f8 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i10, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMaximum> = $f8;

        $r82 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r83 = virtualinvoke $r82.<android.content.Context: android.content.res.Resources getResources()>();

        $i11 = virtualinvoke $r83.<android.content.res.Resources: int getInteger(int)>(17694890);

        $f9 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i11, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDefault> = $f9;

     label03:
        $b12 = f6 cmpl -2.0F;

        if $b12 != 0 goto label04;

        $r70 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r71 = virtualinvoke $r70.<android.content.Context: android.content.res.Resources getResources()>();

        $i6 = virtualinvoke $r71.<android.content.res.Resources: int getInteger(int)>(17694886);

        $f3 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i6, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDoze> = $f3;

        goto label05;

     label04:
        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDoze> = f6;

     label05:
        $b1 = f1 cmpl -2.0F;

        if $b1 != 0 goto label06;

        $r68 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r69 = virtualinvoke $r68.<android.content.Context: android.content.res.Resources getResources()>();

        $i5 = virtualinvoke $r69.<android.content.res.Resources: int getInteger(int)>(17694885);

        $f2 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i5, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDim> = $f2;

        goto label07;

     label06:
        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDim> = f1;

     label07:
        $r56 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r57 = virtualinvoke $r56.<android.content.Context: android.content.res.Resources getResources()>();

        f10 = virtualinvoke $r57.<android.content.res.Resources: float getFloat(int)>(17105083);

        $r58 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r59 = virtualinvoke $r58.<android.content.Context: android.content.res.Resources getResources()>();

        f11 = virtualinvoke $r59.<android.content.res.Resources: float getFloat(int)>(17105082);

        $r60 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r61 = virtualinvoke $r60.<android.content.Context: android.content.res.Resources getResources()>();

        f12 = virtualinvoke $r61.<android.content.res.Resources: float getFloat(int)>(17105081);

        $b2 = f10 cmpl -2.0F;

        if $b2 == 0 goto label09;

        $b3 = f11 cmpl -2.0F;

        if $b3 == 0 goto label09;

        $b4 = f12 cmpl -2.0F;

        if $b4 != 0 goto label08;

        goto label09;

     label08:
        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMinimumVr> = f10;

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMaximumVr> = f11;

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDefaultVr> = f12;

        goto label10;

     label09:
        $r84 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r85 = virtualinvoke $r84.<android.content.Context: android.content.res.Resources getResources()>();

        $i13 = virtualinvoke $r85.<android.content.res.Resources: int getInteger(int)>(17694889);

        $f13 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i13, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMinimumVr> = $f13;

        $r86 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r87 = virtualinvoke $r86.<android.content.Context: android.content.res.Resources getResources()>();

        $i14 = virtualinvoke $r87.<android.content.res.Resources: int getInteger(int)>(17694888);

        $f14 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i14, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessMaximumVr> = $f14;

        $r88 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r89 = virtualinvoke $r88.<android.content.Context: android.content.res.Resources getResources()>();

        $i15 = virtualinvoke $r89.<android.content.res.Resources: int getInteger(int)>(17694887);

        $f15 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(int,int,int,float,float)>($i15, 1, 255, 0.0F, 1.0F);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessDefaultVr> = $f15;

     label10:
        r90 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r90;

     label11:
        $r91 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r92 = virtualinvoke $r91.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.SuspendBlocker createSuspendBlocker(com.android.server.power.PowerManagerService,java.lang.String)>(r0, "PowerManagerService.WakeLocks");

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker> = $r92;

        $r93 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        r94 = virtualinvoke $r93.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.SuspendBlocker createSuspendBlocker(com.android.server.power.PowerManagerService,java.lang.String)>(r0, "PowerManagerService.Display");

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker> = r94;

     label12:
        if r94 == null goto label14;

     label13:
        interfaceinvoke r94.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 1;

     label14:
        r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled> = 0;

        r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled> = 1;

        r0.<com.android.server.power.PowerManagerService: int mWakefulnessRaw> = 1;

        $r62 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SystemPropertiesWrapper mSystemProperties>;

        $r63 = interfaceinvoke $r62.<com.android.server.power.SystemPropertiesWrapper: java.lang.String get(java.lang.String,java.lang.String)>("ro.boot.quiescent", "0");

        $z0 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 != 0 goto label17;

        $r64 = staticinvoke <android.sysprop.InitProperties: java.util.Optional userspace_reboot_in_progress()>();

        $r65 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r66 = virtualinvoke $r64.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r65);

        $r67 = (java.lang.Boolean) $r66;

        $z1 = virtualinvoke $r67.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label16;

     label15:
        goto label17;

     label16:
        z2 = 0;

        goto label18;

     label17:
        z2 = 1;

     label18:
        <com.android.server.power.PowerManagerService: boolean sQuiescent> = z2;

        $r95 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r95.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeInit(com.android.server.power.PowerManagerService)>(r0);

        $r96 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r96.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetAutoSuspend(boolean)>(0);

        $r97 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r97.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetInteractive(boolean)>(1);

        $r98 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r98.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetFeature(int,int)>(1, 0);

        $r99 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        virtualinvoke $r99.<com.android.server.power.PowerManagerService$Injector: void invalidateIsInteractiveCaches()>();

        exitmonitor r90;

     label19:
        return;

     label20:
        $r72 := @caughtexception;

     label21:
        exitmonitor r90;

     label22:
        throw $r72;

        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    static java.lang.Object access$000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static void access$1000(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSendPowerHint(int,int)>(i0, i1);

        return;
    }

    static int access$102(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        r0.<com.android.server.power.PowerManagerService: int mUserId> = i0;

        return i0;
    }

    static void access$1100(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetPowerBoost(int,int)>(i0, i1);

        return;
    }

    static boolean access$1200(int, boolean)
    {
        int i0;
        boolean z0, $z1;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <com.android.server.power.PowerManagerService: boolean nativeSetPowerMode(int,boolean)>(i0, z0);

        return $z1;
    }

    static void access$1300(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetFeature(int,int)>(i0, i1);

        return;
    }

    static boolean access$1400()
    {
        boolean $z0;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean nativeForceSuspend()>();

        return $z0;
    }

    static java.util.ArrayList access$1500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        return $r1;
    }

    static com.android.server.power.PowerManagerService$Clock access$200(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$Clock $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        return $r1;
    }

    static int access$2076(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, i1, i2;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i1 := @parameter1: int;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        i2 = $i0 | i1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = i2;

        return i2;
    }

    static void access$2100(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    static boolean access$2202(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive> = z0;

        return z0;
    }

    static boolean access$2300(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        return $z0;
    }

    static boolean access$2400(com.android.server.power.PowerManagerService, int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean z0, $z1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setPowerModeInternal(int,boolean)>(i0, z0);

        return $z1;
    }

    static boolean access$2500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        return $z0;
    }

    static void access$2600(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalInteractiveModeLocked(boolean)>(z0);

        return;
    }

    static boolean access$2700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        return $z0;
    }

    static void access$2800(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalAutoSuspendModeLocked(boolean)>(z0);

        return;
    }

    static com.android.server.power.SuspendBlocker access$2900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.SuspendBlocker $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        return $r1;
    }

    static void access$3000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()>();

        return;
    }

    static int access$302(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        r0.<com.android.server.power.PowerManagerService: int mForegroundProfile> = i0;

        return i0;
    }

    static void access$3100(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()>();

        return;
    }

    static void access$3200(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()>();

        return;
    }

    static int access$3300(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        return $i0;
    }

    static int access$3302(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        r0.<com.android.server.power.PowerManagerService: int mDockState> = i0;

        return i0;
    }

    static void access$3400(com.android.server.power.PowerManagerService, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void powerHintInternal(int,int)>(i0, i1);

        return;
    }

    static boolean access$3500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled>;

        return $z0;
    }

    static void access$3600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()>();

        return;
    }

    static void access$3700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleSandman()>();

        return;
    }

    static void access$3800(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleScreenBrightnessBoostTimeout()>();

        return;
    }

    static void access$3900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleAttentiveTimeout()>();

        return;
    }

    static void access$400(com.android.server.power.PowerManagerService, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void maybeUpdateForegroundProfileLastActivityLocked(long)>(l0);

        return;
    }

    static android.os.WorkSource access$4000(android.os.WorkSource)
    {
        android.os.WorkSource r0, $r1;

        r0 := @parameter0: android.os.WorkSource;

        $r1 = staticinvoke <com.android.server.power.PowerManagerService: android.os.WorkSource copyWorkSource(android.os.WorkSource)>(r0);

        return $r1;
    }

    static void access$4100(com.android.server.power.PowerManagerService, com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: com.android.server.power.PowerManagerService$WakeLock;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        return;
    }

    static com.android.server.power.PowerManagerService$NativeWrapper access$4200(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$NativeWrapper $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        return $r1;
    }

    static boolean access$4300(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        return $z0;
    }

    static android.content.Context access$4400(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$4500(com.android.server.power.PowerManagerService, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setPowerBoostInternal(int,int)>(i0, i1);

        return;
    }

    static void access$4600(com.android.server.power.PowerManagerService, android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, java.lang.String, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2;
        java.lang.String r2, r3, r5;
        android.os.WorkSource r4;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.WorkSource;

        r5 := @parameter6: java.lang.String;

        i1 := @parameter7: int;

        i2 := @parameter8: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>(r1, i0, r2, r3, r4, r5, i1, i2);

        return;
    }

    static void access$4700(com.android.server.power.PowerManagerService, android.os.IBinder, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)>(r1, i0);

        return;
    }

    static void access$4800(com.android.server.power.PowerManagerService, android.os.IBinder, android.os.WorkSource, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        android.os.WorkSource r2;
        java.lang.String r3;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.os.WorkSource;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockWorkSourceInternal(android.os.IBinder,android.os.WorkSource,java.lang.String,int)>(r1, r2, r3, i0);

        return;
    }

    static boolean access$4900(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isWakeLockLevelSupportedInternal(int)>(i0);

        return $z0;
    }

    static void access$500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void nativeInit()>();

        return;
    }

    static long access$5000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $l0 = r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission>;

        return $l0;
    }

    static long access$5002(com.android.server.power.PowerManagerService, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission> = l0;

        return l0;
    }

    static void access$5100(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)>(l0, i1, i2, i3);

        return;
    }

    static void access$5200(com.android.server.power.PowerManagerService, long, int, java.lang.String, int, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        r2 := @parameter5: java.lang.String;

        i3 := @parameter6: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void wakeUpInternal(long,int,java.lang.String,int,java.lang.String,int)>(l0, i1, r1, i2, r2, i3);

        return;
    }

    static void access$5300(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int,int,int)>(l0, i1, i2, i3);

        return;
    }

    static void access$5400(com.android.server.power.PowerManagerService, long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void napInternal(long,int)>(l0, i1);

        return;
    }

    static boolean access$5500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isInteractiveInternal()>();

        return $z0;
    }

    static com.android.server.power.batterysaver.BatterySaverController access$5600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.batterysaver.BatterySaverController $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverController mBatterySaverController>;

        return $r1;
    }

    static com.android.server.power.batterysaver.BatterySaverPolicy access$5700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.batterysaver.BatterySaverPolicy $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverPolicy mBatterySaverPolicy>;

        return $r1;
    }

    static boolean access$5800(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setLowPowerModeInternal(boolean)>(z0);

        return $z1;
    }

    static com.android.server.power.batterysaver.BatterySaverStateMachine access$5900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine>;

        return $r1;
    }

    static void access$600(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeAcquireSuspendBlocker(java.lang.String)>(r0);

        return;
    }

    static int access$6000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $i0 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getLastSleepReasonInternal()>();

        return $i0;
    }

    static void access$6100(com.android.server.power.PowerManagerService, int, boolean, java.lang.String, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean z0, z1;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void shutdownOrRebootInternal(int,boolean,java.lang.String,boolean)>(i0, z0, r1, z1);

        return;
    }

    static void access$6200(com.android.server.power.PowerManagerService, java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void crashInternal(java.lang.String)>(r1);

        return;
    }

    static void access$6300(com.android.server.power.PowerManagerService, boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setAttentionLightInternal(boolean,int)>(z0, i0);

        return;
    }

    static void access$6400(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setDozeAfterScreenOffInternal(boolean)>(z0);

        return;
    }

    static android.hardware.display.AmbientDisplayConfiguration access$6500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        android.hardware.display.AmbientDisplayConfiguration $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.AmbientDisplayConfiguration mAmbientDisplayConfiguration>;

        return $r1;
    }

    static com.android.server.power.AmbientDisplaySuppressionController access$6600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.AmbientDisplaySuppressionController $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AmbientDisplaySuppressionController mAmbientDisplaySuppressionController>;

        return $r1;
    }

    static void access$6700(com.android.server.power.PowerManagerService, long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void boostScreenBrightnessInternal(long,int)>(l0, i1);

        return;
    }

    static boolean access$6800(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isScreenBrightnessBoostedInternal()>();

        return $z0;
    }

    static boolean access$6900(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean forceSuspendInternal(int)>(i0);

        return $z0;
    }

    static void access$700(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeReleaseSuspendBlocker(java.lang.String)>(r0);

        return;
    }

    static void access$7000(com.android.server.power.PowerManagerService, java.io.FileDescriptor)
    {
        com.android.server.power.PowerManagerService r0;
        java.io.FileDescriptor r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: java.io.FileDescriptor;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void dumpProto(java.io.FileDescriptor)>(r1);

        return;
    }

    static void access$7100(com.android.server.power.PowerManagerService, java.io.PrintWriter)
    {
        com.android.server.power.PowerManagerService r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void dumpInternal(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$7200(com.android.server.power.PowerManagerService, float)
    {
        com.android.server.power.PowerManagerService r0;
        float f0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        f0 := @parameter1: float;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(float)>(f0);

        return;
    }

    static void access$7300(com.android.server.power.PowerManagerService, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setDozeOverrideFromDreamManagerInternal(int,int)>(i0, i1);

        return;
    }

    static void access$7400(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setUserInactiveOverrideFromWindowManagerInternal()>();

        return;
    }

    static void access$7500(com.android.server.power.PowerManagerService, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)>(l0);

        return;
    }

    static void access$7600(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setDrawWakeLockOverrideFromSidekickInternal(boolean)>(z0);

        return;
    }

    static android.os.PowerManager$WakeData access$7700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.PowerManager$WakeData $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = specialinvoke r0.<com.android.server.power.PowerManagerService: android.os.PowerManager$WakeData getLastWakeupInternal()>();

        return $r1;
    }

    static void access$800(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetInteractive(boolean)>(z0);

        return;
    }

    static void access$900(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetAutoSuspend(boolean)>(z0);

        return;
    }

    private void acquireWakeLockInternal(android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, java.lang.String, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.WorkSource r1;
        java.lang.String r2, r16, r17;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7;
        java.lang.Object r3, $r5, $r10, r21, r22;
        android.util.SparseArray $r4, $r8;
        com.android.server.power.PowerManagerService$WakeLock $r6, r18, r19;
        java.util.ArrayList $r7, $r9;
        boolean $z2, z3;
        java.lang.Throwable $r11, $r12, $r14, r25;
        android.os.RemoteException $r13;
        android.os.IBinder r15;
        com.android.server.power.PowerManagerService$UidState r20;
        java.lang.IllegalArgumentException r24;

        r0 := @this: com.android.server.power.PowerManagerService;

        r15 := @parameter0: android.os.IBinder;

        i5 := @parameter1: int;

        r16 := @parameter2: java.lang.String;

        r17 := @parameter3: java.lang.String;

        r1 := @parameter4: android.os.WorkSource;

        r2 := @parameter5: java.lang.String;

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        i2 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r15);

     label02:
        if i2 < 0 goto label06;

     label03:
        $r9 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r18 = (com.android.server.power.PowerManagerService$WakeLock) $r10;

        $z2 = virtualinvoke r18.<com.android.server.power.PowerManagerService$WakeLock: boolean hasSameProperties(int,java.lang.String,android.os.WorkSource,int,int)>(i5, r16, r1, i0, i1);

        if $z2 != 0 goto label05;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockChangingLocked(com.android.server.power.PowerManagerService$WakeLock,int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>(r18, i5, r16, r17, i0, i1, r1, r2);

        virtualinvoke r18.<com.android.server.power.PowerManagerService$WakeLock: void updateProperties(int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>(i5, r16, r17, r1, r2, i0, i1);

     label04:
        goto label05;

     label05:
        z3 = 0;

        r19 = r18;

        goto label20;

     label06:
        $r4 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r20 = (com.android.server.power.PowerManagerService$UidState) $r5;

     label07:
        if r20 != null goto label10;

     label08:
        r20 = new com.android.server.power.PowerManagerService$UidState;

        specialinvoke r20.<com.android.server.power.PowerManagerService$UidState: void <init>(int)>(i0);

        r20.<com.android.server.power.PowerManagerService$UidState: int mProcState> = 20;

        $r8 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r20);

     label09:
        goto label10;

     label10:
        $i3 = r20.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        $i4 = $i3 + 1;

        r20.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks> = $i4;

     label11:
        r21 = r3;

     label12:
        $r6 = new com.android.server.power.PowerManagerService$WakeLock;

        specialinvoke $r6.<com.android.server.power.PowerManagerService$WakeLock: void <init>(com.android.server.power.PowerManagerService,android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int,com.android.server.power.PowerManagerService$UidState)>(r0, r15, i5, r16, r17, r1, r2, i0, i1, r20);

        r19 = $r6;

     label13:
        r22 = r3;

     label14:
        interfaceinvoke r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0);

     label15:
        r22 = r3;

     label16:
        $r7 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label17:
        r22 = r3;

     label18:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setWakeLockDisabledStateLocked(com.android.server.power.PowerManagerService$WakeLock)>($r6);

     label19:
        z3 = 1;

     label20:
        r22 = r3;

     label21:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock,int)>(r19, i0);

     label22:
        r22 = r3;

     label23:
        $i6 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i7 = $i6 | 1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i7;

     label24:
        r22 = r3;

     label25:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label26:
        if z3 == 0 goto label28;

        r22 = r3;

     label27:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)>(r19);

     label28:
        r22 = r3;

     label29:
        exitmonitor r3;

     label30:
        return;

     label31:
        $r13 := @caughtexception;

        r22 = r3;

     label32:
        r24 = new java.lang.IllegalArgumentException;

     label33:
        r22 = r3;

     label34:
        specialinvoke r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wake lock is already dead.");

     label35:
        r22 = r3;

     label36:
        throw r24;

     label37:
        $r11 := @caughtexception;

        r25 = $r11;

        goto label39;

     label38:
        $r12 := @caughtexception;

        r25 = $r12;

        r21 = r3;

     label39:
        r22 = r21;

     label40:
        exitmonitor r21;

     label41:
        throw r25;

     label42:
        $r14 := @caughtexception;

        r25 = $r14;

        r21 = r22;

        goto label39;

        catch java.lang.Throwable from label01 to label02 with label38;
        catch java.lang.Throwable from label03 to label04 with label38;
        catch java.lang.Throwable from label06 to label07 with label38;
        catch java.lang.Throwable from label08 to label09 with label38;
        catch java.lang.Throwable from label10 to label11 with label38;
        catch java.lang.Throwable from label12 to label13 with label37;
        catch android.os.RemoteException from label14 to label15 with label31;
        catch java.lang.Throwable from label14 to label15 with label42;
        catch java.lang.Throwable from label16 to label17 with label42;
        catch java.lang.Throwable from label18 to label19 with label42;
        catch java.lang.Throwable from label21 to label22 with label42;
        catch java.lang.Throwable from label23 to label24 with label42;
        catch java.lang.Throwable from label25 to label26 with label42;
        catch java.lang.Throwable from label27 to label28 with label42;
        catch java.lang.Throwable from label29 to label30 with label42;
        catch java.lang.Throwable from label32 to label33 with label42;
        catch java.lang.Throwable from label34 to label35 with label42;
        catch java.lang.Throwable from label36 to label37 with label42;
        catch java.lang.Throwable from label40 to label41 with label42;
    }

    private int adjustWakeLockSummaryLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, $i11, i12, $i13;

        r0 := @this: com.android.server.power.PowerManagerService;

        i6 := @parameter0: int;

        i7 = i6;

        $i0 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i0 == 3 goto label1;

        i7 = i6 & -193;

     label1:
        $i1 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i1 == 0 goto label2;

        i8 = i7;

        $i5 = i7 & 64;

        if $i5 == 0 goto label3;

     label2:
        i9 = i7 & -15;

        i8 = i9;

        $i2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i2 != 0 goto label3;

        i8 = i9 & -17;

     label3:
        i10 = i8;

        $i11 = i8 & 6;

        if $i11 == 0 goto label5;

        $i3 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i3 != 1 goto label4;

        i10 = i8 | 33;

        goto label5;

     label4:
        i10 = i8;

        $i4 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i4 != 2 goto label5;

        i10 = i8 | 1;

     label5:
        i12 = i10;

        $i13 = i10 & 128;

        if $i13 == 0 goto label6;

        i12 = i10 | 1;

     label6:
        return i12;
    }

    private void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock, int)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        android.os.WorkSource r2, $r4, $r5;
        android.os.WorkSource$WorkChain r3;
        int $i0, $i1, i2, i3;
        boolean $z0, $z2;
        java.lang.String $r6, r7, $r9;
        com.android.server.power.PowerManagerService$Clock $r8;
        long $l4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i2 := @parameter1: int;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label7;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label7;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        if $r4 == null goto label5;

        $r5 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $z2 = virtualinvoke $r5.<android.os.WorkSource: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        r3 = staticinvoke <com.android.server.power.PowerManagerService: android.os.WorkSource$WorkChain getFirstNonEmptyWorkChain(android.os.WorkSource)>(r2);

        if r3 == null goto label1;

        r7 = virtualinvoke r3.<android.os.WorkSource$WorkChain: java.lang.String getAttributionTag()>();

        i3 = virtualinvoke r3.<android.os.WorkSource$WorkChain: int getAttributionUid()>();

        goto label4;

     label1:
        $r6 = virtualinvoke r2.<android.os.WorkSource: java.lang.String getPackageName(int)>(0);

        if $r6 == null goto label2;

        r7 = virtualinvoke r2.<android.os.WorkSource: java.lang.String getPackageName(int)>(0);

        goto label3;

     label2:
        r7 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

     label3:
        i3 = virtualinvoke r2.<android.os.WorkSource: int getUid(int)>(0);

     label4:
        goto label6;

     label5:
        r7 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

     label6:
        $r8 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l4 = interfaceinvoke $r8.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $r9 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int,java.lang.String,int,java.lang.String,int)>($l4, 2, $r9, i3, r7, i3);

     label7:
        return;
    }

    private void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int $i0, $i1, $i3;
        boolean $z0;
        com.android.server.power.PowerManagerService$Clock $r2;
        long $l2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l2 = interfaceinvoke $r2.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>($l2, 0, 1, $i3);

     label1:
        return;
    }

    private void boostScreenBrightnessInternal(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l3;
        int i1, $i2, $i6, $i7;
        java.lang.Object r1;
        boolean $z0;
        byte $b4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        java.lang.StringBuilder r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label5;

        $i2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i2 == 0 goto label5;

        $l3 = r0.<com.android.server.power.PowerManagerService: long mLastScreenBrightnessBoostTime>;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label3;

     label2:
        goto label5;

     label3:
        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Brightness boost activated (uid ");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r5);

        r0.<com.android.server.power.PowerManagerService: long mLastScreenBrightnessBoostTime> = l0;

        r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress> = 1;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i7 = $i6 | 2048;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i7;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, 0, 0, i1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private boolean canDozeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i0 != 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean canDreamLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1, $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i0 != 2 goto label5;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        if $z0 == 0 goto label5;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        if $z1 == 0 goto label5;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean isBrightOrDim()>();

        if $z2 == 0 goto label5;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z3 = virtualinvoke $r2.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean isVr()>();

        if $z3 != 0 goto label5;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i2 = $i1 & 7;

        if $i2 == 0 goto label5;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z4 != 0 goto label1;

        goto label5;

     label1:
        $z5 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z5 != 0 goto label4;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z6 != 0 goto label2;

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig>;

        if $z8 != 0 goto label2;

        return 0;

     label2:
        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z7 != 0 goto label3;

        i5 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig>;

        if i5 < 0 goto label3;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        if $i4 >= i5 goto label3;

        return 0;

     label3:
        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z9 == 0 goto label4;

        i6 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig>;

        if i6 < 0 goto label4;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        if $i3 >= i6 goto label4;

        return 0;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static android.os.WorkSource copyWorkSource(android.os.WorkSource)
    {
        android.os.WorkSource $r0, r1, r2;

        r1 := @parameter0: android.os.WorkSource;

        if r1 == null goto label1;

        $r0 = new android.os.WorkSource;

        specialinvoke $r0.<android.os.WorkSource: void <init>(android.os.WorkSource)>(r1);

        r2 = $r0;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    private void crashInternal(java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$3 $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r3 := @parameter0: java.lang.String;

        $r1 = new com.android.server.power.PowerManagerService$3;

        specialinvoke $r1.<com.android.server.power.PowerManagerService$3: void <init>(com.android.server.power.PowerManagerService,java.lang.String,java.lang.String)>(r0, "PowerManagerService.crash()", r3);

     label1:
        virtualinvoke $r1.<java.lang.Thread: void start()>();

        virtualinvoke $r1.<java.lang.Thread: void join()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("PowerManagerService", $r2);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, l2, l3, $l12, $l14, $l15, $l16, $l18, $l19, $l20, $l22, $l23, $l25, $l26, $l28, $l29, $l30, $l31, $l35, $l36, $l38, $l39, $l40, $l41, $l42, $l45, $l53, $l55;
        int i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i24, $i27, $i32, $i33, $i34, $i37, $i43, $i44, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i54, $i56, $i57, $i58, i59, $i60, i61;
        com.android.server.power.PowerManagerService$Constants $r1;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r47, $r49, $r54, $r56, $r59, $r62, $r65, $r68, $r71, $r74, $r77, $r79, $r82, $r84, $r86, $r88, $r90, $r92, $r94, $r96, $r98, $r100, $r102, $r104, $r106, $r108, $r110, $r112, $r115, $r118, $r121, $r124, $r127, $r130, $r133, $r136, $r139, $r142, $r145, $r148, $r151, $r154, $r157, $r160, $r163, $r166, $r169, $r172, $r175, $r178, $r181, $r184, $r187, $r190, $r193, $r196, $r199, $r202, $r208, $r211, $r214, $r217, $r220, $r223, $r226, $r229, $r232, $r235, $r238, $r241, $r244, $r247, $r250, $r253, $r257, $r261, $r265, $r269, $r274, $r279, $r284, $r291, $r298, $r302;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43;
        byte $b13, $b17, $b21;
        com.android.server.power.PowerManagerService$Clock $r50, $r51, $r52;
        int[] $r76, $r81;
        float $f0, $f1, $f2, $f3, $f4;
        android.os.Handler $r270;
        java.util.ArrayList $r272, $r275, $r277, $r280;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r282;
        com.android.server.power.batterysaver.BatterySaverPolicy $r285;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r286;
        com.android.server.power.AttentionDetector $r287;
        android.util.SparseArray $r288, $r293, $r303, $r305, $r390;
        com.android.server.power.AmbientDisplaySuppressionController $r292;
        java.lang.Object $r294, $r295, $r299, $r304, r308;
        java.lang.Throwable $r306;
        java.io.PrintWriter r307;
        java.lang.StringBuilder r309, r310, r311, r312, r313, r314, r315, r316, r317, r318, r319, r320, r321, r322, r323, r324, r325, r326, r327, r328, r329, r330, r331, r332, r333, r334, r335, r336, r337, r338, r339, r340, r341, r342, r343, r344, r345, r346, r347, r348, r349, r350, r351, r352, r353, r354, r355, r356, r357, r358, r359, r360, r361, r362, r363, r364, r365, r366, r367, r368, r369, r370, r371, r372, r373, r374, r375, r376, r377, r378, r379, r380, r381, r382, r383, r384, r385, r386, r387, r388, r389, r394, r397, r398, r401, r402, r403;
        com.android.server.power.PowerManagerService$UidState r391;
        android.os.Looper r392;
        android.util.PrintWriterPrinter r393;
        java.util.Iterator r395, r399;
        com.android.server.power.PowerManagerService$WakeLock r396;
        com.android.server.power.SuspendBlocker r400;
        com.android.server.power.PowerManagerService$ProfilePowerState r404;
        com.android.server.power.WirelessChargerDetector r405;
        com.android.server.power.Notifier r406;

        r0 := @this: com.android.server.power.PowerManagerService;

        r307 := @parameter0: java.io.PrintWriter;

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>("POWER MANAGER (dumpsys power)\n");

        r308 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r308;

     label01:
        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>("Power Manager State:");

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Constants mConstants>;

        virtualinvoke $r1.<com.android.server.power.PowerManagerService$Constants: void dump(java.io.PrintWriter)>(r307);

        r309 = new java.lang.StringBuilder;

        specialinvoke r309.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r309.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDirty=0x");

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke r309.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r309.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        r310 = new java.lang.StringBuilder;

        specialinvoke r310.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r310.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakefulness=");

        $i6 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        $r7 = staticinvoke <android.os.PowerManagerInternal: java.lang.String wakefulnessToString(int)>($i6);

        virtualinvoke r310.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r310.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        r311 = new java.lang.StringBuilder;

        specialinvoke r311.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r311.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakefulnessChanging=");

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mWakefulnessChanging>;

        virtualinvoke r311.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke r311.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        r312 = new java.lang.StringBuilder;

        specialinvoke r312.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r312.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIsPowered=");

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        virtualinvoke r312.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r15 = virtualinvoke r312.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        r313 = new java.lang.StringBuilder;

        specialinvoke r313.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r313.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPlugType=");

        $i7 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        virtualinvoke r313.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r18 = virtualinvoke r313.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        r314 = new java.lang.StringBuilder;

        specialinvoke r314.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r314.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevel=");

        $i8 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        virtualinvoke r314.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r21 = virtualinvoke r314.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        r315 = new java.lang.StringBuilder;

        specialinvoke r315.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r315.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevelWhenDreamStarted=");

        $i9 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        virtualinvoke r315.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r24 = virtualinvoke r315.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        r316 = new java.lang.StringBuilder;

        specialinvoke r316.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r316.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDockState=");

        $i10 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        virtualinvoke r316.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r27 = virtualinvoke r316.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        r317 = new java.lang.StringBuilder;

        specialinvoke r317.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r317.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStayOn=");

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        virtualinvoke r317.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r30 = virtualinvoke r317.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        r318 = new java.lang.StringBuilder;

        specialinvoke r318.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r318.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityPositive=");

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        virtualinvoke r318.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r33 = virtualinvoke r318.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        r319 = new java.lang.StringBuilder;

        specialinvoke r319.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r319.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBootCompleted=");

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        virtualinvoke r319.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r36 = virtualinvoke r319.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        r320 = new java.lang.StringBuilder;

        specialinvoke r320.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r320.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSystemReady=");

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        virtualinvoke r320.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r39 = virtualinvoke r320.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r39);

        r321 = new java.lang.StringBuilder;

        specialinvoke r321.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r321.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHalAutoSuspendModeEnabled=");

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled>;

        virtualinvoke r321.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r42 = virtualinvoke r321.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        r322 = new java.lang.StringBuilder;

        specialinvoke r322.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r322.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHalInteractiveModeEnabled=");

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled>;

        virtualinvoke r322.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r45 = virtualinvoke r322.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r45);

        r323 = new java.lang.StringBuilder;

        specialinvoke r323.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r323.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeLockSummary=0x");

        $i11 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $r47 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i11);

        virtualinvoke r323.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke r323.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r49);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("  mNotifyLongScheduled=");

        $l12 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongScheduled>;

        $b13 = $l12 cmp 0L;

        if $b13 != 0 goto label03;

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("(none)");

     label02:
        goto label04;

     label03:
        $l14 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongScheduled>;

        $r50 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l15 = interfaceinvoke $r50.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l14, $l15, r307);

     label04:
        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("  mNotifyLongDispatched=");

        $l16 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongDispatched>;

        $b17 = $l16 cmp 0L;

        if $b17 != 0 goto label06;

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("(none)");

     label05:
        goto label07;

     label06:
        $l18 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongDispatched>;

        $r51 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l19 = interfaceinvoke $r51.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l18, $l19, r307);

     label07:
        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("  mNotifyLongNextCheck=");

        $l20 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongNextCheck>;

        $b21 = $l20 cmp 0L;

        if $b21 != 0 goto label09;

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("(none)");

     label08:
        goto label10;

     label09:
        $l22 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongNextCheck>;

        $r52 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l23 = interfaceinvoke $r52.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l22, $l23, r307);

     label10:
        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        r324 = new java.lang.StringBuilder;

        specialinvoke r324.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r324.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserActivitySummary=0x");

        $i24 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $r54 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i24);

        virtualinvoke r324.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke r324.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        r325 = new java.lang.StringBuilder;

        specialinvoke r325.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRequestWaitForNegativeProximity=");

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        virtualinvoke r325.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r59 = virtualinvoke r325.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        r326 = new java.lang.StringBuilder;

        specialinvoke r326.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r326.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSandmanScheduled=");

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        virtualinvoke r326.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r62 = virtualinvoke r326.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r62);

        r327 = new java.lang.StringBuilder;

        specialinvoke r327.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r327.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSandmanSummoned=");

        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

        virtualinvoke r327.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r65 = virtualinvoke r327.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r65);

        r328 = new java.lang.StringBuilder;

        specialinvoke r328.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r328.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevelLow=");

        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        virtualinvoke r328.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r68 = virtualinvoke r328.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r68);

        r329 = new java.lang.StringBuilder;

        specialinvoke r329.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r329.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightDeviceIdleMode=");

        $z12 = r0.<com.android.server.power.PowerManagerService: boolean mLightDeviceIdleMode>;

        virtualinvoke r329.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r71 = virtualinvoke r329.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        r330 = new java.lang.StringBuilder;

        specialinvoke r330.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r330.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDeviceIdleMode=");

        $z13 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        virtualinvoke r330.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r74 = virtualinvoke r330.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r74);

        r331 = new java.lang.StringBuilder;

        specialinvoke r331.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r331.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDeviceIdleWhitelist=");

        $r76 = r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleWhitelist>;

        $r77 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r76);

        virtualinvoke r331.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = virtualinvoke r331.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r79);

        r332 = new java.lang.StringBuilder;

        specialinvoke r332.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r332.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDeviceIdleTempWhitelist=");

        $r81 = r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleTempWhitelist>;

        $r82 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r81);

        virtualinvoke r332.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r84 = virtualinvoke r332.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r84);

        r333 = new java.lang.StringBuilder;

        specialinvoke r333.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r333.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastWakeTime=");

        $l25 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $r86 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l25);

        virtualinvoke r333.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r88 = virtualinvoke r333.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r88);

        r334 = new java.lang.StringBuilder;

        specialinvoke r334.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r334.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSleepTime=");

        $l26 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $r90 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l26);

        virtualinvoke r334.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

        $r92 = virtualinvoke r334.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r92);

        r335 = new java.lang.StringBuilder;

        specialinvoke r335.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSleepReason=");

        $i27 = r0.<com.android.server.power.PowerManagerService: int mLastSleepReason>;

        $r94 = staticinvoke <android.os.PowerManager: java.lang.String sleepReasonToString(int)>($i27);

        virtualinvoke r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94);

        $r96 = virtualinvoke r335.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r96);

        r336 = new java.lang.StringBuilder;

        specialinvoke r336.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r336.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserActivityTime=");

        $l28 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $r98 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l28);

        virtualinvoke r336.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r98);

        $r100 = virtualinvoke r336.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r100);

        r337 = new java.lang.StringBuilder;

        specialinvoke r337.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r337.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserActivityTimeNoChangeLights=");

        $l29 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $r102 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l29);

        virtualinvoke r337.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r102);

        $r104 = virtualinvoke r337.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r104);

        r338 = new java.lang.StringBuilder;

        specialinvoke r338.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastInteractivePowerHintTime=");

        $l30 = r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime>;

        $r106 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l30);

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r106);

        $r108 = virtualinvoke r338.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r108);

        r339 = new java.lang.StringBuilder;

        specialinvoke r339.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r339.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastScreenBrightnessBoostTime=");

        $l31 = r0.<com.android.server.power.PowerManagerService: long mLastScreenBrightnessBoostTime>;

        $r110 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l31);

        virtualinvoke r339.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r110);

        $r112 = virtualinvoke r339.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r112);

        r340 = new java.lang.StringBuilder;

        specialinvoke r340.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r340.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessBoostInProgress=");

        $z14 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        virtualinvoke r340.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r115 = virtualinvoke r340.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r115);

        r341 = new java.lang.StringBuilder;

        specialinvoke r341.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r341.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayReady=");

        $z15 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        virtualinvoke r341.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r118 = virtualinvoke r341.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r118);

        r342 = new java.lang.StringBuilder;

        specialinvoke r342.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r342.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHoldingWakeLockSuspendBlocker=");

        $z16 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        virtualinvoke r342.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z16);

        $r121 = virtualinvoke r342.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r121);

        r343 = new java.lang.StringBuilder;

        specialinvoke r343.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r343.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHoldingDisplaySuspendBlocker=");

        $z17 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        virtualinvoke r343.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z17);

        $r124 = virtualinvoke r343.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r124);

        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>("Settings and Configuration:");

        r344 = new java.lang.StringBuilder;

        specialinvoke r344.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r344.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDecoupleHalAutoSuspendModeFromDisplayConfig=");

        $z18 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        virtualinvoke r344.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z18);

        $r127 = virtualinvoke r344.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r127);

        r345 = new java.lang.StringBuilder;

        specialinvoke r345.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r345.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDecoupleHalInteractiveModeFromDisplayConfig=");

        $z19 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        virtualinvoke r345.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z19);

        $r130 = virtualinvoke r345.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r130);

        r346 = new java.lang.StringBuilder;

        specialinvoke r346.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r346.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeUpWhenPluggedOrUnpluggedConfig=");

        $z20 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        virtualinvoke r346.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z20);

        $r133 = virtualinvoke r346.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r133);

        r347 = new java.lang.StringBuilder;

        specialinvoke r347.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r347.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig=");

        $z21 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig>;

        virtualinvoke r347.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z21);

        $r136 = virtualinvoke r347.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r136);

        r348 = new java.lang.StringBuilder;

        specialinvoke r348.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r348.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTheaterModeEnabled=");

        $z22 = r0.<com.android.server.power.PowerManagerService: boolean mTheaterModeEnabled>;

        virtualinvoke r348.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z22);

        $r139 = virtualinvoke r348.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r139);

        r349 = new java.lang.StringBuilder;

        specialinvoke r349.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r349.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSuspendWhenScreenOffDueToProximityConfig=");

        $z23 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        virtualinvoke r349.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z23);

        $r142 = virtualinvoke r349.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r142);

        r350 = new java.lang.StringBuilder;

        specialinvoke r350.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r350.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsSupportedConfig=");

        $z24 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        virtualinvoke r350.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z24);

        $r145 = virtualinvoke r350.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r145);

        r351 = new java.lang.StringBuilder;

        specialinvoke r351.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r351.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledByDefaultConfig=");

        $z25 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        virtualinvoke r351.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z25);

        $r148 = virtualinvoke r351.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r148);

        r352 = new java.lang.StringBuilder;

        specialinvoke r352.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r352.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivatedOnSleepByDefaultConfig=");

        $z26 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        virtualinvoke r352.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z26);

        $r151 = virtualinvoke r352.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r151);

        r353 = new java.lang.StringBuilder;

        specialinvoke r353.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r353.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivatedOnDockByDefaultConfig=");

        $z27 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        virtualinvoke r353.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z27);

        $r154 = virtualinvoke r353.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r154);

        r354 = new java.lang.StringBuilder;

        specialinvoke r354.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r354.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledOnBatteryConfig=");

        $z28 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig>;

        virtualinvoke r354.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z28);

        $r157 = virtualinvoke r354.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r157);

        r355 = new java.lang.StringBuilder;

        specialinvoke r355.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r355.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsBatteryLevelMinimumWhenPoweredConfig=");

        $i32 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig>;

        virtualinvoke r355.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r160 = virtualinvoke r355.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r160);

        r356 = new java.lang.StringBuilder;

        specialinvoke r356.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r356.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsBatteryLevelMinimumWhenNotPoweredConfig=");

        $i33 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig>;

        virtualinvoke r356.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i33);

        $r163 = virtualinvoke r356.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r163);

        r357 = new java.lang.StringBuilder;

        specialinvoke r357.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r357.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsBatteryLevelDrainCutoffConfig=");

        $i34 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        virtualinvoke r357.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r166 = virtualinvoke r357.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r166);

        r358 = new java.lang.StringBuilder;

        specialinvoke r358.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r358.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledSetting=");

        $z29 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        virtualinvoke r358.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z29);

        $r169 = virtualinvoke r358.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r169);

        r359 = new java.lang.StringBuilder;

        specialinvoke r359.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r359.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivateOnSleepSetting=");

        $z30 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        virtualinvoke r359.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z30);

        $r172 = virtualinvoke r359.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r172);

        r360 = new java.lang.StringBuilder;

        specialinvoke r360.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r360.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivateOnDockSetting=");

        $z31 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        virtualinvoke r360.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z31);

        $r175 = virtualinvoke r360.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r175);

        r361 = new java.lang.StringBuilder;

        specialinvoke r361.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r361.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozeAfterScreenOff=");

        $z32 = r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOff>;

        virtualinvoke r361.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z32);

        $r178 = virtualinvoke r361.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r178);

        r362 = new java.lang.StringBuilder;

        specialinvoke r362.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r362.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMinimumScreenOffTimeoutConfig=");

        $l35 = r0.<com.android.server.power.PowerManagerService: long mMinimumScreenOffTimeoutConfig>;

        virtualinvoke r362.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l35);

        $r181 = virtualinvoke r362.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r181);

        r363 = new java.lang.StringBuilder;

        specialinvoke r363.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenDimDurationConfig=");

        $l36 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenDimDurationConfig>;

        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l36);

        $r184 = virtualinvoke r363.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r184);

        r364 = new java.lang.StringBuilder;

        specialinvoke r364.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r364.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenDimRatioConfig=");

        $f0 = r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig>;

        virtualinvoke r364.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r187 = virtualinvoke r364.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r187);

        r365 = new java.lang.StringBuilder;

        specialinvoke r365.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r365.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAttentiveTimeoutConfig=");

        $i37 = r0.<com.android.server.power.PowerManagerService: int mAttentiveTimeoutConfig>;

        virtualinvoke r365.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37);

        $r190 = virtualinvoke r365.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r190);

        r366 = new java.lang.StringBuilder;

        specialinvoke r366.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r366.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAttentiveTimeoutSetting=");

        $l38 = r0.<com.android.server.power.PowerManagerService: long mAttentiveTimeoutSetting>;

        virtualinvoke r366.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l38);

        $r193 = virtualinvoke r366.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r193);

        r367 = new java.lang.StringBuilder;

        specialinvoke r367.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r367.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAttentiveWarningDurationConfig=");

        $l39 = r0.<com.android.server.power.PowerManagerService: long mAttentiveWarningDurationConfig>;

        virtualinvoke r367.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l39);

        $r196 = virtualinvoke r367.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r196);

        r368 = new java.lang.StringBuilder;

        specialinvoke r368.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r368.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffTimeoutSetting=");

        $l40 = r0.<com.android.server.power.PowerManagerService: long mScreenOffTimeoutSetting>;

        virtualinvoke r368.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l40);

        $r199 = virtualinvoke r368.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r199);

        r369 = new java.lang.StringBuilder;

        specialinvoke r369.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r369.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSleepTimeoutSetting=");

        $l41 = r0.<com.android.server.power.PowerManagerService: long mSleepTimeoutSetting>;

        virtualinvoke r369.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l41);

        $r202 = virtualinvoke r369.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r202);

        r370 = new java.lang.StringBuilder;

        specialinvoke r370.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r370.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenOffTimeoutFromDeviceAdmin=");

        $l42 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenOffTimeoutFromDeviceAdmin>;

        virtualinvoke r370.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l42);

        virtualinvoke r370.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (enforced=");

        $z33 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        virtualinvoke r370.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z33);

        virtualinvoke r370.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r208 = virtualinvoke r370.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r208);

        r371 = new java.lang.StringBuilder;

        specialinvoke r371.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r371.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStayOnWhilePluggedInSetting=");

        $i43 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        virtualinvoke r371.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i43);

        $r211 = virtualinvoke r371.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r211);

        r372 = new java.lang.StringBuilder;

        specialinvoke r372.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r372.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessModeSetting=");

        $i44 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        virtualinvoke r372.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i44);

        $r214 = virtualinvoke r372.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r214);

        r373 = new java.lang.StringBuilder;

        specialinvoke r373.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r373.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessOverrideFromWindowManager=");

        $f1 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager>;

        virtualinvoke r373.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r217 = virtualinvoke r373.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r217);

        r374 = new java.lang.StringBuilder;

        specialinvoke r374.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r374.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserActivityTimeoutOverrideFromWindowManager=");

        $l45 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        virtualinvoke r374.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l45);

        $r220 = virtualinvoke r374.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r220);

        r375 = new java.lang.StringBuilder;

        specialinvoke r375.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserInactiveOverrideFromWindowManager=");

        $z34 = r0.<com.android.server.power.PowerManagerService: boolean mUserInactiveOverrideFromWindowManager>;

        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z34);

        $r223 = virtualinvoke r375.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r223);

        r376 = new java.lang.StringBuilder;

        specialinvoke r376.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r376.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozeScreenStateOverrideFromDreamManager=");

        $i46 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        virtualinvoke r376.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i46);

        $r226 = virtualinvoke r376.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r226);

        r377 = new java.lang.StringBuilder;

        specialinvoke r377.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r377.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDrawWakeLockOverrideFromSidekick=");

        $z35 = r0.<com.android.server.power.PowerManagerService: boolean mDrawWakeLockOverrideFromSidekick>;

        virtualinvoke r377.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z35);

        $r229 = virtualinvoke r377.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r229);

        r378 = new java.lang.StringBuilder;

        specialinvoke r378.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r378.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozeScreenBrightnessOverrideFromDreamManager=");

        $i47 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager>;

        virtualinvoke r378.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i47);

        $r232 = virtualinvoke r378.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r232);

        r379 = new java.lang.StringBuilder;

        specialinvoke r379.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r379.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingMinimumFloat=");

        $f2 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingMinimum>;

        virtualinvoke r379.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r235 = virtualinvoke r379.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r235);

        r380 = new java.lang.StringBuilder;

        specialinvoke r380.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r380.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingMaximumFloat=");

        $f3 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingMaximum>;

        virtualinvoke r380.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r238 = virtualinvoke r380.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r238);

        r381 = new java.lang.StringBuilder;

        specialinvoke r381.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r381.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingDefaultFloat=");

        $f4 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingDefault>;

        virtualinvoke r381.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r241 = virtualinvoke r381.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r241);

        r382 = new java.lang.StringBuilder;

        specialinvoke r382.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r382.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDoubleTapWakeEnabled=");

        $z36 = r0.<com.android.server.power.PowerManagerService: boolean mDoubleTapWakeEnabled>;

        virtualinvoke r382.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z36);

        $r244 = virtualinvoke r382.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r244);

        r383 = new java.lang.StringBuilder;

        specialinvoke r383.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r383.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIsVrModeEnabled=");

        $z37 = r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled>;

        virtualinvoke r383.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z37);

        $r247 = virtualinvoke r383.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r247);

        r384 = new java.lang.StringBuilder;

        specialinvoke r384.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r384.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mForegroundProfile=");

        $i48 = r0.<com.android.server.power.PowerManagerService: int mForegroundProfile>;

        virtualinvoke r384.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i48);

        $r250 = virtualinvoke r384.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r250);

        r385 = new java.lang.StringBuilder;

        specialinvoke r385.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r385.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserId=");

        $i49 = r0.<com.android.server.power.PowerManagerService: int mUserId>;

        virtualinvoke r385.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i49);

        $r253 = virtualinvoke r385.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r253);

        l0 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getAttentiveTimeoutLocked()>();

        l1 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getSleepTimeoutLocked(long)>(l0);

        l2 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getScreenOffTimeoutLocked(long,long)>(l1, l0);

        l3 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getScreenDimDurationLocked(long)>(l2);

        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        r386 = new java.lang.StringBuilder;

        specialinvoke r386.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r386.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attentive timeout: ");

        virtualinvoke r386.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke r386.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r257 = virtualinvoke r386.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r257);

        r387 = new java.lang.StringBuilder;

        specialinvoke r387.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r387.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sleep timeout: ");

        virtualinvoke r387.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        virtualinvoke r387.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r261 = virtualinvoke r387.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r261);

        r388 = new java.lang.StringBuilder;

        specialinvoke r388.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r388.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen off timeout: ");

        virtualinvoke r388.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        virtualinvoke r388.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r265 = virtualinvoke r388.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r265);

        r389 = new java.lang.StringBuilder;

        specialinvoke r389.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen dim duration: ");

        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r269 = virtualinvoke r389.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r269);

        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("UID states (changing=");

        $z38 = r0.<com.android.server.power.PowerManagerService: boolean mUidsChanging>;

        virtualinvoke r307.<java.io.PrintWriter: void print(boolean)>($z38);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" changed=");

        $z39 = r0.<com.android.server.power.PowerManagerService: boolean mUidsChanged>;

        virtualinvoke r307.<java.io.PrintWriter: void print(boolean)>($z39);

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>("):");

     label11:
        i59 = 0;

     label12:
        $r390 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $i60 = virtualinvoke $r390.<android.util.SparseArray: int size()>();

        if i59 >= $i60 goto label17;

        $r303 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r304 = virtualinvoke $r303.<android.util.SparseArray: java.lang.Object valueAt(int)>(i59);

        r391 = (com.android.server.power.PowerManagerService$UidState) $r304;

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("  UID ");

        $r305 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $i56 = virtualinvoke $r305.<android.util.SparseArray: int keyAt(int)>(i59);

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r307, $i56);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $z43 = r391.<com.android.server.power.PowerManagerService$UidState: boolean mActive>;

        if $z43 == 0 goto label14;

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("  ACTIVE ");

     label13:
        goto label15;

     label14:
        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("INACTIVE ");

     label15:
        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" count=");

        $i57 = r391.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        virtualinvoke r307.<java.io.PrintWriter: void print(int)>($i57);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" state=");

        $i58 = r391.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        virtualinvoke r307.<java.io.PrintWriter: void println(int)>($i58);

     label16:
        i59 = i59 + 1;

        goto label12;

     label17:
        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>("Looper state:");

        $r270 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        r392 = virtualinvoke $r270.<android.os.Handler: android.os.Looper getLooper()>();

        r393 = new android.util.PrintWriterPrinter;

        specialinvoke r393.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r307);

        virtualinvoke r392.<android.os.Looper: void dump(android.util.Printer,java.lang.String)>(r393, "  ");

        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        r394 = new java.lang.StringBuilder;

        specialinvoke r394.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r394.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wake Locks: size=");

        $r272 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $i50 = virtualinvoke $r272.<java.util.ArrayList: int size()>();

        virtualinvoke r394.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i50);

        $r274 = virtualinvoke r394.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r274);

        $r275 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        r395 = virtualinvoke $r275.<java.util.ArrayList: java.util.Iterator iterator()>();

     label18:
        $z40 = interfaceinvoke r395.<java.util.Iterator: boolean hasNext()>();

        if $z40 == 0 goto label20;

        $r299 = interfaceinvoke r395.<java.util.Iterator: java.lang.Object next()>();

        r396 = (com.android.server.power.PowerManagerService$WakeLock) $r299;

        r397 = new java.lang.StringBuilder;

        specialinvoke r397.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r397.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke r397.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r396);

        $r302 = virtualinvoke r397.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r302);

     label19:
        goto label18;

     label20:
        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        r398 = new java.lang.StringBuilder;

        specialinvoke r398.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r398.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Suspend Blockers: size=");

        $r277 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        $i51 = virtualinvoke $r277.<java.util.ArrayList: int size()>();

        virtualinvoke r398.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i51);

        $r279 = virtualinvoke r398.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r279);

        $r280 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        r399 = virtualinvoke $r280.<java.util.ArrayList: java.util.Iterator iterator()>();

     label21:
        $z41 = interfaceinvoke r399.<java.util.Iterator: boolean hasNext()>();

        if $z41 == 0 goto label23;

        $r295 = interfaceinvoke r399.<java.util.Iterator: java.lang.Object next()>();

        r400 = (com.android.server.power.SuspendBlocker) $r295;

        r401 = new java.lang.StringBuilder;

        specialinvoke r401.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r401.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke r401.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r400);

        $r298 = virtualinvoke r401.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r298);

     label22:
        goto label21;

     label23:
        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        r402 = new java.lang.StringBuilder;

        specialinvoke r402.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r402.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Power: ");

        $r282 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks>;

        virtualinvoke r402.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r282);

        $r284 = virtualinvoke r402.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r284);

        $r285 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverPolicy mBatterySaverPolicy>;

        virtualinvoke $r285.<com.android.server.power.batterysaver.BatterySaverPolicy: void dump(java.io.PrintWriter)>(r307);

        $r286 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine>;

        virtualinvoke $r286.<com.android.server.power.batterysaver.BatterySaverStateMachine: void dump(java.io.PrintWriter)>(r307);

        $r287 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AttentionDetector mAttentionDetector>;

        virtualinvoke $r287.<com.android.server.power.AttentionDetector: void dump(java.io.PrintWriter)>(r307);

        virtualinvoke r307.<java.io.PrintWriter: void println()>();

        $r288 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        i4 = virtualinvoke $r288.<android.util.SparseArray: int size()>();

        r403 = new java.lang.StringBuilder;

        specialinvoke r403.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r403.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile power states: size=");

        virtualinvoke r403.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r291 = virtualinvoke r403.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r307.<java.io.PrintWriter: void println(java.lang.String)>($r291);

     label24:
        i61 = 0;

     label25:
        if i61 >= i4 goto label28;

     label26:
        $r293 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r294 = virtualinvoke $r293.<android.util.SparseArray: java.lang.Object valueAt(int)>(i61);

        r404 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r294;

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>("  mUserId=");

        $i52 = r404.<com.android.server.power.PowerManagerService$ProfilePowerState: int mUserId>;

        virtualinvoke r307.<java.io.PrintWriter: void print(int)>($i52);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" mScreenOffTimeout=");

        $l53 = r404.<com.android.server.power.PowerManagerService$ProfilePowerState: long mScreenOffTimeout>;

        virtualinvoke r307.<java.io.PrintWriter: void print(long)>($l53);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" mWakeLockSummary=");

        $i54 = r404.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary>;

        virtualinvoke r307.<java.io.PrintWriter: void print(int)>($i54);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" mLastUserActivityTime=");

        $l55 = r404.<com.android.server.power.PowerManagerService$ProfilePowerState: long mLastUserActivityTime>;

        virtualinvoke r307.<java.io.PrintWriter: void print(long)>($l55);

        virtualinvoke r307.<java.io.PrintWriter: void print(java.lang.String)>(" mLockingNotified=");

        $z42 = r404.<com.android.server.power.PowerManagerService$ProfilePowerState: boolean mLockingNotified>;

        virtualinvoke r307.<java.io.PrintWriter: void println(boolean)>($z42);

     label27:
        i61 = i61 + 1;

        goto label25;

     label28:
        r405 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        exitmonitor r308;

     label29:
        if r405 == null goto label30;

        virtualinvoke r405.<com.android.server.power.WirelessChargerDetector: void dump(java.io.PrintWriter)>(r307);

     label30:
        r406 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        if r406 == null goto label31;

        virtualinvoke r406.<com.android.server.power.Notifier: void dump(java.io.PrintWriter)>(r307);

     label31:
        $r292 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AmbientDisplaySuppressionController mAmbientDisplaySuppressionController>;

        virtualinvoke $r292.<com.android.server.power.AmbientDisplaySuppressionController: void dump(java.io.PrintWriter)>(r307);

        return;

     label32:
        $r306 := @caughtexception;

     label33:
        exitmonitor r308;

     label34:
        throw $r306;

        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label03 to label04 with label32;
        catch java.lang.Throwable from label04 to label05 with label32;
        catch java.lang.Throwable from label06 to label07 with label32;
        catch java.lang.Throwable from label07 to label08 with label32;
        catch java.lang.Throwable from label09 to label10 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label12 to label13 with label32;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch java.lang.Throwable from label15 to label16 with label32;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.Throwable from label18 to label19 with label32;
        catch java.lang.Throwable from label20 to label21 with label32;
        catch java.lang.Throwable from label21 to label22 with label32;
        catch java.lang.Throwable from label23 to label24 with label32;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch java.lang.Throwable from label28 to label29 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
    }

    private void dumpProto(java.io.FileDescriptor)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l23, $l24, $l25, $l32, $l33, $l34, $l35, $l36, $l37, $l41, $l42, $l43, $l44, $l45, $l47, $l48, $l49, $l57, l65, l66, l71, l72, l73, l74, l75, l76, l79;
        android.util.proto.ProtoOutputStream $r1;
        com.android.server.power.PowerManagerService$Constants $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i26, $i27, $i28, $i29, $i30, $i31, $i38, $i39, $i40, $i46, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, i67, i68, i69, i70, i77, $i78, i80;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, z43, z44, z45, z46, z47, z48, z49, z50, z51, z52, z53, z54, z55, z56;
        float $f0, $f1, $f2, $f3, $f4;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r3;
        android.os.Handler $r4;
        android.os.Looper $r5;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8, $r10, $r13, r19;
        com.android.server.power.SuspendBlocker $r9;
        com.android.server.power.PowerManagerService$WakeLock $r11;
        android.util.SparseArray $r12, $r14, $r22;
        java.lang.String $r15;
        java.lang.Throwable $r16;
        java.io.FileDescriptor r17;
        int[] r20, r21;
        com.android.server.power.PowerManagerService$UidState r23;
        java.util.Iterator r24, r25;
        com.android.server.power.WirelessChargerDetector r26;

        r0 := @this: com.android.server.power.PowerManagerService;

        r17 := @parameter0: java.io.FileDescriptor;

        $r1 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r1.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r17);

        r19 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r19;

     label01:
        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Constants mConstants>;

        virtualinvoke $r2.<com.android.server.power.PowerManagerService$Constants: void dumpProto(android.util.proto.ProtoOutputStream)>($r1);

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        $i2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169923L, $i2);

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mWakefulnessChanging>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z0);

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z1);

        $i3 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169926L, $i3);

        $i4 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464263L, $i4);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464264L, $i5);

        $i6 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169929L, $i6);

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366154L, $z2);

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366155L, $z3);

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366156L, $z4);

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366157L, $z5);

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366158L, $z6);

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366159L, $z7);

        l65 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268048L);

        $i7 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i8 = $i7 & 1;

        if $i8 == 0 goto label03;

     label02:
        z43 = 1;

        goto label04;

     label03:
        z43 = 0;

     label04:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, z43);

        $i9 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i10 = $i9 & 2;

        if $i10 == 0 goto label06;

     label05:
        z44 = 1;

        goto label07;

     label06:
        z44 = 0;

     label07:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, z44);

        $i11 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i12 = $i11 & 4;

        if $i12 == 0 goto label09;

     label08:
        z45 = 1;

        goto label10;

     label09:
        z45 = 0;

     label10:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, z45);

        $i13 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i14 = $i13 & 8;

        if $i14 == 0 goto label12;

     label11:
        z46 = 1;

        goto label13;

     label12:
        z46 = 0;

     label13:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, z46);

        $i15 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i16 = $i15 & 16;

        if $i16 == 0 goto label15;

     label14:
        z47 = 1;

        goto label16;

     label15:
        z47 = 0;

     label16:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, z47);

        $i17 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i18 = $i17 & 32;

        if $i18 == 0 goto label18;

     label17:
        z48 = 1;

        goto label19;

     label18:
        z48 = 0;

     label19:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, z48);

        $i19 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i20 = $i19 & 64;

        if $i20 == 0 goto label21;

     label20:
        z49 = 1;

        goto label22;

     label21:
        z49 = 0;

     label22:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, z49);

        $i21 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i22 = $i21 & 128;

        if $i22 == 0 goto label24;

     label23:
        z50 = 1;

        goto label25;

     label24:
        z50 = 0;

     label25:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366152L, z50);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void end(long)>(l65);

        $l23 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongScheduled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529681L, $l23);

        $l24 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongDispatched>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529682L, $l24);

        $l25 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongNextCheck>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529683L, $l25);

        l66 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268052L);

        $i26 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i27 = $i26 & 1;

        if $i27 == 0 goto label27;

     label26:
        z51 = 1;

        goto label28;

     label27:
        z51 = 0;

     label28:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, z51);

        $i28 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i29 = $i28 & 2;

        if $i29 == 0 goto label30;

     label29:
        z52 = 1;

        goto label31;

     label30:
        z52 = 0;

     label31:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, z52);

        $i30 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i31 = $i30 & 4;

        if $i31 == 0 goto label33;

     label32:
        z53 = 1;

        goto label34;

     label33:
        z53 = 0;

     label34:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, z53);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void end(long)>(l66);

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366165L, $z8);

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366166L, $z9);

        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366167L, $z10);

        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366168L, $z11);

        $z12 = r0.<com.android.server.power.PowerManagerService: boolean mLightDeviceIdleMode>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366169L, $z12);

        $z13 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366170L, $z13);

        r20 = r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleWhitelist>;

        i67 = lengthof r20;

     label35:
        i68 = 0;

     label36:
        if i68 >= i67 goto label39;

     label37:
        $i64 = r20[i68];

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(2220498092059L, $i64);

     label38:
        i68 = i68 + 1;

        goto label36;

     label39:
        r21 = r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleTempWhitelist>;

        i69 = lengthof r21;

     label40:
        i70 = 0;

     label41:
        if i70 >= i69 goto label44;

     label42:
        $i63 = r21[i70];

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(2220498092060L, $i63);

     label43:
        i70 = i70 + 1;

        goto label41;

     label44:
        $l32 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529693L, $l32);

        $l33 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529694L, $l33);

        $l34 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529695L, $l34);

        $l35 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529696L, $l35);

        $l36 = r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529697L, $l36);

        $l37 = r0.<com.android.server.power.PowerManagerService: long mLastScreenBrightnessBoostTime>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529698L, $l37);

        $z14 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366179L, $z14);

        $z15 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366180L, $z15);

        $z16 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366181L, $z16);

        $z17 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366182L, $z17);

        l71 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268071L);

        $z18 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, $z18);

        $z19 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, $z19);

        $z20 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, $z20);

        $z21 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z21);

        $z22 = r0.<com.android.server.power.PowerManagerService: boolean mTheaterModeEnabled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z22);

        $z23 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z23);

        $z24 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, $z24);

        $z25 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366152L, $z25);

        $z26 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366153L, $z26);

        $z27 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366154L, $z27);

        $z28 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366155L, $z28);

        $i38 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071820L, $i38);

        $i39 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071821L, $i39);

        $i40 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071822L, $i40);

        $z29 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366159L, $z29);

        $z30 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366160L, $z30);

        $z31 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366161L, $z31);

        $z32 = r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOff>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366162L, $z32);

        $l41 = r0.<com.android.server.power.PowerManagerService: long mMinimumScreenOffTimeoutConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464275L, $l41);

        $l42 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenDimDurationConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464276L, $l42);

        $f0 = r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562389L, $f0);

        $l43 = r0.<com.android.server.power.PowerManagerService: long mScreenOffTimeoutSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464278L, $l43);

        $l44 = r0.<com.android.server.power.PowerManagerService: long mSleepTimeoutSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1172526071831L, $l44);

        $l45 = r0.<com.android.server.power.PowerManagerService: long mAttentiveTimeoutSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1172526071845L, $l45);

        $i46 = r0.<com.android.server.power.PowerManagerService: int mAttentiveTimeoutConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071846L, $i46);

        $l47 = r0.<com.android.server.power.PowerManagerService: long mAttentiveWarningDurationConfig>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1172526071847L, $l47);

        $l48 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenOffTimeoutFromDeviceAdmin>;

        $l49 = staticinvoke <java.lang.Math: long min(long,long)>($l48, 2147483647L);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464280L, $l49);

     label45:
        $z33 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366169L, $z33);

        l72 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268058L);

        $i50 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $i51 = $i50 & 1;

        if $i51 == 0 goto label47;

     label46:
        z54 = 1;

        goto label48;

     label47:
        z54 = 0;

     label48:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, z54);

        $i52 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $i53 = $i52 & 2;

        if $i53 == 0 goto label50;

     label49:
        z55 = 1;

        goto label51;

     label50:
        z55 = 0;

     label51:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, z55);

        $i54 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $i55 = $i54 & 4;

        if $i55 == 0 goto label53;

     label52:
        z56 = 1;

        goto label54;

     label53:
        z56 = 0;

     label54:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, z56);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void end(long)>(l72);

        $i56 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169947L, $i56);

        $f1 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1172526071836L, $f1);

        $l57 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1176821039133L, $l57);

        $z34 = r0.<com.android.server.power.PowerManagerService: boolean mUserInactiveOverrideFromWindowManager>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366174L, $z34);

        $i58 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169951L, $i58);

        $z35 = r0.<com.android.server.power.PowerManagerService: boolean mDrawWakeLockOverrideFromSidekick>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366180L, $z35);

        $i59 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1108101562400L, $i59);

        l73 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268065L);

        $f2 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingMinimum>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562372L, $f2);

        $f3 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingMaximum>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562373L, $f3);

        $f4 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingDefault>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562374L, $f4);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void end(long)>(l73);

        $z36 = r0.<com.android.server.power.PowerManagerService: boolean mDoubleTapWakeEnabled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366178L, $z36);

        $z37 = r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366179L, $z37);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void end(long)>(l71);

        l74 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getAttentiveTimeoutLocked()>();

        l75 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getSleepTimeoutLocked(long)>(l74);

        l76 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getScreenOffTimeoutLocked(long,long)>(l75, l74);

        l0 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getScreenDimDurationLocked(long)>(l76);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1172526071859L, l74);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1172526071848L, l75);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464297L, l76);

     label55:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464298L, l0);

        $z38 = r0.<com.android.server.power.PowerManagerService: boolean mUidsChanging>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366187L, $z38);

        $z39 = r0.<com.android.server.power.PowerManagerService: boolean mUidsChanged>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366188L, $z39);

     label56:
        i77 = 0;

     label57:
        $r22 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $i78 = virtualinvoke $r22.<android.util.SparseArray: int size()>();

        if i77 >= $i78 goto label59;

        $r12 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i77);

        r23 = (com.android.server.power.PowerManagerService$UidState) $r13;

        l79 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895853L);

        $r14 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        i80 = virtualinvoke $r14.<android.util.SparseArray: int keyAt(int)>(i77);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, i80);

        $r15 = staticinvoke <android.os.UserHandle: java.lang.String formatUid(int)>(i80);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333442L, $r15);

        $z42 = r23.<com.android.server.power.PowerManagerService$UidState: boolean mActive>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, $z42);

        $i60 = r23.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464260L, $i60);

        $i61 = r23.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        $i62 = staticinvoke <android.app.ActivityManager: int processStateAmToProto(int)>($i61);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169925L, $i62);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void end(long)>(l79);

     label58:
        i77 = i77 + 1;

        goto label57;

     label59:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine>;

        virtualinvoke $r3.<com.android.server.power.batterysaver.BatterySaverStateMachine: void dumpProto(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268082L);

        $r4 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Looper getLooper()>();

        virtualinvoke $r5.<android.os.Looper: void dumpDebug(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268078L);

        $r6 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        r24 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label60:
        $z40 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z40 == 0 goto label62;

        $r10 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.power.PowerManagerService$WakeLock) $r10;

        virtualinvoke $r11.<com.android.server.power.PowerManagerService$WakeLock: void dumpDebug(android.util.proto.ProtoOutputStream,long)>($r1, 2246267895855L);

     label61:
        goto label60;

     label62:
        $r7 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        r25 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label63:
        $z41 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z41 == 0 goto label65;

        $r8 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.android.server.power.SuspendBlocker) $r8;

        interfaceinvoke $r9.<com.android.server.power.SuspendBlocker: void dumpDebug(android.util.proto.ProtoOutputStream,long)>($r1, 2246267895856L);

     label64:
        goto label63;

     label65:
        r26 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        exitmonitor r19;

     label66:
        if r26 == null goto label67;

        virtualinvoke r26.<com.android.server.power.WirelessChargerDetector: void dumpDebug(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268081L);

     label67:
        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void flush()>();

        return;

     label68:
        $r16 := @caughtexception;

     label69:
        exitmonitor r19;

     label70:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label68;
        catch java.lang.Throwable from label04 to label05 with label68;
        catch java.lang.Throwable from label07 to label08 with label68;
        catch java.lang.Throwable from label10 to label11 with label68;
        catch java.lang.Throwable from label13 to label14 with label68;
        catch java.lang.Throwable from label16 to label17 with label68;
        catch java.lang.Throwable from label19 to label20 with label68;
        catch java.lang.Throwable from label22 to label23 with label68;
        catch java.lang.Throwable from label25 to label26 with label68;
        catch java.lang.Throwable from label28 to label29 with label68;
        catch java.lang.Throwable from label31 to label32 with label68;
        catch java.lang.Throwable from label34 to label35 with label68;
        catch java.lang.Throwable from label37 to label38 with label68;
        catch java.lang.Throwable from label39 to label40 with label68;
        catch java.lang.Throwable from label42 to label43 with label68;
        catch java.lang.Throwable from label44 to label45 with label68;
        catch java.lang.Throwable from label45 to label46 with label68;
        catch java.lang.Throwable from label48 to label49 with label68;
        catch java.lang.Throwable from label51 to label52 with label68;
        catch java.lang.Throwable from label54 to label55 with label68;
        catch java.lang.Throwable from label55 to label56 with label68;
        catch java.lang.Throwable from label57 to label58 with label68;
        catch java.lang.Throwable from label59 to label60 with label68;
        catch java.lang.Throwable from label60 to label61 with label68;
        catch java.lang.Throwable from label62 to label63 with label68;
        catch java.lang.Throwable from label63 to label64 with label68;
        catch java.lang.Throwable from label65 to label66 with label68;
        catch java.lang.Throwable from label69 to label70 with label68;
    }

    private void enqueueNotifyLongMsgLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        r0.<com.android.server.power.PowerManagerService: long mNotifyLongScheduled> = l0;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>(r1, l0);

        return;
    }

    private int findWakeLockIndexLocked(android.os.IBinder)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.power.PowerManagerService$WakeLock $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.power.PowerManagerService$WakeLock) $r4;

        $r6 = $r5.<com.android.server.power.PowerManagerService$WakeLock: android.os.IBinder mLock>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void finishWakefulnessChangeIfNeededLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        com.android.server.power.PowerManagerService$Clock $r2;
        long $l3, $l4, $l5;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        com.android.server.power.Notifier $r8;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mWakefulnessChanging>;

        if $z0 == 0 goto label5;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z1 == 0 goto label5;

        $i1 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i1 != 3 goto label1;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i9 = $i8 & 64;

        if $i9 != 0 goto label1;

        return;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mDozeStartInProgress> = 0;

        $i2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i2 == 3 goto label2;

        $i7 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i7 != 0 goto label3;

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void logSleepTimeoutRecapturedLocked()>();

     label3:
        $i10 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i10 != 1 goto label4;

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(131072L, "Screen turning on", 0);

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l3 = interfaceinvoke $r2.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $l4 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $l5 = $l3 - $l4;

        i0 = (int) $l5;

        if i0 < 200 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen on took ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PowerManagerService", $r7);

     label4:
        r0.<com.android.server.power.PowerManagerService: boolean mWakefulnessChanging> = 0;

        $r8 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r8.<com.android.server.power.Notifier: void onWakefulnessChangeFinished()>();

     label5:
        return;
    }

    private boolean forceSuspendInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean z0;
        com.android.server.power.PowerManagerService$Clock $r1;
        long $l1;
        java.lang.String $r5;
        com.android.server.power.PowerManagerService$NativeWrapper $r6;
        java.lang.Throwable $r7, $r8, $r9, $r10;
        java.lang.Object r11, r13, r17;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

     label01:
        r11 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label02:
        r0.<com.android.server.power.PowerManagerService: boolean mForceSuspendActive> = 1;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l1 = interfaceinvoke $r1.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int,int,int)>($l1, 8, 1, i0);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

        exitmonitor r11;

     label03:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force-Suspending (uid ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r5 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r5);

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        z0 = virtualinvoke $r6.<com.android.server.power.PowerManagerService$NativeWrapper: boolean nativeForceSuspend()>();

     label04:
        if z0 != 0 goto label06;

     label05:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Force-Suspending failed in native.");

     label06:
        r13 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r13;

     label07:
        r0.<com.android.server.power.PowerManagerService: boolean mForceSuspendActive> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

        exitmonitor r13;

     label08:
        return z0;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r13;

     label11:
        throw $r10;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r11;

     label14:
        throw $r8;

     label15:
        $r9 := @caughtexception;

        r17 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r17;

     label16:
        r0.<com.android.server.power.PowerManagerService: boolean mForceSuspendActive> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

        exitmonitor r17;

     label17:
        throw $r9;

     label18:
        $r7 := @caughtexception;

     label19:
        exitmonitor r17;

     label20:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private long getAttentiveTimeoutLocked()
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2, $l3;
        byte $b1;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 = r0.<com.android.server.power.PowerManagerService: long mAttentiveTimeoutSetting>;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        return -1L;

     label1:
        $l2 = r0.<com.android.server.power.PowerManagerService: long mMinimumScreenOffTimeoutConfig>;

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>(l0, $l2);

        return $l3;
    }

    private static android.os.WorkSource$WorkChain getFirstNonEmptyWorkChain(android.os.WorkSource)
    {
        java.util.Iterator r0;
        java.util.List $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0;
        android.os.WorkSource r4;
        android.os.WorkSource$WorkChain r5;

        r4 := @parameter0: android.os.WorkSource;

        $r1 = virtualinvoke r4.<android.os.WorkSource: java.util.List getWorkChains()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r4.<android.os.WorkSource: java.util.List getWorkChains()>();

        r0 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.os.WorkSource$WorkChain) $r3;

        $i0 = virtualinvoke r5.<android.os.WorkSource$WorkChain: int getSize()>();

        if $i0 <= 0 goto label3;

        return r5;

     label3:
        goto label2;

     label4:
        return null;
    }

    private int getLastSleepReasonInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.power.PowerManagerService: int mLastSleepReason>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.os.PowerManager$WakeData getLastWakeupInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int $i0;
        long $l1;
        java.lang.Throwable $r2;
        android.os.PowerManager$WakeData r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = new android.os.PowerManager$WakeData;

        $l1 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mLastWakeReason>;

        specialinvoke r3.<android.os.PowerManager$WakeData: void <init>(long,int)>($l1, $i0);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private long getNextProfileTimeoutLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l2, $l3, $l4, l8, l10;
        int i1, i9;
        com.android.server.power.PowerManagerService$ProfilePowerState r1;
        android.util.SparseArray $r2, $r3;
        java.lang.Object $r4;
        byte $b5, $b6, $b7;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        l8 = -1L;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i9 = 0;

     label1:
        if i9 >= i1 goto label4;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i9);

        r1 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r4;

        $l4 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: long mLastUserActivityTime>;

        $l3 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: long mScreenOffTimeout>;

        l2 = $l4 + $l3;

        l10 = l8;

        $b5 = l2 cmp l0;

        if $b5 <= 0 goto label3;

        $b6 = l8 cmp -1L;

        if $b6 == 0 goto label2;

        l10 = l8;

        $b7 = l2 cmp l8;

        if $b7 >= 0 goto label3;

     label2:
        l10 = l2;

     label3:
        i9 = i9 + 1;

        l8 = l10;

        goto label1;

     label4:
        return l8;
    }

    private long getScreenDimDurationLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1, $l2, $l3;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $l2 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenDimDurationConfig>;

        $f1 = (float) l0;

        $f0 = r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig>;

        $f2 = $f1 * $f0;

        $l1 = (long) $f2;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l1);

        return $l3;
    }

    private long getScreenOffTimeoutLocked(long, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, $l5, $l6, $l7, l8, l9, l10, l11, l12, l13;
        boolean $z0;
        byte $b2, $b3, $b4;

        r0 := @this: com.android.server.power.PowerManagerService;

        l8 := @parameter0: long;

        l0 := @parameter1: long;

        l9 = r0.<com.android.server.power.PowerManagerService: long mScreenOffTimeoutSetting>;

        l10 = l9;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        if $z0 == 0 goto label1;

        $l7 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenOffTimeoutFromDeviceAdmin>;

        l10 = staticinvoke <java.lang.Math: long min(long,long)>(l9, $l7);

     label1:
        l1 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        l11 = l10;

        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label2;

        l11 = staticinvoke <java.lang.Math: long min(long,long)>(l10, l1);

     label2:
        l12 = l11;

        $b3 = l8 cmp 0L;

        if $b3 < 0 goto label3;

        l12 = staticinvoke <java.lang.Math: long min(long,long)>(l11, l8);

     label3:
        l13 = l12;

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label4;

        l13 = staticinvoke <java.lang.Math: long min(long,long)>(l12, l0);

     label4:
        $l5 = r0.<com.android.server.power.PowerManagerService: long mMinimumScreenOffTimeoutConfig>;

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>(l13, $l5);

        return $l6;
    }

    private long getSleepTimeoutLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, $l4, $l5, l6;
        byte $b2, $b3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        l1 = r0.<com.android.server.power.PowerManagerService: long mSleepTimeoutSetting>;

        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label1;

        return -1L;

     label1:
        l6 = l1;

        $b3 = l0 cmp 0L;

        if $b3 < 0 goto label2;

        l6 = staticinvoke <java.lang.Math: long min(long,long)>(l1, l0);

     label2:
        $l4 = r0.<com.android.server.power.PowerManagerService: long mMinimumScreenOffTimeoutConfig>;

        $l5 = staticinvoke <java.lang.Math: long max(long,long)>(l6, $l4);

        return $l5;
    }

    private int getWakeLockSummaryFlags(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        i0 = $i1 & 65535;

        if i0 == 1 goto label7;

        if i0 == 6 goto label6;

        if i0 == 10 goto label5;

        if i0 == 26 goto label4;

        if i0 == 32 goto label3;

        if i0 == 64 goto label2;

        if i0 == 128 goto label1;

        goto label8;

     label1:
        return 128;

     label2:
        return 64;

     label3:
        return 16;

     label4:
        return 10;

     label5:
        return 2;

     label6:
        return 4;

     label7:
        $z0 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mDisabled>;

        if $z0 != 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    private void goToSleepInternal(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean goToSleepNoUpdateLocked(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l5;
        int i1, i2, i3, i4, $i7, $i8, $i9, $i11, $i12, i13, i14, i15, i16;
        byte $b6;
        boolean $z0, $z1;
        java.lang.String $r2, $r7;
        java.util.ArrayList $r8, $r9;
        java.lang.Object $r10;
        com.android.server.power.PowerManagerService$WakeLock $r11;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i13 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l5 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b6 = l0 cmp $l5;

        if $b6 < 0 goto label16;

        $i7 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i7 == 0 goto label16;

        $i8 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i8 == 3 goto label16;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label16;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z1 != 0 goto label01;

        goto label16;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "goToSleep");

     label02:
        $i9 = staticinvoke <java.lang.Math: int max(int,int)>(i13, 0);

        i14 = staticinvoke <java.lang.Math: int min(int,int)>(10, $i9);

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep due to ");

        $r2 = staticinvoke <android.os.PowerManager: java.lang.String sleepReasonToString(int)>(i14);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (uid ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r7);

        r0.<com.android.server.power.PowerManagerService: long mLastSleepTime> = l0;

        r0.<com.android.server.power.PowerManagerService: int mLastSleepReason> = i14;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned> = 1;

        r0.<com.android.server.power.PowerManagerService: boolean mDozeStartInProgress> = 1;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void setWakefulnessLocked(int,int,long)>(3, i14, l0);

     label03:
        i15 = 0;

     label04:
        $r8 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i3 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

     label05:
        i16 = 0;

     label06:
        if i16 >= i3 goto label11;

     label07:
        $r9 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i16);

        $r11 = (com.android.server.power.PowerManagerService$WakeLock) $r10;

        $i12 = $r11.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        i4 = $i12 & 65535;

     label08:
        if i4 == 6 goto label09;

        if i4 == 10 goto label09;

        if i4 == 26 goto label09;

        goto label10;

     label09:
        i15 = i15 + 1;

     label10:
        i16 = i16 + 1;

        goto label06;

     label11:
        staticinvoke <com.android.server.EventLogTags: void writePowerSleepRequested(int)>(i15);

     label12:
        $i11 = i1 & 1;

        if $i11 == 0 goto label14;

     label13:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean reallyGoToSleepNoUpdateLocked(long,int)>(l0, i2);

     label14:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 1;

     label15:
        $r12 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r12;

     label16:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    private void handleAttentiveTimeout()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 16384;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleBatteryStateChangedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 256;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void handleSandman()
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        boolean z0, $z3, $z5, $z6, $z7, $z8, $z9, z10, z11, z12, $z13, $z14;
        long l1;
        com.android.server.power.PowerManagerService$Clock $r1;
        android.service.dreams.DreamManagerInternal $r2, r14, r15, $r16;
        android.content.Context $r3;
        java.lang.String $r4, $r10;
        java.lang.Throwable $r11, $r12;
        java.lang.Object r13, r17;
        java.lang.StringBuilder r18;
        byte b14;

        r0 := @this: com.android.server.power.PowerManagerService;

        r13 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r13;

     label01:
        r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled> = 0;

        i0 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

     label02:
        z10 = 1;

        if z0 == 0 goto label09;

     label03:
        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z7 == 0 goto label09;

        $z8 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDreamLocked()>();

        if $z8 != 0 goto label06;

        $z9 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDozeLocked()>();

        if $z9 == 0 goto label05;

     label04:
        goto label06;

     label05:
        z11 = 0;

        goto label07;

     label06:
        z11 = 1;

     label07:
        r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned> = 0;

     label08:
        goto label10;

     label09:
        z11 = 0;

     label10:
        exitmonitor r13;

     label11:
        r14 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        if r14 == null goto label15;

        if z11 == 0 goto label14;

        virtualinvoke r14.<android.service.dreams.DreamManagerInternal: void stopDream(boolean)>(0);

        r15 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        if i0 != 3 goto label12;

        goto label13;

     label12:
        z10 = 0;

     label13:
        virtualinvoke r15.<android.service.dreams.DreamManagerInternal: void startDream(boolean)>(z10);

     label14:
        $r16 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        z12 = virtualinvoke $r16.<android.service.dreams.DreamManagerInternal: boolean isDreaming()>();

        goto label16;

     label15:
        z12 = 0;

     label16:
        r0.<com.android.server.power.PowerManagerService: boolean mDozeStartInProgress> = 0;

        r17 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r17;

        if z11 == 0 goto label22;

        if z12 == 0 goto label22;

     label17:
        $i11 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted> = $i11;

     label18:
        if i0 != 3 goto label21;

     label19:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Dozing...");

     label20:
        goto label22;

     label21:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Dreaming...");

     label22:
        $z13 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

        if $z13 != 0 goto label44;

        $i2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i2 == i0 goto label24;

     label23:
        goto label44;

     label24:
        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l1 = interfaceinvoke $r1.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

     label25:
        if i0 != 2 goto label37;

        if z12 == 0 goto label30;

     label26:
        $z5 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDreamLocked()>();

        if $z5 == 0 goto label30;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        if $i3 < 0 goto label28;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        $i6 = $i5 - $i4;

        if $i7 >= $i6 goto label28;

        $z6 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z6 != 0 goto label28;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping dream because the battery appears to be draining faster than it is charging.  Battery level when dream started: ");

        $i8 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.  Battery level now: ");

        $i9 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.");

        $r10 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r10);

     label27:
        goto label30;

     label28:
        exitmonitor r17;

     label29:
        return;

     label30:
        $z14 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isItBedTimeYetLocked()>();

        if $z14 == 0 goto label35;

        $z3 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isAttentiveTimeoutExpired(long)>(l1);

        if $z3 == 0 goto label32;

     label31:
        b14 = 0 | 1;

        goto label33;

     label32:
        b14 = 0;

     label33:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>(l1, 2, b14, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label34:
        goto label41;

     label35:
        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int,java.lang.String,int,java.lang.String,int)>(l1, 0, "android.server.power:DREAM_FINISHED", 1000, $r4, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label36:
        goto label41;

     label37:
        if i0 != 3 goto label41;

        if z12 == 0 goto label40;

     label38:
        exitmonitor r17;

     label39:
        return;

     label40:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean reallyGoToSleepNoUpdateLocked(long,int)>(l1, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label41:
        exitmonitor r17;

     label42:
        if z12 == 0 goto label43;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        virtualinvoke $r2.<android.service.dreams.DreamManagerInternal: void stopDream(boolean)>(0);

     label43:
        return;

     label44:
        exitmonitor r17;

     label45:
        return;

     label46:
        $r12 := @caughtexception;

     label47:
        exitmonitor r17;

     label48:
        throw $r12;

     label49:
        $r11 := @caughtexception;

     label50:
        exitmonitor r13;

     label51:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label49;
        catch java.lang.Throwable from label03 to label04 with label49;
        catch java.lang.Throwable from label07 to label08 with label49;
        catch java.lang.Throwable from label10 to label11 with label49;
        catch java.lang.Throwable from label17 to label18 with label46;
        catch java.lang.Throwable from label19 to label20 with label46;
        catch java.lang.Throwable from label21 to label22 with label46;
        catch java.lang.Throwable from label22 to label23 with label46;
        catch java.lang.Throwable from label24 to label25 with label46;
        catch java.lang.Throwable from label26 to label27 with label46;
        catch java.lang.Throwable from label28 to label29 with label46;
        catch java.lang.Throwable from label30 to label31 with label46;
        catch java.lang.Throwable from label33 to label34 with label46;
        catch java.lang.Throwable from label35 to label36 with label46;
        catch java.lang.Throwable from label38 to label39 with label46;
        catch java.lang.Throwable from label40 to label41 with label46;
        catch java.lang.Throwable from label41 to label42 with label46;
        catch java.lang.Throwable from label44 to label45 with label46;
        catch java.lang.Throwable from label47 to label48 with label46;
        catch java.lang.Throwable from label50 to label51 with label49;
    }

    private void handleScreenBrightnessBoostTimeout()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 2048;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleSettingsChangedLocked()
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @this: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSettingsLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void handleUidStateChangeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mUidsChanging>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.power.PowerManagerService: boolean mUidsChanged> = 1;

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

     label2:
        return;
    }

    private void handleUserActivityTimeout()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int i0;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;
        com.android.server.power.PowerManagerService$WakeLock r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r4 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>(r4);

     label2:
        if i0 >= 0 goto label5;

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock,int)>(r4, i0);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void incrementBootCount()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        android.content.Context $r2, $r4;
        android.content.ContentResolver $r3, $r5;
        int $i0, i1;
        java.lang.Throwable $r6;
        android.provider.Settings$SettingNotFoundException $r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>($r3, "boot_count");

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        goto label8;

     label4:
        $r7 := @caughtexception;

        i1 = 0;

     label5:
        $r4 = virtualinvoke r0.<com.android.server.power.PowerManagerService: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = i1 + 1;

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r5, "boot_count", $i0);

     label6:
        exitmonitor r1;

     label7:
        return;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    private boolean isAttentiveTimeoutExpired(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, $l3, $l4;
        byte $b2, $b5;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        l1 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getAttentiveTimeoutLocked()>();

        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label1;

        $l3 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l4 = $l3 + l1;

        $b5 = l0 cmp $l4;

        if $b5 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isBeingKeptAwakeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, z3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z1 != 0 goto label2;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label2;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i3 = $i2 & 3;

        if $i3 != 0 goto label2;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private boolean isBeingKeptFromInattentiveSleepLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, z3;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z2 != 0 goto label2;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i1 = $i0 & 3;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private boolean isBeingKeptFromShowingInattentiveSleepWarningLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, $z3, z4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z2 != 0 goto label2;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z3 != 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        return z4;
    }

    private boolean isInteractiveInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean z0;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        z0 = staticinvoke <android.os.PowerManagerInternal: boolean isInteractive(int)>($i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isItBedTimeYetLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.power.PowerManagerService$Clock $r1;
        long $l0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l0 = interfaceinvoke $r1.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isAttentiveTimeoutExpired(long)>($l0);

        if $z1 == 0 goto label2;

        $z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptFromInattentiveSleepLocked()>();

        $z5 = $z4 ^ 1;

        return $z5;

     label2:
        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        $z3 = $z2 ^ 1;

        return $z3;
    }

    private boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        byte $b1, $b2;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 = r0.<com.android.server.power.PowerManagerService: long mMaximumScreenOffTimeoutFromDeviceAdmin>;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $b2 = l0 cmp 9223372036854775807L;

        if $b2 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isProfileBeingKeptAwakeLocked(com.android.server.power.PowerManagerService$ProfilePowerState, long)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$ProfilePowerState r1;
        long l0, $l1, $l2, $l3;
        byte $b4;
        int $i5, $i6, $i7, $i8;
        boolean $z0, z1;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$ProfilePowerState;

        l0 := @parameter1: long;

        $l2 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: long mLastUserActivityTime>;

        $l1 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: long mScreenOffTimeout>;

        $l3 = $l2 + $l1;

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label2;

        $i5 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary>;

        $i6 = $i5 & 32;

        if $i6 != 0 goto label2;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z0 == 0 goto label1;

        $i7 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary>;

        $i8 = $i7 & 16;

        if $i8 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private boolean isScreenBrightnessBoostedInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService$WakeLock r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i1 = r0.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        i0 = $i1 & 65535;

        if i0 == 6 goto label1;

        if i0 == 10 goto label1;

        if i0 == 26 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isValidBrightness(float)
    {
        float f0;
        byte $b0, $b1;
        boolean z0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isWakeLockLevelSupportedInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1, z2;
        android.hardware.display.DisplayManagerInternal $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

        z2 = 1;

        if i0 == 1 goto label08;

        if i0 == 6 goto label08;

        if i0 == 10 goto label08;

        if i0 == 26 goto label08;

        if i0 == 32 goto label03;

        if i0 == 64 goto label08;

        if i0 == 128 goto label08;

     label01:
        exitmonitor r1;

     label02:
        return 0;

     label03:
        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label05;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $z1 = virtualinvoke $r3.<android.hardware.display.DisplayManagerInternal: boolean isProximitySensorAvailable()>();

        if $z1 == 0 goto label05;

     label04:
        goto label06;

     label05:
        z2 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z2;

     label08:
        exitmonitor r1;

     label09:
        return 1;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public static void lambda$FUW_os-Z9SregUE_DR9vDwaRuXo(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void onUserAttention()>();

        return;
    }

    private void logSleepTimeoutRecapturedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$Clock $r1;
        long $l0, l2, l3;
        byte $b1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l2 = interfaceinvoke $r1.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $l0 = r0.<com.android.server.power.PowerManagerService: long mOverriddenTimeout>;

        l3 = $l0 - l2;

        $b1 = l3 cmp 0L;

        if $b1 < 0 goto label1;

        staticinvoke <com.android.server.EventLogTags: void writePowerSoftSleepRequested(long)>(l3);

        r0.<com.android.server.power.PowerManagerService: long mOverriddenTimeout> = -1L;

     label1:
        return;
    }

    public static void lowLevelReboot(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r0, $r4;
        java.lang.String $r3, $r7, r10, r11, r12, r13, r14;
        int $i1, $i2, $i3, $i4;
        java.lang.Throwable $r8;
        java.lang.Thread $r9;

        r10 := @parameter0: java.lang.String;

        r11 = r10;

        if r10 != null goto label01;

        r11 = "";

     label01:
        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("quiescent");

        if $z0 == 0 goto label02;

        <com.android.server.power.PowerManagerService: boolean sQuiescent> = 1;

        r12 = "";

        goto label03;

     label02:
        r12 = r11;

        $z1 = virtualinvoke r11.<java.lang.String: boolean endsWith(java.lang.String)>(",quiescent");

        if $z1 == 0 goto label03;

        <com.android.server.power.PowerManagerService: boolean sQuiescent> = 1;

        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        $r7 = "quiescent";

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        $i4 = $i3 - 1;

        r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label03:
        $z3 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("recovery");

        if $z3 != 0 goto label04;

        r13 = r12;

        $z2 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("recovery-update");

        if $z2 == 0 goto label05;

     label04:
        r13 = "recovery";

     label05:
        r14 = r13;

        $z4 = <com.android.server.power.PowerManagerService: boolean sQuiescent>;

        if $z4 == 0 goto label06;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",quiescent");

        r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reboot,");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.powerctl", $r3);

     label07:
        staticinvoke <java.lang.Thread: void sleep(long)>(20000L);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

     label10:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PowerManagerService", "Unexpected return from lowLevelReboot!");

        return;

        catch java.lang.InterruptedException from label07 to label08 with label09;
    }

    public static void lowLevelShutdown(java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r3, r4, r5;

        r4 := @parameter0: java.lang.String;

        r5 = r4;

        if r4 != null goto label1;

        r5 = "";

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shutdown,");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.powerctl", $r3);

        return;
    }

    private boolean maybeHideInattentiveSleepWarningLocked(long, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, l2;
        com.android.server.power.InattentiveSleepWarningController $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i3;
        byte $b4, $b5;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getAttentiveTimeoutLocked()>();

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.InattentiveSleepWarningController mInattentiveSleepWarningOverlayController>;

        $z0 = virtualinvoke $r1.<com.android.server.power.InattentiveSleepWarningController: boolean isShown()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i3 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i3 == 1 goto label2;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.InattentiveSleepWarningController mInattentiveSleepWarningOverlayController>;

        virtualinvoke $r2.<com.android.server.power.InattentiveSleepWarningController: void dismiss(boolean)>(0);

        return 1;

     label2:
        $b4 = l2 cmp 0L;

        if $b4 < 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptFromShowingInattentiveSleepWarningLocked()>();

        if $z1 != 0 goto label4;

        $b5 = l0 cmp l1;

        if $b5 >= 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.InattentiveSleepWarningController mInattentiveSleepWarningOverlayController>;

        virtualinvoke $r3.<com.android.server.power.InattentiveSleepWarningController: void dismiss(boolean)>(1);

        return 1;
    }

    private void maybeUpdateForegroundProfileLastActivityLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2;
        com.android.server.power.PowerManagerService$ProfilePowerState r1;
        int $i1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        byte $b3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mForegroundProfile>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r1 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r3;

        if r1 == null goto label1;

        $l2 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: long mLastUserActivityTime>;

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$ProfilePowerState: long mLastUserActivityTime> = l0;

     label1:
        return;
    }

    private void napInternal(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean napNoUpdateLocked(long,int)>(l0, i1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean napNoUpdateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2;
        int i1, $i4;
        byte $b3;
        boolean $z0, $z1;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label5;

        $i4 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i4 != 1 goto label5;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label5;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label1;

        goto label5;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "nap");

     label2:
        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nap time (uid ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r4);

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned> = 1;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void setWakefulnessLocked(int,int,long)>(2, 0, l0);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 1;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r5;

     label5:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static native void nativeAcquireSuspendBlocker(java.lang.String);

    private static native boolean nativeForceSuspend();

    private native void nativeInit();

    private static native void nativeReleaseSuspendBlocker(java.lang.String);

    private static native void nativeSendPowerHint(int, int);

    private static native void nativeSetAutoSuspend(boolean);

    private static native void nativeSetFeature(int, int);

    private static native void nativeSetInteractive(boolean);

    private static native void nativeSetPowerBoost(int, int);

    private static native boolean nativeSetPowerMode(int, boolean);

    private boolean needDisplaySuspendBlockerLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z1 = virtualinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean isBrightOrDim()>();

        if $z1 == 0 goto label3;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z4 = $r4.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        if $z4 == 0 goto label2;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z5 == 0 goto label2;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        if $z6 != 0 goto label3;

     label2:
        return 1;

     label3:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i0 = $r2.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i0 != 1 goto label4;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i2 = $r3.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        if $i2 != 2 goto label4;

        return 1;

     label4:
        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z2 == 0 goto label5;

        return 1;

     label5:
        $i1 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i1 != 3 goto label6;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDozeStartInProgress>;

        if $z3 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    private void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4, $r5;
        android.os.WorkSource $r3;
        int $i0, $i1, $i2;
        com.android.server.power.Notifier $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mDisabled>;

        if $z1 != 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired> = 1;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r5 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r6.<com.android.server.power.Notifier: void onWakeLockAcquired(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>($i2, $r5, $r4, $i1, $i0, $r3, $r2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void restartNofifyLongTimerLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

     label1:
        return;
    }

    private void notifyWakeLockChangingLocked(com.android.server.power.PowerManagerService$WakeLock, int, java.lang.String, java.lang.String, int, int, android.os.WorkSource, java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r2, r3, r5, $r6, $r8, $r9;
        android.os.WorkSource r4, $r7;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r10;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: android.os.WorkSource;

        r5 := @parameter7: java.lang.String;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired>;

        if $z1 == 0 goto label1;

        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i5 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r9 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r8 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i4 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r7 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r6 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r10.<com.android.server.power.Notifier: void onWakeLockChanging(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String,int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>($i5, $r9, $r8, $i4, $i3, $r7, $r6, i0, r2, r3, i1, i2, r4, r5);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockLongFinishedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void restartNofifyLongTimerLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

     label1:
        return;
    }

    private void notifyWakeLockLongFinishedLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0;
        java.lang.String $r2, $r4;
        android.os.WorkSource $r3;
        int $i0;
        com.android.server.power.Notifier $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedLong>;

        if $z0 == 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedLong> = 0;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r5.<com.android.server.power.Notifier: void onLongPartialWakeLockFinish(java.lang.String,int,android.os.WorkSource,java.lang.String)>($r4, $i0, $r3, $r2);

     label1:
        return;
    }

    private void notifyWakeLockLongStartedLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4;
        android.os.WorkSource $r3;
        int $i0;
        com.android.server.power.Notifier $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mDisabled>;

        if $z1 != 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedLong> = 1;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r5.<com.android.server.power.Notifier: void onLongPartialWakeLockStart(java.lang.String,int,android.os.WorkSource,java.lang.String)>($r4, $i0, $r3, $r2);

     label1:
        return;
    }

    private void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4, $r5;
        android.os.WorkSource $r3;
        int $i0, $i1, $i2;
        com.android.server.power.Notifier $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired>;

        if $z1 == 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired> = 0;

        r1.<com.android.server.power.PowerManagerService$WakeLock: long mAcquireTime> = 0L;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r5 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r6.<com.android.server.power.Notifier: void onWakeLockReleased(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>($i2, $r5, $r4, $i1, $i0, $r3, $r2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockLongFinishedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

     label1:
        return;
    }

    private void onUserAttention()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        com.android.server.power.PowerManagerService$Clock $r3;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l0 = interfaceinvoke $r3.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>($l0, 4, 0, 1000);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void powerHintInternal(int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;
        com.android.server.power.batterysaver.BatterySaverController $r1;
        boolean $z0;
        com.android.server.power.PowerManagerService$NativeWrapper $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 8 goto label1;

        goto label2;

     label1:
        if i1 != 1 goto label2;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverController mBatterySaverController>;

        $z0 = virtualinvoke $r1.<com.android.server.power.batterysaver.BatterySaverController: boolean isLaunchBoostDisabled()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r2.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSendPowerHint(int,int)>(i0, i1);

        return;
    }

    private boolean reallyGoToSleepNoUpdateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2;
        int i1, $i4;
        byte $b3;
        boolean $z0, $z1;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label5;

        $i4 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i4 == 0 goto label5;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label5;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label1;

        goto label5;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "reallyGoToSleep");

     label2:
        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sleeping (uid ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r4);

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void setWakefulnessLocked(int,int,long)>(0, 2, l0);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 1;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r5;

     label5:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void releaseWakeLockInternal(android.os.IBinder, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i2;
        java.lang.Object r1, $r3;
        java.util.ArrayList $r2;
        android.os.IBinder $r4, r6;
        java.lang.Throwable $r5;
        com.android.server.power.PowerManagerService$WakeLock r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        r6 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r6);

     label02:
        if i1 >= 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r7 = (com.android.server.power.PowerManagerService$WakeLock) $r3;

     label06:
        $i2 = i0 & 1;

        if $i2 == 0 goto label08;

     label07:
        r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity> = 1;

     label08:
        $r4 = r7.<com.android.server.power.PowerManagerService$WakeLock: android.os.IBinder mLock>;

        interfaceinvoke $r4.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r7, 0);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock,int)>(r7, i1);

        exitmonitor r1;

     label09:
        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock, int)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.power.PowerManagerService$UidState r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: com.android.server.power.PowerManagerService$UidState mUidState>;

        $i1 = r2.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        $i2 = $i1 - 1;

        r2.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks> = $i2;

        $i3 = r2.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        if $i3 > 0 goto label1;

        $i4 = r2.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        if $i4 != 20 goto label1;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $i5 = r2.<com.android.server.power.PowerManagerService$UidState: int mUid>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>($i5);

     label1:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        $i6 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i7 = $i6 | 1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i7;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void restartNofifyLongTimerLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        com.android.server.power.PowerManagerService$Clock $r2;
        long $l0, $l3, $l5, $l6;
        int $i1, $i2;
        byte $b4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l0 = interfaceinvoke $r2.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        r1.<com.android.server.power.PowerManagerService$WakeLock: long mAcquireTime> = $l0;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i2 = $i1 & 65535;

        if $i2 != 1 goto label1;

        $l3 = r0.<com.android.server.power.PowerManagerService: long mNotifyLongScheduled>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        $l5 = r1.<com.android.server.power.PowerManagerService$WakeLock: long mAcquireTime>;

        $l6 = $l5 + 60000L;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void enqueueNotifyLongMsgLocked(long)>($l6);

     label1:
        return;
    }

    private void scheduleAttentiveTimeout(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>(r1, l0);

        return;
    }

    private void scheduleSandmanLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.os.Message r1;
        boolean $z0;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled> = 1;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void scheduleUserInactivityTimeout(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>(r1, l0);

        return;
    }

    private void setAttentionLightInternal(boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.lights.LogicalLight r3;
        byte b1;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.lights.LogicalLight mAttentionLight>;

        exitmonitor r1;

     label04:
        if r3 == null goto label07;

        if z0 == 0 goto label05;

        b1 = 3;

        goto label06;

     label05:
        b1 = 0;

     label06:
        virtualinvoke r3.<com.android.server.lights.LogicalLight: void setFlashing(int,int,int,int)>(i0, 2, b1, 0);

     label07:
        return;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void setDozeAfterScreenOffInternal(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOff> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setDozeOverrideFromDreamManagerInternal(int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        android.content.Context $r3;
        float $f0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i2 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        if $i2 != i0 goto label2;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager>;

        if $i5 == i1 goto label3;

     label2:
        r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager> = i0;

        r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager> = i1;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $f0 = staticinvoke <com.android.internal.BrightnessSynchronizer: float brightnessIntToFloat(android.content.Context,int)>($r3, i1);

        r0.<com.android.server.power.PowerManagerService: float mDozeScreenBrightnessOverrideFromDreamManagerFloat> = $f0;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i3 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setDrawWakeLockOverrideFromSidekickInternal(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDrawWakeLockOverrideFromSidekick>;

        if $z1 == z0 goto label2;

        r0.<com.android.server.power.PowerManagerService: boolean mDrawWakeLockOverrideFromSidekick> = z0;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setHalAutoSuspendModeLocked(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        com.android.server.power.PowerManagerService$NativeWrapper $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled>;

        if z0 == $z1 goto label4;

        r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled> = z0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setHalAutoSuspend(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, $r5);

     label1:
        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r6.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetAutoSuspend(boolean)>(z0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r7;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setHalInteractiveModeLocked(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        com.android.server.power.PowerManagerService$NativeWrapper $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled>;

        if z0 == $z1 goto label4;

        r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled> = z0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setHalInteractive(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, $r5);

     label1:
        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r6.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetInteractive(boolean)>(z0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r7;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean setLowPowerModeInternal(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z1 == 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine>;

        virtualinvoke $r3.<com.android.server.power.batterysaver.BatterySaverStateMachine: void setBatterySaverEnabledManually(boolean)>(z0);

        exitmonitor r1;

     label4:
        return 1;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setPowerBoostInternal(int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;
        com.android.server.power.PowerManagerService$NativeWrapper $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        virtualinvoke $r1.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetPowerBoost(int,int)>(i0, i1);

        return;
    }

    private boolean setPowerModeInternal(int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean z0, $z1;
        com.android.server.power.PowerManagerService$NativeWrapper $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        $z1 = virtualinvoke $r1.<com.android.server.power.PowerManagerService$NativeWrapper: boolean nativeSetPowerMode(int,boolean)>(i0, z0);

        return $z1;
    }

    private void setScreenBrightnessOverrideFromWindowManagerInternal(float)
    {
        com.android.server.power.PowerManagerService r0;
        float f0, $f1;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        f0 := @parameter0: float;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $f1 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager>;

        $z0 = staticinvoke <com.android.internal.BrightnessSynchronizer: boolean floatEquals(float,float)>($f1, f0);

        if $z0 != 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager> = f0;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1;
        java.lang.Object r1;
        byte $b2;
        int $i3, $i4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager> = l0;

        staticinvoke <com.android.server.EventLogTags: void writeUserActivityTimeoutOverride(long)>(l0);

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i3 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setUserInactiveOverrideFromWindowManagerInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mUserInactiveOverrideFromWindowManager> = 1;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean setWakeLockDisabledStateLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.power.PowerManagerService$UidState r2, $r6, $r7, $r8;
        com.android.server.power.PowerManagerService$Constants $r3;
        boolean $z0, $z1, $z2, z3, z4, z5, $z6, $z7;
        int[] $r4, $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i2 = $i1 & 65535;

        if $i2 != 1 goto label6;

        z3 = 0;

        z4 = 0;

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        if i0 < 10000 goto label5;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Constants mConstants>;

        $z0 = $r3.<com.android.server.power.PowerManagerService$Constants: boolean NO_CACHED_WAKE_LOCKS>;

        if $z0 == 0 goto label4;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mForceSuspendActive>;

        if $z1 != 0 goto label2;

        $r6 = r1.<com.android.server.power.PowerManagerService$WakeLock: com.android.server.power.PowerManagerService$UidState mUidState>;

        $z2 = $r6.<com.android.server.power.PowerManagerService$UidState: boolean mActive>;

        if $z2 != 0 goto label1;

        $r7 = r1.<com.android.server.power.PowerManagerService$WakeLock: com.android.server.power.PowerManagerService$UidState mUidState>;

        $i8 = $r7.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        if $i8 == 20 goto label1;

        $r8 = r1.<com.android.server.power.PowerManagerService$WakeLock: com.android.server.power.PowerManagerService$UidState mUidState>;

        $i9 = $r8.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        if $i9 <= 11 goto label1;

        goto label2;

     label1:
        z5 = 0;

        goto label3;

     label2:
        z5 = 1;

     label3:
        z4 = z5;

     label4:
        z3 = z4;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z6 == 0 goto label5;

        r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: com.android.server.power.PowerManagerService$UidState mUidState>;

        z3 = z4;

        $r4 = r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleWhitelist>;

        $i4 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r4, i0);

        if $i4 >= 0 goto label5;

        z3 = z4;

        $r5 = r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleTempWhitelist>;

        $i5 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r5, i0);

        if $i5 >= 0 goto label5;

        z3 = z4;

        $i6 = r2.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        if $i6 == 20 goto label5;

        z3 = z4;

        $i7 = r2.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

        if $i7 <= 5 goto label5;

        z3 = 1;

     label5:
        $z7 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mDisabled>;

        if $z7 == z3 goto label6;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mDisabled> = z3;

        return 1;

     label6:
        return 0;
    }

    private boolean shouldBoostScreenBrightness()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean shouldNapAtBedTimeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, z2;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        if $z1 == 0 goto label1;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean shouldUseProximitySensorLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, z1;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(boolean, int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        if $z2 != 0 goto label1;

        return 0;

     label1:
        if z0 == 0 goto label2;

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z7 != 0 goto label2;

        if i0 != 4 goto label2;

        return 0;

     label2:
        if z0 != 0 goto label3;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z6 == 0 goto label3;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        if $i3 != 4 goto label3;

        if z1 != 0 goto label3;

        return 0;

     label3:
        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z8 == 0 goto label4;

        $i2 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i2 != 2 goto label4;

        return 0;

     label4:
        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mTheaterModeEnabled>;

        if $z3 == 0 goto label5;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig>;

        if $z5 != 0 goto label5;

        return 0;

     label5:
        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mAlwaysOnEnabled>;

        if $z4 == 0 goto label6;

        $i1 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i1 != 3 goto label6;

        return 0;

     label6:
        return 1;
    }

    private void shutdownOrRebootInternal(int, boolean, java.lang.String, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean z0, z1, $z2, $z3, $z5, $z6;
        java.lang.String $r1, r10;
        android.os.Handler $r2, $r5, $r6;
        java.lang.IllegalStateException $r3;
        com.android.server.power.PowerManagerService$2 $r4;
        java.lang.UnsupportedOperationException $r7;
        java.lang.Throwable $r8, $r9;
        android.os.Message r12;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r10 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $r1 = "userspace";

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label02;

        $z6 = staticinvoke <android.os.PowerManager: boolean isRebootingUserspaceSupportedImpl()>();

        if $z6 == 0 goto label01;

        staticinvoke <com.android.server.UserspaceRebootLogger: void noteUserspaceRebootWasRequested()>();

        goto label02;

     label01:
        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Attempted userspace reboot on a device that doesn\'t support it");

        throw $r7;

     label02:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        if $r2 == null goto label03;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z5 != 0 goto label04;

     label03:
        $z3 = staticinvoke <com.android.server.RescueParty: boolean isAttemptingFactoryReset()>();

        if $z3 == 0 goto label12;

        staticinvoke <com.android.server.power.PowerManagerService: void lowLevelReboot(java.lang.String)>(r10);

     label04:
        $r4 = new com.android.server.power.PowerManagerService$2;

        specialinvoke $r4.<com.android.server.power.PowerManagerService$2: void <init>(com.android.server.power.PowerManagerService,int,boolean,java.lang.String)>(r0, i0, z0, r10);

        $r5 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r12 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r5, $r4);

        virtualinvoke r12.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r6 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        virtualinvoke $r6.<android.os.Handler: boolean sendMessage(android.os.Message)>(r12);

        if z1 == 0 goto label11;

        entermonitor $r4;

     label05:
        virtualinvoke $r4.<java.lang.Object: void wait()>();

     label06:
        goto label05;

     label07:
        $r9 := @caughtexception;

     label08:
        exitmonitor $r4;

     label09:
        throw $r9;

     label10:
        $r8 := @caughtexception;

        goto label06;

     label11:
        return;

     label12:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too early to call shutdown() or reboot()");

        throw $r3;

        catch java.lang.InterruptedException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private void updateAttentiveStateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l2, $l3, $l4, l9, l10;
        int i1, $i8;
        boolean z0, $z1;
        byte $b5, $b6, $b7, $b12;
        android.os.Handler $r1;
        com.android.server.power.InattentiveSleepWarningController $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        l9 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getAttentiveTimeoutLocked()>();

        $l3 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        l2 = $l3 + l9;

        $l4 = r0.<com.android.server.power.PowerManagerService: long mAttentiveWarningDurationConfig>;

        l10 = l2 - $l4;

        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean maybeHideInattentiveSleepWarningLocked(long,long)>(l0, l10);

        $b5 = l9 cmp 0L;

        if $b5 < 0 goto label5;

        if z0 != 0 goto label1;

        $i8 = i1 & 19122;

        if $i8 == 0 goto label5;

     label1:
        $r1 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(5);

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptFromShowingInattentiveSleepWarningLocked()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        $b6 = l0 cmp l10;

        if $b6 >= 0 goto label3;

        goto label4;

     label3:
        l10 = -1L;

        $b7 = l0 cmp l2;

        if $b7 >= 0 goto label4;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.InattentiveSleepWarningController mInattentiveSleepWarningOverlayController>;

        virtualinvoke $r2.<com.android.server.power.InattentiveSleepWarningController: void show()>();

        l10 = l2;

     label4:
        $b12 = l10 cmp 0L;

        if $b12 < 0 goto label5;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleAttentiveTimeout(long)>(l10);

     label5:
        return;
    }

    private boolean updateDisplayPowerStateLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9, $z10, z11;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        float $f0, f1, $f2;
        android.hardware.display.DisplayManagerInternal $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        $i1 = i0 & 14399;

        if $i1 == 0 goto label11;

        $i2 = i0 & 4096;

        if $i2 == 0 goto label01;

        <com.android.server.power.PowerManagerService: boolean sQuiescent> = 0;

     label01:
        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i3 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getDesiredScreenPolicyLocked()>();

        $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy> = $i3;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z2 != 0 goto label02;

        z7 = 0;

        f1 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingDefault>;

        goto label06;

     label02:
        $f0 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager>;

        $z3 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(float)>($f0);

        if $z3 == 0 goto label03;

        z7 = 0;

        f1 = r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessOverrideFromWindowManager>;

        goto label06;

     label03:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        if $i4 != 1 goto label04;

        z7 = 1;

        goto label05;

     label04:
        z7 = 0;

     label05:
        f1 = #NaNF;

     label06:
        $r11 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r11.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride> = f1;

        $r12 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r12.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness> = z7;

        $r13 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z8 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldUseProximitySensorLocked()>();

        $r13.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor> = $z8;

        $r14 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z9 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldBoostScreenBrightness()>();

        $r14.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness> = $z9;

        $r15 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerRequestFromBatterySaverPolicy(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>($r15);

        $r16 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i10 = $r16.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i10 != 1 goto label09;

        $r6 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        $r6.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = $i5;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i7 = $i6 & 128;

        if $i7 == 0 goto label08;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mDrawWakeLockOverrideFromSidekick>;

        if $z6 != 0 goto label08;

        $r7 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i8 = $r7.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        if $i8 != 4 goto label07;

        $r10 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r10.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = 3;

     label07:
        $r8 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i9 = $r8.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        if $i9 != 6 goto label08;

        $r9 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r9.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = 2;

     label08:
        $r17 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $f2 = r0.<com.android.server.power.PowerManagerService: float mDozeScreenBrightnessOverrideFromDreamManagerFloat>;

        $r17.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness> = $f2;

        goto label10;

     label09:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r2.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = 0;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r3.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness> = #NaNF;

     label10:
        $r5 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        $z5 = virtualinvoke $r5.<android.hardware.display.DisplayManagerInternal: boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest,boolean)>($r4, $z4);

        r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady> = $z5;

        r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity> = 0;

     label11:
        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z10 == 0 goto label12;

        if z0 != 0 goto label12;

        z11 = 1;

        goto label13;

     label12:
        z11 = 0;

     label13:
        return z11;
    }

    private void updateDreamLocked(int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1;
        boolean z0, $z1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = i0 & 17399;

        if $i1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()>();

     label2:
        return;
    }

    private void updateIsPoweredLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11, z14, $z15, $z16;
        long l0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14;
        android.os.BatteryManagerInternal $r2, $r3, $r4, $r5;
        com.android.server.power.WirelessChargerDetector $r6;
        com.android.server.power.PowerManagerService$Clock $r7;
        com.android.server.power.Notifier $r8, $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r13, $r15;
        android.content.Context $r14;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r16;

        r0 := @this: com.android.server.power.PowerManagerService;

        i12 := @parameter0: int;

        $i1 = i12 & 256;

        if $i1 == 0 goto label5;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        i13 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $z1 = virtualinvoke $r2.<android.os.BatteryManagerInternal: boolean isPowered(int)>(7);

        r0.<com.android.server.power.PowerManagerService: boolean mIsPowered> = $z1;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $i2 = virtualinvoke $r3.<android.os.BatteryManagerInternal: int getPlugType()>();

        r0.<com.android.server.power.PowerManagerService: int mPlugType> = $i2;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $i3 = virtualinvoke $r4.<android.os.BatteryManagerInternal: int getBatteryLevel()>();

        r0.<com.android.server.power.PowerManagerService: int mBatteryLevel> = $i3;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $z2 = virtualinvoke $r5.<android.os.BatteryManagerInternal: boolean getBatteryLevelLow()>();

        r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow> = $z2;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if z0 != $z3 goto label1;

        $i11 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        if i13 == $i11 goto label4;

     label1:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i5 = $i4 | 64;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i5;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        z14 = virtualinvoke $r6.<com.android.server.power.WirelessChargerDetector: boolean update(boolean,int)>($z4, $i6);

        $r7 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l0 = interfaceinvoke $r7.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $z5 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(boolean,int,boolean)>(z0, i13, z14);

        if $z5 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.server.power:PLUGGED:");

        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getOpPackageName()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int,java.lang.String,int,java.lang.String,int)>(l0, 3, $r13, 1000, $r15, 1000);

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, 0, 0, 1000);

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z7 == 0 goto label4;

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z8 == 0 goto label3;

        $z9 = staticinvoke <android.os.BatteryManager: boolean isPlugWired(int)>(i13);

        if $z9 != 0 goto label3;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $z10 = staticinvoke <android.os.BatteryManager: boolean isPlugWired(int)>($i9);

        if $z10 == 0 goto label3;

        $r9 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i10 = r0.<com.android.server.power.PowerManagerService: int mUserId>;

        virtualinvoke $r9.<com.android.server.power.Notifier: void onWiredChargingStarted(int)>($i10);

        goto label4;

     label3:
        if z14 == 0 goto label4;

        $r8 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mUserId>;

        virtualinvoke $r8.<com.android.server.power.Notifier: void onWirelessChargingStarted(int,int)>($i8, $i7);

     label4:
        $r16 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine>;

        $z15 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        $i14 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $z16 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        virtualinvoke $r16.<com.android.server.power.batterysaver.BatterySaverStateMachine: void setBatteryStatus(boolean,int,boolean)>($z15, $i14, $z16);

     label5:
        return;
    }

    private void updatePowerStateLocked()
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, $i2, $i3, $i4, $i5, i7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r2;
        com.android.server.power.PowerManagerService$Clock $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label12;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        if $i2 != 0 goto label01;

        goto label12;

     label01:
        $r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label02;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PowerManagerService", "Power manager lock was not held when calling updatePowerStateLocked");

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "updatePowerState");

     label03:
        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)>($i3);

        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateStayOnLocked(int)>($i4);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateScreenBrightnessBoostLocked(int)>($i5);

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l0 = interfaceinvoke $r3.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

     label04:
        i7 = 0;

     label05:
        i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

     label06:
        i7 = i7 | i1;

     label07:
        r0.<com.android.server.power.PowerManagerService: int mDirty> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockSummaryLocked(int)>(i1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)>(l0, i1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateAttentiveStateLocked(long,int)>(l0, i1);

        $z3 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean updateWakefulnessLocked(int)>(i1);

        if $z3 != 0 goto label10;

     label08:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateProfilesLocked(long)>(l0);

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean updateDisplayPowerStateLocked(int)>(i7);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateDreamLocked(int,boolean)>(i7, $z2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void finishWakefulnessChangeIfNeededLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSuspendBlockerLocked()>();

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return;

     label10:
        goto label05;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r4;

     label12:
        return;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    private void updateProfilesLocked(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, $i2, i3;
        com.android.server.power.PowerManagerService$ProfilePowerState r1;
        android.util.SparseArray $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r4;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isProfileBeingKeptAwakeLocked(com.android.server.power.PowerManagerService$ProfilePowerState,long)>(r1, l0);

        if $z0 == 0 goto label2;

        r1.<com.android.server.power.PowerManagerService$ProfilePowerState: boolean mLockingNotified> = 0;

        goto label3;

     label2:
        $z1 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: boolean mLockingNotified>;

        if $z1 != 0 goto label3;

        r1.<com.android.server.power.PowerManagerService$ProfilePowerState: boolean mLockingNotified> = 1;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: int mUserId>;

        virtualinvoke $r5.<com.android.server.power.Notifier: void onProfileTimeout(int)>($i2);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    private void updateScreenBrightnessBoostLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i2;
        long l1, $l3, l6, l7;
        android.os.Message r1;
        boolean $z0;
        com.android.server.power.PowerManagerService$Clock $r2;
        android.os.Handler $r3, $r4, $r5;
        byte $b4, $b5;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i2 = i0 & 2048;

        if $i2 == 0 goto label2;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l1 = interfaceinvoke $r2.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(3);

        l6 = r0.<com.android.server.power.PowerManagerService: long mLastScreenBrightnessBoostTime>;

        $l3 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b4 = l6 cmp $l3;

        if $b4 <= 0 goto label1;

        l7 = l6 + 5000L;

        $b5 = l7 cmp l1;

        if $b5 <= 0 goto label1;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r5 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>(r1, l7);

        return;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l1, 0, 0, 1000);

     label2:
        return;
    }

    private void updateSettingsLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.content.ContentResolver r1, $r4;
        android.content.Context $r2, $r3, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, z10, z11, $z12;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19;
        long $l4, $l6, $l9;
        android.hardware.display.AmbientDisplayConfiguration $r5;
        com.android.server.power.SystemPropertiesWrapper $r6, $r8;
        java.lang.String $r7, r11;
        com.android.server.power.PowerManagerService$NativeWrapper r9;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        i16 = (int) $z0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_enabled", i16, -2);

        if $i0 == 0 goto label01;

        z7 = 1;

        goto label02;

     label01:
        z7 = 0;

     label02:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting> = z7;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        i17 = (int) $z1;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_activate_on_sleep", i17, -2);

        if $i1 == 0 goto label03;

        z8 = 1;

        goto label04;

     label03:
        z8 = 0;

     label04:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting> = z8;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        i18 = (int) $z2;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_activate_on_dock", i18, -2);

        if $i2 == 0 goto label05;

        z9 = 1;

        goto label06;

     label05:
        z9 = 0;

     label06:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting> = z9;

        $i3 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_off_timeout", 15000, -2);

        $l4 = (long) $i3;

        r0.<com.android.server.power.PowerManagerService: long mScreenOffTimeoutSetting> = $l4;

        $i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "sleep_timeout", -1, -2);

        $l6 = (long) $i5;

        r0.<com.android.server.power.PowerManagerService: long mSleepTimeoutSetting> = $l6;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mAttentiveTimeoutConfig>;

        $i8 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "attentive_timeout", $i7, -2);

        $l9 = (long) $i8;

        r0.<com.android.server.power.PowerManagerService: long mAttentiveTimeoutSetting> = $l9;

        $i10 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "stay_on_while_plugged_in", 1);

        r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting> = $i10;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i11 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "theater_mode_on", 0);

        if $i11 != 1 goto label07;

        z10 = 1;

        goto label08;

     label07:
        z10 = 0;

     label08:
        r0.<com.android.server.power.PowerManagerService: boolean mTheaterModeEnabled> = z10;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.AmbientDisplayConfiguration mAmbientDisplayConfiguration>;

        $z3 = virtualinvoke $r5.<android.hardware.display.AmbientDisplayConfiguration: boolean alwaysOnEnabled(int)>(-2);

        r0.<com.android.server.power.PowerManagerService: boolean mAlwaysOnEnabled> = $z3;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mSupportsDoubleTapWakeConfig>;

        if $z4 == 0 goto label11;

        $i15 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "double_tap_to_wake", 0, -2);

        if $i15 == 0 goto label09;

        z11 = 1;

        goto label10;

     label09:
        z11 = 0;

     label10:
        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mDoubleTapWakeEnabled>;

        if z11 == $z6 goto label11;

        r0.<com.android.server.power.PowerManagerService: boolean mDoubleTapWakeEnabled> = z11;

        r9 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$NativeWrapper mNativeWrapper>;

        i19 = (int) z11;

        virtualinvoke r9.<com.android.server.power.PowerManagerService$NativeWrapper: void nativeSetFeature(int,int)>(1, i19);

     label11:
        $r10 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $z12 = staticinvoke <android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)>($r10);

        if $z12 == 0 goto label12;

        r11 = "1";

        goto label13;

     label12:
        r11 = "0";

     label13:
        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SystemPropertiesWrapper mSystemProperties>;

        $r7 = interfaceinvoke $r6.<com.android.server.power.SystemPropertiesWrapper: java.lang.String get(java.lang.String,java.lang.String)>("sys.retaildemo.enabled", null);

        $z5 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z5 != 0 goto label14;

        $r8 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SystemPropertiesWrapper mSystemProperties>;

        interfaceinvoke $r8.<com.android.server.power.SystemPropertiesWrapper: void set(java.lang.String,java.lang.String)>("sys.retaildemo.enabled", r11);

     label14:
        $i12 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_brightness_mode", 0, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting> = $i12;

        $i13 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i14 = $i13 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i14;

        return;
    }

    private void updateStayOnLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1, $z2, $z3;
        android.os.BatteryManagerInternal $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i1 = i0 & 288;

        if $i1 == 0 goto label3;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        if $i2 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $z2 = virtualinvoke $r1.<android.os.BatteryManagerInternal: boolean isPowered(int)>($i5);

        r0.<com.android.server.power.PowerManagerService: boolean mStayOn> = $z2;

        goto label2;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mStayOn> = 0;

     label2:
        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z3 == z0 goto label3;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i3 | 128;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

     label3:
        return;
    }

    private void updateSuspendBlockerLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11;
        int $i0, $i1;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1;
        com.android.server.power.SuspendBlocker $r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label01;

        z10 = 1;

        goto label02;

     label01:
        z10 = 0;

     label02:
        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean needDisplaySuspendBlockerLocked()>();

        z1 = z0 ^ 1;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        z2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean isBrightOrDim()>();

        if z1 != 0 goto label03;

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        if $z9 == 0 goto label03;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalAutoSuspendModeLocked(boolean)>(0);

     label03:
        if z10 == 0 goto label04;

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        if $z8 != 0 goto label04;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker>;

        interfaceinvoke $r5.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker> = 1;

     label04:
        if z0 == 0 goto label05;

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        if $z7 != 0 goto label05;

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r4.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 1;

     label05:
        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        if $z11 == 0 goto label07;

        if z2 != 0 goto label06;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z6 == 0 goto label07;

     label06:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalInteractiveModeLocked(boolean)>(z2);

     label07:
        if z10 != 0 goto label08;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        if $z5 == 0 goto label08;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker>;

        interfaceinvoke $r3.<com.android.server.power.SuspendBlocker: void release()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker> = 0;

     label08:
        if z0 != 0 goto label09;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        if $z4 == 0 goto label09;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r2.<com.android.server.power.SuspendBlocker: void release()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 0;

     label09:
        if z1 == 0 goto label10;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        if $z3 == 0 goto label10;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalAutoSuspendModeLocked(boolean)>(1);

     label10:
        return;
    }

    private void updateUserActivitySummaryLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l1, l2, l3, $l12, $l15, $l16, $l17, $l20, $l26, l31, l33, l34, $l35, l37, l38, l40, l42, l44, l45;
        boolean z0;
        int $i4, $i5, $i6, $i8, $i9, $i10, $i23, $i24, $i25, $i29, $i30, i32, $i39, $i41, i43, $i46, $i47;
        android.os.Handler $r1;
        byte $b7, $b11, $b13, $b14, $b18, $b19, $b21, $b22, $b27, $b28, $b36, $b48;
        com.android.server.power.AttentionDetector $r2;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r3, $r4, $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        l31 := @parameter0: long;

        i32 := @parameter1: int;

        $i4 = i32 & 39;

        if $i4 == 0 goto label18;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(1);

        $i5 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i5 == 1 goto label02;

        $i29 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i29 == 2 goto label02;

        $i30 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i30 != 3 goto label01;

        goto label02;

     label01:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 0;

        goto label18;

     label02:
        l33 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getAttentiveTimeoutLocked()>();

        l0 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getSleepTimeoutLocked(long)>(l33);

        l1 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getScreenOffTimeoutLocked(long,long)>(l0, l33);

        l2 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getScreenDimDurationLocked(long)>(l1);

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mUserInactiveOverrideFromWindowManager>;

        l3 = specialinvoke r0.<com.android.server.power.PowerManagerService: long getNextProfileTimeoutLocked(long)>(l31);

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 0;

        l34 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l35 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b36 = l34 cmp $l35;

        if $b36 < 0 goto label04;

        $l26 = l34 + l1;

        l37 = $l26 - l2;

        $b27 = l31 cmp l37;

        if $b27 >= 0 goto label03;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 1;

        goto label05;

     label03:
        l38 = l34 + l1;

        l37 = l38;

        $b28 = l31 cmp l38;

        if $b28 >= 0 goto label05;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 2;

        l37 = l38;

        goto label05;

     label04:
        l37 = 0L;

     label05:
        $i39 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i39 != 0 goto label09;

        l40 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $l20 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b21 = l40 cmp $l20;

        if $b21 < 0 goto label09;

        l37 = l40 + l1;

        $b22 = l31 cmp l37;

        if $b22 >= 0 goto label08;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i23 = $r3.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i23 == 3 goto label07;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i24 = $r4.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i24 != 4 goto label06;

        goto label07;

     label06:
        $r5 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i25 = $r5.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i25 != 2 goto label08;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 2;

        goto label08;

     label07:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 1;

     label08:
        goto label09;

     label09:
        $i41 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i41 != 0 goto label13;

        $b14 = l0 cmp 0L;

        if $b14 < 0 goto label12;

        $l16 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l15 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        l42 = staticinvoke <java.lang.Math: long max(long,long)>($l16, $l15);

        $l17 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b18 = l42 cmp $l17;

        if $b18 < 0 goto label11;

        l37 = l42 + l0;

        $b19 = l31 cmp l37;

        if $b19 >= 0 goto label10;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 4;

        goto label11;

     label10:
        goto label11;

     label11:
        goto label13;

     label12:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 4;

        l37 = -1L;

        goto label13;

     label13:
        i43 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        l44 = l37;

        if i43 == 4 goto label15;

        l44 = l37;

        if z0 == 0 goto label15;

        $i10 = i43 & 3;

        if $i10 == 0 goto label14;

        $b11 = l37 cmp l31;

        if $b11 < 0 goto label14;

        $l12 = r0.<com.android.server.power.PowerManagerService: long mOverriddenTimeout>;

        $b13 = $l12 cmp -1L;

        if $b13 != 0 goto label14;

        r0.<com.android.server.power.PowerManagerService: long mOverriddenTimeout> = l37;

     label14:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 4;

        l44 = -1L;

     label15:
        l45 = l44;

        $i46 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i47 = 1 & $i46;

        if $i47 == 0 goto label16;

        l45 = l44;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i9 = $i8 & 32;

        if $i9 != 0 goto label16;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AttentionDetector mAttentionDetector>;

        l45 = virtualinvoke $r2.<com.android.server.power.AttentionDetector: long updateUserActivity(long,long)>(l44, l2);

     label16:
        $b48 = l3 cmp 0L;

        if $b48 <= 0 goto label17;

        l45 = staticinvoke <java.lang.Math: long min(long,long)>(l45, l3);

        goto label17;

     label17:
        $i6 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i6 == 0 goto label18;

        $b7 = l45 cmp 0L;

        if $b7 < 0 goto label18;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleUserInactivityTimeout(long)>(l45);

     label18:
        return;
    }

    private void updateWakeLockDisabledStatesLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        com.android.server.power.PowerManagerService$WakeLock r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z2 = 0;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r1 = (com.android.server.power.PowerManagerService$WakeLock) $r4;

        z3 = z2;

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i4 = $i3 & 65535;

        if $i4 != 1 goto label3;

        z3 = z2;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setWakeLockDisabledStateLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label3;

        z3 = 1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mDisabled>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

     label3:
        i5 = i5 + 1;

        z2 = z3;

        goto label1;

     label4:
        if z2 == 0 goto label5;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = $i1 | 1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label5:
        return;
    }

    private void updateWakeLockSummaryLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        com.android.server.power.PowerManagerService$ProfilePowerState r1, $r12, r14;
        android.util.SparseArray $r2, $r4, $r8, $r10;
        java.util.ArrayList $r3, $r6;
        java.lang.Object $r5, $r7, $r9, $r11;
        boolean $z0;
        com.android.server.power.PowerManagerService$WakeLock r13;

        r0 := @this: com.android.server.power.PowerManagerService;

        i13 := @parameter0: int;

        $i3 = i13 & 3;

        if $i3 == 0 goto label9;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = 0;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i14 = 0;

     label1:
        if i14 >= i0 goto label2;

        $r10 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i14);

        $r12 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r11;

        $r12.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary> = 0;

        i14 = i14 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i15 = 0;

     label3:
        if i15 >= i1 goto label7;

        $r6 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        r13 = (com.android.server.power.PowerManagerService$WakeLock) $r7;

        i2 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getWakeLockSummaryFlags(com.android.server.power.PowerManagerService$WakeLock)>(r13);

        $i8 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i9 = $i8 | i2;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i9;

        i16 = 0;

     label4:
        if i16 >= i0 goto label6;

        $r8 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i16);

        r1 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r9;

        $i10 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: int mUserId>;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeLockAffectsUser(com.android.server.power.PowerManagerService$WakeLock,int)>(r13, $i10);

        if $z0 == 0 goto label5;

        $i11 = r1.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary>;

        $i12 = $i11 | i2;

        r1.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary> = $i12;

     label5:
        i16 = i16 + 1;

        goto label4;

     label6:
        i15 = i15 + 1;

        goto label3;

     label7:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i5 = specialinvoke r0.<com.android.server.power.PowerManagerService: int adjustWakeLockSummaryLocked(int)>($i4);

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i5;

        i17 = 0;

     label8:
        if i17 >= i0 goto label9;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i17);

        r14 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r5;

        $i6 = r14.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary>;

        $i7 = specialinvoke r0.<com.android.server.power.PowerManagerService: int adjustWakeLockSummaryLocked(int)>($i6);

        r14.<com.android.server.power.PowerManagerService$ProfilePowerState: int mWakeLockSummary> = $i7;

        i17 = i17 + 1;

        goto label8;

     label9:
        return;
    }

    private void updateWakeLockWorkSourceInternal(android.os.IBinder, android.os.WorkSource, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r1, $r8;
        java.lang.String $r6, $r9, $r10, r18;
        java.util.ArrayList $r7;
        boolean $z0;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15, r20;
        android.os.IBinder r16;
        android.os.WorkSource r17;
        com.android.server.power.PowerManagerService$WakeLock r19;
        java.lang.IllegalArgumentException r21;
        java.lang.StringBuilder r22;

        r0 := @this: com.android.server.power.PowerManagerService;

        r16 := @parameter0: android.os.IBinder;

        r17 := @parameter1: android.os.WorkSource;

        r18 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r16);

     label02:
        if i1 < 0 goto label10;

     label03:
        $r7 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r19 = (com.android.server.power.PowerManagerService$WakeLock) $r8;

        $z0 = virtualinvoke r19.<com.android.server.power.PowerManagerService$WakeLock: boolean hasSameWorkSource(android.os.WorkSource)>(r17);

        if $z0 != 0 goto label06;

        $i4 = r19.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r10 = r19.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r9 = r19.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i3 = r19.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i2 = r19.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockChangingLocked(com.android.server.power.PowerManagerService$WakeLock,int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>(r19, $i4, $r10, $r9, $i3, $i2, r17, r18);

     label04:
        r19.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag> = r18;

        virtualinvoke r19.<com.android.server.power.PowerManagerService$WakeLock: void updateWorkSource(android.os.WorkSource)>(r17);

     label05:
        goto label06;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r12 := @caughtexception;

        r20 = $r12;

     label09:
        goto label16;

     label10:
        r21 = new java.lang.IllegalArgumentException;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wake lock not active: ");

     label11:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from uid ");

     label12:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r21;

     label13:
        $r14 := @caughtexception;

        r20 = $r14;

        goto label16;

     label14:
        $r15 := @caughtexception;

        r20 = $r15;

        goto label09;

     label15:
        $r11 := @caughtexception;

        r20 = $r11;

     label16:
        exitmonitor r1;

     label17:
        throw r20;

     label18:
        $r13 := @caughtexception;

        r20 = $r13;

        goto label16;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private boolean updateWakefulnessLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i2, $i3;
        long l1;
        boolean $z1, $z2, $z3, z4;
        com.android.server.power.PowerManagerService$Clock $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z4 = 0;

        $i2 = i0 & 20151;

        if $i2 == 0 goto label3;

        z4 = 0;

        $i3 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i3 != 1 goto label3;

        z4 = 0;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isItBedTimeYetLocked()>();

        if $z1 == 0 goto label3;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l1 = interfaceinvoke $r1.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isAttentiveTimeoutExpired(long)>(l1);

        if $z2 == 0 goto label1;

        z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>(l1, 2, 1, 1000);

        goto label3;

     label1:
        $z3 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldNapAtBedTimeLocked()>();

        if $z3 == 0 goto label2;

        z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean napNoUpdateLocked(long,int)>(l1, 1000);

        goto label3;

     label2:
        z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>(l1, 2, 0, 1000);

     label3:
        return z4;
    }

    private void userActivityFromNative(long, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)>(l0, i1, i2, 1000);

        return;
    }

    private void userActivityInternal(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean userActivityNoUpdateLocked(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l3, $l5, $l7, $l14, $l18, $l20;
        int i1, i2, $i10, $i11, $i12, $i13, $i16, $i17, $i22, $i23, i24, i25, i26;
        byte $b4, $b6, $b8, $b15, $b19, $b21;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r2;
        com.android.server.power.AttentionDetector $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i24 := @parameter2: int;

        i2 := @parameter3: int;

        $l3 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b4 = l0 cmp $l3;

        if $b4 < 0 goto label19;

        $l5 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b6 = l0 cmp $l5;

        if $b6 < 0 goto label19;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 != 0 goto label01;

        goto label19;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "userActivity");

     label02:
        $l7 = r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime>;

        $b8 = l0 cmp $l7;

        if $b8 <= 0 goto label03;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void powerHintInternal(int,int)>(2, 0);

        r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime> = l0;

     label03:
        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r2.<com.android.server.power.Notifier: void onUserActivity(int,int)>(i1, i2);

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AttentionDetector mAttentionDetector>;

        virtualinvoke $r3.<com.android.server.power.AttentionDetector: int onUserActivity(long,int)>(l0, i1);

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mUserInactiveOverrideFromWindowManager>;

        if $z1 == 0 goto label04;

        r0.<com.android.server.power.PowerManagerService: boolean mUserInactiveOverrideFromWindowManager> = 0;

        r0.<com.android.server.power.PowerManagerService: long mOverriddenTimeout> = -1L;

     label04:
        $i10 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i10 == 0 goto label17;

        $i11 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i11 == 3 goto label17;

     label05:
        $i12 = i24 & 2;

        if $i12 == 0 goto label06;

        goto label17;

     label06:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void maybeUpdateForegroundProfileLastActivityLocked(long)>(l0);

     label07:
        $i13 = i24 & 1;

        if $i13 == 0 goto label12;

     label08:
        $l18 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $b19 = l0 cmp $l18;

        if $b19 <= 0 goto label16;

        $l20 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $b21 = l0 cmp $l20;

        if $b21 <= 0 goto label16;

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights> = l0;

        $i22 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        i25 = $i22 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = i25;

     label09:
        if i1 != 1 goto label11;

     label10:
        $i23 = i25 | 4096;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i23;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 1;

     label12:
        $l14 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $b15 = l0 cmp $l14;

        if $b15 <= 0 goto label16;

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime> = l0;

        $i16 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        i26 = $i16 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = i26;

     label13:
        if i1 != 1 goto label15;

     label14:
        $i17 = i26 | 4096;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i17;

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 1;

     label16:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 0;

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 0;

     label18:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw $r4;

     label19:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
    }

    private boolean wakeLockAffectsUser(com.android.server.power.PowerManagerService$WakeLock, int)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10;
        android.os.WorkSource $r2, $r3, $r6, r7;
        java.lang.Object $r4;
        android.os.WorkSource$WorkChain $r5;
        boolean z0;
        java.util.List r8;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i0 := @parameter1: int;

        r7 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        z0 = 1;

        if r7 == null goto label6;

        i7 = 0;

     label1:
        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $i1 = virtualinvoke $r2.<android.os.WorkSource: int size()>();

        if i7 >= $i1 goto label3;

        $r6 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $i5 = virtualinvoke $r6.<android.os.WorkSource: int getUid(int)>(i7);

        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

        if i0 != $i6 goto label2;

        return 1;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        r8 = virtualinvoke $r3.<android.os.WorkSource: java.util.List getWorkChains()>();

        if r8 == null goto label6;

        i8 = 0;

     label4:
        $i2 = interfaceinvoke r8.<java.util.List: int size()>();

        if i8 >= $i2 goto label6;

        $r4 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i8);

        $r5 = (android.os.WorkSource$WorkChain) $r4;

        $i3 = virtualinvoke $r5.<android.os.WorkSource$WorkChain: int getAttributionUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        if i0 != $i4 goto label5;

        return 1;

     label5:
        i8 = i8 + 1;

        goto label4;

     label6:
        $i9 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i10 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i9);

        if i0 != $i10 goto label7;

        goto label8;

     label7:
        z0 = 0;

     label8:
        return z0;
    }

    private void wakeUpInternal(long, int, java.lang.String, int, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.String r1, r4;
        java.lang.Object r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        i3 := @parameter5: int;

        r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int,java.lang.String,int,java.lang.String,int)>(l0, i1, r4, i2, r1, i3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean wakeUpNoUpdateLocked(long, int, java.lang.String, int, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l4;
        int i1, i2, i3, $i6, $i7, $i9, $i10;
        java.lang.String r1, $r4, $r9, $r14, r19;
        java.lang.StringBuilder r2;
        byte $b5;
        boolean $z0, $z1, $z3;
        com.android.server.power.Notifier $r15;
        java.lang.Throwable $r16, $r17, $r18, r20;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r19 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        i3 := @parameter5: int;

        $l4 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b5 = l0 cmp $l4;

        if $b5 < 0 goto label10;

        $i6 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i6 == 1 goto label10;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mForceSuspendActive>;

        if $z0 != 0 goto label10;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label01;

        goto label10;

     label01:
        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(131072L, "Screen turning on", 0);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "wakeUp");

     label02:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waking up from ");

        $i7 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        $r4 = staticinvoke <android.os.PowerManagerInternal: java.lang.String wakefulnessToString(int)>($i7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (uid=");

     label03:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason=");

        $r9 = staticinvoke <android.os.PowerManager: java.lang.String wakeReasonToString(int)>(i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", details=");

     label04:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r14 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r14);

        r0.<com.android.server.power.PowerManagerService: long mLastWakeTime> = l0;

        r0.<com.android.server.power.PowerManagerService: int mLastWakeReason> = i1;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void setWakefulnessLocked(int,int,long)>(1, i1, l0);

        $r15 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r15.<com.android.server.power.Notifier: void onWakeUp(int,java.lang.String,int,java.lang.String,int)>(i1, r19, i2, r1, i3);

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, 0, 0, i2);

        $z3 = <com.android.server.power.PowerManagerService: boolean sQuiescent>;

        if $z3 == 0 goto label05;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i10 = $i9 | 4096;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i10;

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return 1;

     label06:
        $r16 := @caughtexception;

        r20 = $r16;

        goto label09;

     label07:
        $r17 := @caughtexception;

        r20 = $r17;

        goto label09;

     label08:
        $r18 := @caughtexception;

        r20 = $r18;

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r20;

     label10:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
    }

    void checkForLongWakeLocks()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r6;
        long l0, l2, $l6, $l7, $l9, l11, l13;
        int i1, $i4, $i5, i12;
        com.android.server.power.PowerManagerService$Clock $r2;
        java.util.ArrayList $r3, $r5;
        android.os.Handler $r4;
        byte $b3, $b8, $b10;
        boolean $z0, $z1;
        java.lang.Throwable $r7;
        com.android.server.power.PowerManagerService$WakeLock r8;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l0 = interfaceinvoke $r2.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        r0.<com.android.server.power.PowerManagerService: long mNotifyLongDispatched> = l0;

     label02:
        l11 = 9223372036854775807L;

     label03:
        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label04:
        i12 = 0;

     label05:
        if i12 >= i1 goto label17;

     label06:
        $r5 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i12);

        r8 = (com.android.server.power.PowerManagerService$WakeLock) $r6;

     label07:
        l13 = l11;

     label08:
        $i4 = r8.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i5 = $i4 & 65535;

        if $i5 != 1 goto label16;

     label09:
        l13 = l11;

     label10:
        $z0 = r8.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired>;

        if $z0 == 0 goto label16;

     label11:
        l13 = l11;

     label12:
        $z1 = r8.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedLong>;

        if $z1 != 0 goto label16;

        $l7 = r8.<com.android.server.power.PowerManagerService$WakeLock: long mAcquireTime>;

        $l6 = l0 - 60000L;

        $b8 = $l7 cmp $l6;

        if $b8 >= 0 goto label14;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockLongStartedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r8);

     label13:
        l13 = l11;

        goto label16;

     label14:
        $l9 = r8.<com.android.server.power.PowerManagerService$WakeLock: long mAcquireTime>;

        l2 = $l9 + 60000L;

     label15:
        l13 = l11;

        $b10 = l2 cmp l11;

        if $b10 >= 0 goto label16;

        l13 = l2;

     label16:
        i12 = i12 + 1;

        l11 = l13;

        goto label05;

     label17:
        r0.<com.android.server.power.PowerManagerService: long mNotifyLongScheduled> = 0L;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(4);

     label18:
        $b3 = l11 cmp 9223372036854775807L;

        if $b3 == 0 goto label21;

     label19:
        r0.<com.android.server.power.PowerManagerService: long mNotifyLongNextCheck> = l11;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void enqueueNotifyLongMsgLocked(long)>(l11);

     label20:
        goto label22;

     label21:
        r0.<com.android.server.power.PowerManagerService: long mNotifyLongNextCheck> = 0L;

     label22:
        exitmonitor r1;

     label23:
        return;

     label24:
        $r7 := @caughtexception;

     label25:
        exitmonitor r1;

     label26:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    void finishUidChangesInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mUidsChanging> = 0;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mUidsChanged>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

        r0.<com.android.server.power.PowerManagerService: boolean mUidsChanged> = 0;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    com.android.server.power.PowerManagerService$BinderService getBinderServiceInstance()
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$BinderService $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$BinderService mBinderService>;

        return $r1;
    }

    int getDesiredScreenPolicyLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i0 == 0 goto label7;

        $z0 = <com.android.server.power.PowerManagerService: boolean sQuiescent>;

        if $z0 == 0 goto label1;

        goto label7;

     label1:
        $i1 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i1 != 3 goto label3;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i7 = $i6 & 64;

        if $i7 == 0 goto label2;

        return 1;

     label2:
        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOff>;

        if $z4 == 0 goto label3;

        return 0;

     label3:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled>;

        if $z1 == 0 goto label4;

        return 4;

     label4:
        $i2 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i3 = $i2 & 2;

        if $i3 != 0 goto label6;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i5 = $i4 & 1;

        if $i5 != 0 goto label6;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z2 == 0 goto label6;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mScreenBrightnessBoostInProgress>;

        if $z3 == 0 goto label5;

        goto label6;

     label5:
        return 2;

     label6:
        return 3;

     label7:
        return 0;
    }

    int getLastShutdownReasonInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;
        com.android.server.power.SystemPropertiesWrapper $r2;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte b1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SystemPropertiesWrapper mSystemProperties>;

        r1 = interfaceinvoke $r2.<com.android.server.power.SystemPropertiesWrapper: java.lang.String get(java.lang.String,java.lang.String)>("sys.boot.reason", null);

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2117951935: goto label07;
            case -1099647817: goto label06;
            case -934938715: goto label05;
            case -852189395: goto label04;
            case -169343402: goto label03;
            case 1218064802: goto label02;
            default: goto label01;
        };

     label01:
        goto label08;

     label02:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shutdown,thermal,battery");

        if $z0 == 0 goto label01;

        b1 = 5;

        goto label09;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shutdown");

        if $z1 == 0 goto label01;

        b1 = 0;

        goto label09;

     label04:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shutdown,userrequested");

        if $z2 == 0 goto label01;

        b1 = 2;

        goto label09;

     label05:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("reboot");

        if $z3 == 0 goto label01;

        b1 = 1;

        goto label09;

     label06:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shutdown,battery");

        if $z4 == 0 goto label01;

        b1 = 4;

        goto label09;

     label07:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shutdown,thermal");

        if $z5 == 0 goto label01;

        b1 = 3;

        goto label09;

     label08:
        b1 = -1;

     label09:
        if b1 == 0 goto label15;

        if b1 == 1 goto label14;

        if b1 == 2 goto label13;

        if b1 == 3 goto label12;

        if b1 == 4 goto label11;

        if b1 == 5 goto label10;

        return 0;

     label10:
        return 6;

     label11:
        return 5;

     label12:
        return 4;

     label13:
        return 3;

     label14:
        return 2;

     label15:
        return 1;
    }

    com.android.server.power.PowerManagerService$LocalService getLocalServiceInstance()
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$LocalService $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$LocalService mLocalService>;

        return $r1;
    }

    int getWakefulnessLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulnessRaw>;

        return $i0;
    }

    boolean isDeviceIdleModeInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isLightDeviceIdleModeInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.power.PowerManagerService: boolean mLightDeviceIdleMode>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void monitor()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onBootPhase(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i2, $i3;
        java.lang.Object r1;
        long l1, $l4;
        com.android.server.power.PowerManagerService$Clock $r3, $r5;
        com.android.server.power.batterysaver.BatterySaverStateMachine $r4;
        boolean $z1;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if i0 != 600 goto label04;

     label01:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void incrementBootCount()>();

     label02:
        goto label07;

     label03:
        $r6 := @caughtexception;

        goto label09;

     label04:
        if i0 != 1000 goto label07;

     label05:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        l1 = interfaceinvoke $r3.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted> = 1;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = $i2 | 16;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverStateMachine mBatterySaverStateMachine>;

        virtualinvoke $r4.<com.android.server.power.batterysaver.BatterySaverStateMachine: void onBootCompleted()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l1, 0, 0, 1000);

        $z1 = <com.android.server.power.PowerManagerService: boolean sQuiescent>;

        if $z1 == 0 goto label06;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l4 = interfaceinvoke $r5.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>($l4, 10, 1, 1000);

     label06:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
    }

    public void onStart()
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$BinderService $r1;
        com.android.server.power.PowerManagerService$LocalService $r2;
        com.android.server.Watchdog $r3, $r4;
        android.os.Handler $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$BinderService mBinderService>;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void publishBinderService(java.lang.String,android.os.IBinder,boolean,int)>("power", $r1, 0, 9);

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$LocalService mLocalService>;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Landroid/os/PowerManagerInternal;", $r2);

        $r3 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r3.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        $r4 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r5 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r4.<com.android.server.Watchdog: void addThread(android.os.Handler)>($r5);

        return;
    }

    void onUserActivity()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        com.android.server.power.PowerManagerService$Clock $r3;
        long $l0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l0 = interfaceinvoke $r3.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime> = $l0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void readConfigurationLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.content.res.Resources r1;
        android.content.Context $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i8;
        long $l2, $l7, $l9;
        float $f0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891504);

        r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig> = $z0;

        $z1 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891505);

        r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig> = $z1;

        $z2 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891564);

        r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig> = $z2;

        $z3 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891357);

        r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig> = $z3;

        $z4 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891555);

        r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig> = $z4;

        $i0 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694736);

        r0.<com.android.server.power.PowerManagerService: int mAttentiveTimeoutConfig> = $i0;

        $i1 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694737);

        $l2 = (long) $i1;

        r0.<com.android.server.power.PowerManagerService: long mAttentiveWarningDurationConfig> = $l2;

        $z5 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891431);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig> = $z5;

        $z6 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891429);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig> = $z6;

        $z7 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891428);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig> = $z7;

        $z8 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891427);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig> = $z8;

        $z9 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891430);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig> = $z9;

        $i3 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694808);

        r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig> = $i3;

        $i4 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694807);

        r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig> = $i4;

        $i5 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694806);

        r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig> = $i5;

        $z10 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891421);

        r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOff> = $z10;

        $i6 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694845);

        $l7 = (long) $i6;

        r0.<com.android.server.power.PowerManagerService: long mMinimumScreenOffTimeoutConfig> = $l7;

        $i8 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694840);

        $l9 = (long) $i8;

        r0.<com.android.server.power.PowerManagerService: long mMaximumScreenDimDurationConfig> = $l9;

        $f0 = virtualinvoke r1.<android.content.res.Resources: float getFraction(int,int,int)>(18022402, 1, 1);

        r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig> = $f0;

        $z11 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891543);

        r0.<com.android.server.power.PowerManagerService: boolean mSupportsDoubleTapWakeConfig> = $z11;

        return;
    }

    boolean setDeviceIdleModeInternal(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, $z4, z5;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        z1 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

     label02:
        z5 = 0;

        if z1 != z0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode> = z0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z2 != 0 goto label07;

     label06:
        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mLightDeviceIdleMode>;

        if $z4 == 0 goto label08;

     label07:
        z5 = 1;

     label08:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setPowerModeInternal(int,boolean)>(8, z5);

        exitmonitor r1;

     label09:
        if z0 == 0 goto label10;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleOnPhase(java.lang.String)>("power");

        goto label11;

     label10:
        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleOffPhase(java.lang.String)>("power");

     label11:
        return 1;

     label12:
        $r3 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void setDeviceIdleTempWhitelistInternal(int[])
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        int[] r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r3 := @parameter0: int[];

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleTempWhitelist> = r3;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setDeviceIdleWhitelistInternal(int[])
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        int[] r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r3 := @parameter0: int[];

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: int[] mDeviceIdleWhitelist> = r3;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockDisabledStatesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    boolean setLightDeviceIdleModeInternal(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, z4;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        z1 = r0.<com.android.server.power.PowerManagerService: boolean mLightDeviceIdleMode>;

     label02:
        z4 = 0;

        if z1 == z0 goto label08;

     label03:
        r0.<com.android.server.power.PowerManagerService: boolean mLightDeviceIdleMode> = z0;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z2 != 0 goto label05;

     label04:
        if z0 == 0 goto label06;

     label05:
        z4 = 1;

     label06:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setPowerModeInternal(int,boolean)>(8, z4);

        exitmonitor r1;

     label07:
        return 1;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int, long)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i5, $i6, $i8, $i9;
        long l1, $l4;
        android.util.SparseArray r1, $r2, $r3;
        byte $b2, $b3;
        java.lang.Object $r4, r12;
        com.android.server.power.PowerManagerService$Clock $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        com.android.server.power.PowerManagerService$ProfilePowerState r14, r15;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        if i0 >= 0 goto label01;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to set screen off timeout for invalid user: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PowerManagerService", $r9);

        return;

     label01:
        r12 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r12;

        if i0 != 0 goto label05;

     label02:
        r0.<com.android.server.power.PowerManagerService: long mMaximumScreenOffTimeoutFromDeviceAdmin> = l1;

     label03:
        goto label13;

     label04:
        $r10 := @caughtexception;

        goto label15;

     label05:
        $b2 = l1 cmp 9223372036854775807L;

        if $b2 == 0 goto label12;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label06;

        goto label12;

     label06:
        $r3 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r14 = (com.android.server.power.PowerManagerService$ProfilePowerState) $r4;

     label07:
        if r14 == null goto label10;

     label08:
        r14.<com.android.server.power.PowerManagerService$ProfilePowerState: long mScreenOffTimeout> = l1;

     label09:
        goto label13;

     label10:
        r1 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        r15 = new com.android.server.power.PowerManagerService$ProfilePowerState;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l4 = interfaceinvoke $r5.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        specialinvoke r15.<com.android.server.power.PowerManagerService$ProfilePowerState: void <init>(int,long,long)>(i0, l1, $l4);

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r15);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i6 = $i5 | 1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i6;

     label11:
        goto label13;

     label12:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mProfilePowerState>;

        virtualinvoke $r2.<android.util.SparseArray: void delete(int)>(i0);

     label13:
        $i8 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i9 = $i8 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i9;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r12;

     label14:
        return;

     label15:
        exitmonitor r12;

     label16:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label13 to label14 with label04;
        catch java.lang.Throwable from label15 to label16 with label04;
    }

    void setStayOnSettingInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "stay_on_while_plugged_in", i0);

        return;
    }

    void setVrModeEnabled(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        r0.<com.android.server.power.PowerManagerService: boolean mIsVrModeEnabled> = z0;

        return;
    }

    void setWakefulnessLocked(int, int, long)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i3, $i4, $i5, $i6;
        long l2;
        boolean z0, $z1, z2;
        com.android.server.power.Notifier r1;
        com.android.server.power.PowerManagerService$Injector $r2;
        com.android.server.power.AttentionDetector $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $i3 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i3 == i0 goto label4;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        virtualinvoke $r2.<com.android.server.power.PowerManagerService$Injector: void invalidateIsInteractiveCaches()>();

        r0.<com.android.server.power.PowerManagerService: int mWakefulnessRaw> = i0;

        z2 = 1;

        r0.<com.android.server.power.PowerManagerService: boolean mWakefulnessChanging> = 1;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i5 = $i4 | 2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i5;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mDozeStartInProgress>;

        $i6 = virtualinvoke r0.<com.android.server.power.PowerManagerService: int getWakefulnessLocked()>();

        if $i6 != 3 goto label1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $z1 = z2 & z0;

        r0.<com.android.server.power.PowerManagerService: boolean mDozeStartInProgress> = $z1;

        r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        if r1 == null goto label3;

        virtualinvoke r1.<com.android.server.power.Notifier: void onWakefulnessChangeStarted(int,int,long)>(i0, i1, l2);

     label3:
        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AttentionDetector mAttentionDetector>;

        virtualinvoke $r3.<com.android.server.power.AttentionDetector: void onWakefulnessChangeStarted(int)>(i0);

     label4:
        return;
    }

    void startUidChangesInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mUidsChanging> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemReady(com.android.internal.app.IAppOpsService)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object $r1, $r3, $r5, $r7, $r12, $r31, r81;
        android.service.dreams.DreamManagerInternal $r2;
        android.hardware.display.DisplayManagerInternal $r4, $r35;
        com.android.server.policy.WindowManagerPolicy $r6, $r23;
        android.os.BatteryManagerInternal $r8;
        android.content.Context $r9, $r11, $r14, $r20, $r37, $r94, $r99, $r104, $r109;
        com.android.server.power.AttentionDetector $r10;
        float $f0, $f1, $f2;
        android.os.Handler $r13, $r28, $r30, $r33, $r96, $r101, $r106, $r111;
        android.os.Looper $r15, $r18;
        com.android.internal.app.IBatteryStats $r16, $r21;
        com.android.server.power.PowerManagerService$Injector $r17, $r19, $r25, $r26;
        com.android.server.power.SuspendBlocker $r22, $r27;
        com.android.server.power.Notifier $r24;
        com.android.server.power.WirelessChargerDetector $r29;
        com.android.server.lights.LogicalLight $r32;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r34;
        android.app.IActivityManager $r36;
        int $i0, $i1;
        com.android.server.power.PowerManagerService$Constants $r38;
        com.android.server.power.batterysaver.BatterySaverController $r39;
        com.android.server.power.batterysaver.BatterySaverPolicy $r40;
        android.net.Uri $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65;
        com.android.server.power.PowerManagerService$SettingsObserver $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r64, $r66, r84;
        android.os.IBinder $r67;
        android.service.vr.IVrStateCallbacks $r72;
        android.os.RemoteException $r73, $r74;
        java.lang.StringBuilder $r75;
        java.lang.String $r78;
        java.lang.Throwable $r79;
        com.android.internal.app.IAppOpsService r80;
        android.os.PowerManager r82;
        android.hardware.SystemSensorManager r83;
        com.android.server.lights.LightsManager r85;
        com.android.server.power.PowerManagerService$ForegroundProfileObserver r86;
        android.content.ContentResolver r88;
        android.service.vr.IVrManager r89;
        android.content.IntentFilter $r92, $r97, $r102, $r107;
        com.android.server.power.PowerManagerService$BatteryReceiver $r95;
        com.android.server.power.PowerManagerService$DreamReceiver $r100;
        com.android.server.power.PowerManagerService$UserSwitchedReceiver $r105;
        com.android.server.power.PowerManagerService$DockReceiver $r110;

        r0 := @this: com.android.server.power.PowerManagerService;

        r80 := @parameter0: com.android.internal.app.IAppOpsService;

        r81 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r81;

     label01:
        r0.<com.android.server.power.PowerManagerService: boolean mSystemReady> = 1;

        r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IAppOpsService mAppOps> = r80;

        $r1 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "Landroid/service/dreams/DreamManagerInternal;");

        $r2 = (android.service.dreams.DreamManagerInternal) $r1;

        r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager> = $r2;

        $r3 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r4 = (android.hardware.display.DisplayManagerInternal) $r3;

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal> = $r4;

        $r5 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "Lcom/android/server/policy/WindowManagerPolicy;");

        $r6 = (com.android.server.policy.WindowManagerPolicy) $r5;

        r0.<com.android.server.power.PowerManagerService: com.android.server.policy.WindowManagerPolicy mPolicy> = $r6;

        $r7 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "Landroid/os/BatteryManagerInternal;");

        $r8 = (android.os.BatteryManagerInternal) $r7;

        r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal> = $r8;

        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.AttentionDetector mAttentionDetector>;

        $r9 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        virtualinvoke $r10.<com.android.server.power.AttentionDetector: void systemReady(android.content.Context)>($r9);

        $r11 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r82 = (android.os.PowerManager) $r12;

        $f0 = virtualinvoke r82.<android.os.PowerManager: float getBrightnessConstraint(int)>(0);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingMinimum> = $f0;

        $f1 = virtualinvoke r82.<android.os.PowerManager: float getBrightnessConstraint(int)>(1);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingMaximum> = $f1;

        $f2 = virtualinvoke r82.<android.os.PowerManager: float getBrightnessConstraint(int)>(2);

        r0.<com.android.server.power.PowerManagerService: float mScreenBrightnessSettingDefault> = $f2;

        r83 = new android.hardware.SystemSensorManager;

        $r14 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r13 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        $r15 = virtualinvoke $r13.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r83.<android.hardware.SystemSensorManager: void <init>(android.content.Context,android.os.Looper)>($r14, $r15);

        $r16 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r16;

        $r17 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r18 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r20 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r21 = r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r19 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r22 = virtualinvoke $r19.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.SuspendBlocker createSuspendBlocker(com.android.server.power.PowerManagerService,java.lang.String)>(r0, "PowerManagerService.Broadcasts");

        $r23 = r0.<com.android.server.power.PowerManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r24 = virtualinvoke $r17.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.Notifier createNotifier(android.os.Looper,android.content.Context,com.android.internal.app.IBatteryStats,com.android.server.power.SuspendBlocker,com.android.server.policy.WindowManagerPolicy)>($r18, $r20, $r21, $r22, $r23);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier> = $r24;

        $r26 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r25 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Injector mInjector>;

        $r27 = virtualinvoke $r25.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.SuspendBlocker createSuspendBlocker(com.android.server.power.PowerManagerService,java.lang.String)>(r0, "PowerManagerService.WirelessChargerDetector");

        $r28 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        $r29 = virtualinvoke $r26.<com.android.server.power.PowerManagerService$Injector: com.android.server.power.WirelessChargerDetector createWirelessChargerDetector(android.hardware.SensorManager,com.android.server.power.SuspendBlocker,android.os.Handler)>(r83, $r27, $r28);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector> = $r29;

        r84 = new com.android.server.power.PowerManagerService$SettingsObserver;

        $r30 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        specialinvoke r84.<com.android.server.power.PowerManagerService$SettingsObserver: void <init>(com.android.server.power.PowerManagerService,android.os.Handler)>(r0, $r30);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver> = r84;

        $r31 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "Lcom/android/server/lights/LightsManager;");

        r85 = (com.android.server.lights.LightsManager) $r31;

        r0.<com.android.server.power.PowerManagerService: com.android.server.lights.LightsManager mLightsManager> = r85;

        $r32 = virtualinvoke r85.<com.android.server.lights.LightsManager: com.android.server.lights.LogicalLight getLight(int)>(5);

        r0.<com.android.server.power.PowerManagerService: com.android.server.lights.LogicalLight mAttentionLight> = $r32;

        $r35 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r34 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks>;

        $r33 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r35.<android.hardware.display.DisplayManagerInternal: void initPowerManagement(android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks,android.os.Handler,android.hardware.SensorManager)>($r34, $r33, r83);

     label02:
        r86 = new com.android.server.power.PowerManagerService$ForegroundProfileObserver;

        specialinvoke r86.<com.android.server.power.PowerManagerService$ForegroundProfileObserver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r36 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r36.<android.app.IActivityManager: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>(r86, "PowerManagerService");

     label03:
        goto label05;

     label04:
        $r73 := @caughtexception;

     label05:
        virtualinvoke r0.<com.android.server.power.PowerManagerService: void readConfigurationLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSettingsLocked()>();

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 256;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r81;

     label06:
        $r37 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r88 = virtualinvoke $r37.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r38 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Constants mConstants>;

        virtualinvoke $r38.<com.android.server.power.PowerManagerService$Constants: void start(android.content.ContentResolver)>(r88);

        $r39 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverController mBatterySaverController>;

        virtualinvoke $r39.<com.android.server.power.batterysaver.BatterySaverController: void systemReady()>();

        $r40 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverPolicy mBatterySaverPolicy>;

        virtualinvoke $r40.<com.android.server.power.batterysaver.BatterySaverPolicy: void systemReady()>();

        $r41 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_enabled");

        $r42 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r41, 0, $r42, -1);

        $r43 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_activate_on_sleep");

        $r44 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r43, 0, $r44, -1);

        $r45 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_activate_on_dock");

        $r46 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r45, 0, $r46, -1);

        $r47 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_off_timeout");

        $r48 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r47, 0, $r48, -1);

        $r49 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("sleep_timeout");

        $r50 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r49, 0, $r50, -1);

        $r51 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("attentive_timeout");

        $r52 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r51, 0, $r52, -1);

        $r53 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("stay_on_while_plugged_in");

        $r54 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r53, 0, $r54, -1);

        $r55 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness_mode");

        $r56 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r55, 0, $r56, -1);

        $r57 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_auto_brightness_adj");

        $r58 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r57, 0, $r58, -1);

        $r59 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("theater_mode_on");

        $r60 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r59, 0, $r60, -1);

        $r61 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("doze_always_on");

        $r62 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r61, 0, $r62, -1);

        $r63 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("double_tap_to_wake");

        $r64 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r63, 0, $r64, -1);

        $r65 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("device_demo_mode");

        $r66 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r88.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r65, 0, $r66, 0);

        $r67 = virtualinvoke r0.<com.android.server.power.PowerManagerService: android.os.IBinder getBinderService(java.lang.String)>("vrmanager");

        r89 = staticinvoke <android.service.vr.IVrManager$Stub: android.service.vr.IVrManager asInterface(android.os.IBinder)>($r67);

        if r89 == null goto label10;

     label07:
        $r72 = r0.<com.android.server.power.PowerManagerService: android.service.vr.IVrStateCallbacks mVrStateCallbacks>;

        interfaceinvoke r89.<android.service.vr.IVrManager: void registerListener(android.service.vr.IVrStateCallbacks)>($r72);

     label08:
        goto label10;

     label09:
        $r74 := @caughtexception;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to register VR mode state listener: ");

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r74);

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PowerManagerService", $r78);

     label10:
        $r92 = new android.content.IntentFilter;

        specialinvoke $r92.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r92.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        virtualinvoke $r92.<android.content.IntentFilter: void setPriority(int)>(1000);

        $r94 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r95 = new com.android.server.power.PowerManagerService$BatteryReceiver;

        specialinvoke $r95.<com.android.server.power.PowerManagerService$BatteryReceiver: void <init>(com.android.server.power.PowerManagerService)>(r0);

        $r96 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r94.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r95, $r92, null, $r96);

        $r97 = new android.content.IntentFilter;

        specialinvoke $r97.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r97.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STARTED");

        virtualinvoke $r97.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STOPPED");

        $r99 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r100 = new com.android.server.power.PowerManagerService$DreamReceiver;

        specialinvoke $r100.<com.android.server.power.PowerManagerService$DreamReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r101 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r99.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r100, $r97, null, $r101);

        $r102 = new android.content.IntentFilter;

        specialinvoke $r102.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r102.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r104 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r105 = new com.android.server.power.PowerManagerService$UserSwitchedReceiver;

        specialinvoke $r105.<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void <init>(com.android.server.power.PowerManagerService)>(r0);

        $r106 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r104.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r105, $r102, null, $r106);

        $r107 = new android.content.IntentFilter;

        specialinvoke $r107.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r107.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        $r109 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r110 = new com.android.server.power.PowerManagerService$DockReceiver;

        specialinvoke $r110.<com.android.server.power.PowerManagerService$DockReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r111 = r0.<com.android.server.power.PowerManagerService: android.os.Handler mHandler>;

        virtualinvoke $r109.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r110, $r107, null, $r111);

        return;

     label11:
        $r79 := @caughtexception;

     label12:
        exitmonitor r81;

     label13:
        throw $r79;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void uidActiveInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        com.android.server.power.PowerManagerService$UidState r2, r7;
        android.util.SparseArray $r3, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.power.PowerManagerService$UidState) $r4;

     label02:
        r7 = r2;

        if r2 != null goto label05;

     label03:
        r7 = new com.android.server.power.PowerManagerService$UidState;

        specialinvoke r7.<com.android.server.power.PowerManagerService$UidState: void <init>(int)>(i0);

     label04:
        r7.<com.android.server.power.PowerManagerService$UidState: int mProcState> = 19;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7);

     label05:
        r7.<com.android.server.power.PowerManagerService$UidState: boolean mActive> = 1;

        $i1 = r7.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        if $i1 <= 0 goto label06;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUidStateChangeLocked()>();

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void uidGoneInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r4;
        android.util.SparseArray $r2, $r3, $r5;
        boolean $z0;
        int $i0, i1, i2;
        java.lang.Throwable $r6;
        com.android.server.power.PowerManagerService$UidState r7;

        r0 := @this: com.android.server.power.PowerManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        i2 = virtualinvoke $r2.<android.util.SparseArray: int indexOfKey(int)>(i1);

     label2:
        if i2 < 0 goto label4;

     label3:
        $r3 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r7 = (com.android.server.power.PowerManagerService$UidState) $r4;

        r7.<com.android.server.power.PowerManagerService$UidState: int mProcState> = 20;

        r7.<com.android.server.power.PowerManagerService$UidState: boolean mActive> = 0;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        virtualinvoke $r5.<android.util.SparseArray: void removeAt(int)>(i2);

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z0 == 0 goto label4;

        $i0 = r7.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        if $i0 <= 0 goto label4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUidStateChangeLocked()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void uidIdleInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        android.util.SparseArray $r2;
        java.lang.Throwable $r4;
        com.android.server.power.PowerManagerService$UidState r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.power.PowerManagerService$UidState) $r3;

     label2:
        if r5 == null goto label4;

     label3:
        r5.<com.android.server.power.PowerManagerService$UidState: boolean mActive> = 0;

        $i1 = r5.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        if $i1 <= 0 goto label4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUidStateChangeLocked()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void updatePowerRequestFromBatterySaverPolicy(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)
    {
        com.android.server.power.PowerManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r1;
        android.os.PowerSaveState r2;
        com.android.server.power.batterysaver.BatterySaverPolicy $r3;
        boolean $z0;
        float $f0;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.batterysaver.BatterySaverPolicy mBatterySaverPolicy>;

        r2 = virtualinvoke $r3.<com.android.server.power.batterysaver.BatterySaverPolicy: android.os.PowerSaveState getBatterySaverPolicy(int)>(7);

        $z0 = r2.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode> = $z0;

        $f0 = r2.<android.os.PowerSaveState: float brightnessFactor>;

        r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor> = $f0;

        return;
    }

    void updateUidProcStateInternal(int, int)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r4;
        com.android.server.power.PowerManagerService$UidState r2, r7;
        android.util.SparseArray $r3, $r5;
        int $i0, i1, i2, i3;
        boolean $z1, $z2, z3, z4;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.power.PowerManagerService$UidState) $r4;

     label02:
        r7 = r2;

        if r2 != null goto label05;

     label03:
        r7 = new com.android.server.power.PowerManagerService$UidState;

        specialinvoke r7.<com.android.server.power.PowerManagerService$UidState: void <init>(int)>(i1);

     label04:
        $r5 = r0.<com.android.server.power.PowerManagerService: android.util.SparseArray mUidState>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r7);

     label05:
        i3 = r7.<com.android.server.power.PowerManagerService$UidState: int mProcState>;

     label06:
        if i3 > 11 goto label07;

        z3 = 1;

        goto label08;

     label07:
        z3 = 0;

     label08:
        r7.<com.android.server.power.PowerManagerService$UidState: int mProcState> = i2;

        $i0 = r7.<com.android.server.power.PowerManagerService$UidState: int mNumWakeLocks>;

        if $i0 <= 0 goto label15;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDeviceIdleMode>;

        if $z1 == 0 goto label10;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUidStateChangeLocked()>();

     label09:
        goto label15;

     label10:
        $z2 = r7.<com.android.server.power.PowerManagerService$UidState: boolean mActive>;

        if $z2 != 0 goto label15;

     label11:
        if i2 > 11 goto label12;

        z4 = 1;

        goto label13;

     label12:
        z4 = 0;

     label13:
        if z3 == z4 goto label15;

     label14:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUidStateChangeLocked()>();

     label15:
        exitmonitor r1;

     label16:
        return;

     label17:
        $r6 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    boolean wasDeviceIdleForInternal(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1, $l2, $l3;
        java.lang.Object r1;
        com.android.server.power.PowerManagerService$Clock $r3;
        byte $b4;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l2 = $l1 + l0;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$Clock mClock>;

        $l3 = interfaceinvoke $r3.<com.android.server.power.PowerManagerService$Clock: long uptimeMillis()>();

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <com.android.server.power.PowerManagerService: int WAKE_LOCK_STAY_AWAKE> = 32;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_SCREEN_DIM> = 4;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_SCREEN_BRIGHT> = 2;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_PROXIMITY_SCREEN_OFF> = 16;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_DRAW> = 128;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_DOZE> = 64;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_CPU> = 1;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_BUTTON_BRIGHT> = 8;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_DREAM> = 4;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_DIM> = 2;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_BRIGHT> = 1;

        <com.android.server.power.PowerManagerService: java.lang.String TRACE_SCREEN_ON> = "Screen turning on";

        <com.android.server.power.PowerManagerService: java.lang.String TAG> = "PowerManagerService";

        <com.android.server.power.PowerManagerService: java.lang.String SYSTEM_PROPERTY_RETAIL_DEMO_ENABLED> = "sys.retaildemo.enabled";

        <com.android.server.power.PowerManagerService: java.lang.String SYSTEM_PROPERTY_REBOOT_REASON> = "sys.boot.reason";

        <com.android.server.power.PowerManagerService: java.lang.String SYSTEM_PROPERTY_QUIESCENT> = "ro.boot.quiescent";

        <com.android.server.power.PowerManagerService: int SCREEN_ON_LATENCY_WARNING_MS> = 200;

        <com.android.server.power.PowerManagerService: int SCREEN_BRIGHTNESS_BOOST_TIMEOUT> = 5000;

        <com.android.server.power.PowerManagerService: java.lang.String REASON_USERREQUESTED> = "shutdown,userrequested";

        <com.android.server.power.PowerManagerService: java.lang.String REASON_THERMAL_SHUTDOWN> = "shutdown,thermal";

        <com.android.server.power.PowerManagerService: java.lang.String REASON_SHUTDOWN> = "shutdown";

        <com.android.server.power.PowerManagerService: java.lang.String REASON_REBOOT> = "reboot";

        <com.android.server.power.PowerManagerService: java.lang.String REASON_LOW_BATTERY> = "shutdown,battery";

        <com.android.server.power.PowerManagerService: java.lang.String REASON_BATTERY_THERMAL_STATE> = "shutdown,thermal,battery";

        <com.android.server.power.PowerManagerService: int POWER_FEATURE_DOUBLE_TAP_TO_WAKE> = 1;

        <com.android.server.power.PowerManagerService: int MSG_USER_ACTIVITY_TIMEOUT> = 1;

        <com.android.server.power.PowerManagerService: int MSG_SCREEN_BRIGHTNESS_BOOST_TIMEOUT> = 3;

        <com.android.server.power.PowerManagerService: int MSG_SANDMAN> = 2;

        <com.android.server.power.PowerManagerService: int MSG_CHECK_FOR_LONG_WAKELOCKS> = 4;

        <com.android.server.power.PowerManagerService: int MSG_ATTENTIVE_TIMEOUT> = 5;

        <com.android.server.power.PowerManagerService: long MIN_LONG_WAKE_CHECK_INTERVAL> = 60000L;

        <com.android.server.power.PowerManagerService: float INVALID_BRIGHTNESS_IN_CONFIG> = -2.0F;

        <com.android.server.power.PowerManagerService: int HALT_MODE_SHUTDOWN> = 0;

        <com.android.server.power.PowerManagerService: int HALT_MODE_REBOOT_SAFE_MODE> = 2;

        <com.android.server.power.PowerManagerService: int HALT_MODE_REBOOT> = 1;

        <com.android.server.power.PowerManagerService: int DIRTY_WAKE_LOCKS> = 1;

        <com.android.server.power.PowerManagerService: int DIRTY_WAKEFULNESS> = 2;

        <com.android.server.power.PowerManagerService: int DIRTY_VR_MODE_CHANGED> = 8192;

        <com.android.server.power.PowerManagerService: int DIRTY_USER_ACTIVITY> = 4;

        <com.android.server.power.PowerManagerService: int DIRTY_STAY_ON> = 128;

        <com.android.server.power.PowerManagerService: int DIRTY_SETTINGS> = 32;

        <com.android.server.power.PowerManagerService: int DIRTY_SCREEN_BRIGHTNESS_BOOST> = 2048;

        <com.android.server.power.PowerManagerService: int DIRTY_QUIESCENT> = 4096;

        <com.android.server.power.PowerManagerService: int DIRTY_PROXIMITY_POSITIVE> = 512;

        <com.android.server.power.PowerManagerService: int DIRTY_IS_POWERED> = 64;

        <com.android.server.power.PowerManagerService: int DIRTY_DOCK_STATE> = 1024;

        <com.android.server.power.PowerManagerService: int DIRTY_BOOT_COMPLETED> = 16;

        <com.android.server.power.PowerManagerService: int DIRTY_BATTERY_STATE> = 256;

        <com.android.server.power.PowerManagerService: int DIRTY_ATTENTIVE> = 16384;

        <com.android.server.power.PowerManagerService: int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED> = 8;

        <com.android.server.power.PowerManagerService: int DEFAULT_SLEEP_TIMEOUT> = -1;

        <com.android.server.power.PowerManagerService: int DEFAULT_SCREEN_OFF_TIMEOUT> = 15000;

        <com.android.server.power.PowerManagerService: int DEFAULT_DOUBLE_TAP_TO_WAKE> = 0;

        <com.android.server.power.PowerManagerService: boolean DEBUG_SPEW> = 0;

        <com.android.server.power.PowerManagerService: boolean DEBUG> = 0;

        return;
    }
}
