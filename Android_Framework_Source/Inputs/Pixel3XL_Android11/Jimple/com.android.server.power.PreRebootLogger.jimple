final class com.android.server.power.PreRebootLogger extends java.lang.Object
{
    private static final java.lang.String[] BUFFERS_TO_DUMP;
    private static final long MAX_DUMP_TIME;
    private static final java.lang.String PREREBOOT_DIR;
    private static final java.lang.String[] SERVICES_TO_DUMP;
    private static final java.lang.String TAG;
    private static final java.lang.Object sLock;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        java.lang.Object $r2;
        java.util.concurrent.TimeUnit $r3;
        long $l0;

        <com.android.server.power.PreRebootLogger: java.lang.String TAG> = "PreRebootLogger";

        <com.android.server.power.PreRebootLogger: java.lang.String PREREBOOT_DIR> = "prereboot";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "system";

        <com.android.server.power.PreRebootLogger: java.lang.String[] BUFFERS_TO_DUMP> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "rollback";

        $r1[1] = "package";

        <com.android.server.power.PreRebootLogger: java.lang.String[] SERVICES_TO_DUMP> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <com.android.server.power.PreRebootLogger: java.lang.Object sLock> = $r2;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(20L);

        <com.android.server.power.PreRebootLogger: long MAX_DUMP_TIME> = $l0;

        return;
    }

    void <init>()
    {
        com.android.server.power.PreRebootLogger r0;

        r0 := @this: com.android.server.power.PreRebootLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void dump(java.io.File, long)
    {
        long l0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.lang.Thread $r2;
        com.android.server.power._$$Lambda$PreRebootLogger$p8FewhqoJ8SIfUcoA5y2K00i1I4 $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.io.File r5;

        r5 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PreRebootLogger", "Dumping pre-reboot information...");

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r2 = new java.lang.Thread;

        $r3 = new com.android.server.power._$$Lambda$PreRebootLogger$p8FewhqoJ8SIfUcoA5y2K00i1I4;

        specialinvoke $r3.<com.android.server.power._$$Lambda$PreRebootLogger$p8FewhqoJ8SIfUcoA5y2K00i1I4: void <init>(java.io.File,java.util.concurrent.atomic.AtomicBoolean)>(r5, $r1);

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

     label1:
        virtualinvoke $r2.<java.lang.Thread: void join(long)>(l0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PreRebootLogger", "Failed to dump pre-reboot information due to interrupted", $r4);

     label4:
        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label5;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PreRebootLogger", "Failed to dump pre-reboot information due to timeout");

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void dumpLogsLocked(java.io.File, java.lang.String)
    {
        java.lang.String r0, r8;
        java.io.File r1, r6;
        boolean $z0;
        java.lang.Runtime $r2;
        java.lang.String[] $r3;
        java.lang.Process $r4;
        java.lang.Throwable $r5;
        java.io.FileWriter r7;

        r6 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

     label1:
        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r6, r0);

        $z0 = virtualinvoke r1.<java.io.File: boolean createNewFile()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1);

     label2:
        goto label4;

     label3:
        r7 = new java.io.FileWriter;

        specialinvoke r7.<java.io.FileWriter: void <init>(java.io.File,boolean)>(r1, 0);

        virtualinvoke r7.<java.io.FileWriter: void flush()>();

     label4:
        r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r3 = newarray (java.lang.String)[6];

        $r3[0] = "logcat";

        $r3[1] = "-d";

        $r3[2] = "-b";

        $r3[3] = r0;

        $r3[4] = "-f";

        $r3[5] = r8;

        $r4 = virtualinvoke $r2.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>($r3);

        virtualinvoke $r4.<java.lang.Process: int waitFor()>();

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PreRebootLogger", "Failed to dump system log buffer before reboot", $r5);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.InterruptedException from label3 to label4 with label6;
        catch java.io.IOException from label4 to label5 with label6;
        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    private static void dumpServiceLocked(java.io.File, java.lang.String)
    {
        java.lang.String r0, $r9;
        android.os.IBinder r1;
        java.io.File r2, r10;
        android.os.ParcelFileDescriptor $r3;
        java.io.FileDescriptor $r4;
        java.lang.Object[] $r5, $r8;
        java.lang.String[] $r6;
        java.lang.Throwable $r7;

        r10 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>(r0);

        if r1 != null goto label1;

        return;

     label1:
        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r10, r0);

        $r3 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r2, 738197504);

        $r4 = virtualinvoke $r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r5 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "Ljava/lang/String;");

        $r6 = (java.lang.String[]) $r5;

        interfaceinvoke r1.<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>($r4, $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r0;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to dump %s service before reboot", $r8);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PreRebootLogger", $r9, $r7);

     label4:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static java.io.File getDumpDir()
    {
        java.io.File $r1, $r2;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataMiscDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "prereboot");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        return $r1;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Pre-reboot dump directory not found");

        throw $r3;
    }

    static void lambda$dump$0(java.io.File, java.util.concurrent.atomic.AtomicBoolean)
    {
        java.util.concurrent.atomic.AtomicBoolean r0;
        java.lang.Object r1;
        java.lang.String $r2, $r3;
        java.lang.Throwable $r4;
        java.io.File r5;
        java.lang.String[] r6, r7;
        int i1, i2, i3, i4;

        r5 := @parameter0: java.io.File;

        r0 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        r1 = <com.android.server.power.PreRebootLogger: java.lang.Object sLock>;

        entermonitor r1;

     label01:
        r6 = <com.android.server.power.PreRebootLogger: java.lang.String[] BUFFERS_TO_DUMP>;

        i1 = lengthof r6;

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

     label04:
        $r3 = r6[i2];

        staticinvoke <com.android.server.power.PreRebootLogger: void dumpLogsLocked(java.io.File,java.lang.String)>(r5, $r3);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        r7 = <com.android.server.power.PreRebootLogger: java.lang.String[] SERVICES_TO_DUMP>;

        i3 = lengthof r7;

     label07:
        i4 = 0;

     label08:
        if i4 >= i3 goto label11;

     label09:
        $r2 = r7[i4];

        staticinvoke <com.android.server.power.PreRebootLogger: void dumpServiceLocked(java.io.File,java.lang.String)>(r5, $r2);

     label10:
        i4 = i4 + 1;

        goto label08;

     label11:
        exitmonitor r1;

     label12:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;

     label13:
        $r4 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    static void log(android.content.Context)
    {
        android.content.Context r0;
        java.io.File $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.android.server.power.PreRebootLogger: java.io.File getDumpDir()>();

        staticinvoke <com.android.server.power.PreRebootLogger: void log(android.content.Context,java.io.File)>(r0, $r1);

        return;
    }

    static void log(android.content.Context, java.io.File)
    {
        android.content.Context r0;
        java.io.File r1;
        boolean $z0;
        long $l0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.io.File;

        $z0 = staticinvoke <com.android.server.power.PreRebootLogger: boolean needDump(android.content.Context)>(r0);

        if $z0 == 0 goto label1;

        $l0 = <com.android.server.power.PreRebootLogger: long MAX_DUMP_TIME>;

        staticinvoke <com.android.server.power.PreRebootLogger: void dump(java.io.File,long)>(r1, $l0);

        goto label2;

     label1:
        staticinvoke <com.android.server.power.PreRebootLogger: void wipe(java.io.File)>(r1);

     label2:
        return;
    }

    private static boolean needDump(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver r1;
        int $i0;
        android.content.pm.PackageManager $r2;
        android.content.pm.PackageInstaller $r3;
        java.util.List $r4;
        boolean $z0, z1;

        r0 := @parameter0: android.content.Context;

        r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z1 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "adb_enabled", 0);

        if $i0 != 1 goto label1;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label1;

     label1:
        return z1;
    }

    private static void wipe(java.io.File)
    {
        java.lang.Object r0;
        int i0, i2;
        java.io.File $r1, r3;
        java.lang.Throwable $r2;
        java.io.File[] r4;

        r3 := @parameter0: java.io.File;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PreRebootLogger", "Wiping pre-reboot information...");

        r0 = <com.android.server.power.PreRebootLogger: java.lang.Object sLock>;

        entermonitor r0;

     label01:
        r4 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r4;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

     label04:
        $r1 = r4[i2];

        virtualinvoke $r1.<java.io.File: boolean delete()>();

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
}
