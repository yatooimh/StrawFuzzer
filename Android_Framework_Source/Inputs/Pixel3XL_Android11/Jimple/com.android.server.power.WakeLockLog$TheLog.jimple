class com.android.server.power.WakeLockLog$TheLog extends java.lang.Object
{
    private final byte[] mBuffer;
    private long mChangeCount;
    private int mEnd;
    private long mLatestTime;
    private final byte[] mReadWriteTempBuffer;
    private int mStart;
    private long mStartTime;
    private final com.android.server.power.WakeLockLog$TagDatabase mTagDatabase;
    private final byte[] mTempBuffer;
    private final com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator;

    void <init>(com.android.server.power.WakeLockLog$Injector, com.android.server.power.WakeLockLog$EntryByteTranslator, com.android.server.power.WakeLockLog$TagDatabase)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        com.android.server.power.WakeLockLog$Injector r1;
        com.android.server.power.WakeLockLog$EntryByteTranslator r2;
        com.android.server.power.WakeLockLog$TagDatabase r3;
        byte[] $r4, $r5, $r6;
        int $i0, $i1;
        com.android.server.power.WakeLockLog$TheLog$1 $r7;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        r1 := @parameter0: com.android.server.power.WakeLockLog$Injector;

        r2 := @parameter1: com.android.server.power.WakeLockLog$EntryByteTranslator;

        r3 := @parameter2: com.android.server.power.WakeLockLog$TagDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = newarray (byte)[9];

        r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mTempBuffer> = $r4;

        $r5 = newarray (byte)[9];

        r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mReadWriteTempBuffer> = $r5;

        r0.<com.android.server.power.WakeLockLog$TheLog: int mStart> = 0;

        r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd> = 0;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime> = 0L;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mLatestTime> = 0L;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mChangeCount> = 0L;

        $i0 = virtualinvoke r1.<com.android.server.power.WakeLockLog$Injector: int getLogSize()>();

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 10);

        $r6 = newarray (byte)[$i1];

        r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer> = $r6;

        r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator> = r2;

        r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$TagDatabase mTagDatabase> = r3;

        $r7 = new com.android.server.power.WakeLockLog$TheLog$1;

        specialinvoke $r7.<com.android.server.power.WakeLockLog$TheLog$1: void <init>(com.android.server.power.WakeLockLog$TheLog)>(r0);

        virtualinvoke r3.<com.android.server.power.WakeLockLog$TagDatabase: void setCallback(com.android.server.power.WakeLockLog$TagDatabase$Callback)>($r7);

        return;
    }

    static void access$200(com.android.server.power.WakeLockLog$TheLog, int)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: void removeTagIndex(int)>(i0);

        return;
    }

    static int access$300(com.android.server.power.WakeLockLog$TheLog)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int $i0;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        $i0 = r0.<com.android.server.power.WakeLockLog$TheLog: int mStart>;

        return $i0;
    }

    static long access$400(com.android.server.power.WakeLockLog$TheLog)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        long $l0;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        $l0 = r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime>;

        return $l0;
    }

    static long access$500(com.android.server.power.WakeLockLog$TheLog)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        long $l0;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        $l0 = r0.<com.android.server.power.WakeLockLog$TheLog: long mChangeCount>;

        return $l0;
    }

    static int access$600(com.android.server.power.WakeLockLog$TheLog)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int $i0;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        $i0 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        return $i0;
    }

    static com.android.server.power.WakeLockLog$LogEntry access$700(com.android.server.power.WakeLockLog$TheLog, int, long, com.android.server.power.WakeLockLog$LogEntry)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0;
        long l1;
        com.android.server.power.WakeLockLog$LogEntry r1, $r2;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 := @parameter3: com.android.server.power.WakeLockLog$LogEntry;

        $r2 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$LogEntry readEntryAt(int,long,com.android.server.power.WakeLockLog$LogEntry)>(i0, l1, r1);

        return $r2;
    }

    static com.android.server.power.WakeLockLog$EntryByteTranslator access$800(com.android.server.power.WakeLockLog$TheLog)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        com.android.server.power.WakeLockLog$EntryByteTranslator $r1;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        $r1 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        return $r1;
    }

    static byte[] access$900(com.android.server.power.WakeLockLog$TheLog)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        byte[] $r1;

        r0 := @parameter0: com.android.server.power.WakeLockLog$TheLog;

        $r1 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        return $r1;
    }

    private int getAvailableSpace()
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0, $i1, $i2, i3, i4;
        byte[] $r1, $r2;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        i3 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        i0 = r0.<com.android.server.power.WakeLockLog$TheLog: int mStart>;

        if i3 <= i0 goto label1;

        $r2 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i2 = lengthof $r2;

        $i1 = i3 - i0;

        i4 = $i2 - $i1;

        goto label3;

     label1:
        if i3 >= i0 goto label2;

        i4 = i0 - i3;

        goto label3;

     label2:
        $r1 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        i4 = lengthof $r1;

     label3:
        return i4;
    }

    private boolean isBufferEmpty()
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        $i1 = r0.<com.android.server.power.WakeLockLog$TheLog: int mStart>;

        $i0 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        if $i1 != $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean makeSpace(int)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] $r1;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i2 = lengthof $r1;

        $i1 = i0 + 1;

        if $i2 >= $i1 goto label1;

        return 0;

     label1:
        $i3 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: int getAvailableSpace()>();

        $i4 = i0 + 1;

        if $i3 >= $i4 goto label2;

        specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: void removeOldestItem()>();

        goto label1;

     label2:
        return 1;
    }

    private com.android.server.power.WakeLockLog$LogEntry readEntryAt(int, long, com.android.server.power.WakeLockLog$LogEntry)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0, i2, $i3, $i4, $i5, i8;
        long l1;
        com.android.server.power.WakeLockLog$LogEntry r1, $r5;
        byte[] r2, $r3, $r6;
        com.android.server.power.WakeLockLog$EntryByteTranslator $r4;
        byte $b6, $b7;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: com.android.server.power.WakeLockLog$LogEntry;

        i8 = 0;

     label1:
        if i8 >= 9 goto label3;

        r2 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i4 = i0 + i8;

        $i3 = lengthof r2;

        i2 = $i4 % $i3;

        $i5 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        if i2 != $i5 goto label2;

        goto label3;

     label2:
        $r6 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mReadWriteTempBuffer>;

        $b6 = r2[i2];

        $b7 = (byte) $b6;

        $r6[i8] = $b7;

        i8 = i8 + 1;

        goto label1;

     label3:
        $r4 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        $r3 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mReadWriteTempBuffer>;

        $r5 = virtualinvoke $r4.<com.android.server.power.WakeLockLog$EntryByteTranslator: com.android.server.power.WakeLockLog$LogEntry fromBytes(byte[],long,com.android.server.power.WakeLockLog$LogEntry)>($r3, l1, r1);

        return $r5;
    }

    private void removeOldestItem()
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        com.android.server.power.WakeLockLog$LogEntry r1;
        int i0, $i2, $i4, $i5, $i6, $i7;
        boolean $z0;
        long $l1, $l3, $l8, $l9, $l10;
        com.android.server.power.WakeLockLog$EntryByteTranslator $r2;
        byte[] $r3;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        $z0 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.power.WakeLockLog$TheLog: int mStart>;

        $l1 = r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime>;

        r1 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$LogEntry readEntryAt(int,long,com.android.server.power.WakeLockLog$LogEntry)>($i2, $l1, null);

        $r2 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        $l3 = r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime>;

        i0 = virtualinvoke $r2.<com.android.server.power.WakeLockLog$EntryByteTranslator: int toBytes(com.android.server.power.WakeLockLog$LogEntry,byte[],long)>(r1, null, $l3);

        $i4 = r0.<com.android.server.power.WakeLockLog$TheLog: int mStart>;

        $i6 = $i4 + i0;

        $r3 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i5 = lengthof $r3;

        $i7 = $i6 % $i5;

        r0.<com.android.server.power.WakeLockLog$TheLog: int mStart> = $i7;

        $l8 = r1.<com.android.server.power.WakeLockLog$LogEntry: long time>;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime> = $l8;

        $l9 = r0.<com.android.server.power.WakeLockLog$TheLog: long mChangeCount>;

        $l10 = $l9 + 1L;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mChangeCount> = $l10;

        return;
    }

    private void removeTagIndex(int)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0, $i1, $i2, i4, $i6, $i7, $i8;
        boolean $z0;
        com.android.server.power.WakeLockLog$LogEntry $r2, r9;
        com.android.server.power.WakeLockLog$TagData $r3, $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        long l5;
        com.android.server.power.WakeLockLog$EntryByteTranslator $r11;
        byte[] $r12;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        i4 = r0.<com.android.server.power.WakeLockLog$TheLog: int mStart>;

        l5 = r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime>;

        $r2 = new com.android.server.power.WakeLockLog$LogEntry;

        specialinvoke $r2.<com.android.server.power.WakeLockLog$LogEntry: void <init>()>();

     label2:
        $i1 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        if i4 == $i1 goto label5;

        r9 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$LogEntry readEntryAt(int,long,com.android.server.power.WakeLockLog$LogEntry)>(i4, l5, $r2);

        if r9 != null goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry is unreadable - Unexpected @ ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PowerManagerService.WLLog", $r8);

        goto label5;

     label3:
        $r3 = r9.<com.android.server.power.WakeLockLog$LogEntry: com.android.server.power.WakeLockLog$TagData tag>;

        if $r3 == null goto label4;

        $r4 = r9.<com.android.server.power.WakeLockLog$LogEntry: com.android.server.power.WakeLockLog$TagData tag>;

        $i2 = $r4.<com.android.server.power.WakeLockLog$TagData: int index>;

        if $i2 != i0 goto label4;

        r9.<com.android.server.power.WakeLockLog$LogEntry: com.android.server.power.WakeLockLog$TagData tag> = null;

        specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: void writeEntryAt(int,com.android.server.power.WakeLockLog$LogEntry,long)>(i4, r9, l5);

     label4:
        l5 = r9.<com.android.server.power.WakeLockLog$LogEntry: long time>;

        $r11 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        $i6 = virtualinvoke $r11.<com.android.server.power.WakeLockLog$EntryByteTranslator: int toBytes(com.android.server.power.WakeLockLog$LogEntry,byte[],long)>(r9, null, 0L);

        $i7 = i4 + $i6;

        $r12 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i8 = lengthof $r12;

        i4 = $i7 % $i8;

        goto label2;

     label5:
        return;
    }

    private void writeBytesAt(int, byte[], int)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0, i1, $i2, $i3, $i6, i7;
        byte[] r1, r2;
        byte $b4, $b5;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i7 = 0;

     label1:
        if i7 >= i1 goto label2;

        r2 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i3 = i0 + i7;

        $i2 = lengthof r2;

        $i6 = $i3 % $i2;

        $b4 = r1[i7];

        $b5 = (byte) $b4;

        r2[$i6] = $b5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeEntryAt(int, com.android.server.power.WakeLockLog$LogEntry, long)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        int i0, i2;
        com.android.server.power.WakeLockLog$LogEntry r1;
        long l1;
        byte[] $r2, $r4;
        com.android.server.power.WakeLockLog$EntryByteTranslator $r3;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.power.WakeLockLog$LogEntry;

        l1 := @parameter2: long;

        $r3 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        $r2 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mReadWriteTempBuffer>;

        i2 = virtualinvoke $r3.<com.android.server.power.WakeLockLog$EntryByteTranslator: int toBytes(com.android.server.power.WakeLockLog$LogEntry,byte[],long)>(r1, $r2, l1);

        if i2 <= 0 goto label1;

        $r4 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mReadWriteTempBuffer>;

        specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: void writeBytesAt(int,byte[],int)>(i0, $r4, i2);

     label1:
        return;
    }

    void addEntry(com.android.server.power.WakeLockLog$LogEntry)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        long l0, $l2, $l9, $l10, $l11, $l12, $l13, $l14;
        int i1, $i4, $i5, $i6, $i7, $i8, i15;
        boolean $z0, $z1;
        byte[] $r1, $r7, $r8, $r11;
        com.android.server.power.WakeLockLog$EntryByteTranslator $r2, $r12;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        com.android.server.power.WakeLockLog$TagData $r9;
        com.android.server.power.WakeLockLog$LogEntry $r10, r13;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        r13 := @parameter0: com.android.server.power.WakeLockLog$LogEntry;

        $z0 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        l0 = r13.<com.android.server.power.WakeLockLog$LogEntry: long time>;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mLatestTime> = l0;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mStartTime> = l0;

     label1:
        $r2 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        $r1 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mTempBuffer>;

        $l2 = r0.<com.android.server.power.WakeLockLog$TheLog: long mLatestTime>;

        i1 = virtualinvoke $r2.<com.android.server.power.WakeLockLog$EntryByteTranslator: int toBytes(com.android.server.power.WakeLockLog$LogEntry,byte[],long)>(r13, $r1, $l2);

        if i1 != -1 goto label2;

        return;

     label2:
        i15 = i1;

        if i1 != -2 goto label3;

        $r10 = new com.android.server.power.WakeLockLog$LogEntry;

        $l13 = r13.<com.android.server.power.WakeLockLog$LogEntry: long time>;

        specialinvoke $r10.<com.android.server.power.WakeLockLog$LogEntry: void <init>(long,int,com.android.server.power.WakeLockLog$TagData,int)>($l13, 0, null, 0);

        virtualinvoke r0.<com.android.server.power.WakeLockLog$TheLog: void addEntry(com.android.server.power.WakeLockLog$LogEntry)>($r10);

        $r12 = r0.<com.android.server.power.WakeLockLog$TheLog: com.android.server.power.WakeLockLog$EntryByteTranslator mTranslator>;

        $r11 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mTempBuffer>;

        $l14 = r0.<com.android.server.power.WakeLockLog$TheLog: long mLatestTime>;

        i15 = virtualinvoke $r12.<com.android.server.power.WakeLockLog$EntryByteTranslator: int toBytes(com.android.server.power.WakeLockLog$LogEntry,byte[],long)>(r13, $r11, $l14);

     label3:
        if i15 > 9 goto label6;

        if i15 > 0 goto label4;

        goto label6;

     label4:
        $z1 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: boolean makeSpace(int)>(i15);

        if $z1 != 0 goto label5;

        return;

     label5:
        $i4 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        $r7 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mTempBuffer>;

        specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: void writeBytesAt(int,byte[],int)>($i4, $r7, i15);

        $i5 = r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd>;

        $i7 = $i5 + i15;

        $r8 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i6 = lengthof $r8;

        $i8 = $i7 % $i6;

        r0.<com.android.server.power.WakeLockLog$TheLog: int mEnd> = $i8;

        $l9 = r13.<com.android.server.power.WakeLockLog$LogEntry: long time>;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mLatestTime> = $l9;

        $r9 = r13.<com.android.server.power.WakeLockLog$LogEntry: com.android.server.power.WakeLockLog$TagData tag>;

        $l10 = r13.<com.android.server.power.WakeLockLog$LogEntry: long time>;

        staticinvoke <com.android.server.power.WakeLockLog$TagDatabase: void updateTagTime(com.android.server.power.WakeLockLog$TagData,long)>($r9, $l10);

        $l11 = r0.<com.android.server.power.WakeLockLog$TheLog: long mChangeCount>;

        $l12 = $l11 + 1L;

        r0.<com.android.server.power.WakeLockLog$TheLog: long mChangeCount> = $l12;

        return;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Log entry size is out of expected range: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PowerManagerService.WLLog", $r6);

        return;
    }

    java.util.Iterator getAllItems(com.android.server.power.WakeLockLog$LogEntry)
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        com.android.server.power.WakeLockLog$LogEntry r1;
        com.android.server.power.WakeLockLog$TheLog$2 $r2;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        r1 := @parameter0: com.android.server.power.WakeLockLog$LogEntry;

        $r2 = new com.android.server.power.WakeLockLog$TheLog$2;

        specialinvoke $r2.<com.android.server.power.WakeLockLog$TheLog$2: void <init>(com.android.server.power.WakeLockLog$TheLog,com.android.server.power.WakeLockLog$LogEntry)>(r0, r1);

        return $r2;
    }

    int getUsedBufferSize()
    {
        com.android.server.power.WakeLockLog$TheLog r0;
        byte[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.power.WakeLockLog$TheLog;

        $r1 = r0.<com.android.server.power.WakeLockLog$TheLog: byte[] mBuffer>;

        $i0 = lengthof $r1;

        $i1 = specialinvoke r0.<com.android.server.power.WakeLockLog$TheLog: int getAvailableSpace()>();

        $i2 = $i0 - $i1;

        return $i2;
    }
}
