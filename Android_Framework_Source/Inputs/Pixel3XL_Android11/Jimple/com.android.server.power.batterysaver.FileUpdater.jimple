public class com.android.server.power.batterysaver.FileUpdater extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String PROP_SKIP_WRITE;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_DEFAULT_ROOT;
    private final int MAX_RETRIES;
    private final long RETRY_INTERVAL_MS;
    private final android.content.Context mContext;
    private final android.util.ArrayMap mDefaultValues;
    private java.lang.Runnable mHandleWriteOnHandlerRunnable;
    private final android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private final android.util.ArrayMap mPendingWrites;
    private int mRetries;

    public void <init>(android.content.Context)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        android.content.Context r1;
        com.android.server.IoThread $r2;
        android.os.Looper $r3;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.android.server.IoThread: com.android.server.IoThread get()>();

        $r3 = virtualinvoke $r2.<com.android.server.IoThread: android.os.Looper getLooper()>();

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void <init>(android.content.Context,android.os.Looper,int,int)>(r1, $r3, 10, 5000);

        return;
    }

    void <init>(android.content.Context, android.os.Looper, int, int)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        android.content.Context r1;
        android.os.Looper r2;
        int i0, i1;
        java.lang.Object $r3;
        android.util.ArrayMap $r4, $r5;
        com.android.server.power.batterysaver._$$Lambda$FileUpdater$NUmipjKCJwbgmFbIcGS3uaz3QFk $r6;
        android.os.Handler $r7;
        long $l2;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues> = $r5;

        r0.<com.android.server.power.batterysaver.FileUpdater: int mRetries> = 0;

        $r6 = new com.android.server.power.batterysaver._$$Lambda$FileUpdater$NUmipjKCJwbgmFbIcGS3uaz3QFk;

        specialinvoke $r6.<com.android.server.power.batterysaver._$$Lambda$FileUpdater$NUmipjKCJwbgmFbIcGS3uaz3QFk: void <init>(com.android.server.power.batterysaver.FileUpdater)>(r0);

        r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Runnable mHandleWriteOnHandlerRunnable> = $r6;

        r0.<com.android.server.power.batterysaver.FileUpdater: android.content.Context mContext> = r1;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        r0.<com.android.server.power.batterysaver.FileUpdater: android.os.Handler mHandler> = $r7;

        r0.<com.android.server.power.batterysaver.FileUpdater: int MAX_RETRIES> = i0;

        $l2 = (long) i1;

        r0.<com.android.server.power.batterysaver.FileUpdater: long RETRY_INTERVAL_MS> = $l2;

        return;
    }

    private android.util.ArrayMap cloneMap(android.util.ArrayMap)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        android.util.ArrayMap r1, $r2;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: android.util.ArrayMap;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>(android.util.ArrayMap)>(r1);

        return $r2;
    }

    private void doWtf(java.lang.String)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.String r1;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void injectWtf(java.lang.String,java.lang.Throwable)>(r1, null);

        return;
    }

    private boolean ensureDefaultLoaded(java.lang.String)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.String r1, r8;
        android.util.ArrayMap $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object r9, r10;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r8 := @parameter0: java.lang.String;

        r9 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r9;

     label01:
        $r2 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r8);

        if $z0 == 0 goto label03;

        exitmonitor r9;

     label02:
        return 1;

     label03:
        exitmonitor r9;

     label04:
        r1 = virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.String injectReadFromFileTrimmed(java.lang.String)>(r8);

     label05:
        r10 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r10;

     label06:
        $r3 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r1);

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void saveDefaultValuesLocked()>();

        exitmonitor r10;

     label07:
        return 1;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r10;

     label10:
        throw $r7;

     label11:
        $r6 := @caughtexception;

        virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void injectWtf(java.lang.String,java.lang.Throwable)>("Unable to read from file", $r6);

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void removePendingWrite(java.lang.String)>(r8);

        return 0;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r9;

     label14:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private java.lang.String getKeysString(java.util.Map)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.util.Map r1;
        java.util.ArrayList $r2;
        java.util.Set $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: java.util.Map;

        $r2 = new java.util.ArrayList;

        $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.String toString()>();

        return $r4;
    }

    private void handleWriteOnHandler()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        int i0, $i1, i2;
        java.lang.String r1, r10;
        android.util.ArrayMap $r2, $r3, r9;
        java.lang.Object $r4, $r5, r8;
        boolean $z0, z1;
        java.lang.Throwable $r6, $r7;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r8 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r8;

     label01:
        $r2 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if $i1 != 0 goto label03;

        exitmonitor r8;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        r9 = specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap cloneMap(android.util.ArrayMap)>($r3);

        exitmonitor r8;

     label04:
        z1 = 0;

        i0 = virtualinvoke r9.<android.util.ArrayMap: int size()>();

        i2 = 0;

     label05:
        if i2 >= i0 goto label10;

        $r4 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        r10 = (java.lang.String) $r4;

        $r5 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        r1 = (java.lang.String) $r5;

        $z0 = specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: boolean ensureDefaultLoaded(java.lang.String)>(r10);

        if $z0 != 0 goto label06;

        goto label09;

     label06:
        virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void injectWriteToFile(java.lang.String,java.lang.String)>(r10, r1);

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void removePendingWrite(java.lang.String)>(r10);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        z1 = 1;

     label09:
        i2 = i2 + 1;

        goto label05;

     label10:
        if z1 == 0 goto label11;

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void scheduleRetry()>();

     label11:
        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r8;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void removePendingWrite(java.lang.String)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void saveDefaultValuesLocked()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        android.util.AtomicFile $r2;
        java.io.File $r3, $r4, $r5, $r12;
        java.nio.charset.Charset $r6;
        java.lang.String $r7, $r13;
        java.lang.Boolean $r8;
        android.util.ArrayMap $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder $r11;
        java.io.FileOutputStream r14, r15;
        com.android.internal.util.FastXmlSerializer r16;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        $r2 = new android.util.AtomicFile;

        $r3 = virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: java.io.File injectDefaultValuesFilename()>();

        specialinvoke $r2.<android.util.AtomicFile: void <init>(java.io.File)>($r3);

        r14 = null;

     label01:
        $r4 = virtualinvoke $r2.<android.util.AtomicFile: java.io.File getBaseFile()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

     label02:
        r14 = null;

     label03:
        r15 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label04:
        r14 = r15;

     label05:
        r16 = new com.android.internal.util.FastXmlSerializer;

     label06:
        r14 = r15;

     label07:
        specialinvoke r16.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label08:
        r14 = r15;

     label09:
        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r16.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r15, $r7);

     label10:
        r14 = r15;

     label11:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r16.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r8);

     label12:
        r14 = r15;

     label13:
        interfaceinvoke r16.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "defaults");

     label14:
        r14 = r15;

     label15:
        $r9 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeMapXml(java.util.Map,org.xmlpull.v1.XmlSerializer,com.android.internal.util.XmlUtils$WriteMapCallback)>($r9, r16, null);

     label16:
        r14 = r15;

     label17:
        interfaceinvoke r16.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "defaults");

     label18:
        r14 = r15;

     label19:
        interfaceinvoke r16.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label20:
        r14 = r15;

     label21:
        virtualinvoke $r2.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r15);

     label22:
        goto label24;

     label23:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write to file ");

        $r12 = virtualinvoke $r2.<android.util.AtomicFile: java.io.File getBaseFile()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BatterySaverController", $r13, $r10);

        virtualinvoke $r2.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r14);

     label24:
        return;

        catch java.io.IOException from label01 to label02 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label23;
        catch java.lang.RuntimeException from label01 to label02 with label23;
        catch java.io.IOException from label03 to label04 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label23;
        catch java.lang.RuntimeException from label03 to label04 with label23;
        catch java.io.IOException from label05 to label06 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label23;
        catch java.lang.RuntimeException from label05 to label06 with label23;
        catch java.io.IOException from label07 to label08 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label23;
        catch java.lang.RuntimeException from label07 to label08 with label23;
        catch java.io.IOException from label09 to label10 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label23;
        catch java.lang.RuntimeException from label09 to label10 with label23;
        catch java.io.IOException from label11 to label12 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label23;
        catch java.lang.RuntimeException from label11 to label12 with label23;
        catch java.io.IOException from label13 to label14 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label23;
        catch java.lang.RuntimeException from label13 to label14 with label23;
        catch java.io.IOException from label15 to label16 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label23;
        catch java.lang.RuntimeException from label15 to label16 with label23;
        catch java.io.IOException from label17 to label18 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label23;
        catch java.lang.RuntimeException from label17 to label18 with label23;
        catch java.io.IOException from label19 to label20 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label23;
        catch java.lang.RuntimeException from label19 to label20 with label23;
        catch java.io.IOException from label21 to label22 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label23;
        catch java.lang.RuntimeException from label21 to label22 with label23;
    }

    private void scheduleRetry()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        android.util.ArrayMap $r2, $r8;
        java.lang.Runnable $r3, $r5;
        android.os.Handler $r4, $r6;
        long $l4;
        java.lang.String $r9, $r11;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if $i1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $i2 = r0.<com.android.server.power.batterysaver.FileUpdater: int mRetries>;

        i0 = $i2 + 1;

        r0.<com.android.server.power.batterysaver.FileUpdater: int mRetries> = i0;

        $i3 = r0.<com.android.server.power.batterysaver.FileUpdater: int MAX_RETRIES>;

        if i0 <= $i3 goto label5;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Gave up writing files: ");

        $r8 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        $r9 = specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.String getKeysString(java.util.Map)>($r8);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void doWtf(java.lang.String)>($r11);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 = r0.<com.android.server.power.batterysaver.FileUpdater: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Runnable mHandleWriteOnHandlerRunnable>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        $r6 = r0.<com.android.server.power.batterysaver.FileUpdater: android.os.Handler mHandler>;

        $r5 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Runnable mHandleWriteOnHandlerRunnable>;

        $l4 = r0.<com.android.server.power.batterysaver.FileUpdater: long RETRY_INTERVAL_MS>;

        virtualinvoke $r6.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, $l4);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r12 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    android.util.ArrayMap getDefaultValuesForTest()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        android.util.ArrayMap $r1;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        $r1 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        return $r1;
    }

    java.io.File injectDefaultValuesFilename()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.io.File $r2, $r3, $r4;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "battery-saver");

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "default-values.xml");

        return $r4;
    }

    java.lang.String injectReadFromFileTrimmed(java.lang.String) throws java.io.IOException
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    boolean injectShouldSkipWrite()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        boolean $z0;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.batterysaver.no_write_files", 0);

        return $z0;
    }

    void injectWriteToFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.String r1, $r6, $r16, $r18, r19;
        boolean $z0;
        java.lang.Throwable $r7, $r8, $r9;
        java.lang.StringBuilder r26, r28;
        java.io.FileWriter r27;
        java.lang.Exception r29;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: java.lang.String;

        r19 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: boolean injectShouldSkipWrite()>();

        if $z0 == 0 goto label01;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipped writing to \'");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BatterySaverController", $r6);

        return;

     label01:
        r27 = new java.io.FileWriter;

        specialinvoke r27.<java.io.FileWriter: void <init>(java.lang.String)>(r1);

     label02:
        virtualinvoke r27.<java.io.FileWriter: void write(java.lang.String)>(r19);

     label03:
        virtualinvoke r27.<java.io.FileWriter: void close()>();

     label04:
        return;

     label05:
        $r8 := @caughtexception;

     label06:
        virtualinvoke r27.<java.io.FileWriter: void close()>();

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

     label09:
        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label10:
        throw $r8;

     label11:
        $r9 := @caughtexception;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing \'");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        r29 = (java.lang.Exception) $r9;

        $r16 = virtualinvoke r29.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BatterySaverController", $r18);

        throw $r9;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.RuntimeException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.RuntimeException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.RuntimeException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label11;
        catch java.lang.RuntimeException from label10 to label11 with label11;
    }

    void injectWtf(java.lang.String, java.lang.Throwable)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("BatterySaverController", r1, r2);

        return;
    }

    public void lambda$new$0$FileUpdater()
    {
        com.android.server.power.batterysaver.FileUpdater r0;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        specialinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void handleWriteOnHandler()>();

        return;
    }

    boolean loadDefaultValuesLocked()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.io.FileInputStream r2;
        android.util.AtomicFile $r3;
        java.io.File $r4, $r17;
        java.nio.charset.Charset $r5;
        java.lang.String $r6, $r10, $r11, $r18, r23;
        android.util.ArrayMap $r7, $r8, r19, r20, r21;
        java.lang.String[] $r9;
        boolean $z0;
        java.lang.Throwable $r12, $r13, $r14, $r15;
        java.lang.StringBuilder $r16, r24;
        org.xmlpull.v1.XmlPullParser r22;
        int i0, i1;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        $r3 = new android.util.AtomicFile;

        $r4 = virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: java.io.File injectDefaultValuesFilename()>();

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        r19 = null;

        r20 = null;

     label01:
        r2 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r21 = null;

     label03:
        r22 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label04:
        r21 = null;

     label05:
        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, $r6);

     label06:
        r21 = r20;

     label07:
        i0 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: int next()>();

     label08:
        if i0 == 1 goto label31;

        if i0 == 2 goto label09;

        goto label06;

     label09:
        r21 = r20;

     label10:
        i1 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label11:
        r21 = r20;

     label12:
        r23 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label13:
        if i1 != 1 goto label28;

        r21 = r20;

     label14:
        $r10 = "defaults";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r23);

        if $z0 != 0 goto label06;

     label15:
        r21 = r20;

     label16:
        r24 = new java.lang.StringBuilder;

     label17:
        r21 = r20;

     label18:
        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

     label19:
        r21 = r20;

     label20:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid root tag: ");

     label21:
        r21 = r20;

     label22:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

     label23:
        r21 = r20;

     label24:
        $r11 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BatterySaverController", $r11);

     label25:
        if r2 == null goto label27;

        r19 = r20;

     label26:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label27:
        return 0;

     label28:
        r21 = r20;

     label29:
        $r9 = newarray (java.lang.String)[1];

        r20 = staticinvoke <com.android.internal.util.XmlUtils: android.util.ArrayMap readThisArrayMapXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[],com.android.internal.util.XmlUtils$ReadMapCallback)>(r22, "defaults", $r9, null);

     label30:
        goto label06;

     label31:
        r19 = r20;

        if r2 == null goto label43;

        r19 = r20;

     label32:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label33:
        r19 = r20;

        goto label43;

     label34:
        $r12 := @caughtexception;

        if r2 == null goto label39;

     label35:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label36:
        goto label39;

     label37:
        $r14 := @caughtexception;

        r19 = r21;

     label38:
        virtualinvoke $r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label39:
        r19 = r21;

     label40:
        throw $r12;

     label41:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read file ");

        $r17 = virtualinvoke $r3.<android.util.AtomicFile: java.io.File getBaseFile()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BatterySaverController", $r18, $r15);

        goto label43;

     label42:
        $r13 := @caughtexception;

        r19 = null;

     label43:
        if r19 == null goto label44;

        $r7 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        virtualinvoke $r7.<android.util.ArrayMap: void clear()>();

        $r8 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        virtualinvoke $r8.<android.util.ArrayMap: void putAll(java.util.Map)>(r19);

        return 1;

     label44:
        return 0;

        catch java.io.FileNotFoundException from label01 to label02 with label42;
        catch java.io.IOException from label01 to label02 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label41;
        catch java.lang.RuntimeException from label01 to label02 with label41;
        catch java.lang.Throwable from label03 to label04 with label34;
        catch java.lang.Throwable from label05 to label06 with label34;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.Throwable from label10 to label11 with label34;
        catch java.lang.Throwable from label12 to label13 with label34;
        catch java.lang.Throwable from label14 to label15 with label34;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.Throwable from label18 to label19 with label34;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.lang.Throwable from label22 to label23 with label34;
        catch java.lang.Throwable from label24 to label25 with label34;
        catch java.io.FileNotFoundException from label26 to label27 with label42;
        catch java.io.IOException from label26 to label27 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label41;
        catch java.lang.RuntimeException from label26 to label27 with label41;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.io.FileNotFoundException from label32 to label33 with label42;
        catch java.io.IOException from label32 to label33 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label32 to label33 with label41;
        catch java.lang.RuntimeException from label32 to label33 with label41;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.io.FileNotFoundException from label38 to label39 with label42;
        catch java.io.IOException from label38 to label39 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label38 to label39 with label41;
        catch java.lang.RuntimeException from label38 to label39 with label41;
        catch java.io.FileNotFoundException from label40 to label41 with label42;
        catch java.io.IOException from label40 to label41 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label40 to label41 with label41;
        catch java.lang.RuntimeException from label40 to label41 with label41;
    }

    public void restoreDefault()
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.Object r1;
        android.util.ArrayMap $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r1 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        virtualinvoke $r3.<android.util.ArrayMap: void clear()>();

        $r4 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mDefaultValues>;

        virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void writeFiles(android.util.ArrayMap)>($r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemReady(boolean)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        boolean z0, $z2;
        java.lang.Object r1;
        java.io.File $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r1;

        if z0 == 0 goto label3;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: boolean loadDefaultValuesLocked()>();

        if $z2 == 0 goto label4;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BatterySaverController", "Default values loaded after runtime restart; writing them...");

        virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: void restoreDefault()>();

     label2:
        goto label4;

     label3:
        $r3 = virtualinvoke r0.<com.android.server.power.batterysaver.FileUpdater: java.io.File injectDefaultValuesFilename()>();

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void writeFiles(android.util.ArrayMap)
    {
        com.android.server.power.batterysaver.FileUpdater r0;
        java.lang.Object r1, $r8, $r9;
        java.lang.String r2, r3;
        int $i0, i1;
        java.lang.Runnable $r4, $r6;
        android.os.Handler $r5, $r7;
        android.util.ArrayMap $r10, r13;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.power.batterysaver.FileUpdater;

        r13 := @parameter0: android.util.ArrayMap;

        r1 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = virtualinvoke r13.<android.util.ArrayMap: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label5;

     label3:
        $r8 = virtualinvoke r13.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r2 = (java.lang.String) $r8;

        $r9 = virtualinvoke r13.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r3 = (java.lang.String) $r9;

        $r10 = r0.<com.android.server.power.batterysaver.FileUpdater: android.util.ArrayMap mPendingWrites>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        r0.<com.android.server.power.batterysaver.FileUpdater: int mRetries> = 0;

        $r5 = r0.<com.android.server.power.batterysaver.FileUpdater: android.os.Handler mHandler>;

        $r4 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Runnable mHandleWriteOnHandlerRunnable>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        $r7 = r0.<com.android.server.power.batterysaver.FileUpdater: android.os.Handler mHandler>;

        $r6 = r0.<com.android.server.power.batterysaver.FileUpdater: java.lang.Runnable mHandleWriteOnHandlerRunnable>;

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r12 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.power.batterysaver.FileUpdater: java.lang.String TAG_DEFAULT_ROOT> = "defaults";

        <com.android.server.power.batterysaver.FileUpdater: java.lang.String TAG> = "BatterySaverController";

        <com.android.server.power.batterysaver.FileUpdater: java.lang.String PROP_SKIP_WRITE> = "debug.batterysaver.no_write_files";

        <com.android.server.power.batterysaver.FileUpdater: boolean DEBUG> = 0;

        return;
    }
}
