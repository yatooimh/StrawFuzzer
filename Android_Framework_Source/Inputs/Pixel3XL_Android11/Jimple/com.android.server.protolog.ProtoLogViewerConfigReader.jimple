public class com.android.server.protolog.ProtoLogViewerConfigReader extends java.lang.Object
{
    private java.util.Map mLogMessageMap;

    public void <init>()
    {
        com.android.server.protolog.ProtoLogViewerConfigReader r0;

        r0 := @this: com.android.server.protolog.ProtoLogViewerConfigReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap> = null;

        return;
    }

    public java.lang.String getViewerString(int)
    {
        com.android.server.protolog.ProtoLogViewerConfigReader r0;
        int i0;
        java.util.Map $r1, $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.protolog.ProtoLogViewerConfigReader;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

        if $r1 == null goto label3;

        $r2 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.String) $r4;

     label2:
        exitmonitor r0;

        return r6;

     label3:
        exitmonitor r0;

        return null;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public int knownViewerStringsNumber()
    {
        com.android.server.protolog.ProtoLogViewerConfigReader r0;
        int i0;
        java.util.Map $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.protolog.ProtoLogViewerConfigReader;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

        i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        exitmonitor r0;

        return 0;

     label4:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void loadViewerConfig(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.protolog.ProtoLogViewerConfigReader r0;
        java.lang.String r1, $r2, $r8, $r22, $r28, $r34, r43, r48, r49;
        int i0, $i1;
        boolean $z0;
        java.util.Map $r4, $r11, r37;
        java.lang.Object $r9;
        org.json.JSONObject $r10, r44, r45;
        java.lang.Integer $r12;
        java.lang.Throwable $r16, $r17, $r23, $r29, $r35;
        java.io.PrintWriter r36;
        java.io.InputStreamReader r38;
        java.util.zip.GZIPInputStream r39;
        java.io.FileInputStream r40;
        java.io.BufferedReader r41;
        java.lang.StringBuilder r42, r51, r53, r55, r57;
        java.util.TreeMap r46;
        java.util.Iterator r47;

        r0 := @this: com.android.server.protolog.ProtoLogViewerConfigReader;

        r36 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: java.lang.String;

        entermonitor r0;

     label01:
        r37 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

     label02:
        if r37 == null goto label03;

        exitmonitor r0;

        return;

     label03:
        r38 = new java.io.InputStreamReader;

        r39 = new java.util.zip.GZIPInputStream;

        r40 = new java.io.FileInputStream;

        specialinvoke r40.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        specialinvoke r39.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r40);

        specialinvoke r38.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r39);

        r41 = new java.io.BufferedReader;

        specialinvoke r41.<java.io.BufferedReader: void <init>(java.io.Reader)>(r38);

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

     label04:
        r43 = virtualinvoke r41.<java.io.BufferedReader: java.lang.String readLine()>();

     label05:
        if r43 == null goto label08;

     label06:
        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label07:
        goto label04;

     label08:
        virtualinvoke r41.<java.io.BufferedReader: void close()>();

        r44 = new org.json.JSONObject;

        $r2 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r44.<org.json.JSONObject: void <init>(java.lang.String)>($r2);

        r45 = virtualinvoke r44.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("messages");

        r46 = new java.util.TreeMap;

        specialinvoke r46.<java.util.TreeMap: void <init>()>();

        r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap> = r46;

        r47 = virtualinvoke r45.<org.json.JSONObject: java.util.Iterator keys()>();

     label09:
        $z0 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r9 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.lang.String) $r9;

     label10:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r48);

        $r10 = virtualinvoke r45.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>(r48);

        r49 = virtualinvoke $r10.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("message");

        $r11 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r49);

     label11:
        goto label13;

     label12:
        $r35 := @caughtexception;

     label13:
        goto label09;

     label14:
        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded ");

        $r4 = r0.<com.android.server.protolog.ProtoLogViewerConfigReader: java.util.Map mLogMessageMap>;

        $i1 = interfaceinvoke $r4.<java.util.Map: int size()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" log definitions from ");

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r36, $r8);

     label15:
        goto label24;

     label16:
        $r17 := @caughtexception;

     label17:
        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load log definitions: JSON parsing exception while reading ");

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r22 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r36, $r22);

     label18:
        goto label24;

     label19:
        $r23 := @caughtexception;

     label20:
        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load log definitions: IOException while reading ");

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r28 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r36, $r28);

     label21:
        goto label24;

     label22:
        $r29 := @caughtexception;

     label23:
        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load log definitions: File ");

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r34 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r36, $r34);

     label24:
        exitmonitor r0;

        return;

     label25:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.io.FileNotFoundException from label03 to label04 with label22;
        catch java.io.IOException from label03 to label04 with label19;
        catch org.json.JSONException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.io.FileNotFoundException from label04 to label05 with label22;
        catch java.io.IOException from label04 to label05 with label19;
        catch org.json.JSONException from label04 to label05 with label16;
        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.io.FileNotFoundException from label06 to label07 with label22;
        catch java.io.IOException from label06 to label07 with label19;
        catch org.json.JSONException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.io.FileNotFoundException from label08 to label09 with label22;
        catch java.io.IOException from label08 to label09 with label19;
        catch org.json.JSONException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.io.FileNotFoundException from label09 to label10 with label22;
        catch java.io.IOException from label09 to label10 with label19;
        catch org.json.JSONException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.NumberFormatException from label10 to label11 with label12;
        catch java.io.FileNotFoundException from label10 to label11 with label22;
        catch java.io.IOException from label10 to label11 with label19;
        catch org.json.JSONException from label10 to label11 with label16;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.io.FileNotFoundException from label14 to label15 with label22;
        catch java.io.IOException from label14 to label15 with label19;
        catch org.json.JSONException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
    }
}
