class com.android.server.recoverysystem.RecoverySystemService$Injector extends java.lang.Object
{
    protected final android.content.Context mContext;

    void <init>(android.content.Context)
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.recoverysystem.RecoverySystemService$Injector: android.content.Context mContext> = r1;

        return;
    }

    public com.android.server.recoverysystem.RecoverySystemService$UncryptSocket connectService()
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket $r2;
        boolean $z0;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r2 = new com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        specialinvoke $r2.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: void <init>()>();

        $z0 = virtualinvoke $r2.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: boolean connectService()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: void close()>();

        return null;

     label1:
        return $r2;
    }

    public android.content.Context getContext()
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r1 = r0.<com.android.server.recoverysystem.RecoverySystemService$Injector: android.content.Context mContext>;

        return $r1;
    }

    public com.android.internal.widget.LockSettingsInternal getLockSettingsService()
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        java.lang.Object $r1;
        com.android.internal.widget.LockSettingsInternal $r2;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/internal/widget/LockSettingsInternal;");

        $r2 = (com.android.internal.widget.LockSettingsInternal) $r1;

        return $r2;
    }

    public android.os.PowerManager getPowerManager()
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.PowerManager $r3;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r1 = r0.<com.android.server.recoverysystem.RecoverySystemService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r3 = (android.os.PowerManager) $r2;

        return $r3;
    }

    public java.lang.String getUncryptPackageFileName()
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r1 = <android.os.RecoverySystem: java.io.File UNCRYPT_PACKAGE_FILE>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        return $r2;
    }

    public java.io.FileWriter getUncryptPackageFileWriter() throws java.io.IOException
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        java.io.FileWriter $r1;
        java.io.File $r2;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r1 = new java.io.FileWriter;

        $r2 = <android.os.RecoverySystem: java.io.File UNCRYPT_PACKAGE_FILE>;

        specialinvoke $r1.<java.io.FileWriter: void <init>(java.io.File)>($r2);

        return $r1;
    }

    public java.lang.String systemPropertiesGet(java.lang.String)
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r1);

        return $r2;
    }

    public void systemPropertiesSet(java.lang.String, java.lang.String)
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void threadSleep(long) throws java.lang.InterruptedException
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        long l0;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        l0 := @parameter0: long;

        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

        return;
    }

    public boolean uncryptPackageFileDelete()
    {
        com.android.server.recoverysystem.RecoverySystemService$Injector r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$Injector;

        $r1 = <android.os.RecoverySystem: java.io.File UNCRYPT_PACKAGE_FILE>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        return $z0;
    }
}
