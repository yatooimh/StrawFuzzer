public class com.android.server.recoverysystem.RecoverySystemService$UncryptSocket extends java.lang.Object
{
    private java.io.DataInputStream mInputStream;
    private android.net.LocalSocket mLocalSocket;
    private java.io.DataOutputStream mOutputStream;

    public void <init>()
    {
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket r0;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void close()
    {
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket r0;
        java.io.DataInputStream $r1;
        java.io.DataOutputStream $r2;
        android.net.LocalSocket $r3;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        $r1 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataInputStream mInputStream>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r1);

        $r2 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataOutputStream mOutputStream>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        $r3 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: android.net.LocalSocket mLocalSocket>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return;
    }

    public boolean connectService()
    {
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket r0;
        android.net.LocalSocketAddress r1;
        android.net.LocalSocket $r2, $r3, $r5, r11;
        java.io.InputStream $r4;
        java.io.OutputStream $r6;
        android.net.LocalSocketAddress$Namespace $r7;
        java.lang.Throwable $r8, $r9, $r10;
        int i2;
        boolean z1;
        java.io.DataInputStream r14;
        java.io.DataOutputStream r15;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        $r2 = new android.net.LocalSocket;

        specialinvoke $r2.<android.net.LocalSocket: void <init>()>();

        r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: android.net.LocalSocket mLocalSocket> = $r2;

        i2 = 0;

     label01:
        z1 = 0;

        if i2 >= 30 goto label09;

     label02:
        r11 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: android.net.LocalSocket mLocalSocket>;

        r1 = new android.net.LocalSocketAddress;

        $r7 = <android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace RESERVED>;

        specialinvoke r1.<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)>("uncrypt", $r7);

        virtualinvoke r11.<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>(r1);

     label03:
        z1 = 1;

        goto label09;

     label04:
        $r8 := @caughtexception;

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverySystemService", "Interrupted:", $r10);

     label08:
        i2 = i2 + 1;

        goto label01;

     label09:
        if z1 != 0 goto label10;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RecoverySystemService", "Timed out connecting to uncrypt socket");

        virtualinvoke r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: void close()>();

        return 0;

     label10:
        r14 = new java.io.DataInputStream;

        $r3 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: android.net.LocalSocket mLocalSocket>;

        $r4 = virtualinvoke $r3.<android.net.LocalSocket: java.io.InputStream getInputStream()>();

        specialinvoke r14.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r4);

        r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataInputStream mInputStream> = r14;

        r15 = new java.io.DataOutputStream;

        $r5 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: android.net.LocalSocket mLocalSocket>;

        $r6 = virtualinvoke $r5.<android.net.LocalSocket: java.io.OutputStream getOutputStream()>();

        specialinvoke r15.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r6);

        r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataOutputStream mOutputStream> = r15;

     label11:
        return 1;

     label12:
        $r9 := @caughtexception;

        virtualinvoke r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: void close()>();

        return 0;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.io.IOException from label10 to label11 with label12;
    }

    public int getPercentageUncrypted() throws java.io.IOException
    {
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket r0;
        java.io.DataInputStream $r1;
        int $i0;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        $r1 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataInputStream mInputStream>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        return $i0;
    }

    public void sendAck() throws java.io.IOException
    {
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket r0;
        java.io.DataOutputStream $r1;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        $r1 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataOutputStream mOutputStream>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(0);

        return;
    }

    public void sendCommand(java.lang.String) throws java.io.IOException
    {
        com.android.server.recoverysystem.RecoverySystemService$UncryptSocket r0;
        java.nio.charset.Charset $r1;
        int $i0, $i1;
        java.io.DataOutputStream $r2, $r3;
        java.lang.String r4;
        byte[] r5;

        r0 := @this: com.android.server.recoverysystem.RecoverySystemService$UncryptSocket;

        r4 := @parameter0: java.lang.String;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r5 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r2 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataOutputStream mOutputStream>;

        $i0 = lengthof r5;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $r3 = r0.<com.android.server.recoverysystem.RecoverySystemService$UncryptSocket: java.io.DataOutputStream mOutputStream>;

        $i1 = lengthof r5;

        virtualinvoke $r3.<java.io.DataOutputStream: void write(byte[],int,int)>(r5, 0, $i1);

        return;
    }
}
