class com.android.server.role.RoleManagerService$Stub extends android.app.role.IRoleManager$Stub
{
    final com.android.server.role.RoleManagerService this$0;

    private void <init>(com.android.server.role.RoleManagerService)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        com.android.server.role.RoleManagerService r1;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: com.android.server.role.RoleManagerService;

        r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0> = r1;

        specialinvoke r0.<android.app.role.IRoleManager$Stub: void <init>()>();

        return;
    }

    void <init>(com.android.server.role.RoleManagerService, com.android.server.role.RoleManagerService$1)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        com.android.server.role.RoleManagerService r1;
        com.android.server.role.RoleManagerService$1 r2;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: com.android.server.role.RoleManagerService;

        r2 := @parameter1: com.android.server.role.RoleManagerService$1;

        specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: void <init>(com.android.server.role.RoleManagerService)>(r1);

        return;
    }

    private int getUidForPackage(java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        long l0;
        int i1;
        com.android.server.role.RoleManagerService $r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        android.content.pm.ApplicationInfo $r4;
        java.lang.Throwable $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r7 := @parameter0: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r7, 4194304);

        i1 = $r4.<android.content.pm.ApplicationInfo: int uid>;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i1;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return -1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int handleIncomingUser(int, boolean, java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        int i0, $i1, $i2, $i3;
        boolean z0;
        java.lang.String r1;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        $i1 = staticinvoke <com.android.server.role.RoleManagerService$Stub: int getCallingPid()>();

        $i2 = staticinvoke <com.android.server.role.RoleManagerService$Stub: int getCallingUid()>();

        $i3 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i0, z0, 1, r1, null);

        return $i3;
    }

    public void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener, int)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        com.android.server.role.RoleManagerService $r2, $r5, $r7;
        android.content.Context $r3;
        android.os.RemoteCallbackList $r6;
        android.os.UserManagerInternal $r8;
        boolean $z1;
        java.lang.StringBuilder $r9;
        java.lang.String $r13, r15;
        android.app.role.IOnRoleHoldersChangedListener r14;
        int i1, i2;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r14 := @parameter0: android.app.role.IOnRoleHoldersChangedListener;

        i1 := @parameter1: int;

        if i1 == -1 goto label1;

        $r7 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r8 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r7);

        $z1 = virtualinvoke $r8.<android.os.UserManagerInternal: boolean exists(int)>(i1);

        if $z1 != 0 goto label1;

        r15 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r15, $r13);

        return;

     label1:
        i2 = specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: int handleIncomingUser(int,boolean,java.lang.String)>(i1, 1, "addOnRoleHoldersChangedListenerAsUser");

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = virtualinvoke $r2.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OBSERVE_ROLE_HOLDERS", "addOnRoleHoldersChangedListenerAsUser");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "listener cannot be null");

        $r5 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r6 = staticinvoke <com.android.server.role.RoleManagerService: android.os.RemoteCallbackList access$1200(com.android.server.role.RoleManagerService,int)>($r5, i2);

        virtualinvoke $r6.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r14);

        return;
    }

    public void addRoleHolderAsUser(java.lang.String, java.lang.String, int, int, android.os.RemoteCallback)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        int i0, i2, i3;
        android.os.RemoteCallback r1;
        com.android.server.role.RoleManagerService $r2, $r4, $r9;
        android.os.UserManagerInternal $r3;
        boolean $z0;
        android.content.Context $r5;
        android.app.role.RoleControllerManager $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, r16, r17, r18;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.os.RemoteCallback;

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r2);

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean exists(int)>(i2);

        if $z0 != 0 goto label1;

        r18 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r18, $r15);

        return;

     label1:
        i3 = specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: int handleIncomingUser(int,boolean,java.lang.String)>(i2, 0, "addRoleHolderAsUser");

        $r4 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ROLE_HOLDERS", "addRoleHolderAsUser");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r16, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r17, "packageName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "callback cannot be null");

        $r9 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r10 = staticinvoke <com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager access$1100(com.android.server.role.RoleManagerService,int)>($r9, i3);

        virtualinvoke $r10.<android.app.role.RoleControllerManager: void onAddRoleHolder(java.lang.String,java.lang.String,int,android.os.RemoteCallback)>(r16, r17, i0, r1);

        return;
    }

    public boolean addRoleHolderFromController(java.lang.String, java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.role.RoleManagerService $r3, $r7;
        android.content.Context $r4;
        com.android.server.role.RoleUserState $r8;
        boolean $z0;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER", "addRoleHolderFromController");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r2, "packageName cannot be null or empty");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r8 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r7, i0);

        $z0 = virtualinvoke $r8.<com.android.server.role.RoleUserState: boolean addRoleHolder(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    public void clearRoleHoldersAsUser(java.lang.String, int, int, android.os.RemoteCallback)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        int i0, i2, i3;
        com.android.server.role.RoleManagerService $r1, $r3, $r7;
        android.os.UserManagerInternal $r2;
        boolean $z0;
        android.content.Context $r4;
        android.app.role.RoleControllerManager $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r13, r14, r16;
        android.os.RemoteCallback r15;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r14 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        r15 := @parameter3: android.os.RemoteCallback;

        $r1 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r2 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r1);

        $z0 = virtualinvoke $r2.<android.os.UserManagerInternal: boolean exists(int)>(i2);

        if $z0 != 0 goto label1;

        r16 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r16, $r13);

        return;

     label1:
        i3 = specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: int handleIncomingUser(int,boolean,java.lang.String)>(i2, 0, "clearRoleHoldersAsUser");

        $r3 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ROLE_HOLDERS", "clearRoleHoldersAsUser");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r14, "roleName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r15, "callback cannot be null");

        $r7 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r8 = staticinvoke <com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager access$1100(com.android.server.role.RoleManagerService,int)>($r7, i3);

        virtualinvoke $r8.<android.app.role.RoleControllerManager: void onClearRoleHolders(java.lang.String,int,android.os.RemoteCallback)>(r14, i0, r15);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.lang.String[] r1;
        int i0, i1, i2;
        com.android.server.role.RoleManagerService $r2, $r7, $r9;
        android.content.Context $r3;
        java.lang.String $r4;
        boolean $z0, $z1, z2;
        com.android.internal.util.dump.DualDumpOutputStream $r5, $r11, r15;
        com.android.internal.util.IndentingPrintWriter $r6;
        android.os.UserManagerInternal $r8;
        com.android.server.role.RoleUserState $r10;
        android.util.proto.ProtoOutputStream $r12;
        java.io.FileDescriptor r13;
        java.io.PrintWriter r14;
        int[] r16;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r13 := @parameter0: java.io.FileDescriptor;

        r14 := @parameter1: java.io.PrintWriter;

        r1 := @parameter2: java.lang.String[];

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = virtualinvoke $r2.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        $r4 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, $r4, r14);

        if $z0 != 0 goto label1;

        return;

     label1:
        if r1 == null goto label2;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r1, "--proto");

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if z2 == 0 goto label4;

        $r11 = new com.android.internal.util.dump.DualDumpOutputStream;

        $r12 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r12.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r13);

        specialinvoke $r11.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(android.util.proto.ProtoOutputStream)>($r12);

        r15 = $r11;

        goto label5;

     label4:
        virtualinvoke r14.<java.io.PrintWriter: void println(java.lang.String)>("ROLE MANAGER STATE (dumpsys role):");

        $r5 = new com.android.internal.util.dump.DualDumpOutputStream;

        $r6 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r6.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r14, "  ");

        specialinvoke $r5.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>($r6);

        r15 = $r5;

     label5:
        $r7 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r8 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r7);

        r16 = virtualinvoke $r8.<android.os.UserManagerInternal: int[] getUserIds()>();

        i0 = lengthof r16;

        i2 = 0;

     label6:
        if i2 >= i0 goto label7;

        i1 = r16[i2];

        $r9 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r10 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r9, i1);

        virtualinvoke $r10.<com.android.server.role.RoleUserState: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r15, "user_states", 2246267895809L);

        i2 = i2 + 1;

        goto label6;

     label7:
        virtualinvoke r15.<com.android.internal.util.dump.DualDumpOutputStream: void flush()>();

        return;
    }

    public java.lang.String getDefaultSmsPackage(int)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        int i0;
        long l1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = virtualinvoke r0.<com.android.server.role.RoleManagerService$Stub: java.util.List getRoleHoldersAsUser(java.lang.String,int)>("android.app.role.SMS", i0);

        $r2 = staticinvoke <com.android.internal.util.CollectionUtils: java.lang.Object firstOrNull(java.util.List)>($r1);

        r4 = (java.lang.String) $r2;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getHeldRolesFromController(java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.lang.String r1;
        int i0;
        com.android.server.role.RoleManagerService $r2, $r5;
        android.content.Context $r3;
        com.android.server.role.RoleUserState $r6;
        java.util.List $r7;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = virtualinvoke $r2.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER", "getRolesHeldFromController");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName cannot be null or empty");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r6 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r5, i0);

        $r7 = virtualinvoke $r6.<com.android.server.role.RoleUserState: java.util.List getHeldRoles(java.lang.String)>(r1);

        return $r7;
    }

    public java.util.List getRoleHoldersAsUser(java.lang.String, int)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        com.android.server.role.RoleManagerService $r2, $r4, $r7;
        android.os.UserManagerInternal $r3;
        boolean $z0;
        android.content.Context $r5;
        com.android.server.role.RoleUserState $r8;
        java.util.ArrayList $r9;
        java.util.List $r10, $r16;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, r17, r18;
        int i1, i2;
        android.util.ArraySet r19;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r17 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r2);

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean exists(int)>(i1);

        if $z0 != 0 goto label1;

        r18 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r18, $r15);

        $r16 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r16;

     label1:
        i2 = specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: int handleIncomingUser(int,boolean,java.lang.String)>(i1, 0, "getRoleHoldersAsUser");

        $r4 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ROLE_HOLDERS", "getRoleHoldersAsUser");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r17, "roleName cannot be null or empty");

        $r7 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r8 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r7, i2);

        r19 = virtualinvoke $r8.<com.android.server.role.RoleUserState: android.util.ArraySet getRoleHolders(java.lang.String)>(r17);

        if r19 != null goto label2;

        $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r10;

     label2:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>(r19);

        return $r9;
    }

    public boolean isRoleAvailable(java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.server.role.RoleManagerService $r3;
        com.android.server.role.RoleUserState $r4;
        boolean $z0;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "roleName cannot be null or empty");

        $i1 = staticinvoke <com.android.server.role.RoleManagerService$Stub: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        $r3 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r4 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r3, i0);

        $z0 = virtualinvoke $r4.<com.android.server.role.RoleUserState: boolean isRoleAvailable(java.lang.String)>(r1);

        return $z0;
    }

    public boolean isRoleHeld(java.lang.String, java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.lang.String r1, r8;
        com.android.server.role.RoleManagerService $r2, $r6;
        android.app.AppOpsManager $r3;
        com.android.server.role.RoleUserState $r7;
        boolean $z0;
        int i0, i1;
        android.util.ArraySet r9;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <com.android.server.role.RoleManagerService$Stub: int getCallingUid()>();

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = staticinvoke <com.android.server.role.RoleManagerService: android.app.AppOpsManager access$800(com.android.server.role.RoleManagerService)>($r2);

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r8, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "packageName cannot be null or empty");

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r6 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r7 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r6, i1);

        r9 = virtualinvoke $r7.<com.android.server.role.RoleUserState: android.util.ArraySet getRoleHolders(java.lang.String)>(r8);

        if r9 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r9.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.role.RoleManagerShellCommand $r7;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.role.RoleManagerShellCommand;

        specialinvoke $r7.<com.android.server.role.RoleManagerShellCommand: void <init>(android.app.role.IRoleManager)>(r0);

        virtualinvoke $r7.<com.android.server.role.RoleManagerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener, int)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        com.android.server.role.RoleManagerService $r1, $r4, $r5;
        android.content.Context $r2;
        android.os.UserManagerInternal $r6;
        boolean $z1;
        java.lang.StringBuilder $r7;
        java.lang.String $r11, r13;
        android.app.role.IOnRoleHoldersChangedListener r12;
        int i1, i2;
        android.os.RemoteCallbackList r15;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r12 := @parameter0: android.app.role.IOnRoleHoldersChangedListener;

        i1 := @parameter1: int;

        if i1 == -1 goto label1;

        $r5 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r6 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r5);

        $z1 = virtualinvoke $r6.<android.os.UserManagerInternal: boolean exists(int)>(i1);

        if $z1 != 0 goto label1;

        r13 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r13, $r11);

        return;

     label1:
        i2 = specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: int handleIncomingUser(int,boolean,java.lang.String)>(i1, 1, "removeOnRoleHoldersChangedListenerAsUser");

        $r1 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OBSERVE_ROLE_HOLDERS", "removeOnRoleHoldersChangedListenerAsUser");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "listener cannot be null");

        $r4 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        r15 = staticinvoke <com.android.server.role.RoleManagerService: android.os.RemoteCallbackList access$1300(com.android.server.role.RoleManagerService,int)>($r4, i2);

        if r12 != null goto label2;

        return;

     label2:
        virtualinvoke r15.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r12);

        return;
    }

    public void removeRoleHolderAsUser(java.lang.String, java.lang.String, int, int, android.os.RemoteCallback)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        int i0, i2, i3;
        android.os.RemoteCallback r1;
        com.android.server.role.RoleManagerService $r2, $r4, $r9;
        android.os.UserManagerInternal $r3;
        boolean $z0;
        android.content.Context $r5;
        android.app.role.RoleControllerManager $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, r16, r17, r18;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.os.RemoteCallback;

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = staticinvoke <com.android.server.role.RoleManagerService: android.os.UserManagerInternal access$900(com.android.server.role.RoleManagerService)>($r2);

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean exists(int)>(i2);

        if $z0 != 0 goto label1;

        r18 = staticinvoke <com.android.server.role.RoleManagerService: java.lang.String access$1000()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r18, $r15);

        return;

     label1:
        i3 = specialinvoke r0.<com.android.server.role.RoleManagerService$Stub: int handleIncomingUser(int,boolean,java.lang.String)>(i2, 0, "removeRoleHolderAsUser");

        $r4 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ROLE_HOLDERS", "removeRoleHolderAsUser");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r16, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r17, "packageName cannot be null or empty");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "callback cannot be null");

        $r9 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r10 = staticinvoke <com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager access$1100(com.android.server.role.RoleManagerService,int)>($r9, i3);

        virtualinvoke $r10.<android.app.role.RoleControllerManager: void onRemoveRoleHolder(java.lang.String,java.lang.String,int,android.os.RemoteCallback)>(r16, r17, i0, r1);

        return;
    }

    public boolean removeRoleHolderFromController(java.lang.String, java.lang.String)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.role.RoleManagerService $r3, $r7;
        android.content.Context $r4;
        com.android.server.role.RoleUserState $r8;
        boolean $z0;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER", "removeRoleHolderFromController");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "roleName cannot be null or empty");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r2, "packageName cannot be null or empty");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r8 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r7, i0);

        $z0 = virtualinvoke $r8.<com.android.server.role.RoleUserState: boolean removeRoleHolder(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    public void setRoleNamesFromController(java.util.List)
    {
        com.android.server.role.RoleManagerService$Stub r0;
        java.util.List r1;
        int i0;
        com.android.server.role.RoleManagerService $r2, $r5;
        android.content.Context $r3;
        com.android.server.role.RoleUserState $r6;

        r0 := @this: com.android.server.role.RoleManagerService$Stub;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r3 = virtualinvoke $r2.<com.android.server.role.RoleManagerService: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permissioncontroller.permission.MANAGE_ROLES_FROM_CONTROLLER", "setRoleNamesFromController");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "roleNames cannot be null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r5 = r0.<com.android.server.role.RoleManagerService$Stub: com.android.server.role.RoleManagerService this$0>;

        $r6 = staticinvoke <com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState access$700(com.android.server.role.RoleManagerService,int)>($r5, i0);

        virtualinvoke $r6.<com.android.server.role.RoleUserState: void setRoleNames(java.util.List)>(r1);

        return;
    }
}
