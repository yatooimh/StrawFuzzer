class com.android.server.role.RoleManagerShellCommand extends android.os.ShellCommand
{
    private final android.app.role.IRoleManager mRoleManager;

    void <init>(android.app.role.IRoleManager)
    {
        com.android.server.role.RoleManagerShellCommand r0;
        android.app.role.IRoleManager r1;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        r1 := @parameter0: android.app.role.IRoleManager;

        specialinvoke r0.<android.os.ShellCommand: void <init>()>();

        r0.<com.android.server.role.RoleManagerShellCommand: android.app.role.IRoleManager mRoleManager> = r1;

        return;
    }

    private int getFlagsMaybe()
    {
        com.android.server.role.RoleManagerShellCommand r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArg()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        return $i0;
    }

    private int getUserIdMaybe()
    {
        com.android.server.role.RoleManagerShellCommand r0;
        java.lang.String r1, $r2;
        boolean $z0;
        int i1;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextOption()>();

        i1 = 0;

        if r1 == null goto label1;

        i1 = 0;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r2);

     label1:
        return i1;
    }

    private int runAddRoleHolder() throws android.os.RemoteException
    {
        com.android.server.role.RoleManagerShellCommand r0;
        int i0, i1, $i2;
        java.lang.String r1, r2;
        com.android.server.role.RoleManagerShellCommand$CallbackFuture $r4;
        android.app.role.IRoleManager $r5;
        android.os.RemoteCallback $r6;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        i0 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int getUserIdMaybe()>();

        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArgRequired()>();

        r2 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int getFlagsMaybe()>();

        $r4 = new com.android.server.role.RoleManagerShellCommand$CallbackFuture;

        specialinvoke $r4.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: void <init>(com.android.server.role.RoleManagerShellCommand,com.android.server.role.RoleManagerShellCommand$1)>(r0, null);

        $r5 = r0.<com.android.server.role.RoleManagerShellCommand: android.app.role.IRoleManager mRoleManager>;

        $r6 = virtualinvoke $r4.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: android.os.RemoteCallback createCallback()>();

        interfaceinvoke $r5.<android.app.role.IRoleManager: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>(r1, r2, i1, i0, $r6);

        $i2 = virtualinvoke $r4.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: int waitForResult()>();

        return $i2;
    }

    private int runClearRoleHolders() throws android.os.RemoteException
    {
        com.android.server.role.RoleManagerShellCommand r0;
        int i0, i1, $i2;
        java.lang.String r1;
        com.android.server.role.RoleManagerShellCommand$CallbackFuture $r3;
        android.app.role.IRoleManager $r4;
        android.os.RemoteCallback $r5;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        i0 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int getUserIdMaybe()>();

        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int getFlagsMaybe()>();

        $r3 = new com.android.server.role.RoleManagerShellCommand$CallbackFuture;

        specialinvoke $r3.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: void <init>(com.android.server.role.RoleManagerShellCommand,com.android.server.role.RoleManagerShellCommand$1)>(r0, null);

        $r4 = r0.<com.android.server.role.RoleManagerShellCommand: android.app.role.IRoleManager mRoleManager>;

        $r5 = virtualinvoke $r3.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: android.os.RemoteCallback createCallback()>();

        interfaceinvoke $r4.<android.app.role.IRoleManager: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>(r1, i1, i0, $r5);

        $i2 = virtualinvoke $r3.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: int waitForResult()>();

        return $i2;
    }

    private int runRemoveRoleHolder() throws android.os.RemoteException
    {
        com.android.server.role.RoleManagerShellCommand r0;
        int i0, i1, $i2;
        java.lang.String r1, r2;
        com.android.server.role.RoleManagerShellCommand$CallbackFuture $r4;
        android.app.role.IRoleManager $r5;
        android.os.RemoteCallback $r6;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        i0 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int getUserIdMaybe()>();

        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArgRequired()>();

        r2 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int getFlagsMaybe()>();

        $r4 = new com.android.server.role.RoleManagerShellCommand$CallbackFuture;

        specialinvoke $r4.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: void <init>(com.android.server.role.RoleManagerShellCommand,com.android.server.role.RoleManagerShellCommand$1)>(r0, null);

        $r5 = r0.<com.android.server.role.RoleManagerShellCommand: android.app.role.IRoleManager mRoleManager>;

        $r6 = virtualinvoke $r4.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: android.os.RemoteCallback createCallback()>();

        interfaceinvoke $r5.<android.app.role.IRoleManager: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>(r1, r2, i1, i0, $r6);

        $i2 = virtualinvoke $r4.<com.android.server.role.RoleManagerShellCommand$CallbackFuture: int waitForResult()>();

        return $i2;
    }

    public int onCommand(java.lang.String)
    {
        com.android.server.role.RoleManagerShellCommand r0;
        java.io.PrintWriter r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, i4, i6;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, r8;
        byte b5;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        r8 := @parameter0: java.lang.String;

        if r8 != null goto label01;

        $i3 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: int handleDefaultCommands(java.lang.String)>(r8);

        return $i3;

     label01:
        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

     label02:
        i4 = virtualinvoke r8.<java.lang.String: int hashCode()>();

     label03:
        if i4 == -1831663689 goto label09;

        if i4 == -1502066320 goto label07;

        if i4 == -1274754278 goto label05;

     label04:
        goto label11;

     label05:
        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("remove-role-holder");

        if $z2 == 0 goto label04;

     label06:
        b5 = 1;

        goto label12;

     label07:
        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("clear-role-holders");

        if $z1 == 0 goto label04;

     label08:
        b5 = 2;

        goto label12;

     label09:
        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("add-role-holder");

        if $z0 == 0 goto label04;

     label10:
        b5 = 0;

        goto label12;

     label11:
        b5 = -1;

     label12:
        if b5 == 0 goto label16;

        if b5 == 1 goto label15;

        if b5 == 2 goto label14;

     label13:
        $i2 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: int handleDefaultCommands(java.lang.String)>(r8);

        return $i2;

     label14:
        $i1 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int runClearRoleHolders()>();

        return $i1;

     label15:
        $i0 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int runRemoveRoleHolder()>();

        return $i0;

     label16:
        i6 = specialinvoke r0.<com.android.server.role.RoleManagerShellCommand: int runAddRoleHolder()>();

     label17:
        return i6;

     label18:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

        catch android.os.RemoteException from label02 to label03 with label18;
        catch android.os.RemoteException from label05 to label06 with label18;
        catch android.os.RemoteException from label07 to label08 with label18;
        catch android.os.RemoteException from label09 to label10 with label18;
        catch android.os.RemoteException from label13 to label14 with label18;
        catch android.os.RemoteException from label14 to label15 with label18;
        catch android.os.RemoteException from label15 to label16 with label18;
        catch android.os.RemoteException from label16 to label17 with label18;
    }

    public void onHelp()
    {
        com.android.server.role.RoleManagerShellCommand r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.role.RoleManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.role.RoleManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Role manager (role) commands:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Print this help text.");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  add-role-holder [--user USER_ID] ROLE PACKAGE [FLAGS]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  remove-role-holder [--user USER_ID] ROLE PACKAGE [FLAGS]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  clear-role-holders [--user USER_ID] ROLE [FLAGS]");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }
}
