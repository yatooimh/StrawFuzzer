public class com.android.server.role.RoleUserState extends java.lang.Object
{
    private static final java.lang.String ATTRIBUTE_NAME;
    private static final java.lang.String ATTRIBUTE_PACKAGES_HASH;
    private static final java.lang.String ATTRIBUTE_VERSION;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String ROLES_FILE_NAME;
    private static final java.lang.String TAG_HOLDER;
    private static final java.lang.String TAG_ROLE;
    private static final java.lang.String TAG_ROLES;
    public static final int VERSION_UNDEFINED;
    private static final long WRITE_DELAY_MILLIS;
    private final com.android.server.role.RoleUserState$Callback mCallback;
    private boolean mDestroyed;
    private final java.lang.Object mLock;
    private java.lang.String mPackagesHash;
    private final com.android.role.persistence.RolesPersistence mPersistence;
    private android.util.ArrayMap mRoles;
    private final int mUserId;
    private int mVersion;
    private final android.os.Handler mWriteHandler;
    private boolean mWriteScheduled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.role.RoleUserState: long WRITE_DELAY_MILLIS> = 200L;

        <com.android.server.role.RoleUserState: int VERSION_UNDEFINED> = -1;

        <com.android.server.role.RoleUserState: java.lang.String TAG_ROLES> = "roles";

        <com.android.server.role.RoleUserState: java.lang.String TAG_ROLE> = "role";

        <com.android.server.role.RoleUserState: java.lang.String TAG_HOLDER> = "holder";

        <com.android.server.role.RoleUserState: java.lang.String ROLES_FILE_NAME> = "roles.xml";

        <com.android.server.role.RoleUserState: java.lang.String ATTRIBUTE_VERSION> = "version";

        <com.android.server.role.RoleUserState: java.lang.String ATTRIBUTE_PACKAGES_HASH> = "packagesHash";

        <com.android.server.role.RoleUserState: java.lang.String ATTRIBUTE_NAME> = "name";

        $r0 = class "Lcom/android/server/role/RoleUserState;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.role.RoleUserState: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(int, com.android.server.role.RoleUserState$Callback)
    {
        com.android.server.role.RoleUserState r0;
        int i0;
        com.android.server.role.RoleUserState$Callback r1;
        com.android.role.persistence.RolesPersistence $r2;
        java.lang.Object $r3;
        android.util.ArrayMap $r4;
        android.os.Handler $r5, $r6;
        android.os.Looper $r7;

        r0 := @this: com.android.server.role.RoleUserState;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.role.RoleUserState$Callback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.android.role.persistence.RolesPersistence: com.android.role.persistence.RolesPersistence createInstance()>();

        r0.<com.android.server.role.RoleUserState: com.android.role.persistence.RolesPersistence mPersistence> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.role.RoleUserState: java.lang.Object mLock> = $r3;

        r0.<com.android.server.role.RoleUserState: int mVersion> = -1;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles> = $r4;

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r7 = virtualinvoke $r6.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<com.android.server.role.RoleUserState: android.os.Handler mWriteHandler> = $r5;

        r0.<com.android.server.role.RoleUserState: int mUserId> = i0;

        r0.<com.android.server.role.RoleUserState: com.android.server.role.RoleUserState$Callback mCallback> = r1;

        specialinvoke r0.<com.android.server.role.RoleUserState: void readFile()>();

        return;
    }

    private static java.io.File getFile(int)
    {
        int i0;
        java.io.File $r0, $r1;

        i0 := @parameter0: int;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "roles.xml");

        return $r0;
    }

    public static void lambda$e8W_Zaq_FyocW_DX1qcbN0ld0co(com.android.server.role.RoleUserState)
    {
        com.android.server.role.RoleUserState r0;

        r0 := @parameter0: com.android.server.role.RoleUserState;

        specialinvoke r0.<com.android.server.role.RoleUserState: void writeFile()>();

        return;
    }

    private android.util.ArraySet parseRoleHoldersLocked(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.role.RoleUserState r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, i2, $i3;
        android.util.ArraySet $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        $i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i0 = $i3 + 1;

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label4;

        i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if i2 >= i0 goto label2;

        if i1 == 3 goto label4;

     label2:
        if i2 > i0 goto label1;

        if i1 == 2 goto label3;

        goto label1;

     label3:
        $r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("holder");

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r5);

        goto label1;

     label4:
        return $r3;
    }

    private void parseRolesLocked(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.role.RoleUserState r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r2, $r4, $r5, $r7;
        android.util.ArraySet r3;
        android.util.ArrayMap $r6, $r8;
        boolean $z0;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "version");

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r0.<com.android.server.role.RoleUserState: int mVersion> = $i3;

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "packagesHash");

        r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash> = $r5;

        $r6 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        virtualinvoke $r6.<android.util.ArrayMap: void clear()>();

        $i4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i0 = $i4 + 1;

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label4;

        i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if i2 >= i0 goto label2;

        if i1 == 3 goto label4;

     label2:
        if i2 > i0 goto label1;

        if i1 == 2 goto label3;

        goto label1;

     label3:
        $r7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("role");

        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r3 = specialinvoke r0.<com.android.server.role.RoleUserState: android.util.ArraySet parseRoleHoldersLocked(org.xmlpull.v1.XmlPullParser)>(r1);

        $r8 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        goto label1;

     label4:
        return;
    }

    private void parseXmlLocked(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.role.RoleUserState r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, i2, $i3;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i0 = $i3 + 1;

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label4;

        i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if i2 >= i0 goto label2;

        if i1 == 3 goto label4;

     label2:
        if i2 > i0 goto label1;

        if i1 == 2 goto label3;

        goto label1;

     label3:
        $r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("roles");

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.role.RoleUserState: void parseRolesLocked(org.xmlpull.v1.XmlPullParser)>(r1);

        return;

     label4:
        $r2 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r2, "Missing <roles> in roles.xml");

        return;
    }

    private void readFile()
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1, $r11, $r12, $r13;
        java.util.Iterator r2;
        java.lang.String r3, $r7;
        android.util.ArraySet r4;
        int $i0, $i1;
        com.android.role.persistence.RolesPersistence $r5;
        android.os.UserHandle $r6;
        android.util.ArrayMap $r8, $r15;
        java.util.Map $r9;
        java.util.Set $r10;
        boolean $z0;
        java.util.Collection $r14;
        java.lang.Throwable $r17;
        com.android.role.persistence.RolesState r18;
        java.util.Map$Entry r19;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<com.android.server.role.RoleUserState: com.android.role.persistence.RolesPersistence mPersistence>;

        $i0 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i0);

        r18 = interfaceinvoke $r5.<com.android.role.persistence.RolesPersistence: com.android.role.persistence.RolesState readForUser(android.os.UserHandle)>($r6);

     label02:
        if r18 != null goto label05;

     label03:
        specialinvoke r0.<com.android.server.role.RoleUserState: void readLegacyFileLocked()>();

        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

        exitmonitor r1;

     label04:
        return;

     label05:
        $i1 = virtualinvoke r18.<com.android.role.persistence.RolesState: int getVersion()>();

        r0.<com.android.server.role.RoleUserState: int mVersion> = $i1;

        $r7 = virtualinvoke r18.<com.android.role.persistence.RolesState: java.lang.String getPackagesHash()>();

        r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash> = $r7;

        $r8 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        virtualinvoke $r8.<android.util.ArrayMap: void clear()>();

        $r9 = virtualinvoke r18.<com.android.role.persistence.RolesState: java.util.Map getRoles()>();

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        r3 = (java.lang.String) $r12;

        r4 = new android.util.ArraySet;

        $r13 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.util.Collection) $r13;

        specialinvoke r4.<android.util.ArraySet: void <init>(java.util.Collection)>($r14);

        $r15 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label07:
        goto label06;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r17 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void readLegacyFileLocked()
    {
        com.android.server.role.RoleUserState r0;
        int $i0;
        java.lang.String $r1, $r4, $r11;
        java.lang.Throwable $r2, $r3, $r5, $r6;
        java.lang.StringBuilder $r7;
        java.lang.IllegalStateException $r10;
        java.io.File r12;
        android.util.AtomicFile r13;
        java.io.FileInputStream r14;
        org.xmlpull.v1.XmlPullParser r15;

        r0 := @this: com.android.server.role.RoleUserState;

        $i0 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        r12 = staticinvoke <com.android.server.role.RoleUserState: java.io.File getFile(int)>($i0);

     label01:
        r13 = new android.util.AtomicFile;

        specialinvoke r13.<android.util.AtomicFile: void <init>(java.io.File)>(r12);

        r14 = virtualinvoke r13.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r15 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r15.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r14, null);

        specialinvoke r0.<com.android.server.role.RoleUserState: void parseXmlLocked(org.xmlpull.v1.XmlPullParser)>(r15);

        $r1 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>($r1, "Read roles.xml successfully");

     label03:
        if r14 == null goto label14;

     label04:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label05:
        goto label14;

     label06:
        $r2 := @caughtexception;

        if r14 == null goto label11;

     label07:
        virtualinvoke r14.<java.io.FileInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

     label10:
        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label11:
        throw $r2;

     label12:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse roles.xml: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r6);

        throw $r10;

     label13:
        $r3 := @caughtexception;

        $r4 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>($r4, "roles.xml not found");

     label14:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label12;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.FileNotFoundException from label04 to label05 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.FileNotFoundException from label10 to label11 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.FileNotFoundException from label11 to label12 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    private void scheduleWriteFileLocked()
    {
        com.android.server.role.RoleUserState r0;
        boolean $z0, $z1;
        com.android.server.role.'-$$Lambda$RoleUserState$e8W_Zaq_FyocW_DX1qcbN0ld0co' $r1;
        android.os.Handler $r2;
        android.os.Message $r3;
        java.util.function.Consumer r4;

        r0 := @this: com.android.server.role.RoleUserState;

        $z0 = r0.<com.android.server.role.RoleUserState: boolean mDestroyed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.role.RoleUserState: boolean mWriteScheduled>;

        if $z1 != 0 goto label2;

        $r2 = r0.<com.android.server.role.RoleUserState: android.os.Handler mWriteHandler>;

        $r1 = <com.android.server.role._$$Lambda$RoleUserState$e8W_Zaq_FyocW_DX1qcbN0ld0co: com.android.server.role.'-$$Lambda$RoleUserState$e8W_Zaq_FyocW_DX1qcbN0ld0co' INSTANCE>;

        r4 = (java.util.function.Consumer) $r1;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.Consumer,java.lang.Object)>(r4, r0);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, 200L);

        r0.<com.android.server.role.RoleUserState: boolean mWriteScheduled> = 1;

     label2:
        return;
    }

    private android.util.ArrayMap snapshotRolesLocked()
    {
        com.android.server.role.RoleUserState r0;
        int i0, i1;
        android.util.ArrayMap $r2, $r3, $r4, $r7;
        java.lang.Object $r5, $r9;
        android.util.ArraySet $r6, $r10;
        java.lang.String $r8;

        r0 := @this: com.android.server.role.RoleUserState;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        i1 = 0;

        $r3 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        i0 = staticinvoke <com.android.internal.util.CollectionUtils: int size(java.util.Map)>($r3);

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r8 = (java.lang.String) $r5;

        $r6 = new android.util.ArraySet;

        $r7 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r9 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r10 = (android.util.ArraySet) $r9;

        specialinvoke $r6.<android.util.ArraySet: void <init>(android.util.ArraySet)>($r10);

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private void writeFile()
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r2;
        android.util.ArrayMap $r3;
        com.android.role.persistence.RolesPersistence $r4;
        android.os.UserHandle $r5;
        java.lang.Throwable $r6;
        com.android.role.persistence.RolesState r7;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.role.RoleUserState: boolean mDestroyed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.role.RoleUserState: boolean mWriteScheduled> = 0;

        r7 = new com.android.role.persistence.RolesState;

        $i0 = r0.<com.android.server.role.RoleUserState: int mVersion>;

        $r2 = r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash>;

        $r3 = specialinvoke r0.<com.android.server.role.RoleUserState: android.util.ArrayMap snapshotRolesLocked()>();

        specialinvoke r7.<com.android.role.persistence.RolesState: void <init>(int,java.lang.String,java.util.Map)>($i0, $r2, $r3);

        exitmonitor r1;

     label4:
        $r4 = r0.<com.android.server.role.RoleUserState: com.android.role.persistence.RolesPersistence mPersistence>;

        $i1 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        $r5 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        interfaceinvoke $r4.<com.android.role.persistence.RolesPersistence: void writeForUser(com.android.role.persistence.RolesState,android.os.UserHandle)>(r7, $r5);

        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean addRoleHolder(java.lang.String, java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.String r1, r3, $r11, r13;
        java.lang.Object r2, $r5;
        boolean z0;
        android.util.ArrayMap $r4;
        int $i0;
        com.android.server.role.RoleUserState$Callback $r6;
        java.lang.Throwable $r12;
        android.util.ArraySet r14;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.role.RoleUserState;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (android.util.ArraySet) $r5;

     label02:
        if r14 != null goto label05;

     label03:
        r3 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot add role holder for unknown role, role: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", package: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r3, $r11);

        exitmonitor r2;

     label04:
        return 0;

     label05:
        z0 = virtualinvoke r14.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label06:
        if z0 == 0 goto label08;

     label07:
        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

     label08:
        exitmonitor r2;

     label09:
        if z0 == 0 goto label10;

        $r6 = r0.<com.android.server.role.RoleUserState: com.android.server.role.RoleUserState$Callback mCallback>;

        $i0 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        interfaceinvoke $r6.<com.android.server.role.RoleUserState$Callback: void onRoleHoldersChanged(java.lang.String,int,java.lang.String,java.lang.String)>(r13, $i0, null, r1);

     label10:
        return 1;

     label11:
        $r12 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean addRoleName(java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2, r9;
        boolean $z0;
        java.lang.String $r6, r8, r11;
        java.lang.Throwable $r7;
        android.util.ArraySet r10;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.role.RoleUserState;

        r8 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r8);

        if $z0 != 0 goto label3;

        r9 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        r10 = new android.util.ArraySet;

        specialinvoke r10.<android.util.ArraySet: void <init>()>();

        virtualinvoke r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r10);

        r11 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added new role: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r11, $r6);

        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

        exitmonitor r1;

     label2:
        return 1;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void destroy()
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        boolean $z0;
        android.os.Handler $r2;
        int $i0;
        com.android.role.persistence.RolesPersistence $r3;
        android.os.UserHandle $r4;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException r6;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.role.RoleUserState: boolean mDestroyed>;

        if $z0 != 0 goto label3;

        $r2 = r0.<com.android.server.role.RoleUserState: android.os.Handler mWriteHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r3 = r0.<com.android.server.role.RoleUserState: com.android.role.persistence.RolesPersistence mPersistence>;

        $i0 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i0);

        interfaceinvoke $r3.<com.android.role.persistence.RolesPersistence: void deleteForUser(android.os.UserHandle)>($r4);

        r0.<com.android.server.role.RoleUserState: boolean mDestroyed> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This RoleUserState has already been destroyed");

        throw r6;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void dump(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.role.RoleUserState r0;
        int i0, i1, i3, $i4, i7, i8;
        java.lang.String r1, $r6, r9, r11;
        android.util.ArrayMap r2;
        long l2, l5, l6;
        java.lang.Object $r3, $r4, $r5, r10;
        java.lang.Throwable $r7;
        com.android.internal.util.dump.DualDumpOutputStream r8;
        android.util.ArraySet r12;

        r0 := @this: com.android.server.role.RoleUserState;

        r8 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r9 := @parameter1: java.lang.String;

        l5 := @parameter2: long;

        r10 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r10;

     label1:
        i0 = r0.<com.android.server.role.RoleUserState: int mVersion>;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash>;

        r2 = specialinvoke r0.<com.android.server.role.RoleUserState: android.util.ArrayMap snapshotRolesLocked()>();

        exitmonitor r10;

     label2:
        l6 = virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r9, l5);

        $i4 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,int)>("user_id", 1120986464257L, $i4);

        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,int)>("version", 1120986464258L, i0);

        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("packages_hash", 1138166333443L, r1);

        i1 = virtualinvoke r2.<android.util.ArrayMap: int size()>();

        i7 = 0;

     label3:
        if i7 >= i1 goto label6;

        $r3 = virtualinvoke r2.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        r11 = (java.lang.String) $r3;

        $r4 = virtualinvoke r2.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i7);

        r12 = (android.util.ArraySet) $r4;

        l2 = virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>("roles", 2246267895812L);

        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("name", 1138166333441L, r11);

        i3 = virtualinvoke r12.<android.util.ArraySet: int size()>();

        i8 = 0;

     label4:
        if i8 >= i3 goto label5;

        $r5 = virtualinvoke r12.<android.util.ArraySet: java.lang.Object valueAt(int)>(i8);

        $r6 = (java.lang.String) $r5;

        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("holders", 2237677961218L, $r6);

        i8 = i8 + 1;

        goto label4;

     label5:
        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l2);

        i7 = i7 + 1;

        goto label3;

     label6:
        virtualinvoke r8.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l6);

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r10;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.util.List getHeldRoles(java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1, $r5, $r8;
        java.util.ArrayList r2;
        int i0, i1;
        android.util.ArrayMap $r3, $r4, $r7;
        android.util.ArraySet $r6;
        boolean $z0;
        java.lang.String $r9, r11;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.role.RoleUserState;

        r11 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r4 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r6 = (android.util.ArraySet) $r5;

        $z0 = virtualinvoke $r6.<android.util.ArraySet: boolean contains(java.lang.Object)>(r11);

        if $z0 == 0 goto label05;

        $r7 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r9 = (java.lang.String) $r8;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return r2;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String getPackagesHash()
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.util.ArraySet getRoleHolders(java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1, $r4;
        android.util.ArraySet r2, r7;
        android.util.ArrayMap $r3;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.role.RoleUserState;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.util.ArraySet) $r4;

     label2:
        if r7 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return null;

     label5:
        r2 = new android.util.ArraySet;

        specialinvoke r2.<android.util.ArraySet: void <init>(android.util.ArraySet)>(r7);

        exitmonitor r1;

     label6:
        return r2;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.util.ArrayMap getRolesAndHolders()
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.util.ArrayMap r3;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = specialinvoke r0.<com.android.server.role.RoleUserState: android.util.ArrayMap snapshotRolesLocked()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getVersion()
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.role.RoleUserState;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.role.RoleUserState: int mVersion>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isRoleAvailable(java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        boolean z0;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.role.RoleUserState;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean removeRoleHolder(java.lang.String, java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.String r1, r3, $r11, r13;
        java.lang.Object r2, $r5;
        boolean z0;
        android.util.ArrayMap $r4;
        int $i0;
        com.android.server.role.RoleUserState$Callback $r6;
        java.lang.Throwable $r12;
        android.util.ArraySet r14;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.role.RoleUserState;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (android.util.ArraySet) $r5;

     label02:
        if r14 != null goto label05;

     label03:
        r3 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove role holder for unknown role, role: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", package: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r3, $r11);

        exitmonitor r2;

     label04:
        return 0;

     label05:
        z0 = virtualinvoke r14.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

     label06:
        if z0 == 0 goto label08;

     label07:
        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

     label08:
        exitmonitor r2;

     label09:
        if z0 == 0 goto label10;

        $r6 = r0.<com.android.server.role.RoleUserState: com.android.server.role.RoleUserState$Callback mCallback>;

        $i0 = r0.<com.android.server.role.RoleUserState: int mUserId>;

        interfaceinvoke $r6.<com.android.server.role.RoleUserState$Callback: void onRoleHoldersChanged(java.lang.String,int,java.lang.String,java.lang.String)>(r13, $i0, r1, null);

     label10:
        return 1;

     label11:
        $r12 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setPackagesHash(java.lang.String)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1;
        java.lang.String $r2, r4;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.role.RoleUserState;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, r4);

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.role.RoleUserState: java.lang.String mPackagesHash> = r4;

        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setRoleNames(java.util.List)
    {
        com.android.server.role.RoleUserState r0;
        java.lang.Object r1, $r7, $r10, $r12;
        java.lang.String r2, r4, $r8, $r19;
        android.util.ArraySet r3;
        java.lang.StringBuilder r5;
        int i0, $i1, i3, i4;
        android.util.ArrayMap $r6, $r9, $r11, $r13;
        boolean $z0, $z1, $z2, z3;
        java.lang.Throwable $r20;
        java.util.List r21;

        r0 := @this: com.android.server.role.RoleUserState;

        r21 := @parameter0: java.util.List;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

        z3 = 0;

     label01:
        $r6 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $i1 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        i3 = $i1 - 1;

     label02:
        if i3 < 0 goto label08;

     label03:
        $r9 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        r2 = (java.lang.String) $r10;

     label04:
        $z1 = interfaceinvoke r21.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label07;

        $r11 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r3 = (android.util.ArraySet) $r12;

        $z2 = virtualinvoke r3.<android.util.ArraySet: boolean isEmpty()>();

        if $z2 != 0 goto label05;

        r4 = <com.android.server.role.RoleUserState: java.lang.String LOG_TAG>;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Holders of a removed role should have been cleaned up, role: ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", holders: ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r4, $r19);

     label05:
        $r13 = r0.<com.android.server.role.RoleUserState: android.util.ArrayMap mRoles>;

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i3);

     label06:
        z3 = 1;

     label07:
        i3 = i3 + -1;

        goto label02;

     label08:
        i0 = interfaceinvoke r21.<java.util.List: int size()>();

     label09:
        i4 = 0;

     label10:
        if i4 >= i0 goto label13;

     label11:
        $r7 = interfaceinvoke r21.<java.util.List: java.lang.Object get(int)>(i4);

        $r8 = (java.lang.String) $r7;

        $z0 = virtualinvoke r0.<com.android.server.role.RoleUserState: boolean addRoleName(java.lang.String)>($r8);

        z3 = z3 | $z0;

     label12:
        i4 = i4 + 1;

        goto label10;

     label13:
        if z3 == 0 goto label15;

     label14:
        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

     label15:
        exitmonitor r1;

     label16:
        return;

     label17:
        $r20 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void setVersion(int)
    {
        com.android.server.role.RoleUserState r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.role.RoleUserState;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.role.RoleUserState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.role.RoleUserState: int mVersion>;

        if $i1 != i0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.role.RoleUserState: int mVersion> = i0;

        specialinvoke r0.<com.android.server.role.RoleUserState: void scheduleWriteFileLocked()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
