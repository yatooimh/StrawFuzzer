class com.android.server.rollback.RollbackManagerServiceImpl extends android.content.rollback.IRollbackManager$Stub
{
    private static final long DEFAULT_ROLLBACK_LIFETIME_DURATION_MILLIS;
    private static final long HANDLER_THREAD_TIMEOUT_DURATION_MILLIS;
    private static final boolean LOCAL_LOGV;
    private static final java.lang.String TAG;
    private final android.util.SparseBooleanArray mAllocatedRollbackIds;
    private final com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper;
    private final android.content.Context mContext;
    private final java.util.concurrent.Executor mExecutor;
    private final android.os.HandlerThread mHandlerThread;
    private final com.android.server.pm.Installer mInstaller;
    private final java.lang.Object mLock;
    private final android.util.IntArray mOrphanedApkSessionIds;
    private final com.android.server.rollback.RollbackPackageHealthObserver mPackageHealthObserver;
    private final java.util.Random mRandom;
    private long mRelativeBootTime;
    private long mRollbackLifetimeDurationInMillis;
    private final com.android.server.rollback.RollbackStore mRollbackStore;
    private final java.util.List mRollbacks;
    private final java.lang.Runnable mRunExpiration;
    private final android.util.LongArrayQueue mSleepDuration;

    static void <clinit>()
    {
        boolean $z0;
        java.util.concurrent.TimeUnit $r0, $r1;
        long $l0, $l1;

        <com.android.server.rollback.RollbackManagerServiceImpl: java.lang.String TAG> = "RollbackManager";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("RollbackManager", 2);

        <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV> = $z0;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(14L);

        <com.android.server.rollback.RollbackManagerServiceImpl: long DEFAULT_ROLLBACK_LIFETIME_DURATION_MILLIS> = $l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        <com.android.server.rollback.RollbackManagerServiceImpl: long HANDLER_THREAD_TIMEOUT_DURATION_MILLIS> = $l1;

        return;
    }

    void <init>(android.content.Context)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.Rollback r1, $r49;
        java.lang.Object $r2, $r44, $r47, $r51, r58;
        long $l0, $l1, $l2;
        java.security.SecureRandom $r3;
        android.util.SparseBooleanArray $r4, $r53;
        android.util.IntArray $r5;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$0HibeeAepjXymkK7UmEMFrp6FJs $r6;
        android.util.LongArrayQueue $r7;
        com.android.server.pm.Installer $r8, $r15;
        com.android.server.rollback.RollbackStore $r9, $r16;
        java.io.File $r10, $r11;
        com.android.server.rollback.RollbackPackageHealthObserver $r12;
        android.content.Context $r13, $r26, $r31, $r36, $r41, r56;
        com.android.server.rollback.AppDataRollbackHelper $r14, $r48;
        java.util.List $r17, $r19, $r20, $r28, $r50;
        android.content.pm.PackageManager $r18;
        boolean $z0, $z1, $z2, $z3;
        android.os.HandlerThread $r21;
        com.android.server.Watchdog $r22;
        android.os.Handler $r23, $r25, $r32, $r37, $r42;
        android.os.HandlerExecutor $r24;
        android.os.UserManager $r27;
        android.content.IntentFilter $r29, $r34, $r39;
        com.android.server.rollback.RollbackManagerServiceImpl$1 $r30;
        com.android.server.rollback.RollbackManagerServiceImpl$2 $r35;
        com.android.server.rollback.RollbackManagerServiceImpl$3 $r40;
        android.content.pm.UserInfo $r45;
        android.os.UserHandle $r46;
        android.content.rollback.RollbackInfo $r52;
        int $i3;
        android.content.IntentFilter$MalformedMimeTypeException $r54;
        java.lang.Throwable $r55;
        java.util.Iterator r59, r60, r62;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r56 := @parameter0: android.content.Context;

        specialinvoke r0.<android.content.rollback.IRollbackManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock> = $r2;

        $l0 = <com.android.server.rollback.RollbackManagerServiceImpl: long DEFAULT_ROLLBACK_LIFETIME_DURATION_MILLIS>;

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis> = $l0;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.Random mRandom> = $r3;

        $r4 = new android.util.SparseBooleanArray;

        specialinvoke $r4.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.SparseBooleanArray mAllocatedRollbackIds> = $r4;

        $r5 = new android.util.IntArray;

        specialinvoke $r5.<android.util.IntArray: void <init>()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.IntArray mOrphanedApkSessionIds> = $r5;

        $r6 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$0HibeeAepjXymkK7UmEMFrp6FJs;

        specialinvoke $r6.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$0HibeeAepjXymkK7UmEMFrp6FJs: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Runnable mRunExpiration> = $r6;

        $r7 = new android.util.LongArrayQueue;

        specialinvoke $r7.<android.util.LongArrayQueue: void <init>()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.LongArrayQueue mSleepDuration> = $r7;

        $l1 = staticinvoke <com.android.server.rollback.RollbackManagerServiceImpl: long calculateRelativeBootTime()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRelativeBootTime> = $l1;

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext> = r56;

        $r8 = new com.android.server.pm.Installer;

        specialinvoke $r8.<com.android.server.pm.Installer: void <init>(android.content.Context)>(r56);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.pm.Installer mInstaller> = $r8;

        virtualinvoke $r8.<com.android.server.pm.Installer: void onStart()>();

        $r9 = new com.android.server.rollback.RollbackStore;

        $r10 = new java.io.File;

        $r11 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "rollback");

        specialinvoke $r9.<com.android.server.rollback.RollbackStore: void <init>(java.io.File)>($r10);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackStore mRollbackStore> = $r9;

        $r12 = new com.android.server.rollback.RollbackPackageHealthObserver;

        $r13 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        specialinvoke $r12.<com.android.server.rollback.RollbackPackageHealthObserver: void <init>(android.content.Context)>($r13);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackPackageHealthObserver mPackageHealthObserver> = $r12;

        $r14 = new com.android.server.rollback.AppDataRollbackHelper;

        $r15 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.pm.Installer mInstaller>;

        specialinvoke $r14.<com.android.server.rollback.AppDataRollbackHelper: void <init>(com.android.server.pm.Installer)>($r15);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper> = $r14;

        r58 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r58;

     label01:
        $r16 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackStore mRollbackStore>;

        $r17 = virtualinvoke $r16.<com.android.server.rollback.RollbackStore: java.util.List loadRollbacks()>();

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks> = $r17;

        $r18 = virtualinvoke r56.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r18.<android.content.pm.PackageManager: boolean isDeviceUpgrading()>();

        if $z0 != 0 goto label05;

        $r50 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r59 = interfaceinvoke $r50.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r51 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.rollback.Rollback) $r51;

        $r53 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.SparseBooleanArray mAllocatedRollbackIds>;

        $r52 = r1.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i3 = virtualinvoke $r52.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        virtualinvoke $r53.<android.util.SparseBooleanArray: void put(int,boolean)>($i3, 1);

     label03:
        goto label02;

     label04:
        goto label09;

     label05:
        $r19 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r60 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r47 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        $r49 = (com.android.server.rollback.Rollback) $r47;

        $r48 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke $r49.<com.android.server.rollback.Rollback: void delete(com.android.server.rollback.AppDataRollbackHelper)>($r48);

     label07:
        goto label06;

     label08:
        $r20 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        interfaceinvoke $r20.<java.util.List: void clear()>();

     label09:
        exitmonitor r58;

     label10:
        $r21 = new android.os.HandlerThread;

        specialinvoke $r21.<android.os.HandlerThread: void <init>(java.lang.String)>("RollbackManagerServiceHandler");

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.HandlerThread mHandlerThread> = $r21;

        virtualinvoke $r21.<android.os.HandlerThread: void start()>();

        $r22 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r23 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $l2 = <com.android.server.rollback.RollbackManagerServiceImpl: long HANDLER_THREAD_TIMEOUT_DURATION_MILLIS>;

        virtualinvoke $r22.<com.android.server.Watchdog: void addThread(android.os.Handler,long)>($r23, $l2);

        $r24 = new android.os.HandlerExecutor;

        $r25 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        specialinvoke $r24.<android.os.HandlerExecutor: void <init>(android.os.Handler)>($r25);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.concurrent.Executor mExecutor> = $r24;

        $r26 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r27 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r26);

        $r28 = virtualinvoke $r27.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r62 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r44 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        $r45 = (android.content.pm.UserInfo) $r44;

        $r46 = virtualinvoke $r45.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void registerUserCallbacks(android.os.UserHandle)>($r46);

        goto label11;

     label12:
        $r29 = new android.content.IntentFilter;

        specialinvoke $r29.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r29.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ENABLE_ROLLBACK");

     label13:
        virtualinvoke $r29.<android.content.IntentFilter: void addDataType(java.lang.String)>("application/vnd.android.package-archive");

     label14:
        goto label16;

     label15:
        $r54 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RollbackManager", "addDataType", $r54);

     label16:
        $r31 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r30 = new com.android.server.rollback.RollbackManagerServiceImpl$1;

        specialinvoke $r30.<com.android.server.rollback.RollbackManagerServiceImpl$1: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        $r32 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        virtualinvoke $r31.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r30, $r29, null, $r32);

        $r34 = new android.content.IntentFilter;

        specialinvoke $r34.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r34.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CANCEL_ENABLE_ROLLBACK");

        $r36 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r35 = new com.android.server.rollback.RollbackManagerServiceImpl$2;

        specialinvoke $r35.<com.android.server.rollback.RollbackManagerServiceImpl$2: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        $r37 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        virtualinvoke $r36.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r35, $r34, null, $r37);

        $r39 = new android.content.IntentFilter;

        specialinvoke $r39.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_ADDED");

        $r41 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r40 = new com.android.server.rollback.RollbackManagerServiceImpl$3;

        specialinvoke $r40.<com.android.server.rollback.RollbackManagerServiceImpl$3: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        $r42 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        virtualinvoke $r41.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r40, $r39, null, $r42);

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void registerTimeChangeReceiver()>();

        return;

     label17:
        $r55 := @caughtexception;

     label18:
        exitmonitor r58;

     label19:
        throw $r55;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch android.content.IntentFilter$MalformedMimeTypeException from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    static void access$000(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void queueSleepIfNeeded()>();

        return;
    }

    static android.os.Handler access$100(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        return $r1;
    }

    static void access$1000(com.android.server.rollback.RollbackManagerServiceImpl, java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void onPackageReplaced(java.lang.String)>(r1);

        return;
    }

    static void access$1100(com.android.server.rollback.RollbackManagerServiceImpl, java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void onPackageFullyRemoved(java.lang.String)>(r1);

        return;
    }

    static long access$1200(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long $l0;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        $l0 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRelativeBootTime>;

        return $l0;
    }

    static long access$1202(com.android.server.rollback.RollbackManagerServiceImpl, long)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long l0;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        l0 := @parameter1: long;

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRelativeBootTime> = l0;

        return l0;
    }

    static long access$1300()
    {
        long $l0;

        $l0 = staticinvoke <com.android.server.rollback.RollbackManagerServiceImpl: long calculateRelativeBootTime()>();

        return $l0;
    }

    static boolean access$1400(com.android.server.rollback.RollbackManagerServiceImpl, com.android.server.rollback.Rollback)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.Rollback r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter1: com.android.server.rollback.Rollback;

        $z0 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean completeEnableRollback(com.android.server.rollback.Rollback)>(r1);

        return $z0;
    }

    static void access$1500(com.android.server.rollback.RollbackManagerServiceImpl, com.android.server.rollback.Rollback)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.Rollback r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter1: com.android.server.rollback.Rollback;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void makeRollbackAvailable(com.android.server.rollback.Rollback)>(r1);

        return;
    }

    static boolean access$200(com.android.server.rollback.RollbackManagerServiceImpl, int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean enableRollback(int)>(i0);

        return $z0;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        return $z0;
    }

    static java.lang.Object access$400(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.rollback.Rollback access$500(com.android.server.rollback.RollbackManagerServiceImpl, int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0;
        com.android.server.rollback.Rollback $r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.Rollback getRollbackForSessionLocked(int)>(i0);

        return $r1;
    }

    static java.util.List access$600(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        return $r1;
    }

    static com.android.server.rollback.AppDataRollbackHelper access$700(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.AppDataRollbackHelper $r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        return $r1;
    }

    static void access$800(com.android.server.rollback.RollbackManagerServiceImpl, android.os.UserHandle)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.os.UserHandle r1;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void registerUserCallbacks(android.os.UserHandle)>(r1);

        return;
    }

    private int allocateRollbackIdLocked()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, $i1, i2;
        java.util.Random $r1;
        android.util.SparseBooleanArray $r2, $r4;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i2 = 0;

     label1:
        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.Random mRandom>;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(2147483646);

        i0 = $i1 + 1;

        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.SparseBooleanArray mAllocatedRollbackIds>;

        $z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.SparseBooleanArray mAllocatedRollbackIds>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        return i0;

     label2:
        if i2 >= 32 goto label3;

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to allocate rollback ID");

        throw $r3;
    }

    private static long calculateRelativeBootTime()
    {
        long $l0, $l1, $l2;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = $l0 - $l1;

        return $l2;
    }

    private void commitRollbackInternal(int, java.util.List, java.lang.String, android.content.IntentSender)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0;
        java.util.List r1;
        java.lang.String r2, $r9;
        android.content.IntentSender r3;
        java.lang.StringBuilder $r4;
        android.content.Context $r10, $r11;
        com.android.server.rollback.Rollback r13;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.content.IntentSender;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commitRollback id=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" caller=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RollbackManager", $r9);

        r13 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.Rollback getRollbackForId(int)>(i0);

        if r13 != null goto label1;

        $r11 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        staticinvoke <com.android.server.rollback.RollbackManagerServiceImpl: void sendFailure(android.content.Context,android.content.IntentSender,int,java.lang.String)>($r11, r3, 2, "Rollback unavailable");

        return;

     label1:
        $r10 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke r13.<com.android.server.rollback.Rollback: void commit(android.content.Context,java.util.List,java.lang.String,android.content.IntentSender)>($r10, r1, r2, r3);

        return;
    }

    private boolean completeEnableRollback(com.android.server.rollback.Rollback)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.Rollback r1;
        boolean $z0, $z1;
        java.util.List $r3;
        com.android.server.rollback.AppDataRollbackHelper $r4;
        java.lang.StringBuilder $r5;
        android.content.rollback.RollbackInfo $r7;
        int $i1;
        java.lang.String $r9;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: com.android.server.rollback.Rollback;

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("completeEnableRollback id=");

        $r7 = r1.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i1 = virtualinvoke $r7.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RollbackManager", $r9);

     label1:
        $z1 = virtualinvoke r1.<com.android.server.rollback.Rollback: boolean allPackagesEnabled()>();

        if $z1 != 0 goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Failed to enable rollback for all packages in session.");

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke r1.<com.android.server.rollback.Rollback: void delete(com.android.server.rollback.AppDataRollbackHelper)>($r4);

        return 0;

     label2:
        virtualinvoke r1.<com.android.server.rollback.Rollback: void saveRollback()>();

        return 1;
    }

    private com.android.server.rollback.Rollback createNewRollbackLocked(android.content.pm.PackageInstaller$SessionInfo)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, i1, i3;
        java.lang.String r1, $r18;
        android.os.UserHandle $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        int[] $r5, r21;
        com.android.server.rollback.RollbackStore $r6, $r9;
        android.util.SparseIntArray $r7, $r10;
        java.util.List $r8;
        java.lang.StringBuilder $r11;
        android.content.pm.PackageInstaller$SessionInfo r19;
        com.android.server.rollback.Rollback r22;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r19 := @parameter0: android.content.pm.PackageInstaller$SessionInfo;

        i0 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: int allocateRollbackIdLocked()>();

        $r2 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>();

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        if $r2 != $r3 goto label1;

        i3 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>();

        i3 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

     label2:
        r1 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>();

        i1 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>();

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createNewRollback id=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" installer=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RollbackManager", $r18);

     label3:
        $z1 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>();

        if $z1 == 0 goto label4;

        r21 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>();

        goto label5;

     label4:
        $r5 = newarray (int)[1];

        $r5[0] = i1;

        r21 = $r5;

     label5:
        $z2 = virtualinvoke r19.<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>();

        if $z2 == 0 goto label6;

        $r9 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackStore mRollbackStore>;

        $r10 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.SparseIntArray getExtensionVersions()>();

        r22 = virtualinvoke $r9.<com.android.server.rollback.RollbackStore: com.android.server.rollback.Rollback createStagedRollback(int,int,int,java.lang.String,int[],android.util.SparseIntArray)>(i0, i1, i3, r1, r21, $r10);

        goto label7;

     label6:
        $r6 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackStore mRollbackStore>;

        $r7 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.SparseIntArray getExtensionVersions()>();

        r22 = virtualinvoke $r6.<com.android.server.rollback.RollbackStore: com.android.server.rollback.Rollback createNonStagedRollback(int,int,java.lang.String,int[],android.util.SparseIntArray)>(i0, i3, r1, r21, $r7);

     label7:
        $r8 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r22);

        return r22;
    }

    private void destroyCeSnapshotsForExpiredRollbacks(int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, $i1, $i2, $i3, i5;
        java.util.List $r2, $r5;
        com.android.server.pm.ApexManager $r3;
        com.android.server.pm.Installer $r4;
        java.lang.Object $r6;
        com.android.server.rollback.Rollback $r7;
        android.content.rollback.RollbackInfo $r8;
        com.android.server.pm.Installer$InstallerException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r13;
        int[] r14;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        r14 = newarray (int)[$i1];

        i5 = 0;

     label1:
        $i2 = lengthof r14;

        if i5 >= $i2 goto label2;

        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i5);

        $r7 = (com.android.server.rollback.Rollback) $r6;

        $r8 = $r7.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i3 = virtualinvoke $r8.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        r14[i5] = $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <com.android.server.pm.ApexManager: com.android.server.pm.ApexManager getInstance()>();

        virtualinvoke $r3.<com.android.server.pm.ApexManager: boolean destroyCeSnapshotsNotSpecified(int,int[])>(i0, r14);

     label3:
        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r4.<com.android.server.pm.Installer: boolean destroyCeSnapshotsNotSpecified(int,int[])>(i0, r14);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete snapshots for user: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RollbackManager", $r13, $r9);

     label6:
        return;

        catch com.android.server.pm.Installer$InstallerException from label3 to label4 with label5;
    }

    private boolean enableRollback(int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.pm.PackageInstaller$SessionInfo r1, r20;
        java.lang.Object r2, $r9, r21, r22;
        com.android.server.rollback.Rollback r3, $r10, r23;
        boolean $z0, $z1, $z2;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        java.util.List $r6, $r8;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, i11, i12;
        android.util.IntArray $r7;
        java.lang.StringBuilder $r11;
        java.lang.String $r14;
        java.lang.Throwable $r15, $r16, $r17;
        android.content.pm.PackageInstaller r19;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i11 := @parameter0: int;

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label01;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enableRollback sessionId=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RollbackManager", $r14);

     label01:
        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r19 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>();

        r1 = virtualinvoke r19.<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>(i11);

        if r1 != null goto label02;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Unable to find session for enabled rollback.");

        return 0;

     label02:
        $z1 = virtualinvoke r1.<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()>();

        if $z1 == 0 goto label03;

        $i8 = virtualinvoke r1.<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()>();

        r20 = virtualinvoke r19.<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>($i8);

        goto label04;

     label03:
        r20 = r1;

     label04:
        if r20 != null goto label05;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Unable to find parent session for enabled rollback.");

        return 0;

     label05:
        r21 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r21;

        i12 = 0;

     label06:
        $r6 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i12 >= $i0 goto label09;

        $r8 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i12);

        $r10 = (com.android.server.rollback.Rollback) $r9;

        $i5 = virtualinvoke $r10.<com.android.server.rollback.Rollback: int getApkSessionId()>();

        $i6 = virtualinvoke r20.<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>();

        if $i5 != $i6 goto label08;

        exitmonitor r21;

     label07:
        return 1;

     label08:
        i12 = i12 + 1;

        goto label06;

     label09:
        exitmonitor r21;

     label10:
        r22 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r22;

     label11:
        $r7 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.IntArray mOrphanedApkSessionIds>;

        $i1 = virtualinvoke r20.<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>();

        $i2 = virtualinvoke $r7.<android.util.IntArray: int indexOf(int)>($i1);

        if $i2 == -1 goto label13;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("RollbackManager", "Not enabling rollback for apk as no matching staged session rollback exists");

        exitmonitor r22;

     label12:
        return 0;

     label13:
        exitmonitor r22;

     label14:
        r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r2;

     label15:
        $i3 = virtualinvoke r1.<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>();

        r3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.Rollback getRollbackForSessionLocked(int)>($i3);

     label16:
        r23 = r3;

        if r3 != null goto label18;

     label17:
        r23 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.Rollback createNewRollbackLocked(android.content.pm.PackageInstaller$SessionInfo)>(r20);

     label18:
        exitmonitor r2;

     label19:
        $z2 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean enableRollbackForPackageSession(com.android.server.rollback.Rollback,android.content.pm.PackageInstaller$SessionInfo)>(r23, r1);

        return $z2;

     label20:
        $r15 := @caughtexception;

     label21:
        exitmonitor r2;

     label22:
        throw $r15;

     label23:
        $r16 := @caughtexception;

     label24:
        exitmonitor r22;

     label25:
        throw $r16;

     label26:
        $r17 := @caughtexception;

     label27:
        exitmonitor r21;

     label28:
        throw $r17;

        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private boolean enableRollbackAllowed(java.lang.String, java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1, r2;
        android.content.pm.PackageManager r3;
        android.content.Context $r4;
        int $i0, $i1;
        boolean $z0, z1, z2, z3;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z1 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        r3 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = virtualinvoke r3.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ROLLBACKS", r1);

        if $i0 != 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        $i1 = virtualinvoke r3.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.TEST_MANAGE_ROLLBACKS", r1);

        if $i1 != 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        z3 = 0;

     label5:
        $z0 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean isRollbackWhitelisted(java.lang.String)>(r2);

        if $z0 == 0 goto label6;

        if z2 != 0 goto label7;

     label6:
        if z3 == 0 goto label8;

     label7:
        z1 = 1;

     label8:
        return z1;
    }

    private boolean enableRollbackForPackageSession(com.android.server.rollback.Rollback, android.content.pm.PackageInstaller$SessionInfo)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.pm.PackageInstaller$SessionInfo r1;
        int i0, $i1, $i2, $i3, $i5, $i6, $i9, $i11;
        android.content.pm.PackageParser$ApkLite r2;
        java.lang.String r3, $r5, $r8, $r15, $r17, $r27, $r30, $r32, $r38, $r43, r49, r51;
        android.content.pm.PackageInfo r4, r53;
        android.content.pm.parsing.result.ParseInput $r6;
        java.io.File $r7;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.Object $r9, $r18, $r21;
        java.lang.StringBuilder $r10, $r22, $r28, $r35, $r40;
        long $l7, $l8, $l10;
        java.lang.String[] $r16;
        android.content.pm.PackageManagerInternal $r19;
        java.util.List $r20;
        java.lang.Exception $r33;
        android.content.pm.PackageManager$NameNotFoundException $r34, $r39;
        com.android.server.rollback.Rollback r44;
        android.content.pm.parsing.result.ParseTypeImpl r46;
        android.content.pm.parsing.result.ParseResult r47;
        java.util.Iterator r54;
        android.content.pm.ApplicationInfo r57;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r44 := @parameter0: com.android.server.rollback.Rollback;

        r1 := @parameter1: android.content.pm.PackageInstaller$SessionInfo;

        i0 = r1.<android.content.pm.PackageInstaller$SessionInfo: int installFlags>;

        $i1 = 262144 & i0;

        if $i1 != 0 goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Rollback is not enabled.");

        return 0;

     label01:
        $i2 = i0 & 2048;

        if $i2 == 0 goto label02;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Rollbacks not supported for instant app install");

        return 0;

     label02:
        $r5 = r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String resolvedBaseCodePath>;

        if $r5 != null goto label03;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Session code path has not been resolved.");

        return 0;

     label03:
        r46 = staticinvoke <android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseTypeImpl forDefaultParsing()>();

        $r6 = virtualinvoke r46.<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseInput reset()>();

        $r7 = new java.io.File;

        $r8 = r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String resolvedBaseCodePath>;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        r47 = staticinvoke <android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parseApkLite(android.content.pm.parsing.result.ParseInput,java.io.File,int)>($r6, $r7, 0);

        $z0 = interfaceinvoke r47.<android.content.pm.parsing.result.ParseResult: boolean isError()>();

        if $z0 == 0 goto label04;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse new package: ");

        $r30 = interfaceinvoke r47.<android.content.pm.parsing.result.ParseResult: java.lang.String getErrorMessage()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = interfaceinvoke r47.<android.content.pm.parsing.result.ParseResult: java.lang.Exception getException()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RollbackManager", $r32, $r33);

        return 0;

     label04:
        $r9 = interfaceinvoke r47.<android.content.pm.parsing.result.ParseResult: java.lang.Object getResult()>();

        r2 = (android.content.pm.PackageParser$ApkLite) $r9;

        r49 = r2.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabling rollback for install of ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", session:");

        $i3 = r1.<android.content.pm.PackageInstaller$SessionInfo: int sessionId>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RollbackManager", $r15);

        r51 = virtualinvoke r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>();

        $z1 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean enableRollbackAllowed(java.lang.String,java.lang.String)>(r51, r49);

        if $z1 != 0 goto label05;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installer ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed to enable rollback on ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r27);

        return 0;

     label05:
        $i5 = 131072 & i0;

        if $i5 == 0 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        r53 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.PackageInfo getPackageInfo(java.lang.String)>(r49);

     label08:
        if z5 == 0 goto label15;

        $r18 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r19 = (android.content.pm.PackageManagerInternal) $r18;

        $r20 = virtualinvoke $r19.<android.content.pm.PackageManagerInternal: java.util.List getApksInApex(java.lang.String)>(r49);

        r54 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r21 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r21;

     label10:
        r4 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.PackageInfo getPackageInfo(java.lang.String)>(r3);

     label11:
        $l10 = virtualinvoke r4.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $i11 = r1.<android.content.pm.PackageInstaller$SessionInfo: int rollbackDataPolicy>;

        $z4 = virtualinvoke r44.<com.android.server.rollback.Rollback: boolean enableForPackageInApex(java.lang.String,long,int)>(r3, $l10, $i11);

        if $z4 != 0 goto label12;

        return 0;

     label12:
        goto label09;

     label13:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not installed");

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r43);

        return 0;

     label14:
        goto label15;

     label15:
        r57 = r53.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i6 = r2.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        $l7 = (long) $i6;

        $l8 = virtualinvoke r53.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $r17 = r57.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        $r16 = r57.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        $i9 = r1.<android.content.pm.PackageInstaller$SessionInfo: int rollbackDataPolicy>;

        $z2 = virtualinvoke r44.<com.android.server.rollback.Rollback: boolean enableForPackage(java.lang.String,long,long,boolean,java.lang.String,java.lang.String[],int)>(r49, $l7, $l8, z5, $r17, $r16, $i9);

        return $z2;

     label16:
        $r34 := @caughtexception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not installed");

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r38);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label13;
    }

    private void enforceManageRollbacks(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1, $r12;
        android.content.Context $r3, $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_ROLLBACKS");

        if $i0 == 0 goto label2;

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TEST_MANAGE_ROLLBACKS");

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.MANAGE_ROLLBACKS");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.TEST_MANAGE_ROLLBACKS");

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        return;
    }

    private android.content.Context getContextAsUser(android.os.UserHandle)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.Context $r1, $r2, r6;
        java.lang.String $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.os.UserHandle r5;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r5 := @parameter0: android.os.UserHandle;

     label1:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        r6 = virtualinvoke $r2.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r3, 0, r5);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private android.util.SparseIntArray getExtensionVersions()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int[] r1;
        android.util.SparseIntArray $r3;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 = newarray (int)[1];

        r1[0] = 30;

        $r3 = new android.util.SparseIntArray;

        $i0 = lengthof r1;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>(int)>($i0);

        i5 = 0;

     label1:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label2;

        $i3 = r1[i5];

        $i2 = r1[i5];

        $i4 = staticinvoke <android.os.ext.SdkExtensions: int getExtensionVersion(int)>($i2);

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>($i3, $i4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private android.os.Handler getHandler()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.os.HandlerThread $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.HandlerThread mHandlerThread>;

        $r2 = virtualinvoke $r1.<android.os.HandlerThread: android.os.Handler getThreadHandler()>();

        return $r2;
    }

    private long getInstalledPackageVersion(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long $l0;
        android.content.pm.PackageManager$NameNotFoundException $r1;
        java.lang.String r2;
        android.content.pm.PackageInfo r3;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r2 := @parameter0: java.lang.String;

     label1:
        r3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.PackageInfo getPackageInfo(java.lang.String)>(r2);

     label2:
        $l0 = virtualinvoke r3.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        return $l0;

     label3:
        $r1 := @caughtexception;

        return -1L;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private android.content.pm.PackageInfo getPackageInfo(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1;
        android.content.pm.PackageManager r2;
        android.content.Context $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.content.pm.PackageInfo $r5, r6;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        r2 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        r6 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 4194304);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 1073741824);

        return $r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private com.android.server.rollback.Rollback getRollbackForId(int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, $i1, $i2, i3;
        java.lang.Object r1, $r4;
        java.util.List $r2, $r3;
        android.content.rollback.RollbackInfo $r5;
        java.lang.Throwable $r6;
        com.android.server.rollback.Rollback r7;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

        i3 = 0;

     label1:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.rollback.Rollback) $r4;

        $r5 = r7.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i2 = virtualinvoke $r5.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        if $i2 != i0 goto label3;

        exitmonitor r1;

     label2:
        return r7;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        return null;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private com.android.server.rollback.Rollback getRollbackForSessionLocked(int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, $i1, $i2, i3;
        com.android.server.rollback.Rollback r1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        i3 = 0;

     label1:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r1 = (com.android.server.rollback.Rollback) $r4;

        $i2 = virtualinvoke r1.<com.android.server.rollback.Rollback: int getStagedSessionId()>();

        if $i2 == i0 goto label3;

        $z0 = virtualinvoke r1.<com.android.server.rollback.Rollback: boolean containsSessionId(int)>(i0);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return r1;

     label4:
        return null;
    }

    private boolean isModule(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.pm.PackageManager r1;
        android.content.Context $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;
        boolean z0;
        android.content.pm.ModuleInfo r5;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r4 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z0 = 0;

     label1:
        r5 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>(r4, 0);

     label2:
        if r5 == null goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    private boolean isRollbackWhitelisted(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1;
        com.android.server.SystemConfig $r2;
        java.util.Set $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r3 = virtualinvoke $r2.<com.android.server.SystemConfig: java.util.Set getRollbackWhitelistedPackages()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean isModule(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public static void lambda$0HibeeAepjXymkK7UmEMFrp6FJs(com.android.server.rollback.RollbackManagerServiceImpl)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;

        r0 := @parameter0: com.android.server.rollback.RollbackManagerServiceImpl;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void runExpiration()>();

        return;
    }

    static void lambda$queueSleepIfNeeded$3(long)
    {
        long l0;
        java.lang.Throwable $r1;
        java.lang.IllegalStateException $r2;

        l0 := @parameter0: long;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RollbackManagerHandlerThread interrupted");

        throw $r2;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void makeRollbackAvailable(com.android.server.rollback.Rollback)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.Rollback r1;
        java.lang.StringBuilder $r3;
        android.content.rollback.RollbackInfo $r5;
        int $i0;
        java.lang.String $r7;
        com.android.server.rollback.RollbackPackageHealthObserver $r8;
        java.util.List $r9;
        long $l2;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: com.android.server.rollback.Rollback;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeRollbackAvailable id=");

        $r5 = r1.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i0 = virtualinvoke $r5.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RollbackManager", $r7);

        virtualinvoke r1.<com.android.server.rollback.Rollback: void makeAvailable()>();

        $r8 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackPackageHealthObserver mPackageHealthObserver>;

        $r9 = virtualinvoke r1.<com.android.server.rollback.Rollback: java.util.List getPackageNames()>();

        $l2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis>;

        virtualinvoke $r8.<com.android.server.rollback.RollbackPackageHealthObserver: void startObservingHealth(java.util.List,long)>($r9, $l2);

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void runExpiration()>();

        return;
    }

    private void onPackageFullyRemoved(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void expireRollbackForPackage(java.lang.String)>(r1);

        return;
    }

    private void onPackageReplaced(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long l0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        com.android.server.rollback.Rollback r3;
        java.util.List $r4;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.rollback.AppDataRollbackHelper $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r8 := @parameter0: java.lang.String;

        l0 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: long getInstalledPackageVersion(java.lang.String)>(r8);

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.rollback.Rollback) $r5;

        $z1 = virtualinvoke r3.<com.android.server.rollback.Rollback: boolean isEnabling()>();

        if $z1 != 0 goto label3;

        $z3 = virtualinvoke r3.<com.android.server.rollback.Rollback: boolean isAvailable()>();

        if $z3 == 0 goto label4;

     label3:
        $z2 = virtualinvoke r3.<com.android.server.rollback.Rollback: boolean includesPackageWithDifferentVersion(java.lang.String,long)>(r8, l0);

        if $z2 == 0 goto label4;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $r6 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke r3.<com.android.server.rollback.Rollback: void delete(com.android.server.rollback.AppDataRollbackHelper)>($r6);

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void queueSleepIfNeeded()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long l0;
        android.util.LongArrayQueue $r1, $r2;
        int $i1;
        byte $b2;
        android.os.Handler $r3;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$mLT_D8xDNyND2xOtKDtfeJiTkqI $r4;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.LongArrayQueue mSleepDuration>;

        $i1 = virtualinvoke $r1.<android.util.LongArrayQueue: int size()>();

        if $i1 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.LongArrayQueue mSleepDuration>;

        l0 = virtualinvoke $r2.<android.util.LongArrayQueue: long removeFirst()>();

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label2;

        return;

     label2:
        $r3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r4 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$mLT_D8xDNyND2xOtKDtfeJiTkqI;

        specialinvoke $r4.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$mLT_D8xDNyND2xOtKDtfeJiTkqI: void <init>(long)>(l0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    private void registerTimeChangeReceiver()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback.RollbackManagerServiceImpl$5 $r3;
        android.content.IntentFilter $r4;
        android.content.Context $r5;
        android.os.Handler $r6;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $r3 = new com.android.server.rollback.RollbackManagerServiceImpl$5;

        specialinvoke $r3.<com.android.server.rollback.RollbackManagerServiceImpl$5: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIME_SET");

        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r6 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r3, $r4, null, $r6);

        return;
    }

    private void registerUserCallbacks(android.os.UserHandle)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.pm.PackageManager $r1;
        android.content.pm.PackageInstaller $r2;
        com.android.server.rollback.RollbackManagerServiceImpl$SessionCallback $r3;
        android.os.Handler $r4, $r7;
        android.content.IntentFilter $r5;
        com.android.server.rollback.RollbackManagerServiceImpl$4 $r6;
        java.lang.StringBuilder $r9;
        java.lang.String $r12;
        android.os.UserHandle r13;
        android.content.Context r14;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r13 := @parameter0: android.os.UserHandle;

        r14 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context getContextAsUser(android.os.UserHandle)>(r13);

        if r14 != null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to register user callbacks for user ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r12);

        return;

     label1:
        $r1 = virtualinvoke r14.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r2 = virtualinvoke $r1.<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>();

        $r3 = new com.android.server.rollback.RollbackManagerServiceImpl$SessionCallback;

        specialinvoke $r3.<com.android.server.rollback.RollbackManagerServiceImpl$SessionCallback: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,com.android.server.rollback.RollbackManagerServiceImpl$1)>(r0, null);

        $r4 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        virtualinvoke $r2.<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>($r3, $r4);

        $r5 = new android.content.IntentFilter;

        specialinvoke $r5.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REPLACED");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_FULLY_REMOVED");

        virtualinvoke $r5.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r6 = new com.android.server.rollback.RollbackManagerServiceImpl$4;

        specialinvoke $r6.<com.android.server.rollback.RollbackManagerServiceImpl$4: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        $r7 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        virtualinvoke r14.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r6, $r5, null, $r7);

        return;
    }

    private void restoreUserDataInternal(java.lang.String, int[], int, java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int[] r1;
        int i0, i2, $i3;
        java.lang.String r2, $r11, $r13, r15;
        boolean $z0, $z1;
        java.util.List $r3, $r18;
        java.lang.Object $r4, r17;
        com.android.server.rollback.AppDataRollbackHelper $r5;
        com.android.server.rollback.Rollback $r6;
        java.lang.StringBuilder $r7;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r15 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreUserData pkg=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" users=");

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RollbackManager", $r13);

     label1:
        r17 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r17;

        i2 = 0;

     label2:
        $r18 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i3 = interfaceinvoke $r18.<java.util.List: int size()>();

        if i2 >= $i3 goto label5;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.rollback.Rollback) $r4;

        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        $z1 = virtualinvoke $r6.<com.android.server.rollback.Rollback: boolean restoreUserDataForPackageIfInProgress(java.lang.String,int[],int,java.lang.String,com.android.server.rollback.AppDataRollbackHelper)>(r15, r1, i0, r2, $r5);

        if $z1 == 0 goto label4;

        exitmonitor r17;

     label3:
        return;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        exitmonitor r17;

     label6:
        return;

     label7:
        $r14 := @caughtexception;

     label8:
        exitmonitor r17;

     label9:
        throw $r14;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void runExpiration()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.time.Instant r1, $r7, $r12, r19, r21, r23;
        java.lang.Object r2, $r11;
        java.util.Iterator r3;
        long l0, $l1, $l2;
        android.os.Handler $r4, $r9;
        java.lang.Runnable $r5, $r10;
        java.util.List $r6;
        java.time.temporal.ChronoUnit $r8;
        boolean $z1, $z2, $z3, $z4;
        android.content.rollback.RollbackInfo $r14;
        int $i3;
        java.lang.String $r16;
        com.android.server.rollback.AppDataRollbackHelper $r17;
        java.lang.Throwable $r18;
        com.android.server.rollback.Rollback r20;
        java.lang.StringBuilder r22;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $r4 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Runnable mRunExpiration>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

        r1 = staticinvoke <java.time.Instant: java.time.Instant now()>();

        r19 = null;

        r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.android.server.rollback.Rollback) $r11;

        $z1 = virtualinvoke r20.<com.android.server.rollback.Rollback: boolean isAvailable()>();

        if $z1 != 0 goto label04;

     label03:
        goto label02;

     label04:
        r21 = virtualinvoke r20.<com.android.server.rollback.Rollback: java.time.Instant getTimestamp()>();

        $l2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis>;

        $r12 = virtualinvoke r21.<java.time.Instant: java.time.Instant plusMillis(long)>($l2);

        $z2 = virtualinvoke r1.<java.time.Instant: boolean isBefore(java.time.Instant)>($r12);

        if $z2 != 0 goto label06;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("runExpiration id=");

        $r14 = r20.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i3 = virtualinvoke $r14.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RollbackManager", $r16);

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        $r17 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke r20.<com.android.server.rollback.Rollback: void delete(com.android.server.rollback.AppDataRollbackHelper)>($r17);

     label05:
        r23 = r19;

        goto label09;

     label06:
        if r19 == null goto label08;

        r23 = r19;

     label07:
        $z3 = virtualinvoke r19.<java.time.Instant: boolean isAfter(java.time.Instant)>(r21);

        if $z3 == 0 goto label09;

     label08:
        r23 = r21;

     label09:
        r19 = r23;

        goto label02;

     label10:
        exitmonitor r2;

     label11:
        if r19 == null goto label12;

        $l1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis>;

        $r7 = virtualinvoke r19.<java.time.Instant: java.time.Instant plusMillis(long)>($l1);

        $r8 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MILLIS>;

        l0 = virtualinvoke r1.<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>($r7, $r8);

        $r9 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r10 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Runnable mRunExpiration>;

        virtualinvoke $r9.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r10, l0);

     label12:
        return;

     label13:
        $r18 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    static void sendFailure(android.content.Context, android.content.IntentSender, int, java.lang.String)
    {
        android.content.IntentSender r0;
        int i0;
        java.lang.String r1;
        android.content.Intent r2;
        android.content.IntentSender$SendIntentException $r5;
        android.content.Context r6;

        r6 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.IntentSender;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", r1);

     label1:
        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.rollback.extra.STATUS", i0);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.rollback.extra.STATUS_MESSAGE", r1);

        virtualinvoke r0.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>(r6, 0, r2, null, null);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch android.content.IntentSender$SendIntentException from label1 to label2 with label3;
    }

    private void snapshotUserDataInternal(java.lang.String, int[])
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int[] r1;
        boolean $z0;
        java.util.List $r2, $r17;
        java.lang.Object $r3, r16;
        com.android.server.rollback.AppDataRollbackHelper $r4;
        com.android.server.rollback.Rollback $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r10, $r12, r14;
        java.lang.Throwable $r13;
        int i1, $i2;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("snapshotUserData pkg=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" users=");

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RollbackManager", $r12);

     label1:
        r16 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r16;

        i1 = 0;

     label2:
        $r17 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i2 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i1 >= $i2 goto label4;

        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.rollback.Rollback) $r3;

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke $r5.<com.android.server.rollback.Rollback: void snapshotUserData(java.lang.String,int[],com.android.server.rollback.AppDataRollbackHelper)>(r14, r1, $r4);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        exitmonitor r16;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r16;

     label8:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void updateRollbackLifetimeDurationInMillis()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long l0, $l1, $l3, $l5;
        byte $b2;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $l1 = <com.android.server.rollback.RollbackManagerServiceImpl: long DEFAULT_ROLLBACK_LIFETIME_DURATION_MILLIS>;

        l0 = staticinvoke <android.provider.DeviceConfig: long getLong(java.lang.String,java.lang.String,long)>("rollback_boot", "rollback_lifetime_in_millis", $l1);

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis> = l0;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $l5 = <com.android.server.rollback.RollbackManagerServiceImpl: long DEFAULT_ROLLBACK_LIFETIME_DURATION_MILLIS>;

        r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis> = $l5;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRollbackLifetimeDurationInMillis=");

        $l3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: long mRollbackLifetimeDurationInMillis>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("RollbackManager", $r5);

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void runExpiration()>();

        return;
    }

    public void blockRollbackManager(long)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long l0;
        android.content.Context $r1;
        android.os.Handler $r2;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$Oa5w5_KGpmVbVAVYjUwNItCBRqg $r3;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.TEST_MANAGE_ROLLBACKS", "blockRollbackManager");

        $r2 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r3 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$Oa5w5_KGpmVbVAVYjUwNItCBRqg;

        specialinvoke $r3.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$Oa5w5_KGpmVbVAVYjUwNItCBRqg: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,long)>(r0, l0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    public void commitRollback(int, android.content.pm.ParceledListSlice, java.lang.String, android.content.IntentSender)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, i1;
        android.content.pm.ParceledListSlice r1;
        java.lang.String r2;
        android.content.IntentSender r3;
        android.content.Context $r4;
        java.lang.Object $r5;
        android.app.AppOpsManager $r6;
        android.os.Handler $r7;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$bhmKnyhoneBLazCFC2rxxtRypFI $r8;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.ParceledListSlice;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.content.IntentSender;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void enforceManageRollbacks(java.lang.String)>("commitRollback");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r6 = (android.app.AppOpsManager) $r5;

        virtualinvoke $r6.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r2);

        $r7 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r8 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$bhmKnyhoneBLazCFC2rxxtRypFI;

        specialinvoke $r8.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$bhmKnyhoneBLazCFC2rxxtRypFI: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>(r0, i0, r1, r2, r3);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r8);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.Context $r1, $r4;
        boolean $z0, $z1;
        com.android.internal.util.IndentingPrintWriter $r2;
        java.util.List $r3;
        com.android.server.PackageWatchdog $r5;
        java.lang.Object $r6, r13;
        com.android.server.rollback.Rollback $r7;
        java.lang.Throwable $r8;
        java.io.FileDescriptor r9;
        java.io.PrintWriter r10;
        java.lang.String[] r11;
        java.util.Iterator r14;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r9 := @parameter0: java.io.FileDescriptor;

        r10 := @parameter1: java.io.PrintWriter;

        r11 := @parameter2: java.lang.String[];

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r1, "RollbackManager", r10);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r10, "  ");

        r13 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r13;

     label2:
        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r14 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.rollback.Rollback) $r6;

        virtualinvoke $r7.<com.android.server.rollback.Rollback: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

     label4:
        goto label3;

     label5:
        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r5 = staticinvoke <com.android.server.PackageWatchdog: com.android.server.PackageWatchdog getInstance(android.content.Context)>($r4);

        virtualinvoke $r5.<com.android.server.PackageWatchdog: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        exitmonitor r13;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r13;

     label9:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void expireRollbackForPackage(java.lang.String)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        com.android.server.rollback.Rollback r3;
        android.content.Context $r4;
        java.util.List $r5;
        boolean $z0, $z1;
        com.android.server.rollback.AppDataRollbackHelper $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r9 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.TEST_MANAGE_ROLLBACKS", "expireRollbackForPackage");

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.rollback.Rollback) $r6;

        $z1 = virtualinvoke r3.<com.android.server.rollback.Rollback: boolean includesPackage(java.lang.String)>(r9);

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $r7 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke r3.<com.android.server.rollback.Rollback: void delete(com.android.server.rollback.AppDataRollbackHelper)>($r7);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.content.pm.ParceledListSlice getAvailableRollbacks()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.Object r1, $r4;
        java.util.List $r2, $r3;
        int $i0, i1;
        boolean $z0;
        android.content.rollback.RollbackInfo $r5;
        java.lang.Throwable $r6;
        java.util.ArrayList r7;
        com.android.server.rollback.Rollback r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void enforceManageRollbacks(java.lang.String)>("getAvailableRollbacks");

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r7 = new java.util.ArrayList;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

     label2:
        i1 = 0;

     label3:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r8 = (com.android.server.rollback.Rollback) $r4;

        $z0 = virtualinvoke r8.<com.android.server.rollback.Rollback: boolean isAvailable()>();

        if $z0 == 0 goto label4;

        $r5 = r8.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        r9 = new android.content.pm.ParceledListSlice;

        specialinvoke r9.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r7);

        exitmonitor r1;

     label6:
        return r9;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.Object r1, $r4;
        java.util.List $r2, $r3;
        int $i0, i1;
        boolean $z0;
        android.content.rollback.RollbackInfo $r5;
        java.lang.Throwable $r6;
        java.util.ArrayList r7;
        com.android.server.rollback.Rollback r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void enforceManageRollbacks(java.lang.String)>("getRecentlyCommittedRollbacks");

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r7 = new java.util.ArrayList;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

     label2:
        i1 = 0;

     label3:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r8 = (com.android.server.rollback.Rollback) $r4;

        $z0 = virtualinvoke r8.<com.android.server.rollback.Rollback: boolean isCommitted()>();

        if $z0 == 0 goto label4;

        $r5 = r8.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        r9 = new android.content.pm.ParceledListSlice;

        specialinvoke r9.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r7);

        exitmonitor r1;

     label6:
        return r9;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void lambda$blockRollbackManager$2$RollbackManagerServiceImpl(long)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        long l0;
        android.util.LongArrayQueue $r1;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.LongArrayQueue mSleepDuration>;

        virtualinvoke $r1.<android.util.LongArrayQueue: void addLast(long)>(l0);

        return;
    }

    public void lambda$commitRollback$0$RollbackManagerServiceImpl(int, android.content.pm.ParceledListSlice, java.lang.String, android.content.IntentSender)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0;
        android.content.pm.ParceledListSlice r1;
        java.lang.String r2;
        android.content.IntentSender r3;
        java.util.List $r4;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.ParceledListSlice;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.content.IntentSender;

        $r4 = virtualinvoke r1.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void commitRollbackInternal(int,java.util.List,java.lang.String,android.content.IntentSender)>(i0, $r4, r2, r3);

        return;
    }

    public void lambda$notifyStagedApkSession$9$RollbackManagerServiceImpl(int, int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object r1, $r6;
        java.util.List $r2, $r5;
        java.lang.String $r3;
        android.util.IntArray $r4;
        java.lang.Throwable $r7;
        com.android.server.rollback.Rollback r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

        i4 = 0;

     label01:
        r8 = null;

     label02:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i4 >= $i2 goto label05;

        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i4);

        r8 = (com.android.server.rollback.Rollback) $r6;

        $i3 = virtualinvoke r8.<com.android.server.rollback.Rollback: int getStagedSessionId()>();

        if $i3 != i0 goto label04;

     label03:
        goto label05;

     label04:
        i4 = i4 + 1;

        goto label01;

     label05:
        if r8 != null goto label07;

     label06:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyStagedApkSession did not find rollback for session ");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Adding orphaned apk session ");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r3);

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.IntArray mOrphanedApkSessionIds>;

        virtualinvoke $r4.<android.util.IntArray: void add(int)>(i1);

     label07:
        exitmonitor r1;

     label08:
        if r8 == null goto label09;

        virtualinvoke r8.<com.android.server.rollback.Rollback: void setApkSessionId(int)>(i1);

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void lambda$notifyStagedSession$8$RollbackManagerServiceImpl(int, java.util.concurrent.LinkedBlockingQueue)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, i1, i2, $i3, i8;
        java.lang.Integer r1, $r5;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        boolean $z0, $z3, $z4, $z6;
        android.content.rollback.RollbackInfo $r4;
        java.lang.StringBuilder $r6, $r10, $r14, $r18;
        java.lang.String $r9, $r13, $r17, $r21;
        java.lang.Throwable $r22;
        java.util.concurrent.LinkedBlockingQueue r23;
        android.content.pm.PackageInstaller r24;
        android.content.pm.PackageInstaller$SessionInfo r25, r31;
        java.lang.Object r27;
        com.android.server.rollback.Rollback r28;
        int[] r30;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        r23 := @parameter1: java.util.concurrent.LinkedBlockingQueue;

        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r24 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>();

        r25 = virtualinvoke r24.<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>(i0);

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        if r25 != null goto label01;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No matching install session for: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r21);

        virtualinvoke r23.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);

        return;

     label01:
        r27 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r27;

     label02:
        r28 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.Rollback createNewRollbackLocked(android.content.pm.PackageInstaller$SessionInfo)>(r25);

        exitmonitor r27;

     label03:
        $z0 = virtualinvoke r25.<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>();

        if $z0 != 0 goto label04;

        $z4 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean enableRollbackForPackageSession(com.android.server.rollback.Rollback,android.content.pm.PackageInstaller$SessionInfo)>(r28, r25);

        if $z4 != 0 goto label08;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to enable rollback for session: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r17);

        goto label08;

     label04:
        r30 = virtualinvoke r25.<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>();

        i1 = lengthof r30;

        i8 = 0;

     label05:
        if i8 >= i1 goto label08;

        i2 = r30[i8];

        r31 = virtualinvoke r24.<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>(i2);

        if r31 != null goto label06;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No matching child install session for: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r13);

        goto label08;

     label06:
        $z3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean enableRollbackForPackageSession(com.android.server.rollback.Rollback,android.content.pm.PackageInstaller$SessionInfo)>(r28, r31);

        if $z3 != 0 goto label07;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to enable rollback for session: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", $r9);

        goto label08;

     label07:
        i8 = i8 + 1;

        goto label05;

     label08:
        $z6 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: boolean completeEnableRollback(com.android.server.rollback.Rollback)>(r28);

        if $z6 != 0 goto label09;

        virtualinvoke r23.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>(r1);

        goto label10;

     label09:
        $r4 = r28.<com.android.server.rollback.Rollback: android.content.rollback.RollbackInfo info>;

        $i3 = virtualinvoke $r4.<android.content.rollback.RollbackInfo: int getRollbackId()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r23.<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>($r5);

     label10:
        return;

     label11:
        $r22 := @caughtexception;

     label12:
        exitmonitor r27;

     label13:
        throw $r22;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void lambda$onBootCompleted$5$RollbackManagerServiceImpl(android.provider.DeviceConfig$Properties)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.provider.DeviceConfig$Properties r1;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: android.provider.DeviceConfig$Properties;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void updateRollbackLifetimeDurationInMillis()>();

        return;
    }

    public void lambda$onBootCompleted$6$RollbackManagerServiceImpl()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.util.Iterator r3, r28, r29, r30;
        com.android.server.rollback.Rollback r4, $r15, $r17;
        android.content.pm.PackageInstaller$SessionInfo r5;
        java.util.ArrayList $r6, $r7;
        java.util.HashSet $r8;
        java.util.List $r9, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z11;
        android.util.IntArray $r10;
        com.android.server.rollback.RollbackPackageHealthObserver $r11;
        java.lang.Object $r12, $r14, $r16, $r18, r26, r31;
        java.lang.String $r13;
        android.content.Context $r19;
        android.content.pm.PackageManager $r20;
        android.content.pm.PackageInstaller $r21;
        int $i0;
        com.android.server.rollback.AppDataRollbackHelper $r22;
        java.lang.Throwable $r23, $r24;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void updateRollbackLifetimeDurationInMillis()>();

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void runExpiration()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r26 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r26;

     label01:
        $r9 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z11 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label15;

        $r18 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.rollback.Rollback) $r18;

        $z3 = virtualinvoke r4.<com.android.server.rollback.Rollback: boolean isStaged()>();

        if $z3 != 0 goto label04;

     label03:
        goto label02;

     label04:
        $r19 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        $r20 = virtualinvoke $r19.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r21 = virtualinvoke $r20.<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>();

        $i0 = virtualinvoke r4.<com.android.server.rollback.Rollback: int getStagedSessionId()>();

        r5 = virtualinvoke $r21.<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>($i0);

     label05:
        if r5 == null goto label13;

     label06:
        $z4 = virtualinvoke r5.<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()>();

        if $z4 == 0 goto label08;

     label07:
        goto label13;

     label08:
        $z5 = virtualinvoke r5.<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()>();

        if $z5 == 0 goto label11;

        $z7 = virtualinvoke r4.<com.android.server.rollback.Rollback: boolean isEnabling()>();

        if $z7 == 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r4);

     label09:
        goto label11;

     label10:
        $z8 = virtualinvoke r4.<com.android.server.rollback.Rollback: boolean isRestoreUserDataInProgress()>();

        if $z8 == 0 goto label11;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

     label11:
        $r27 = virtualinvoke r4.<com.android.server.rollback.Rollback: java.util.List getApexPackageNames()>();

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r27);

     label12:
        goto label02;

     label13:
        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        $r22 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke r4.<com.android.server.rollback.Rollback: void delete(com.android.server.rollback.AppDataRollbackHelper)>($r22);

     label14:
        goto label02;

     label15:
        exitmonitor r26;

     label16:
        r28 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r16 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (com.android.server.rollback.Rollback) $r16;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void makeRollbackAvailable(com.android.server.rollback.Rollback)>($r17);

        goto label17;

     label18:
        r29 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r14 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.android.server.rollback.Rollback) $r14;

        virtualinvoke $r15.<com.android.server.rollback.Rollback: void setRestoreUserDataInProgress(boolean)>(0);

        goto label19;

     label20:
        r30 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z2 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label22;

        $r12 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.String) $r12;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void onPackageReplaced(java.lang.String)>($r13);

        goto label21;

     label22:
        r31 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r31;

     label23:
        $r10 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.util.IntArray mOrphanedApkSessionIds>;

        virtualinvoke $r10.<android.util.IntArray: void clear()>();

        exitmonitor r31;

     label24:
        $r11 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackPackageHealthObserver mPackageHealthObserver>;

        virtualinvoke $r11.<com.android.server.rollback.RollbackPackageHealthObserver: void onBootCompletedAsync()>();

        return;

     label25:
        $r23 := @caughtexception;

     label26:
        exitmonitor r31;

     label27:
        throw $r23;

     label28:
        $r24 := @caughtexception;

     label29:
        exitmonitor r26;

     label30:
        throw $r24;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label02 to label03 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public void lambda$onUnlockUser$4$RollbackManagerServiceImpl(int, java.util.concurrent.CountDownLatch)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r4;
        java.util.ArrayList r2;
        java.util.List $r3;
        com.android.server.rollback.AppDataRollbackHelper $r5;
        com.android.server.rollback.Rollback $r6;
        java.lang.Throwable $r7;
        java.util.concurrent.CountDownLatch r8;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        r8 := @parameter1: java.util.concurrent.CountDownLatch;

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new java.util.ArrayList;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        exitmonitor r1;

     label2:
        i2 = 0;

     label3:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if i2 >= $i1 goto label4;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (com.android.server.rollback.Rollback) $r4;

        $r5 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.AppDataRollbackHelper mAppDataRollbackHelper>;

        virtualinvoke $r6.<com.android.server.rollback.Rollback: void commitPendingBackupAndRestoreForUser(int,com.android.server.rollback.AppDataRollbackHelper)>(i0, $r5);

        i2 = i2 + 1;

        goto label3;

     label4:
        virtualinvoke r8.<java.util.concurrent.CountDownLatch: void countDown()>();

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void destroyCeSnapshotsForExpiredRollbacks(int)>(i0);

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void lambda$reloadPersistedData$1$RollbackManagerServiceImpl(java.util.concurrent.CountDownLatch)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.Object r1;
        java.util.List $r2, $r4, $r5;
        com.android.server.rollback.RollbackStore $r3;
        java.lang.Throwable $r6;
        java.util.concurrent.CountDownLatch r7;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r7 := @parameter0: java.util.concurrent.CountDownLatch;

        r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r4 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.List mRollbacks>;

        $r3 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.RollbackStore mRollbackStore>;

        $r5 = virtualinvoke $r3.<com.android.server.rollback.RollbackStore: java.util.List loadRollbacks()>();

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        exitmonitor r1;

     label2:
        virtualinvoke r7.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$snapshotAndRestoreUserData$7$RollbackManagerServiceImpl(java.lang.String, int[], int, java.lang.String, int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1, r3;
        int[] r2;
        int i0, i1;
        java.lang.Object $r4;
        android.content.pm.PackageManagerInternal $r5;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void snapshotUserDataInternal(java.lang.String,int[])>(r1, r2);

        specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: void restoreUserDataInternal(java.lang.String,int[],int,java.lang.String)>(r1, r2, i0, r3);

        if i1 <= 0 goto label1;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r5 = (android.content.pm.PackageManagerInternal) $r4;

        virtualinvoke $r5.<android.content.pm.PackageManagerInternal: void finishPackageInstall(int,boolean)>(i1, 0);

     label1:
        return;
    }

    public void notifyStagedApkSession(int, int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0, i1, $i2;
        java.lang.SecurityException $r1;
        android.os.Handler $r2;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$dvtbDBER69x5DgQh73U5EpSi4qk $r3;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 != 1000 goto label1;

        $r2 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r3 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$dvtbDBER69x5DgQh73U5EpSi4qk;

        specialinvoke $r3.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$dvtbDBER69x5DgQh73U5EpSi4qk: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,int,int)>(r0, i0, i1);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("notifyStagedApkSession may only be called by the system.");

        throw $r1;
    }

    public int notifyStagedSession(int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int $i0, i2, i3;
        java.lang.SecurityException $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        android.os.Handler $r3;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$nKgo614yKB7ibKKY1a7J5CTtlEU $r4;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i2 := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label4;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r4 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$nKgo614yKB7ibKKY1a7J5CTtlEU;

        specialinvoke $r4.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$nKgo614yKB7ibKKY1a7J5CTtlEU: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,int,java.util.concurrent.LinkedBlockingQueue)>(r0, i2, $r2);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

     label1:
        $r5 = virtualinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>();

        $r6 = (java.lang.Integer) $r5;

        i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label2:
        return i3;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("RollbackManager", "Interrupted while waiting for notifyStagedSession response");

        return -1;

     label4:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("notifyStagedSession may only be called by the system.");

        throw $r1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    void onBootCompleted()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$UZ6heBvW792l5X1X86VJbao61T4 $r1;
        java.util.concurrent.Executor $r2;
        android.os.Handler $r3;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$5VimxC3UlEV_IzyoBdYlrATzYd8 $r4;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $r2 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: java.util.concurrent.Executor mExecutor>;

        $r1 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$UZ6heBvW792l5X1X86VJbao61T4;

        specialinvoke $r1.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$UZ6heBvW792l5X1X86VJbao61T4: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        staticinvoke <android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>("rollback_boot", $r2, $r1);

        $r3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r4 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$5VimxC3UlEV_IzyoBdYlrATzYd8;

        specialinvoke $r4.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$5VimxC3UlEV_IzyoBdYlrATzYd8: void <init>(com.android.server.rollback.RollbackManagerServiceImpl)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    void onUnlockUser(int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        int i0;
        boolean $z0;
        java.util.concurrent.CountDownLatch $r1;
        android.os.Handler $r2;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$Be1hJgd8PbSLFX_uKif2yCGhtKo $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        i0 := @parameter0: int;

        $z0 = <com.android.server.rollback.RollbackManagerServiceImpl: boolean LOCAL_LOGV>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUnlockUser id=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("RollbackManager", $r7);

     label1:
        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r2 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r3 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$Be1hJgd8PbSLFX_uKif2yCGhtKo;

        specialinvoke $r3.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$Be1hJgd8PbSLFX_uKif2yCGhtKo: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,int,java.util.concurrent.CountDownLatch)>(r0, i0, $r1);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

     label2:
        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void await()>();

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RollbackManagerHandlerThread interrupted");

        throw $r9;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public void reloadPersistedData()
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        android.content.Context $r1;
        java.util.concurrent.CountDownLatch $r2;
        android.os.Handler $r3;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$K_I_qP9ed2R4xbW7mnGjXH6B7Yc $r4;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        $r1 = r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.TEST_MANAGE_ROLLBACKS", "reloadPersistedData");

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r3 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r4 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$K_I_qP9ed2R4xbW7mnGjXH6B7Yc;

        specialinvoke $r4.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$K_I_qP9ed2R4xbW7mnGjXH6B7Yc: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,java.util.concurrent.CountDownLatch)>(r0, $r2);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

     label1:
        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RollbackManagerHandlerThread interrupted");

        throw $r6;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void snapshotAndRestoreUserData(java.lang.String, int[], int, long, java.lang.String, int)
    {
        com.android.server.rollback.RollbackManagerServiceImpl r0;
        java.lang.String r1, r3;
        int[] r2;
        int i0, i2, $i3;
        long l1;
        java.lang.SecurityException $r4;
        android.os.Handler $r5;
        com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$8P8gySPy0dcZ7pWpZaoseQ0VuIo $r6;

        r0 := @this: com.android.server.rollback.RollbackManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        r3 := @parameter4: java.lang.String;

        i2 := @parameter5: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 != 1000 goto label1;

        $r5 = specialinvoke r0.<com.android.server.rollback.RollbackManagerServiceImpl: android.os.Handler getHandler()>();

        $r6 = new com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$8P8gySPy0dcZ7pWpZaoseQ0VuIo;

        specialinvoke $r6.<com.android.server.rollback._$$Lambda$RollbackManagerServiceImpl$8P8gySPy0dcZ7pWpZaoseQ0VuIo: void <init>(com.android.server.rollback.RollbackManagerServiceImpl,java.lang.String,int[],int,java.lang.String,int)>(r0, r1, r2, i0, r3, i2);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;

     label1:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("snapshotAndRestoreUserData may only be called by the system.");

        throw $r4;
    }
}
