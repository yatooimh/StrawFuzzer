class com.android.server.signedconfig.GlobalSettingsConfigApplicator extends java.lang.Object
{
    private static final java.util.Set ALLOWED_KEYS;
    private static final java.util.Map HIDDEN_API_POLICY_KEY_MAP;
    private static final java.util.Map KEY_VALUE_MAPPERS;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final com.android.server.signedconfig.SignedConfigEvent mEvent;
    private final java.lang.String mSourcePackage;
    private final com.android.server.signedconfig.SignatureVerifier mVerifier;

    static void <clinit>()
    {
        java.util.Map r0, $r11;
        android.util.ArraySet $r1;
        java.lang.String[] $r2;
        java.util.List $r3;
        java.util.Set $r4;
        java.lang.Object[] $r5, $r10;
        java.lang.String $r6, $r7, $r8, $r9;

        <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.lang.String TAG> = "SignedConfig";

        $r1 = new android.util.ArraySet;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "hidden_api_policy";

        $r2[1] = "hidden_api_blacklist_exemptions";

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<android.util.ArraySet: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Set ALLOWED_KEYS> = $r4;

        $r5 = newarray (java.lang.Object)[8];

        $r5[0] = "DEFAULT";

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(-1);

        $r5[1] = $r6;

        $r5[2] = "DISABLED";

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(0);

        $r5[3] = $r7;

        $r5[4] = "JUST_WARN";

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        $r5[5] = $r8;

        $r5[6] = "ENABLED";

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(2);

        $r5[7] = $r9;

        r0 = staticinvoke <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Map makeMap(java.lang.Object[])>($r5);

        <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Map HIDDEN_API_POLICY_KEY_MAP> = r0;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "hidden_api_policy";

        $r10[1] = r0;

        $r11 = staticinvoke <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Map makeMap(java.lang.Object[])>($r10);

        <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Map KEY_VALUE_MAPPERS> = $r11;

        return;
    }

    void <init>(android.content.Context, java.lang.String, com.android.server.signedconfig.SignedConfigEvent)
    {
        com.android.server.signedconfig.GlobalSettingsConfigApplicator r0;
        android.content.Context r1;
        java.lang.String r2;
        com.android.server.signedconfig.SignedConfigEvent r3;
        com.android.server.signedconfig.SignatureVerifier $r4;

        r0 := @this: com.android.server.signedconfig.GlobalSettingsConfigApplicator;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.server.signedconfig.SignedConfigEvent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: android.content.Context mContext> = r1;

        r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.lang.String mSourcePackage> = r2;

        r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent> = r3;

        $r4 = new com.android.server.signedconfig.SignatureVerifier;

        specialinvoke $r4.<com.android.server.signedconfig.SignatureVerifier: void <init>(com.android.server.signedconfig.SignedConfigEvent)>(r3);

        r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignatureVerifier mVerifier> = $r4;

        return;
    }

    private boolean checkSignature(java.lang.String, java.lang.String)
    {
        com.android.server.signedconfig.GlobalSettingsConfigApplicator r0;
        java.lang.String r1, r5;
        boolean z0;
        com.android.server.signedconfig.SignatureVerifier $r2;
        java.lang.Throwable $r3;
        com.android.server.signedconfig.SignedConfigEvent $r4;

        r0 := @this: com.android.server.signedconfig.GlobalSettingsConfigApplicator;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignatureVerifier mVerifier>;

        z0 = virtualinvoke $r2.<com.android.server.signedconfig.SignatureVerifier: boolean verifySignature(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SignedConfig", "Failed to verify signature", $r3);

        $r4 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r4.<com.android.server.signedconfig.SignedConfigEvent: int status> = 4;

        return 0;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    private int getCurrentConfigVersion()
    {
        com.android.server.signedconfig.GlobalSettingsConfigApplicator r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.signedconfig.GlobalSettingsConfigApplicator;

        $r1 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "signed_config_version", 0);

        return $i0;
    }

    private static transient java.util.Map makeMap(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.IllegalArgumentException $r2;
        android.util.ArrayMap $r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r6;

        r0 := @parameter0: java.lang.Object[];

        $i1 = lengthof r0;

        $i2 = $i1 % 2;

        if $i2 != 0 goto label3;

        $i3 = lengthof r0;

        i0 = $i3 / 2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>(int)>(i0);

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $i4 = i7 * 2;

        $r6 = r0[$i4];

        $i5 = i7 * 2;

        $i6 = $i5 + 1;

        $r5 = r0[$i6];

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        return $r4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    private void updateCurrentConfig(int, java.util.Map)
    {
        com.android.server.signedconfig.GlobalSettingsConfigApplicator r0;
        int i0;
        java.util.Iterator r1;
        java.util.Set $r2;
        boolean $z0;
        android.content.Context $r3, $r6;
        android.content.ContentResolver $r4, $r7;
        java.lang.Object $r5, $r8, $r10;
        java.lang.String $r9, $r11;
        java.util.Map r12;
        java.util.Map$Entry r13;

        r0 := @this: com.android.server.signedconfig.GlobalSettingsConfigApplicator;

        i0 := @parameter0: int;

        r12 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r12.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r5;

        $r6 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r7, $r9, $r11);

        goto label1;

     label2:
        $r3 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r4, "signed_config_version", i0);

        return;
    }

    void applyConfig(java.lang.String, java.lang.String)
    {
        com.android.server.signedconfig.GlobalSettingsConfigApplicator r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i8, $i10;
        com.android.server.signedconfig.SignedConfig$PerSdkConfig r1;
        boolean $z0;
        java.util.Map $r2, $r18;
        java.util.Set $r3;
        com.android.server.signedconfig.SignedConfigEvent $r4, $r19, $r20, $r30, $r43;
        java.lang.StringBuilder $r5, $r14, $r21, $r31, $r38;
        java.lang.String $r7, $r13, $r17, $r23, $r29, $r33, $r36, $r40, $r42, r44, r45;
        com.android.server.signedconfig.InvalidConfigException $r37;
        com.android.server.signedconfig.SignedConfig r47;

        r0 := @this: com.android.server.signedconfig.GlobalSettingsConfigApplicator;

        r44 := @parameter0: java.lang.String;

        r45 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: boolean checkSignature(java.lang.String,java.lang.String)>(r44, r45);

        if $z0 != 0 goto label1;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature check on global settings in package ");

        $r33 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.lang.String mSourcePackage>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed; ignoring");

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SignedConfig", $r36);

        return;

     label1:
        $r3 = <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Set ALLOWED_KEYS>;

        $r2 = <com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Map KEY_VALUE_MAPPERS>;

        r47 = staticinvoke <com.android.server.signedconfig.SignedConfig: com.android.server.signedconfig.SignedConfig parse(java.lang.String,java.util.Set,java.util.Map)>(r44, $r3, $r2);

        $r4 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $i1 = r47.<com.android.server.signedconfig.SignedConfig: int version>;

        $r4.<com.android.server.signedconfig.SignedConfigEvent: int version> = $i1;

     label2:
        i0 = specialinvoke r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: int getCurrentConfigVersion()>();

        $i2 = r47.<com.android.server.signedconfig.SignedConfig: int version>;

        if i0 < $i2 goto label3;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Global settings from package ");

        $r23 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.lang.String mSourcePackage>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than existing: ");

        $i10 = r47.<com.android.server.signedconfig.SignedConfig: int version>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<=");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SignedConfig", $r29);

        $r30 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r30.<com.android.server.signedconfig.SignedConfigEvent: int status> = 6;

        return;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got new global settings from package ");

        $r7 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.lang.String mSourcePackage>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": version ");

        $i3 = r47.<com.android.server.signedconfig.SignedConfig: int version>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" replacing existing version ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SignedConfig", $r13);

        $i5 = <android.os.Build$VERSION: int SDK_INT>;

        r1 = virtualinvoke r47.<com.android.server.signedconfig.SignedConfig: com.android.server.signedconfig.SignedConfig$PerSdkConfig getMatchingConfig(int)>($i5);

        if r1 != null goto label4;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SignedConfig", "Settings is not applicable to current SDK version; ignoring");

        $r20 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r20.<com.android.server.signedconfig.SignedConfigEvent: int status> = 8;

        return;

     label4:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating global settings to version ");

        $i6 = r47.<com.android.server.signedconfig.SignedConfig: int version>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SignedConfig", $r17);

        $i8 = r47.<com.android.server.signedconfig.SignedConfig: int version>;

        $r18 = r1.<com.android.server.signedconfig.SignedConfig$PerSdkConfig: java.util.Map values>;

        specialinvoke r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: void updateCurrentConfig(int,java.util.Map)>($i8, $r18);

        $r19 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r19.<com.android.server.signedconfig.SignedConfigEvent: int status> = 1;

        return;

     label5:
        $r37 := @caughtexception;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse global settings from package ");

        $r40 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.lang.String mSourcePackage>;

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SignedConfig", $r42, $r37);

        $r43 = r0.<com.android.server.signedconfig.GlobalSettingsConfigApplicator: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r43.<com.android.server.signedconfig.SignedConfigEvent: int status> = 5;

        return;

        catch com.android.server.signedconfig.InvalidConfigException from label1 to label2 with label5;
    }
}
