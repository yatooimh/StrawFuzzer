public class com.android.server.signedconfig.SignatureVerifier extends java.lang.Object
{
    private static final boolean DBG;
    private static final java.lang.String DEBUG_KEY;
    private static final java.lang.String PROD_KEY;
    private static final java.lang.String TAG;
    private final java.security.PublicKey mDebugKey;
    private final com.android.server.signedconfig.SignedConfigEvent mEvent;
    private final java.security.PublicKey mProdKey;

    public void <init>(com.android.server.signedconfig.SignedConfigEvent)
    {
        com.android.server.signedconfig.SignatureVerifier r0;
        boolean $z0;
        java.security.PublicKey $r1, r3;
        com.android.server.signedconfig.SignedConfigEvent r2;

        r0 := @this: com.android.server.signedconfig.SignatureVerifier;

        r2 := @parameter0: com.android.server.signedconfig.SignedConfigEvent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.signedconfig.SignatureVerifier: com.android.server.signedconfig.SignedConfigEvent mEvent> = r2;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        r3 = staticinvoke <com.android.server.signedconfig.SignatureVerifier: java.security.PublicKey createKey(java.lang.String)>("MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmJKs4lSn+XRhMQmMid+Zbhbu13YrU1haIhVC5296InRu1x7A8PV1ejQyisBODGgRY6pqkAHRncBCYcgg5wIIJg==");

        goto label2;

     label1:
        r3 = null;

     label2:
        r0.<com.android.server.signedconfig.SignatureVerifier: java.security.PublicKey mDebugKey> = r3;

        $r1 = staticinvoke <com.android.server.signedconfig.SignatureVerifier: java.security.PublicKey createKey(java.lang.String)>("MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+lky6wKyGL6lE1VrD0YTMHwb0Xwc+tzC8MvnrzVxodvTpVY/jV7V+Zktcx+pry43XPABFRXtbhTo+qykhyBA1g==");

        r0.<com.android.server.signedconfig.SignatureVerifier: java.security.PublicKey mProdKey> = $r1;

        return;
    }

    private static java.security.PublicKey createKey(java.lang.String)
    {
        java.security.spec.X509EncodedKeySpec $r0;
        java.util.Base64$Decoder $r1;
        byte[] $r2;
        java.security.KeyFactory $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.String r6;
        java.security.PublicKey r8;

        r6 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.security.spec.X509EncodedKeySpec;

        $r1 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();

        $r2 = virtualinvoke $r1.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r6);

        specialinvoke $r0.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2);

     label2:
        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("EC");

        r8 = virtualinvoke $r3.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r0);

     label3:
        return r8;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SignedConfig", "Failed to construct public key", $r4);

        return null;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SignedConfig", "Failed to base64 decode public key", $r5);

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
        catch java.security.spec.InvalidKeySpecException from label2 to label3 with label4;
    }

    private boolean verifyWithPublicKey(java.security.PublicKey, byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.SignatureException
    {
        com.android.server.signedconfig.SignatureVerifier r0;
        java.security.PublicKey r1;
        byte[] r2, r3;
        java.security.Signature r4;
        boolean $z0;

        r0 := @this: com.android.server.signedconfig.SignatureVerifier;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA256withECDSA");

        virtualinvoke r4.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        virtualinvoke r4.<java.security.Signature: void update(byte[])>(r2);

        $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>(r3);

        return $z0;
    }

    public boolean verifySignature(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.SignatureException
    {
        com.android.server.signedconfig.SignatureVerifier r0;
        java.util.Base64$Decoder $r1;
        java.nio.charset.Charset $r2;
        boolean $z0, $z1, $z2;
        com.android.server.signedconfig.SignedConfigEvent $r3, $r4, $r5, $r6, $r8;
        java.lang.Throwable $r7;
        java.lang.String r9, r10;
        byte[] r11, r12;
        java.security.PublicKey r13, r14;

        r0 := @this: com.android.server.signedconfig.SignatureVerifier;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

     label1:
        $r1 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();

        r11 = virtualinvoke $r1.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r10);

     label2:
        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r12 = virtualinvoke r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label4;

        r13 = r0.<com.android.server.signedconfig.SignatureVerifier: java.security.PublicKey mDebugKey>;

        if r13 == null goto label3;

        $z2 = specialinvoke r0.<com.android.server.signedconfig.SignatureVerifier: boolean verifyWithPublicKey(java.security.PublicKey,byte[],byte[])>(r13, r12, r11);

        if $z2 == 0 goto label4;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SignedConfig", "Verified config using debug key");

        $r6 = r0.<com.android.server.signedconfig.SignatureVerifier: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r6.<com.android.server.signedconfig.SignedConfigEvent: int verifiedWith> = 1;

        return 1;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SignedConfig", "Debuggable build, but have no debug key");

     label4:
        r14 = r0.<com.android.server.signedconfig.SignatureVerifier: java.security.PublicKey mProdKey>;

        if r14 != null goto label5;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SignedConfig", "No prod key; construction failed?");

        $r5 = r0.<com.android.server.signedconfig.SignatureVerifier: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r5.<com.android.server.signedconfig.SignedConfigEvent: int status> = 9;

        return 0;

     label5:
        $z1 = specialinvoke r0.<com.android.server.signedconfig.SignatureVerifier: boolean verifyWithPublicKey(java.security.PublicKey,byte[],byte[])>(r14, r12, r11);

        if $z1 == 0 goto label6;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SignedConfig", "Verified config using production key");

        $r4 = r0.<com.android.server.signedconfig.SignatureVerifier: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r4.<com.android.server.signedconfig.SignedConfigEvent: int verifiedWith> = 2;

        return 1;

     label6:
        $r3 = r0.<com.android.server.signedconfig.SignatureVerifier: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r3.<com.android.server.signedconfig.SignedConfigEvent: int status> = 7;

        return 0;

     label7:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.signedconfig.SignatureVerifier: com.android.server.signedconfig.SignedConfigEvent mEvent>;

        $r8.<com.android.server.signedconfig.SignedConfigEvent: int status> = 3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SignedConfig", "Failed to base64 decode signature");

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.signedconfig.SignatureVerifier: java.lang.String TAG> = "SignedConfig";

        <com.android.server.signedconfig.SignatureVerifier: java.lang.String PROD_KEY> = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE+lky6wKyGL6lE1VrD0YTMHwb0Xwc+tzC8MvnrzVxodvTpVY/jV7V+Zktcx+pry43XPABFRXtbhTo+qykhyBA1g==";

        <com.android.server.signedconfig.SignatureVerifier: java.lang.String DEBUG_KEY> = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmJKs4lSn+XRhMQmMid+Zbhbu13YrU1haIhVC5296InRu1x7A8PV1ejQyisBODGgRY6pqkAHRncBCYcgg5wIIJg==";

        <com.android.server.signedconfig.SignatureVerifier: boolean DBG> = 0;

        return;
    }
}
