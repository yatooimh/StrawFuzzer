public class com.android.server.signedconfig.SignedConfig extends java.lang.Object
{
    private static final java.lang.String CONFIG_KEY_MAX_SDK;
    private static final java.lang.String CONFIG_KEY_MIN_SDK;
    private static final java.lang.String CONFIG_KEY_VALUES;
    private static final java.lang.String KEY_CONFIG;
    private static final java.lang.String KEY_VERSION;
    public final java.util.List perSdkConfig;
    public final int version;

    public void <init>(int, java.util.List)
    {
        com.android.server.signedconfig.SignedConfig r0;
        int i0;
        java.util.List r1, $r2;

        r0 := @this: com.android.server.signedconfig.SignedConfig;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.signedconfig.SignedConfig: int version> = i0;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        r0.<com.android.server.signedconfig.SignedConfig: java.util.List perSdkConfig> = $r2;

        return;
    }

    public static com.android.server.signedconfig.SignedConfig parse(java.lang.String, java.util.Set, java.util.Map) throws com.android.server.signedconfig.InvalidConfigException
    {
        java.util.Set r0;
        java.util.Map r1;
        int i0, $i1, i2;
        org.json.JSONObject $r3, r13;
        com.android.server.signedconfig.SignedConfig$PerSdkConfig $r4;
        java.lang.Throwable $r5;
        java.lang.String r7;
        org.json.JSONArray r9;
        java.util.ArrayList r14;
        com.android.server.signedconfig.SignedConfig r15;
        com.android.server.signedconfig.InvalidConfigException r16;
        java.lang.Exception r17;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: java.util.Set;

        r1 := @parameter2: java.util.Map;

     label1:
        r13 = new org.json.JSONObject;

        specialinvoke r13.<org.json.JSONObject: void <init>(java.lang.String)>(r7);

        i0 = virtualinvoke r13.<org.json.JSONObject: int getInt(java.lang.String)>("version");

        r9 = virtualinvoke r13.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("config");

        r14 = new java.util.ArrayList;

        specialinvoke r14.<java.util.ArrayList: void <init>()>();

     label2:
        i2 = 0;

     label3:
        $i1 = virtualinvoke r9.<org.json.JSONArray: int length()>();

        if i2 >= $i1 goto label5;

        $r3 = virtualinvoke r9.<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>(i2);

        $r4 = staticinvoke <com.android.server.signedconfig.SignedConfig: com.android.server.signedconfig.SignedConfig$PerSdkConfig parsePerSdkConfig(org.json.JSONObject,java.util.Set,java.util.Map)>($r3, r0, r1);

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        r15 = new com.android.server.signedconfig.SignedConfig;

        specialinvoke r15.<com.android.server.signedconfig.SignedConfig: void <init>(int,java.util.List)>(i0, r14);

     label6:
        return r15;

     label7:
        $r5 := @caughtexception;

        r16 = new com.android.server.signedconfig.InvalidConfigException;

        r17 = (java.lang.Exception) $r5;

        specialinvoke r16.<com.android.server.signedconfig.InvalidConfigException: void <init>(java.lang.String,java.lang.Exception)>("Could not parse JSON", r17);

        throw r16;

        catch org.json.JSONException from label1 to label2 with label7;
        catch org.json.JSONException from label3 to label4 with label7;
        catch org.json.JSONException from label5 to label6 with label7;
    }

    static com.android.server.signedconfig.SignedConfig$PerSdkConfig parsePerSdkConfig(org.json.JSONObject, java.util.Set, java.util.Map) throws org.json.JSONException, com.android.server.signedconfig.InvalidConfigException
    {
        java.util.Map r0, r32;
        int i0, i1;
        org.json.JSONObject r1, r27;
        java.util.Iterator r3;
        java.lang.String r4, $r15, $r25, r30, r31;
        java.util.HashMap $r5;
        java.util.Set $r6, r28;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.signedconfig.SignedConfig$PerSdkConfig $r7;
        java.lang.Object $r8, $r9, $r17, $r26, r29;
        java.lang.StringBuilder $r10, $r18;
        com.android.server.signedconfig.InvalidConfigException $r14, $r24;
        java.lang.CharSequence $r22;

        r27 := @parameter0: org.json.JSONObject;

        r28 := @parameter1: java.util.Set;

        r0 := @parameter2: java.util.Map;

        i0 = virtualinvoke r27.<org.json.JSONObject: int getInt(java.lang.String)>("min_sdk");

        i1 = virtualinvoke r27.<org.json.JSONObject: int getInt(java.lang.String)>("max_sdk");

        r1 = virtualinvoke r27.<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>("values");

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = virtualinvoke r1.<org.json.JSONObject: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        r29 = virtualinvoke r1.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r4);

        $r9 = <org.json.JSONObject: java.lang.Object NULL>;

        if r29 == $r9 goto label3;

        if r29 != null goto label2;

        goto label3;

     label2:
        r30 = virtualinvoke r29.<java.lang.Object: java.lang.String toString()>();

        goto label4;

     label3:
        r30 = null;

     label4:
        $z3 = interfaceinvoke r28.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z3 == 0 goto label7;

        r31 = r30;

        $z1 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label6;

        $r17 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r32 = (java.util.Map) $r17;

        $z2 = interfaceinvoke r32.<java.util.Map: boolean containsKey(java.lang.Object)>(r30);

        if $z2 == 0 goto label5;

        $r26 = interfaceinvoke r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r30);

        r31 = (java.lang.String) $r26;

        goto label6;

     label5:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config key ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains unsupported value ");

        $r22 = staticinvoke <com.android.server.signedconfig.SignedConfig: java.lang.CharSequence quoted(java.lang.Object)>(r30);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = new com.android.server.signedconfig.InvalidConfigException;

        $r25 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<com.android.server.signedconfig.InvalidConfigException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label6:
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r31);

        goto label1;

     label7:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config key ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed");

        $r14 = new com.android.server.signedconfig.InvalidConfigException;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.android.server.signedconfig.InvalidConfigException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label8:
        $r7 = new com.android.server.signedconfig.SignedConfig$PerSdkConfig;

        specialinvoke $r7.<com.android.server.signedconfig.SignedConfig$PerSdkConfig: void <init>(int,int,java.util.Map)>(i0, i1, $r5);

        return $r7;
    }

    private static java.lang.CharSequence quoted(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public com.android.server.signedconfig.SignedConfig$PerSdkConfig getMatchingConfig(int)
    {
        com.android.server.signedconfig.SignedConfig r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        com.android.server.signedconfig.SignedConfig$PerSdkConfig r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.server.signedconfig.SignedConfig;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.signedconfig.SignedConfig: java.util.List perSdkConfig>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.signedconfig.SignedConfig$PerSdkConfig) $r4;

        $i1 = r2.<com.android.server.signedconfig.SignedConfig$PerSdkConfig: int minSdk>;

        if $i1 > i0 goto label2;

        $i2 = r2.<com.android.server.signedconfig.SignedConfig$PerSdkConfig: int maxSdk>;

        if i0 > $i2 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static void <clinit>()
    {
        <com.android.server.signedconfig.SignedConfig: java.lang.String KEY_VERSION> = "version";

        <com.android.server.signedconfig.SignedConfig: java.lang.String KEY_CONFIG> = "config";

        <com.android.server.signedconfig.SignedConfig: java.lang.String CONFIG_KEY_VALUES> = "values";

        <com.android.server.signedconfig.SignedConfig: java.lang.String CONFIG_KEY_MIN_SDK> = "min_sdk";

        <com.android.server.signedconfig.SignedConfig: java.lang.String CONFIG_KEY_MAX_SDK> = "max_sdk";

        return;
    }
}
