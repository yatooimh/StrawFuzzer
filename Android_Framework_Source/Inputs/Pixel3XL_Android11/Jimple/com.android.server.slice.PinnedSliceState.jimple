public class com.android.server.slice.PinnedSliceState extends java.lang.Object
{
    private static final long SLICE_TIMEOUT;
    private static final java.lang.String TAG;
    private final android.os.IBinder$DeathRecipient mDeathRecipient;
    private final android.util.ArrayMap mListeners;
    private final java.lang.Object mLock;
    private final android.util.ArraySet mPinnedPkgs;
    private final java.lang.String mPkg;
    private final com.android.server.slice.SliceManagerService mService;
    private boolean mSlicePinned;
    private android.app.slice.SliceSpec[] mSupportedSpecs;
    private final android.net.Uri mUri;

    public void <init>(com.android.server.slice.SliceManagerService, android.net.Uri, java.lang.String)
    {
        com.android.server.slice.PinnedSliceState r0;
        com.android.server.slice.SliceManagerService r1;
        android.net.Uri r2;
        java.lang.String r3;
        android.util.ArraySet $r4;
        android.util.ArrayMap $r5;
        com.android.server.slice._$$Lambda$PinnedSliceState$KzxFkvfomRuMb5PD8_pIHDIhUUE $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r1 := @parameter0: com.android.server.slice.SliceManagerService;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.slice.PinnedSliceState: android.util.ArraySet mPinnedPkgs> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners> = $r5;

        r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] mSupportedSpecs> = null;

        $r6 = new com.android.server.slice._$$Lambda$PinnedSliceState$KzxFkvfomRuMb5PD8_pIHDIhUUE;

        specialinvoke $r6.<com.android.server.slice._$$Lambda$PinnedSliceState$KzxFkvfomRuMb5PD8_pIHDIhUUE: void <init>(com.android.server.slice.PinnedSliceState)>(r0);

        r0.<com.android.server.slice.PinnedSliceState: android.os.IBinder$DeathRecipient mDeathRecipient> = $r6;

        r0.<com.android.server.slice.PinnedSliceState: com.android.server.slice.SliceManagerService mService> = r1;

        r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri> = r2;

        r0.<com.android.server.slice.PinnedSliceState: java.lang.String mPkg> = r3;

        $r7 = virtualinvoke r1.<com.android.server.slice.SliceManagerService: java.lang.Object getLock()>();

        r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock> = $r7;

        return;
    }

    private void checkSelfRemove()
    {
        com.android.server.slice.PinnedSliceState r0;
        boolean $z0;
        android.net.Uri $r1;
        com.android.server.slice.SliceManagerService $r2;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        $z0 = virtualinvoke r0.<com.android.server.slice.PinnedSliceState: boolean hasPinOrListener()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.slice.PinnedSliceState: com.android.server.slice.SliceManagerService mService>;

        $r1 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        virtualinvoke $r2.<com.android.server.slice.SliceManagerService: void removePinnedSlice(android.net.Uri)>($r1);

     label1:
        return;
    }

    private android.app.slice.SliceSpec findSpec(android.app.slice.SliceSpec[], java.lang.String)
    {
        com.android.server.slice.PinnedSliceState r0;
        android.app.slice.SliceSpec[] r1;
        java.lang.String r2, $r4;
        int i0, i1;
        android.app.slice.SliceSpec r3;
        boolean $z0;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r1 := @parameter0: android.app.slice.SliceSpec[];

        r2 := @parameter1: java.lang.String;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r4 = virtualinvoke r3.<android.app.slice.SliceSpec: java.lang.String getType()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, r2);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private void handleRecheckListeners()
    {
        com.android.server.slice.PinnedSliceState r0;
        java.lang.Object r1, $r5;
        boolean $z0, $z1;
        android.util.ArrayMap $r3, $r4, $r8;
        int $i0, i1;
        com.android.server.slice.PinnedSliceState$ListenerInfo $r6;
        android.os.IBinder $r7;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        $z0 = virtualinvoke r0.<com.android.server.slice.PinnedSliceState: boolean hasPinOrListener()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        $i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        i1 = $i0 - 1;

     label03:
        if i1 < 0 goto label06;

     label04:
        $r4 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r6 = (com.android.server.slice.PinnedSliceState$ListenerInfo) $r5;

        $r7 = staticinvoke <com.android.server.slice.PinnedSliceState$ListenerInfo: android.os.IBinder access$000(com.android.server.slice.PinnedSliceState$ListenerInfo)>($r6);

        $z1 = interfaceinvoke $r7.<android.os.IBinder: boolean isBinderAlive()>();

        if $z1 != 0 goto label05;

        $r8 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i1);

     label05:
        i1 = i1 + -1;

        goto label03;

     label06:
        specialinvoke r0.<com.android.server.slice.PinnedSliceState: void checkSelfRemove()>();

        exitmonitor r1;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void handleSendPinned()
    {
        com.android.server.slice.PinnedSliceState r0;
        java.lang.StringBuilder r1;
        android.net.Uri $r2, $r6;
        java.lang.Exception $r4;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r10;
        android.content.ContentProviderClient r11;
        android.os.Bundle r12;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r11 = virtualinvoke r0.<com.android.server.slice.PinnedSliceState: android.content.ContentProviderClient getClient()>();

        if r11 != null goto label02;

        if r11 == null goto label01;

        virtualinvoke r11.<android.content.ContentProviderClient: void close()>();

     label01:
        return;

     label02:
        r12 = new android.os.Bundle;

        specialinvoke r12.<android.os.Bundle: void <init>()>();

        $r2 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        virtualinvoke r12.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", $r2);

     label03:
        virtualinvoke r11.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("pin", null, r12);

     label04:
        goto label07;

     label05:
        $r4 := @caughtexception;

     label06:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to contact ");

        $r6 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PinnedSliceState", $r8, $r4);

     label07:
        if r11 == null goto label08;

        virtualinvoke r11.<android.content.ContentProviderClient: void close()>();

     label08:
        return;

     label09:
        $r9 := @caughtexception;

        if r11 == null goto label13;

     label10:
        virtualinvoke r11.<android.content.ContentProviderClient: void close()>();

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label13:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private void handleSendUnpinned()
    {
        com.android.server.slice.PinnedSliceState r0;
        android.net.Uri $r2, $r8;
        java.lang.Throwable $r4, $r5;
        java.lang.Exception $r6;
        java.lang.String $r10;
        android.content.ContentProviderClient r11;
        android.os.Bundle r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r11 = virtualinvoke r0.<com.android.server.slice.PinnedSliceState: android.content.ContentProviderClient getClient()>();

        if r11 != null goto label02;

        if r11 == null goto label01;

        virtualinvoke r11.<android.content.ContentProviderClient: void close()>();

     label01:
        return;

     label02:
        r12 = new android.os.Bundle;

        specialinvoke r12.<android.os.Bundle: void <init>()>();

        $r2 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        virtualinvoke r12.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("slice_uri", $r2);

     label03:
        virtualinvoke r11.<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>("unpin", null, r12);

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

     label06:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to contact ");

        $r8 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PinnedSliceState", $r10, $r6);

     label07:
        if r11 == null goto label08;

        virtualinvoke r11.<android.content.ContentProviderClient: void close()>();

     label08:
        return;

     label09:
        $r4 := @caughtexception;

        if r11 == null goto label13;

     label10:
        virtualinvoke r11.<android.content.ContentProviderClient: void close()>();

     label11:
        goto label13;

     label12:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label13:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public static void lambda$KzxFkvfomRuMb5PD8_pIHDIhUUE(com.android.server.slice.PinnedSliceState)
    {
        com.android.server.slice.PinnedSliceState r0;

        r0 := @parameter0: com.android.server.slice.PinnedSliceState;

        specialinvoke r0.<com.android.server.slice.PinnedSliceState: void handleRecheckListeners()>();

        return;
    }

    public static void lambda$TZdoqC_LDA8If7sQ7WXz9LM6VHg(com.android.server.slice.PinnedSliceState)
    {
        com.android.server.slice.PinnedSliceState r0;

        r0 := @parameter0: com.android.server.slice.PinnedSliceState;

        specialinvoke r0.<com.android.server.slice.PinnedSliceState: void handleSendPinned()>();

        return;
    }

    static boolean lambda$mergeSpecs$1(android.app.slice.SliceSpec)
    {
        android.app.slice.SliceSpec r0;
        boolean z0;

        r0 := @parameter0: android.app.slice.SliceSpec;

        if r0 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static android.app.slice.SliceSpec[] lambda$mergeSpecs$2(int)
    {
        int i0;
        android.app.slice.SliceSpec[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (android.app.slice.SliceSpec)[i0];

        return $r0;
    }

    public static void lambda$t5Vl61Ns1u_83c4ri7920sczEu0(com.android.server.slice.PinnedSliceState)
    {
        com.android.server.slice.PinnedSliceState r0;

        r0 := @parameter0: com.android.server.slice.PinnedSliceState;

        specialinvoke r0.<com.android.server.slice.PinnedSliceState: void handleSendUnpinned()>();

        return;
    }

    private void setSlicePinned(boolean)
    {
        com.android.server.slice.PinnedSliceState r0;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.slice.SliceManagerService $r2, $r3;
        java.lang.Throwable $r4;
        android.os.Handler r5, r7;
        com.android.server.slice._$$Lambda$PinnedSliceState$TZdoqC_LDA8If7sQ7WXz9LM6VHg r6;
        com.android.server.slice._$$Lambda$PinnedSliceState$t5Vl61Ns1u_83c4ri7920sczEu0 r8;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<com.android.server.slice.PinnedSliceState: boolean mSlicePinned>;

        if $z1 != z0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<com.android.server.slice.PinnedSliceState: boolean mSlicePinned> = z0;

     label04:
        if z0 == 0 goto label07;

     label05:
        $r3 = r0.<com.android.server.slice.PinnedSliceState: com.android.server.slice.SliceManagerService mService>;

        r5 = virtualinvoke $r3.<com.android.server.slice.SliceManagerService: android.os.Handler getHandler()>();

        r6 = new com.android.server.slice._$$Lambda$PinnedSliceState$TZdoqC_LDA8If7sQ7WXz9LM6VHg;

        specialinvoke r6.<com.android.server.slice._$$Lambda$PinnedSliceState$TZdoqC_LDA8If7sQ7WXz9LM6VHg: void <init>(com.android.server.slice.PinnedSliceState)>(r0);

        virtualinvoke r5.<android.os.Handler: boolean post(java.lang.Runnable)>(r6);

     label06:
        goto label08;

     label07:
        $r2 = r0.<com.android.server.slice.PinnedSliceState: com.android.server.slice.SliceManagerService mService>;

        r7 = virtualinvoke $r2.<com.android.server.slice.SliceManagerService: android.os.Handler getHandler()>();

        r8 = new com.android.server.slice._$$Lambda$PinnedSliceState$t5Vl61Ns1u_83c4ri7920sczEu0;

        specialinvoke r8.<com.android.server.slice._$$Lambda$PinnedSliceState$t5Vl61Ns1u_83c4ri7920sczEu0: void <init>(com.android.server.slice.PinnedSliceState)>(r0);

        virtualinvoke r7.<android.os.Handler: boolean post(java.lang.Runnable)>(r8);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void destroy()
    {
        com.android.server.slice.PinnedSliceState r0;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        specialinvoke r0.<com.android.server.slice.PinnedSliceState: void setSlicePinned(boolean)>(0);

        return;
    }

    android.content.ContentProviderClient getClient()
    {
        com.android.server.slice.PinnedSliceState r0;
        android.content.ContentProviderClient r1;
        com.android.server.slice.SliceManagerService $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        android.net.Uri $r5;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        $r2 = r0.<com.android.server.slice.PinnedSliceState: com.android.server.slice.SliceManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.slice.SliceManagerService: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        r1 = virtualinvoke $r4.<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>($r5);

        if r1 != null goto label1;

        return null;

     label1:
        virtualinvoke r1.<android.content.ContentProviderClient: void setDetectNotResponding(long)>(5000L);

        return r1;
    }

    public java.lang.String getPkg()
    {
        com.android.server.slice.PinnedSliceState r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        $r1 = r0.<com.android.server.slice.PinnedSliceState: java.lang.String mPkg>;

        return $r1;
    }

    public android.app.slice.SliceSpec[] getSpecs()
    {
        com.android.server.slice.PinnedSliceState r0;
        android.app.slice.SliceSpec[] $r1;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        $r1 = r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] mSupportedSpecs>;

        return $r1;
    }

    public android.net.Uri getUri()
    {
        com.android.server.slice.PinnedSliceState r0;
        android.net.Uri $r1;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        $r1 = r0.<com.android.server.slice.PinnedSliceState: android.net.Uri mUri>;

        return $r1;
    }

    public boolean hasPinOrListener()
    {
        com.android.server.slice.PinnedSliceState r0;
        java.lang.Object r1;
        android.util.ArraySet $r3;
        boolean $z0, $z1, z2;
        android.util.ArrayMap $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r1 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArraySet mPinnedPkgs>;

        $z0 = virtualinvoke $r3.<android.util.ArraySet: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r4 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        $z1 = virtualinvoke $r4.<android.util.ArrayMap: boolean isEmpty()>();

        if $z1 != 0 goto label3;

     label2:
        goto label4;

     label3:
        z2 = 0;

        goto label5;

     label4:
        z2 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z2;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isListening()
    {
        com.android.server.slice.PinnedSliceState r0;
        java.lang.Object r1;
        android.util.ArrayMap $r3;
        boolean $z0, z1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r1 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean isEmpty()>();

        if $z0 != 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.app.slice.SliceSpec lambda$mergeSpecs$0$PinnedSliceState(android.app.slice.SliceSpec[], android.app.slice.SliceSpec)
    {
        com.android.server.slice.PinnedSliceState r0;
        android.app.slice.SliceSpec r1, r4;
        java.lang.String $r2;
        int $i0, $i1;
        android.app.slice.SliceSpec[] r3;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r3 := @parameter0: android.app.slice.SliceSpec[];

        r1 := @parameter1: android.app.slice.SliceSpec;

        $r2 = virtualinvoke r1.<android.app.slice.SliceSpec: java.lang.String getType()>();

        r4 = specialinvoke r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec findSpec(android.app.slice.SliceSpec[],java.lang.String)>(r3, $r2);

        if r4 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r4.<android.app.slice.SliceSpec: int getRevision()>();

        $i1 = virtualinvoke r1.<android.app.slice.SliceSpec: int getRevision()>();

        if $i0 >= $i1 goto label2;

        return r4;

     label2:
        return r1;
    }

    public void mergeSpecs(android.app.slice.SliceSpec[])
    {
        com.android.server.slice.PinnedSliceState r0;
        java.lang.Object r1;
        java.util.stream.Stream r2, $r7, $r9;
        android.app.slice.SliceSpec[] $r4, $r5, $r12, r14;
        java.util.List $r6;
        com.android.server.slice.'-$$Lambda$PinnedSliceState$2PaYhOaggf1E5xg82LTTEwxmLE4' $r8;
        com.android.server.slice.'-$$Lambda$PinnedSliceState$vxnx7v9Z67Tj9aywVmtdX48br1M' $r10;
        java.lang.Object[] $r11;
        java.lang.Throwable $r13;
        com.android.server.slice._$$Lambda$PinnedSliceState$j_JfEZwPCa729MjgsTSd8MAItIw r16;
        java.util.function.Predicate r17;
        java.util.function.IntFunction r18;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r14 := @parameter0: android.app.slice.SliceSpec[];

        r1 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] mSupportedSpecs>;

        if $r4 != null goto label3;

        r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] mSupportedSpecs> = r14;

     label2:
        goto label4;

     label3:
        $r5 = r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] mSupportedSpecs>;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        r2 = interfaceinvoke $r6.<java.util.List: java.util.stream.Stream stream()>();

        r16 = new com.android.server.slice._$$Lambda$PinnedSliceState$j_JfEZwPCa729MjgsTSd8MAItIw;

        specialinvoke r16.<com.android.server.slice._$$Lambda$PinnedSliceState$j_JfEZwPCa729MjgsTSd8MAItIw: void <init>(com.android.server.slice.PinnedSliceState,android.app.slice.SliceSpec[])>(r0, r14);

        $r7 = interfaceinvoke r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r16);

        $r8 = <com.android.server.slice._$$Lambda$PinnedSliceState$2PaYhOaggf1E5xg82LTTEwxmLE4: com.android.server.slice.'-$$Lambda$PinnedSliceState$2PaYhOaggf1E5xg82LTTEwxmLE4' INSTANCE>;

        r17 = (java.util.function.Predicate) $r8;

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r17);

        $r10 = <com.android.server.slice._$$Lambda$PinnedSliceState$vxnx7v9Z67Tj9aywVmtdX48br1M: com.android.server.slice.'-$$Lambda$PinnedSliceState$vxnx7v9Z67Tj9aywVmtdX48br1M' INSTANCE>;

        r18 = (java.util.function.IntFunction) $r10;

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>(r18);

        $r12 = (android.app.slice.SliceSpec[]) $r11;

        r0.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] mSupportedSpecs> = $r12;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void pin(java.lang.String, android.app.slice.SliceSpec[], android.os.IBinder)
    {
        com.android.server.slice.PinnedSliceState r0;
        android.app.slice.SliceSpec[] r1;
        android.os.IBinder r2;
        java.lang.Object r3;
        android.util.ArrayMap r4;
        com.android.server.slice.PinnedSliceState$ListenerInfo r5;
        int $i0, $i1;
        android.os.IBinder$DeathRecipient $r7;
        android.os.RemoteException $r8;
        java.lang.Throwable $r9;
        java.lang.String r10;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.slice.SliceSpec[];

        r2 := @parameter2: android.os.IBinder;

        r3 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r4 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        r5 = new com.android.server.slice.PinnedSliceState$ListenerInfo;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        specialinvoke r5.<com.android.server.slice.PinnedSliceState$ListenerInfo: void <init>(com.android.server.slice.PinnedSliceState,android.os.IBinder,java.lang.String,boolean,int,int)>(r0, r2, r10, 1, $i0, $i1);

        virtualinvoke r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

     label2:
        $r7 = r0.<com.android.server.slice.PinnedSliceState: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r7, 0);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        virtualinvoke r0.<com.android.server.slice.PinnedSliceState: void mergeSpecs(android.app.slice.SliceSpec[])>(r1);

        specialinvoke r0.<com.android.server.slice.PinnedSliceState: void setSlicePinned(boolean)>(1);

        exitmonitor r3;

     label6:
        return;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r3;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean unpin(java.lang.String, android.os.IBinder)
    {
        com.android.server.slice.PinnedSliceState r0;
        android.os.IBinder$DeathRecipient $r1;
        android.util.ArrayMap $r2;
        boolean $z1, $z2;
        java.lang.Throwable $r4;
        java.lang.String r5;
        android.os.IBinder r6;
        java.lang.Object r7;

        r0 := @this: com.android.server.slice.PinnedSliceState;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: android.os.IBinder;

        r7 = r0.<com.android.server.slice.PinnedSliceState: java.lang.Object mLock>;

        entermonitor r7;

     label1:
        $r1 = r0.<com.android.server.slice.PinnedSliceState: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke r6.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r1, 0);

        $r2 = r0.<com.android.server.slice.PinnedSliceState: android.util.ArrayMap mListeners>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

        exitmonitor r7;

     label2:
        $z1 = virtualinvoke r0.<com.android.server.slice.PinnedSliceState: boolean hasPinOrListener()>();

        $z2 = $z1 ^ 1;

        return $z2;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r7;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.slice.PinnedSliceState: java.lang.String TAG> = "PinnedSliceState";

        <com.android.server.slice.PinnedSliceState: long SLICE_TIMEOUT> = 5000L;

        return;
    }
}
