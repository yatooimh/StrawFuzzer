public class com.android.server.slice.SliceManagerService extends android.app.slice.ISliceManager$Stub
{
    private static final java.lang.String TAG;
    private final android.app.AppOpsManager mAppOps;
    private final android.app.usage.UsageStatsManagerInternal mAppUsageStats;
    private final com.android.internal.app.AssistUtils mAssistUtils;
    private final android.util.SparseArray mAssistantLookup;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private final android.util.SparseArray mHomeLookup;
    private final java.lang.Object mLock;
    private final android.content.pm.PackageManagerInternal mPackageManagerInternal;
    private final com.android.server.slice.SlicePermissionManager mPermissions;
    private final android.util.ArrayMap mPinnedSlicesByUri;
    private final android.content.BroadcastReceiver mReceiver;

    public void <init>(android.content.Context)
    {
        com.android.server.slice.SliceManagerService r0;
        android.content.Context r1;
        com.android.server.ServiceThread $r2;
        android.os.Looper $r3;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.android.server.slice.SliceManagerService: com.android.server.ServiceThread createHandler()>();

        $r3 = virtualinvoke $r2.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void <init>(android.content.Context,android.os.Looper)>(r1, $r3);

        return;
    }

    void <init>(android.content.Context, android.os.Looper)
    {
        com.android.server.slice.SliceManagerService r0;
        android.os.Looper r1;
        android.content.pm.PackageManagerInternal r2, $r10;
        java.lang.Object $r3, $r8, $r11, $r15;
        android.util.ArrayMap $r4;
        android.util.SparseArray $r5, $r6;
        com.android.server.slice.SliceManagerService$1 $r7;
        android.app.AppOpsManager $r12;
        com.android.internal.app.AssistUtils $r13;
        android.os.Handler $r14, $r20;
        android.app.usage.UsageStatsManagerInternal $r16;
        com.android.server.slice.SlicePermissionManager $r17;
        android.content.Context $r18, $r23, r25;
        android.content.IntentFilter $r19;
        android.os.UserHandle $r21;
        android.content.BroadcastReceiver $r22;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r25 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Looper;

        specialinvoke r0.<android.app.slice.ISliceManager$Stub: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.slice.SliceManagerService: android.util.SparseArray mAssistantLookup> = $r5;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.slice.SliceManagerService: android.util.SparseArray mHomeLookup> = $r6;

        $r7 = new com.android.server.slice.SliceManagerService$1;

        specialinvoke $r7.<com.android.server.slice.SliceManagerService$1: void <init>(com.android.server.slice.SliceManagerService)>(r0);

        r0.<com.android.server.slice.SliceManagerService: android.content.BroadcastReceiver mReceiver> = $r7;

        r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext> = r25;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r2 = (android.content.pm.PackageManagerInternal) $r8;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r10 = (android.content.pm.PackageManagerInternal) r2;

        r0.<com.android.server.slice.SliceManagerService: android.content.pm.PackageManagerInternal mPackageManagerInternal> = $r10;

        $r11 = virtualinvoke r25.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r12 = (android.app.AppOpsManager) $r11;

        r0.<com.android.server.slice.SliceManagerService: android.app.AppOpsManager mAppOps> = $r12;

        $r13 = new com.android.internal.app.AssistUtils;

        specialinvoke $r13.<com.android.internal.app.AssistUtils: void <init>(android.content.Context)>(r25);

        r0.<com.android.server.slice.SliceManagerService: com.android.internal.app.AssistUtils mAssistUtils> = $r13;

        $r14 = new android.os.Handler;

        specialinvoke $r14.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        r0.<com.android.server.slice.SliceManagerService: android.os.Handler mHandler> = $r14;

        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        $r16 = (android.app.usage.UsageStatsManagerInternal) $r15;

        r0.<com.android.server.slice.SliceManagerService: android.app.usage.UsageStatsManagerInternal mAppUsageStats> = $r16;

        $r17 = new com.android.server.slice.SlicePermissionManager;

        $r18 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        specialinvoke $r17.<com.android.server.slice.SlicePermissionManager: void <init>(android.content.Context,android.os.Looper)>($r18, r1);

        r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions> = $r17;

        $r19 = new android.content.IntentFilter;

        specialinvoke $r19.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r19.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_DATA_CLEARED");

        virtualinvoke $r19.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r19.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r23 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        $r22 = r0.<com.android.server.slice.SliceManagerService: android.content.BroadcastReceiver mReceiver>;

        $r21 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r20 = r0.<com.android.server.slice.SliceManagerService: android.os.Handler mHandler>;

        virtualinvoke $r23.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r22, $r21, $r19, null, $r20);

        return;
    }

    static com.android.server.slice.SlicePermissionManager access$000(com.android.server.slice.SliceManagerService)
    {
        com.android.server.slice.SliceManagerService r0;
        com.android.server.slice.SlicePermissionManager $r1;

        r0 := @parameter0: com.android.server.slice.SliceManagerService;

        $r1 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        return $r1;
    }

    static void access$100(com.android.server.slice.SliceManagerService)
    {
        com.android.server.slice.SliceManagerService r0;

        r0 := @parameter0: com.android.server.slice.SliceManagerService;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void systemReady()>();

        return;
    }

    static void access$200(com.android.server.slice.SliceManagerService, int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.slice.SliceManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void onUnlockUser(int)>(i0);

        return;
    }

    static void access$300(com.android.server.slice.SliceManagerService, int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.slice.SliceManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void onStopUser(int)>(i0);

        return;
    }

    private static com.android.server.ServiceThread createHandler()
    {
        com.android.server.ServiceThread $r1;

        $r1 = new com.android.server.ServiceThread;

        specialinvoke $r1.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("SliceManagerService", 10, 1);

        virtualinvoke $r1.<com.android.server.ServiceThread: void start()>();

        return $r1;
    }

    private void enforceAccess(java.lang.String, android.net.Uri) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        android.net.Uri r1;
        int $i0, $i1, $i2, $i3, $i4;
        android.os.UserHandle $r2;
        java.lang.String $r3, $r9, r10;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.Uri;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: int checkAccess(java.lang.String,android.net.Uri,int,int)>(r10, r1, $i0, $i1);

        if $i2 == 0 goto label2;

        $r2 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i3 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        $i4 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r1, $i3);

        $r3 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getProviderPkg(android.net.Uri,int)>(r1, $i4);

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r10, $r3);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access to slice ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is required");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceCrossUser(java.lang.String,android.net.Uri)>(r10, r1);

        return;
    }

    private void enforceCrossUser(java.lang.String, android.net.Uri)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        android.net.Uri r2;
        int i0, $i1;
        android.os.UserHandle $r3;
        android.content.Context $r4;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        $r3 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

        $i1 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r2, i0);

        if $i1 == i0 goto label1;

        $r4 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: android.content.Context getContext()>();

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "Slice interaction across users requires INTERACT_ACROSS_USERS_FULL");

     label1:
        return;
    }

    private void enforceOwner(java.lang.String, android.net.Uri, int)
    {
        com.android.server.slice.SliceManagerService r0;
        android.net.Uri r1;
        int i0;
        java.lang.String $r2, $r7, r8;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getProviderPkg(android.net.Uri,int)>(r1, i0);

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, r8);

        if $z0 == 0 goto label1;

        if r8 == null goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller must own ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private java.lang.String getAssistant(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        android.content.ComponentName r1;
        com.android.internal.app.AssistUtils $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.slice.SliceManagerService: com.android.internal.app.AssistUtils mAssistUtils>;

        r1 = virtualinvoke $r2.<com.android.internal.app.AssistUtils: android.content.ComponentName getAssistComponentForUser(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        return $r3;
    }

    private com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        com.android.server.slice.SliceManagerService$PackageMatchingCache r1, $r4, r7;
        android.util.SparseArray $r2, $r6;
        java.lang.Object $r3;
        com.android.server.slice._$$Lambda$SliceManagerService$ic_PW16x_KcVi_NszMwHhErqI0s $r5;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.slice.SliceManagerService: android.util.SparseArray mAssistantLookup>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.slice.SliceManagerService$PackageMatchingCache) $r3;

        r7 = r1;

        if r1 != null goto label1;

        $r4 = new com.android.server.slice.SliceManagerService$PackageMatchingCache;

        $r5 = new com.android.server.slice._$$Lambda$SliceManagerService$ic_PW16x_KcVi_NszMwHhErqI0s;

        specialinvoke $r5.<com.android.server.slice._$$Lambda$SliceManagerService$ic_PW16x_KcVi_NszMwHhErqI0s: void <init>(com.android.server.slice.SliceManagerService,int)>(r0, i0);

        specialinvoke $r4.<com.android.server.slice.SliceManagerService$PackageMatchingCache: void <init>(java.util.function.Supplier)>($r5);

        r7 = $r4;

        $r6 = r0.<com.android.server.slice.SliceManagerService: android.util.SparseArray mAssistantLookup>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

     label1:
        return r7;
    }

    private com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        com.android.server.slice.SliceManagerService$PackageMatchingCache r1, $r4, r7;
        android.util.SparseArray $r2, $r6;
        java.lang.Object $r3;
        com.android.server.slice._$$Lambda$SliceManagerService$LkusK1jmu9JKJTiMRWqWxNGEGbY $r5;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.slice.SliceManagerService: android.util.SparseArray mHomeLookup>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.slice.SliceManagerService$PackageMatchingCache) $r3;

        r7 = r1;

        if r1 != null goto label1;

        $r4 = new com.android.server.slice.SliceManagerService$PackageMatchingCache;

        $r5 = new com.android.server.slice._$$Lambda$SliceManagerService$LkusK1jmu9JKJTiMRWqWxNGEGbY;

        specialinvoke $r5.<com.android.server.slice._$$Lambda$SliceManagerService$LkusK1jmu9JKJTiMRWqWxNGEGbY: void <init>(com.android.server.slice.SliceManagerService,int)>(r0, i0);

        specialinvoke $r4.<com.android.server.slice.SliceManagerService$PackageMatchingCache: void <init>(java.util.function.Supplier)>($r5);

        r7 = $r4;

        $r6 = r0.<com.android.server.slice.SliceManagerService: android.util.SparseArray mHomeLookup>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

     label1:
        return r7;
    }

    private com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri, java.lang.String)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        java.lang.Object r2, $r5;
        com.android.server.slice.PinnedSliceState r3, r10;
        android.util.ArrayMap $r4, $r6;
        java.lang.Throwable $r8;
        android.net.Uri r9;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r9 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r3 = (com.android.server.slice.PinnedSliceState) $r5;

     label2:
        r10 = r3;

        if r3 != null goto label4;

     label3:
        r10 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState createPinnedSlice(android.net.Uri,java.lang.String)>(r9, r1);

        $r6 = r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10);

     label4:
        exitmonitor r2;

     label5:
        return r10;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private com.android.server.slice.PinnedSliceState getPinnedSlice(android.net.Uri)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.Object r1, $r3;
        android.util.ArrayMap $r2;
        java.lang.Object[] $r4;
        java.lang.String $r5, $r6;
        java.lang.Throwable $r7;
        android.net.Uri r8;
        com.android.server.slice.PinnedSliceState r9;
        java.lang.IllegalStateException r10;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r8 := @parameter0: android.net.Uri;

        r1 = r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.android.server.slice.PinnedSliceState) $r3;

     label2:
        if r9 == null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return r9;

     label5:
        r10 = new java.lang.IllegalStateException;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r8.<android.net.Uri: java.lang.String toString()>();

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Slice %s not pinned", $r4);

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r10;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private java.lang.String getProviderPkg(android.net.Uri, int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0, $i2;
        long l1;
        java.lang.String r1, r8;
        android.net.Uri $r2, r7;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        android.content.pm.ProviderInfo $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r7 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r7);

        r1 = virtualinvoke $r2.<android.net.Uri: java.lang.String getAuthority()>();

        $r3 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r7, i0);

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProviderAsUser(java.lang.String,int,int)>(r1, 0, $i2);

        r8 = $r5.<android.content.pm.ProviderInfo: java.lang.String packageName>;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r8;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean hasFullSliceAccess(java.lang.String, int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        long l1;
        boolean $z0, $z1, z2, z3;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $z0 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean isDefaultHomeApp(java.lang.String,int)>(r2, i0);

        if $z0 != 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean isAssistant(java.lang.String,int)>(r2, i0);

        if $z1 != 0 goto label4;

        z2 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean isGrantedFullAccess(java.lang.String,int)>(r2, i0);

     label2:
        if z2 == 0 goto label3;

        goto label4;

     label3:
        z3 = 0;

        goto label5;

     label4:
        z3 = 1;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z3;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    private boolean isAssistant(java.lang.String, int)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.slice.SliceManagerService$PackageMatchingCache $r2;
        boolean $z0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)>(i0);

        $z0 = virtualinvoke $r2.<com.android.server.slice.SliceManagerService$PackageMatchingCache: boolean matches(java.lang.String)>(r1);

        return $z0;
    }

    private boolean isDefaultHomeApp(java.lang.String, int)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.slice.SliceManagerService$PackageMatchingCache $r2;
        boolean $z0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)>(i0);

        $z0 = virtualinvoke $r2.<com.android.server.slice.SliceManagerService$PackageMatchingCache: boolean matches(java.lang.String)>(r1);

        return $z0;
    }

    private boolean isGrantedFullAccess(java.lang.String, int)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.slice.SlicePermissionManager $r2;
        boolean $z0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        $z0 = virtualinvoke $r2.<com.android.server.slice.SlicePermissionManager: boolean hasFullAccess(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    static boolean lambda$onStopUser$0(int, com.android.server.slice.PinnedSliceState)
    {
        int i0, $i1;
        com.android.server.slice.PinnedSliceState r0;
        android.net.Uri $r1;
        boolean z0;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.slice.PinnedSliceState;

        $r1 = virtualinvoke r0.<com.android.server.slice.PinnedSliceState: android.net.Uri getUri()>();

        $i1 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri)>($r1);

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void onStopUser(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        java.lang.Object r1;
        java.util.Collection r2;
        android.util.ArrayMap $r3;
        java.lang.Throwable $r4;
        com.android.server.slice._$$Lambda$SliceManagerService$EsoJb3dNe0G_qzoQixj72OS5gnw r5;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri>;

        r2 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Collection values()>();

        r5 = new com.android.server.slice._$$Lambda$SliceManagerService$EsoJb3dNe0G_qzoQixj72OS5gnw;

        specialinvoke r5.<com.android.server.slice._$$Lambda$SliceManagerService$EsoJb3dNe0G_qzoQixj72OS5gnw: void <init>(int)>(i0);

        interfaceinvoke r2.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void onUnlockUser(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        return;
    }

    private void systemReady()
    {
        com.android.server.slice.SliceManagerService r0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        return;
    }

    private void verifyCaller(java.lang.String)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        android.app.AppOpsManager $r2;
        int $i0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.slice.SliceManagerService: android.app.AppOpsManager mAppOps>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i0, r1);

        return;
    }

    public void applyRestore(byte[], int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0, $i1;
        java.lang.SecurityException $r2;
        java.io.ByteArrayInputStream $r3;
        org.xmlpull.v1.XmlPullParserFactory $r4;
        android.util.Xml$Encoding $r5;
        java.lang.String $r6, $r11, $r15;
        com.android.server.slice.SlicePermissionManager $r7;
        java.lang.StringBuilder $r8, $r12;
        java.lang.Throwable $r16;
        byte[] r17;
        org.xmlpull.v1.XmlPullParser r20;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r17 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label7;

        if r17 != null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("applyRestore: no payload to restore for user ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SliceManagerService", $r15);

        return;

     label1:
        if i0 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("applyRestore: cannot restore policy for user ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SliceManagerService", $r11);

        return;

     label2:
        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r17);

     label3:
        $r4 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        r20 = virtualinvoke $r4.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r5 = <android.util.Xml$Encoding: android.util.Xml$Encoding UTF_8>;

        $r6 = virtualinvoke $r5.<android.util.Xml$Encoding: java.lang.String name()>();

        interfaceinvoke r20.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>($r3, $r6);

        $r7 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r7.<com.android.server.slice.SlicePermissionManager: void readRestore(org.xmlpull.v1.XmlPullParser)>(r20);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceManagerService", "applyRestore: error reading payload", $r16);

     label6:
        return;

     label7:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must be system");

        throw $r2;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected int checkAccess(java.lang.String, android.net.Uri, int, int)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        android.net.Uri r2;
        int i0, i1, $i2;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>(r2, null, r1, i1, i0, null);

        return $i2;
    }

    public int checkSlicePermission(android.net.Uri, java.lang.String, java.lang.String, int, int, java.lang.String[])
    {
        com.android.server.slice.SliceManagerService r0;
        android.net.Uri r1;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, i8, i9, $i10;
        java.lang.String[] r2, r11;
        boolean $z0, $z1;
        com.android.server.slice.SlicePermissionManager $r3, $r5;
        android.content.Context $r4, $r6, $r14;
        android.content.pm.PackageManager $r7;
        java.lang.String $r8, r9, r10, r12, r13;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: android.net.Uri;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.String[];

        i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        if r10 != null goto label04;

        $r6 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r11 = virtualinvoke $r7.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        i6 = lengthof r11;

        i7 = 0;

     label01:
        if i7 >= i6 goto label03;

        $r8 = r11[i7];

        $i3 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>(r1, r9, $r8, i4, i0, r2);

        if $i3 != 0 goto label02;

        return 0;

     label02:
        i7 = i7 + 1;

        goto label01;

     label03:
        return -1;

     label04:
        $z0 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean hasFullSliceAccess(java.lang.String,int)>(r10, i5);

        if $z0 == 0 goto label05;

        return 0;

     label05:
        $r3 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        $z1 = virtualinvoke $r3.<com.android.server.slice.SlicePermissionManager: boolean hasPermission(java.lang.String,int,android.net.Uri)>(r10, i5, r1);

        if $z1 == 0 goto label06;

        return 0;

     label06:
        if r2 == null goto label09;

        if r9 == null goto label09;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceOwner(java.lang.String,android.net.Uri,int)>(r9, r1, i5);

        i1 = lengthof r2;

        i8 = 0;

     label07:
        if i8 >= i1 goto label09;

        r12 = r2[i8];

        $r4 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r4.<android.content.Context: int checkPermission(java.lang.String,int,int)>(r12, i4, i0);

        if $i2 != 0 goto label08;

        i9 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r1, i5);

        r13 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getProviderPkg(android.net.Uri,int)>(r1, i9);

        $r5 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r5.<com.android.server.slice.SlicePermissionManager: void grantSliceAccess(java.lang.String,int,java.lang.String,int,android.net.Uri)>(r10, i5, r13, i9, r1);

        return 0;

     label08:
        i8 = i8 + 1;

        goto label07;

     label09:
        $r14 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        $i10 = virtualinvoke $r14.<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i4, i0, 2);

        if $i10 != 0 goto label10;

        return 0;

     label10:
        return -1;
    }

    protected com.android.server.slice.PinnedSliceState createPinnedSlice(android.net.Uri, java.lang.String)
    {
        com.android.server.slice.SliceManagerService r0;
        android.net.Uri r1;
        java.lang.String r2;
        com.android.server.slice.PinnedSliceState $r3;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = new com.android.server.slice.PinnedSliceState;

        specialinvoke $r3.<com.android.server.slice.PinnedSliceState: void <init>(com.android.server.slice.SliceManagerService,android.net.Uri,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    public java.lang.String[] getAllPackagesGranted(java.lang.String)
    {
        com.android.server.slice.SliceManagerService r0;
        android.net.Uri$Builder $r1, $r2, $r3;
        android.net.Uri $r4;
        com.android.server.slice.SlicePermissionManager $r5;
        java.lang.String[] $r6;
        java.lang.String r7, r8;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r7 := @parameter0: java.lang.String;

        $r1 = new android.net.Uri$Builder;

        specialinvoke $r1.<android.net.Uri$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r7);

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        r8 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getProviderPkg(android.net.Uri,int)>($r4, 0);

        $r5 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        $r6 = virtualinvoke $r5.<com.android.server.slice.SlicePermissionManager: java.lang.String[] getAllPackagesGranted(java.lang.String)>(r8);

        return $r6;
    }

    public byte[] getBackupPayload(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0, $i1;
        java.lang.SecurityException $r1;
        java.io.ByteArrayOutputStream $r2;
        org.xmlpull.v1.XmlPullParserFactory $r3;
        android.util.Xml$Encoding $r4;
        java.lang.String $r5, $r10, $r15;
        com.android.server.slice.SlicePermissionManager $r6;
        java.lang.StringBuilder $r7, $r12;
        java.lang.Throwable $r11;
        org.xmlpull.v1.XmlSerializer r18;
        byte[] r19;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label5;

        if i0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBackupPayload: cannot backup policy for user ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SliceManagerService", $r10);

        return null;

     label1:
        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        $r3 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        r18 = virtualinvoke $r3.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>();

        $r4 = <android.util.Xml$Encoding: android.util.Xml$Encoding UTF_8>;

        $r5 = virtualinvoke $r4.<android.util.Xml$Encoding: java.lang.String name()>();

        interfaceinvoke r18.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>($r2, $r5);

        $r6 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r6.<com.android.server.slice.SlicePermissionManager: void writeBackup(org.xmlpull.v1.XmlSerializer)>(r18);

        interfaceinvoke r18.<org.xmlpull.v1.XmlSerializer: void flush()>();

        r19 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label3:
        return r19;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBackupPayload: error writing payload for user ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SliceManagerService", $r15, $r11);

        return null;

     label5:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must be system");

        throw $r1;

        catch java.io.IOException from label2 to label3 with label4;
        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label4;
    }

    public android.content.Context getContext()
    {
        com.android.server.slice.SliceManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.slice.SliceManagerService;

        $r1 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        return $r1;
    }

    protected java.lang.String getDefaultHome(int)
    {
        com.android.server.slice.SliceManagerService r0;
        long l0;
        java.util.ArrayList r1;
        int i1, $i2, i3, i4, i5;
        android.content.pm.PackageManagerInternal $r2;
        java.lang.Object $r3;
        android.content.pm.ActivityInfo $r4, $r6;
        android.content.pm.ApplicationInfo $r5;
        boolean $z0;
        java.lang.Throwable $r7;
        android.content.ComponentName r8, r9, r10;
        android.content.pm.ResolveInfo r11;
        java.lang.String r12;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i3 := @parameter0: int;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.android.server.slice.SliceManagerService: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        r8 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: android.content.ComponentName getHomeActivitiesAsUser(java.util.List,int)>(r1, i3);

     label02:
        r9 = null;

        if r8 == null goto label03;

        r9 = r8;

     label03:
        r10 = r9;

        if r9 != null goto label13;

     label04:
        i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label05:
        i4 = -2147483648;

        i5 = 0;

     label06:
        r10 = r9;

        if i5 >= i1 goto label13;

     label07:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r11 = (android.content.pm.ResolveInfo) $r3;

        $r4 = r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r5 = $r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r5.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z0 != 0 goto label09;

     label08:
        goto label12;

     label09:
        $i2 = r11.<android.content.pm.ResolveInfo: int priority>;

        if $i2 >= i4 goto label11;

     label10:
        goto label12;

     label11:
        $r6 = r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r9 = virtualinvoke $r6.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

        i4 = r11.<android.content.pm.ResolveInfo: int priority>;

     label12:
        i5 = i5 + 1;

        goto label06;

     label13:
        if r10 == null goto label16;

     label14:
        r12 = virtualinvoke r10.<android.content.ComponentName: java.lang.String getPackageName()>();

     label15:
        goto label17;

     label16:
        r12 = null;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r12;

     label18:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
    }

    public android.os.Handler getHandler()
    {
        com.android.server.slice.SliceManagerService r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.slice.SliceManagerService;

        $r1 = r0.<com.android.server.slice.SliceManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    public java.lang.Object getLock()
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.slice.SliceManagerService;

        $r1 = r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock>;

        return $r1;
    }

    public android.net.Uri[] getPinnedSlices(java.lang.String)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r2, $r11;
        java.util.Iterator r3;
        android.os.UserHandle $r4;
        java.util.ArrayList $r5;
        android.util.ArrayMap $r6;
        java.util.Collection $r7;
        boolean $z0, $z1;
        android.net.Uri[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.String $r12, r15;
        android.net.Uri $r13, r17;
        java.lang.Throwable $r14;
        com.android.server.slice.PinnedSliceState r16;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r15 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r15);

        $r4 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r6 = r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.android.server.slice.PinnedSliceState) $r11;

        $r12 = virtualinvoke r16.<com.android.server.slice.PinnedSliceState: java.lang.String getPkg()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r15, $r12);

        if $z1 == 0 goto label3;

        r17 = virtualinvoke r16.<com.android.server.slice.PinnedSliceState: android.net.Uri getUri()>();

        $i2 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r17, i0);

        if $i2 != i0 goto label3;

        $r13 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r17);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label3:
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r8 = newarray (android.net.Uri)[$i1];

        $r9 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (android.net.Uri[]) $r9;

        return $r10;

     label6:
        $r14 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        android.net.Uri r1, $r4;
        java.lang.String r2;
        android.os.UserHandle $r3;
        int $i0;
        com.android.server.slice.PinnedSliceState $r5;
        android.app.slice.SliceSpec[] $r6;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r2);

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceAccess(java.lang.String,android.net.Uri)>(r2, r1);

        $r3 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i0 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

        $r4 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>(r1, $i0);

        $r5 = specialinvoke r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getPinnedSlice(android.net.Uri)>($r4);

        $r6 = virtualinvoke $r5.<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] getSpecs()>();

        return $r6;
    }

    public void grantPermissionFromUser(android.net.Uri, java.lang.String, java.lang.String, boolean)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1, r13, r14;
        boolean z0;
        int i0, i1;
        android.net.Uri r2, r12;
        long l2;
        android.content.Context $r3, $r8;
        android.os.UserHandle $r4;
        android.net.Uri$Builder $r5, $r6;
        com.android.server.slice.SlicePermissionManager $r7, $r10;
        android.content.ContentResolver $r9;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r12 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r13);

        $r3 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_SLICE_PERMISSIONS", "Slice granting requires MANAGE_SLICE_PERMISSIONS");

        $r4 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        if z0 == 0 goto label1;

        $r10 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r10.<com.android.server.slice.SlicePermissionManager: void grantFullAccess(java.lang.String,int)>(r1, i0);

        goto label2;

     label1:
        $r5 = virtualinvoke r12.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>("");

        r2 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri build()>();

        i1 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r2, i0);

        r14 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getProviderPkg(android.net.Uri,int)>(r2, i1);

        $r7 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r7.<com.android.server.slice.SlicePermissionManager: void grantSliceAccess(java.lang.String,int,java.lang.String,int,android.net.Uri)>(r1, i0, r14, i1, r2);

     label2:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r8 = r0.<com.android.server.slice.SliceManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r9.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>(r12, null);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label5:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void grantSlicePermission(java.lang.String, java.lang.String, android.net.Uri) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1, r2;
        android.net.Uri r3;
        int i0;
        android.os.UserHandle $r4;
        com.android.server.slice.SlicePermissionManager $r5;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.Uri;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r1);

        $r4 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceOwner(java.lang.String,android.net.Uri,int)>(r1, r3, i0);

        $r5 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r5.<com.android.server.slice.SlicePermissionManager: void grantSliceAccess(java.lang.String,int,java.lang.String,int,android.net.Uri)>(r2, i0, r1, i0, r3);

        return;
    }

    public boolean hasSliceAccess(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1;
        android.os.UserHandle $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r1);

        $r2 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i0 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean hasFullSliceAccess(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public java.lang.String lambda$getAssistantMatcher$2$SliceManagerService(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getAssistant(int)>(i0);

        return $r1;
    }

    public java.lang.String lambda$getHomeMatcher$3$SliceManagerService(int)
    {
        com.android.server.slice.SliceManagerService r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.slice.SliceManagerService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getDefaultHome(int)>(i0);

        return $r1;
    }

    public void lambda$pinSlice$1$SliceManagerService(java.lang.String, java.lang.String, int)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1, r2;
        int i0;
        android.app.usage.UsageStatsManagerInternal r3;
        boolean $z0, $z1, $z2;
        byte b1;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r1 == null goto label4;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r2, r1);

        if $z0 != 0 goto label4;

        r3 = r0.<com.android.server.slice.SliceManagerService: android.app.usage.UsageStatsManagerInternal mAppUsageStats>;

        $z1 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean isAssistant(java.lang.String,int)>(r2, i0);

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<com.android.server.slice.SliceManagerService: boolean isDefaultHomeApp(java.lang.String,int)>(r2, i0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        b1 = 14;

        goto label3;

     label2:
        b1 = 13;

     label3:
        virtualinvoke r3.<android.app.usage.UsageStatsManagerInternal: void reportEvent(java.lang.String,int,int)>(r1, i0, b1);

     label4:
        return;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.slice.SliceManagerService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.slice.SliceShellCommand $r7;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.slice.SliceShellCommand;

        specialinvoke $r7.<com.android.server.slice.SliceShellCommand: void <init>(com.android.server.slice.SliceManagerService)>(r0);

        virtualinvoke $r7.<com.android.server.slice.SliceShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void pinSlice(java.lang.String, android.net.Uri, android.app.slice.SliceSpec[], android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1, r10;
        android.app.slice.SliceSpec[] r2;
        android.os.IBinder r3;
        int i0;
        android.net.Uri r4, r9;
        android.os.UserHandle $r5;
        com.android.server.slice.PinnedSliceState $r6;
        com.android.server.slice._$$Lambda$SliceManagerService$pJ39TkC3AEVezLFEPuJgSQSTDJM $r7;
        android.os.Handler $r8;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        r9 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.app.slice.SliceSpec[];

        r3 := @parameter3: android.os.IBinder;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceAccess(java.lang.String,android.net.Uri)>(r1, r9);

        $r5 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r5.<android.os.UserHandle: int getIdentifier()>();

        r4 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>(r9, i0);

        r10 = specialinvoke r0.<com.android.server.slice.SliceManagerService: java.lang.String getProviderPkg(android.net.Uri,int)>(r4, i0);

        $r6 = specialinvoke r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri,java.lang.String)>(r4, r10);

        virtualinvoke $r6.<com.android.server.slice.PinnedSliceState: void pin(java.lang.String,android.app.slice.SliceSpec[],android.os.IBinder)>(r1, r2, r3);

        $r8 = r0.<com.android.server.slice.SliceManagerService: android.os.Handler mHandler>;

        $r7 = new com.android.server.slice._$$Lambda$SliceManagerService$pJ39TkC3AEVezLFEPuJgSQSTDJM;

        specialinvoke $r7.<com.android.server.slice._$$Lambda$SliceManagerService$pJ39TkC3AEVezLFEPuJgSQSTDJM: void <init>(com.android.server.slice.SliceManagerService,java.lang.String,java.lang.String,int)>(r0, r10, r1, i0);

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        return;
    }

    protected void removePinnedSlice(android.net.Uri)
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.Object r1, $r3;
        android.util.ArrayMap $r2;
        com.android.server.slice.PinnedSliceState $r4;
        java.lang.Throwable $r5;
        android.net.Uri r6;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r6 := @parameter0: android.net.Uri;

        r1 = r0.<com.android.server.slice.SliceManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.slice.SliceManagerService: android.util.ArrayMap mPinnedSlicesByUri>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

        $r4 = (com.android.server.slice.PinnedSliceState) $r3;

        virtualinvoke $r4.<com.android.server.slice.PinnedSliceState: void destroy()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void revokeSlicePermission(java.lang.String, java.lang.String, android.net.Uri) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        java.lang.String r1, r2;
        android.net.Uri r3;
        int i0;
        android.os.UserHandle $r4;
        com.android.server.slice.SlicePermissionManager $r5;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.Uri;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r1);

        $r4 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceOwner(java.lang.String,android.net.Uri,int)>(r1, r3, i0);

        $r5 = r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.SlicePermissionManager mPermissions>;

        virtualinvoke $r5.<com.android.server.slice.SlicePermissionManager: void revokeSliceAccess(java.lang.String,int,java.lang.String,int,android.net.Uri)>(r2, i0, r1, i0, r3);

        return;
    }

    public void unpinSlice(java.lang.String, android.net.Uri, android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.slice.SliceManagerService r0;
        android.os.IBinder r1;
        com.android.server.slice.PinnedSliceState r2;
        android.os.UserHandle $r3;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.String $r5, r6;
        android.net.Uri r7, r8;
        java.lang.IllegalStateException r10;

        r0 := @this: com.android.server.slice.SliceManagerService;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.os.IBinder;

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void verifyCaller(java.lang.String)>(r6);

        specialinvoke r0.<com.android.server.slice.SliceManagerService: void enforceAccess(java.lang.String,android.net.Uri)>(r6, r7);

        $r3 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $i0 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

        r8 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>(r7, $i0);

     label1:
        r2 = specialinvoke r0.<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getPinnedSlice(android.net.Uri)>(r8);

     label2:
        if r2 == null goto label4;

     label3:
        $z0 = virtualinvoke r2.<com.android.server.slice.PinnedSliceState: boolean unpin(java.lang.String,android.os.IBinder)>(r6, r1);

        if $z0 == 0 goto label4;

        virtualinvoke r0.<com.android.server.slice.SliceManagerService: void removePinnedSlice(android.net.Uri)>(r8);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        r10 = (java.lang.IllegalStateException) $r4;

        $r5 = virtualinvoke r10.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SliceManagerService", $r5);

     label6:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label5;
        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.slice.SliceManagerService: java.lang.String TAG> = "SliceManagerService";

        return;
    }
}
