public class com.android.server.slice.SlicePermissionManager extends java.lang.Object implements com.android.server.slice.DirtyTracker
{
    static final int DB_VERSION;
    private static final long PERMISSION_CACHE_PERIOD;
    private static final java.lang.String SLICE_DIR;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_LIST;
    private static final long WRITE_GRACE_PERIOD;
    private final java.lang.String ATT_VERSION;
    private final android.util.ArrayMap mCachedClients;
    private final android.util.ArrayMap mCachedProviders;
    private final android.content.Context mContext;
    private final android.util.ArraySet mDirty;
    private final android.os.Handler mHandler;
    private final java.io.File mSliceDir;

    public void <init>(android.content.Context, android.os.Looper)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.content.Context r1;
        android.os.Looper r2;
        java.io.File $r3, $r4;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "system/slice");

        specialinvoke r0.<com.android.server.slice.SlicePermissionManager: void <init>(android.content.Context,android.os.Looper,java.io.File)>(r1, r2, $r3);

        return;
    }

    void <init>(android.content.Context, android.os.Looper, java.io.File)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.content.Context r1;
        android.os.Looper r2;
        java.io.File r3;
        android.util.ArrayMap $r4, $r5;
        android.util.ArraySet $r6;
        com.android.server.slice.SlicePermissionManager$H $r7;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.slice.SlicePermissionManager: java.lang.String ATT_VERSION> = "version";

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients> = $r5;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty> = $r6;

        r0.<com.android.server.slice.SlicePermissionManager: android.content.Context mContext> = r1;

        $r7 = new com.android.server.slice.SlicePermissionManager$H;

        specialinvoke $r7.<com.android.server.slice.SlicePermissionManager$H: void <init>(com.android.server.slice.SlicePermissionManager,android.os.Looper)>(r0, r2);

        r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler> = $r7;

        r0.<com.android.server.slice.SlicePermissionManager: java.io.File mSliceDir> = r3;

        return;
    }

    static android.util.ArraySet access$400(com.android.server.slice.SlicePermissionManager)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.slice.SlicePermissionManager;

        $r1 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty>;

        return $r1;
    }

    static void access$500(com.android.server.slice.SlicePermissionManager, com.android.server.slice.SlicePermissionManager$PkgUser)
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.SlicePermissionManager$PkgUser r1;

        r0 := @parameter0: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter1: com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke r0.<com.android.server.slice.SlicePermissionManager: void handleRemove(com.android.server.slice.SlicePermissionManager$PkgUser)>(r1);

        return;
    }

    static android.util.ArrayMap access$600(com.android.server.slice.SlicePermissionManager)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.slice.SlicePermissionManager;

        $r1 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        return $r1;
    }

    static android.util.ArrayMap access$700(com.android.server.slice.SlicePermissionManager)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.slice.SlicePermissionManager;

        $r1 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        return $r1;
    }

    private com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.util.ArrayMap $r1, $r5, r20, r25, r33, $r34;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.xmlpull.v1.XmlPullParser $r4;
        android.os.Handler $r7, $r8;
        android.os.Message $r9;
        java.lang.Throwable $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18;
        com.android.server.slice.SlicePermissionManager$PkgUser r19;
        com.android.server.slice.SliceClientPermissions r21, r22, r24, $r32;
        com.android.server.slice.SlicePermissionManager$ParserHolder r23;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r19 := @parameter0: com.android.server.slice.SlicePermissionManager$PkgUser;

        r20 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        entermonitor r20;

     label01:
        $r1 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r19);

        r21 = (com.android.server.slice.SliceClientPermissions) $r2;

        exitmonitor r20;

     label02:
        r22 = r21;

        if r21 != null goto label28;

     label03:
        $r3 = staticinvoke <com.android.server.slice.SliceClientPermissions: java.lang.String getFileName(com.android.server.slice.SlicePermissionManager$PkgUser)>(r19);

        r23 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SlicePermissionManager$ParserHolder getParser(java.lang.String)>($r3);

     label04:
        $r4 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r23);

        r24 = staticinvoke <com.android.server.slice.SliceClientPermissions: com.android.server.slice.SliceClientPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>($r4, r0);

        r25 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        entermonitor r25;

     label05:
        $r5 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24);

        exitmonitor r25;

     label06:
        $r8 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r7 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r19);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, 300000L);

     label07:
        if r23 == null goto label09;

     label08:
        virtualinvoke r23.<com.android.server.slice.SlicePermissionManager$ParserHolder: void close()>();

     label09:
        return r24;

     label10:
        $r18 := @caughtexception;

     label11:
        exitmonitor r25;

     label12:
        throw $r18;

     label13:
        $r15 := @caughtexception;

        if r23 == null goto label18;

     label14:
        virtualinvoke r23.<com.android.server.slice.SlicePermissionManager$ParserHolder: void close()>();

     label15:
        goto label18;

     label16:
        $r10 := @caughtexception;

     label17:
        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label18:
        throw $r15;

     label19:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SlicePermissionManager", "Can\'t read client", $r11);

        goto label22;

     label20:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SlicePermissionManager", "Can\'t read client", $r17);

        goto label22;

     label21:
        $r13 := @caughtexception;

     label22:
        $r32 = new com.android.server.slice.SliceClientPermissions;

        specialinvoke $r32.<com.android.server.slice.SliceClientPermissions: void <init>(com.android.server.slice.SlicePermissionManager$PkgUser,com.android.server.slice.DirtyTracker)>(r19, r0);

        r22 = $r32;

        r33 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        entermonitor r33;

     label23:
        $r34 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r32);

        exitmonitor r33;

     label24:
        goto label28;

     label25:
        $r16 := @caughtexception;

     label26:
        exitmonitor r33;

     label27:
        throw $r16;

     label28:
        return r22;

     label29:
        $r14 := @caughtexception;

     label30:
        exitmonitor r20;

     label31:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.io.FileNotFoundException from label03 to label04 with label21;
        catch java.io.IOException from label03 to label04 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.io.FileNotFoundException from label08 to label09 with label21;
        catch java.io.IOException from label08 to label09 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.FileNotFoundException from label17 to label18 with label21;
        catch java.io.IOException from label17 to label18 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label19;
        catch java.io.FileNotFoundException from label18 to label19 with label21;
        catch java.io.IOException from label18 to label19 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label19;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    private android.util.AtomicFile getFile(java.lang.String)
    {
        com.android.server.slice.SlicePermissionManager r0;
        java.lang.String r1;
        java.io.File $r2, $r4, $r5, $r6;
        boolean $z0;
        android.util.AtomicFile $r3;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.slice.SlicePermissionManager: java.io.File mSliceDir>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<com.android.server.slice.SlicePermissionManager: java.io.File mSliceDir>;

        virtualinvoke $r6.<java.io.File: boolean mkdir()>();

     label1:
        $r3 = new android.util.AtomicFile;

        $r4 = new java.io.File;

        $r5 = r0.<com.android.server.slice.SlicePermissionManager: java.io.File mSliceDir>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, r1);

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        return $r3;
    }

    private com.android.server.slice.SlicePermissionManager$ParserHolder getParser(java.lang.String) throws java.io.FileNotFoundException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.SlicePermissionManager$ParserHolder $r2;
        java.io.FileInputStream $r3;
        org.xmlpull.v1.XmlPullParserFactory $r5;
        org.xmlpull.v1.XmlPullParser $r6, $r8;
        java.io.InputStream $r9;
        android.util.Xml$Encoding $r10;
        java.lang.String $r11, r12;
        android.util.AtomicFile r13;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r12 := @parameter0: java.lang.String;

        r13 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: android.util.AtomicFile getFile(java.lang.String)>(r12);

        $r2 = new com.android.server.slice.SlicePermissionManager$ParserHolder;

        specialinvoke $r2.<com.android.server.slice.SlicePermissionManager$ParserHolder: void <init>(com.android.server.slice.SlicePermissionManager,com.android.server.slice.SlicePermissionManager$1)>(r0, null);

        $r3 = virtualinvoke r13.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: java.io.InputStream access$302(com.android.server.slice.SlicePermissionManager$ParserHolder,java.io.InputStream)>($r2, $r3);

        $r5 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        $r6 = virtualinvoke $r5.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParser newPullParser()>();

        staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$102(com.android.server.slice.SlicePermissionManager$ParserHolder,org.xmlpull.v1.XmlPullParser)>($r2, $r6);

        $r8 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>($r2);

        $r9 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: java.io.InputStream access$300(com.android.server.slice.SlicePermissionManager$ParserHolder)>($r2);

        $r10 = <android.util.Xml$Encoding: android.util.Xml$Encoding UTF_8>;

        $r11 = virtualinvoke $r10.<android.util.Xml$Encoding: java.lang.String name()>();

        interfaceinvoke $r8.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>($r9, $r11);

        return $r2;
    }

    private com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.util.ArrayMap $r1, $r5, r20, r25, r33, $r34;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.xmlpull.v1.XmlPullParser $r4;
        android.os.Handler $r7, $r8;
        android.os.Message $r9;
        java.lang.Throwable $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        com.android.server.slice.SlicePermissionManager$PkgUser r19;
        com.android.server.slice.SliceProviderPermissions r21, r22, r24, $r32;
        com.android.server.slice.SlicePermissionManager$ParserHolder r23;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r19 := @parameter0: com.android.server.slice.SlicePermissionManager$PkgUser;

        r20 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        entermonitor r20;

     label01:
        $r1 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r19);

        r21 = (com.android.server.slice.SliceProviderPermissions) $r2;

        exitmonitor r20;

     label02:
        r22 = r21;

        if r21 != null goto label28;

     label03:
        $r3 = staticinvoke <com.android.server.slice.SliceProviderPermissions: java.lang.String getFileName(com.android.server.slice.SlicePermissionManager$PkgUser)>(r19);

        r23 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SlicePermissionManager$ParserHolder getParser(java.lang.String)>($r3);

     label04:
        $r4 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r23);

        r24 = staticinvoke <com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SliceProviderPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>($r4, r0);

        r25 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        entermonitor r25;

     label05:
        $r5 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24);

        exitmonitor r25;

     label06:
        $r8 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r7 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r19);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, 300000L);

     label07:
        if r23 == null goto label09;

     label08:
        virtualinvoke r23.<com.android.server.slice.SlicePermissionManager$ParserHolder: void close()>();

     label09:
        return r24;

     label10:
        $r18 := @caughtexception;

     label11:
        exitmonitor r25;

     label12:
        throw $r18;

     label13:
        $r12 := @caughtexception;

        if r23 == null goto label18;

     label14:
        virtualinvoke r23.<com.android.server.slice.SlicePermissionManager$ParserHolder: void close()>();

     label15:
        goto label18;

     label16:
        $r16 := @caughtexception;

     label17:
        virtualinvoke $r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

     label18:
        throw $r12;

     label19:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SlicePermissionManager", "Can\'t read provider", $r13);

        goto label22;

     label20:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SlicePermissionManager", "Can\'t read provider", $r10);

        goto label22;

     label21:
        $r14 := @caughtexception;

     label22:
        $r32 = new com.android.server.slice.SliceProviderPermissions;

        specialinvoke $r32.<com.android.server.slice.SliceProviderPermissions: void <init>(com.android.server.slice.SlicePermissionManager$PkgUser,com.android.server.slice.DirtyTracker)>(r19, r0);

        r22 = $r32;

        r33 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        entermonitor r33;

     label23:
        $r34 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r32);

        exitmonitor r33;

     label24:
        goto label28;

     label25:
        $r17 := @caughtexception;

     label26:
        exitmonitor r33;

     label27:
        throw $r17;

     label28:
        return r22;

     label29:
        $r15 := @caughtexception;

     label30:
        exitmonitor r20;

     label31:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.io.FileNotFoundException from label03 to label04 with label21;
        catch java.io.IOException from label03 to label04 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.io.FileNotFoundException from label08 to label09 with label21;
        catch java.io.IOException from label08 to label09 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.FileNotFoundException from label17 to label18 with label21;
        catch java.io.IOException from label17 to label18 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label19;
        catch java.io.FileNotFoundException from label18 to label19 with label21;
        catch java.io.IOException from label18 to label19 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label19;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    private void handleRemove(com.android.server.slice.SlicePermissionManager$PkgUser)
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.SlicePermissionManager$PkgUser r1;
        java.lang.String $r2, $r4;
        android.util.AtomicFile $r3, $r5;
        android.util.ArrayMap $r6, $r9;
        android.util.ArraySet $r7, $r10;
        java.lang.Object $r8, $r11;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: com.android.server.slice.SlicePermissionManager$PkgUser;

        $r2 = staticinvoke <com.android.server.slice.SliceClientPermissions: java.lang.String getFileName(com.android.server.slice.SlicePermissionManager$PkgUser)>(r1);

        $r3 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: android.util.AtomicFile getFile(java.lang.String)>($r2);

        virtualinvoke $r3.<android.util.AtomicFile: void delete()>();

        $r4 = staticinvoke <com.android.server.slice.SliceProviderPermissions: java.lang.String getFileName(com.android.server.slice.SlicePermissionManager$PkgUser)>(r1);

        $r5 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: android.util.AtomicFile getFile(java.lang.String)>($r4);

        virtualinvoke $r5.<android.util.AtomicFile: void delete()>();

        $r7 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty>;

        $r6 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke $r7.<android.util.ArraySet: boolean remove(java.lang.Object)>($r8);

        $r10 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty>;

        $r9 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke $r10.<android.util.ArraySet: boolean remove(java.lang.Object)>($r11);

        return;
    }

    static void lambda$writeBackup$0(com.android.server.slice.DirtyTracker$Persistable)
    {
        com.android.server.slice.DirtyTracker$Persistable r0;

        r0 := @parameter0: com.android.server.slice.DirtyTracker$Persistable;

        return;
    }

    void addDirtyImmediate(com.android.server.slice.DirtyTracker$Persistable)
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.DirtyTracker$Persistable r1;
        android.util.ArraySet $r2;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: com.android.server.slice.DirtyTracker$Persistable;

        $r2 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty>;

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String[] getAllPackagesGranted(java.lang.String)
    {
        com.android.server.slice.SlicePermissionManager r0;
        java.util.Iterator r2, r17;
        android.util.ArraySet $r3;
        com.android.server.slice.SlicePermissionManager$PkgUser $r4, $r14;
        com.android.server.slice.SliceProviderPermissions $r5;
        java.util.Collection $r6, $r12;
        boolean $z0, $z1;
        int $i0;
        java.lang.String[] $r7, $r9;
        java.lang.Object[] $r8;
        java.lang.Object $r10, $r13;
        com.android.server.slice.SliceProviderPermissions$SliceAuthority $r11;
        java.lang.String $r15, r16;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r16 := @parameter0: java.lang.String;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        $r4 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r4.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r16, 0);

        $r5 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>($r4);

        $r6 = virtualinvoke $r5.<com.android.server.slice.SliceProviderPermissions: java.util.Collection getAuthorities()>();

        r17 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.slice.SliceProviderPermissions$SliceAuthority) $r10;

        $r12 = virtualinvoke $r11.<com.android.server.slice.SliceProviderPermissions$SliceAuthority: java.util.Collection getPkgs()>();

        r2 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (com.android.server.slice.SlicePermissionManager$PkgUser) $r13;

        $r15 = staticinvoke <com.android.server.slice.SlicePermissionManager$PkgUser: java.lang.String access$000(com.android.server.slice.SlicePermissionManager$PkgUser)>($r14);

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r15);

        goto label2;

     label3:
        goto label1;

     label4:
        $i0 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        $r7 = newarray (java.lang.String)[$i0];

        $r8 = virtualinvoke $r3.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.String[]) $r8;

        return $r9;
    }

    public void grantFullAccess(java.lang.String, int)
    {
        com.android.server.slice.SlicePermissionManager r0;
        java.lang.String r1;
        int i0;
        com.android.server.slice.SlicePermissionManager$PkgUser $r2;
        com.android.server.slice.SliceClientPermissions $r3;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r2.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r2);

        virtualinvoke $r3.<com.android.server.slice.SliceClientPermissions: void setHasFullAccess(boolean)>(1);

        return;
    }

    public void grantSliceAccess(java.lang.String, int, java.lang.String, int, android.net.Uri)
    {
        com.android.server.slice.SlicePermissionManager r0;
        int i0, i1;
        android.net.Uri r1, $r6;
        com.android.server.slice.SlicePermissionManager$PkgUser $r2, $r3;
        com.android.server.slice.SliceClientPermissions $r4;
        com.android.server.slice.SliceProviderPermissions $r5;
        java.lang.String $r7, r9, r10;
        com.android.server.slice.SliceProviderPermissions$SliceAuthority $r8;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r10 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r1 := @parameter4: android.net.Uri;

        $r2 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r2.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r9, i0);

        $r3 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r3.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r10, i1);

        $r4 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r2);

        virtualinvoke $r4.<com.android.server.slice.SliceClientPermissions: void grantUri(android.net.Uri,com.android.server.slice.SlicePermissionManager$PkgUser)>(r1, $r3);

        $r5 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>($r3);

        $r6 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r1);

        $r7 = virtualinvoke $r6.<android.net.Uri: java.lang.String getAuthority()>();

        $r8 = virtualinvoke $r5.<com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SliceProviderPermissions$SliceAuthority getOrCreateAuthority(java.lang.String)>($r7);

        virtualinvoke $r8.<com.android.server.slice.SliceProviderPermissions$SliceAuthority: void addPkg(com.android.server.slice.SlicePermissionManager$PkgUser)>($r2);

        return;
    }

    void handlePersist()
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.DirtyTracker$Persistable r1;
        android.util.AtomicFile r2;
        java.io.FileOutputStream r3;
        android.util.ArraySet $r4, $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7, $r10;
        org.xmlpull.v1.XmlPullParserFactory $r8;
        android.util.Xml$Encoding $r9;
        java.lang.Throwable $r11, $r12, $r13;
        java.util.Iterator r14;
        org.xmlpull.v1.XmlSerializer r15;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        entermonitor r0;

     label01:
        $r4 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty>;

        r14 = virtualinvoke $r4.<android.util.ArraySet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.slice.DirtyTracker$Persistable) $r6;

        $r7 = interfaceinvoke r1.<com.android.server.slice.DirtyTracker$Persistable: java.lang.String getFileName()>();

        r2 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: android.util.AtomicFile getFile(java.lang.String)>($r7);

     label03:
        r3 = virtualinvoke r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label04:
        $r8 = staticinvoke <org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlPullParserFactory newInstance()>();

        r15 = virtualinvoke $r8.<org.xmlpull.v1.XmlPullParserFactory: org.xmlpull.v1.XmlSerializer newSerializer()>();

        $r9 = <android.util.Xml$Encoding: android.util.Xml$Encoding UTF_8>;

        $r10 = virtualinvoke $r9.<android.util.Xml$Encoding: java.lang.String name()>();

        interfaceinvoke r15.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r3, $r10);

        interfaceinvoke r1.<com.android.server.slice.DirtyTracker$Persistable: void writeTo(org.xmlpull.v1.XmlSerializer)>(r15);

        interfaceinvoke r15.<org.xmlpull.v1.XmlSerializer: void flush()>();

        virtualinvoke r2.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r3);

     label05:
        goto label08;

     label06:
        $r11 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SlicePermissionManager", "Failed to save access file, restoring backup", $r11);

        virtualinvoke r2.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r3);

     label08:
        goto label02;

     label09:
        $r13 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SlicePermissionManager", "Failed to save access file", $r13);

        exitmonitor r0;

     label11:
        return;

     label12:
        $r5 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArraySet mDirty>;

        virtualinvoke $r5.<android.util.ArraySet: void clear()>();

        exitmonitor r0;

     label13:
        return;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r0;

     label16:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.io.IOException from label04 to label05 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label06;
        catch java.lang.RuntimeException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean hasFullAccess(java.lang.String, int)
    {
        com.android.server.slice.SlicePermissionManager r0;
        java.lang.String r1;
        int i0;
        com.android.server.slice.SlicePermissionManager$PkgUser $r2;
        com.android.server.slice.SliceClientPermissions $r3;
        boolean $z0;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r2.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r2);

        $z0 = virtualinvoke $r3.<com.android.server.slice.SliceClientPermissions: boolean hasFullAccess()>();

        return $z0;
    }

    public boolean hasPermission(java.lang.String, int, android.net.Uri)
    {
        com.android.server.slice.SlicePermissionManager r0;
        android.net.Uri r1, $r3;
        com.android.server.slice.SlicePermissionManager$PkgUser $r2;
        boolean $z0, $z1, z2;
        java.lang.String r4;
        int i0, i1;
        com.android.server.slice.SliceClientPermissions r5;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.Uri;

        $r2 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r2.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r4, i0);

        r5 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r2);

        i1 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r1, i0);

        $z0 = virtualinvoke r5.<com.android.server.slice.SliceClientPermissions: boolean hasFullAccess()>();

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r1);

        $z1 = virtualinvoke r5.<com.android.server.slice.SliceClientPermissions: boolean hasPermission(android.net.Uri,int)>($r3, i1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public void onPersistableDirty(com.android.server.slice.DirtyTracker$Persistable)
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.DirtyTracker$Persistable r1;
        android.os.Handler $r2, $r3, $r5;
        android.os.Message $r4;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r1 := @parameter0: com.android.server.slice.DirtyTracker$Persistable;

        $r2 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(2);

        $r3 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        $r5 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(2, 500L);

        return;
    }

    public void readRestore(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.slice.SlicePermissionManager r0;
        int $i0, $i1, $i2, $i3, $i7;
        java.lang.String $r1, $r2, $r3, $r4, $r19, $r20;
        boolean $z0, $z1, $z4;
        android.util.ArrayMap $r5, $r12, r26, r29;
        com.android.server.slice.SlicePermissionManager$PkgUser $r6, $r10, $r13, $r17;
        android.os.Handler $r8, $r9, $r15, $r16;
        android.os.Message $r11, $r18;
        java.lang.Throwable $r21, $r22, $r23;
        org.xmlpull.v1.XmlPullParser r24;
        com.android.server.slice.SliceClientPermissions r25;
        com.android.server.slice.SliceProviderPermissions r28;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r24 := @parameter0: org.xmlpull.v1.XmlPullParser;

        entermonitor r0;

     label01:
        $i0 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i0 != 2 goto label02;

        $r19 = "slice-access-list";

        $r20 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z4 != 0 goto label04;

     label02:
        $i1 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i1 == 1 goto label04;

        interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        goto label01;

     label04:
        $i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r24, "version", 0);

        if $i2 >= 2 goto label06;

        exitmonitor r0;

     label05:
        return;

     label06:
        $i7 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i7 == 1 goto label24;

        $i3 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i3 != 2 goto label22;

        $r1 = "client";

        $r2 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label13;

        r25 = staticinvoke <com.android.server.slice.SliceClientPermissions: com.android.server.slice.SliceClientPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>(r24, r0);

        r26 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        entermonitor r26;

     label07:
        $r12 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedClients>;

        $r13 = virtualinvoke r25.<com.android.server.slice.SliceClientPermissions: com.android.server.slice.SlicePermissionManager$PkgUser getPkg()>();

        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r25);

        exitmonitor r26;

     label08:
        virtualinvoke r0.<com.android.server.slice.SlicePermissionManager: void onPersistableDirty(com.android.server.slice.DirtyTracker$Persistable)>(r25);

        $r15 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r16 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r17 = virtualinvoke r25.<com.android.server.slice.SliceClientPermissions: com.android.server.slice.SlicePermissionManager$PkgUser getPkg()>();

        $r18 = virtualinvoke $r16.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, $r17);

        virtualinvoke $r15.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r18, 300000L);

     label09:
        goto label06;

     label10:
        $r22 := @caughtexception;

     label11:
        exitmonitor r26;

     label12:
        throw $r22;

     label13:
        $r3 = "provider";

        $r4 = interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label20;

        r28 = staticinvoke <com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SliceProviderPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>(r24, r0);

        r29 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        entermonitor r29;

     label14:
        $r5 = r0.<com.android.server.slice.SlicePermissionManager: android.util.ArrayMap mCachedProviders>;

        $r6 = virtualinvoke r28.<com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SlicePermissionManager$PkgUser getPkg()>();

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r28);

        exitmonitor r29;

     label15:
        virtualinvoke r0.<com.android.server.slice.SlicePermissionManager: void onPersistableDirty(com.android.server.slice.DirtyTracker$Persistable)>(r28);

        $r8 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r9 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r10 = virtualinvoke r28.<com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SlicePermissionManager$PkgUser getPkg()>();

        $r11 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, $r10);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r11, 300000L);

     label16:
        goto label06;

     label17:
        $r23 := @caughtexception;

     label18:
        exitmonitor r29;

     label19:
        throw $r23;

     label20:
        interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int next()>();

     label21:
        goto label06;

     label22:
        interfaceinvoke r24.<org.xmlpull.v1.XmlPullParser: int next()>();

     label23:
        goto label06;

     label24:
        exitmonitor r0;

     label25:
        return;

     label26:
        $r21 := @caughtexception;

     label27:
        exitmonitor r0;

     label28:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    public void removePkg(java.lang.String, int)
    {
        com.android.server.slice.SlicePermissionManager r0;
        int i0;
        com.android.server.slice.SliceProviderPermissions$SliceAuthority r2;
        java.util.Iterator r3, r17;
        com.android.server.slice.SlicePermissionManager$PkgUser $r4, $r13;
        com.android.server.slice.SliceProviderPermissions $r5;
        java.util.Collection $r6, $r11;
        boolean $z0, $z1;
        com.android.server.slice.SliceClientPermissions $r7, $r14;
        android.os.Handler $r8;
        android.os.Message $r9;
        java.lang.Object $r10, $r12;
        java.lang.String $r15, r16;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r16 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r4.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r16, i0);

        $r5 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>($r4);

        $r6 = virtualinvoke $r5.<com.android.server.slice.SliceProviderPermissions: java.util.Collection getAuthorities()>();

        r17 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.slice.SliceProviderPermissions$SliceAuthority) $r10;

        $r11 = virtualinvoke r2.<com.android.server.slice.SliceProviderPermissions$SliceAuthority: java.util.Collection getPkgs()>();

        r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.android.server.slice.SlicePermissionManager$PkgUser) $r12;

        $r14 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r13);

        $r15 = virtualinvoke r2.<com.android.server.slice.SliceProviderPermissions$SliceAuthority: java.lang.String getAuthority()>();

        virtualinvoke $r14.<com.android.server.slice.SliceClientPermissions: void removeAuthority(java.lang.String,int)>($r15, i0);

        goto label2;

     label3:
        goto label1;

     label4:
        $r7 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r4);

        virtualinvoke $r7.<com.android.server.slice.SliceClientPermissions: void clear()>();

        $r8 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, $r4);

        virtualinvoke $r9.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void revokeSliceAccess(java.lang.String, int, java.lang.String, int, android.net.Uri)
    {
        com.android.server.slice.SlicePermissionManager r0;
        int i0, i1;
        android.net.Uri r1;
        com.android.server.slice.SlicePermissionManager$PkgUser $r2, $r3;
        com.android.server.slice.SliceClientPermissions $r4;
        java.lang.String r5, r6;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r1 := @parameter4: android.net.Uri;

        $r2 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r2.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r5, i0);

        $r3 = new com.android.server.slice.SlicePermissionManager$PkgUser;

        specialinvoke $r3.<com.android.server.slice.SlicePermissionManager$PkgUser: void <init>(java.lang.String,int)>(r6, i1);

        $r4 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>($r2);

        virtualinvoke $r4.<com.android.server.slice.SliceClientPermissions: void revokeUri(android.net.Uri,com.android.server.slice.SlicePermissionManager$PkgUser)>(r1, $r3);

        return;
    }

    public void writeBackup(org.xmlpull.v1.XmlSerializer) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.slice.SlicePermissionManager r0;
        com.android.server.slice.'-$$Lambda$SlicePermissionManager$y3Tun5dTftw8s8sky62syeWR34U' r1;
        java.lang.String[] r2;
        int i0, $i1, $i2, i3;
        java.lang.String r3, $r5, $r8, $r10, $r13, $r15;
        com.android.server.slice.SlicePermissionManager$ParserHolder r4;
        android.os.Handler $r6, $r18;
        boolean $z0, $z1;
        java.io.File $r7, r29;
        org.xmlpull.v1.XmlPullParser $r9, $r11, $r12, $r14, $r16, $r17;
        java.lang.Throwable $r19, $r20, $r21;
        org.xmlpull.v1.XmlSerializer r22;
        com.android.server.slice.DirtyTracker$Persistable r24;
        java.lang.StringBuilder r30;
        com.android.server.slice.DirtyTracker r31, r32;

        r0 := @this: com.android.server.slice.SlicePermissionManager;

        r22 := @parameter0: org.xmlpull.v1.XmlSerializer;

        entermonitor r0;

     label01:
        interfaceinvoke r22.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "slice-access-list");

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(2);

        interfaceinvoke r22.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "version", $r5);

        r1 = <com.android.server.slice._$$Lambda$SlicePermissionManager$y3Tun5dTftw8s8sky62syeWR34U: com.android.server.slice.'-$$Lambda$SlicePermissionManager$y3Tun5dTftw8s8sky62syeWR34U' INSTANCE>;

        $r6 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r6.<android.os.Handler: boolean hasMessages(int)>(2);

        if $z0 == 0 goto label02;

        $r18 = r0.<com.android.server.slice.SlicePermissionManager: android.os.Handler mHandler>;

        virtualinvoke $r18.<android.os.Handler: void removeMessages(int)>(2);

        virtualinvoke r0.<com.android.server.slice.SlicePermissionManager: void handlePersist()>();

     label02:
        r29 = new java.io.File;

        $r7 = r0.<com.android.server.slice.SlicePermissionManager: java.io.File mSliceDir>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r29.<java.io.File: void <init>(java.lang.String)>($r8);

        r2 = virtualinvoke r29.<java.io.File: java.lang.String[] list()>();

        i0 = lengthof r2;

     label03:
        i3 = 0;

     label04:
        if i3 >= i0 goto label26;

        r3 = r2[i3];

     label05:
        r4 = specialinvoke r0.<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SlicePermissionManager$ParserHolder getParser(java.lang.String)>(r3);

     label06:
        r24 = null;

     label07:
        $r9 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r4);

        $i1 = interfaceinvoke $r9.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i1 == 1 goto label13;

        $r11 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r4);

        $i2 = interfaceinvoke $r11.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i2 != 2 goto label11;

        $r13 = "client";

        $r14 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r4);

        $r15 = interfaceinvoke $r14.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label09;

        $r17 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r4);

        r31 = (com.android.server.slice.DirtyTracker) r1;

        r24 = staticinvoke <com.android.server.slice.SliceClientPermissions: com.android.server.slice.SliceClientPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>($r17, r31);

     label08:
        goto label13;

     label09:
        $r16 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r4);

        r32 = (com.android.server.slice.DirtyTracker) r1;

        r24 = staticinvoke <com.android.server.slice.SliceProviderPermissions: com.android.server.slice.SliceProviderPermissions createFrom(org.xmlpull.v1.XmlPullParser,com.android.server.slice.DirtyTracker)>($r16, r32);

     label10:
        goto label13;

     label11:
        $r12 = staticinvoke <com.android.server.slice.SlicePermissionManager$ParserHolder: org.xmlpull.v1.XmlPullParser access$100(com.android.server.slice.SlicePermissionManager$ParserHolder)>(r4);

        interfaceinvoke $r12.<org.xmlpull.v1.XmlPullParser: int next()>();

     label12:
        goto label06;

     label13:
        if r24 == null goto label16;

     label14:
        interfaceinvoke r24.<com.android.server.slice.DirtyTracker$Persistable: void writeTo(org.xmlpull.v1.XmlSerializer)>(r22);

     label15:
        goto label17;

     label16:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or empty slice permissions file: ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SlicePermissionManager", $r10);

     label17:
        if r4 == null goto label19;

     label18:
        virtualinvoke r4.<com.android.server.slice.SlicePermissionManager$ParserHolder: void close()>();

     label19:
        i3 = i3 + 1;

        goto label04;

     label20:
        $r20 := @caughtexception;

        if r4 == null goto label25;

     label21:
        virtualinvoke r4.<com.android.server.slice.SlicePermissionManager$ParserHolder: void close()>();

     label22:
        goto label25;

     label23:
        $r21 := @caughtexception;

     label24:
        virtualinvoke $r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

     label25:
        throw $r20;

     label26:
        interfaceinvoke r22.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "slice-access-list");

     label27:
        exitmonitor r0;

     label28:
        return;

     label29:
        $r19 := @caughtexception;

     label30:
        exitmonitor r0;

     label31:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    public static void <clinit>()
    {
        <com.android.server.slice.SlicePermissionManager: long WRITE_GRACE_PERIOD> = 500L;

        <com.android.server.slice.SlicePermissionManager: java.lang.String TAG_LIST> = "slice-access-list";

        <com.android.server.slice.SlicePermissionManager: java.lang.String TAG> = "SlicePermissionManager";

        <com.android.server.slice.SlicePermissionManager: java.lang.String SLICE_DIR> = "slice";

        <com.android.server.slice.SlicePermissionManager: long PERMISSION_CACHE_PERIOD> = 300000L;

        <com.android.server.slice.SlicePermissionManager: int DB_VERSION> = 2;

        return;
    }
}
