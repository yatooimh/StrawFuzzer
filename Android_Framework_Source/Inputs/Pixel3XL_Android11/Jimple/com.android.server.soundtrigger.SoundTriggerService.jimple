public class com.android.server.soundtrigger.SoundTriggerService extends com.android.server.SystemService
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static final com.android.server.soundtrigger.SoundTriggerLogger sEventLogger;
    private final java.util.TreeMap mCallbacks;
    private java.lang.Object mCallbacksLock;
    final android.content.Context mContext;
    private com.android.server.soundtrigger.SoundTriggerDbHelper mDbHelper;
    private final java.util.TreeMap mLoadedModels;
    private final com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService mLocalSoundTriggerService;
    private java.lang.Object mLock;
    private final android.util.ArrayMap mNumOpsPerPackage;
    private final com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub mServiceStub;
    private final com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker mSoundModelStatTracker;
    private com.android.server.soundtrigger.SoundTriggerHelper mSoundTriggerHelper;

    static void <clinit>()
    {
        com.android.server.soundtrigger.SoundTriggerLogger $r0;

        <com.android.server.soundtrigger.SoundTriggerService: java.lang.String TAG> = "SoundTriggerService";

        <com.android.server.soundtrigger.SoundTriggerService: boolean DEBUG> = 1;

        $r0 = new com.android.server.soundtrigger.SoundTriggerLogger;

        specialinvoke $r0.<com.android.server.soundtrigger.SoundTriggerLogger: void <init>(int,java.lang.String)>(200, "SoundTrigger activity");

        <com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerLogger sEventLogger> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        android.content.Context r1;
        android.util.ArrayMap $r2;
        com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub $r3;
        com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService $r4;
        java.util.TreeMap $r5, $r7;
        java.lang.Object $r6, $r8;
        com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker $r9;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.soundtrigger.SoundTriggerService: android.util.ArrayMap mNumOpsPerPackage> = $r2;

        r0.<com.android.server.soundtrigger.SoundTriggerService: android.content.Context mContext> = r1;

        $r3 = new com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub;

        specialinvoke $r3.<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void <init>(com.android.server.soundtrigger.SoundTriggerService)>(r0);

        r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub mServiceStub> = $r3;

        $r4 = new com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService;

        specialinvoke $r4.<com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService: void <init>(com.android.server.soundtrigger.SoundTriggerService,android.content.Context)>(r0, r1);

        r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService mLocalSoundTriggerService> = $r4;

        $r5 = new java.util.TreeMap;

        specialinvoke $r5.<java.util.TreeMap: void <init>()>();

        r0.<com.android.server.soundtrigger.SoundTriggerService: java.util.TreeMap mLoadedModels> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.soundtrigger.SoundTriggerService: java.lang.Object mCallbacksLock> = $r6;

        $r7 = new java.util.TreeMap;

        specialinvoke $r7.<java.util.TreeMap: void <init>()>();

        r0.<com.android.server.soundtrigger.SoundTriggerService: java.util.TreeMap mCallbacks> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.soundtrigger.SoundTriggerService: java.lang.Object mLock> = $r8;

        $r9 = new com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker;

        specialinvoke $r9.<com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker: void <init>(com.android.server.soundtrigger.SoundTriggerService)>(r0);

        r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker mSoundModelStatTracker> = $r9;

        return;
    }

    static void access$000(com.android.server.soundtrigger.SoundTriggerService, java.lang.String)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: void enforceCallingPermission(java.lang.String)>(r1);

        return;
    }

    static boolean access$100(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $z0 = specialinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: boolean isInitialized()>();

        return $z0;
    }

    static void access$1000(com.android.server.soundtrigger.SoundTriggerService, android.content.ComponentName)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        android.content.ComponentName r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        r1 := @parameter1: android.content.ComponentName;

        specialinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: void enforceDetectionPermissions(android.content.ComponentName)>(r1);

        return;
    }

    static android.util.ArrayMap access$1100(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: android.util.ArrayMap mNumOpsPerPackage>;

        return $r1;
    }

    static com.android.server.soundtrigger.SoundTriggerLogger access$200()
    {
        com.android.server.soundtrigger.SoundTriggerLogger $r0;

        $r0 = <com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerLogger sEventLogger>;

        return $r0;
    }

    static com.android.server.soundtrigger.SoundTriggerHelper access$300(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        com.android.server.soundtrigger.SoundTriggerHelper $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerHelper mSoundTriggerHelper>;

        return $r1;
    }

    static com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker access$400(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker mSoundModelStatTracker>;

        return $r1;
    }

    static com.android.server.soundtrigger.SoundTriggerDbHelper access$500(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        com.android.server.soundtrigger.SoundTriggerDbHelper $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerDbHelper mDbHelper>;

        return $r1;
    }

    static java.lang.Object access$600(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.TreeMap access$700(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        java.util.TreeMap $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: java.util.TreeMap mLoadedModels>;

        return $r1;
    }

    static java.lang.Object access$800(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: java.lang.Object mCallbacksLock>;

        return $r1;
    }

    static java.util.TreeMap access$900(com.android.server.soundtrigger.SoundTriggerService)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        java.util.TreeMap $r1;

        r0 := @parameter0: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: java.util.TreeMap mCallbacks>;

        return $r1;
    }

    private void enforceCallingPermission(java.lang.String)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        java.lang.String r1, $r8;
        android.content.Context $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.soundtrigger.SoundTriggerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller does not hold the permission ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private void enforceDetectionPermissions(android.content.ComponentName)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        android.content.ComponentName r1;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        java.lang.String $r5, $r7, $r12;
        int $i0;
        java.lang.StringBuilder $r6;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        r1 := @parameter0: android.content.ComponentName;

        $r3 = r0.<com.android.server.soundtrigger.SoundTriggerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i0 = virtualinvoke $r4.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>("android.permission.CAPTURE_AUDIO_HOTWORD", $r5);

        if $i0 != 0 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have permission ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.CAPTURE_AUDIO_HOTWORD");

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    private void initSoundTriggerHelper()
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        com.android.server.soundtrigger.SoundTriggerHelper $r1, r4;
        android.content.Context $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerHelper mSoundTriggerHelper>;

        if $r1 != null goto label2;

        r4 = new com.android.server.soundtrigger.SoundTriggerHelper;

        $r2 = r0.<com.android.server.soundtrigger.SoundTriggerService: android.content.Context mContext>;

        specialinvoke r4.<com.android.server.soundtrigger.SoundTriggerHelper: void <init>(android.content.Context)>($r2);

        r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerHelper mSoundTriggerHelper> = r4;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean isInitialized()
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        com.android.server.soundtrigger.SoundTriggerHelper $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerHelper mSoundTriggerHelper>;

        if $r2 != null goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SoundTriggerService", "SoundTriggerHelper not initialized.");

     label2:
        exitmonitor r0;

        return 0;

     label3:
        exitmonitor r0;

        return 1;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void onBootPhase(int)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        int i0;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1;
        java.lang.String $r7;
        com.android.server.soundtrigger.SoundTriggerDbHelper $r8;
        android.content.Context $r9;
        com.android.server.soundtrigger.SoundTriggerHelper $r10;
        com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService $r11;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onBootPhase: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $z0 = virtualinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: boolean isSafeMode()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SoundTriggerService", $r7);

        if 520 != i0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: boolean isSafeMode()>();

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SoundTriggerService", "not enabling SoundTriggerService in safe mode");

        return;

     label1:
        specialinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: void initSoundTriggerHelper()>();

        $r11 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService mLocalSoundTriggerService>;

        $r10 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerHelper mSoundTriggerHelper>;

        virtualinvoke $r11.<com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService: void setSoundTriggerHelper(com.android.server.soundtrigger.SoundTriggerHelper)>($r10);

        goto label3;

     label2:
        if 600 != i0 goto label3;

        $r8 = new com.android.server.soundtrigger.SoundTriggerDbHelper;

        $r9 = r0.<com.android.server.soundtrigger.SoundTriggerService: android.content.Context mContext>;

        specialinvoke $r8.<com.android.server.soundtrigger.SoundTriggerDbHelper: void <init>(android.content.Context)>($r9);

        r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerDbHelper mDbHelper> = $r8;

     label3:
        return;
    }

    public void onStart()
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub $r1;
        com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService $r2;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        $r1 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub mServiceStub>;

        virtualinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: void publishBinderService(java.lang.String,android.os.IBinder)>("soundtrigger", $r1);

        $r2 = r0.<com.android.server.soundtrigger.SoundTriggerService: com.android.server.soundtrigger.SoundTriggerService$LocalSoundTriggerService mLocalSoundTriggerService>;

        virtualinvoke r0.<com.android.server.soundtrigger.SoundTriggerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/soundtrigger/SoundTriggerInternal;", $r2);

        return;
    }

    public void onStartUser(int)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        int i0;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        i0 := @parameter0: int;

        return;
    }

    public void onSwitchUser(int)
    {
        com.android.server.soundtrigger.SoundTriggerService r0;
        int i0;

        r0 := @this: com.android.server.soundtrigger.SoundTriggerService;

        i0 := @parameter0: int;

        return;
    }
}
