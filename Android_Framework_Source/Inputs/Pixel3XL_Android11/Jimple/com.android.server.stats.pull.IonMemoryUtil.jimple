public final class com.android.server.stats.pull.IonMemoryUtil extends java.lang.Object
{
    private static final java.lang.String DEBUG_SYSTEM_ION_HEAP_FILE;
    private static final java.util.regex.Pattern ION_HEAP_SIZE_IN_BYTES;
    private static final java.util.regex.Pattern PROCESS_ION_HEAP_SIZE_IN_BYTES;
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        <com.android.server.stats.pull.IonMemoryUtil: java.lang.String TAG> = "IonMemoryUtil";

        <com.android.server.stats.pull.IonMemoryUtil: java.lang.String DEBUG_SYSTEM_ION_HEAP_FILE> = "/sys/kernel/debug/ion/heaps/system";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\n\\s*total\\s*(\\d+)\\s*\n");

        <com.android.server.stats.pull.IonMemoryUtil: java.util.regex.Pattern ION_HEAP_SIZE_IN_BYTES> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\n\\s+\\S+\\s+(\\d+)\\s+(\\d+)");

        <com.android.server.stats.pull.IonMemoryUtil: java.util.regex.Pattern PROCESS_ION_HEAP_SIZE_IN_BYTES> = $r1;

        return;
    }

    private void <init>()
    {
        com.android.server.stats.pull.IonMemoryUtil r0;

        r0 := @this: com.android.server.stats.pull.IonMemoryUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static long parseIonHeapSizeFromDebugfs(java.lang.String)
    {
        boolean z0, $z1;
        java.util.regex.Pattern $r0;
        java.lang.String $r1, r3;
        java.lang.Throwable $r2;
        long l1;
        java.util.regex.Matcher r4;

        r3 := @parameter0: java.lang.String;

        z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        l1 = 0L;

        if z0 == 0 goto label1;

        return 0L;

     label1:
        $r0 = <com.android.server.stats.pull.IonMemoryUtil: java.util.regex.Pattern ION_HEAP_SIZE_IN_BYTES>;

        r4 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

     label2:
        $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label3;

        $r1 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

     label3:
        return l1;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IonMemoryUtil", "Failed to parse value", $r2);

        return 0L;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    static java.util.List parseProcessIonHeapSizesFromDebugfs(java.lang.String)
    {
        java.util.regex.Matcher r0;
        long l0, $l3, $l4, $l7, $l8;
        com.android.server.stats.pull.IonMemoryUtil$IonAllocations r2, $r7, r14;
        boolean $z0, $z1;
        java.util.regex.Pattern $r3;
        android.util.SparseArray $r4;
        java.util.ArrayList $r5;
        int $i1, $i2, $i5, $i6, i10, i11;
        java.lang.Object $r6, $r10;
        java.lang.String $r8, $r9, r13;
        java.util.List $r11;
        java.lang.Throwable $r12;

        r13 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r13.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r11;

     label01:
        $r3 = <com.android.server.stats.pull.IonMemoryUtil: java.util.regex.Pattern PROCESS_ION_HEAP_SIZE_IN_BYTES>;

        r0 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r13);

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

     label02:
        $z1 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label11;

     label03:
        $r8 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r9 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r9);

        $r10 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i10);

        r2 = (com.android.server.stats.pull.IonMemoryUtil$IonAllocations) $r10;

     label04:
        r14 = r2;

        if r2 != null goto label07;

     label05:
        r14 = new com.android.server.stats.pull.IonMemoryUtil$IonAllocations;

        specialinvoke r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: void <init>()>();

     label06:
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i10, r14);

     label07:
        r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: int pid> = i10;

        $l3 = r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: long totalSizeInBytes>;

        $l4 = $l3 + l0;

        r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: long totalSizeInBytes> = $l4;

        $i5 = r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: int count>;

        $i6 = $i5 + 1;

        r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: int count> = $i6;

        $l7 = r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: long maxSizeInBytes>;

        $l8 = staticinvoke <java.lang.Math: long max(long,long)>($l7, l0);

        r14.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: long maxSizeInBytes> = $l8;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IonMemoryUtil", "Failed to parse value", $r12);

     label10:
        goto label02;

     label11:
        $r5 = new java.util.ArrayList;

        $i1 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i1);

        i11 = 0;

     label12:
        $i2 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i11 >= $i2 goto label13;

        $r6 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i11);

        $r7 = (com.android.server.stats.pull.IonMemoryUtil$IonAllocations) $r6;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        i11 = i11 + 1;

        goto label12;

     label13:
        return $r5;

        catch java.lang.NumberFormatException from label03 to label04 with label09;
        catch java.lang.NumberFormatException from label05 to label06 with label09;
        catch java.lang.NumberFormatException from label06 to label07 with label09;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    private static java.lang.String readFile(java.lang.String)
    {
        java.io.File r0;
        java.lang.Throwable $r1;
        java.lang.String r2, r3;

        r2 := @parameter0: java.lang.String;

     label1:
        r0 = new java.io.File;

        specialinvoke r0.<java.io.File: void <init>(java.lang.String)>(r2);

        r3 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r0, 0, null);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IonMemoryUtil", "Failed to read file", $r1);

        return "";

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.util.List readProcessSystemIonHeapSizesFromDebugfs()
    {
        java.lang.String $r0;
        java.util.List $r1;

        $r0 = staticinvoke <com.android.server.stats.pull.IonMemoryUtil: java.lang.String readFile(java.lang.String)>("/sys/kernel/debug/ion/heaps/system");

        $r1 = staticinvoke <com.android.server.stats.pull.IonMemoryUtil: java.util.List parseProcessIonHeapSizesFromDebugfs(java.lang.String)>($r0);

        return $r1;
    }

    public static long readSystemIonHeapSizeFromDebugfs()
    {
        java.lang.String $r0;
        long $l0;

        $r0 = staticinvoke <com.android.server.stats.pull.IonMemoryUtil: java.lang.String readFile(java.lang.String)>("/sys/kernel/debug/ion/heaps/system");

        $l0 = staticinvoke <com.android.server.stats.pull.IonMemoryUtil: long parseIonHeapSizeFromDebugfs(java.lang.String)>($r0);

        return $l0;
    }
}
