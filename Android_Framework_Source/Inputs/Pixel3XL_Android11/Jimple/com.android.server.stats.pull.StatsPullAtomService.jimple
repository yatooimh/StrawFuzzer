public class com.android.server.stats.pull.StatsPullAtomService extends com.android.server.SystemService
{
    private static final long APP_OPS_SAMPLING_INITIALIZATION_DELAY_MILLIS;
    private static final int APP_OPS_SIZE_ESTIMATE;
    private static final java.lang.String APP_OPS_TARGET_COLLECTION_SIZE;
    private static final java.lang.String COMMON_PERMISSION_PREFIX;
    private static final int CPU_TIME_PER_THREAD_FREQ_MAX_NUM_FREQUENCIES;
    private static final java.lang.String DANGEROUS_PERMISSION_STATE_SAMPLE_RATE;
    private static final boolean DEBUG;
    private static final int DIMENSION_KEY_SIZE_HARD_LIMIT;
    private static final int DIMENSION_KEY_SIZE_SOFT_LIMIT;
    private static final long EXTERNAL_STATS_SYNC_TIMEOUT_MILLIS;
    private static final int MAX_BATTERY_STATS_HELPER_FREQUENCY_MS;
    private static final int MAX_PROCSTATS_RAW_SHARD_SIZE;
    private static final int MAX_PROCSTATS_SHARDS;
    private static final int MAX_PROCSTATS_SHARD_SIZE;
    private static final long MILLIS_PER_SEC;
    private static final long MILLI_AMP_HR_TO_NANO_AMP_SECS;
    private static final long NETSTATS_UID_DEFAULT_BUCKET_DURATION_MS;
    private static final int OP_FLAGS_PULLED;
    private static final int RANDOM_SEED;
    private static final java.lang.String RESULT_RECEIVER_CONTROLLER_KEY;
    private static final java.lang.String TAG;
    private final java.lang.Object mAppOpsLock;
    private int mAppOpsSamplingRate;
    private final java.lang.Object mAppSizeLock;
    private final java.lang.Object mAppsOnExternalStorageInfoLock;
    private final java.lang.Object mAttributedAppOpsLock;
    private java.io.File mBaseDir;
    private com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper;
    private final java.lang.Object mBatteryStatsHelperLock;
    private long mBatteryStatsHelperTimestampMs;
    private final java.lang.Object mBinderCallsStatsExceptionsLock;
    private final java.lang.Object mBinderCallsStatsLock;
    private final java.lang.Object mBluetoothActivityInfoLock;
    private final java.lang.Object mBluetoothBytesTransferLock;
    private final java.lang.Object mBuildInformationLock;
    private final java.lang.Object mCategorySizeLock;
    private final android.content.Context mContext;
    private final java.lang.Object mCooldownDeviceLock;
    private final java.lang.Object mCpuActiveTimeLock;
    private final java.lang.Object mCpuClusterTimeLock;
    private final java.lang.Object mCpuTimePerFreqLock;
    private final java.lang.Object mCpuTimePerThreadFreqLock;
    private final java.lang.Object mCpuTimePerUidFreqLock;
    private final java.lang.Object mCpuTimePerUidLock;
    private com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader mCpuUidActiveTimeReader;
    private com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader mCpuUidClusterTimeReader;
    private com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader mCpuUidFreqTimeReader;
    private com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader mCpuUidUserSysTimeReader;
    private final android.util.ArraySet mDangerousAppOpsList;
    private final java.lang.Object mDangerousAppOpsListLock;
    private final java.lang.Object mDangerousPermissionStateLock;
    private final java.lang.Object mDataBytesTransferLock;
    private final java.lang.Object mDebugElapsedClockLock;
    private long mDebugElapsedClockPreviousValue;
    private long mDebugElapsedClockPullCount;
    private final java.lang.Object mDebugFailingElapsedClockLock;
    private long mDebugFailingElapsedClockPreviousValue;
    private long mDebugFailingElapsedClockPullCount;
    private final java.lang.Object mDeviceCalculatedPowerBlameOtherLock;
    private final java.lang.Object mDeviceCalculatedPowerBlameUidLock;
    private final java.lang.Object mDeviceCalculatedPowerUseLock;
    private final java.lang.Object mDirectoryUsageLock;
    private final java.lang.Object mDiskIoLock;
    private final java.lang.Object mDiskStatsLock;
    private final java.lang.Object mExternalStorageInfoLock;
    private final java.lang.Object mFaceSettingsLock;
    private final java.lang.Object mHealthHalLock;
    private com.android.server.BatteryService$HealthServiceWrapper mHealthService;
    private final java.util.ArrayList mHistoricalSubs;
    private final java.lang.Object mIonHeapSizeLock;
    private com.android.internal.os.KernelCpuSpeedReader[] mKernelCpuSpeedReaders;
    private com.android.internal.os.KernelCpuThreadReaderDiff mKernelCpuThreadReader;
    private final java.lang.Object mKernelWakelockLock;
    private com.android.internal.os.KernelWakelockReader mKernelWakelockReader;
    private final java.lang.Object mLooperStatsLock;
    private final java.lang.Object mModemActivityInfoLock;
    private final java.util.ArrayList mNetworkStatsBaselines;
    private android.app.INotificationManager mNotificationManagerService;
    private final java.lang.Object mNotificationRemoteViewsLock;
    private final java.lang.Object mNotificationStatsLock;
    private final java.lang.Object mNumBiometricsEnrolledLock;
    private final java.lang.Object mPowerProfileLock;
    private final java.lang.Object mProcStatsLock;
    private final java.lang.Object mProcessCpuTimeLock;
    private com.android.internal.os.ProcessCpuTracker mProcessCpuTracker;
    private final java.lang.Object mProcessMemoryHighWaterMarkLock;
    private final java.lang.Object mProcessMemorySnapshotLock;
    private final java.lang.Object mProcessMemoryStateLock;
    private com.android.internal.app.procstats.IProcessStats mProcessStatsService;
    private final java.lang.Object mProcessSystemIonHeapSizeLock;
    private final java.lang.Object mRoleHolderLock;
    private final java.lang.Object mRuntimeAppOpAccessMessageLock;
    private final java.lang.Object mSettingsStatsLock;
    private com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl;
    private android.app.StatsManager mStatsManager;
    private com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener mStatsSubscriptionsListener;
    private android.os.storage.StorageManager mStorageManager;
    private android.os.IStoraged mStorageService;
    private final java.lang.Object mStoragedLock;
    private com.android.internal.os.StoragedUidIoStatsReader mStoragedUidIoStatsReader;
    private android.telephony.SubscriptionManager mSubscriptionManager;
    private final java.lang.Object mSystemElapsedRealtimeLock;
    private final java.lang.Object mSystemIonHeapSizeLock;
    private final java.lang.Object mSystemUptimeLock;
    private android.telephony.TelephonyManager mTelephony;
    private final java.lang.Object mTemperatureLock;
    private final java.lang.Object mThermalLock;
    private android.os.IThermalService mThermalService;
    private final java.lang.Object mTimeZoneDataInfoLock;
    private com.android.internal.os.KernelWakelockStats mTmpWakelockStats;
    private final java.lang.Object mWifiActivityInfoLock;
    private android.net.wifi.WifiManager mWifiManager;

    static void <clinit>()
    {
        java.util.Random $r0;
        int $i0;
        java.util.concurrent.TimeUnit $r1;
        long $l1;

        <com.android.server.stats.pull.StatsPullAtomService: java.lang.String TAG> = "StatsPullAtomService";

        <com.android.server.stats.pull.StatsPullAtomService: java.lang.String RESULT_RECEIVER_CONTROLLER_KEY> = "controller_activity";

        <com.android.server.stats.pull.StatsPullAtomService: int OP_FLAGS_PULLED> = 9;

        <com.android.server.stats.pull.StatsPullAtomService: long MILLI_AMP_HR_TO_NANO_AMP_SECS> = 3600000000L;

        <com.android.server.stats.pull.StatsPullAtomService: long MILLIS_PER_SEC> = 1000L;

        <com.android.server.stats.pull.StatsPullAtomService: int MAX_PROCSTATS_SHARD_SIZE> = 49152;

        <com.android.server.stats.pull.StatsPullAtomService: int MAX_PROCSTATS_SHARDS> = 5;

        <com.android.server.stats.pull.StatsPullAtomService: int MAX_PROCSTATS_RAW_SHARD_SIZE> = 58982;

        <com.android.server.stats.pull.StatsPullAtomService: int MAX_BATTERY_STATS_HELPER_FREQUENCY_MS> = 1000;

        <com.android.server.stats.pull.StatsPullAtomService: long EXTERNAL_STATS_SYNC_TIMEOUT_MILLIS> = 2000L;

        <com.android.server.stats.pull.StatsPullAtomService: int DIMENSION_KEY_SIZE_SOFT_LIMIT> = 500;

        <com.android.server.stats.pull.StatsPullAtomService: int DIMENSION_KEY_SIZE_HARD_LIMIT> = 800;

        <com.android.server.stats.pull.StatsPullAtomService: boolean DEBUG> = 1;

        <com.android.server.stats.pull.StatsPullAtomService: java.lang.String DANGEROUS_PERMISSION_STATE_SAMPLE_RATE> = "dangerous_permission_state_sample_rate";

        <com.android.server.stats.pull.StatsPullAtomService: int CPU_TIME_PER_THREAD_FREQ_MAX_NUM_FREQUENCIES> = 8;

        <com.android.server.stats.pull.StatsPullAtomService: java.lang.String COMMON_PERMISSION_PREFIX> = "android.permission.";

        <com.android.server.stats.pull.StatsPullAtomService: java.lang.String APP_OPS_TARGET_COLLECTION_SIZE> = "app_ops_target_collection_size";

        <com.android.server.stats.pull.StatsPullAtomService: int APP_OPS_SIZE_ESTIMATE> = 2000;

        <com.android.server.stats.pull.StatsPullAtomService: long APP_OPS_SAMPLING_INITIALIZATION_DELAY_MILLIS> = 45000L;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r0.<java.util.Random: int nextInt()>();

        <com.android.server.stats.pull.StatsPullAtomService: int RANDOM_SEED> = $i0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(2L);

        <com.android.server.stats.pull.StatsPullAtomService: long NETSTATS_UID_DEFAULT_BUCKET_DURATION_MS> = $l1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.content.Context r1;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61;
        android.util.ArraySet $r7;
        java.util.ArrayList $r8, $r9;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mThermalLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mStoragedLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNotificationStatsLock> = $r4;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPreviousValue> = 0L;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPullCount> = 0L;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPreviousValue> = 0L;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPullCount> = 0L;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBatteryStatsHelperLock> = $r5;

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper> = null;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mBatteryStatsHelperTimestampMs> = -1000L;

        r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate> = 0;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDangerousAppOpsListLock> = $r6;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.util.ArraySet mDangerousAppOpsList> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mHistoricalSubs> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDataBytesTransferLock> = $r10;

        $r11 = new java.lang.Object;

        specialinvoke $r11.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBluetoothBytesTransferLock> = $r11;

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mKernelWakelockLock> = $r12;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerFreqLock> = $r13;

        $r14 = new java.lang.Object;

        specialinvoke $r14.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerUidLock> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerUidFreqLock> = $r15;

        $r16 = new java.lang.Object;

        specialinvoke $r16.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuActiveTimeLock> = $r16;

        $r17 = new java.lang.Object;

        specialinvoke $r17.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuClusterTimeLock> = $r17;

        $r18 = new java.lang.Object;

        specialinvoke $r18.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mWifiActivityInfoLock> = $r18;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mModemActivityInfoLock> = $r19;

        $r20 = new java.lang.Object;

        specialinvoke $r20.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBluetoothActivityInfoLock> = $r20;

        $r21 = new java.lang.Object;

        specialinvoke $r21.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSystemElapsedRealtimeLock> = $r21;

        $r22 = new java.lang.Object;

        specialinvoke $r22.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSystemUptimeLock> = $r22;

        $r23 = new java.lang.Object;

        specialinvoke $r23.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessMemoryStateLock> = $r23;

        $r24 = new java.lang.Object;

        specialinvoke $r24.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessMemoryHighWaterMarkLock> = $r24;

        $r25 = new java.lang.Object;

        specialinvoke $r25.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessMemorySnapshotLock> = $r25;

        $r26 = new java.lang.Object;

        specialinvoke $r26.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSystemIonHeapSizeLock> = $r26;

        $r27 = new java.lang.Object;

        specialinvoke $r27.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mIonHeapSizeLock> = $r27;

        $r28 = new java.lang.Object;

        specialinvoke $r28.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessSystemIonHeapSizeLock> = $r28;

        $r29 = new java.lang.Object;

        specialinvoke $r29.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mTemperatureLock> = $r29;

        $r30 = new java.lang.Object;

        specialinvoke $r30.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCooldownDeviceLock> = $r30;

        $r31 = new java.lang.Object;

        specialinvoke $r31.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBinderCallsStatsLock> = $r31;

        $r32 = new java.lang.Object;

        specialinvoke $r32.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBinderCallsStatsExceptionsLock> = $r32;

        $r33 = new java.lang.Object;

        specialinvoke $r33.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mLooperStatsLock> = $r33;

        $r34 = new java.lang.Object;

        specialinvoke $r34.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDiskStatsLock> = $r34;

        $r35 = new java.lang.Object;

        specialinvoke $r35.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDirectoryUsageLock> = $r35;

        $r36 = new java.lang.Object;

        specialinvoke $r36.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAppSizeLock> = $r36;

        $r37 = new java.lang.Object;

        specialinvoke $r37.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCategorySizeLock> = $r37;

        $r38 = new java.lang.Object;

        specialinvoke $r38.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNumBiometricsEnrolledLock> = $r38;

        $r39 = new java.lang.Object;

        specialinvoke $r39.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcStatsLock> = $r39;

        $r40 = new java.lang.Object;

        specialinvoke $r40.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDiskIoLock> = $r40;

        $r41 = new java.lang.Object;

        specialinvoke $r41.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mPowerProfileLock> = $r41;

        $r42 = new java.lang.Object;

        specialinvoke $r42.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessCpuTimeLock> = $r42;

        $r43 = new java.lang.Object;

        specialinvoke $r43.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerThreadFreqLock> = $r43;

        $r44 = new java.lang.Object;

        specialinvoke $r44.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDeviceCalculatedPowerUseLock> = $r44;

        $r45 = new java.lang.Object;

        specialinvoke $r45.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDeviceCalculatedPowerBlameUidLock> = $r45;

        $r46 = new java.lang.Object;

        specialinvoke $r46.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDeviceCalculatedPowerBlameOtherLock> = $r46;

        $r47 = new java.lang.Object;

        specialinvoke $r47.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDebugElapsedClockLock> = $r47;

        $r48 = new java.lang.Object;

        specialinvoke $r48.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDebugFailingElapsedClockLock> = $r48;

        $r49 = new java.lang.Object;

        specialinvoke $r49.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBuildInformationLock> = $r49;

        $r50 = new java.lang.Object;

        specialinvoke $r50.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mRoleHolderLock> = $r50;

        $r51 = new java.lang.Object;

        specialinvoke $r51.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mTimeZoneDataInfoLock> = $r51;

        $r52 = new java.lang.Object;

        specialinvoke $r52.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mExternalStorageInfoLock> = $r52;

        $r53 = new java.lang.Object;

        specialinvoke $r53.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAppsOnExternalStorageInfoLock> = $r53;

        $r54 = new java.lang.Object;

        specialinvoke $r54.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mFaceSettingsLock> = $r54;

        $r55 = new java.lang.Object;

        specialinvoke $r55.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAppOpsLock> = $r55;

        $r56 = new java.lang.Object;

        specialinvoke $r56.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mRuntimeAppOpAccessMessageLock> = $r56;

        $r57 = new java.lang.Object;

        specialinvoke $r57.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNotificationRemoteViewsLock> = $r57;

        $r58 = new java.lang.Object;

        specialinvoke $r58.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDangerousPermissionStateLock> = $r58;

        $r59 = new java.lang.Object;

        specialinvoke $r59.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mHealthHalLock> = $r59;

        $r60 = new java.lang.Object;

        specialinvoke $r60.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAttributedAppOpsLock> = $r60;

        $r61 = new java.lang.Object;

        specialinvoke $r61.<java.lang.Object: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSettingsStatsLock> = $r61;

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext> = r1;

        return;
    }

    static java.lang.Object access$000(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDataBytesTransferLock>;

        return $r1;
    }

    static int access$100(com.android.server.stats.pull.StatsPullAtomService, int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1;
        java.util.List r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        $i1 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: int pullDataBytesTransferLocked(int,java.util.List)>(i0, r1);

        return $i1;
    }

    static java.lang.Object access$1000(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mModemActivityInfoLock>;

        return $r1;
    }

    static java.lang.Object access$1100(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBluetoothActivityInfoLock>;

        return $r1;
    }

    static java.lang.Object access$1200(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSystemElapsedRealtimeLock>;

        return $r1;
    }

    static java.lang.Object access$1300(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSystemUptimeLock>;

        return $r1;
    }

    static java.lang.Object access$1400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessMemoryStateLock>;

        return $r1;
    }

    static java.lang.Object access$1500(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessMemoryHighWaterMarkLock>;

        return $r1;
    }

    static java.lang.Object access$1600(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessMemorySnapshotLock>;

        return $r1;
    }

    static java.lang.Object access$1700(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSystemIonHeapSizeLock>;

        return $r1;
    }

    static java.lang.Object access$1800(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mIonHeapSizeLock>;

        return $r1;
    }

    static java.lang.Object access$1900(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessSystemIonHeapSizeLock>;

        return $r1;
    }

    static java.lang.Object access$200(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBluetoothBytesTransferLock>;

        return $r1;
    }

    static java.lang.Object access$2000(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mTemperatureLock>;

        return $r1;
    }

    static java.lang.Object access$2100(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCooldownDeviceLock>;

        return $r1;
    }

    static java.lang.Object access$2200(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBinderCallsStatsLock>;

        return $r1;
    }

    static java.lang.Object access$2300(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBinderCallsStatsExceptionsLock>;

        return $r1;
    }

    static java.lang.Object access$2400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mLooperStatsLock>;

        return $r1;
    }

    static java.lang.Object access$2500(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDiskStatsLock>;

        return $r1;
    }

    static java.lang.Object access$2600(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDirectoryUsageLock>;

        return $r1;
    }

    static java.lang.Object access$2700(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAppSizeLock>;

        return $r1;
    }

    static java.lang.Object access$2800(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCategorySizeLock>;

        return $r1;
    }

    static java.lang.Object access$2900(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNumBiometricsEnrolledLock>;

        return $r1;
    }

    static java.lang.Object access$300(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mKernelWakelockLock>;

        return $r1;
    }

    static int access$3000(com.android.server.stats.pull.StatsPullAtomService, int, int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i2;
        java.util.List r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.List;

        $i2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: int pullNumBiometricsEnrolledLocked(int,int,java.util.List)>(i0, i1, r1);

        return $i2;
    }

    static java.lang.Object access$3100(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcStatsLock>;

        return $r1;
    }

    static int access$3200(com.android.server.stats.pull.StatsPullAtomService, int, int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i2;
        java.util.List r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.List;

        $i2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: int pullProcStatsLocked(int,int,java.util.List)>(i0, i1, r1);

        return $i2;
    }

    static java.lang.Object access$3300(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDiskIoLock>;

        return $r1;
    }

    static java.lang.Object access$3400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mPowerProfileLock>;

        return $r1;
    }

    static java.lang.Object access$3500(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcessCpuTimeLock>;

        return $r1;
    }

    static java.lang.Object access$3600(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerThreadFreqLock>;

        return $r1;
    }

    static java.lang.Object access$3700(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDeviceCalculatedPowerUseLock>;

        return $r1;
    }

    static java.lang.Object access$3800(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDeviceCalculatedPowerBlameUidLock>;

        return $r1;
    }

    static java.lang.Object access$3900(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDeviceCalculatedPowerBlameOtherLock>;

        return $r1;
    }

    static java.lang.Object access$400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerFreqLock>;

        return $r1;
    }

    static java.lang.Object access$4000(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDebugElapsedClockLock>;

        return $r1;
    }

    static java.lang.Object access$4100(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDebugFailingElapsedClockLock>;

        return $r1;
    }

    static java.lang.Object access$4200(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBuildInformationLock>;

        return $r1;
    }

    static java.lang.Object access$4300(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mRoleHolderLock>;

        return $r1;
    }

    static java.lang.Object access$4400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mDangerousPermissionStateLock>;

        return $r1;
    }

    static java.lang.Object access$4500(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mTimeZoneDataInfoLock>;

        return $r1;
    }

    static java.lang.Object access$4600(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mExternalStorageInfoLock>;

        return $r1;
    }

    static java.lang.Object access$4700(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAppsOnExternalStorageInfoLock>;

        return $r1;
    }

    static java.lang.Object access$4800(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mFaceSettingsLock>;

        return $r1;
    }

    static java.lang.Object access$4900(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAppOpsLock>;

        return $r1;
    }

    static java.lang.Object access$500(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerUidLock>;

        return $r1;
    }

    static java.lang.Object access$5000(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mRuntimeAppOpAccessMessageLock>;

        return $r1;
    }

    static java.lang.Object access$5100(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNotificationRemoteViewsLock>;

        return $r1;
    }

    static java.lang.Object access$5200(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mHealthHalLock>;

        return $r1;
    }

    static java.lang.Object access$5300(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAttributedAppOpsLock>;

        return $r1;
    }

    static java.lang.Object access$5400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mSettingsStatsLock>;

        return $r1;
    }

    static int access$5800()
    {
        int $i0;

        $i0 = <com.android.server.stats.pull.StatsPullAtomService: int RANDOM_SEED>;

        return $i0;
    }

    static void access$5900(com.android.server.stats.pull.StatsPullAtomService) throws java.lang.Exception
    {
        com.android.server.stats.pull.StatsPullAtomService r0;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void estimateAppOpsSamplingRate()>();

        return;
    }

    static java.lang.Object access$600(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuTimePerUidFreqLock>;

        return $r1;
    }

    static int access$6000(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int $i0;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $i0 = r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate>;

        return $i0;
    }

    static int access$6002(com.android.server.stats.pull.StatsPullAtomService, int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter1: int;

        r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate> = i0;

        return i0;
    }

    static java.util.ArrayList access$6100(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mHistoricalSubs>;

        return $r1;
    }

    static android.telephony.TelephonyManager access$6200(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.telephony.TelephonyManager $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.telephony.TelephonyManager mTelephony>;

        return $r1;
    }

    static java.util.List access$6300(com.android.server.stats.pull.StatsPullAtomService, com.android.server.stats.pull.netstats.SubInfo)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.netstats.SubInfo r1;
        java.util.List $r2;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter1: com.android.server.stats.pull.netstats.SubInfo;

        $r2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List getDataUsageBytesTransferSnapshotForSub(com.android.server.stats.pull.netstats.SubInfo)>(r1);

        return $r2;
    }

    static java.util.ArrayList access$6400(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        return $r1;
    }

    static java.lang.Object access$700(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuActiveTimeLock>;

        return $r1;
    }

    static java.lang.Object access$800(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mCpuClusterTimeLock>;

        return $r1;
    }

    static java.lang.Object access$900(com.android.server.stats.pull.StatsPullAtomService)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mWifiActivityInfoLock>;

        return $r1;
    }

    private void addBytesTransferByTagAndMeteredAtoms(com.android.server.stats.pull.netstats.NetworkStatsExt, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.netstats.NetworkStatsExt r1;
        java.util.List r2;
        android.net.NetworkStats$Entry $r4;
        android.net.NetworkStats $r5, $r6;
        int $i0, $i1, $i2, $i3, i8;
        android.util.StatsEvent$Builder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, r18, r19;
        long $l4, $l5, $l6, $l7;
        android.util.StatsEvent $r17;
        boolean z1;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: com.android.server.stats.pull.netstats.NetworkStatsExt;

        r2 := @parameter1: java.util.List;

        $r4 = new android.net.NetworkStats$Entry;

        specialinvoke $r4.<android.net.NetworkStats$Entry: void <init>()>();

        i8 = 0;

     label1:
        $r5 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        $i0 = virtualinvoke $r5.<android.net.NetworkStats: int size()>();

        if i8 >= $i0 goto label4;

        $r6 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        virtualinvoke $r6.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i8, $r4);

        $r8 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        r18 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(10083);

        z1 = 1;

        $r9 = virtualinvoke r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(2, 1);

        $i1 = $r4.<android.net.NetworkStats$Entry: int uid>;

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        r19 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $i2 = $r4.<android.net.NetworkStats$Entry: int metered>;

        if $i2 != 1 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r11 = virtualinvoke r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z1);

        $i3 = $r4.<android.net.NetworkStats$Entry: int tag>;

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $l4 = $r4.<android.net.NetworkStats$Entry: long rxBytes>;

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = $r4.<android.net.NetworkStats$Entry: long rxPackets>;

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = $r4.<android.net.NetworkStats$Entry: long txBytes>;

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $l7 = $r4.<android.net.NetworkStats$Entry: long txPackets>;

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r17);

        i8 = i8 + 1;

        goto label1;

     label4:
        return;
    }

    private void addDataUsageBytesTransferAtoms(com.android.server.stats.pull.netstats.NetworkStatsExt, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.netstats.NetworkStatsExt r1;
        java.util.List r2;
        android.net.NetworkStats $r4, $r25;
        android.util.StatsEvent$Builder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r18, $r21, $r22, r26, r27, r28;
        int $i1, $i6, $i7, i8, i9, $i10, i11;
        long $l2, $l3, $l4, $l5;
        com.android.server.stats.pull.netstats.SubInfo $r13, $r16, $r19, $r20;
        java.lang.String $r14, $r17;
        boolean $z0, z2, z3;
        android.util.StatsEvent $r23;
        android.net.NetworkStats$Entry $r24;
        byte b12;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: com.android.server.stats.pull.netstats.NetworkStatsExt;

        r2 := @parameter1: java.util.List;

        i8 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: int ratType>;

        z2 = 0;

        if i8 != -2 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        if z3 != 0 goto label03;

        $i7 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: int ratType>;

        if $i7 != 20 goto label04;

     label03:
        z2 = 1;

     label04:
        $r24 = new android.net.NetworkStats$Entry;

        specialinvoke $r24.<android.net.NetworkStats$Entry: void <init>()>();

        i9 = 0;

     label05:
        $r25 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        $i10 = virtualinvoke $r25.<android.net.NetworkStats: int size()>();

        if i9 >= $i10 goto label10;

        $r4 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        virtualinvoke $r4.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i9, $r24);

        $r6 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        r26 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(10082);

        $r7 = virtualinvoke r26.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(2, 1);

        $i1 = $r24.<android.net.NetworkStats$Entry: int set>;

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $l2 = $r24.<android.net.NetworkStats$Entry: long rxBytes>;

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $l3 = $r24.<android.net.NetworkStats$Entry: long rxPackets>;

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = $r24.<android.net.NetworkStats$Entry: long txBytes>;

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = $r24.<android.net.NetworkStats$Entry: long txPackets>;

        r27 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        if z3 == 0 goto label06;

        i11 = 13;

        goto label07;

     label06:
        i11 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: int ratType>;

     label07:
        $r12 = virtualinvoke r27.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i11);

        $r13 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: com.android.server.stats.pull.netstats.SubInfo subInfo>;

        $r14 = $r13.<com.android.server.stats.pull.netstats.SubInfo: java.lang.String mcc>;

        $r15 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r14);

        $r16 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: com.android.server.stats.pull.netstats.SubInfo subInfo>;

        $r17 = $r16.<com.android.server.stats.pull.netstats.SubInfo: java.lang.String mnc>;

        $r18 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r17);

        $r19 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: com.android.server.stats.pull.netstats.SubInfo subInfo>;

        $i6 = $r19.<com.android.server.stats.pull.netstats.SubInfo: int carrierId>;

        r28 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i6);

        $r20 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: com.android.server.stats.pull.netstats.SubInfo subInfo>;

        $z0 = $r20.<com.android.server.stats.pull.netstats.SubInfo: boolean isOpportunistic>;

        if $z0 == 0 goto label08;

        b12 = 2;

        goto label09;

     label08:
        b12 = 3;

     label09:
        $r21 = virtualinvoke r28.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(b12);

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z2);

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r23);

        i9 = i9 + 1;

        goto label05;

     label10:
        return;
    }

    private void addNetworkStats(int, java.util.List, com.android.server.stats.pull.netstats.NetworkStatsExt)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i6, i7, $i8;
        java.util.List r1;
        com.android.server.stats.pull.netstats.NetworkStatsExt r2;
        android.util.StatsEvent$Builder r4;
        android.net.NetworkStats $r5, $r7;
        android.net.NetworkStats$Entry $r6;
        long $l2, $l3, $l4, $l5;
        android.util.StatsEvent $r17;
        boolean $z1;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r5 = r2.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        i1 = virtualinvoke $r5.<android.net.NetworkStats: int size()>();

        $r6 = new android.net.NetworkStats$Entry;

        specialinvoke $r6.<android.net.NetworkStats$Entry: void <init>()>();

        i7 = 0;

     label1:
        if i7 >= i1 goto label5;

        $r7 = r2.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        virtualinvoke $r7.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i7, $r6);

        r4 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        if i0 == 10002 goto label2;

        if i0 == 10003 goto label2;

        goto label3;

     label2:
        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(2, 1);

     label3:
        $i8 = $r6.<android.net.NetworkStats$Entry: int uid>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i8);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $z1 = r2.<com.android.server.stats.pull.netstats.NetworkStatsExt: boolean slicedByFgbg>;

        if $z1 == 0 goto label4;

        $i6 = $r6.<android.net.NetworkStats$Entry: int set>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i6);

     label4:
        $l2 = $r6.<android.net.NetworkStats$Entry: long rxBytes>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $l3 = $r6.<android.net.NetworkStats$Entry: long rxPackets>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = $r6.<android.net.NetworkStats$Entry: long txBytes>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = $r6.<android.net.NetworkStats$Entry: long txPackets>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $r17 = virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r17);

        i7 = i7 + 1;

        goto label1;

     label5:
        return;
    }

    private static android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)
    {
        android.os.SynchronousResultReceiver r0;
        android.os.Bundle $r1, $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r10;
        android.os.SynchronousResultReceiver$Result r11;
        android.os.Parcelable r12;

        r0 := @parameter0: android.os.SynchronousResultReceiver;

        if r0 != null goto label1;

        return null;

     label1:
        r11 = virtualinvoke r0.<android.os.SynchronousResultReceiver: android.os.SynchronousResultReceiver$Result awaitResult(long)>(2000L);

        $r1 = r11.<android.os.SynchronousResultReceiver$Result: android.os.Bundle bundle>;

        if $r1 == null goto label3;

        $r2 = r11.<android.os.SynchronousResultReceiver$Result: android.os.Bundle bundle>;

        virtualinvoke $r2.<android.os.Bundle: void setDefusable(boolean)>(1);

        $r3 = r11.<android.os.SynchronousResultReceiver$Result: android.os.Bundle bundle>;

        r12 = virtualinvoke $r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("controller_activity");

     label2:
        if r12 == null goto label3;

        return r12;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timeout reading ");

        $r7 = virtualinvoke r0.<android.os.SynchronousResultReceiver: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stats");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StatsPullAtomService", $r10);

     label5:
        return null;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
    }

    private java.util.List collectNetworkStatsSnapshotForAtom(int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        android.net.NetworkStats r1, $r10, $r11, $r14, $r17, $r20, $r23, r32, r33, r34, r35, r36;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.server.stats.pull.netstats.SubInfo $r5;
        java.util.List $r6;
        android.net.NetworkTemplate $r7, $r8;
        com.android.server.stats.pull.netstats.NetworkStatsExt $r9, $r13, $r16, $r19, $r22;
        int[] $r12, $r15, $r18, $r21, $r24;
        java.lang.StringBuilder $r25;
        java.lang.IllegalArgumentException $r28;
        java.lang.String $r29;
        java.util.Iterator r37;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        if i0 == 10082 goto label7;

        if i0 == 10083 goto label6;

        tableswitch(i0)
        {
            case 10000: goto label5;
            case 10001: goto label4;
            case 10002: goto label3;
            case 10003: goto label2;
            default: goto label1;
        };

     label1:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown atomTag ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label2:
        r32 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTransport(int)>(0);

        if r32 == null goto label9;

        $r13 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r14 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStatsByUidAndFgbg(android.net.NetworkStats)>(r32);

        $r15 = newarray (int)[1];

        $r15[0] = 0;

        specialinvoke $r13.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean)>($r14, $r15, 1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label9;

     label3:
        r33 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTransport(int)>(0);

        if r33 == null goto label9;

        $r16 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r17 = virtualinvoke r33.<android.net.NetworkStats: android.net.NetworkStats groupedByUid()>();

        $r18 = newarray (int)[1];

        $r18[0] = 0;

        specialinvoke $r16.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean)>($r17, $r18, 0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label9;

     label4:
        r34 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTransport(int)>(1);

        if r34 == null goto label9;

        $r19 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r20 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStatsByUidAndFgbg(android.net.NetworkStats)>(r34);

        $r21 = newarray (int)[1];

        $r21[0] = 1;

        specialinvoke $r19.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean)>($r20, $r21, 1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label9;

     label5:
        r35 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTransport(int)>(1);

        if r35 == null goto label9;

        $r22 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r23 = virtualinvoke r35.<android.net.NetworkStats: android.net.NetworkStats groupedByUid()>();

        $r24 = newarray (int)[1];

        $r24[0] = 1;

        specialinvoke $r22.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean)>($r23, $r24, 0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label9;

     label6:
        $r7 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifiWildcard()>();

        r36 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTemplate(android.net.NetworkTemplate,boolean)>($r7, 1);

        $r8 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileWildcard()>();

        r1 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTemplate(android.net.NetworkTemplate,boolean)>($r8, 1);

        if r36 == null goto label9;

        if r1 == null goto label9;

        $r9 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r10 = virtualinvoke r36.<android.net.NetworkStats: android.net.NetworkStats add(android.net.NetworkStats)>(r1);

        $r11 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStatsByUidTagAndMetered(android.net.NetworkStats)>($r10);

        $r12 = newarray (int)[2];

        $r12[0] = 1;

        $r12[1] = 0;

        specialinvoke $r9.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean,boolean,boolean,int,com.android.server.stats.pull.netstats.SubInfo)>($r11, $r12, 0, 1, 1, 0, null);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label9;

     label7:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mHistoricalSubs>;

        r37 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label8:
        $z0 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r4 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.stats.pull.netstats.SubInfo) $r4;

        $r6 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List getDataUsageBytesTransferSnapshotForSub(com.android.server.stats.pull.netstats.SubInfo)>($r5);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        goto label8;

     label9:
        return $r2;
    }

    private void estimateAppOpsSamplingRate() throws java.lang.Exception
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, i2, $i5, $i9, $i10, $i11, $i12, i15, i16, i17;
        android.app.AppOpsManager r1;
        java.util.concurrent.Executor r2;
        android.content.Context $r3;
        java.lang.Object $r4, $r14, $r15, r25;
        java.util.concurrent.CompletableFuture $r5;
        android.app.AppOpsManager$HistoricalOpsRequest$Builder $r6, $r10;
        java.time.Instant $r7, $r9;
        java.time.temporal.ChronoUnit $r8;
        long $l3, $l4, $l6, $l7, $l8, $l13, l14;
        com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8 $r12;
        java.util.concurrent.TimeUnit $r13;
        java.lang.String $r16, $r17, $r18;
        java.lang.Throwable $r19;
        android.app.AppOpsManager$HistoricalOpsRequest r21;
        android.app.AppOpsManager$HistoricalOps r22;
        java.util.List r23;
        com.android.server.stats.pull.StatsPullAtomService$AppOpEntry r24;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 = staticinvoke <android.provider.DeviceConfig: int getInt(java.lang.String,java.lang.String,int)>("permissions", "app_ops_target_collection_size", 2000);

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        r1 = (android.app.AppOpsManager) $r4;

        $r5 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r5.<java.util.concurrent.CompletableFuture: void <init>()>();

        $r6 = new android.app.AppOpsManager$HistoricalOpsRequest$Builder;

        $r7 = staticinvoke <java.time.Instant: java.time.Instant now()>();

        $r8 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;

        $r9 = virtualinvoke $r7.<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>(1L, $r8);

        $l3 = virtualinvoke $r9.<java.time.Instant: long toEpochMilli()>();

        $l4 = staticinvoke <java.lang.Math: long max(long,long)>($l3, 0L);

        specialinvoke $r6.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: void <init>(long,long)>($l4, 9223372036854775807L);

        $r10 = virtualinvoke $r6.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest$Builder setFlags(int)>(9);

        r21 = virtualinvoke $r10.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest build()>();

        r2 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r12 = new com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8;

        specialinvoke $r12.<com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8: void <init>(java.util.concurrent.CompletableFuture)>($r5);

        virtualinvoke r1.<android.app.AppOpsManager: void getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)>(r21, r2, $r12);

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r14 = virtualinvoke $r5.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(2000L, $r13);

        r22 = (android.app.AppOpsManager$HistoricalOps) $r14;

        r23 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List processHistoricalOps(android.app.AppOpsManager$HistoricalOps,int,int)>(r22, 10075, 100);

        l14 = 0L;

        i1 = interfaceinvoke r23.<java.util.List: int size()>();

        i15 = 0;

     label1:
        if i15 >= i1 goto label4;

        $r15 = interfaceinvoke r23.<java.util.List: java.lang.Object get(int)>(i15);

        r24 = (com.android.server.stats.pull.StatsPullAtomService$AppOpEntry) $r15;

        $r16 = r24.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: java.lang.String mPackageName>;

        i2 = virtualinvoke $r16.<java.lang.String: int length()>();

        $r17 = r24.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: java.lang.String mAttributionTag>;

        if $r17 != null goto label2;

        i16 = 1;

        goto label3;

     label2:
        $r18 = r24.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: java.lang.String mAttributionTag>;

        i16 = virtualinvoke $r18.<java.lang.String: int length()>();

     label3:
        $i11 = i2 + 32;

        $i12 = $i11 + i16;

        $l13 = (long) $i12;

        l14 = l14 + $l13;

        i15 = i15 + 1;

        goto label1;

     label4:
        $i5 = i0 * 100;

        $l6 = (long) $i5;

        $l7 = $l6 / l14;

        $l8 = staticinvoke <android.util.MathUtils: long constrain(long,long,long)>($l7, 0L, 100L);

        i17 = (int) $l8;

        r25 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mAttributedAppOpsLock>;

        entermonitor r25;

     label5:
        $i9 = r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate>;

        $i10 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i17);

        r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate> = $i10;

        exitmonitor r25;

     label6:
        return;

     label7:
        $r19 := @caughtexception;

     label8:
        exitmonitor r25;

     label9:
        throw $r19;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private android.bluetooth.BluetoothActivityEnergyInfo fetchBluetoothData()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.bluetooth.BluetoothAdapter r1;
        android.os.SynchronousResultReceiver $r3;
        android.os.Parcelable $r4;
        android.bluetooth.BluetoothActivityEnergyInfo $r5;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = staticinvoke <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>();

        if r1 == null goto label1;

        $r3 = new android.os.SynchronousResultReceiver;

        specialinvoke $r3.<android.os.SynchronousResultReceiver: void <init>(java.lang.String)>("bluetooth");

        virtualinvoke r1.<android.bluetooth.BluetoothAdapter: void requestControllerActivityEnergyInfo(android.os.ResultReceiver)>($r3);

        $r4 = staticinvoke <com.android.server.stats.pull.StatsPullAtomService: android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)>($r3);

        $r5 = (android.bluetooth.BluetoothActivityEnergyInfo) $r4;

        return $r5;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "Failed to get bluetooth adapter!");

        return null;
    }

    private com.android.internal.os.BatteryStatsHelper getBatteryStatsHelper()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        com.android.internal.os.BatteryStatsHelper $r2, $r3, $r4, $r5, $r8, r11;
        long $l0, $l1, l3, l4;
        byte $b2;
        android.content.Context $r6;
        android.os.Bundle $r7;
        java.lang.Throwable $r9, $r10;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mBatteryStatsHelperLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper>;

        if $r2 != null goto label09;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r11 = new com.android.internal.os.BatteryStatsHelper;

        $r6 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        specialinvoke r11.<com.android.internal.os.BatteryStatsHelper: void <init>(android.content.Context,boolean)>($r6, 0);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper> = r11;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label04:
        $r8 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper>;

        $r7 = (android.os.Bundle) null;

        virtualinvoke $r8.<com.android.internal.os.BatteryStatsHelper: void create(android.os.Bundle)>($r7);

     label05:
        goto label09;

     label06:
        $r10 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label08:
        throw $r10;

     label09:
        l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l0 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mBatteryStatsHelperTimestampMs>;

        $l1 = l4 - $l0;

        $b2 = $l1 cmp 1000L;

        if $b2 < 0 goto label10;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper>;

        virtualinvoke $r4.<com.android.internal.os.BatteryStatsHelper: void refreshStats(int,int)>(0, -1);

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper>;

        virtualinvoke $r5.<com.android.internal.os.BatteryStatsHelper: void clearStats()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mBatteryStatsHelperTimestampMs> = l4;

     label10:
        exitmonitor r1;

     label11:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper mBatteryStatsHelper>;

        return $r3;

     label12:
        $r9 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private java.util.List getDataUsageBytesTransferSnapshotForSub(com.android.server.stats.pull.netstats.SubInfo)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.netstats.SubInfo r1;
        int[] r3, $r8;
        int i0, i1, i2;
        java.util.ArrayList $r4;
        java.lang.String $r5;
        com.android.server.stats.pull.netstats.NetworkStatsExt $r6;
        android.net.NetworkStats $r7, r10;
        android.net.NetworkTemplate r9;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: com.android.server.stats.pull.netstats.SubInfo;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r3 = staticinvoke <android.net.NetworkTemplate: int[] getAllCollapsedRatTypes()>();

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = r3[i2];

        $r5 = r1.<com.android.server.stats.pull.netstats.SubInfo: java.lang.String subscriberId>;

        r9 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileWithRatType(java.lang.String,int)>($r5, i1);

        r10 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTemplate(android.net.NetworkTemplate,boolean)>(r9, 0);

        if r10 == null goto label2;

        $r6 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r7 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStatsByFgbg(android.net.NetworkStats)>(r10);

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        specialinvoke $r6.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean,boolean,boolean,int,com.android.server.stats.pull.netstats.SubInfo)>($r7, $r8, 1, 0, 0, i1, r1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r4;
    }

    private android.app.INotificationManager getINotificationManagerService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$SqdF4nK9ElmlOAiZ4Ki0RbhnyFQ r2;
        android.app.INotificationManager $r3, $r4, $r6, r9, $r12;
        android.os.IBinder $r5, r10;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNotificationStatsLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService>;

        if $r3 != null goto label02;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("notification");

        $r6 = staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService> = $r6;

     label02:
        r9 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService>;

     label03:
        if r9 == null goto label08;

     label04:
        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService>;

        r10 = interfaceinvoke $r4.<android.app.INotificationManager: android.os.IBinder asBinder()>();

        r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$SqdF4nK9ElmlOAiZ4Ki0RbhnyFQ;

        specialinvoke r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$SqdF4nK9ElmlOAiZ4Ki0RbhnyFQ: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        interfaceinvoke r10.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0);

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "linkToDeath with notificationManager failed", $r7);

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService> = null;

     label08:
        exitmonitor r1;

     label09:
        $r12 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService>;

        return $r12;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private com.android.internal.app.procstats.IProcessStats getIProcessStatsService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$4tfrHblqmHrtPiB3WLHYY9Tgjx4 r2;
        com.android.internal.app.procstats.IProcessStats $r3, $r4, $r6, r9, $r12;
        android.os.IBinder $r5, r10;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcStatsLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService>;

        if $r3 != null goto label02;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("procstats");

        $r6 = staticinvoke <com.android.internal.app.procstats.IProcessStats$Stub: com.android.internal.app.procstats.IProcessStats asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService> = $r6;

     label02:
        r9 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService>;

     label03:
        if r9 == null goto label08;

     label04:
        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService>;

        r10 = interfaceinvoke $r4.<com.android.internal.app.procstats.IProcessStats: android.os.IBinder asBinder()>();

        r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$4tfrHblqmHrtPiB3WLHYY9Tgjx4;

        specialinvoke r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$4tfrHblqmHrtPiB3WLHYY9Tgjx4: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        interfaceinvoke r10.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0);

     label05:
        goto label08;

     label06:
        $r8 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "linkToDeath with ProcessStats failed", $r8);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService> = null;

     label08:
        exitmonitor r1;

     label09:
        $r12 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService>;

        return $r12;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private android.os.IStoraged getIStoragedService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        android.os.IBinder r2, $r5;
        android.os.IStoraged $r3, $r4, $r6, r9, $r12;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$bGdd1XQKPBSlirlhMqL7Kyr4dKU r10;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mStoragedLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService>;

        if $r3 != null goto label02;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("storaged");

        $r6 = staticinvoke <android.os.IStoraged$Stub: android.os.IStoraged asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService> = $r6;

     label02:
        r9 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService>;

     label03:
        if r9 == null goto label08;

     label04:
        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService>;

        r2 = interfaceinvoke $r4.<android.os.IStoraged: android.os.IBinder asBinder()>();

        r10 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$bGdd1XQKPBSlirlhMqL7Kyr4dKU;

        specialinvoke r10.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$bGdd1XQKPBSlirlhMqL7Kyr4dKU: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0);

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "linkToDeath with storagedService failed", $r7);

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService> = null;

     label08:
        exitmonitor r1;

     label09:
        $r12 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService>;

        return $r12;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private android.os.IThermalService getIThermalService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        android.os.IBinder r2, $r4;
        android.os.IThermalService $r3, r7, r10;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$RPju9l8LZxvj1kR9SO_j3YArLwk r8;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mThermalLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService mThermalService>;

        if $r3 != null goto label07;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("thermalservice");

        r7 = staticinvoke <android.os.IThermalService$Stub: android.os.IThermalService asInterface(android.os.IBinder)>($r4);

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService mThermalService> = r7;

     label02:
        if r7 == null goto label07;

     label03:
        r2 = interfaceinvoke r7.<android.os.IThermalService: android.os.IBinder asBinder()>();

        r8 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$RPju9l8LZxvj1kR9SO_j3YArLwk;

        specialinvoke r8.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$RPju9l8LZxvj1kR9SO_j3YArLwk: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r8, 0);

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "linkToDeath with thermalService failed", $r6);

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService mThermalService> = null;

     label07:
        r10 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService mThermalService>;

        exitmonitor r1;

     label08:
        return r10;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private android.net.INetworkStatsSession getNetworkStatsSession(boolean)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        boolean z0;
        android.os.IBinder $r1;
        android.content.Context $r2;
        byte $b0, b2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        android.net.INetworkStatsService r5;
        android.net.INetworkStatsSession r6;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("netstats");

        r5 = staticinvoke <android.net.INetworkStatsService$Stub: android.net.INetworkStatsService asInterface(android.os.IBinder)>($r1);

        if r5 != null goto label1;

        return null;

     label1:
        if z0 == 0 goto label2;

        b2 = 2;

        goto label3;

     label2:
        b2 = 1;

     label3:
        $b0 = 4 | b2;

        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r5.<android.net.INetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>($b0, $r3);

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Cannot get NetworkStats session", $r4);

        return null;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private android.net.NetworkStats getUidNetworkStatsSnapshotForTemplate(android.net.NetworkTemplate, boolean)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.net.NetworkTemplate r1;
        boolean z0, z1;
        long l0, l1, l2, $l3, $l4, $l6, $l7;
        java.util.concurrent.TimeUnit $r3;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        int $i5;
        android.net.INetworkStatsSession $r6;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r14;
        android.net.NetworkStats r15;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.net.NetworkTemplate;

        z0 := @parameter1: boolean;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        $l3 = staticinvoke <android.os.SystemClock: long currentTimeMicro()>();

        l1 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3);

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l4 = <com.android.server.stats.pull.StatsPullAtomService: long NETSTATS_UID_DEFAULT_BUCKET_DURATION_MS>;

        l2 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r5, "netstats_uid_bucket_duration", $l4);

     label1:
        $i5 = virtualinvoke r1.<android.net.NetworkTemplate: int getMatchRule()>();

        if $i5 != 7 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $r6 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.INetworkStatsSession getNetworkStatsSession(boolean)>(z1);

        $l6 = l1 - l0;

        $l7 = $l6 - l2;

        r15 = interfaceinvoke $r6.<android.net.INetworkStatsSession: android.net.NetworkStats getSummaryForAllUid(android.net.NetworkTemplate,long,long,boolean)>(r1, $l7, l1, z0);

     label5:
        return r15;

     label6:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pulling netstats for template=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and includeTags=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" causes error");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", $r14, $r7);

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    private android.net.NetworkStats getUidNetworkStatsSnapshotForTransport(int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        android.net.NetworkStats $r1;
        android.net.NetworkTemplate r2;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        r2 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileWithRatType(java.lang.String,int)>(null, -1);

        goto label2;

     label1:
        r2 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifiWildcard()>();

     label2:
        $r1 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats getUidNetworkStatsSnapshotForTemplate(android.net.NetworkTemplate,boolean)>(r2, 0);

        return $r1;
    }

    private void initAndRegisterNetworkStatsPullers()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.util.ArrayList $r1, $r3, $r5, $r7, $r9, $r11;
        java.util.List $r2, $r4, $r6, $r8, $r10, $r12;
        android.telephony.SubscriptionManager $r13;
        java.util.concurrent.Executor $r14;
        com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener $r15;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StatsPullAtomService", "Registering NetworkStats pullers with statsd");

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(10000);

        virtualinvoke $r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2);

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r4 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(10001);

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r6 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(10002);

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r8 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(10003);

        virtualinvoke $r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r8);

        $r9 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r10 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(10083);

        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

        $r11 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r12 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(10082);

        virtualinvoke $r11.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r12);

        $r13 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.telephony.SubscriptionManager mSubscriptionManager>;

        $r14 = staticinvoke <com.android.internal.os.BackgroundThread: java.util.concurrent.Executor getExecutor()>();

        $r15 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener mStatsSubscriptionsListener>;

        virtualinvoke $r13.<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(java.util.concurrent.Executor,android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>($r14, $r15);

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerWifiBytesTransfer()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerWifiBytesTransferBackground()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerMobileBytesTransfer()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerMobileBytesTransferBackground()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBytesTransferByTagAndMetered()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDataUsageBytesTransfer()>();

        return;
    }

    static void lambda$pullCpuActiveTimeLocked$12(int, java.util.List, int, java.lang.Long)
    {
        int i0, i1;
        java.util.List r0;
        java.lang.Long r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r5, $r6;
        long $l2;
        android.util.StatsEvent $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Long;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $l2 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        return;
    }

    static void lambda$pullCpuClusterTimeLocked$13(int, java.util.List, int, long[])
    {
        int i0, i1, $i2, i4;
        java.util.List r0;
        long[] r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r5, $r6, $r7;
        long $l3;
        android.util.StatsEvent $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r1 := @parameter3: long[];

        i4 = 0;

     label1:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label2;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i4);

        $l3 = r1[i4];

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    static void lambda$pullCpuTimePerUidFreqLocked$11(int, java.util.List, int, long[])
    {
        int i0, i1, $i2, i6;
        java.util.List r0;
        long[] r1;
        long $l3, $l5;
        byte $b4;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r5, $r6, $r7;
        android.util.StatsEvent $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r1 := @parameter3: long[];

        i6 = 0;

     label1:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label3;

        $l3 = r1[i6];

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label2;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i6);

        $l5 = r1[i6];

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        return;
    }

    static void lambda$pullCpuTimePerUidLocked$10(int, java.util.List, int, long[])
    {
        int i0, i1;
        java.util.List r0;
        long[] r1;
        long l2, l3;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r5, $r6, $r7;
        android.util.StatsEvent $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r1 := @parameter3: long[];

        l2 = r1[0];

        l3 = r1[1];

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l2);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l3);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;
    }

    static boolean lambda$pullDataBytesTransferLocked$6(com.android.server.stats.pull.netstats.NetworkStatsExt, com.android.server.stats.pull.netstats.NetworkStatsExt)
    {
        com.android.server.stats.pull.netstats.NetworkStatsExt r0, r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.stats.pull.netstats.NetworkStatsExt;

        r1 := @parameter1: com.android.server.stats.pull.netstats.NetworkStatsExt;

        $z0 = virtualinvoke r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: boolean hasSameSlicing(com.android.server.stats.pull.netstats.NetworkStatsExt)>(r0);

        return $z0;
    }

    static void lambda$pullDiskIOLocked$18(int, java.util.List, int, long, long, long, long, long, long, long, long, long, long)
    {
        int i0, i1;
        java.util.List r0;
        long l2, l3, l4, l5, l6, l7, l8, l9, l10, l11;
        android.util.StatsEvent$Builder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        android.util.StatsEvent $r15;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        l4 := @parameter5: long;

        l5 := @parameter6: long;

        l6 := @parameter7: long;

        l7 := @parameter8: long;

        l8 := @parameter9: long;

        l9 := @parameter10: long;

        l10 := @parameter11: long;

        l11 := @parameter12: long;

        $r1 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r2 = virtualinvoke $r1.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i1);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l2);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l3);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l4);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l5);

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l6);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l7);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l8);

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l9);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l10);

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l11);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r15);

        return;
    }

    static void lambda$pullHealthHalLocked$19(int, java.util.List, int, android.hardware.health.V2_0.HealthInfo)
    {
        int i0, i1, i2;
        android.hardware.health.V2_0.HealthInfo r0;
        android.hardware.health.V1_0.HealthInfo $r1, $r2, $r3, $r4, $r10;
        java.lang.StringBuilder $r5;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9;
        java.util.List r11;
        android.util.StatsEvent$Builder $r13, $r14, $r15;
        android.util.StatsEvent $r16;

        i0 := @parameter0: int;

        r11 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r0 := @parameter3: android.hardware.health.V2_0.HealthInfo;

        if i0 == 10019 goto label5;

        if i0 == 10020 goto label4;

        if i0 == 10030 goto label3;

        if i0 == 10043 goto label2;

        if i0 != 10045 goto label1;

        $r10 = r0.<android.hardware.health.V2_0.HealthInfo: android.hardware.health.V1_0.HealthInfo legacy>;

        i2 = $r10.<android.hardware.health.V1_0.HealthInfo: int batteryCycleCount>;

        goto label6;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid atomTag in healthHal puller: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        $r4 = r0.<android.hardware.health.V2_0.HealthInfo: android.hardware.health.V1_0.HealthInfo legacy>;

        i2 = $r4.<android.hardware.health.V1_0.HealthInfo: int batteryLevel>;

        goto label6;

     label3:
        $r3 = r0.<android.hardware.health.V2_0.HealthInfo: android.hardware.health.V1_0.HealthInfo legacy>;

        i2 = $r3.<android.hardware.health.V1_0.HealthInfo: int batteryVoltage>;

        goto label6;

     label4:
        $r2 = r0.<android.hardware.health.V2_0.HealthInfo: android.hardware.health.V1_0.HealthInfo legacy>;

        i2 = $r2.<android.hardware.health.V1_0.HealthInfo: int batteryFullCharge>;

        goto label6;

     label5:
        $r1 = r0.<android.hardware.health.V2_0.HealthInfo: android.hardware.health.V1_0.HealthInfo legacy>;

        i2 = $r1.<android.hardware.health.V1_0.HealthInfo: int batteryChargeCounter>;

     label6:
        $r13 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i2);

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r16);

        return;
    }

    static void lambda$pullProcessMemoryHighWaterMarkLocked$15(android.util.SparseArray, android.app.ProcessMemoryState)
    {
        android.util.SparseArray r0;
        android.app.ProcessMemoryState r1;
        int $i0;

        r0 := @parameter0: android.util.SparseArray;

        r1 := @parameter1: android.app.ProcessMemoryState;

        $i0 = r1.<android.app.ProcessMemoryState: int pid>;

        virtualinvoke r0.<android.util.SparseArray: void delete(int)>($i0);

        return;
    }

    static void lambda$pullProcessMemorySnapshotLocked$16(android.util.SparseArray, android.app.ProcessMemoryState)
    {
        android.util.SparseArray r0;
        android.app.ProcessMemoryState r1;
        int $i0;

        r0 := @parameter0: android.util.SparseArray;

        r1 := @parameter1: android.app.ProcessMemoryState;

        $i0 = r1.<android.app.ProcessMemoryState: int pid>;

        virtualinvoke r0.<android.util.SparseArray: void delete(int)>($i0);

        return;
    }

    static void lambda$pullWifiActivityInfoLocked$14(android.os.SynchronousResultReceiver, android.os.connectivity.WifiActivityEnergyInfo)
    {
        android.os.SynchronousResultReceiver r0;
        android.os.connectivity.WifiActivityEnergyInfo r1;
        android.os.Bundle $r3;

        r0 := @parameter0: android.os.SynchronousResultReceiver;

        r1 := @parameter1: android.os.connectivity.WifiActivityEnergyInfo;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("controller_activity", r1);

        virtualinvoke r0.<android.os.SynchronousResultReceiver: void send(int,android.os.Bundle)>(0, $r3);

        return;
    }

    static boolean lambda$readProcStatsHighWaterMark$17(int, java.io.File, java.lang.String)
    {
        int i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r4, r6, r7;
        boolean $z0;
        java.io.File r5;

        i0 := @parameter0: int;

        r5 := @parameter1: java.io.File;

        r6 := @parameter2: java.lang.String;

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        return $z0;
    }

    static void lambda$sliceNetworkStatsByFgbg$7(android.net.NetworkStats$Entry, android.net.NetworkStats$Entry)
    {
        android.net.NetworkStats$Entry r0, r1;
        int $i0;

        r0 := @parameter0: android.net.NetworkStats$Entry;

        r1 := @parameter1: android.net.NetworkStats$Entry;

        $i0 = r1.<android.net.NetworkStats$Entry: int set>;

        r0.<android.net.NetworkStats$Entry: int set> = $i0;

        return;
    }

    static void lambda$sliceNetworkStatsByUidAndFgbg$8(android.net.NetworkStats$Entry, android.net.NetworkStats$Entry)
    {
        android.net.NetworkStats$Entry r0, r1;
        int $i0, $i1;

        r0 := @parameter0: android.net.NetworkStats$Entry;

        r1 := @parameter1: android.net.NetworkStats$Entry;

        $i0 = r1.<android.net.NetworkStats$Entry: int uid>;

        r0.<android.net.NetworkStats$Entry: int uid> = $i0;

        $i1 = r1.<android.net.NetworkStats$Entry: int set>;

        r0.<android.net.NetworkStats$Entry: int set> = $i1;

        return;
    }

    static void lambda$sliceNetworkStatsByUidTagAndMetered$9(android.net.NetworkStats$Entry, android.net.NetworkStats$Entry)
    {
        android.net.NetworkStats$Entry r0, r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.net.NetworkStats$Entry;

        r1 := @parameter1: android.net.NetworkStats$Entry;

        $i0 = r1.<android.net.NetworkStats$Entry: int uid>;

        r0.<android.net.NetworkStats$Entry: int uid> = $i0;

        $i1 = r1.<android.net.NetworkStats$Entry: int tag>;

        r0.<android.net.NetworkStats$Entry: int tag> = $i1;

        $i2 = r1.<android.net.NetworkStats$Entry: int metered>;

        r0.<android.net.NetworkStats$Entry: int metered> = $i2;

        return;
    }

    private long milliAmpHrsToNanoAmpSecs(double)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        double d0, $d1, $d2;
        long $l0;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        d0 := @parameter0: double;

        $d1 = 3.6E9 * d0;

        $d2 = $d1 + 0.5;

        $l0 = (long) $d2;

        return $l0;
    }

    private native void nativeInit();

    private void processHistoricalOp(android.app.AppOpsManager$HistoricalOp, java.util.List, int, int, java.lang.String, java.lang.String)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.util.List r1;
        int i0, i1, $i2, $i3, i6, i7;
        java.lang.String r2, r5, r6;
        com.android.server.stats.pull.StatsPullAtomService$AppOpEntry $r3;
        boolean $z1;
        char $c4;
        android.app.AppOpsManager$HistoricalOp r4;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r4 := @parameter0: android.app.AppOpsManager$HistoricalOp;

        r1 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        i6 = 0;

        if r5 == null goto label1;

        i6 = 0;

        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label1;

        i7 = virtualinvoke r2.<java.lang.String: int length()>();

        i6 = i7;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        if i7 >= $i3 goto label1;

        i6 = i7;

        $c4 = virtualinvoke r5.<java.lang.String: char charAt(int)>(i7);

        if $c4 != 46 goto label1;

        i6 = i7 + 1;

     label1:
        if r5 != null goto label2;

        r6 = null;

        goto label3;

     label2:
        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(i6);

     label3:
        $r3 = new com.android.server.stats.pull.StatsPullAtomService$AppOpEntry;

        specialinvoke $r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: void <init>(com.android.server.stats.pull.StatsPullAtomService,java.lang.String,java.lang.String,android.app.AppOpsManager$HistoricalOp,int)>(r0, r2, r6, r4, i0);

        $i2 = $r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: int mHash>;

        if $i2 >= i1 goto label4;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label4:
        return;
    }

    private java.util.List processHistoricalOps(android.app.AppOpsManager$HistoricalOps, int, int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.AppOpsManager$HistoricalOps r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        android.app.AppOpsManager$HistoricalUidOps r3;
        android.app.AppOpsManager$HistoricalPackageOps r4;
        android.app.AppOpsManager$HistoricalOp r5, r11;
        java.util.ArrayList $r6;
        java.lang.String $r7, $r8, $r9;
        android.app.AppOpsManager$AttributedHistoricalOps r10;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.app.AppOpsManager$HistoricalOps;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i8 = 0;

     label01:
        $i3 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: int getUidCount()>();

        if i8 >= $i3 goto label11;

        r3 = virtualinvoke r1.<android.app.AppOpsManager$HistoricalOps: android.app.AppOpsManager$HistoricalUidOps getUidOpsAt(int)>(i8);

        i2 = virtualinvoke r3.<android.app.AppOpsManager$HistoricalUidOps: int getUid()>();

        i9 = 0;

     label02:
        $i4 = virtualinvoke r3.<android.app.AppOpsManager$HistoricalUidOps: int getPackageCount()>();

        if i9 >= $i4 goto label10;

        r4 = virtualinvoke r3.<android.app.AppOpsManager$HistoricalUidOps: android.app.AppOpsManager$HistoricalPackageOps getPackageOpsAt(int)>(i9);

        if i0 != 10075 goto label07;

        i10 = 0;

     label03:
        $i6 = virtualinvoke r4.<android.app.AppOpsManager$HistoricalPackageOps: int getAttributedOpsCount()>();

        if i10 >= $i6 goto label06;

        r10 = virtualinvoke r4.<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$AttributedHistoricalOps getAttributedOpsAt(int)>(i10);

        i11 = 0;

     label04:
        $i7 = virtualinvoke r10.<android.app.AppOpsManager$AttributedHistoricalOps: int getOpCount()>();

        if i11 >= $i7 goto label05;

        r5 = virtualinvoke r10.<android.app.AppOpsManager$AttributedHistoricalOps: android.app.AppOpsManager$HistoricalOp getOpAt(int)>(i11);

        $r8 = virtualinvoke r4.<android.app.AppOpsManager$HistoricalPackageOps: java.lang.String getPackageName()>();

        $r9 = virtualinvoke r10.<android.app.AppOpsManager$AttributedHistoricalOps: java.lang.String getTag()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void processHistoricalOp(android.app.AppOpsManager$HistoricalOp,java.util.List,int,int,java.lang.String,java.lang.String)>(r5, $r6, i2, i1, $r8, $r9);

        i11 = i11 + 1;

        goto label04;

     label05:
        i10 = i10 + 1;

        goto label03;

     label06:
        goto label09;

     label07:
        if i0 != 10060 goto label09;

        i12 = 0;

     label08:
        $i5 = virtualinvoke r4.<android.app.AppOpsManager$HistoricalPackageOps: int getOpCount()>();

        if i12 >= $i5 goto label09;

        r11 = virtualinvoke r4.<android.app.AppOpsManager$HistoricalPackageOps: android.app.AppOpsManager$HistoricalOp getOpAt(int)>(i12);

        $r7 = virtualinvoke r4.<android.app.AppOpsManager$HistoricalPackageOps: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void processHistoricalOp(android.app.AppOpsManager$HistoricalOp,java.util.List,int,int,java.lang.String,java.lang.String)>(r11, $r6, i2, i1, $r7, null);

        i12 = i12 + 1;

        goto label08;

     label09:
        i9 = i9 + 1;

        goto label02;

     label10:
        i8 = i8 + 1;

        goto label01;

     label11:
        return $r6;
    }

    private int pullDataBytesTransferLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2;
        com.android.server.stats.pull.netstats.NetworkStatsExt r1, $r6, r28;
        java.lang.Object $r2, $r5;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$p7uT0a71EezJS5cR_M51T9WNkb4 $r3;
        java.util.ArrayList $r4;
        android.net.NetworkStats $r7, $r8, $r9, $r10, $r13;
        com.android.server.stats.pull.netstats.SubInfo $r11;
        boolean $z0, $z1, $z2, $z3;
        int[] $r12;
        java.lang.StringBuilder $r14, $r19;
        java.lang.String $r18, $r23;
        java.util.List r24, r25;
        java.util.Iterator r27;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r24 := @parameter1: java.util.List;

        r25 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List collectNetworkStatsSnapshotForAtom(int)>(i0);

        if r25 != null goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current snapshot is null for ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", return.");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", $r23);

        return 1;

     label1:
        r27 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r2 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.android.server.stats.pull.netstats.NetworkStatsExt) $r2;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.ArrayList mNetworkStatsBaselines>;

        $r3 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$p7uT0a71EezJS5cR_M51T9WNkb4;

        specialinvoke $r3.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$p7uT0a71EezJS5cR_M51T9WNkb4: void <init>(com.android.server.stats.pull.netstats.NetworkStatsExt)>(r28);

        $r5 = staticinvoke <com.android.internal.util.CollectionUtils: java.lang.Object find(java.util.List,java.util.function.Predicate)>($r4, $r3);

        r1 = (com.android.server.stats.pull.netstats.NetworkStatsExt) $r5;

        if r1 != null goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("baseline is null for ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", return.");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", $r18);

        return 1;

     label3:
        $r6 = new com.android.server.stats.pull.netstats.NetworkStatsExt;

        $r8 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        $r7 = r1.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        $r9 = virtualinvoke $r8.<android.net.NetworkStats: android.net.NetworkStats subtract(android.net.NetworkStats)>($r7);

        $r10 = virtualinvoke $r9.<android.net.NetworkStats: android.net.NetworkStats removeEmptyEntries()>();

        $r12 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: int[] transports>;

        $z2 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: boolean slicedByFgbg>;

        $z1 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: boolean slicedByTag>;

        $z0 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: boolean slicedByMetered>;

        $i1 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: int ratType>;

        $r11 = r28.<com.android.server.stats.pull.netstats.NetworkStatsExt: com.android.server.stats.pull.netstats.SubInfo subInfo>;

        specialinvoke $r6.<com.android.server.stats.pull.netstats.NetworkStatsExt: void <init>(android.net.NetworkStats,int[],boolean,boolean,boolean,int,com.android.server.stats.pull.netstats.SubInfo)>($r10, $r12, $z2, $z1, $z0, $i1, $r11);

        $r13 = $r6.<com.android.server.stats.pull.netstats.NetworkStatsExt: android.net.NetworkStats stats>;

        $i2 = virtualinvoke $r13.<android.net.NetworkStats: int size()>();

        if $i2 != 0 goto label4;

        goto label2;

     label4:
        if i0 == 10082 goto label6;

        if i0 == 10083 goto label5;

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void addNetworkStats(int,java.util.List,com.android.server.stats.pull.netstats.NetworkStatsExt)>(i0, r24, $r6);

        goto label7;

     label5:
        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void addBytesTransferByTagAndMeteredAtoms(com.android.server.stats.pull.netstats.NetworkStatsExt,java.util.List)>($r6, r24);

        goto label7;

     label6:
        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void addDataUsageBytesTransferAtoms(com.android.server.stats.pull.netstats.NetworkStatsExt,java.util.List)>($r6, r24);

     label7:
        goto label2;

     label8:
        return 0;
    }

    private int pullNumBiometricsEnrolledLocked(int, int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, i3, i4;
        long l2;
        android.content.Context $r1, $r2, $r13, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r5, $r14, $r16;
        java.util.List $r4, $r8, $r12, r20;
        android.content.pm.UserInfo $r6;
        android.os.UserHandle $r7;
        android.util.StatsEvent$Builder $r9, $r10, $r11, r26;
        java.lang.Throwable $r17, $r18, $r19, r28;
        android.content.pm.PackageManager r21;
        android.hardware.face.FaceManager r22;
        android.hardware.fingerprint.FingerprintManager r23;
        android.os.UserManager r24;
        java.util.Iterator r25;
        android.util.StatsEvent r27;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r20 := @parameter2: java.util.List;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        r21 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r22 = null;

        $z0 = virtualinvoke r21.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.fingerprint");

        if $z0 == 0 goto label01;

        $r15 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/fingerprint/FingerprintManager;");

        r23 = (android.hardware.fingerprint.FingerprintManager) $r16;

        goto label02;

     label01:
        r23 = null;

     label02:
        $z1 = virtualinvoke r21.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.biometrics.face");

        if $z1 == 0 goto label03;

        $r13 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/face/FaceManager;");

        r22 = (android.hardware.face.FaceManager) $r14;

     label03:
        if i0 != 1 goto label04;

        if r23 != null goto label04;

        return 1;

     label04:
        if i0 != 4 goto label05;

        if r22 != null goto label05;

        return 1;

     label05:
        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r24 = (android.os.UserManager) $r3;

        if r24 != null goto label06;

        return 1;

     label06:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r4 = virtualinvoke r24.<android.os.UserManager: java.util.List getUsers()>();

        r25 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        $r5 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.UserInfo) $r5;

        $r7 = virtualinvoke $r6.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i3 = virtualinvoke $r7.<android.os.UserHandle: int getIdentifier()>();

     label09:
        if i0 != 1 goto label12;

     label10:
        $r12 = virtualinvoke r23.<android.hardware.fingerprint.FingerprintManager: java.util.List getEnrolledFingerprints(int)>(i3);

        i4 = interfaceinvoke $r12.<java.util.List: int size()>();

     label11:
        goto label14;

     label12:
        if i0 != 4 goto label20;

     label13:
        $r8 = virtualinvoke r22.<android.hardware.face.FaceManager: java.util.List getEnrolledFaces(int)>(i3);

        i4 = interfaceinvoke $r8.<java.util.List: int size()>();

     label14:
        r26 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

     label15:
        $r9 = virtualinvoke r26.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i1);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i3);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i4);

        r27 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

     label16:
        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>(r27);

     label17:
        goto label08;

     label18:
        $r18 := @caughtexception;

        r28 = $r18;

        goto label23;

     label19:
        $r17 := @caughtexception;

        r28 = $r17;

        goto label23;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label22:
        $r19 := @caughtexception;

        r28 = $r19;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r28;

        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private int pullProcStatsLocked(int, int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i5, i7, i8, i9, i10;
        long l2, l3, l4;
        java.util.ArrayList r1;
        java.io.File $r2, $r10, r44, r46;
        java.lang.String $r3, $r9, $r11, $r17;
        android.util.proto.ProtoOutputStream $r18, $r22;
        android.util.StatsEvent$Builder $r19, $r20, $r21, r42;
        java.lang.Throwable $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, r38, r39;
        java.util.List r35;
        com.android.internal.app.procstats.IProcessStats r36;
        android.util.proto.ProtoOutputStream[] r37;
        com.android.internal.app.procstats.ProcessStats r40;
        byte[] r41;
        android.util.StatsEvent r43;
        java.lang.StringBuilder r45, r47;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r35 := @parameter2: java.util.List;

        r36 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats getIProcessStatsService()>();

        if r36 != null goto label01;

        return 1;

     label01:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        l3 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: long readProcStatsHighWaterMark(int)>(i0);

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r37 = newarray (android.util.proto.ProtoOutputStream)[5];

     label03:
        i7 = 0;

     label04:
        i8 = lengthof r37;

     label05:
        if i7 >= i8 goto label10;

     label06:
        $r22 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r22.<android.util.proto.ProtoOutputStream: void <init>()>();

        r37[i7] = $r22;

     label07:
        i7 = i7 + 1;

        goto label04;

     label08:
        $r32 := @caughtexception;

        r38 = $r32;

        goto label36;

     label09:
        $r29 := @caughtexception;

        r39 = $r29;

        goto label33;

     label10:
        r40 = new com.android.internal.app.procstats.ProcessStats;

        specialinvoke r40.<com.android.internal.app.procstats.ProcessStats: void <init>(boolean)>(0);

     label11:
        l4 = interfaceinvoke r36.<com.android.internal.app.procstats.IProcessStats: long getCommittedStatsMerged(long,int,boolean,java.util.List,com.android.internal.app.procstats.ProcessStats)>(l3, i0, 1, r1, r40);

        virtualinvoke r40.<com.android.internal.app.procstats.ProcessStats: void dumpAggregatedProtoForStatsd(android.util.proto.ProtoOutputStream[],long)>(r37, 58982L);

     label12:
        i9 = 0;

     label13:
        i10 = lengthof r37;

     label14:
        if i9 >= i10 goto label26;

     label15:
        $r18 = r37[i9];

        r41 = virtualinvoke $r18.<android.util.proto.ProtoOutputStream: byte[] getBytes()>();

        $i5 = lengthof r41;

        if $i5 <= 0 goto label21;

        r42 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

     label16:
        $r19 = virtualinvoke r42.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i1);

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeByteArray(byte[])>(r41);

        $r21 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i9);

        r43 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

     label17:
        interfaceinvoke r35.<java.util.List: boolean add(java.lang.Object)>(r43);

     label18:
        goto label21;

     label19:
        $r26 := @caughtexception;

        r38 = $r26;

        goto label23;

     label20:
        $r33 := @caughtexception;

        r39 = $r33;

        goto label25;

     label21:
        i9 = i9 + 1;

        goto label13;

     label22:
        $r27 := @caughtexception;

        r38 = $r27;

     label23:
        goto label36;

     label24:
        $r34 := @caughtexception;

        r39 = $r34;

     label25:
        goto label33;

     label26:
        r44 = new java.io.File;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.io.File mBaseDir>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r9 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r44.<java.io.File: void <init>(java.lang.String)>($r9);

        virtualinvoke r44.<java.io.File: boolean delete()>();

        r46 = new java.io.File;

        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.io.File mBaseDir>;

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r17 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r46.<java.io.File: void <init>(java.lang.String)>($r17);

        virtualinvoke r46.<java.io.File: boolean createNewFile()>();

     label27:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label28:
        $r28 := @caughtexception;

        r39 = $r28;

        goto label33;

     label29:
        $r23 := @caughtexception;

        r38 = $r23;

        goto label36;

     label30:
        $r30 := @caughtexception;

        r39 = $r30;

        goto label33;

     label31:
        $r24 := @caughtexception;

        r38 = $r24;

        goto label36;

     label32:
        $r31 := @caughtexception;

        r39 = $r31;

     label33:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Getting procstats failed: ", r39);

     label34:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label35:
        $r25 := @caughtexception;

        r38 = $r25;

     label36:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r38;

        catch android.os.RemoteException from label02 to label03 with label32;
        catch java.io.IOException from label02 to label03 with label32;
        catch java.lang.Throwable from label02 to label03 with label31;
        catch android.os.RemoteException from label04 to label05 with label32;
        catch java.io.IOException from label04 to label05 with label32;
        catch java.lang.Throwable from label04 to label05 with label31;
        catch android.os.RemoteException from label06 to label07 with label09;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch android.os.RemoteException from label10 to label11 with label32;
        catch java.io.IOException from label10 to label11 with label32;
        catch java.lang.Throwable from label10 to label11 with label31;
        catch android.os.RemoteException from label11 to label12 with label30;
        catch java.io.IOException from label11 to label12 with label30;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch android.os.RemoteException from label13 to label14 with label30;
        catch java.io.IOException from label13 to label14 with label30;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch android.os.RemoteException from label15 to label16 with label24;
        catch java.io.IOException from label15 to label16 with label24;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch android.os.RemoteException from label16 to label17 with label20;
        catch java.io.IOException from label16 to label17 with label20;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch android.os.RemoteException from label17 to label18 with label28;
        catch java.io.IOException from label17 to label18 with label28;
        catch java.lang.Throwable from label17 to label18 with label35;
        catch android.os.RemoteException from label26 to label27 with label28;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.lang.Throwable from label26 to label27 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
    }

    static byte[] readFully(java.io.InputStream, int[]) throws java.io.IOException
    {
        int[] r0;
        int $i1, $i2, $i3, $i5, i8, i9, i10, $i11, $i12, i13, $i14;
        java.lang.StringBuilder $r8, $r14, $r22;
        java.lang.String $r13, $r19, $r24;
        java.io.InputStream r20;
        byte[] r21, r26;

        r20 := @parameter0: java.io.InputStream;

        r0 := @parameter1: int[];

        i8 = virtualinvoke r20.<java.io.InputStream: int available()>();

        if i8 <= 0 goto label1;

        i9 = i8 + 1;

        goto label2;

     label1:
        i9 = 16384;

     label2:
        r21 = newarray (byte)[i9];

        i10 = 0;

     label3:
        $i11 = lengthof r21;

        $i12 = $i11 - i10;

        i13 = virtualinvoke r20.<java.io.InputStream: int read(byte[],int,int)>(r21, i10, $i12);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes at ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of avail ");

        $i14 = lengthof r21;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StatsPullAtomService", $r24);

        if i13 >= 0 goto label4;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**** FINISHED READING: pos=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len=");

        $i5 = lengthof r21;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StatsPullAtomService", $r19);

        r0[0] = i10;

        return r21;

     label4:
        i10 = i10 + i13;

        r26 = r21;

        $i1 = lengthof r21;

        if i10 < $i1 goto label5;

        $i2 = i10 + 16384;

        r26 = newarray (byte)[$i2];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes to new array len ");

        $i3 = lengthof r26;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StatsPullAtomService", $r13);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, 0, r26, 0, i10);

     label5:
        r21 = r26;

        goto label3;
    }

    private long readProcStatsHighWaterMark(int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i2, $i3, $i4;
        long l1;
        java.io.File $r1, r11;
        java.lang.String $r2, $r4, $r8;
        java.lang.String[] $r3;
        java.lang.Long $r5;
        java.lang.Throwable $r9, $r10;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$eb4Q1ue_bVXbLIAV2RxP5dbSYUw r12;
        java.io.File[] r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

     label01:
        r11 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.io.File mBaseDir>;

        r12 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$eb4Q1ue_bVXbLIAV2RxP5dbSYUw;

        specialinvoke r12.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$eb4Q1ue_bVXbLIAV2RxP5dbSYUw: void <init>(int)>(i0);

        r13 = virtualinvoke r11.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>(r12);

     label02:
        if r13 == null goto label08;

     label03:
        $i2 = lengthof r13;

        if $i2 != 0 goto label05;

     label04:
        goto label08;

     label05:
        $i3 = lengthof r13;

        if $i3 <= 1 goto label06;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only 1 file expected for high water mark. Found ");

        $i4 = lengthof r13;

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", $r8);

     label06:
        $r1 = r13[0];

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("_");

        $r4 = $r3[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r4);

        l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

     label07:
        return l1;

     label08:
        return 0L;

     label09:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Failed to parse file name.", $r10);

        goto label11;

     label10:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Failed to get procstats high watermark file.", $r9);

     label11:
        return 0L;

        catch java.lang.SecurityException from label01 to label02 with label10;
        catch java.lang.NumberFormatException from label01 to label02 with label09;
        catch java.lang.SecurityException from label03 to label04 with label10;
        catch java.lang.NumberFormatException from label03 to label04 with label09;
        catch java.lang.SecurityException from label05 to label06 with label10;
        catch java.lang.NumberFormatException from label05 to label06 with label09;
        catch java.lang.SecurityException from label06 to label07 with label10;
        catch java.lang.NumberFormatException from label06 to label07 with label09;
    }

    private void registerAppOps()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10060, null, $r2, $r1);

        return;
    }

    private void registerAppSize()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10027, null, $r2, $r1);

        return;
    }

    private void registerAppsOnExternalStorageInfo()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10057, null, $r2, $r1);

        return;
    }

    private void registerAttributedAppOps()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10075, null, $r2, $r1);

        return;
    }

    private void registerBatteryCycleCount()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10045, null, $r2, $r1);

        return;
    }

    private void registerBatteryLevel()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10043, null, $r2, $r1);

        return;
    }

    private void registerBatteryVoltage()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10030, null, $r2, $r1);

        return;
    }

    private void registerBinderCallsStats()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[5];

        $r3[0] = 4;

        $r3[1] = 5;

        $r3[2] = 6;

        $r3[3] = 8;

        $r3[4] = 12;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10022, r1, $r6, $r5);

        return;
    }

    private void registerBinderCallsStatsExceptions()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10023, null, $r2, $r1);

        return;
    }

    private void registerBluetoothActivityInfo()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10007, null, $r2, $r1);

        return;
    }

    private void registerBluetoothBytesTransfer()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[2];

        $r3[0] = 2;

        $r3[1] = 3;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10006, r1, $r6, $r5);

        return;
    }

    private void registerBuildInformation()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10044, null, $r2, $r1);

        return;
    }

    private void registerBytesTransferByTagAndMetered()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        android.app.StatsManager $r5;
        java.util.concurrent.Executor $r6;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 4;

        $r3[1] = 5;

        $r3[2] = 6;

        $r3[3] = 7;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = staticinvoke <com.android.internal.os.BackgroundThread: java.util.concurrent.Executor getExecutor()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r5.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10083, r1, $r6, $r7);

        return;
    }

    private void registerCategorySize()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10028, null, $r2, $r1);

        return;
    }

    private void registerCoolingDevice()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10059, null, $r2, $r1);

        return;
    }

    private void registerCpuActiveTime()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[1];

        $r3[0] = 2;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10016, r1, $r6, $r5);

        return;
    }

    private void registerCpuClusterTime()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[1];

        $r3[0] = 3;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10017, r1, $r6, $r5);

        return;
    }

    private void registerCpuTimePerFreq()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[1];

        $r3[0] = 3;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10008, r1, $r6, $r5);

        return;
    }

    private void registerCpuTimePerThreadFreq()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[8];

        $r3[0] = 7;

        $r3[1] = 9;

        $r3[2] = 11;

        $r3[3] = 13;

        $r3[4] = 15;

        $r3[5] = 17;

        $r3[6] = 19;

        $r3[7] = 21;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10037, r1, $r6, $r5);

        return;
    }

    private void registerCpuTimePerUid()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[2];

        $r3[0] = 2;

        $r3[1] = 3;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10009, r1, $r6, $r5);

        return;
    }

    private void registerCpuTimePerUidFreq()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[1];

        $r3[0] = 3;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10010, r1, $r6, $r5);

        return;
    }

    private void registerDangerousPermissionState()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10050, null, $r2, $r1);

        return;
    }

    private void registerDangerousPermissionStateSampled()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10067, null, $r2, $r1);

        return;
    }

    private void registerDataUsageBytesTransfer()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        android.app.StatsManager $r5;
        java.util.concurrent.Executor $r6;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 2;

        $r3[1] = 3;

        $r3[2] = 4;

        $r3[3] = 5;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = staticinvoke <com.android.internal.os.BackgroundThread: java.util.concurrent.Executor getExecutor()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r5.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10082, r1, $r6, $r7);

        return;
    }

    private void registerDebugElapsedClock()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 1;

        $r3[1] = 2;

        $r3[2] = 3;

        $r3[3] = 4;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10046, r1, $r6, $r5);

        return;
    }

    private void registerDebugFailingElapsedClock()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 1;

        $r3[1] = 2;

        $r3[2] = 3;

        $r3[3] = 4;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10047, r1, $r6, $r5);

        return;
    }

    private void registerDeviceCalculatedPowerBlameOther()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10041, null, $r2, $r1);

        return;
    }

    private void registerDeviceCalculatedPowerBlameUid()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10040, null, $r2, $r1);

        return;
    }

    private void registerDeviceCalculatedPowerUse()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10039, null, $r2, $r1);

        return;
    }

    private void registerDirectoryUsage()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10026, null, $r2, $r1);

        return;
    }

    private void registerDiskIO()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4, $r5;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r6;
        java.util.concurrent.Executor $r7;
        android.app.StatsManager $r8;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[10];

        $r3[0] = 2;

        $r3[1] = 3;

        $r3[2] = 4;

        $r3[3] = 5;

        $r3[4] = 6;

        $r3[5] = 7;

        $r3[6] = 8;

        $r3[7] = 9;

        $r3[8] = 10;

        $r3[9] = 11;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        $r5 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setCoolDownMillis(long)>(3000L);

        r1 = virtualinvoke $r5.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r8 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r7 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r6 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r8.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10032, r1, $r7, $r6);

        return;
    }

    private void registerDiskStats()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10025, null, $r2, $r1);

        return;
    }

    private void registerExternalStorageInfo()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10053, null, $r2, $r1);

        return;
    }

    private void registerFaceSettings()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10058, null, $r2, $r1);

        return;
    }

    private void registerFullBatteryCapacity()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10020, null, $r2, $r1);

        return;
    }

    private void registerIonHeapSize()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.io.File $r1;
        boolean $z0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r2;
        java.util.concurrent.Executor $r3;
        android.app.StatsManager $r4;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/sys/kernel/ion/total_heaps_kb");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r3 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r4.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10070, null, $r3, $r2);

        return;
    }

    private void registerKernelWakelock()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10004, null, $r2, $r1);

        return;
    }

    private void registerLooperStats()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[5];

        $r3[0] = 5;

        $r3[1] = 6;

        $r3[2] = 7;

        $r3[3] = 8;

        $r3[4] = 9;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10024, r1, $r6, $r5);

        return;
    }

    private void registerMobileBytesTransfer()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 2;

        $r3[1] = 3;

        $r3[2] = 4;

        $r3[3] = 5;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10002, r1, $r6, $r5);

        return;
    }

    private void registerMobileBytesTransferBackground()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 3;

        $r3[1] = 4;

        $r3[2] = 5;

        $r3[3] = 6;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10003, r1, $r6, $r5);

        return;
    }

    private void registerModemActivityInfo()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10012, null, $r2, $r1);

        return;
    }

    private void registerNotificationRemoteViews()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10066, null, $r2, $r1);

        return;
    }

    private void registerNumFacesEnrolled()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10048, null, $r2, $r1);

        return;
    }

    private void registerNumFingerprintsEnrolled()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10031, null, $r2, $r1);

        return;
    }

    private void registerPowerProfile()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10033, null, $r2, $r1);

        return;
    }

    private void registerProcStats()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10029, null, $r2, $r1);

        return;
    }

    private void registerProcStatsPkgProc()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10034, null, $r2, $r1);

        return;
    }

    private void registerProcessCpuTime()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r4;
        java.util.concurrent.Executor $r5;
        android.app.StatsManager $r6;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setCoolDownMillis(long)>(5000L);

        r1 = virtualinvoke $r3.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r6 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r5 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r6.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10035, r1, $r5, $r4);

        return;
    }

    private void registerProcessMemoryHighWaterMark()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10042, null, $r2, $r1);

        return;
    }

    private void registerProcessMemorySnapshot()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10064, null, $r2, $r1);

        return;
    }

    private void registerProcessMemoryState()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[5];

        $r3[0] = 4;

        $r3[1] = 5;

        $r3[2] = 6;

        $r3[3] = 7;

        $r3[4] = 8;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10013, r1, $r6, $r5);

        return;
    }

    private void registerProcessSystemIonHeapSize()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10061, null, $r2, $r1);

        return;
    }

    private void registerRemainingBatteryCapacity()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10019, null, $r2, $r1);

        return;
    }

    private void registerRoleHolder()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10049, null, $r2, $r1);

        return;
    }

    private void registerRuntimeAppOpAccessMessage()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10069, null, $r2, $r1);

        return;
    }

    private void registerSettingsStats()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10080, null, $r2, $r1);

        return;
    }

    private void registerSystemElapsedRealtime()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r3, $r4;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setCoolDownMillis(long)>(1000L);

        $r4 = virtualinvoke $r3.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setTimeoutMillis(long)>(500L);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10014, r1, $r6, $r5);

        return;
    }

    private void registerSystemIonHeapSize()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10056, null, $r2, $r1);

        return;
    }

    private void registerSystemUptime()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10015, null, $r2, $r1);

        return;
    }

    private void registerTemperature()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10021, null, $r2, $r1);

        return;
    }

    private void registerTimeZoneDataInfo()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10052, null, $r2, $r1);

        return;
    }

    private void registerWifiActivityInfo()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;
        java.util.concurrent.Executor $r2;
        android.app.StatsManager $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r2 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r3.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10011, null, $r2, $r1);

        return;
    }

    private void registerWifiBytesTransfer()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 2;

        $r3[1] = 3;

        $r3[2] = 4;

        $r3[3] = 5;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10000, r1, $r6, $r5);

        return;
    }

    private void registerWifiBytesTransferBackground()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.app.StatsManager$PullAtomMetadata r1;
        android.app.StatsManager$PullAtomMetadata$Builder $r2, $r4;
        int[] $r3;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r5;
        java.util.concurrent.Executor $r6;
        android.app.StatsManager $r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = new android.app.StatsManager$PullAtomMetadata$Builder;

        specialinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: void <init>()>();

        $r3 = newarray (int)[4];

        $r3[0] = 3;

        $r3[1] = 4;

        $r3[2] = 5;

        $r3[3] = 6;

        $r4 = virtualinvoke $r2.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata$Builder setAdditiveFields(int[])>($r3);

        r1 = virtualinvoke $r4.<android.app.StatsManager$PullAtomMetadata$Builder: android.app.StatsManager$PullAtomMetadata build()>();

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager>;

        $r6 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl>;

        virtualinvoke $r7.<android.app.StatsManager: void setPullAtomCallback(int,android.app.StatsManager$PullAtomMetadata,java.util.concurrent.Executor,android.app.StatsManager$StatsPullAtomCallback)>(10001, r1, $r6, $r5);

        return;
    }

    private int sampleAppOps(java.util.List, java.util.List, int, int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.util.List r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i17, i18, i19, i20;
        com.android.server.stats.pull.StatsPullAtomService$AppOpEntry r3;
        android.util.StatsEvent$Builder r4;
        java.lang.Object $r5;
        java.lang.String $r9, $r31;
        android.app.AppOpsManager$HistoricalOp $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        long $l11, $l12, $l13, $l14, $l15, $l16;
        android.util.ArraySet $r26;
        java.lang.Integer $r27;
        boolean $z0;
        android.util.StatsEvent $r29;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i18 := @parameter3: int;

        i1 = interfaceinvoke r2.<java.util.List: int size()>();

        i19 = 0;

     label1:
        if i19 >= i1 goto label6;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i19);

        r3 = (com.android.server.stats.pull.StatsPullAtomService$AppOpEntry) $r5;

        $i8 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: int mHash>;

        if $i8 < i18 goto label2;

        goto label5;

     label2:
        r4 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i9 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: int mUid>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r9 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: java.lang.String mPackageName>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r9);

        if i0 != 10075 goto label3;

        $r31 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: java.lang.String mAttributionTag>;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r31);

     label3:
        $r11 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $i10 = virtualinvoke $r11.<android.app.AppOpsManager$HistoricalOp: int getOpCode()>();

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i10);

        $r13 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $l11 = virtualinvoke $r13.<android.app.AppOpsManager$HistoricalOp: long getForegroundAccessCount(int)>(9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l11);

        $r15 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $l12 = virtualinvoke $r15.<android.app.AppOpsManager$HistoricalOp: long getBackgroundAccessCount(int)>(9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l12);

        $r17 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $l13 = virtualinvoke $r17.<android.app.AppOpsManager$HistoricalOp: long getForegroundRejectCount(int)>(9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l13);

        $r19 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $l14 = virtualinvoke $r19.<android.app.AppOpsManager$HistoricalOp: long getBackgroundRejectCount(int)>(9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l14);

        $r21 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $l15 = virtualinvoke $r21.<android.app.AppOpsManager$HistoricalOp: long getForegroundAccessDuration(int)>(9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l15);

        $r23 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $l16 = virtualinvoke $r23.<android.app.AppOpsManager$HistoricalOp: long getBackgroundAccessDuration(int)>(9);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l16);

        $r26 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.util.ArraySet mDangerousAppOpsList>;

        $r25 = r3.<com.android.server.stats.pull.StatsPullAtomService$AppOpEntry: android.app.AppOpsManager$HistoricalOp mOp>;

        $i17 = virtualinvoke $r25.<android.app.AppOpsManager$HistoricalOp: int getOpCode()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $z0 = virtualinvoke $r26.<android.util.ArraySet: boolean contains(java.lang.Object)>($r27);

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>($z0);

        if i0 != 10075 goto label4;

        virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i18);

     label4:
        $r29 = virtualinvoke r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r29);

     label5:
        i19 = i19 + 1;

        goto label1;

     label6:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 <= 800 goto label7;

        $i3 = i18 * 500;

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $i6 = $i3 / $i4;

        $i5 = i18 - 1;

        i20 = staticinvoke <android.util.MathUtils: int constrain(int,int,int)>($i6, 0, $i5);

        interfaceinvoke r1.<java.util.List: void clear()>();

        $i7 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: int sampleAppOps(java.util.List,java.util.List,int,int)>(r1, r2, i0, i20);

        return $i7;

     label7:
        return i18;
    }

    private android.net.NetworkStats sliceNetworkStats(android.net.NetworkStats, java.util.function.BiConsumer)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.net.NetworkStats r1, $r6;
        java.util.function.BiConsumer r2;
        long $l0, $l2, $l3, $l4, $l5;
        android.net.NetworkStats$Entry $r7, $r9;
        java.lang.String $r8;
        int $i1, i6;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.net.NetworkStats;

        r2 := @parameter1: java.util.function.BiConsumer;

        $r6 = new android.net.NetworkStats;

        $l0 = virtualinvoke r1.<android.net.NetworkStats: long getElapsedRealtime()>();

        specialinvoke $r6.<android.net.NetworkStats: void <init>(long,int)>($l0, 1);

        $r7 = new android.net.NetworkStats$Entry;

        specialinvoke $r7.<android.net.NetworkStats$Entry: void <init>()>();

        $r7.<android.net.NetworkStats$Entry: int uid> = -1;

        $r8 = <android.net.NetworkStats: java.lang.String IFACE_ALL>;

        $r7.<android.net.NetworkStats$Entry: java.lang.String iface> = $r8;

        $r7.<android.net.NetworkStats$Entry: int set> = -1;

        $r7.<android.net.NetworkStats$Entry: int tag> = 0;

        $r7.<android.net.NetworkStats$Entry: int metered> = -1;

        $r7.<android.net.NetworkStats$Entry: int roaming> = -1;

        $r7.<android.net.NetworkStats$Entry: int defaultNetwork> = -1;

        $r9 = new android.net.NetworkStats$Entry;

        specialinvoke $r9.<android.net.NetworkStats$Entry: void <init>()>();

        i6 = 0;

     label1:
        $i1 = virtualinvoke r1.<android.net.NetworkStats: int size()>();

        if i6 >= $i1 goto label3;

        virtualinvoke r1.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i6, $r9);

        if r2 == null goto label2;

        interfaceinvoke r2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r7, $r9);

     label2:
        $l2 = $r9.<android.net.NetworkStats$Entry: long rxBytes>;

        $r7.<android.net.NetworkStats$Entry: long rxBytes> = $l2;

        $l3 = $r9.<android.net.NetworkStats$Entry: long rxPackets>;

        $r7.<android.net.NetworkStats$Entry: long rxPackets> = $l3;

        $l4 = $r9.<android.net.NetworkStats$Entry: long txBytes>;

        $r7.<android.net.NetworkStats$Entry: long txBytes> = $l4;

        $l5 = $r9.<android.net.NetworkStats$Entry: long txPackets>;

        $r7.<android.net.NetworkStats$Entry: long txPackets> = $l5;

        virtualinvoke $r6.<android.net.NetworkStats: android.net.NetworkStats combineValues(android.net.NetworkStats$Entry)>($r7);

        i6 = i6 + 1;

        goto label1;

     label3:
        return $r6;
    }

    private android.net.NetworkStats sliceNetworkStatsByFgbg(android.net.NetworkStats)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.net.NetworkStats r1, $r3;
        com.android.server.stats.pull.'-$$Lambda$StatsPullAtomService$ig4lvwvWpcGcnTfyysmBmnE31Y0' $r2;
        java.util.function.BiConsumer r4;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.net.NetworkStats;

        $r2 = <com.android.server.stats.pull._$$Lambda$StatsPullAtomService$ig4lvwvWpcGcnTfyysmBmnE31Y0: com.android.server.stats.pull.'-$$Lambda$StatsPullAtomService$ig4lvwvWpcGcnTfyysmBmnE31Y0' INSTANCE>;

        r4 = (java.util.function.BiConsumer) $r2;

        $r3 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStats(android.net.NetworkStats,java.util.function.BiConsumer)>(r1, r4);

        return $r3;
    }

    private android.net.NetworkStats sliceNetworkStatsByUidAndFgbg(android.net.NetworkStats)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.net.NetworkStats r1, $r3;
        com.android.server.stats.pull.'-$$Lambda$StatsPullAtomService$cwWIypDOMYGE9DeAeXTAf5svkjg' $r2;
        java.util.function.BiConsumer r4;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.net.NetworkStats;

        $r2 = <com.android.server.stats.pull._$$Lambda$StatsPullAtomService$cwWIypDOMYGE9DeAeXTAf5svkjg: com.android.server.stats.pull.'-$$Lambda$StatsPullAtomService$cwWIypDOMYGE9DeAeXTAf5svkjg' INSTANCE>;

        r4 = (java.util.function.BiConsumer) $r2;

        $r3 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStats(android.net.NetworkStats,java.util.function.BiConsumer)>(r1, r4);

        return $r3;
    }

    private android.net.NetworkStats sliceNetworkStatsByUidTagAndMetered(android.net.NetworkStats)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.net.NetworkStats r1, $r3;
        com.android.server.stats.pull.'-$$Lambda$StatsPullAtomService$XZ9Q7OtKddIKuUpO0rhZztz_J7M' $r2;
        java.util.function.BiConsumer r4;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 := @parameter0: android.net.NetworkStats;

        $r2 = <com.android.server.stats.pull._$$Lambda$StatsPullAtomService$XZ9Q7OtKddIKuUpO0rhZztz_J7M: com.android.server.stats.pull.'-$$Lambda$StatsPullAtomService$XZ9Q7OtKddIKuUpO0rhZztz_J7M' INSTANCE>;

        r4 = (java.util.function.BiConsumer) $r2;

        $r3 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.NetworkStats sliceNetworkStats(android.net.NetworkStats,java.util.function.BiConsumer)>(r1, r4);

        return $r3;
    }

    static void unpackStreamedData(int, java.util.List, java.util.List) throws java.io.IOException
    {
        int i0, $i1;
        java.util.List r0, r9;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r1;
        java.lang.Object $r2;
        android.os.ParcelFileDescriptor $r3;
        android.util.StatsEvent$Builder $r4, $r5, $r7;
        byte[] $r6, r12;
        android.util.StatsEvent $r8;
        int[] r11;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        r9 := @parameter2: java.util.List;

        $r1 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r2 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (android.os.ParcelFileDescriptor) $r2;

        specialinvoke $r1.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r3);

        r11 = newarray (int)[1];

        r12 = staticinvoke <com.android.server.stats.pull.StatsPullAtomService: byte[] readFully(java.io.InputStream,int[])>($r1, r11);

        $r4 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i1 = r11[0];

        $r6 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r12, $i1);

        $r7 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeByteArray(byte[])>($r6);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;
    }

    void initializePullersState()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i2, $i3, i5, i6, i7;
        android.content.Context $r1, $r4, $r7, $r10, $r15, $r28, $r30, $r33;
        java.lang.Object $r2, $r5, $r8, $r11, $r16;
        android.app.StatsManager $r3;
        android.net.wifi.WifiManager $r6;
        android.telephony.TelephonyManager $r9;
        android.telephony.SubscriptionManager $r12, $r14;
        com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener $r13;
        android.os.storage.StorageManager $r17;
        com.android.internal.os.StoragedUidIoStatsReader $r18;
        java.io.File $r19, $r20;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader $r21;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader $r22;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader $r23;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader $r24;
        com.android.internal.os.KernelWakelockReader $r25;
        com.android.internal.os.KernelWakelockStats $r26;
        com.android.internal.os.PowerProfile $r27;
        com.android.internal.os.KernelCpuSpeedReader[] $r29, $r38;
        com.android.internal.os.KernelCpuThreadReaderDiff $r31;
        com.android.server.BatteryService$HealthServiceWrapper $r32;
        android.content.pm.PermissionInfo $r34;
        android.util.ArraySet $r35;
        java.lang.Integer $r36;
        com.android.internal.os.KernelCpuSpeedReader $r37;
        android.os.RemoteException $r39;
        android.content.pm.PackageManager$NameNotFoundException $r40;
        android.content.pm.PackageManager r45;
        java.lang.String r46;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("stats");

        $r3 = (android.app.StatsManager) $r2;

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.StatsManager mStatsManager> = $r3;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r6 = (android.net.wifi.WifiManager) $r5;

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.wifi.WifiManager mWifiManager> = $r6;

        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r9 = (android.telephony.TelephonyManager) $r8;

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.telephony.TelephonyManager mTelephony> = $r9;

        $r10 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telephony_subscription_service");

        $r12 = (android.telephony.SubscriptionManager) $r11;

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.telephony.SubscriptionManager mSubscriptionManager> = $r12;

        $r13 = new com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener;

        $r14 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.telephony.SubscriptionManager mSubscriptionManager>;

        specialinvoke $r13.<com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener: void <init>(com.android.server.stats.pull.StatsPullAtomService,android.telephony.SubscriptionManager)>(r0, $r14);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsSubscriptionsListener mStatsSubscriptionsListener> = $r13;

        $r15 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r17 = (android.os.storage.StorageManager) $r16;

        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.storage.StorageManager mStorageManager> = $r17;

        $r18 = new com.android.internal.os.StoragedUidIoStatsReader;

        specialinvoke $r18.<com.android.internal.os.StoragedUidIoStatsReader: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.StoragedUidIoStatsReader mStoragedUidIoStatsReader> = $r18;

        $r19 = new java.io.File;

        $r20 = staticinvoke <com.android.server.SystemServiceManager: java.io.File ensureSystemDir()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r20, "stats_pull");

        r0.<com.android.server.stats.pull.StatsPullAtomService: java.io.File mBaseDir> = $r19;

        virtualinvoke $r19.<java.io.File: boolean mkdirs()>();

        $r21 = new com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader;

        specialinvoke $r21.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader: void <init>(boolean)>(0);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader mCpuUidUserSysTimeReader> = $r21;

        $r22 = new com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        specialinvoke $r22.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void <init>(boolean)>(0);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader mCpuUidFreqTimeReader> = $r22;

        $r23 = new com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader;

        specialinvoke $r23.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader: void <init>(boolean)>(0);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader mCpuUidActiveTimeReader> = $r23;

        $r24 = new com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader;

        specialinvoke $r24.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader: void <init>(boolean)>(0);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader mCpuUidClusterTimeReader> = $r24;

        $r25 = new com.android.internal.os.KernelWakelockReader;

        specialinvoke $r25.<com.android.internal.os.KernelWakelockReader: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelWakelockReader mKernelWakelockReader> = $r25;

        $r26 = new com.android.internal.os.KernelWakelockStats;

        specialinvoke $r26.<com.android.internal.os.KernelWakelockStats: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelWakelockStats mTmpWakelockStats> = $r26;

        $r27 = new com.android.internal.os.PowerProfile;

        $r28 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        specialinvoke $r27.<com.android.internal.os.PowerProfile: void <init>(android.content.Context)>($r28);

        i0 = virtualinvoke $r27.<com.android.internal.os.PowerProfile: int getNumCpuClusters()>();

        $r29 = newarray (com.android.internal.os.KernelCpuSpeedReader)[i0];

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuSpeedReader[] mKernelCpuSpeedReaders> = $r29;

        i5 = 0;

        i6 = 0;

     label01:
        if i6 >= i0 goto label02;

        i1 = virtualinvoke $r27.<com.android.internal.os.PowerProfile: int getNumSpeedStepsInCpuCluster(int)>(i6);

        $r38 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuSpeedReader[] mKernelCpuSpeedReaders>;

        $r37 = new com.android.internal.os.KernelCpuSpeedReader;

        specialinvoke $r37.<com.android.internal.os.KernelCpuSpeedReader: void <init>(int,int)>(i5, i1);

        $r38[i6] = $r37;

        $i3 = virtualinvoke $r27.<com.android.internal.os.PowerProfile: int getNumCoresInCpuCluster(int)>(i6);

        i5 = i5 + $i3;

        i6 = i6 + 1;

        goto label01;

     label02:
        $r30 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r31 = staticinvoke <com.android.internal.os.KernelCpuThreadReaderSettingsObserver: com.android.internal.os.KernelCpuThreadReaderDiff getSettingsModifiedReader(android.content.Context)>($r30);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuThreadReaderDiff mKernelCpuThreadReader> = $r31;

        $r32 = new com.android.server.BatteryService$HealthServiceWrapper;

        specialinvoke $r32.<com.android.server.BatteryService$HealthServiceWrapper: void <init>()>();

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.BatteryService$HealthServiceWrapper mHealthService> = $r32;

     label03:
        virtualinvoke $r32.<com.android.server.BatteryService$HealthServiceWrapper: void init()>();

     label04:
        goto label06;

     label05:
        $r39 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "failed to initialize healthHalWrapper");

     label06:
        $r33 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        r45 = virtualinvoke $r33.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i7 = 0;

     label07:
        if i7 >= 100 goto label12;

        r46 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPermission(int)>(i7);

        if r46 != null goto label08;

        goto label11;

     label08:
        $r34 = virtualinvoke r45.<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>(r46, 0);

        $i2 = virtualinvoke $r34.<android.content.pm.PermissionInfo: int getProtection()>();

        if $i2 != 1 goto label09;

        $r35 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.util.ArraySet mDangerousAppOpsList>;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        virtualinvoke $r35.<android.util.ArraySet: boolean add(java.lang.Object)>($r36);

     label09:
        goto label11;

     label10:
        $r40 := @caughtexception;

     label11:
        i7 = i7 + 1;

        goto label07;

     label12:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label10;
    }

    public void lambda$getINotificationManagerService$4$StatsPullAtomService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mNotificationStatsLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager mNotificationManagerService> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$getIProcessStatsService$5$StatsPullAtomService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mProcStatsLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats mProcessStatsService> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$getIStoragedService$3$StatsPullAtomService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mStoragedLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged mStorageService> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$getIThermalService$2$StatsPullAtomService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: java.lang.Object mThermalLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService mThermalService> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$onBootPhase$0$StatsPullAtomService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void nativeInit()>();

        virtualinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void initializePullersState()>();

        virtualinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerPullers()>();

        virtualinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerEventListeners()>();

        return;
    }

    public void lambda$onBootPhase$1$StatsPullAtomService()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void initAndRegisterNetworkStatsPullers()>();

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        android.os.Handler $r1, $r3;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$w2J9UcZX1E4P1ogWSvuoTC2auDE $r2;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$DD__7RQZDPvJeL9pnb_7J1voUNE $r4;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.SystemService: void onBootPhase(int)>(i0);

        if i0 != 500 goto label1;

        $r3 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r4 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$DD__7RQZDPvJeL9pnb_7J1voUNE;

        specialinvoke $r4.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$DD__7RQZDPvJeL9pnb_7J1voUNE: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        goto label2;

     label1:
        if i0 != 600 goto label2;

        $r1 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$w2J9UcZX1E4P1ogWSvuoTC2auDE;

        specialinvoke $r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$w2J9UcZX1E4P1ogWSvuoTC2auDE: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

     label2:
        return;
    }

    public void onStart()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        return;
    }

    int pullAppOpsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i2;
        long l1;
        android.app.AppOpsManager r1;
        java.util.concurrent.CompletableFuture r2;
        android.app.AppOpsManager$HistoricalOpsRequest r3;
        com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8 r4;
        android.content.Context $r5;
        java.lang.Object $r6, $r10;
        android.app.AppOpsManager$HistoricalOpsRequest$Builder $r7, r16;
        java.util.concurrent.TimeUnit $r9;
        android.app.AppOpsManager$HistoricalOps $r11;
        java.util.List $r12, r15;
        java.lang.Throwable $r13, $r14;
        java.util.concurrent.Executor r17;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r15 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        r1 = (android.app.AppOpsManager) $r6;

        r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        r16 = new android.app.AppOpsManager$HistoricalOpsRequest$Builder;

        specialinvoke r16.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: void <init>(long,long)>(0L, 9223372036854775807L);

        $r7 = virtualinvoke r16.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest$Builder setFlags(int)>(9);

        r3 = virtualinvoke $r7.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest build()>();

        r17 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        r4 = new com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8;

        specialinvoke r4.<com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8: void <init>(java.util.concurrent.CompletableFuture)>(r2);

        virtualinvoke r1.<android.app.AppOpsManager: void getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)>(r3, r17, r4);

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r10 = virtualinvoke r2.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(2000L, $r9);

        $r11 = (android.app.AppOpsManager$HistoricalOps) $r10;

        $r12 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List processHistoricalOps(android.app.AppOpsManager$HistoricalOps,int,int)>($r11, i0, 100);

        $i2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: int sampleAppOps(java.util.List,java.util.List,int,int)>(r15, $r12, i0, 100);

        if $i2 == 100 goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "Atom 10060 downsampled - too many dimensions");

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label3:
        $r14 := @caughtexception;

     label4:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Could not read appops", $r14);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label6:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    int pullAppSizeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2, $i3, $i5, $i6, i11;
        org.json.JSONObject r1;
        long l1, $l7, $l8, $l9;
        org.json.JSONArray r2, r3, r4, r17;
        android.util.StatsEvent$Builder $r5, $r7, $r8, $r9, $r10, $r11, r18;
        java.lang.String $r6, r16;
        java.lang.Throwable $r12, $r13, $r14;
        java.util.List r15;
        android.util.StatsEvent r19;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r15 := @parameter1: java.util.List;

     label01:
        r16 = staticinvoke <libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>("/data/system/diskstats_cache.json");

        r1 = new org.json.JSONObject;

        specialinvoke r1.<org.json.JSONObject: void <init>(java.lang.String)>(r16);

        l1 = virtualinvoke r1.<org.json.JSONObject: long optLong(java.lang.String,long)>("queryTime", -1L);

        r17 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("packageNames");

        r2 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("appSizes");

        r3 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("appDataSizes");

        r4 = virtualinvoke r1.<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>("cacheSizes");

        i2 = virtualinvoke r17.<org.json.JSONArray: int length()>();

        $i3 = virtualinvoke r2.<org.json.JSONArray: int length()>();

        if $i3 != i2 goto label11;

        $i5 = virtualinvoke r3.<org.json.JSONArray: int length()>();

        if $i5 != i2 goto label11;

        $i6 = virtualinvoke r4.<org.json.JSONArray: int length()>();

        if $i6 == i2 goto label03;

     label02:
        goto label11;

     label03:
        i11 = 0;

     label04:
        if i11 >= i2 goto label10;

     label05:
        r18 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

     label06:
        $r5 = virtualinvoke r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r6 = virtualinvoke r17.<org.json.JSONArray: java.lang.String getString(int)>(i11);

        $r7 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r6);

        $l7 = virtualinvoke r2.<org.json.JSONArray: long optLong(int,long)>(i11, -1L);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $l8 = virtualinvoke r3.<org.json.JSONArray: long optLong(int,long)>(i11, -1L);

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l8);

        $l9 = virtualinvoke r4.<org.json.JSONArray: long optLong(int,long)>(i11, -1L);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l9);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        r19 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

     label07:
        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>(r19);

     label08:
        i11 = i11 + 1;

        goto label04;

     label09:
        $r13 := @caughtexception;

        goto label15;

     label10:
        return 0;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "formatting error in diskstats cache file!");

     label12:
        return 1;

     label13:
        $r12 := @caughtexception;

        goto label15;

     label14:
        $r14 := @caughtexception;

     label15:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StatsPullAtomService", "Unable to read diskstats cache file within pullAppSize");

        return 1;

        catch java.io.IOException from label01 to label02 with label14;
        catch org.json.JSONException from label01 to label02 with label14;
        catch java.io.IOException from label05 to label06 with label14;
        catch org.json.JSONException from label05 to label06 with label14;
        catch java.io.IOException from label06 to label07 with label09;
        catch org.json.JSONException from label06 to label07 with label09;
        catch java.io.IOException from label07 to label08 with label13;
        catch org.json.JSONException from label07 to label08 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch org.json.JSONException from label11 to label12 with label13;
    }

    int pullAppsOnExternalStorageInfoLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1, $r7;
        java.util.Iterator r2;
        android.content.pm.ApplicationInfo r3;
        android.os.storage.StorageManager $r4, $r11;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        java.lang.Object $r8;
        java.util.UUID $r9, $r10;
        java.lang.String $r12, $r16;
        boolean $z0, $z1, $z2, $z4;
        android.util.StatsEvent$Builder $r13, $r14, $r15, $r17;
        android.util.StatsEvent $r18;
        android.os.storage.VolumeInfo r19;
        android.os.storage.DiskInfo r20;
        byte b1;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.storage.StorageManager mStorageManager>;

        if $r4 != null goto label01;

        return 1;

     label01:
        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r7 = virtualinvoke $r6.<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>(0);

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.ApplicationInfo) $r8;

        $r9 = r3.<android.content.pm.ApplicationInfo: java.util.UUID storageUuid>;

        if $r9 != null goto label03;

        goto label02;

     label03:
        $r11 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.storage.StorageManager mStorageManager>;

        $r10 = r3.<android.content.pm.ApplicationInfo: java.util.UUID storageUuid>;

        $r12 = virtualinvoke $r10.<java.util.UUID: java.lang.String toString()>();

        r19 = virtualinvoke $r11.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>($r12);

        if r19 != null goto label04;

        goto label02;

     label04:
        r20 = virtualinvoke r19.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo getDisk()>();

        if r20 != null goto label05;

        goto label02;

     label05:
        b1 = -1;

        $z0 = virtualinvoke r20.<android.os.storage.DiskInfo: boolean isSd()>();

        if $z0 == 0 goto label06;

        b1 = 1;

        goto label08;

     label06:
        $z1 = virtualinvoke r20.<android.os.storage.DiskInfo: boolean isUsb()>();

        if $z1 == 0 goto label07;

        b1 = 2;

        goto label08;

     label07:
        $z2 = virtualinvoke r3.<android.content.pm.ApplicationInfo: boolean isExternal()>();

        if $z2 == 0 goto label08;

        b1 = 3;

     label08:
        if b1 == -1 goto label09;

        $r13 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(b1);

        $r16 = r3.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r17 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r18);

     label09:
        goto label02;

     label10:
        return 0;
    }

    int pullAttributedAppOpsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        long l0;
        android.app.AppOpsManager$HistoricalOpsRequest r1;
        java.util.concurrent.Executor r2;
        android.content.Context $r3, $r10;
        java.lang.Object $r4, $r8;
        android.app.AppOpsManager$HistoricalOpsRequest$Builder $r5, r16;
        java.util.concurrent.TimeUnit $r7;
        int $i1, $i2, $i3, $i4, $i5, i7, i8;
        java.util.List $r9, r13;
        java.lang.Throwable $r11, $r12;
        android.app.AppOpsManager r14;
        java.util.concurrent.CompletableFuture r15;
        com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8 r17;
        android.app.AppOpsManager$HistoricalOps r18;
        android.os.Handler r19;
        com.android.server.stats.pull.StatsPullAtomService$2 r20;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i7 := @parameter0: int;

        r13 := @parameter1: java.util.List;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        r14 = (android.app.AppOpsManager) $r4;

        r15 = new java.util.concurrent.CompletableFuture;

        specialinvoke r15.<java.util.concurrent.CompletableFuture: void <init>()>();

        r16 = new android.app.AppOpsManager$HistoricalOpsRequest$Builder;

        specialinvoke r16.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: void <init>(long,long)>(0L, 9223372036854775807L);

        $r5 = virtualinvoke r16.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest$Builder setFlags(int)>(9);

        r1 = virtualinvoke $r5.<android.app.AppOpsManager$HistoricalOpsRequest$Builder: android.app.AppOpsManager$HistoricalOpsRequest build()>();

        r2 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r15);

        r17 = new com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8;

        specialinvoke r17.<com.android.server.stats.pull._$$Lambda$wPejPqIRC0ueiw9uak8ULakT1R8: void <init>(java.util.concurrent.CompletableFuture)>(r15);

        virtualinvoke r14.<android.app.AppOpsManager: void getHistoricalOps(android.app.AppOpsManager$HistoricalOpsRequest,java.util.concurrent.Executor,java.util.function.Consumer)>(r1, r2, r17);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r8 = virtualinvoke r15.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(2000L, $r7);

        r18 = (android.app.AppOpsManager$HistoricalOps) $r8;

        $i1 = r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate>;

        if $i1 != 0 goto label2;

        $r10 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        r19 = virtualinvoke $r10.<android.content.Context: android.os.Handler getMainThreadHandler()>();

        r20 = new com.android.server.stats.pull.StatsPullAtomService$2;

        specialinvoke r20.<com.android.server.stats.pull.StatsPullAtomService$2: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        virtualinvoke r19.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r20, 45000L);

        r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate> = 100;

     label2:
        $i2 = r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate>;

        $r9 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: java.util.List processHistoricalOps(android.app.AppOpsManager$HistoricalOps,int,int)>(r18, i7, $i2);

        $i3 = r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate>;

        i8 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: int sampleAppOps(java.util.List,java.util.List,int,int)>(r13, $r9, i7, $i3);

        $i4 = r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i8);

        r0.<com.android.server.stats.pull.StatsPullAtomService: int mAppOpsSamplingRate> = $i5;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label4:
        $r11 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Could not read appops", $r11);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label7:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    int pullBinderCallsStatsExceptionsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1;
        java.util.List r1;
        java.util.Map$Entry r2;
        java.lang.Object $r3, $r6, $r9, $r12;
        android.util.ArrayMap $r4;
        java.util.Set $r5;
        boolean $z0;
        android.util.StatsEvent$Builder $r7, $r8, $r11, $r14;
        java.lang.String $r10;
        java.lang.Integer $r13;
        android.util.StatsEvent $r15;
        com.android.server.BinderCallsStatsService$Internal r16;
        java.util.Iterator r17;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/BinderCallsStatsService$Internal;");

        r16 = (com.android.server.BinderCallsStatsService$Internal) $r3;

        if r16 != null goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "failed to get binderStats");

        return 1;

     label1:
        $r4 = virtualinvoke r16.<com.android.server.BinderCallsStatsService$Internal: android.util.ArrayMap getExportedExceptionStats()>();

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Set entrySet()>();

        r17 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r6;

        $r7 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r10);

        $r12 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.Integer) $r12;

        $i1 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        $r14 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label2;

     label3:
        return 0;
    }

    int pullBinderCallsStatsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i11, i13;
        java.util.List r1;
        java.lang.Object $r2, $r3;
        boolean $z0, $z1;
        android.util.StatsEvent$Builder $r4, $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.String $r8, $r10;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10;
        android.util.StatsEvent $r23;
        com.android.server.BinderCallsStatsService$Internal r24;
        java.util.ArrayList r25;
        java.util.Iterator r26;
        com.android.internal.os.BinderCallsStats$ExportedCallStat r27;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/BinderCallsStatsService$Internal;");

        r24 = (com.android.server.BinderCallsStatsService$Internal) $r2;

        if r24 != null goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "failed to get binderStats");

        return 1;

     label1:
        r25 = virtualinvoke r24.<com.android.server.BinderCallsStatsService$Internal: java.util.ArrayList getExportedCallStats()>();

        virtualinvoke r24.<com.android.server.BinderCallsStatsService$Internal: void reset()>();

        r26 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (com.android.internal.os.BinderCallsStats$ExportedCallStat) $r3;

        $r4 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i1 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: int workSourceUid>;

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r8 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: java.lang.String className>;

        $r9 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r8);

        $r10 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: java.lang.String methodName>;

        $r11 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r10);

        $l2 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long callCount>;

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $l3 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long exceptionCount>;

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long latencyMicros>;

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long maxLatencyMicros>;

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long cpuTimeMicros>;

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $l7 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long maxCpuTimeMicros>;

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $l8 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long maxReplySizeBytes>;

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l8);

        $l9 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long maxRequestSizeBytes>;

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l9);

        $l10 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: long recordedCallCount>;

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l10);

        $z1 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: boolean screenInteractive>;

        i13 = (int) $z1;

        $r21 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i13);

        $i11 = r27.<com.android.internal.os.BinderCallsStats$ExportedCallStat: int callingUid>;

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i11);

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label2;

     label3:
        return 0;
    }

    int pullBluetoothActivityInfoLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i2;
        java.util.List r1;
        android.bluetooth.BluetoothActivityEnergyInfo r2;
        android.util.StatsEvent$Builder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        long $l1, $l3, $l4, $l5, $l6;
        android.util.StatsEvent $r11;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.bluetooth.BluetoothActivityEnergyInfo fetchBluetoothData()>();

        if r2 != null goto label1;

        return 1;

     label1:
        $r3 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l1 = virtualinvoke r2.<android.bluetooth.BluetoothActivityEnergyInfo: long getTimeStamp()>();

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l1);

        $i2 = virtualinvoke r2.<android.bluetooth.BluetoothActivityEnergyInfo: int getBluetoothStackState()>();

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i2);

        $l3 = virtualinvoke r2.<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerTxTimeMillis()>();

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = virtualinvoke r2.<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerRxTimeMillis()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = virtualinvoke r2.<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerIdleTimeMillis()>();

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = virtualinvoke r2.<android.bluetooth.BluetoothActivityEnergyInfo: long getControllerEnergyUsed()>();

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        return 0;
    }

    int pullBluetoothBytesTransferLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i2, i5;
        java.util.List r1;
        android.bluetooth.UidTraffic[] r2, $r3;
        android.util.StatsEvent$Builder $r4, $r5, $r6, $r7, $r8, $r9;
        long $l3, $l4;
        android.util.StatsEvent $r10;
        android.bluetooth.BluetoothActivityEnergyInfo r11;
        android.bluetooth.UidTraffic r12;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r11 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.bluetooth.BluetoothActivityEnergyInfo fetchBluetoothData()>();

        if r11 == null goto label4;

        $r3 = virtualinvoke r11.<android.bluetooth.BluetoothActivityEnergyInfo: android.bluetooth.UidTraffic[] getUidTraffic()>();

        if $r3 != null goto label1;

        goto label4;

     label1:
        r2 = virtualinvoke r11.<android.bluetooth.BluetoothActivityEnergyInfo: android.bluetooth.UidTraffic[] getUidTraffic()>();

        i1 = lengthof r2;

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        r12 = r2[i5];

        $r4 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i2 = virtualinvoke r12.<android.bluetooth.UidTraffic: int getUid()>();

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i2);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $l3 = virtualinvoke r12.<android.bluetooth.UidTraffic: long getRxBytes()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = virtualinvoke r12.<android.bluetooth.UidTraffic: long getTxBytes()>();

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        i5 = i5 + 1;

        goto label2;

     label3:
        return 0;

     label4:
        return 1;
    }

    int pullBuildInformationLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        android.util.StatsEvent$Builder $r2, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        java.lang.String $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        android.util.StatsEvent $r22;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r5 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r4);

        $r6 = <android.os.Build: java.lang.String BRAND>;

        $r7 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r6);

        $r8 = <android.os.Build: java.lang.String PRODUCT>;

        $r9 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r8);

        $r10 = <android.os.Build: java.lang.String DEVICE>;

        $r11 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r10);

        $r12 = <android.os.Build$VERSION: java.lang.String RELEASE_OR_CODENAME>;

        $r13 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r12);

        $r14 = <android.os.Build: java.lang.String ID>;

        $r15 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r14);

        $r16 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        $r17 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r16);

        $r18 = <android.os.Build: java.lang.String TYPE>;

        $r19 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r18);

        $r20 = <android.os.Build: java.lang.String TAGS>;

        $r21 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r22);

        return 0;
    }

    int pullCategorySizeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.lang.String r1;
        org.json.JSONObject r2;
        long l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10;
        android.util.StatsEvent$Builder $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r54, $r55;
        android.util.StatsEvent $r8, $r14, $r20, $r26, $r32, $r38, $r44, $r50, $r56;
        java.lang.Throwable $r57;
        java.util.List r58;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r58 := @parameter1: java.util.List;

     label1:
        r1 = staticinvoke <libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>("/data/system/diskstats_cache.json");

        r2 = new org.json.JSONObject;

        specialinvoke r2.<org.json.JSONObject: void <init>(java.lang.String)>(r1);

        l1 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("queryTime", -1L);

        $r3 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(1);

        $l2 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("appSize", -1L);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(2);

        $l3 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("appDataSize", -1L);

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r14);

        $r15 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(3);

        $l4 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("cacheSize", -1L);

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r20);

        $r21 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(4);

        $l5 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("photosSize", -1L);

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $r25 = virtualinvoke $r24.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r26 = virtualinvoke $r25.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r26);

        $r27 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r28 = virtualinvoke $r27.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r29 = virtualinvoke $r28.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(5);

        $l6 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("videosSize", -1L);

        $r30 = virtualinvoke $r29.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $r31 = virtualinvoke $r30.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r32 = virtualinvoke $r31.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r32);

        $r33 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r34 = virtualinvoke $r33.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r35 = virtualinvoke $r34.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(6);

        $l7 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("audioSize", -1L);

        $r36 = virtualinvoke $r35.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $r37 = virtualinvoke $r36.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r38 = virtualinvoke $r37.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r38);

        $r39 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r40 = virtualinvoke $r39.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r41 = virtualinvoke $r40.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(7);

        $l8 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("downloadsSize", -1L);

        $r42 = virtualinvoke $r41.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l8);

        $r43 = virtualinvoke $r42.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r44 = virtualinvoke $r43.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r44);

        $r45 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r46 = virtualinvoke $r45.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r47 = virtualinvoke $r46.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(8);

        $l9 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("systemSize", -1L);

        $r48 = virtualinvoke $r47.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l9);

        $r49 = virtualinvoke $r48.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r50 = virtualinvoke $r49.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r50);

        $r51 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r52 = virtualinvoke $r51.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r53 = virtualinvoke $r52.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(9);

        $l10 = virtualinvoke r2.<org.json.JSONObject: long optLong(java.lang.String,long)>("otherSize", -1L);

        $r54 = virtualinvoke $r53.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l10);

        $r55 = virtualinvoke $r54.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r56 = virtualinvoke $r55.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r56);

     label2:
        return 0;

     label3:
        $r57 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StatsPullAtomService", "Unable to read diskstats cache file within pullCategorySize");

        return 1;

        catch java.io.IOException from label1 to label2 with label3;
        catch org.json.JSONException from label1 to label2 with label3;
    }

    int pullCooldownDeviceLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2, $i3, $i5, i7;
        long l1, $l4;
        android.os.CoolingDevice[] r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r6, $r7;
        java.lang.String $r5;
        android.util.StatsEvent $r8;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;
        java.util.List r11;
        android.os.IThermalService r12;
        android.os.CoolingDevice r13;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r11 := @parameter1: java.util.List;

        r12 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService getIThermalService()>();

        if r12 != null goto label01;

        return 1;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r1 = interfaceinvoke r12.<android.os.IThermalService: android.os.CoolingDevice[] getCurrentCoolingDevices()>();

        i2 = lengthof r1;

     label03:
        i7 = 0;

     label04:
        if i7 >= i2 goto label07;

        r13 = r1[i7];

     label05:
        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i3 = virtualinvoke r13.<android.os.CoolingDevice: int getType()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $r5 = virtualinvoke r13.<android.os.CoolingDevice: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r5);

        $l4 = virtualinvoke r13.<android.os.CoolingDevice: long getValue()>();

        $i5 = (int) $l4;

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i5);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r8);

     label06:
        i7 = i7 + 1;

        goto label04;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label08:
        $r9 := @caughtexception;

        goto label12;

     label09:
        $r10 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "Disconnected from thermal service. Cannot pull temperatures.");

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r9;

        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }

    int pullCpuActiveTimeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$7QU4r5Gcc8wkSqPGcEy7F6p_QXs $r2;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader mCpuUidActiveTimeReader>;

        $r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$7QU4r5Gcc8wkSqPGcEy7F6p_QXs;

        specialinvoke $r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$7QU4r5Gcc8wkSqPGcEy7F6p_QXs: void <init>(int,java.util.List)>(i0, r1);

        virtualinvoke $r3.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader: void readAbsolute(com.android.internal.os.KernelCpuUidTimeReader$Callback)>($r2);

        return 0;
    }

    int pullCpuClusterTimeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$wET8a4xmjbGGr2q4TaT3zvgVlHY $r2;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader mCpuUidClusterTimeReader>;

        $r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$wET8a4xmjbGGr2q4TaT3zvgVlHY;

        specialinvoke $r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$wET8a4xmjbGGr2q4TaT3zvgVlHY: void <init>(int,java.util.List)>(i0, r1);

        virtualinvoke $r3.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader: void readAbsolute(com.android.internal.os.KernelCpuUidTimeReader$Callback)>($r2);

        return 0;
    }

    int pullCpuTimePerFreqLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2, i4, i5;
        java.util.List r1;
        com.android.internal.os.KernelCpuSpeedReader $r2;
        android.util.StatsEvent$Builder $r3, $r4, $r5, $r6, $r7;
        long $l3;
        android.util.StatsEvent $r8;
        com.android.internal.os.KernelCpuSpeedReader[] r9;
        long[] r10;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        i4 = 0;

     label1:
        r9 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuSpeedReader[] mKernelCpuSpeedReaders>;

        $i1 = lengthof r9;

        if i4 >= $i1 goto label4;

        $r2 = r9[i4];

        r10 = virtualinvoke $r2.<com.android.internal.os.KernelCpuSpeedReader: long[] readAbsolute()>();

        if r10 == null goto label3;

        $i2 = lengthof r10;

        i5 = $i2 - 1;

     label2:
        if i5 < 0 goto label3;

        $r3 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i4);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i5);

        $l3 = r10[i5];

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        i5 = i5 + -1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return 0;
    }

    int pullCpuTimePerThreadFreqLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, i19, i20, i21;
        java.util.ArrayList r1, r3;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage r2;
        com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage r4;
        android.util.StatsEvent$Builder r5;
        com.android.internal.os.KernelCpuThreadReaderDiff $r6, r37;
        java.lang.Object $r7, $r8;
        int[] $r9, $r23, $r29, r38;
        java.lang.String $r15, $r17, $r31, $r35;
        android.util.StatsEvent $r19;
        java.lang.StringBuilder $r25, $r32;
        java.util.List r36;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r36 := @parameter1: java.util.List;

        r37 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuThreadReaderDiff mKernelCpuThreadReader>;

        if r37 != null goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "mKernelCpuThreadReader is null");

        return 1;

     label01:
        r1 = virtualinvoke r37.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.ArrayList getProcessCpuUsageDiffed()>();

        if r1 != null goto label02;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "processCpuUsages is null");

        return 1;

     label02:
        $r6 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuThreadReaderDiff mKernelCpuThreadReader>;

        r38 = virtualinvoke $r6.<com.android.internal.os.KernelCpuThreadReaderDiff: int[] getCpuFrequenciesKhz()>();

        $i1 = lengthof r38;

        if $i1 <= 8 goto label03;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected maximum 8 frequencies, but got ");

        $i15 = lengthof r38;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StatsPullAtomService", $r35);

        return 1;

     label03:
        i19 = 0;

     label04:
        $i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i19 >= $i2 goto label12;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        r2 = (com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage) $r7;

        r3 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        i20 = 0;

     label05:
        $i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if i20 >= $i3 goto label11;

        $r8 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        r4 = (com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage) $r8;

        $r9 = r4.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $i5 = lengthof $r9;

        $i4 = lengthof r38;

        if $i5 == $i4 goto label06;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected number of usage times, expected ");

        $i12 = lengthof r38;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $r29 = r4.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $i13 = lengthof $r29;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StatsPullAtomService", $r31);

        return 1;

     label06:
        r5 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i6 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: int uid>;

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i6);

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $i7 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: int processId>;

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i7);

        $i8 = r4.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int threadId>;

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i8);

        $r15 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.lang.String processName>;

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r15);

        $r17 = r4.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: java.lang.String threadName>;

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r17);

        i21 = 0;

     label07:
        if i21 >= 8 goto label10;

        $i9 = lengthof r38;

        if i21 >= $i9 goto label08;

        $i10 = r38[i21];

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i10);

        $r23 = r4.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $i11 = $r23[i21];

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i11);

        goto label09;

     label08:
        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(0);

        virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(0);

     label09:
        i21 = i21 + 1;

        goto label07;

     label10:
        $r19 = virtualinvoke r5.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r36.<java.util.List: boolean add(java.lang.Object)>($r19);

        i20 = i20 + 1;

        goto label05;

     label11:
        i19 = i19 + 1;

        goto label04;

     label12:
        return 0;
    }

    int pullCpuTimePerUidFreqLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$Bnp1JNLpA6tL0Uft8GZLVwhd038 $r2;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader mCpuUidFreqTimeReader>;

        $r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$Bnp1JNLpA6tL0Uft8GZLVwhd038;

        specialinvoke $r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$Bnp1JNLpA6tL0Uft8GZLVwhd038: void <init>(int,java.util.List)>(i0, r1);

        virtualinvoke $r3.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void readAbsolute(com.android.internal.os.KernelCpuUidTimeReader$Callback)>($r2);

        return 0;
    }

    int pullCpuTimePerUidLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$b4_7_H3BTTvMclBjrN4ip85gTHU $r2;
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader mCpuUidUserSysTimeReader>;

        $r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$b4_7_H3BTTvMclBjrN4ip85gTHU;

        specialinvoke $r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$b4_7_H3BTTvMclBjrN4ip85gTHU: void <init>(int,java.util.List)>(i0, r1);

        virtualinvoke $r3.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidUserSysTimeReader: void readAbsolute(com.android.internal.os.KernelCpuUidTimeReader$Callback)>($r2);

        return 0;
    }

    int pullDangerousPermissionStateLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i16, i17, i18;
        long l1;
        float f0, f11;
        android.content.pm.PackageManager r1;
        android.os.UserHandle r2;
        java.util.List r3, r37, r41, r50;
        java.util.HashSet $r4, r38, r51;
        android.content.Context $r5, $r6;
        java.lang.Object $r7, $r9, $r11;
        android.os.UserManager $r8;
        android.content.pm.UserInfo $r10;
        java.lang.String[] $r12, $r17, $r18;
        android.content.pm.ApplicationInfo $r13, $r15, $r22;
        java.lang.Integer $r14, $r16;
        boolean $z0, $z2, z4;
        java.lang.String $r19, $r29, r59, r61;
        int[] $r25;
        java.util.concurrent.ThreadLocalRandom $r30;
        byte $b14;
        java.lang.Throwable $r31, $r32, $r33, $r34, $r35, r56;
        android.content.pm.PackageManager$NameNotFoundException $r36;
        android.content.pm.PackageInfo r47;
        android.content.pm.PermissionInfo r60;
        android.util.StatsEvent$Builder r62;
        android.util.StatsEvent r63;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r37 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        f0 = staticinvoke <android.provider.DeviceConfig: float getFloat(java.lang.String,java.lang.String,float)>("permissions", "dangerous_permission_state_sample_rate", 0.015F);

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r38 = $r4;

     label01:
        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label02:
        $r6 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r8 = (android.os.UserManager) $r7;

        r41 = virtualinvoke $r8.<android.os.UserManager: java.util.List getUsers()>();

     label03:
        i2 = interfaceinvoke r41.<java.util.List: int size()>();

     label04:
        i16 = 0;

     label05:
        if i16 >= i2 goto label46;

     label06:
        $r9 = interfaceinvoke r41.<java.util.List: java.lang.Object get(int)>(i16);

        $r10 = (android.content.pm.UserInfo) $r9;

        r2 = virtualinvoke $r10.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

     label07:
        $i6 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r3 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(4096, $i6);

     label08:
        i3 = interfaceinvoke r3.<java.util.List: int size()>();

     label09:
        i17 = 0;

     label10:
        if i17 >= i3 goto label45;

     label11:
        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i17);

        r47 = (android.content.pm.PackageInfo) $r11;

     label12:
        $r12 = r47.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        if $r12 != null goto label14;

     label13:
        r50 = r41;

        r51 = r38;

        goto label44;

     label14:
        $r13 = r47.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i7 = $r13.<android.content.pm.ApplicationInfo: int uid>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $z0 = interfaceinvoke r38.<java.util.Set: boolean contains(java.lang.Object)>($r14);

        if $z0 == 0 goto label16;

     label15:
        r50 = r41;

        r51 = r38;

        goto label44;

     label16:
        $r15 = r47.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i8 = $r15.<android.content.pm.ApplicationInfo: int uid>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        interfaceinvoke r38.<java.util.Set: boolean add(java.lang.Object)>($r16);

     label17:
        if i0 != 10067 goto label21;

     label18:
        $r30 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        f11 = virtualinvoke $r30.<java.util.concurrent.ThreadLocalRandom: float nextFloat()>();

     label19:
        $b14 = f11 cmpl f0;

        if $b14 <= 0 goto label21;

        r50 = r41;

        r51 = r38;

        goto label44;

     label20:
        $r31 := @caughtexception;

        r56 = $r31;

        goto label48;

     label21:
        $r17 = r47.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        i4 = lengthof $r17;

     label22:
        i18 = 0;

     label23:
        if i18 >= i4 goto label43;

     label24:
        $r18 = r47.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        r59 = $r18[i18];

     label25:
        r60 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>(r59, 0);

        $r19 = r47.<android.content.pm.PackageInfo: java.lang.String packageName>;

        i5 = virtualinvoke r1.<android.content.pm.PackageManager: int getPermissionFlags(java.lang.String,java.lang.String,android.os.UserHandle)>(r59, $r19, r2);

     label26:
        $i9 = virtualinvoke r60.<android.content.pm.PermissionInfo: int getProtection()>();

        if $i9 == 1 goto label28;

     label27:
        goto label41;

     label28:
        r61 = r59;

     label29:
        $z2 = virtualinvoke r59.<java.lang.String: boolean startsWith(java.lang.String)>("android.permission.");

        if $z2 == 0 goto label30;

        $r29 = "android.permission.";

        $i13 = virtualinvoke $r29.<java.lang.String: int length()>();

        r61 = virtualinvoke r59.<java.lang.String: java.lang.String substring(int)>($i13);

     label30:
        r62 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>(r61);

        $r22 = r47.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i10 = $r22.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i10);

        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

     label31:
        if i0 != 10050 goto label33;

     label32:
        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>("");

     label33:
        $r25 = r47.<android.content.pm.PackageInfo: int[] requestedPermissionsFlags>;

        $i11 = $r25[i18];

        $i12 = $i11 & 2;

        if $i12 == 0 goto label35;

     label34:
        z4 = 1;

        goto label36;

     label35:
        z4 = 0;

     label36:
        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z4);

        virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i5);

        r63 = virtualinvoke r62.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

     label37:
        interfaceinvoke r37.<java.util.List: boolean add(java.lang.Object)>(r63);

     label38:
        goto label41;

     label39:
        $r34 := @caughtexception;

        r56 = $r34;

        goto label48;

     label40:
        $r36 := @caughtexception;

     label41:
        i18 = i18 + 1;

        goto label23;

     label42:
        $r32 := @caughtexception;

        r56 = $r32;

        goto label48;

     label43:
        r51 = r38;

        r50 = r41;

     label44:
        i17 = i17 + 1;

        r38 = r51;

        r41 = r50;

        goto label10;

     label45:
        i16 = i16 + 1;

        goto label05;

     label46:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label47:
        $r33 := @caughtexception;

        r56 = $r33;

     label48:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Could not read permissions", r56);

     label49:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label50:
        $r35 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r35;

        catch java.lang.Throwable from label01 to label02 with label47;
        catch java.lang.Throwable from label02 to label03 with label47;
        catch java.lang.Throwable from label03 to label04 with label47;
        catch java.lang.Throwable from label06 to label07 with label47;
        catch java.lang.Throwable from label07 to label08 with label47;
        catch java.lang.Throwable from label08 to label09 with label47;
        catch java.lang.Throwable from label11 to label12 with label47;
        catch java.lang.Throwable from label12 to label13 with label47;
        catch java.lang.Throwable from label14 to label15 with label47;
        catch java.lang.Throwable from label16 to label17 with label47;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label47;
        catch java.lang.Throwable from label24 to label25 with label42;
        catch android.content.pm.PackageManager$NameNotFoundException from label25 to label26 with label40;
        catch java.lang.Throwable from label25 to label26 with label42;
        catch java.lang.Throwable from label26 to label27 with label42;
        catch java.lang.Throwable from label29 to label30 with label42;
        catch java.lang.Throwable from label30 to label31 with label42;
        catch java.lang.Throwable from label32 to label33 with label42;
        catch java.lang.Throwable from label33 to label34 with label42;
        catch java.lang.Throwable from label36 to label37 with label42;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label48 to label49 with label50;
    }

    int pullDebugElapsedClockLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        long l1, l2, $l4, $l5, $l6, $l8, $l9, $l10, l11;
        byte $b3, $b7;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        android.util.StatsEvent $r9, $r17;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPreviousValue>;

        l11 = 0L;

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label1;

        goto label2;

     label1:
        l11 = l1 - l2;

     label2:
        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l4 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPullCount>;

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l11);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(1);

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        $l5 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPullCount>;

        $l6 = $l5 % 2L;

        $b7 = $l6 cmp 1L;

        if $b7 != 0 goto label3;

        $r10 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l10 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPullCount>;

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l10);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l11);

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(2);

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r17);

     label3:
        $l8 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPullCount>;

        $l9 = $l8 + 1L;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPullCount> = $l9;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugElapsedClockPreviousValue> = l1;

        return 0;
    }

    int pullDebugFailingElapsedClockLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        long l1, $l2, $l3, $l5, l8, l9, l10;
        android.util.StatsEvent$Builder r2, $r3, $r4, $r5, $r6, $r7;
        byte $b4, $b6;
        android.util.StatsEvent $r8;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l8 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPullCount>;

        $l2 = 1L + l8;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPullCount> = $l2;

        l9 = 0L;

        $l3 = l8 % 5L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPreviousValue> = l1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "Failing debug elapsed clock");

        return 1;

     label1:
        $r3 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l5 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPullCount>;

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        r2 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        l10 = r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPreviousValue>;

        $b6 = l10 cmp 0L;

        if $b6 != 0 goto label2;

        goto label3;

     label2:
        l9 = l1 - l10;

     label3:
        $r7 = virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l9);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        r0.<com.android.server.stats.pull.StatsPullAtomService: long mDebugFailingElapsedClockPreviousValue> = l1;

        return 0;
    }

    int pullDeviceCalculatedPowerBlameOtherLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1;
        java.util.List r1, r13;
        java.util.Iterator r2;
        com.android.internal.os.BatteryStatsHelper $r3;
        java.lang.Object $r4;
        com.android.internal.os.BatterySipper$DrainType $r5, $r6, $r9, r15, r16, r17, r18;
        android.util.StatsEvent$Builder $r7, $r8, $r10, $r11;
        double $d0;
        long $l2;
        android.util.StatsEvent $r12;
        boolean $z1;
        com.android.internal.os.BatterySipper r14;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper getBatteryStatsHelper()>();

        r13 = virtualinvoke $r3.<com.android.internal.os.BatteryStatsHelper: java.util.List getUsageList()>();

        if r13 != null goto label1;

        return 1;

     label1:
        r2 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.android.internal.os.BatterySipper) $r4;

        r15 = r14.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        r16 = r14.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        $r5 = <com.android.internal.os.BatterySipper$DrainType: com.android.internal.os.BatterySipper$DrainType APP>;

        if r15 != $r5 goto label3;

        goto label2;

     label3:
        r17 = r14.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        r18 = r14.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        $r6 = <com.android.internal.os.BatterySipper$DrainType: com.android.internal.os.BatterySipper$DrainType USER>;

        if r17 != $r6 goto label4;

        goto label2;

     label4:
        $r7 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r9 = r14.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        $i1 = virtualinvoke $r9.<com.android.internal.os.BatterySipper$DrainType: int ordinal()>();

        $r10 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $d0 = r14.<com.android.internal.os.BatterySipper: double totalPowerMah>;

        $l2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: long milliAmpHrsToNanoAmpSecs(double)>($d0);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label2;

     label5:
        return 0;
    }

    int pullDeviceCalculatedPowerBlameUidLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1;
        java.util.List r1, r15;
        java.util.Iterator r2;
        com.android.internal.os.BatterySipper r3;
        com.android.internal.os.BatterySipper$DrainType r4, $r7, r16;
        com.android.internal.os.BatteryStatsHelper $r5;
        java.lang.Object $r6;
        android.util.StatsEvent$Builder $r8, $r9, $r11, $r12, $r13;
        android.os.BatteryStats$Uid $r10;
        double $d0;
        long $l2;
        android.util.StatsEvent $r14;
        boolean $z1;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r5 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper getBatteryStatsHelper()>();

        r15 = virtualinvoke $r5.<com.android.internal.os.BatteryStatsHelper: java.util.List getUsageList()>();

        if r15 != null goto label1;

        return 1;

     label1:
        r2 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.internal.os.BatterySipper) $r6;

        r4 = r3.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        r16 = r3.<com.android.internal.os.BatterySipper: com.android.internal.os.BatterySipper$DrainType drainType>;

        $r7 = <com.android.internal.os.BatterySipper$DrainType: com.android.internal.os.BatterySipper$DrainType APP>;

        if r4 == $r7 goto label3;

        goto label2;

     label3:
        $r8 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r10 = r3.<com.android.internal.os.BatterySipper: android.os.BatteryStats$Uid uidObj>;

        $i1 = virtualinvoke $r10.<android.os.BatteryStats$Uid: int getUid()>();

        $r11 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $d0 = r3.<com.android.internal.os.BatterySipper: double totalPowerMah>;

        $l2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: long milliAmpHrsToNanoAmpSecs(double)>($d0);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label2;

     label4:
        return 0;
    }

    int pullDeviceCalculatedPowerUseLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.internal.os.BatteryStatsHelper r2;
        android.util.StatsEvent$Builder $r3, $r4, $r5;
        double $d0;
        long $l1;
        android.util.StatsEvent $r6;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.BatteryStatsHelper getBatteryStatsHelper()>();

        $r3 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $d0 = virtualinvoke r2.<com.android.internal.os.BatteryStatsHelper: double getComputedPower()>();

        $l1 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: long milliAmpHrsToNanoAmpSecs(double)>($d0);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l1);

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        return 0;
    }

    int pullDirectoryUsageLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        android.os.StatFs $r5, $r8, $r11;
        java.io.File $r6, $r9, $r12;
        java.lang.String $r7, $r10, $r13;
        android.util.StatsEvent$Builder $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        android.util.StatsEvent $r19, $r25, $r31;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r5 = new android.os.StatFs;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r5.<android.os.StatFs: void <init>(java.lang.String)>($r7);

        $r8 = new android.os.StatFs;

        $r9 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r8.<android.os.StatFs: void <init>(java.lang.String)>($r10);

        $r11 = new android.os.StatFs;

        $r12 = staticinvoke <android.os.Environment: java.io.File getDownloadCacheDirectory()>();

        $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r11.<android.os.StatFs: void <init>(java.lang.String)>($r13);

        $r14 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(1);

        $l1 = virtualinvoke $r5.<android.os.StatFs: long getAvailableBytes()>();

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l1);

        $l2 = virtualinvoke $r5.<android.os.StatFs: long getTotalBytes()>();

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r21 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(2);

        $l3 = virtualinvoke $r11.<android.os.StatFs: long getAvailableBytes()>();

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = virtualinvoke $r11.<android.os.StatFs: long getTotalBytes()>();

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $r25 = virtualinvoke $r24.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r26 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r27 = virtualinvoke $r26.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r28 = virtualinvoke $r27.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(3);

        $l5 = virtualinvoke $r8.<android.os.StatFs: long getAvailableBytes()>();

        $r29 = virtualinvoke $r28.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = virtualinvoke $r8.<android.os.StatFs: long getTotalBytes()>();

        $r30 = virtualinvoke $r29.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $r31 = virtualinvoke $r30.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r31);

        return 0;
    }

    int pullDiskIOLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$g19VAbLfQpgo8sS2yC5ITBSIdm0 $r2;
        com.android.internal.os.StoragedUidIoStatsReader $r3;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.StoragedUidIoStatsReader mStoragedUidIoStatsReader>;

        $r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$g19VAbLfQpgo8sS2yC5ITBSIdm0;

        specialinvoke $r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$g19VAbLfQpgo8sS2yC5ITBSIdm0: void <init>(int,java.util.List)>(i0, r1);

        virtualinvoke $r3.<com.android.internal.os.StoragedUidIoStatsReader: void readAbsolute(com.android.internal.os.StoragedUidIoStatsReader$Callback)>($r2);

        return 0;
    }

    int pullDiskStatsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, i5, i8;
        byte[] r1;
        boolean z0, $z1;
        java.io.File $r3, $r4;
        long $l2, l6, l7;
        android.util.StatsEvent$Builder $r5, $r6, $r7, $r8, $r9;
        android.util.StatsEvent $r10;
        byte $b3, $b4;
        java.lang.Throwable $r11, $r12, $r13, $r14, r20;
        android.os.RemoteException $r15;
        java.util.List r16;
        java.io.FileOutputStream r17, r18, r19;
        android.os.IStoraged r23;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r16 := @parameter1: java.util.List;

        r1 = newarray (byte)[512];

        i5 = 0;

     label01:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label02;

        $b3 = (byte) i5;

        $b4 = (byte) $b3;

        r1[i5] = $b4;

        i5 = i5 + 1;

        goto label01;

     label02:
        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "system/statsdperftest.tmp");

        l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r17 = null;

        r18 = null;

     label03:
        r19 = new java.io.FileOutputStream;

     label04:
        r17 = null;

        r18 = null;

     label05:
        specialinvoke r19.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

     label06:
        r17 = r19;

        r18 = r19;

     label07:
        virtualinvoke r19.<java.io.FileOutputStream: void write(byte[])>(r1);

     label08:
        r20 = null;

     label09:
        virtualinvoke r19.<java.io.FileOutputStream: void close()>();

     label10:
        r20 = null;

     label11:
        goto label21;

     label12:
        $r11 := @caughtexception;

        goto label21;

     label13:
        $r14 := @caughtexception;

        if r17 == null goto label17;

     label14:
        virtualinvoke r17.<java.io.FileOutputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r13 := @caughtexception;

        goto label17;

     label17:
        throw $r14;

     label18:
        $r12 := @caughtexception;

        r20 = $r12;

        if r18 == null goto label11;

        r20 = $r12;

     label19:
        virtualinvoke r18.<java.io.FileOutputStream: void close()>();

     label20:
        r20 = $r12;

        goto label11;

     label21:
        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l7 = $l2 - l6;

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label22;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label22:
        if r20 == null goto label23;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "Error performing diskstats latency test");

        l7 = -1L;

     label23:
        z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        r23 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged getIStoragedService()>();

        if r23 != null goto label24;

        return 1;

     label24:
        i8 = interfaceinvoke r23.<android.os.IStoraged: int getRecentPerf()>();

     label25:
        goto label27;

     label26:
        $r15 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "storaged not found");

        i8 = -1;

     label27:
        $r5 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l7);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z0);

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i8);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r10);

        return 0;

        catch java.io.IOException from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label18;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label18;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label19 to label20 with label12;
        catch android.os.RemoteException from label24 to label25 with label26;
    }

    int pullExternalStorageInfoLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2, $i3;
        java.util.List r1, $r5;
        java.util.Iterator r2;
        android.os.storage.VolumeInfo r3;
        android.os.storage.DiskInfo r4;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r6;
        android.os.storage.StorageManager r7;
        java.lang.String r8;
        byte b4, b5;
        android.util.StatsEvent$Builder $r9, $r10, $r11, $r12, $r13;
        long $l6;
        android.util.StatsEvent $r14;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.storage.StorageManager mStorageManager>;

        if r7 != null goto label1;

        return 1;

     label1:
        $r5 = virtualinvoke r7.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.VolumeInfo) $r6;

        $i1 = virtualinvoke r3.<android.os.storage.VolumeInfo: int getState()>();

        r8 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>($i1);

        r4 = virtualinvoke r3.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo getDisk()>();

        if r4 == null goto label8;

        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z1 == 0 goto label8;

        b4 = 3;

        $i2 = virtualinvoke r3.<android.os.storage.VolumeInfo: int getType()>();

        if $i2 != 0 goto label3;

        b4 = 1;

        goto label4;

     label3:
        $i3 = virtualinvoke r3.<android.os.storage.VolumeInfo: int getType()>();

        if $i3 != 1 goto label4;

        b4 = 2;

     label4:
        $z4 = virtualinvoke r4.<android.os.storage.DiskInfo: boolean isSd()>();

        if $z4 == 0 goto label5;

        b5 = 1;

        goto label7;

     label5:
        $z2 = virtualinvoke r4.<android.os.storage.DiskInfo: boolean isUsb()>();

        if $z2 == 0 goto label6;

        b5 = 2;

        goto label7;

     label6:
        b5 = 3;

     label7:
        $r9 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(b5);

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(b4);

        $l6 = r4.<android.os.storage.DiskInfo: long size>;

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r14);

     label8:
        goto label2;

     label9:
        return 0;
    }

    int pullFaceSettingsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2, i3, i4, i5, i6, i7, i8, i9, i10;
        long l1;
        java.util.List r1, r24;
        android.content.Context $r2, $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.Object $r3, $r5;
        android.os.UserManager $r4;
        android.content.pm.UserInfo $r6;
        android.os.UserHandle $r7;
        android.content.ContentResolver $r9, $r11, $r13, $r15, $r17, $r19;
        android.util.StatsEvent$Builder $r20, r25, r26, r27, r28, r29, r30, r31;
        java.lang.Throwable $r21, $r22, $r23, r33;
        boolean z1, z2, z3, z4, z5, z6;
        android.util.StatsEvent r32;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r24 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r4 = (android.os.UserManager) $r3;

        r1 = virtualinvoke $r4.<android.os.UserManager: java.util.List getUsers()>();

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

     label02:
        i8 = 0;

     label03:
        z1 = 0;

        if i8 >= i2 goto label27;

     label04:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        $r6 = (android.content.pm.UserInfo) $r5;

        $r7 = virtualinvoke $r6.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i9 = virtualinvoke $r7.<android.os.UserHandle: int getIdentifier()>();

        $r8 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i3 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r9, "face_unlock_keyguard_enabled", 1, i9);

        $r10 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i4 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r11, "face_unlock_dismisses_keyguard", 0, i9);

        $r12 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r13, "face_unlock_attention_required", 1, i9);

        $r14 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i6 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r15, "face_unlock_app_enabled", 1, i9);

        $r16 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i7 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r17, "face_unlock_always_require_confirmation", 0, i9);

        $r18 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i10 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r19, "face_unlock_diversity_required", 1, i9);

        r25 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

     label05:
        r26 = virtualinvoke r25.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

     label06:
        if i3 == 0 goto label07;

        z1 = 1;

     label07:
        r27 = virtualinvoke r26.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z1);

     label08:
        if i4 == 0 goto label09;

        z2 = 1;

        goto label10;

     label09:
        z2 = 0;

     label10:
        r28 = virtualinvoke r27.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z2);

     label11:
        if i5 == 0 goto label12;

        z3 = 1;

        goto label13;

     label12:
        z3 = 0;

     label13:
        r29 = virtualinvoke r28.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z3);

     label14:
        if i6 == 0 goto label15;

        z4 = 1;

        goto label16;

     label15:
        z4 = 0;

     label16:
        r30 = virtualinvoke r29.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z4);

     label17:
        if i7 == 0 goto label18;

        z5 = 1;

        goto label19;

     label18:
        z5 = 0;

     label19:
        r31 = virtualinvoke r30.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z5);

     label20:
        if i10 == 0 goto label21;

        z6 = 1;

        goto label22;

     label21:
        z6 = 0;

     label22:
        $r20 = virtualinvoke r31.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>(z6);

        r32 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

     label23:
        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>(r32);

     label24:
        i8 = i8 + 1;

        goto label03;

     label25:
        $r22 := @caughtexception;

        r33 = $r22;

        goto label29;

     label26:
        $r23 := @caughtexception;

        r33 = $r23;

        goto label29;

     label27:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label28:
        $r21 := @caughtexception;

        r33 = $r21;

     label29:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r33;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    int pullHealthHalLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        android.hardware.health.V2_0.IHealth r1;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$L8AXUhoHZd4q4mEME4207L042Dc r2;
        com.android.server.BatteryService$HealthServiceWrapper $r3;
        java.lang.Throwable $r4;
        java.util.List r5;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r5 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.BatteryService$HealthServiceWrapper mHealthService>;

        r1 = virtualinvoke $r3.<com.android.server.BatteryService$HealthServiceWrapper: android.hardware.health.V2_0.IHealth getLastService()>();

        if r1 != null goto label1;

        return 1;

     label1:
        r2 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$L8AXUhoHZd4q4mEME4207L042Dc;

        specialinvoke r2.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$L8AXUhoHZd4q4mEME4207L042Dc: void <init>(int,java.util.List)>(i0, r5);

        interfaceinvoke r1.<android.hardware.health.V2_0.IHealth: void getHealthInfo(android.hardware.health.V2_0.IHealth$getHealthInfoCallback)>(r2);

     label2:
        return 0;

     label3:
        $r4 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    int pullIonHeapSizeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1;
        java.util.List r1;
        long $l2;
        android.util.StatsEvent$Builder $r2, $r3, $r4;
        android.util.StatsEvent $r5;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $l2 = staticinvoke <android.os.Debug: long getIonHeapsSizeKb()>();

        i1 = (int) $l2;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        return 0;
    }

    int pullKernelWakelockLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.String r3;
        com.android.internal.os.KernelWakelockStats $r4, $r6;
        com.android.internal.os.KernelWakelockReader $r5;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r10;
        android.util.StatsEvent$Builder $r11, $r12, $r13, $r14, $r15, $r16;
        long $l3;
        android.util.StatsEvent $r17;
        java.util.Map$Entry r18;
        com.android.internal.os.KernelWakelockStats$Entry r19;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelWakelockReader mKernelWakelockReader>;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.KernelWakelockStats mTmpWakelockStats>;

        $r6 = virtualinvoke $r5.<com.android.internal.os.KernelWakelockReader: com.android.internal.os.KernelWakelockStats readKernelWakelockStats(com.android.internal.os.KernelWakelockStats)>($r4);

        $r7 = virtualinvoke $r6.<com.android.internal.os.KernelWakelockStats: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getKey()>();

        r3 = (java.lang.String) $r9;

        $r10 = interfaceinvoke r18.<java.util.Map$Entry: java.lang.Object getValue()>();

        r19 = (com.android.internal.os.KernelWakelockStats$Entry) $r10;

        $r11 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>(r3);

        $i1 = r19.<com.android.internal.os.KernelWakelockStats$Entry: int mCount>;

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $i2 = r19.<com.android.internal.os.KernelWakelockStats$Entry: int mVersion>;

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i2);

        $l3 = r19.<com.android.internal.os.KernelWakelockStats$Entry: long mTotalTime>;

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label1;

     label2:
        return 0;
    }

    int pullLooperStatsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1;
        java.util.List r1, r27;
        java.lang.Object $r2, $r3;
        boolean $z0, $z1;
        android.util.StatsEvent$Builder $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r8, $r10, $r12;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        android.util.StatsEvent $r25;
        com.android.internal.os.LooperStats r26;
        java.util.Iterator r28;
        com.android.internal.os.LooperStats$ExportedEntry r29;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/internal/os/LooperStats;");

        r26 = (com.android.internal.os.LooperStats) $r2;

        if r26 != null goto label1;

        return 1;

     label1:
        r27 = virtualinvoke r26.<com.android.internal.os.LooperStats: java.util.List getEntries()>();

        virtualinvoke r26.<com.android.internal.os.LooperStats: void reset()>();

        r28 = interfaceinvoke r27.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (com.android.internal.os.LooperStats$ExportedEntry) $r3;

        $r4 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i1 = r29.<com.android.internal.os.LooperStats$ExportedEntry: int workSourceUid>;

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r8 = r29.<com.android.internal.os.LooperStats$ExportedEntry: java.lang.String handlerClassName>;

        $r9 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r8);

        $r10 = r29.<com.android.internal.os.LooperStats$ExportedEntry: java.lang.String threadName>;

        $r11 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r10);

        $r12 = r29.<com.android.internal.os.LooperStats$ExportedEntry: java.lang.String messageName>;

        $r13 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r12);

        $l2 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long messageCount>;

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $l3 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long exceptionCount>;

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $l4 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long recordedMessageCount>;

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long totalLatencyMicros>;

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long cpuUsageMicros>;

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $z1 = r29.<com.android.internal.os.LooperStats$ExportedEntry: boolean isInteractive>;

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>($z1);

        $l7 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long maxCpuUsageMicros>;

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $l8 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long maxLatencyMicros>;

        $r21 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l8);

        $l9 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long recordedDelayMessageCount>;

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l9);

        $l10 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long delayMillis>;

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l10);

        $l11 = r29.<com.android.internal.os.LooperStats$ExportedEntry: long maxDelayMillis>;

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l11);

        $r25 = virtualinvoke $r24.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label2;

     label3:
        return 0;
    }

    int pullModemActivityInfoLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17;
        long l1, $l2, $l4, $l6, $l8, $l10, $l12, $l14, $l16, $l18;
        android.telephony.TelephonyManager $r1;
        android.os.Parcelable $r2;
        android.util.StatsEvent$Builder $r3, $r4, $r5, $r6, $r7, $r11, $r15, $r19, $r23, $r27, $r28;
        java.util.List $r8, $r12, $r16, $r20, $r24, r31;
        java.lang.Object $r9, $r13, $r17, $r21, $r25;
        android.telephony.ModemActivityInfo$TransmitPower $r10, $r14, $r18, $r22, $r26;
        android.util.StatsEvent $r29;
        java.lang.Throwable $r30;
        android.os.SynchronousResultReceiver r32;
        android.telephony.ModemActivityInfo r33;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r31 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r32 = new android.os.SynchronousResultReceiver;

        specialinvoke r32.<android.os.SynchronousResultReceiver: void <init>(java.lang.String)>("telephony");

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.telephony.TelephonyManager mTelephony>;

        virtualinvoke $r1.<android.telephony.TelephonyManager: void requestModemActivityInfo(android.os.ResultReceiver)>(r32);

        $r2 = staticinvoke <com.android.server.stats.pull.StatsPullAtomService: android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)>(r32);

        r33 = (android.telephony.ModemActivityInfo) $r2;

     label2:
        if r33 != null goto label3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label3:
        $r3 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l2 = virtualinvoke r33.<android.telephony.ModemActivityInfo: long getTimestamp()>();

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $i3 = virtualinvoke r33.<android.telephony.ModemActivityInfo: int getSleepTimeMillis()>();

        $l4 = (long) $i3;

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $i5 = virtualinvoke r33.<android.telephony.ModemActivityInfo: int getIdleTimeMillis()>();

        $l6 = (long) $i5;

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $r8 = virtualinvoke r33.<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (android.telephony.ModemActivityInfo$TransmitPower) $r9;

        $i7 = virtualinvoke $r10.<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()>();

        $l8 = (long) $i7;

        $r11 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l8);

        $r12 = virtualinvoke r33.<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(1);

        $r14 = (android.telephony.ModemActivityInfo$TransmitPower) $r13;

        $i9 = virtualinvoke $r14.<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()>();

        $l10 = (long) $i9;

        $r15 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l10);

        $r16 = virtualinvoke r33.<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(2);

        $r18 = (android.telephony.ModemActivityInfo$TransmitPower) $r17;

        $i11 = virtualinvoke $r18.<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()>();

        $l12 = (long) $i11;

        $r19 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l12);

        $r20 = virtualinvoke r33.<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(3);

        $r22 = (android.telephony.ModemActivityInfo$TransmitPower) $r21;

        $i13 = virtualinvoke $r22.<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()>();

        $l14 = (long) $i13;

        $r23 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l14);

        $r24 = virtualinvoke r33.<android.telephony.ModemActivityInfo: java.util.List getTransmitPowerInfo()>();

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(4);

        $r26 = (android.telephony.ModemActivityInfo$TransmitPower) $r25;

        $i15 = virtualinvoke $r26.<android.telephony.ModemActivityInfo$TransmitPower: int getTimeInMillis()>();

        $l16 = (long) $i15;

        $r27 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l16);

        $i17 = virtualinvoke r33.<android.telephony.ModemActivityInfo: int getReceiveTimeMillis()>();

        $l18 = (long) $i17;

        $r28 = virtualinvoke $r27.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l18);

        $r29 = virtualinvoke $r28.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>($r29);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label5:
        $r30 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r30;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    int pullNotificationRemoteViewsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i4;
        android.app.INotificationManager r1;
        long l1, l2, l3, $l5, $l6;
        java.util.ArrayList r2;
        java.util.concurrent.TimeUnit $r3, $r4;
        java.lang.Throwable $r5, $r7, $r8, $r9, $r10, $r12, r14, r16, r17;
        android.os.RemoteException $r6, $r11, r15;
        java.util.List r13;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r13 := @parameter1: java.util.List;

        r1 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager getINotificationManagerService()>();

        if r1 != null goto label01;

        return 1;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        l2 = staticinvoke <android.os.SystemClock: long currentTimeMicro()>();

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        l3 = virtualinvoke $r4.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(1L, $r3);

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $l5 = l2 * 1000L;

        $l6 = $l5 - l3;

        interfaceinvoke r1.<android.app.INotificationManager: long pullStats(long,int,boolean,java.util.List)>($l6, 1, 1, r2);

        i4 = interfaceinvoke r2.<java.util.List: int size()>();

     label03:
        if i4 == 1 goto label04;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label04:
        staticinvoke <com.android.server.stats.pull.StatsPullAtomService: void unpackStreamedData(int,java.util.List,java.util.List)>(i0, r13, r2);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label06:
        $r8 := @caughtexception;

        r14 = $r8;

        goto label11;

     label07:
        $r11 := @caughtexception;

        r15 = $r11;

        goto label14;

     label08:
        $r5 := @caughtexception;

        r16 = $r5;

        goto label17;

     label09:
        $r10 := @caughtexception;

        r17 = $r10;

        goto label20;

     label10:
        $r12 := @caughtexception;

        r14 = $r12;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Getting notistats failed: ", r14);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label13:
        $r6 := @caughtexception;

        r15 = $r6;

     label14:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Getting notistats failed: ", r15);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label16:
        $r7 := @caughtexception;

        r16 = $r7;

     label17:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Getting notistats failed: ", r16);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label19:
        $r9 := @caughtexception;

        r17 = $r9;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r17;

        catch java.io.IOException from label02 to label03 with label16;
        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.SecurityException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.io.IOException from label04 to label05 with label08;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.SecurityException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    int pullPowerProfileLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        com.android.internal.os.PowerProfile $r4;
        android.content.Context $r5;
        android.util.proto.ProtoOutputStream $r6;
        android.util.StatsEvent$Builder $r7, $r8, $r10;
        byte[] $r9;
        android.util.StatsEvent $r11;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r4 = new com.android.internal.os.PowerProfile;

        $r5 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        specialinvoke $r4.<com.android.internal.os.PowerProfile: void <init>(android.content.Context)>($r5);

        $r6 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r6.<android.util.proto.ProtoOutputStream: void <init>()>();

        virtualinvoke $r4.<com.android.internal.os.PowerProfile: void dumpDebug(android.util.proto.ProtoOutputStream)>($r6);

        virtualinvoke $r6.<android.util.proto.ProtoOutputStream: void flush()>();

        $r7 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r9 = virtualinvoke $r6.<android.util.proto.ProtoOutputStream: byte[] getBytes()>();

        $r10 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeByteArray(byte[])>($r9);

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        return 0;
    }

    int pullProcessCpuTimeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, i4, $i5;
        java.util.List r1;
        com.android.internal.os.ProcessCpuTracker $r2, $r3, $r4, $r14, $r16;
        android.util.StatsEvent$Builder $r5, $r6, $r7, $r8, $r10, $r11, $r12;
        java.lang.String $r9;
        long $l2, $l3;
        android.util.StatsEvent $r13;
        com.android.internal.os.ProcessCpuTracker$Stats r17;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker>;

        if $r2 != null goto label1;

        $r14 = new com.android.internal.os.ProcessCpuTracker;

        specialinvoke $r14.<com.android.internal.os.ProcessCpuTracker: void <init>(boolean)>(0);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker> = $r14;

        virtualinvoke $r14.<com.android.internal.os.ProcessCpuTracker: void init()>();

     label1:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker>;

        virtualinvoke $r3.<com.android.internal.os.ProcessCpuTracker: void update()>();

        i4 = 0;

     label2:
        $r16 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker>;

        $i5 = virtualinvoke $r16.<com.android.internal.os.ProcessCpuTracker: int countStats()>();

        if i4 >= $i5 goto label3;

        $r4 = r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.os.ProcessCpuTracker mProcessCpuTracker>;

        r17 = virtualinvoke $r4.<com.android.internal.os.ProcessCpuTracker: com.android.internal.os.ProcessCpuTracker$Stats getStats(int)>(i4);

        $r5 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i1 = r17.<com.android.internal.os.ProcessCpuTracker$Stats: int uid>;

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i1);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r9 = r17.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $r10 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r9);

        $l2 = r17.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime>;

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $l3 = r17.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime>;

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l3);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        i4 = i4 + 1;

        goto label2;

     label3:
        return 0;
    }

    int pullProcessMemoryHighWaterMarkLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i13, i14;
        java.util.List r1, r27;
        java.util.Iterator r2;
        android.app.ProcessMemoryState r3;
        java.lang.Object $r4, $r11, $r17;
        android.app.ActivityManagerInternal $r5;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$lqJRvPt3oaiuhNE25XssoNn5av4 $r6;
        android.util.StatsEvent$Builder $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r23, $r24, $r25;
        java.lang.String $r12, $r22;
        long $l5, $l6, $l11, $l12;
        android.util.StatsEvent $r16, $r26;
        boolean $z2;
        com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot r28, r30;
        android.util.SparseArray r29;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r5 = (android.app.ActivityManagerInternal) $r4;

        r27 = virtualinvoke $r5.<android.app.ActivityManagerInternal: java.util.List getMemoryStateForProcesses()>();

        r2 = interfaceinvoke r27.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.app.ProcessMemoryState) $r17;

        $i8 = r3.<android.app.ProcessMemoryState: int pid>;

        r28 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot readMemorySnapshotFromProcfs(int)>($i8);

        if r28 != null goto label2;

        goto label1;

     label2:
        $r18 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i9 = r3.<android.app.ProcessMemoryState: int uid>;

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i9);

        $r21 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r22 = r3.<android.app.ProcessMemoryState: java.lang.String processName>;

        $r23 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r22);

        $i10 = r28.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int rssHighWaterMarkInKilobytes>;

        $l11 = (long) $i10;

        $l12 = $l11 * 1024L;

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l12);

        $i13 = r28.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int rssHighWaterMarkInKilobytes>;

        $r25 = virtualinvoke $r24.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i13);

        $r26 = virtualinvoke $r25.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label1;

     label3:
        r29 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: android.util.SparseArray getProcessCmdlines()>();

        $r6 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$lqJRvPt3oaiuhNE25XssoNn5av4;

        specialinvoke $r6.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$lqJRvPt3oaiuhNE25XssoNn5av4: void <init>(android.util.SparseArray)>(r29);

        interfaceinvoke r27.<java.util.List: void forEach(java.util.function.Consumer)>($r6);

        i1 = virtualinvoke r29.<android.util.SparseArray: int size()>();

        i14 = 0;

     label4:
        if i14 >= i1 goto label7;

        $i2 = virtualinvoke r29.<android.util.SparseArray: int keyAt(int)>(i14);

        r30 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot readMemorySnapshotFromProcfs(int)>($i2);

        if r30 != null goto label5;

        goto label6;

     label5:
        $r7 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i3 = r30.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int uid>;

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r11 = virtualinvoke r29.<android.util.SparseArray: java.lang.Object valueAt(int)>(i14);

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r12);

        $i4 = r30.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int rssHighWaterMarkInKilobytes>;

        $l5 = (long) $i4;

        $l6 = $l5 * 1024L;

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $i7 = r30.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int rssHighWaterMarkInKilobytes>;

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i7);

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r16);

     label6:
        i14 = i14 + 1;

        goto label4;

     label7:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.rss_hwm_reset.on", "1");

        return 0;
    }

    int pullProcessMemorySnapshotLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        java.util.List r1, r35;
        android.app.ProcessMemoryState r2;
        com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot r3, r38;
        java.lang.Object $r4, $r11, $r21;
        android.app.ActivityManagerInternal $r5;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$61iYYyM1I6mUS0w8UN9q4tmxKaQ $r6;
        android.util.StatsEvent$Builder $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        java.lang.String $r12, $r26;
        android.util.StatsEvent $r20, $r34;
        java.util.Iterator r36;
        boolean $z2;
        android.util.SparseArray r37;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r5 = (android.app.ActivityManagerInternal) $r4;

        r35 = virtualinvoke $r5.<android.app.ActivityManagerInternal: java.util.List getMemoryStateForProcesses()>();

        r36 = interfaceinvoke r35.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r21 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.app.ProcessMemoryState) $r21;

        $i10 = r2.<android.app.ProcessMemoryState: int pid>;

        r3 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot readMemorySnapshotFromProcfs(int)>($i10);

        if r3 != null goto label2;

        goto label1;

     label2:
        $r22 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i11 = r2.<android.app.ProcessMemoryState: int uid>;

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i11);

        $r25 = virtualinvoke $r24.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r26 = r2.<android.app.ProcessMemoryState: java.lang.String processName>;

        $r27 = virtualinvoke $r25.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r26);

        $i12 = r2.<android.app.ProcessMemoryState: int pid>;

        $r28 = virtualinvoke $r27.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i12);

        $i13 = r2.<android.app.ProcessMemoryState: int oomScore>;

        $r29 = virtualinvoke $r28.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i13);

        $i14 = r3.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int rssInKilobytes>;

        $r30 = virtualinvoke $r29.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i14);

        $i15 = r3.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int anonRssInKilobytes>;

        $r31 = virtualinvoke $r30.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i15);

        $i16 = r3.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int swapInKilobytes>;

        $r32 = virtualinvoke $r31.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i16);

        $i18 = r3.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int anonRssInKilobytes>;

        $i17 = r3.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int swapInKilobytes>;

        $i19 = $i18 + $i17;

        $r33 = virtualinvoke $r32.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i19);

        $r34 = virtualinvoke $r33.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r34);

        goto label1;

     label3:
        r37 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: android.util.SparseArray getProcessCmdlines()>();

        $r6 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$61iYYyM1I6mUS0w8UN9q4tmxKaQ;

        specialinvoke $r6.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$61iYYyM1I6mUS0w8UN9q4tmxKaQ: void <init>(android.util.SparseArray)>(r37);

        interfaceinvoke r35.<java.util.List: void forEach(java.util.function.Consumer)>($r6);

        i1 = virtualinvoke r37.<android.util.SparseArray: int size()>();

        i20 = 0;

     label4:
        if i20 >= i1 goto label7;

        i2 = virtualinvoke r37.<android.util.SparseArray: int keyAt(int)>(i20);

        r38 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot readMemorySnapshotFromProcfs(int)>(i2);

        if r38 != null goto label5;

        goto label6;

     label5:
        $r7 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i3 = r38.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int uid>;

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r11 = virtualinvoke r37.<android.util.SparseArray: java.lang.Object valueAt(int)>(i20);

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(i2);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(-1001);

        $i4 = r38.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int rssInKilobytes>;

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i4);

        $i5 = r38.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int anonRssInKilobytes>;

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i5);

        $i6 = r38.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int swapInKilobytes>;

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i6);

        $i8 = r38.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int anonRssInKilobytes>;

        $i7 = r38.<com.android.server.stats.pull.ProcfsMemoryUtil$MemorySnapshot: int swapInKilobytes>;

        $i9 = $i8 + $i7;

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i9);

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r20);

     label6:
        i20 = i20 + 1;

        goto label4;

     label7:
        return 0;
    }

    int pullProcessMemoryStateLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.List r1, $r7;
        java.util.Iterator r2;
        android.app.ProcessMemoryState r3;
        com.android.server.am.MemoryStatUtil$MemoryStat r4;
        java.lang.Object $r5, $r8;
        android.app.ActivityManagerInternal $r6;
        android.util.StatsEvent$Builder $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.String $r13;
        long $l5, $l6, $l7, $l8, $l9;
        android.util.StatsEvent $r24;
        boolean $z1;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r6 = (android.app.ActivityManagerInternal) $r5;

        $r7 = virtualinvoke $r6.<android.app.ActivityManagerInternal: java.util.List getMemoryStateForProcesses()>();

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.app.ProcessMemoryState) $r8;

        $i2 = r3.<android.app.ProcessMemoryState: int uid>;

        $i1 = r3.<android.app.ProcessMemoryState: int pid>;

        r4 = staticinvoke <com.android.server.am.MemoryStatUtil: com.android.server.am.MemoryStatUtil$MemoryStat readMemoryStatFromFilesystem(int,int)>($i2, $i1);

        if r4 != null goto label2;

        goto label1;

     label2:
        $r9 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i3 = r3.<android.app.ProcessMemoryState: int uid>;

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r13 = r3.<android.app.ProcessMemoryState: java.lang.String processName>;

        $r14 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r13);

        $i4 = r3.<android.app.ProcessMemoryState: int oomScore>;

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i4);

        $l5 = r4.<com.android.server.am.MemoryStatUtil$MemoryStat: long pgfault>;

        $r16 = virtualinvoke $r15.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = r4.<com.android.server.am.MemoryStatUtil$MemoryStat: long pgmajfault>;

        $r17 = virtualinvoke $r16.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $l7 = r4.<com.android.server.am.MemoryStatUtil$MemoryStat: long rssInBytes>;

        $r18 = virtualinvoke $r17.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $l8 = r4.<com.android.server.am.MemoryStatUtil$MemoryStat: long cacheInBytes>;

        $r19 = virtualinvoke $r18.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l8);

        $l9 = r4.<com.android.server.am.MemoryStatUtil$MemoryStat: long swapInBytes>;

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l9);

        $r21 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(-1L);

        $r22 = virtualinvoke $r21.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(-1L);

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>(-1);

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label1;

     label3:
        return 0;
    }

    int pullProcessSystemIonHeapSizeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i1, $i2, $i3, $i6, $i7, $i10;
        java.util.List r1, $r4;
        java.util.Iterator r2;
        com.android.server.stats.pull.IonMemoryUtil$IonAllocations r3;
        boolean $z0;
        java.lang.Object $r5;
        android.util.StatsEvent$Builder $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14;
        java.lang.String $r10;
        long $l4, $l5, $l8, $l9;
        android.util.StatsEvent $r15;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r4 = staticinvoke <com.android.server.stats.pull.IonMemoryUtil: java.util.List readProcessSystemIonHeapSizesFromDebugfs()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.stats.pull.IonMemoryUtil$IonAllocations) $r5;

        $r6 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i1 = r3.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: int pid>;

        $i2 = staticinvoke <android.os.Process: int getUidForPid(int)>($i1);

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i2);

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $i3 = r3.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: int pid>;

        $r10 = staticinvoke <com.android.server.stats.pull.ProcfsMemoryUtil: java.lang.String readCmdlineFromProcfs(int)>($i3);

        $r11 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r10);

        $l4 = r3.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: long totalSizeInBytes>;

        $l5 = $l4 / 1024L;

        $i6 = (int) $l5;

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i6);

        $i7 = r3.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: int count>;

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i7);

        $l8 = r3.<com.android.server.stats.pull.IonMemoryUtil$IonAllocations: long maxSizeInBytes>;

        $l9 = $l8 / 1024L;

        $i10 = (int) $l9;

        $r14 = virtualinvoke $r13.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i10);

        $r15 = virtualinvoke $r14.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        return 0;
    }

    int pullRoleHolderLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2, i3, i4, i5, $i6, i8, i9, i10;
        long l1;
        android.content.pm.PackageManager r1;
        com.android.server.role.RoleManagerInternal r2;
        java.util.List r3, r33;
        android.util.ArrayMap r4;
        java.lang.String r5, $r31, r34;
        android.util.ArraySet r6;
        android.content.pm.PackageInfo r7;
        android.content.Context $r8, $r10;
        java.lang.Object $r9, $r11, $r13, $r16, $r17, $r18;
        android.os.UserManager $r12;
        android.content.pm.UserInfo $r14;
        android.os.UserHandle $r15;
        android.util.StatsEvent$Builder $r19, $r20, $r22, $r23, $r24, $r25;
        android.content.pm.ApplicationInfo $r21;
        java.lang.Throwable $r26, $r32, r38;
        android.content.pm.PackageManager$NameNotFoundException $r27;
        android.util.StatsEvent r35;
        java.lang.StringBuilder r37;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r33 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r8 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        r1 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r9 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/role/RoleManagerInternal;");

        r2 = (com.android.server.role.RoleManagerInternal) $r9;

        $r10 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r12 = (android.os.UserManager) $r11;

        r3 = virtualinvoke $r12.<android.os.UserManager: java.util.List getUsers()>();

        i2 = interfaceinvoke r3.<java.util.List: int size()>();

     label02:
        i8 = 0;

     label03:
        if i8 >= i2 goto label21;

     label04:
        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i8);

        $r14 = (android.content.pm.UserInfo) $r13;

        $r15 = virtualinvoke $r14.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i3 = virtualinvoke $r15.<android.os.UserHandle: int getIdentifier()>();

        r4 = virtualinvoke r2.<com.android.server.role.RoleManagerInternal: android.util.ArrayMap getRolesAndHolders(int)>(i3);

        i4 = virtualinvoke r4.<android.util.ArrayMap: int size()>();

     label05:
        i9 = 0;

     label06:
        if i9 >= i4 goto label20;

     label07:
        $r16 = virtualinvoke r4.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i9);

        r5 = (java.lang.String) $r16;

        $r17 = virtualinvoke r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i9);

        r6 = (android.util.ArraySet) $r17;

        i5 = virtualinvoke r6.<android.util.ArraySet: int size()>();

     label08:
        i10 = 0;

     label09:
        if i10 >= i5 goto label19;

     label10:
        $r18 = virtualinvoke r6.<android.util.ArraySet: java.lang.Object valueAt(int)>(i10);

        r34 = (java.lang.String) $r18;

     label11:
        r7 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r34, 0, i3);

     label12:
        $r19 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r20 = virtualinvoke $r19.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r21 = r7.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i6 = $r21.<android.content.pm.ApplicationInfo: int uid>;

        $r22 = virtualinvoke $r20.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i6);

        $r23 = virtualinvoke $r22.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r24 = virtualinvoke $r23.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>(r34);

        $r25 = virtualinvoke $r24.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>(r5);

        r35 = virtualinvoke $r25.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

     label13:
        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>(r35);

     label14:
        i10 = i10 + 1;

        goto label09;

     label15:
        $r27 := @caughtexception;

     label16:
        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Role holder ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r31 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StatsPullAtomService", $r31);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label18:
        $r26 := @caughtexception;

        r38 = $r26;

        goto label23;

     label19:
        i9 = i9 + 1;

        goto label06;

     label20:
        i8 = i8 + 1;

        goto label03;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label22:
        $r32 := @caughtexception;

        r38 = $r32;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r38;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    int pullRuntimeAppOpAccessMessageLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i2, $i3, $i4;
        long l1;
        android.app.RuntimeAppOpAccessMessage r1;
        android.util.StatsEvent$Builder r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.app.AppOpsManager $r5;
        java.lang.String $r9, $r12, $r13, $r15, $r18;
        android.util.StatsEvent $r20;
        java.lang.Throwable $r22, $r23;
        java.util.List r24;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r24 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r3 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r5 = (android.app.AppOpsManager) $r4;

        r1 = virtualinvoke $r5.<android.app.AppOpsManager: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>();

     label02:
        if r1 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StatsPullAtomService", "No runtime appop access message collected");

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label05:
        r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i2 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: int getUid()>();

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i2);

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>(1, 1);

        $r9 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: java.lang.String getPackageName()>();

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r9);

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>("");

        $r12 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: java.lang.String getAttributionTag()>();

        if $r12 != null goto label07;

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>("");

     label06:
        goto label08;

     label07:
        $r13 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: java.lang.String getAttributionTag()>();

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r13);

     label08:
        $r15 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: java.lang.String getMessage()>();

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r15);

        $i3 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: int getSamplingStrategy()>();

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $r18 = virtualinvoke r1.<android.app.RuntimeAppOpAccessMessage: java.lang.String getOp()>();

        $i4 = staticinvoke <android.app.AppOpsManager: int strOpToOp(java.lang.String)>($r18);

        virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i4);

        $r20 = virtualinvoke r2.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>($r20);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label10:
        $r23 := @caughtexception;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Could not read runtime appop access message", $r23);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label13:
        $r22 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    int pullSettingsStatsLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2;
        long l1;
        android.content.Context $r1, $r7, $r9, $r11;
        java.lang.Object $r2, $r4;
        java.util.List $r3, $r8, $r10, $r12, r15;
        boolean $z0;
        android.content.pm.UserInfo $r5;
        android.os.UserHandle $r6;
        java.lang.Exception $r13;
        java.lang.Throwable $r14;
        android.os.UserManager r16;
        java.util.Iterator r17;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r15 := @parameter1: java.util.List;

        $r1 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r16 = (android.os.UserManager) $r2;

        if r16 != null goto label01;

        return 1;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = virtualinvoke r16.<android.os.UserManager: java.util.List getUsers()>();

        r17 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r4 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.content.pm.UserInfo) $r4;

        $r6 = virtualinvoke $r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i2 = virtualinvoke $r6.<android.os.UserHandle: int getIdentifier()>();

     label04:
        if i2 != 0 goto label06;

     label05:
        $r11 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r12 = staticinvoke <com.android.server.stats.pull.SettingsStatsUtil: java.util.List logGlobalSettings(android.content.Context,int,int)>($r11, i0, 0);

        interfaceinvoke r15.<java.util.List: boolean addAll(java.util.Collection)>($r12);

     label06:
        $r7 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r8 = staticinvoke <com.android.server.stats.pull.SettingsStatsUtil: java.util.List logSystemSettings(android.content.Context,int,int)>($r7, i0, i2);

        interfaceinvoke r15.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r9 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r10 = staticinvoke <com.android.server.stats.pull.SettingsStatsUtil: java.util.List logSecureSettings(android.content.Context,int,int)>($r9, i0, i2);

        interfaceinvoke r15.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label07:
        goto label03;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label09:
        $r14 := @caughtexception;

        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "failed to pullSettingsStats", $r13);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r14;

        catch java.lang.Exception from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
    }

    int pullSystemElapsedRealtimeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4;
        long $l1;
        android.util.StatsEvent $r5;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        return 0;
    }

    int pullSystemIonHeapSizeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        long l1;
        android.util.StatsEvent$Builder $r2, $r3, $r4;
        android.util.StatsEvent $r5;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        l1 = staticinvoke <com.android.server.stats.pull.IonMemoryUtil: long readSystemIonHeapSizeFromDebugfs()>();

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>(l1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        return 0;
    }

    int pullSystemUptimeLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.util.List r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4;
        long $l1;
        android.util.StatsEvent $r5;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        return 0;
    }

    int pullTemperatureLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, i2, $i3, $i4, $i5, i7;
        long l1;
        android.os.Temperature r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.String $r5;
        float $f0, $f1;
        android.util.StatsEvent $r9;
        android.os.RemoteException $r10;
        java.lang.Throwable $r11;
        java.util.List r12;
        android.os.IThermalService r13;
        android.os.Temperature[] r14;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r12 := @parameter1: java.util.List;

        r13 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService getIThermalService()>();

        if r13 != null goto label01;

        return 1;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r14 = interfaceinvoke r13.<android.os.IThermalService: android.os.Temperature[] getCurrentTemperatures()>();

        i2 = lengthof r14;

     label03:
        i7 = 0;

     label04:
        if i7 >= i2 goto label07;

        r1 = r14[i7];

     label05:
        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $i3 = virtualinvoke r1.<android.os.Temperature: int getType()>();

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $r5 = virtualinvoke r1.<android.os.Temperature: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>($r5);

        $f0 = virtualinvoke r1.<android.os.Temperature: float getValue()>();

        $f1 = $f0 * 10.0F;

        $i4 = (int) $f1;

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i4);

        $i5 = virtualinvoke r1.<android.os.Temperature: int getStatus()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i5);

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r9);

     label06:
        i7 = i7 + 1;

        goto label04;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label08:
        $r11 := @caughtexception;

        goto label12;

     label09:
        $r10 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("StatsPullAtomService", "Disconnected from thermal service. Cannot pull temperatures.");

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r11;

        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }

    int pullTimeZoneDataInfoLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0;
        java.lang.String r1;
        android.util.StatsEvent$Builder $r2, $r3, $r4;
        android.util.StatsEvent $r5;
        java.lang.Throwable $r6;
        java.util.List r7;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r7 := @parameter1: java.util.List;

     label1:
        r1 = staticinvoke <android.icu.util.TimeZone: java.lang.String getTZDataVersion()>();

     label2:
        $r2 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r5);

        return 0;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "Getting tzdb version failed: ", $r6);

        return 1;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    int pullWifiActivityInfoLocked(int, java.util.List)
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        int i0, $i3;
        long l1, $l2, $l4, $l5, $l6, $l7;
        android.os.SynchronousResultReceiver r1;
        android.net.wifi.WifiManager r2;
        com.android.server.stats.pull._$$Lambda$StatsPullAtomService$83yZWZxYUAxINjmopUHD6vHE_QM r3;
        android.os.Parcelable $r4;
        android.util.StatsEvent$Builder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.util.StatsEvent $r13;
        java.lang.Throwable $r14;
        java.lang.RuntimeException $r15;
        java.util.List r16;
        com.android.server.stats.pull.StatsPullAtomService$1 r17;
        android.os.connectivity.WifiActivityEnergyInfo r18;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        i0 := @parameter0: int;

        r16 := @parameter1: java.util.List;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = new android.os.SynchronousResultReceiver;

        specialinvoke r1.<android.os.SynchronousResultReceiver: void <init>(java.lang.String)>("wifi");

        r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.net.wifi.WifiManager mWifiManager>;

        r17 = new com.android.server.stats.pull.StatsPullAtomService$1;

        specialinvoke r17.<com.android.server.stats.pull.StatsPullAtomService$1: void <init>(com.android.server.stats.pull.StatsPullAtomService)>(r0);

        r3 = new com.android.server.stats.pull._$$Lambda$StatsPullAtomService$83yZWZxYUAxINjmopUHD6vHE_QM;

        specialinvoke r3.<com.android.server.stats.pull._$$Lambda$StatsPullAtomService$83yZWZxYUAxINjmopUHD6vHE_QM: void <init>(android.os.SynchronousResultReceiver)>(r1);

        virtualinvoke r2.<android.net.wifi.WifiManager: void getWifiActivityEnergyInfoAsync(java.util.concurrent.Executor,android.net.wifi.WifiManager$OnWifiActivityEnergyInfoListener)>(r17, r3);

        $r4 = staticinvoke <com.android.server.stats.pull.StatsPullAtomService: android.os.Parcelable awaitControllerInfo(android.os.SynchronousResultReceiver)>(r1);

        r18 = (android.os.connectivity.WifiActivityEnergyInfo) $r4;

     label2:
        if r18 != null goto label3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label3:
        $r5 = staticinvoke <android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>();

        $r6 = virtualinvoke $r5.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>(i0);

        $l2 = virtualinvoke r18.<android.os.connectivity.WifiActivityEnergyInfo: long getTimeSinceBootMillis()>();

        $r7 = virtualinvoke $r6.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l2);

        $i3 = virtualinvoke r18.<android.os.connectivity.WifiActivityEnergyInfo: int getStackState()>();

        $r8 = virtualinvoke $r7.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>($i3);

        $l4 = virtualinvoke r18.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerTxDurationMillis()>();

        $r9 = virtualinvoke $r8.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l4);

        $l5 = virtualinvoke r18.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerRxDurationMillis()>();

        $r10 = virtualinvoke $r9.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l5);

        $l6 = virtualinvoke r18.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerIdleDurationMillis()>();

        $r11 = virtualinvoke $r10.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l6);

        $l7 = virtualinvoke r18.<android.os.connectivity.WifiActivityEnergyInfo: long getControllerEnergyUsedMicroJoules()>();

        $r12 = virtualinvoke $r11.<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeLong(long)>($l7);

        $r13 = virtualinvoke $r12.<android.util.StatsEvent$Builder: android.util.StatsEvent build()>();

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r13);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label5:
        $r14 := @caughtexception;

        goto label9;

     label6:
        $r15 := @caughtexception;

     label7:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StatsPullAtomService", "failed to getWifiActivityEnergyInfoAsync", $r15);

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label9:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r14;

        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label5;
    }

    void registerEventListeners()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        android.os.IThermalService r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.net.NetworkRequest$Builder $r4;
        android.net.ConnectivityManager $r5;
        android.net.NetworkRequest $r6;
        com.android.server.stats.pull.StatsPullAtomService$ConnectivityStatsCallback $r7;
        android.os.RemoteException $r8;
        com.android.server.stats.pull.StatsPullAtomService$ThermalEventListener r9;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        $r2 = r0.<com.android.server.stats.pull.StatsPullAtomService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r5 = (android.net.ConnectivityManager) $r3;

        $r4 = new android.net.NetworkRequest$Builder;

        specialinvoke $r4.<android.net.NetworkRequest$Builder: void <init>()>();

        $r6 = virtualinvoke $r4.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        $r7 = new com.android.server.stats.pull.StatsPullAtomService$ConnectivityStatsCallback;

        specialinvoke $r7.<com.android.server.stats.pull.StatsPullAtomService$ConnectivityStatsCallback: void <init>(com.android.server.stats.pull.StatsPullAtomService$1)>(null);

        virtualinvoke $r5.<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>($r6, $r7);

        r1 = specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService getIThermalService()>();

        if r1 == null goto label4;

     label1:
        r9 = new com.android.server.stats.pull.StatsPullAtomService$ThermalEventListener;

        specialinvoke r9.<com.android.server.stats.pull.StatsPullAtomService$ThermalEventListener: void <init>(com.android.server.stats.pull.StatsPullAtomService$1)>(null);

        interfaceinvoke r1.<android.os.IThermalService: boolean registerThermalEventListener(android.os.IThermalEventListener)>(r9);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StatsPullAtomService", "register thermal listener successfully");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("StatsPullAtomService", "failed to register thermal listener");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void registerPullers()
    {
        com.android.server.stats.pull.StatsPullAtomService r0;
        com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl $r1;

        r0 := @this: com.android.server.stats.pull.StatsPullAtomService;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StatsPullAtomService", "Registering pullers with statsd");

        $r1 = new com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl;

        specialinvoke $r1.<com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl: void <init>(com.android.server.stats.pull.StatsPullAtomService,com.android.server.stats.pull.StatsPullAtomService$1)>(r0, null);

        r0.<com.android.server.stats.pull.StatsPullAtomService: com.android.server.stats.pull.StatsPullAtomService$StatsPullAtomCallbackImpl mStatsCallbackImpl> = $r1;

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBluetoothBytesTransfer()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerKernelWakelock()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCpuTimePerFreq()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCpuTimePerUid()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCpuTimePerUidFreq()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCpuActiveTime()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCpuClusterTime()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerWifiActivityInfo()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerModemActivityInfo()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBluetoothActivityInfo()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerSystemElapsedRealtime()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerSystemUptime()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcessMemoryState()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcessMemoryHighWaterMark()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcessMemorySnapshot()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerSystemIonHeapSize()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerIonHeapSize()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcessSystemIonHeapSize()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerTemperature()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCoolingDevice()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBinderCallsStats()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBinderCallsStatsExceptions()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerLooperStats()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDiskStats()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDirectoryUsage()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerAppSize()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCategorySize()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerNumFingerprintsEnrolled()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerNumFacesEnrolled()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcStats()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcStatsPkgProc()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDiskIO()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerPowerProfile()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerProcessCpuTime()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerCpuTimePerThreadFreq()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDeviceCalculatedPowerUse()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDeviceCalculatedPowerBlameUid()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDeviceCalculatedPowerBlameOther()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDebugElapsedClock()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDebugFailingElapsedClock()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBuildInformation()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerRoleHolder()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerTimeZoneDataInfo()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerExternalStorageInfo()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerAppsOnExternalStorageInfo()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerFaceSettings()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerAppOps()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerAttributedAppOps()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerRuntimeAppOpAccessMessage()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerNotificationRemoteViews()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDangerousPermissionState()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerDangerousPermissionStateSampled()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBatteryLevel()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerRemainingBatteryCapacity()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerFullBatteryCapacity()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBatteryVoltage()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerBatteryCycleCount()>();

        specialinvoke r0.<com.android.server.stats.pull.StatsPullAtomService: void registerSettingsStats()>();

        return;
    }
}
