class com.android.server.storage.DiskStatsLoggingService$LogRunnable extends java.lang.Object implements java.lang.Runnable
{
    private static final long TIMEOUT_MILLIS;
    private com.android.server.storage.AppCollector mCollector;
    private android.content.Context mContext;
    private java.io.File mDownloadsDirectory;
    private android.app.job.JobService mJobService;
    private java.io.File mOutputFile;
    private android.app.job.JobParameters mParams;
    private long mSystemSize;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        long $l0;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        <com.android.server.storage.DiskStatsLoggingService$LogRunnable: long TIMEOUT_MILLIS> = $l0;

        return;
    }

    void <init>()
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void finishJob(boolean)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        boolean z0;
        android.app.job.JobService r1;
        android.app.job.JobParameters $r2;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: android.app.job.JobService mJobService>;

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: android.app.job.JobParameters mParams>;

        virtualinvoke r1.<android.app.job.JobService: void jobFinished(android.app.job.JobParameters,boolean)>($r2, z0);

     label1:
        return;
    }

    private void logToFile(com.android.server.storage.FileCollector$MeasurementResult, com.android.server.storage.FileCollector$MeasurementResult, java.util.List, long)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        com.android.server.storage.FileCollector$MeasurementResult r1, r7;
        java.util.List r2;
        long l0;
        com.android.server.storage.DiskStatsFileLogger $r3;
        java.io.File $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        r7 := @parameter0: com.android.server.storage.FileCollector$MeasurementResult;

        r1 := @parameter1: com.android.server.storage.FileCollector$MeasurementResult;

        r2 := @parameter2: java.util.List;

        l0 := @parameter3: long;

        $r3 = new com.android.server.storage.DiskStatsFileLogger;

        specialinvoke $r3.<com.android.server.storage.DiskStatsFileLogger: void <init>(com.android.server.storage.FileCollector$MeasurementResult,com.android.server.storage.FileCollector$MeasurementResult,java.util.List,long)>(r7, r1, r2, l0);

     label1:
        $r4 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: java.io.File mOutputFile>;

        virtualinvoke $r4.<java.io.File: boolean createNewFile()>();

        $r5 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: java.io.File mOutputFile>;

        virtualinvoke $r3.<com.android.server.storage.DiskStatsFileLogger: void dumpToFile(java.io.File)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskStatsLogService", "Exception while writing opportunistic disk file cache.", $r6);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void run()
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        com.android.server.storage.FileCollector$MeasurementResult r1, r7;
        java.util.List r2;
        android.content.Context $r3;
        java.io.File $r4;
        long $l0, $l2;
        com.android.server.storage.AppCollector $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

     label1:
        $r3 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: android.content.Context mContext>;

        r1 = staticinvoke <com.android.server.storage.FileCollector: com.android.server.storage.FileCollector$MeasurementResult getMeasurementResult(android.content.Context)>($r3);

     label2:
        $r4 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: java.io.File mDownloadsDirectory>;

        r7 = staticinvoke <com.android.server.storage.FileCollector: com.android.server.storage.FileCollector$MeasurementResult getMeasurementResult(java.io.File)>($r4);

        z0 = 1;

        $r5 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: com.android.server.storage.AppCollector mCollector>;

        $l0 = <com.android.server.storage.DiskStatsLoggingService$LogRunnable: long TIMEOUT_MILLIS>;

        r2 = virtualinvoke $r5.<com.android.server.storage.AppCollector: java.util.List getPackageStats(long)>($l0);

        if r2 == null goto label3;

        $l2 = r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: long mSystemSize>;

        specialinvoke r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void logToFile(com.android.server.storage.FileCollector$MeasurementResult,com.android.server.storage.FileCollector$MeasurementResult,java.util.List,long)>(r1, r7, r2, $l2);

        z0 = 0;

        goto label4;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DiskStatsLogService", "Timed out while fetching package stats.");

     label4:
        specialinvoke r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void finishJob(boolean)>(z0);

        return;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskStatsLogService", "Error while measuring storage", $r6);

        specialinvoke r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void finishJob(boolean)>(1);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label5;
    }

    public void setAppCollector(com.android.server.storage.AppCollector)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        com.android.server.storage.AppCollector r1;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        r1 := @parameter0: com.android.server.storage.AppCollector;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: com.android.server.storage.AppCollector mCollector> = r1;

        return;
    }

    public void setContext(android.content.Context)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        android.content.Context r1;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        r1 := @parameter0: android.content.Context;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: android.content.Context mContext> = r1;

        return;
    }

    public void setDownloadsDirectory(java.io.File)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        java.io.File r1;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        r1 := @parameter0: java.io.File;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: java.io.File mDownloadsDirectory> = r1;

        return;
    }

    public void setJobService(android.app.job.JobService, android.app.job.JobParameters)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        android.app.job.JobService r1;
        android.app.job.JobParameters r2;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        r1 := @parameter0: android.app.job.JobService;

        r2 := @parameter1: android.app.job.JobParameters;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: android.app.job.JobService mJobService> = r1;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: android.app.job.JobParameters mParams> = r2;

        return;
    }

    public void setLogOutputFile(java.io.File)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        java.io.File r1;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        r1 := @parameter0: java.io.File;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: java.io.File mOutputFile> = r1;

        return;
    }

    public void setSystemSize(long)
    {
        com.android.server.storage.DiskStatsLoggingService$LogRunnable r0;
        long l0;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        l0 := @parameter0: long;

        r0.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: long mSystemSize> = l0;

        return;
    }
}
