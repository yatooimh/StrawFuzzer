public class com.android.server.storage.DiskStatsLoggingService extends android.app.job.JobService
{
    public static final java.lang.String DUMPSYS_CACHE_PATH;
    private static final int JOB_DISKSTATS_LOGGING;
    private static final java.lang.String TAG;
    private static android.content.ComponentName sDiskStatsLoggingService;

    static void <clinit>()
    {
        android.content.ComponentName $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        <com.android.server.storage.DiskStatsLoggingService: java.lang.String TAG> = "DiskStatsLogService";

        <com.android.server.storage.DiskStatsLoggingService: int JOB_DISKSTATS_LOGGING> = 1145656139;

        <com.android.server.storage.DiskStatsLoggingService: java.lang.String DUMPSYS_CACHE_PATH> = "/data/system/diskstats_cache.json";

        $r0 = new android.content.ComponentName;

        $r1 = class "Lcom/android/server/storage/DiskStatsLoggingService;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("android", $r2);

        <com.android.server.storage.DiskStatsLoggingService: android.content.ComponentName sDiskStatsLoggingService> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.server.storage.DiskStatsLoggingService r0;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService;

        specialinvoke r0.<android.app.job.JobService: void <init>()>();

        return;
    }

    private static boolean isCharging(android.content.Context)
    {
        java.lang.Object $r0;
        boolean $z0;
        android.content.Context r1;
        android.os.BatteryManager r2;

        r1 := @parameter0: android.content.Context;

        $r0 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("batterymanager");

        r2 = (android.os.BatteryManager) $r0;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.os.BatteryManager: boolean isCharging()>();

        return $z0;

     label1:
        return 0;
    }

    static boolean isDumpsysTaskEnabled(android.content.ContentResolver)
    {
        android.content.ContentResolver r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.content.ContentResolver;

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r0, "enable_diskstats_logging", 1);

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void schedule(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.app.job.JobInfo$Builder $r2, $r5, $r6, $r8;
        android.content.ComponentName $r3;
        android.app.job.JobScheduler $r4;
        java.util.concurrent.TimeUnit $r7;
        long $l0;
        android.app.job.JobInfo $r9;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("jobscheduler");

        $r4 = (android.app.job.JobScheduler) $r1;

        $r2 = new android.app.job.JobInfo$Builder;

        $r3 = <com.android.server.storage.DiskStatsLoggingService: android.content.ComponentName sDiskStatsLoggingService>;

        specialinvoke $r2.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>(1145656139, $r3);

        $r5 = virtualinvoke $r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>(1);

        $r6 = virtualinvoke $r5.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>(1);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l0 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        $r8 = virtualinvoke $r6.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long)>($l0);

        $r9 = virtualinvoke $r8.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        virtualinvoke $r4.<android.app.job.JobScheduler: int schedule(android.app.job.JobInfo)>($r9);

        return;
    }

    public boolean onStartJob(android.app.job.JobParameters)
    {
        com.android.server.storage.DiskStatsLoggingService r0;
        android.app.job.JobParameters r1;
        boolean $z0, $z1;
        android.content.ContentResolver $r4;
        android.content.pm.PackageManager $r5;
        com.android.server.storage.AppCollector $r6;
        android.os.Environment$UserEnvironment $r7;
        int $i0;
        com.android.server.storage.DiskStatsLoggingService$LogRunnable $r8;
        java.lang.String $r9;
        java.io.File $r10, $r11;
        long $l1;
        android.os.storage.VolumeInfo r12;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService;

        r1 := @parameter0: android.app.job.JobParameters;

        $z0 = staticinvoke <com.android.server.storage.DiskStatsLoggingService: boolean isCharging(android.content.Context)>(r0);

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.android.server.storage.DiskStatsLoggingService: android.content.ContentResolver getContentResolver()>();

        $z1 = staticinvoke <com.android.server.storage.DiskStatsLoggingService: boolean isDumpsysTaskEnabled(android.content.ContentResolver)>($r4);

        if $z1 != 0 goto label1;

        goto label3;

     label1:
        $r5 = virtualinvoke r0.<com.android.server.storage.DiskStatsLoggingService: android.content.pm.PackageManager getPackageManager()>();

        r12 = virtualinvoke $r5.<android.content.pm.PackageManager: android.os.storage.VolumeInfo getPrimaryStorageCurrentVolume()>();

        if r12 != null goto label2;

        return 0;

     label2:
        $r6 = new com.android.server.storage.AppCollector;

        specialinvoke $r6.<com.android.server.storage.AppCollector: void <init>(android.content.Context,android.os.storage.VolumeInfo)>(r0, r12);

        $r7 = new android.os.Environment$UserEnvironment;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        specialinvoke $r7.<android.os.Environment$UserEnvironment: void <init>(int)>($i0);

        $r8 = new com.android.server.storage.DiskStatsLoggingService$LogRunnable;

        specialinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void <init>()>();

        $r9 = <android.os.Environment: java.lang.String DIRECTORY_DOWNLOADS>;

        $r10 = virtualinvoke $r7.<android.os.Environment$UserEnvironment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>($r9);

        virtualinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void setDownloadsDirectory(java.io.File)>($r10);

        $l1 = staticinvoke <com.android.server.storage.FileCollector: long getSystemSize(android.content.Context)>(r0);

        virtualinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void setSystemSize(long)>($l1);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("/data/system/diskstats_cache.json");

        virtualinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void setLogOutputFile(java.io.File)>($r11);

        virtualinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void setAppCollector(com.android.server.storage.AppCollector)>($r6);

        virtualinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void setJobService(android.app.job.JobService,android.app.job.JobParameters)>(r0, r1);

        virtualinvoke $r8.<com.android.server.storage.DiskStatsLoggingService$LogRunnable: void setContext(android.content.Context)>(r0);

        staticinvoke <android.os.AsyncTask: void execute(java.lang.Runnable)>($r8);

        return 1;

     label3:
        virtualinvoke r0.<com.android.server.storage.DiskStatsLoggingService: void jobFinished(android.app.job.JobParameters,boolean)>(r1, 1);

        return 0;
    }

    public boolean onStopJob(android.app.job.JobParameters)
    {
        com.android.server.storage.DiskStatsLoggingService r0;
        android.app.job.JobParameters r1;

        r0 := @this: com.android.server.storage.DiskStatsLoggingService;

        r1 := @parameter0: android.app.job.JobParameters;

        return 0;
    }
}
