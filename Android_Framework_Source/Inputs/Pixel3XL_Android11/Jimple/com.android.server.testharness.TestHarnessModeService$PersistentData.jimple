public class com.android.server.testharness.TestHarnessModeService$PersistentData extends java.lang.Object
{
    static final byte VERSION_1;
    static final byte VERSION_2;
    final byte[] mAdbKeys;
    final byte[] mAdbTempKeys;
    final int mVersion;

    void <init>(int, byte[], byte[])
    {
        com.android.server.testharness.TestHarnessModeService$PersistentData r0;
        int i0;
        byte[] r1, r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$PersistentData;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: int mVersion> = i0;

        r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbKeys> = r1;

        r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbTempKeys> = r2;

        return;
    }

    void <init>(byte[], byte[])
    {
        com.android.server.testharness.TestHarnessModeService$PersistentData r0;
        byte[] r1, r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$PersistentData;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: void <init>(int,byte[],byte[])>(2, r1, r2);

        return;
    }

    static com.android.server.testharness.TestHarnessModeService$PersistentData fromBytes(byte[]) throws com.android.server.testharness.TestHarnessModeService$SetUpTestHarnessModeException
    {
        int i0, $i1, $i2;
        java.lang.Throwable $r2;
        byte[] r4, r6, r7;
        java.io.ByteArrayInputStream r10;
        java.io.DataInputStream r11;
        com.android.server.testharness.TestHarnessModeService$PersistentData r12;
        com.android.server.testharness.TestHarnessModeService$SetUpTestHarnessModeException r13;
        java.lang.Exception r14;

        r4 := @parameter0: byte[];

     label1:
        r11 = new java.io.DataInputStream;

        r10 = new java.io.ByteArrayInputStream;

        specialinvoke r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        specialinvoke r11.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r10);

        i0 = virtualinvoke r11.<java.io.DataInputStream: int readInt()>();

     label2:
        if i0 != 1 goto label4;

     label3:
        virtualinvoke r11.<java.io.DataInputStream: boolean readBoolean()>();

     label4:
        $i1 = virtualinvoke r11.<java.io.DataInputStream: int readInt()>();

        r6 = newarray (byte)[$i1];

        virtualinvoke r11.<java.io.DataInputStream: void readFully(byte[])>(r6);

        $i2 = virtualinvoke r11.<java.io.DataInputStream: int readInt()>();

        r7 = newarray (byte)[$i2];

        virtualinvoke r11.<java.io.DataInputStream: void readFully(byte[])>(r7);

        r12 = new com.android.server.testharness.TestHarnessModeService$PersistentData;

        specialinvoke r12.<com.android.server.testharness.TestHarnessModeService$PersistentData: void <init>(int,byte[],byte[])>(i0, r6, r7);

     label5:
        return r12;

     label6:
        $r2 := @caughtexception;

        r13 = new com.android.server.testharness.TestHarnessModeService$SetUpTestHarnessModeException;

        r14 = (java.lang.Exception) $r2;

        specialinvoke r13.<com.android.server.testharness.TestHarnessModeService$SetUpTestHarnessModeException: void <init>(java.lang.Exception)>(r14);

        throw r13;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    byte[] toBytes()
    {
        com.android.server.testharness.TestHarnessModeService$PersistentData r0;
        java.io.DataOutputStream r1;
        byte[] $r2, $r3, $r4, $r5, r9;
        int $i0, $i1;
        java.lang.Throwable $r6;
        java.lang.RuntimeException $r7;
        java.io.ByteArrayOutputStream r8;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$PersistentData;

     label1:
        r8 = new java.io.ByteArrayOutputStream;

        specialinvoke r8.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = new java.io.DataOutputStream;

        specialinvoke r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r8);

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>(2);

        $r2 = r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbKeys>;

        $i0 = lengthof $r2;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $r3 = r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbKeys>;

        virtualinvoke r1.<java.io.DataOutputStream: void write(byte[])>($r3);

        $r4 = r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbTempKeys>;

        $i1 = lengthof $r4;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $r5 = r0.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbTempKeys>;

        virtualinvoke r1.<java.io.DataOutputStream: void write(byte[])>($r5);

        virtualinvoke r1.<java.io.DataOutputStream: void close()>();

        r9 = virtualinvoke r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        return r9;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.testharness.TestHarnessModeService$PersistentData: byte VERSION_2> = 2;

        <com.android.server.testharness.TestHarnessModeService$PersistentData: byte VERSION_1> = 1;

        return;
    }
}
