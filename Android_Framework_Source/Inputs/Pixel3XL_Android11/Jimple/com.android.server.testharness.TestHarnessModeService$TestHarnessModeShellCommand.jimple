class com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand extends android.os.ShellCommand
{
    final com.android.server.testharness.TestHarnessModeService this$0;

    private void <init>(com.android.server.testharness.TestHarnessModeService)
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        com.android.server.testharness.TestHarnessModeService r1;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        r1 := @parameter0: com.android.server.testharness.TestHarnessModeService;

        r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: com.android.server.testharness.TestHarnessModeService this$0> = r1;

        specialinvoke r0.<android.os.ShellCommand: void <init>()>();

        return;
    }

    void <init>(com.android.server.testharness.TestHarnessModeService, com.android.server.testharness.TestHarnessModeService$1)
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        com.android.server.testharness.TestHarnessModeService r1;
        com.android.server.testharness.TestHarnessModeService$1 r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        r1 := @parameter0: com.android.server.testharness.TestHarnessModeService;

        r2 := @parameter1: com.android.server.testharness.TestHarnessModeService$1;

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: void <init>(com.android.server.testharness.TestHarnessModeService)>(r1);

        return;
    }

    private void checkPermissions()
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        com.android.server.testharness.TestHarnessModeService $r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        $r1 = r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: com.android.server.testharness.TestHarnessModeService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.ENABLE_TEST_HARNESS_MODE", "You must hold android.permission.ENABLE_TEST_HARNESS_MODE to enable Test Harness Mode");

        return;
    }

    private byte[] getBytesFromFile(java.io.File) throws java.io.IOException
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        int i0, i1;
        byte[] $r1, r8;
        boolean $z0;
        java.nio.file.OpenOption[] $r2;
        long $l2;
        java.lang.Throwable $r3, $r4;
        java.io.File r5;
        java.nio.file.Path r6;
        java.io.InputStream r7;
        java.io.IOException r9;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        r5 := @parameter0: java.io.File;

        if r5 == null goto label11;

        $z0 = virtualinvoke r5.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        goto label11;

     label01:
        r6 = virtualinvoke r5.<java.io.File: java.nio.file.Path toPath()>();

        $r2 = newarray (java.nio.file.OpenOption)[0];

        r7 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r6, $r2);

     label02:
        $l2 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(r6);

        i0 = (int) $l2;

        r8 = newarray (byte)[i0];

        i1 = virtualinvoke r7.<java.io.InputStream: int read(byte[])>(r8);

     label03:
        if i1 != i0 goto label05;

        if r7 == null goto label04;

        virtualinvoke r7.<java.io.InputStream: void close()>();

     label04:
        return r8;

     label05:
        r9 = new java.io.IOException;

        specialinvoke r9.<java.io.IOException: void <init>(java.lang.String)>("Failed to read the whole file");

        throw r9;

     label06:
        $r4 := @caughtexception;

        if r7 == null goto label10;

     label07:
        virtualinvoke r7.<java.io.InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label10:
        throw $r4;

     label11:
        $r1 = newarray (byte)[0];

        return $r1;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private int handleEnable()
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        byte[] r1, $r4, r22;
        java.lang.Object $r2;
        com.android.server.testharness.TestHarnessModeService $r3, $r11;
        android.content.Intent $r5;
        java.lang.String $r8, $r14, $r17;
        android.content.Context $r12;
        android.os.UserHandle $r13;
        java.io.PrintWriter $r15, $r18;
        java.lang.Throwable $r16;
        android.debug.AdbManagerInternal r19;
        java.io.File r20, r21;
        com.android.server.testharness.TestHarnessModeService$PersistentData r23;
        com.android.server.PersistentDataBlockManagerInternal r24;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/debug/AdbManagerInternal;");

        r19 = (android.debug.AdbManagerInternal) $r2;

        r20 = virtualinvoke r19.<android.debug.AdbManagerInternal: java.io.File getAdbKeysFile()>();

        r21 = virtualinvoke r19.<android.debug.AdbManagerInternal: java.io.File getAdbTempKeysFile()>();

     label1:
        r22 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: byte[] getBytesFromFile(java.io.File)>(r20);

        r1 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: byte[] getBytesFromFile(java.io.File)>(r21);

        r23 = new com.android.server.testharness.TestHarnessModeService$PersistentData;

        specialinvoke r23.<com.android.server.testharness.TestHarnessModeService$PersistentData: void <init>(byte[],byte[])>(r22, r1);

        $r3 = r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: com.android.server.testharness.TestHarnessModeService this$0>;

        r24 = staticinvoke <com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal access$200(com.android.server.testharness.TestHarnessModeService)>($r3);

     label2:
        if r24 != null goto label5;

     label3:
        $r14 = staticinvoke <com.android.server.testharness.TestHarnessModeService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r14, "Failed to enable Test Harness Mode. No implementation of PersistentDataBlockManagerInternal was bound.");

        $r15 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r15.<java.io.PrintWriter: void println(java.lang.String)>("Failed to enable Test Harness Mode");

     label4:
        return 1;

     label5:
        $r4 = virtualinvoke r23.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] toBytes()>();

        interfaceinvoke r24.<com.android.server.PersistentDataBlockManagerInternal: void setTestHarnessModeData(byte[])>($r4);

     label6:
        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.FACTORY_RESET");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("android");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r8 = staticinvoke <com.android.server.testharness.TestHarnessModeService: java.lang.String access$300()>();

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.REASON", $r8);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.intent.extra.WIPE_EXTERNAL_STORAGE", 1);

        $r11 = r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: com.android.server.testharness.TestHarnessModeService this$0>;

        $r12 = virtualinvoke $r11.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $r13 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r12.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r5, $r13);

        return 0;

     label7:
        $r16 := @caughtexception;

        $r17 = staticinvoke <com.android.server.testharness.TestHarnessModeService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r17, "Failed to store ADB keys.", $r16);

        $r18 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r18.<java.io.PrintWriter: void println(java.lang.String)>("Failed to enable Test Harness Mode");

        return 1;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    private boolean isDeviceSecure()
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        com.android.server.testharness.TestHarnessModeService $r1, $r4;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.KeyguardManager $r5;
        android.content.pm.UserInfo $r6;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        $r1 = r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: com.android.server.testharness.TestHarnessModeService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/KeyguardManager;");

        $r5 = (android.app.KeyguardManager) $r3;

        $r4 = r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: com.android.server.testharness.TestHarnessModeService this$0>;

        $r6 = staticinvoke <com.android.server.testharness.TestHarnessModeService: android.content.pm.UserInfo access$100(com.android.server.testharness.TestHarnessModeService)>($r4);

        $i0 = $r6.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke $r5.<android.app.KeyguardManager: boolean isDeviceSecure(int)>($i0);

        return $z0;
    }

    public int onCommand(java.lang.String)
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        long l0;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter $r1;
        int $i1, i2, i4;
        java.lang.Throwable $r2;
        java.lang.String r3;
        byte b3;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        r3 := @parameter0: java.lang.String;

        i2 = virtualinvoke r3.<java.lang.String: int hashCode()>();

        if i2 == -1298848381 goto label03;

        if i2 == 1097519758 goto label02;

     label01:
        goto label04;

     label02:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("restore");

        if $z2 == 0 goto label01;

        b3 = 1;

        goto label05;

     label03:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("enable");

        if $z0 == 0 goto label01;

        b3 = 0;

        goto label05;

     label04:
        b3 = -1;

     label05:
        if b3 == 0 goto label06;

        if b3 == 1 goto label06;

        $i1 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: int handleDefaultCommands(java.lang.String)>(r3);

        return $i1;

     label06:
        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: void checkPermissions()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $z1 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: boolean isDeviceSecure()>();

        if $z1 == 0 goto label09;

        $r1 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("Test Harness Mode cannot be enabled if there is a lock screen");

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 2;

     label09:
        i4 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: int handleEnable()>();

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i4;

     label11:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void onHelp()
    {
        com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand;

        r1 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("About:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Test Harness Mode is a mode that the device can be placed in to prepare");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  the device for running UI tests. The device is placed into this mode by");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  first wiping all data from the device, preserving ADB keys.");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  By default, the following settings are configured:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    * Package Verifier is disabled");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    * Stay Awake While Charging is enabled");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    * OTA Updates are disabled");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    * Auto-Sync for accounts is disabled");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Other apps may configure themselves differently in Test Harness Mode by");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  checking ActivityManager.isRunningInUserTestHarness()");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Test Harness Mode commands:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Print this help text.");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  enable|restore");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Erase all data from this device and enable Test Harness Mode,");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    preserving the stored ADB keys currently on the device and toggling");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    settings in a way that are conducive to Instrumentation testing.");

        return;
    }
}
