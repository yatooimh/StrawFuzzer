public class com.android.server.testharness.TestHarnessModeService extends com.android.server.SystemService
{
    private static final java.lang.String TAG;
    private static final java.lang.String TEST_HARNESS_MODE_PROPERTY;
    private com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal;
    private final android.os.IBinder mService;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.testharness.TestHarnessModeService: java.lang.String TEST_HARNESS_MODE_PROPERTY> = "persist.sys.test_harness";

        $r0 = class "Lcom/android/server/testharness/TestHarnessModeService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.Context r1;
        com.android.server.testharness.TestHarnessModeService$1 $r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new com.android.server.testharness.TestHarnessModeService$1;

        specialinvoke $r2.<com.android.server.testharness.TestHarnessModeService$1: void <init>(com.android.server.testharness.TestHarnessModeService)>(r0);

        r0.<com.android.server.testharness.TestHarnessModeService: android.os.IBinder mService> = $r2;

        return;
    }

    static android.content.pm.UserInfo access$100(com.android.server.testharness.TestHarnessModeService)
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.pm.UserInfo $r1;

        r0 := @parameter0: com.android.server.testharness.TestHarnessModeService;

        $r1 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.pm.UserInfo getPrimaryUser()>();

        return $r1;
    }

    static com.android.server.PersistentDataBlockManagerInternal access$200(com.android.server.testharness.TestHarnessModeService)
    {
        com.android.server.testharness.TestHarnessModeService r0;
        com.android.server.PersistentDataBlockManagerInternal $r1;

        r0 := @parameter0: com.android.server.testharness.TestHarnessModeService;

        $r1 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlock()>();

        return $r1;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        return $r0;
    }

    private void completeTestHarnessModeSetup()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        java.lang.String $r1, $r7;
        com.android.server.testharness.TestHarnessModeService$PersistentData $r2;
        com.android.server.PersistentDataBlockManagerInternal $r3, $r5;
        java.lang.Throwable $r4;
        com.android.server.testharness.TestHarnessModeService$SetUpTestHarnessModeException $r6;
        byte[] r8;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r1 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r1, "Completing Test Harness Mode setup.");

        r8 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: byte[] getTestHarnessModeData()>();

        if r8 != null goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.android.server.testharness.TestHarnessModeService$PersistentData: com.android.server.testharness.TestHarnessModeService$PersistentData fromBytes(byte[])>(r8);

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void setUpAdbFiles(com.android.server.testharness.TestHarnessModeService$PersistentData)>($r2);

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void configureSettings()>();

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void configureUser()>();

     label2:
        $r3 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlock()>();

        interfaceinvoke $r3.<com.android.server.PersistentDataBlockManagerInternal: void clearTestHarnessModeData()>();

        goto label7;

     label3:
        $r4 := @caughtexception;

        goto label8;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Failed to set up Test Harness Mode. Bad data.", $r6);

     label6:
        goto label2;

     label7:
        return;

     label8:
        $r5 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlock()>();

        interfaceinvoke $r5.<com.android.server.PersistentDataBlockManagerInternal: void clearTestHarnessModeData()>();

        throw $r4;

        catch com.android.server.testharness.TestHarnessModeService$SetUpTestHarnessModeException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private void configureSettings()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.ContentResolver r1;
        android.debug.AdbManagerInternal r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        boolean $z1;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r3 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "adb_enabled", 0);

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/debug/AdbManagerInternal;");

        r2 = (android.debug.AdbManagerInternal) $r4;

        $z1 = virtualinvoke r2.<android.debug.AdbManagerInternal: boolean isAdbEnabled(byte)>(0);

        if $z1 == 0 goto label1;

        virtualinvoke r2.<android.debug.AdbManagerInternal: void stopAdbdForTransport(byte)>(0);

     label1:
        staticinvoke <android.provider.Settings$Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>(r1, "adb_allowed_connection_time", 0L);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "adb_enabled", 1);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "development_settings_enabled", 1);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "verifier_verify_adb_installs", 0);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "stay_on_while_plugged_in", 7);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "ota_disable_automatic_update", 1);

        return;
    }

    private void configureUser()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.pm.UserInfo r1;
        int $i0;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.location.LocationManager $r4;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        r1 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.pm.UserInfo getPrimaryUser()>();

        $i0 = r1.<android.content.pm.UserInfo: int id>;

        staticinvoke <android.content.ContentResolver: void setMasterSyncAutomaticallyAsUser(boolean,int)>(0, $i0);

        $r2 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/location/LocationManager;");

        $r4 = (android.location.LocationManager) $r3;

        $r5 = virtualinvoke r1.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        virtualinvoke $r4.<android.location.LocationManager: void setLocationEnabledForUser(boolean,android.os.UserHandle)>(1, $r5);

        return;
    }

    private void disableLockScreen()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.pm.UserInfo r1;
        com.android.internal.widget.LockPatternUtils $r2;
        android.content.Context $r3;
        int $i0;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        r1 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.pm.UserInfo getPrimaryUser()>();

        $r2 = new com.android.internal.widget.LockPatternUtils;

        $r3 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        specialinvoke $r2.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r3);

        $i0 = r1.<android.content.pm.UserInfo: int id>;

        virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: void setLockScreenDisabled(boolean,int)>(1, $i0);

        return;
    }

    private com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlock()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        com.android.server.PersistentDataBlockManagerInternal $r1, $r2, $r5;
        java.lang.String $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r1 = r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal>;

        if $r1 != null goto label1;

        $r3 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r3, "Getting PersistentDataBlockManagerInternal from LocalServices");

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/PersistentDataBlockManagerInternal;");

        $r5 = (com.android.server.PersistentDataBlockManagerInternal) $r4;

        r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal> = $r5;

     label1:
        $r2 = r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal>;

        return $r2;
    }

    private android.content.pm.UserInfo getPrimaryUser()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.Context $r1;
        android.os.UserManager $r2;
        android.content.pm.UserInfo $r3;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r1 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        $r3 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getPrimaryUser()>();

        return $r3;
    }

    private byte[] getTestHarnessModeData()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        int $i0;
        java.lang.String $r1;
        com.android.server.PersistentDataBlockManagerInternal r2;
        byte[] r3;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        r2 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlock()>();

        if r2 != null goto label1;

        $r1 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r1, "Failed to start Test Harness Mode; no implementation of PersistentDataBlockManagerInternal was bound!");

        return null;

     label1:
        r3 = interfaceinvoke r2.<com.android.server.PersistentDataBlockManagerInternal: byte[] getTestHarnessModeData()>();

        if r3 == null goto label3;

        $i0 = lengthof r3;

        if $i0 != 0 goto label2;

        goto label3;

     label2:
        return r3;

     label3:
        return null;
    }

    private void setDeviceProvisioned()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r2 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "device_provisioned", 1);

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_setup_complete", 1, -2);

        return;
    }

    private void setUpAdbFiles(com.android.server.testharness.TestHarnessModeService$PersistentData)
    {
        com.android.server.testharness.TestHarnessModeService r0;
        com.android.server.testharness.TestHarnessModeService$PersistentData r1;
        android.debug.AdbManagerInternal r2;
        java.lang.Object $r3;
        java.io.File $r4, $r5, $r7, $r10;
        byte[] $r6, $r9;
        java.nio.file.Path $r8, $r11;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        r1 := @parameter0: com.android.server.testharness.TestHarnessModeService$PersistentData;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/debug/AdbManagerInternal;");

        r2 = (android.debug.AdbManagerInternal) $r3;

        $r4 = virtualinvoke r2.<android.debug.AdbManagerInternal: java.io.File getAdbKeysFile()>();

        if $r4 == null goto label1;

        $r9 = r1.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbKeys>;

        $r10 = virtualinvoke r2.<android.debug.AdbManagerInternal: java.io.File getAdbKeysFile()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.nio.file.Path toPath()>();

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void writeBytesToFile(byte[],java.nio.file.Path)>($r9, $r11);

     label1:
        $r5 = virtualinvoke r2.<android.debug.AdbManagerInternal: java.io.File getAdbTempKeysFile()>();

        if $r5 == null goto label2;

        $r6 = r1.<com.android.server.testharness.TestHarnessModeService$PersistentData: byte[] mAdbTempKeys>;

        $r7 = virtualinvoke r2.<android.debug.AdbManagerInternal: java.io.File getAdbTempKeysFile()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.nio.file.Path toPath()>();

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void writeBytesToFile(byte[],java.nio.file.Path)>($r6, $r8);

     label2:
        return;
    }

    private void setUpTestHarnessMode()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r1 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r1, "Setting up test harness mode");

        $r2 = specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: byte[] getTestHarnessModeData()>();

        if $r2 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void setDeviceProvisioned()>();

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void disableLockScreen()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.test_harness", "1");

        return;
    }

    private void showNotificationIfEnabled()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        java.lang.String r1, $r6, r21;
        boolean $z0;
        android.content.Context $r2, $r3, $r5, $r12, $r17;
        android.app.Notification$Builder $r4, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16;
        int $i0;
        java.lang.Object $r18;
        android.os.UserHandle $r19;
        android.app.NotificationManager $r20;
        android.app.Notification r22;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.test_harness", 0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        r21 = virtualinvoke $r2.<android.content.Context: java.lang.String getString(int)>(17041345);

        $r3 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        r1 = virtualinvoke $r3.<android.content.Context: java.lang.String getString(int)>(17041344);

        $r4 = new android.app.Notification$Builder;

        $r5 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $r6 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVELOPER>;

        specialinvoke $r4.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r5, $r6);

        $r7 = virtualinvoke $r4.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17303547);

        $r8 = virtualinvoke $r7.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r9 = virtualinvoke $r8.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r10 = virtualinvoke $r9.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r21);

        $r11 = virtualinvoke $r10.<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>(0);

        $r12 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $i0 = virtualinvoke $r12.<android.content.Context: int getColor(int)>(17170460);

        $r13 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i0);

        $r14 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r21);

        $r15 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r1);

        $r16 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>(1);

        r22 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification build()>();

        $r17 = virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: android.content.Context getContext()>();

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/NotificationManager;");

        $r20 = (android.app.NotificationManager) $r18;

        $r19 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r20.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 54, r22, $r19);

        return;
    }

    private void writeBytesToFile(byte[], java.nio.file.Path)
    {
        com.android.server.testharness.TestHarnessModeService r0;
        java.nio.file.Path r1;
        java.io.OutputStream r2;
        java.nio.file.OpenOption[] $r3;
        java.nio.file.LinkOption[] $r4;
        java.nio.file.attribute.PosixFilePermission $r5;
        java.lang.Throwable $r7;
        java.lang.String $r8;
        byte[] r9;
        java.util.Set r10;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        r9 := @parameter0: byte[];

        r1 := @parameter1: java.nio.file.Path;

     label1:
        $r3 = newarray (java.nio.file.OpenOption)[0];

        r2 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r1, $r3);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r9);

        virtualinvoke r2.<java.io.OutputStream: void close()>();

        $r4 = newarray (java.nio.file.LinkOption)[0];

        r10 = staticinvoke <java.nio.file.Files: java.util.Set getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, $r4);

        $r5 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_READ>;

        interfaceinvoke r10.<java.util.Set: boolean add(java.lang.Object)>($r5);

        staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>(r1, r10);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <com.android.server.testharness.TestHarnessModeService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed to set up adb keys", $r7);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void onBootPhase(int)
    {
        com.android.server.testharness.TestHarnessModeService r0;
        int i0;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        i0 := @parameter0: int;

        if i0 == 500 goto label2;

        if i0 == 1000 goto label1;

        goto label3;

     label1:
        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void completeTestHarnessModeSetup()>();

        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void showNotificationIfEnabled()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.testharness.TestHarnessModeService: void setUpTestHarnessMode()>();

     label3:
        specialinvoke r0.<com.android.server.SystemService: void onBootPhase(int)>(i0);

        return;
    }

    public void onStart()
    {
        com.android.server.testharness.TestHarnessModeService r0;
        android.os.IBinder $r1;

        r0 := @this: com.android.server.testharness.TestHarnessModeService;

        $r1 = r0.<com.android.server.testharness.TestHarnessModeService: android.os.IBinder mService>;

        virtualinvoke r0.<com.android.server.testharness.TestHarnessModeService: void publishBinderService(java.lang.String,android.os.IBinder)>("testharness", $r1);

        return;
    }
}
