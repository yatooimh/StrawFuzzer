public final class com.android.server.textclassifier.IconsContentProvider extends android.content.ContentProvider
{
    private static final java.lang.String MIME_TYPE;
    private static final java.lang.String TAG;
    private final android.content.ContentProvider$PipeDataWriter mWriter;

    public void <init>()
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        com.android.server.textclassifier._$$Lambda$IconsContentProvider$2jS4meM2zcZimtuC21MGGWtYcqQ $r1;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        $r1 = new com.android.server.textclassifier._$$Lambda$IconsContentProvider$2jS4meM2zcZimtuC21MGGWtYcqQ;

        specialinvoke $r1.<com.android.server.textclassifier._$$Lambda$IconsContentProvider$2jS4meM2zcZimtuC21MGGWtYcqQ: void <init>(com.android.server.textclassifier.IconsContentProvider)>(r0);

        r0.<com.android.server.textclassifier.IconsContentProvider: android.content.ContentProvider$PipeDataWriter mWriter> = $r1;

        return;
    }

    private static android.graphics.Bitmap getBitmap(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable r0;
        android.graphics.Bitmap r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalStateException $r3;
        android.graphics.Bitmap$Config $r4;
        android.graphics.Canvas $r5;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        $i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if $i1 <= 0 goto label1;

        $i2 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i3 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i2, $i3, $r4);

        $r5 = new android.graphics.Canvas;

        specialinvoke $r5.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        $i4 = virtualinvoke $r5.<android.graphics.Canvas: int getWidth()>();

        $i5 = virtualinvoke $r5.<android.graphics.Canvas: int getHeight()>();

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i4, $i5);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r5);

        return r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The icon is zero-sized");

        throw $r3;
    }

    public static boolean sameIcon(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable r0, r10;
        java.io.ByteArrayOutputStream $r2, $r5;
        android.graphics.Bitmap $r3, $r6;
        android.graphics.Bitmap$CompressFormat $r4, $r7;
        byte[] $r8, $r9;
        boolean $z2;

        r10 := @parameter0: android.graphics.drawable.Drawable;

        r0 := @parameter1: android.graphics.drawable.Drawable;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = staticinvoke <com.android.server.textclassifier.IconsContentProvider: android.graphics.Bitmap getBitmap(android.graphics.drawable.Drawable)>(r10);

        $r4 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r3.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r4, 100, $r2);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = staticinvoke <com.android.server.textclassifier.IconsContentProvider: android.graphics.Bitmap getBitmap(android.graphics.drawable.Drawable)>(r0);

        $r7 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r6.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r7, 100, $r5);

        $r8 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r9 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r8, $r9);

        return $z2;
    }

    public int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        return 0;
    }

    public java.lang.String getType(android.net.Uri)
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r1 := @parameter0: android.net.Uri;

        return "image/png";
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        return null;
    }

    public void lambda$new$0$IconsContentProvider(android.os.ParcelFileDescriptor, android.net.Uri, java.lang.String, android.os.Bundle, android.util.Pair)
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        android.util.Pair r3;
        int i0, $i1;
        java.lang.Object $r4, $r5;
        java.lang.Integer $r6;
        java.lang.String $r7, $r17, r21;
        android.graphics.drawable.Icon $r8;
        android.content.Context $r9;
        android.graphics.drawable.Drawable $r10;
        android.graphics.Bitmap $r11;
        android.graphics.Bitmap$CompressFormat $r12;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r14;
        java.lang.Throwable $r18, $r19;
        android.os.ParcelFileDescriptor r20;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r22;
        com.android.server.textclassifier.IconsUriHelper$ResourceInfo r23;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r20 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: android.net.Uri;

        r21 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.Bundle;

        r3 := @parameter4: android.util.Pair;

     label01:
        r22 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke r22.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r20);

     label02:
        $r4 = r3.<android.util.Pair: java.lang.Object first>;

        r23 = (com.android.server.textclassifier.IconsUriHelper$ResourceInfo) $r4;

        $r5 = r3.<android.util.Pair: java.lang.Object second>;

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = r23.<com.android.server.textclassifier.IconsUriHelper$ResourceInfo: java.lang.String packageName>;

        $i1 = r23.<com.android.server.textclassifier.IconsUriHelper$ResourceInfo: int id>;

        $r8 = staticinvoke <android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>($r7, $i1);

        $r9 = virtualinvoke r0.<com.android.server.textclassifier.IconsContentProvider: android.content.Context getContext()>();

        $r10 = virtualinvoke $r8.<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawableAsUser(android.content.Context,int)>($r9, i0);

        $r11 = staticinvoke <com.android.server.textclassifier.IconsContentProvider: android.graphics.Bitmap getBitmap(android.graphics.drawable.Drawable)>($r10);

        $r12 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r11.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r12, 100, r22);

     label03:
        virtualinvoke r22.<java.io.OutputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r19 := @caughtexception;

     label06:
        virtualinvoke r22.<java.io.OutputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

     label09:
        virtualinvoke $r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

     label10:
        throw $r19;

     label11:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error retrieving icon for uri: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IconsContentProvider", $r17, $r13);

     label12:
        return;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label10 to label11 with label11;
    }

    public boolean onCreate()
    {
        com.android.server.textclassifier.IconsContentProvider r0;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        return 1;
    }

    public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String)
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;
        com.android.server.textclassifier.IconsUriHelper $r2;
        int $i0;
        java.lang.Integer $r3;
        android.content.ContentProvider$PipeDataWriter $r4;
        java.lang.StringBuilder $r5, $r10;
        java.lang.String $r8, $r13, r14;
        java.lang.Throwable $r9;
        com.android.server.textclassifier.IconsUriHelper$ResourceInfo r15;
        android.util.Pair r17;
        android.os.ParcelFileDescriptor r18;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r1 := @parameter0: android.net.Uri;

        r14 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.android.server.textclassifier.IconsUriHelper: com.android.server.textclassifier.IconsUriHelper getInstance()>();

        r15 = virtualinvoke $r2.<com.android.server.textclassifier.IconsUriHelper: com.android.server.textclassifier.IconsUriHelper$ResourceInfo getResourceInfo(android.net.Uri)>(r1);

        if r15 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No icon found for uri: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("IconsContentProvider", $r8);

        return null;

     label1:
        r17 = new android.util.Pair;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke r17.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r15, $r3);

        $r4 = r0.<com.android.server.textclassifier.IconsContentProvider: android.content.ContentProvider$PipeDataWriter mWriter>;

        r18 = virtualinvoke r0.<com.android.server.textclassifier.IconsContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>(r1, "image/png", null, r17, $r4);

     label2:
        return r18;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening pipe helper for icon at uri: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IconsContentProvider", $r13, $r9);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        return null;
    }

    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        com.android.server.textclassifier.IconsContentProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.textclassifier.IconsContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        return 0;
    }

    public static void <clinit>()
    {
        <com.android.server.textclassifier.IconsContentProvider: java.lang.String TAG> = "IconsContentProvider";

        <com.android.server.textclassifier.IconsContentProvider: java.lang.String MIME_TYPE> = "image/png";

        return;
    }
}
