public final class com.android.server.timedetector.TimeDetectorStrategyCallbackImpl extends java.lang.Object implements com.android.server.timedetector.TimeDetectorStrategy$Callback
{
    private static final int SYSTEM_CLOCK_UPDATE_THRESHOLD_MILLIS_DEFAULT;
    private static final java.lang.String TAG;
    private final android.app.AlarmManager mAlarmManager;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private final int mSystemClockUpdateThresholdMillis;
    private final android.os.PowerManager$WakeLock mWakeLock;

    public void <init>(android.content.Context)
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        android.content.Context $r2, r11;
        android.content.ContentResolver $r4, r12;
        java.lang.Object $r5, $r8;
        android.os.PowerManager$WakeLock $r7, r14;
        android.app.AlarmManager $r10, r15;
        int $i0;
        android.os.PowerManager r13;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        r11 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r11);

        $r2 = (android.content.Context) r11;

        r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.content.Context mContext> = $r2;

        r12 = virtualinvoke r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r12);

        $r4 = (android.content.ContentResolver) r12;

        r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.content.ContentResolver mContentResolver> = $r4;

        $r5 = virtualinvoke r11.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        r13 = (android.os.PowerManager) $r5;

        r14 = virtualinvoke r13.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "timedetector.TimeDetectorStrategyCallbackImpl");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r14);

        $r7 = (android.os.PowerManager$WakeLock) r14;

        r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock> = $r7;

        $r8 = virtualinvoke r11.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AlarmManager;");

        r15 = (android.app.AlarmManager) $r8;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r15);

        $r10 = (android.app.AlarmManager) r15;

        r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.app.AlarmManager mAlarmManager> = $r10;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.sys.time_detector_update_diff", 2000);

        r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: int mSystemClockUpdateThresholdMillis> = $i0;

        return;
    }

    private void checkWakeLockHeld()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        android.os.PowerManager$WakeLock $r2, $r5;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        $r2 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WakeLock ");

        $r5 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not held");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("timedetector.TimeDetectorStrategyCallbackImpl", $r8);

     label1:
        return;
    }

    public void acquireWakeLock()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        android.os.PowerManager$WakeLock $r2, $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r9;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        $r2 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WakeLock ");

        $r6 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already held");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("timedetector.TimeDetectorStrategyCallbackImpl", $r9);

     label1:
        $r3 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        return;
    }

    public long elapsedRealtimeMillis()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        long $l0;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        return $l0;
    }

    public boolean isAutoTimeDetectionEnabled()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        int i0;
        android.content.ContentResolver $r2;
        android.provider.Settings$SettingNotFoundException $r3;
        boolean z0;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        z0 = 1;

     label1:
        $r2 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.content.ContentResolver mContentResolver>;

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>($r2, "auto_time");

     label2:
        if i0 == 0 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        return 1;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label5;
    }

    public void releaseWakeLock()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        specialinvoke r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: void checkWakeLockHeld()>();

        $r1 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

        return;
    }

    public void setSystemClock(long)
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        long l0;
        android.app.AlarmManager $r1;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: void checkWakeLockHeld()>();

        $r1 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r1.<android.app.AlarmManager: void setTime(long)>(l0);

        return;
    }

    public long systemClockMillis()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        long $l0;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    public int systemClockUpdateThresholdMillis()
    {
        com.android.server.timedetector.TimeDetectorStrategyCallbackImpl r0;
        int $i0;

        r0 := @this: com.android.server.timedetector.TimeDetectorStrategyCallbackImpl;

        $i0 = r0.<com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: int mSystemClockUpdateThresholdMillis>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: java.lang.String TAG> = "timedetector.TimeDetectorStrategyCallbackImpl";

        <com.android.server.timedetector.TimeDetectorStrategyCallbackImpl: int SYSTEM_CLOCK_UPDATE_THRESHOLD_MILLIS_DEFAULT> = 2000;

        return;
    }
}
