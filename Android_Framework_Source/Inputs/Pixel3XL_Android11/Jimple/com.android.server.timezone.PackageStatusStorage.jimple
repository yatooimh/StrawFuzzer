final class com.android.server.timezone.PackageStatusStorage extends java.lang.Object
{
    private static final java.lang.String ATTRIBUTE_CHECK_STATUS;
    private static final java.lang.String ATTRIBUTE_DATA_APP_VERSION;
    private static final java.lang.String ATTRIBUTE_OPTIMISTIC_LOCK_ID;
    private static final java.lang.String ATTRIBUTE_UPDATE_APP_VERSION;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String TAG_PACKAGE_STATUS;
    private static final long UNKNOWN_PACKAGE_VERSION;
    private final android.util.AtomicFile mPackageStatusFile;

    void <init>(java.io.File)
    {
        com.android.server.timezone.PackageStatusStorage r0;
        java.io.File r1, $r3;
        android.util.AtomicFile $r2;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.AtomicFile;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "package-status.xml");

        specialinvoke $r2.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r3, "timezone-status");

        r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile> = $r2;

        return;
    }

    private int getCurrentOptimisticLockId() throws java.text.ParseException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0;
        android.util.AtomicFile $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        java.lang.Throwable $r3, $r6, $r7;
        java.text.ParseException $r4;
        java.io.FileInputStream r8;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

     label01:
        $r1 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        r8 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        $r2 = staticinvoke <com.android.server.timezone.PackageStatusStorage: org.xmlpull.v1.XmlPullParser parseToPackageStatusTag(java.io.FileInputStream)>(r8);

        i0 = staticinvoke <com.android.server.timezone.PackageStatusStorage: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>($r2, "optimisticLockId");

     label03:
        if r8 == null goto label05;

     label04:
        virtualinvoke r8.<java.io.FileInputStream: void close()>();

     label05:
        return i0;

     label06:
        $r7 := @caughtexception;

        if r8 == null goto label11;

     label07:
        virtualinvoke r8.<java.io.FileInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r6 := @caughtexception;

     label10:
        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label11:
        throw $r7;

     label12:
        $r3 := @caughtexception;

        $r4 = new java.text.ParseException;

        specialinvoke $r4.<java.text.ParseException: void <init>(java.lang.String,int)>("Unable to read file", 0);

        virtualinvoke $r4.<java.text.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    private static int getIntAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1;
        java.text.ParseException $r4;
        int $i0;
        org.xmlpull.v1.XmlPullParser r6;
        java.lang.Integer r7;

        r6 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r0 := @parameter1: java.lang.String;

        r7 = staticinvoke <com.android.server.timezone.PackageStatusStorage: java.lang.Integer getNullableIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r6, r0);

        if r7 == null goto label1;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing attribute ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = new java.text.ParseException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.text.ParseException: void <init>(java.lang.String,int)>($r5, 0);

        throw $r4;
    }

    private static java.lang.Integer getNullableIntAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0, $r5, $r14, r16;
        java.text.ParseException r1, $r13;
        boolean $z0;
        int $i0;
        java.lang.Integer $r6;
        java.lang.Throwable $r7;
        java.lang.StringBuilder $r8, r18;
        org.xmlpull.v1.XmlPullParser r15;

        r15 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r0 := @parameter1: java.lang.String;

        r16 = interfaceinvoke r15.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r0);

        if r16 == null goto label5;

     label1:
        $z0 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        return null;

     label3:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r6;

     label4:
        $r7 := @caughtexception;

        goto label6;

     label5:
        r1 = new java.text.ParseException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" missing");

        $r5 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.text.ParseException: void <init>(java.lang.String,int)>($r5, 0);

        throw r1;

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad integer for attributeName=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r13 = new java.text.ParseException;

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.text.ParseException: void <init>(java.lang.String,int)>($r14, 0);

        throw $r13;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
        catch java.lang.NumberFormatException from label3 to label4 with label4;
        catch java.lang.NumberFormatException from label5 to label6 with label4;
    }

    private com.android.server.timezone.PackageStatus getPackageStatusLocked() throws java.text.ParseException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, i1, i2;
        android.util.AtomicFile $r1;
        long $l3, $l4;
        java.lang.Throwable $r2, $r5, $r6;
        java.text.ParseException $r3;
        java.io.FileInputStream r7;
        org.xmlpull.v1.XmlPullParser r8;
        java.lang.Integer r9;
        com.android.server.timezone.PackageStatus r10;
        com.android.server.timezone.PackageVersions r11;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

     label01:
        $r1 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        r7 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r8 = staticinvoke <com.android.server.timezone.PackageStatusStorage: org.xmlpull.v1.XmlPullParser parseToPackageStatusTag(java.io.FileInputStream)>(r7);

        r9 = staticinvoke <com.android.server.timezone.PackageStatusStorage: java.lang.Integer getNullableIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r8, "checkStatus");

     label03:
        if r9 != null goto label06;

        if r7 == null goto label05;

     label04:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label05:
        return null;

     label06:
        i0 = staticinvoke <com.android.server.timezone.PackageStatusStorage: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r8, "updateAppPackageVersion");

        i1 = staticinvoke <com.android.server.timezone.PackageStatusStorage: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r8, "dataAppPackageVersion");

        r10 = new com.android.server.timezone.PackageStatus;

        i2 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        r11 = new com.android.server.timezone.PackageVersions;

        $l4 = (long) i0;

        $l3 = (long) i1;

        specialinvoke r11.<com.android.server.timezone.PackageVersions: void <init>(long,long)>($l4, $l3);

        specialinvoke r10.<com.android.server.timezone.PackageStatus: void <init>(int,com.android.server.timezone.PackageVersions)>(i2, r11);

     label07:
        if r7 == null goto label09;

     label08:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label09:
        return r10;

     label10:
        $r5 := @caughtexception;

        if r7 == null goto label15;

     label11:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r6 := @caughtexception;

     label14:
        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label15:
        throw $r5;

     label16:
        $r2 := @caughtexception;

        $r3 = new java.text.ParseException;

        specialinvoke $r3.<java.text.ParseException: void <init>(java.lang.String,int)>("Error reading package status", 0);

        virtualinvoke $r3.<java.text.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.IOException from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label15 to label16 with label16;
    }

    private int insertInitialPackageStatus() throws java.io.IOException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i0 = (int) $l1;

        specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: void writePackageStatusLocked(java.lang.Integer,int,com.android.server.timezone.PackageVersions)>(null, i0, null);

        return i0;
    }

    private static org.xmlpull.v1.XmlPullParser parseToPackageStatusTag(java.io.FileInputStream) throws java.text.ParseException
    {
        int i0;
        java.nio.charset.Charset $r0;
        java.lang.String $r1, $r2, r10;
        boolean $z0;
        java.lang.Throwable $r3, $r6;
        java.io.FileInputStream r8;
        org.xmlpull.v1.XmlPullParser r9;
        java.text.ParseException r15, r16;
        java.lang.IllegalStateException r17;
        java.io.IOException r18;

        r8 := @parameter0: java.io.FileInputStream;

     label01:
        r9 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r0 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r1 = virtualinvoke $r0.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r9.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r8, $r1);

     label02:
        i0 = interfaceinvoke r9.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        if i0 == 1 goto label09;

     label04:
        r10 = interfaceinvoke r9.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label05:
        if i0 != 2 goto label08;

     label06:
        $r2 = "PackageStatus";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label08;

     label07:
        return r9;

     label08:
        goto label02;

     label09:
        r15 = new java.text.ParseException;

        specialinvoke r15.<java.text.ParseException: void <init>(java.lang.String,int)>("Unable to find PackageStatus tag", 0);

        throw r15;

     label10:
        $r3 := @caughtexception;

        r16 = new java.text.ParseException;

        specialinvoke r16.<java.text.ParseException: void <init>(java.lang.String,int)>("Error reading XML", 0);

        r18 = (java.io.IOException) $r3;

        virtualinvoke r18.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw r16;

     label11:
        $r6 := @caughtexception;

        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to configure parser", $r6);

        throw r17;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label11;
        catch java.io.IOException from label01 to label02 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label11;
        catch java.io.IOException from label02 to label03 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label11;
        catch java.io.IOException from label04 to label05 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label11;
        catch java.io.IOException from label06 to label07 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label11;
        catch java.io.IOException from label09 to label10 with label10;
    }

    private int recoverFromBadData(java.lang.Exception)
    {
        com.android.server.timezone.PackageStatusStorage r0;
        java.lang.Exception r1;
        int i0;
        android.util.AtomicFile $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        virtualinvoke $r2.<android.util.AtomicFile: void delete()>();

     label1:
        i0 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int insertInitialPackageStatus()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        virtualinvoke $r4.<java.lang.IllegalStateException: void addSuppressed(java.lang.Throwable)>(r1);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void writePackageStatusLocked(java.lang.Integer, int, com.android.server.timezone.PackageVersions) throws java.io.IOException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, $i2;
        com.android.server.timezone.PackageVersions r1;
        java.io.FileOutputStream r2, r22;
        com.android.internal.util.FastXmlSerializer r3;
        java.lang.IllegalArgumentException $r4;
        android.util.AtomicFile $r5, $r18, $r20;
        java.nio.charset.Charset $r6;
        java.lang.String $r7, $r11, $r13, $r15, r23;
        java.lang.Boolean $r8;
        java.lang.Throwable $r19;
        java.lang.Integer r21;
        boolean z0, z1;
        long l3, l4;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        r21 := @parameter0: java.lang.Integer;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.timezone.PackageVersions;

        z0 = 0;

        if r21 != null goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        if r1 != null goto label03;

        z0 = 1;

     label03:
        if z1 != z0 goto label43;

        r22 = null;

     label04:
        $r5 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        r2 = virtualinvoke $r5.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label05:
        r22 = r2;

     label06:
        r3 = new com.android.internal.util.FastXmlSerializer;

     label07:
        r22 = r2;

     label08:
        specialinvoke r3.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label09:
        r22 = r2;

     label10:
        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r2, $r7);

     label11:
        r22 = r2;

     label12:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r8);

     label13:
        r22 = r2;

     label14:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "PackageStatus");

     label15:
        if r21 != null goto label16;

        r23 = "";

        goto label18;

     label16:
        r22 = r2;

     label17:
        $i2 = virtualinvoke r21.<java.lang.Integer: int intValue()>();

        r23 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

     label18:
        r22 = r2;

     label19:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "checkStatus", r23);

     label20:
        r22 = r2;

     label21:
        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "optimisticLockId", $r11);

     label22:
        if r21 != null goto label23;

        l3 = -1L;

        goto label25;

     label23:
        r22 = r2;

     label24:
        l3 = r1.<com.android.server.timezone.PackageVersions: long mUpdateAppVersion>;

     label25:
        r22 = r2;

     label26:
        $r13 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l3);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "updateAppPackageVersion", $r13);

     label27:
        if r21 != null goto label28;

        l4 = -1L;

        goto label30;

     label28:
        r22 = r2;

     label29:
        l4 = r1.<com.android.server.timezone.PackageVersions: long mDataAppVersion>;

     label30:
        r22 = r2;

     label31:
        $r15 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l4);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "dataAppPackageVersion", $r15);

     label32:
        r22 = r2;

     label33:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "PackageStatus");

     label34:
        r22 = r2;

     label35:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label36:
        r22 = r2;

     label37:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label38:
        r22 = r2;

     label39:
        $r18 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        virtualinvoke $r18.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r2);

     label40:
        return;

     label41:
        $r19 := @caughtexception;

        if r22 == null goto label42;

        $r20 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        virtualinvoke $r20.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r22);

     label42:
        throw $r19;

     label43:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provide both status and packageVersions, or neither.");

        throw $r4;

        catch java.io.IOException from label04 to label05 with label41;
        catch java.io.IOException from label06 to label07 with label41;
        catch java.io.IOException from label08 to label09 with label41;
        catch java.io.IOException from label10 to label11 with label41;
        catch java.io.IOException from label12 to label13 with label41;
        catch java.io.IOException from label14 to label15 with label41;
        catch java.io.IOException from label17 to label18 with label41;
        catch java.io.IOException from label19 to label20 with label41;
        catch java.io.IOException from label21 to label22 with label41;
        catch java.io.IOException from label24 to label25 with label41;
        catch java.io.IOException from label26 to label27 with label41;
        catch java.io.IOException from label29 to label30 with label41;
        catch java.io.IOException from label31 to label32 with label41;
        catch java.io.IOException from label33 to label34 with label41;
        catch java.io.IOException from label35 to label36 with label41;
        catch java.io.IOException from label37 to label38 with label41;
        catch java.io.IOException from label39 to label40 with label41;
    }

    private boolean writePackageStatusWithOptimisticLockCheck(int, int, java.lang.Integer, com.android.server.timezone.PackageVersions) throws java.io.IOException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, i1, i2;
        com.android.server.timezone.PackageVersions r1;
        java.lang.Throwable $r2;
        java.lang.Integer r3;
        java.lang.Exception r5;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.Integer;

        r1 := @parameter3: com.android.server.timezone.PackageVersions;

     label1:
        i2 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int getCurrentOptimisticLockId()>();

     label2:
        if i2 == i0 goto label3;

        return 0;

     label3:
        specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: void writePackageStatusLocked(java.lang.Integer,int,com.android.server.timezone.PackageVersions)>(r3, i1, r1);

        return 1;

     label4:
        $r2 := @caughtexception;

        r5 = (java.lang.Exception) $r2;

        specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int recoverFromBadData(java.lang.Exception)>(r5);

        return 0;

        catch java.text.ParseException from label1 to label2 with label4;
    }

    void deleteFileForTests()
    {
        com.android.server.timezone.PackageStatusStorage r0;
        android.util.AtomicFile $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        virtualinvoke $r2.<android.util.AtomicFile: void delete()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.timezone.PackageStatusStorage r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        com.android.server.timezone.PackageStatus $r5;
        java.lang.String $r7;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package status: ");

        $r5 = virtualinvoke r0.<com.android.server.timezone.PackageStatusStorage: com.android.server.timezone.PackageStatus getPackageStatus()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return;
    }

    public void forceCheckStateForTests(int, com.android.server.timezone.PackageVersions) throws java.io.IOException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, $i2;
        java.lang.Integer $r2;
        long $l1;
        java.lang.Throwable $r3, $r4;
        com.android.server.timezone.PackageVersions r5;
        java.lang.IllegalStateException r7;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        i0 := @parameter0: int;

        r5 := @parameter1: com.android.server.timezone.PackageVersions;

        entermonitor r0;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i2 = (int) $l1;

        specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: void writePackageStatusLocked(java.lang.Integer,int,com.android.server.timezone.PackageVersions)>($r2, $i2, r5);

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        goto label7;

     label5:
        $r3 := @caughtexception;

     label6:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw r7;

     label7:
        exitmonitor r0;

     label8:
        throw $r4;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    com.android.server.timezone.CheckToken generateCheckToken(com.android.server.timezone.PackageVersions)
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, i2;
        java.lang.Integer $r2;
        boolean $z0;
        java.lang.Throwable $r3, $r4, $r5;
        com.android.server.timezone.PackageVersions r6;
        com.android.server.timezone.CheckToken r13;
        java.lang.IllegalStateException r14, r15;
        java.lang.NullPointerException r16;
        java.lang.Exception r17;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        r6 := @parameter0: com.android.server.timezone.PackageVersions;

        if r6 == null goto label15;

        entermonitor r0;

     label01:
        i2 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int getCurrentOptimisticLockId()>();

     label02:
        goto label06;

     label03:
        $r3 := @caughtexception;

        goto label13;

     label04:
        $r5 := @caughtexception;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("timezone.PackageStatusStorage", "Unable to find optimistic lock ID from package status");

        r17 = (java.lang.Exception) $r5;

        i2 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int recoverFromBadData(java.lang.Exception)>(r17);

     label06:
        i0 = i2 + 1;

     label07:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: boolean writePackageStatusWithOptimisticLockCheck(int,int,java.lang.Integer,com.android.server.timezone.PackageVersions)>(i2, i0, $r2, r6);

        if $z0 == 0 goto label10;

        r13 = new com.android.server.timezone.CheckToken;

        specialinvoke r13.<com.android.server.timezone.CheckToken: void <init>(int,com.android.server.timezone.PackageVersions)>(i0, r6);

     label08:
        exitmonitor r0;

     label09:
        return r13;

     label10:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to update status to CHECK_STARTED. synchronization failure?");

        throw r14;

     label11:
        $r4 := @caughtexception;

     label12:
        r15 = new java.lang.IllegalStateException;

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw r15;

     label13:
        exitmonitor r0;

     label14:
        throw $r3;

     label15:
        r16 = new java.lang.NullPointerException;

        specialinvoke r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("currentInstalledVersions == null");

        throw r16;

        catch java.text.ParseException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.io.IOException from label10 to label11 with label11;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
    }

    com.android.server.timezone.PackageStatus getPackageStatus()
    {
        com.android.server.timezone.PackageStatusStorage r0;
        java.lang.Throwable $r2, $r3, $r4;
        com.android.server.timezone.PackageStatus r5, r8;
        java.lang.IllegalStateException r10;
        java.lang.Exception r11;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        entermonitor r0;

     label01:
        r5 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: com.android.server.timezone.PackageStatus getPackageStatusLocked()>();

     label02:
        exitmonitor r0;

     label03:
        return r5;

     label04:
        $r3 := @caughtexception;

        goto label12;

     label05:
        $r2 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.PackageStatusStorage", "Package status invalid, resetting and retrying", $r2);

        r11 = (java.lang.Exception) $r2;

        specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int recoverFromBadData(java.lang.Exception)>(r11);

     label07:
        r8 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: com.android.server.timezone.PackageStatus getPackageStatusLocked()>();

     label08:
        exitmonitor r0;

     label09:
        return r8;

     label10:
        $r4 := @caughtexception;

     label11:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Recovery from bad file failed", $r4);

        throw r10;

     label12:
        exitmonitor r0;

     label13:
        throw $r3;

        catch java.text.ParseException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.text.ParseException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
    }

    void initialize() throws java.io.IOException
    {
        com.android.server.timezone.PackageStatusStorage r0;
        android.util.AtomicFile $r1;
        java.io.File $r2;
        boolean $z0;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        $r1 = r0.<com.android.server.timezone.PackageStatusStorage: android.util.AtomicFile mPackageStatusFile>;

        $r2 = virtualinvoke $r1.<android.util.AtomicFile: java.io.File getBaseFile()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int insertInitialPackageStatus()>();

     label1:
        return;
    }

    boolean markChecked(com.android.server.timezone.CheckToken, boolean)
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, $i1;
        java.lang.Integer $r2;
        com.android.server.timezone.PackageVersions $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.timezone.CheckToken r6;
        boolean z0, z1;
        byte b2;
        java.lang.IllegalStateException r7;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        r6 := @parameter0: com.android.server.timezone.CheckToken;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        i0 = r6.<com.android.server.timezone.CheckToken: int mOptimisticLockId>;

     label02:
        if z0 == 0 goto label03;

        b2 = 2;

        goto label04;

     label03:
        b2 = 3;

     label04:
        $i1 = i0 + 1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        $r3 = r6.<com.android.server.timezone.CheckToken: com.android.server.timezone.PackageVersions mPackageVersions>;

        z1 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: boolean writePackageStatusWithOptimisticLockCheck(int,int,java.lang.Integer,com.android.server.timezone.PackageVersions)>(i0, $i1, $r2, $r3);

     label05:
        exitmonitor r0;

     label06:
        return z1;

     label07:
        $r4 := @caughtexception;

     label08:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw r7;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.io.IOException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void resetCheckState()
    {
        com.android.server.timezone.PackageStatusStorage r0;
        int i0, i2;
        boolean z0;
        java.lang.String $r3;
        java.lang.Throwable $r4, $r5, $r6;
        java.lang.StringBuilder r13;
        java.lang.IllegalStateException r14, r15;
        java.lang.Exception r16;

        r0 := @this: com.android.server.timezone.PackageStatusStorage;

        entermonitor r0;

     label01:
        i2 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int getCurrentOptimisticLockId()>();

     label02:
        goto label06;

     label03:
        $r6 := @caughtexception;

        goto label14;

     label04:
        $r4 := @caughtexception;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("timezone.PackageStatusStorage", "resetCheckState: Unable to find optimistic lock ID from package status");

        r16 = (java.lang.Exception) $r4;

        i2 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: int recoverFromBadData(java.lang.Exception)>(r16);

     label06:
        i0 = i2 + 1;

     label07:
        z0 = specialinvoke r0.<com.android.server.timezone.PackageStatusStorage: boolean writePackageStatusWithOptimisticLockCheck(int,int,java.lang.Integer,com.android.server.timezone.PackageVersions)>(i2, i0, null, null);

     label08:
        if z0 == 0 goto label11;

     label09:
        exitmonitor r0;

     label10:
        return;

     label11:
        r14 = new java.lang.IllegalStateException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetCheckState: Unable to reset package status, newOptimisticLockId=");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw r14;

     label12:
        $r5 := @caughtexception;

     label13:
        r15 = new java.lang.IllegalStateException;

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw r15;

     label14:
        exitmonitor r0;

     label15:
        throw $r6;

        catch java.text.ParseException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.io.IOException from label11 to label12 with label12;
        catch java.lang.Throwable from label11 to label12 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
        catch java.lang.Throwable from label14 to label15 with label03;
    }

    public static void <clinit>()
    {
        <com.android.server.timezone.PackageStatusStorage: long UNKNOWN_PACKAGE_VERSION> = -1L;

        <com.android.server.timezone.PackageStatusStorage: java.lang.String TAG_PACKAGE_STATUS> = "PackageStatus";

        <com.android.server.timezone.PackageStatusStorage: java.lang.String LOG_TAG> = "timezone.PackageStatusStorage";

        <com.android.server.timezone.PackageStatusStorage: java.lang.String ATTRIBUTE_UPDATE_APP_VERSION> = "updateAppPackageVersion";

        <com.android.server.timezone.PackageStatusStorage: java.lang.String ATTRIBUTE_OPTIMISTIC_LOCK_ID> = "optimisticLockId";

        <com.android.server.timezone.PackageStatusStorage: java.lang.String ATTRIBUTE_DATA_APP_VERSION> = "dataAppPackageVersion";

        <com.android.server.timezone.PackageStatusStorage: java.lang.String ATTRIBUTE_CHECK_STATUS> = "checkStatus";

        return;
    }
}
