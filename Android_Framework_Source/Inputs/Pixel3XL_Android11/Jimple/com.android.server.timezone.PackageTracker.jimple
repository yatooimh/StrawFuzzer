public class com.android.server.timezone.PackageTracker extends java.lang.Object
{
    private static final java.lang.String TAG;
    private int mCheckFailureCount;
    private int mCheckTimeAllowedMillis;
    private boolean mCheckTriggered;
    private final com.android.server.timezone.ConfigHelper mConfigHelper;
    private java.lang.String mDataAppPackageName;
    private int mDelayBeforeReliabilityCheckMillis;
    private final java.time.Clock mElapsedRealtimeClock;
    private long mFailedCheckRetryCount;
    private final com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper;
    private java.lang.Long mLastTriggerTimestamp;
    private final com.android.server.timezone.PackageManagerHelper mPackageManagerHelper;
    private final com.android.server.timezone.PackageStatusStorage mPackageStatusStorage;
    private boolean mTrackingEnabled;
    private java.lang.String mUpdateAppPackageName;

    void <init>(java.time.Clock, com.android.server.timezone.ConfigHelper, com.android.server.timezone.PackageManagerHelper, com.android.server.timezone.PackageStatusStorage, com.android.server.timezone.PackageTrackerIntentHelper)
    {
        com.android.server.timezone.PackageTracker r0;
        java.time.Clock r1;
        com.android.server.timezone.ConfigHelper r2;
        com.android.server.timezone.PackageManagerHelper r3;
        com.android.server.timezone.PackageStatusStorage r4;
        com.android.server.timezone.PackageTrackerIntentHelper r5;

        r0 := @this: com.android.server.timezone.PackageTracker;

        r1 := @parameter0: java.time.Clock;

        r2 := @parameter1: com.android.server.timezone.ConfigHelper;

        r3 := @parameter2: com.android.server.timezone.PackageManagerHelper;

        r4 := @parameter3: com.android.server.timezone.PackageStatusStorage;

        r5 := @parameter4: com.android.server.timezone.PackageTrackerIntentHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp> = null;

        r0.<com.android.server.timezone.PackageTracker: java.time.Clock mElapsedRealtimeClock> = r1;

        r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.ConfigHelper mConfigHelper> = r2;

        r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper> = r3;

        r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage> = r4;

        r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper> = r5;

        return;
    }

    static com.android.server.timezone.PackageTracker create(android.content.Context)
    {
        android.content.Context r0;
        java.time.Clock r1;
        com.android.server.timezone.PackageTrackerHelperImpl $r3;
        com.android.server.timezone.PackageTracker $r4;
        com.android.server.timezone.PackageStatusStorage $r5;
        java.io.File $r6, $r7;
        com.android.server.timezone.PackageTrackerIntentHelperImpl $r8;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <android.os.SystemClock: java.time.Clock elapsedRealtimeClock()>();

        $r3 = new com.android.server.timezone.PackageTrackerHelperImpl;

        specialinvoke $r3.<com.android.server.timezone.PackageTrackerHelperImpl: void <init>(android.content.Context)>(r0);

        $r4 = new com.android.server.timezone.PackageTracker;

        $r5 = new com.android.server.timezone.PackageStatusStorage;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        $r7 = staticinvoke <android.os.FileUtils: java.io.File createDir(java.io.File,java.lang.String)>($r6, "timezone");

        specialinvoke $r5.<com.android.server.timezone.PackageStatusStorage: void <init>(java.io.File)>($r7);

        $r8 = new com.android.server.timezone.PackageTrackerIntentHelperImpl;

        specialinvoke $r8.<com.android.server.timezone.PackageTrackerIntentHelperImpl: void <init>(android.content.Context)>(r0);

        specialinvoke $r4.<com.android.server.timezone.PackageTracker: void <init>(java.time.Clock,com.android.server.timezone.ConfigHelper,com.android.server.timezone.PackageManagerHelper,com.android.server.timezone.PackageStatusStorage,com.android.server.timezone.PackageTrackerIntentHelper)>(r1, $r3, $r3, $r5, $r8);

        return $r4;
    }

    private boolean isCheckInProgress()
    {
        com.android.server.timezone.PackageTracker r0;
        java.lang.Long $r1;
        boolean z0;

        r0 := @this: com.android.server.timezone.PackageTracker;

        $r1 = r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isCheckResponseOverdue()
    {
        com.android.server.timezone.PackageTracker r0;
        java.lang.Long r1, $r3;
        java.time.Clock $r2;
        long $l0, $l1, $l3, $l4;
        int $i2;
        byte $b5;
        boolean z0;

        r0 := @this: com.android.server.timezone.PackageTracker;

        r1 = r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp>;

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.timezone.PackageTracker: java.time.Clock mElapsedRealtimeClock>;

        $l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

        $r3 = r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp>;

        $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $i2 = r0.<com.android.server.timezone.PackageTracker: int mCheckTimeAllowedMillis>;

        $l3 = (long) $i2;

        $l4 = $l1 + $l3;

        $b5 = $l0 cmp $l4;

        if $b5 <= 0 goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    private static java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.PackageTracker", r0, r1);

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r0, r1);

        throw $r2;
    }

    private com.android.server.timezone.PackageVersions lookupInstalledPackageVersions()
    {
        com.android.server.timezone.PackageTracker r0;
        long l0, l1;
        java.lang.String $r2, $r4;
        com.android.server.timezone.PackageManagerHelper $r3, $r5;
        com.android.server.timezone.PackageVersions $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;

        r0 := @this: com.android.server.timezone.PackageTracker;

     label1:
        $r3 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r2 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        l0 = interfaceinvoke $r3.<com.android.server.timezone.PackageManagerHelper: long getInstalledPackageVersion(java.lang.String)>($r2);

        $r5 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r4 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        l1 = interfaceinvoke $r5.<com.android.server.timezone.PackageManagerHelper: long getInstalledPackageVersion(java.lang.String)>($r4);

     label2:
        $r6 = new com.android.server.timezone.PackageVersions;

        specialinvoke $r6.<com.android.server.timezone.PackageVersions: void <init>(long,long)>(l0, l1);

        return $r6;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.PackageTracker", "lookupInstalledPackageVersions: Unable to resolve installed package versions", $r7);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void setCheckComplete()
    {
        com.android.server.timezone.PackageTracker r0;

        r0 := @this: com.android.server.timezone.PackageTracker;

        r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp> = null;

        return;
    }

    private void setCheckInProgress()
    {
        com.android.server.timezone.PackageTracker r0;
        java.time.Clock $r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: com.android.server.timezone.PackageTracker;

        $r1 = r0.<com.android.server.timezone.PackageTracker: java.time.Clock mElapsedRealtimeClock>;

        $l0 = virtualinvoke $r1.<java.time.Clock: long millis()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp> = $r2;

        return;
    }

    private void throwIfDeviceSettingsOrAppsAreBad()
    {
        com.android.server.timezone.PackageTracker r0;
        java.lang.String $r1, $r2, $r6, $r11, $r13, $r16, $r19, $r23, $r26, $r27, $r30, $r33, $r37, $r40, $r44, $r46, $r51, $r53;
        long $l0, $l2;
        byte $b1;
        java.lang.StringBuilder $r3, $r8, $r21, $r35, $r42, $r49, r57, r60;
        java.lang.RuntimeException $r7, $r12, $r20, $r34, $r47, $r54;
        int $i3, $i4;
        com.android.server.timezone.PackageManagerHelper $r14, $r28;
        android.content.pm.PackageManager$NameNotFoundException $r41, $r48;
        boolean z0, z1;

        r0 := @this: com.android.server.timezone.PackageTracker;

        $r1 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        staticinvoke <com.android.server.timezone.PackageTracker: void throwRuntimeExceptionIfNullOrEmpty(java.lang.String,java.lang.String)>($r1, "Update app package name missing.");

        $r2 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        staticinvoke <com.android.server.timezone.PackageTracker: void throwRuntimeExceptionIfNullOrEmpty(java.lang.String,java.lang.String)>($r2, "Data app package name missing.");

        $l0 = r0.<com.android.server.timezone.PackageTracker: long mFailedCheckRetryCount>;

        $b1 = $l0 cmp 1L;

        if $b1 < 0 goto label10;

        $i3 = r0.<com.android.server.timezone.PackageTracker: int mCheckTimeAllowedMillis>;

        if $i3 < 1000 goto label09;

     label01:
        $r14 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r13 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        z0 = interfaceinvoke $r14.<com.android.server.timezone.PackageManagerHelper: boolean isPrivilegedApp(java.lang.String)>($r13);

     label02:
        if z0 == 0 goto label07;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update app ");

        $r23 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is valid.");

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r26);

     label03:
        $r28 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r27 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        z1 = interfaceinvoke $r28.<com.android.server.timezone.PackageManagerHelper: boolean isPrivilegedApp(java.lang.String)>($r27);

     label04:
        if z1 == 0 goto label05;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data app ");

        $r37 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is valid.");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r40);

        return;

     label05:
        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data app ");

        $r30 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a priv-app.");

        $r33 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>($r33, null);

        throw $r34;

     label06:
        $r48 := @caughtexception;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not determine data app package details for ");

        $r51 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>($r53, $r48);

        throw $r54;

     label07:
        r60 = new java.lang.StringBuilder;

        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update app ");

        $r16 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a priv-app.");

        $r19 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>($r19, null);

        throw $r20;

     label08:
        $r41 := @caughtexception;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not determine update app package details for ");

        $r44 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>($r46, $r41);

        throw $r47;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCheckTimeAllowedMillis=");

        $i4 = r0.<com.android.server.timezone.PackageTracker: int mCheckTimeAllowedMillis>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>($r11, null);

        throw $r12;

     label10:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mFailedRetryCount=");

        $l2 = r0.<com.android.server.timezone.PackageTracker: long mFailedCheckRetryCount>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>($r6, null);

        throw $r7;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label06;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label06;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label08;
    }

    private static void throwRuntimeExceptionIfNullOrEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.android.server.timezone.PackageTracker: java.lang.RuntimeException logAndThrowRuntimeException(java.lang.String,java.lang.Throwable)>(r1, null);

        throw $r2;
    }

    private boolean validateDataAppManifest()
    {
        com.android.server.timezone.PackageTracker r0;
        java.lang.String $r2, $r6, $r10;
        com.android.server.timezone.PackageManagerHelper $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.timezone.PackageTracker;

        $r3 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r2 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        $z0 = interfaceinvoke $r3.<com.android.server.timezone.PackageManagerHelper: boolean contentProviderRegistered(java.lang.String,java.lang.String)>("com.android.timezone", $r2);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateDataAppManifest: Data app ");

        $r6 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not expose the required provider with authority=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.timezone");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r10);

        return 0;

     label1:
        return 1;
    }

    private boolean validateUpdaterAppManifest()
    {
        com.android.server.timezone.PackageTracker r0;
        boolean z0, $z1;
        java.lang.String $r2, $r4, $r8, $r12, $r16, $r19;
        com.android.server.timezone.PackageManagerHelper $r3, $r5;
        android.content.Intent $r6;
        android.content.pm.PackageManager$NameNotFoundException $r13;
        java.lang.StringBuilder $r14, r20;

        r0 := @this: com.android.server.timezone.PackageTracker;

     label1:
        $r3 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r2 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        $z1 = interfaceinvoke $r3.<com.android.server.timezone.PackageManagerHelper: boolean usesPermission(java.lang.String,java.lang.String)>($r2, "android.permission.UPDATE_TIME_ZONE_RULES");

        if $z1 != 0 goto label3;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateUpdaterAppManifest: Updater app ");

        $r8 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not use permission=");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.UPDATE_TIME_ZONE_RULES");

        $r12 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r12);

     label2:
        return 0;

     label3:
        $r5 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageManagerHelper mPackageManagerHelper>;

        $r4 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        $r6 = staticinvoke <android.app.timezone.RulesUpdaterContract: android.content.Intent createUpdaterIntent(java.lang.String)>($r4);

        z0 = interfaceinvoke $r5.<com.android.server.timezone.PackageManagerHelper: boolean receiverRegistered(android.content.Intent,java.lang.String)>($r6, "android.permission.TRIGGER_TIME_ZONE_RULES_CHECK");

     label4:
        if z0 != 0 goto label5;

        return 0;

     label5:
        return 1;

     label6:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateUpdaterAppManifest: Updater app ");

        $r16 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not expose the required broadcast receiver.");

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.PackageTracker", $r19, $r13);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label6;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label6;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.timezone.PackageTracker r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.server.timezone.PackageStatusStorage $r8;

        r0 := @this: com.android.server.timezone.PackageTracker;

        r1 := @parameter0: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PackageTrackerState: ");

        $r5 = virtualinvoke r0.<com.android.server.timezone.PackageTracker: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        virtualinvoke $r8.<com.android.server.timezone.PackageStatusStorage: void dump(java.io.PrintWriter)>(r1);

        return;
    }

    protected int getCheckFailureCountForTests()
    {
        com.android.server.timezone.PackageTracker r0;
        int $i0;

        r0 := @this: com.android.server.timezone.PackageTracker;

        $i0 = r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount>;

        return $i0;
    }

    protected void recordCheckResult(com.android.server.timezone.CheckToken, boolean)
    {
        com.android.server.timezone.PackageTracker r0;
        boolean z0, $z1, $z2;
        java.lang.String $r5, $r12, $r21;
        com.android.server.timezone.PackageStatusStorage $r6, $r16, $r22;
        int $i2, $i4, $i5, $i6, $i8, $i9, $i11;
        long $l3, $l7, $l12;
        com.android.server.timezone.PackageTrackerIntentHelper $r13, $r14, $r15, $r17;
        java.lang.Throwable $r23;
        com.android.server.timezone.CheckToken r24;
        java.lang.StringBuilder r25, r26, r27;

        r0 := @this: com.android.server.timezone.PackageTracker;

        r24 := @parameter0: com.android.server.timezone.CheckToken;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recordOperationResult: checkToken=");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" success=");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r5);

        $z1 = r0.<com.android.server.timezone.PackageTracker: boolean mTrackingEnabled>;

        if $z1 != 0 goto label08;

     label02:
        if r24 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("timezone.PackageTracker", "recordCheckResult: Tracking is disabled and no token has been provided. Resetting tracking state.");

     label04:
        goto label06;

     label05:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recordCheckResult: Tracking is disabled and a token ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been unexpectedly provided. Resetting tracking state.");

        $r21 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r21);

     label06:
        $r22 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        virtualinvoke $r22.<com.android.server.timezone.PackageStatusStorage: void resetCheckState()>();

     label07:
        exitmonitor r0;

        return;

     label08:
        if r24 != null goto label11;

     label09:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "recordCheckResult: Unexpectedly missing checkToken, resetting storage state.");

        $r16 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        virtualinvoke $r16.<com.android.server.timezone.PackageStatusStorage: void resetCheckState()>();

        $r17 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i11 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l12 = (long) $i11;

        interfaceinvoke $r17.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l12);

        r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount> = 0;

     label10:
        goto label18;

     label11:
        $r6 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        $z2 = virtualinvoke $r6.<com.android.server.timezone.PackageStatusStorage: boolean markChecked(com.android.server.timezone.CheckToken,boolean)>(r24, z0);

        if $z2 == 0 goto label17;

        specialinvoke r0.<com.android.server.timezone.PackageTracker: void setCheckComplete()>();

     label12:
        if z0 == 0 goto label15;

     label13:
        $r15 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r15.<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>();

        r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount> = 0;

     label14:
        goto label18;

     label15:
        $r14 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i6 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l7 = (long) $i6;

        interfaceinvoke $r14.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l7);

        $i8 = r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount>;

        $i9 = $i8 + 1;

        r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount> = $i9;

     label16:
        goto label18;

     label17:
        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recordCheckResult: could not update token=");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with success=");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Optimistic lock failure");

        $r12 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r12);

        $r13 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i2 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l3 = (long) $i2;

        interfaceinvoke $r13.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l3);

        $i4 = r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount>;

        $i5 = $i4 + 1;

        r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount> = $i5;

     label18:
        exitmonitor r0;

        return;

     label19:
        $r23 := @caughtexception;

        exitmonitor r0;

        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    protected boolean start()
    {
        com.android.server.timezone.PackageTracker r0;
        boolean z0;
        com.android.server.timezone.ConfigHelper $r1, $r2, $r4, $r6, $r7;
        java.lang.String $r3, $r5, $r9, $r10;
        int $i0, $i1, $i3, $i4, $i5;
        long $l2, $l6;
        com.android.server.timezone.PackageStatusStorage $r8;
        com.android.server.timezone.PackageTrackerIntentHelper $r11, $r12;
        java.lang.Throwable $r13, $r14;

        r0 := @this: com.android.server.timezone.PackageTracker;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.ConfigHelper mConfigHelper>;

        z0 = interfaceinvoke $r1.<com.android.server.timezone.ConfigHelper: boolean isTrackingEnabled()>();

        r0.<com.android.server.timezone.PackageTracker: boolean mTrackingEnabled> = z0;

     label02:
        if z0 != 0 goto label05;

     label03:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "Time zone updater / data package tracking explicitly disabled.");

     label04:
        exitmonitor r0;

        return 0;

     label05:
        $r2 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.ConfigHelper mConfigHelper>;

        $r3 = interfaceinvoke $r2.<com.android.server.timezone.ConfigHelper: java.lang.String getUpdateAppPackageName()>();

        r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName> = $r3;

        $r4 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.ConfigHelper mConfigHelper>;

        $r5 = interfaceinvoke $r4.<com.android.server.timezone.ConfigHelper: java.lang.String getDataAppPackageName()>();

        r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName> = $r5;

        $r6 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.ConfigHelper mConfigHelper>;

        $i0 = interfaceinvoke $r6.<com.android.server.timezone.ConfigHelper: int getCheckTimeAllowedMillis()>();

        r0.<com.android.server.timezone.PackageTracker: int mCheckTimeAllowedMillis> = $i0;

        $r7 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.ConfigHelper mConfigHelper>;

        $i1 = interfaceinvoke $r7.<com.android.server.timezone.ConfigHelper: int getFailedCheckRetryCount()>();

        $l2 = (long) $i1;

        r0.<com.android.server.timezone.PackageTracker: long mFailedCheckRetryCount> = $l2;

        $i3 = r0.<com.android.server.timezone.PackageTracker: int mCheckTimeAllowedMillis>;

        $i4 = $i3 + 60000;

        r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis> = $i4;

        specialinvoke r0.<com.android.server.timezone.PackageTracker: void throwIfDeviceSettingsOrAppsAreBad()>();

        r0.<com.android.server.timezone.PackageTracker: boolean mCheckTriggered> = 0;

        r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount> = 0;

     label06:
        $r8 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        virtualinvoke $r8.<com.android.server.timezone.PackageStatusStorage: void initialize()>();

     label07:
        $r11 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $r10 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        $r9 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        interfaceinvoke $r11.<com.android.server.timezone.PackageTrackerIntentHelper: void initialize(java.lang.String,java.lang.String,com.android.server.timezone.PackageTracker)>($r10, $r9, r0);

        $r12 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i5 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l6 = (long) $i5;

        interfaceinvoke $r12.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l6);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "Time zone updater / data package tracking enabled");

     label08:
        exitmonitor r0;

        return 1;

     label09:
        $r13 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.PackageTracker", "PackageTracker storage could not be initialized.", $r13);

     label11:
        exitmonitor r0;

        return 0;

     label12:
        $r14 := @caughtexception;

        exitmonitor r0;

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public java.lang.String toString()
    {
        com.android.server.timezone.PackageTracker r0;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1;
        java.lang.String $r6, $r10, $r27;
        int $i0, $i1, $i3;
        long $l2;
        java.lang.Long $r20;

        r0 := @this: com.android.server.timezone.PackageTracker;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PackageTracker{mTrackingEnabled=");

        $z0 = r0.<com.android.server.timezone.PackageTracker: boolean mTrackingEnabled>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mUpdateAppPackageName=\'");

        $r6 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mUpdateAppPackageName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDataAppPackageName=\'");

        $r10 = r0.<com.android.server.timezone.PackageTracker: java.lang.String mDataAppPackageName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mCheckTimeAllowedMillis=");

        $i0 = r0.<com.android.server.timezone.PackageTracker: int mCheckTimeAllowedMillis>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDelayBeforeReliabilityCheckMillis=");

        $i1 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mFailedCheckRetryCount=");

        $l2 = r0.<com.android.server.timezone.PackageTracker: long mFailedCheckRetryCount>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mLastTriggerTimestamp=");

        $r20 = r0.<com.android.server.timezone.PackageTracker: java.lang.Long mLastTriggerTimestamp>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mCheckTriggered=");

        $z1 = r0.<com.android.server.timezone.PackageTracker: boolean mCheckTriggered>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mCheckFailureCount=");

        $i3 = r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r27 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r27;
    }

    public void triggerUpdateIfNeeded(boolean)
    {
        com.android.server.timezone.PackageTracker r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        com.android.server.timezone.PackageVersions r1, $r9, $r20;
        java.lang.String $r6, $r14, $r25;
        com.android.server.timezone.PackageTrackerIntentHelper $r7, $r15, $r16, $r17, $r18, $r26, $r27, $r28, $r29;
        com.android.server.timezone.PackageStatusStorage $r8, $r34;
        int $i1, $i3, $i4, $i7, $i13, $i17, $i21;
        long $l5, $l8, $l14, $l15, $l22;
        byte $b16;
        java.lang.Throwable $r30;
        com.android.server.timezone.PackageStatus r31;
        java.lang.StringBuilder r32, r33, r36;
        com.android.server.timezone.CheckToken r35;
        java.lang.IllegalStateException r37;

        r0 := @this: com.android.server.timezone.PackageTracker;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        $z3 = r0.<com.android.server.timezone.PackageTracker: boolean mTrackingEnabled>;

        if $z3 == 0 goto label32;

        z1 = specialinvoke r0.<com.android.server.timezone.PackageTracker: boolean validateUpdaterAppManifest()>();

        z2 = specialinvoke r0.<com.android.server.timezone.PackageTracker: boolean validateDataAppManifest()>();

     label02:
        if z1 == 0 goto label30;

        if z2 != 0 goto label03;

        goto label30;

     label03:
        if z0 != 0 goto label12;

     label04:
        $z5 = r0.<com.android.server.timezone.PackageTracker: boolean mCheckTriggered>;

        if $z5 != 0 goto label06;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: First reliability trigger.");

     label05:
        goto label12;

     label06:
        $z6 = specialinvoke r0.<com.android.server.timezone.PackageTracker: boolean isCheckInProgress()>();

        if $z6 == 0 goto label08;

        $z7 = specialinvoke r0.<com.android.server.timezone.PackageTracker: boolean isCheckResponseOverdue()>();

        if $z7 != 0 goto label12;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: checkComplete call is not yet overdue. Not triggering.");

        $r29 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i21 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l22 = (long) $i21;

        interfaceinvoke $r29.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l22);

     label07:
        exitmonitor r0;

        return;

     label08:
        $i13 = r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount>;

        $l15 = (long) $i13;

        $l14 = r0.<com.android.server.timezone.PackageTracker: long mFailedCheckRetryCount>;

        $b16 = $l15 cmp $l14;

        if $b16 <= 0 goto label10;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: number of allowed consecutive check failures exceeded. Stopping reliability triggers until next reboot or package update.");

        $r28 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r28.<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>();

     label09:
        exitmonitor r0;

        return;

     label10:
        $i17 = r0.<com.android.server.timezone.PackageTracker: int mCheckFailureCount>;

        if $i17 != 0 goto label12;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: No reliability check required. Last check was successful.");

        $r27 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r27.<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>();

     label11:
        exitmonitor r0;

        return;

     label12:
        r1 = specialinvoke r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageVersions lookupInstalledPackageVersions()>();

     label13:
        if r1 != null goto label16;

     label14:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: currentInstalledVersions was null");

        $r26 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r26.<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>();

     label15:
        exitmonitor r0;

        return;

     label16:
        $r8 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        r31 = virtualinvoke $r8.<com.android.server.timezone.PackageStatusStorage: com.android.server.timezone.PackageStatus getPackageStatus()>();

     label17:
        if r31 != null goto label20;

     label18:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: No package status data found. Data check needed.");

     label19:
        goto label24;

     label20:
        $r9 = r31.<com.android.server.timezone.PackageStatus: com.android.server.timezone.PackageVersions mVersions>;

        $z4 = virtualinvoke $r9.<com.android.server.timezone.PackageVersions: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label22;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("triggerUpdateIfNeeded: Stored package versions=");

        $r20 = r31.<com.android.server.timezone.PackageStatus: com.android.server.timezone.PackageVersions mVersions>;

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", do not match current package versions=");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Triggering check.");

        $r25 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r25);

     label21:
        goto label24;

     label22:
        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("triggerUpdateIfNeeded: Stored package versions match currently installed versions, currentInstalledVersions=");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", packageStatus.mCheckStatus=");

        $i1 = r31.<com.android.server.timezone.PackageStatus: int mCheckStatus>;

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r14);

        $i3 = r31.<com.android.server.timezone.PackageStatus: int mCheckStatus>;

        if $i3 != 2 goto label24;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: Prior check succeeded. No need to trigger.");

        $r18 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r18.<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>();

     label23:
        exitmonitor r0;

        return;

     label24:
        $r34 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageStatusStorage mPackageStatusStorage>;

        r35 = virtualinvoke $r34.<com.android.server.timezone.PackageStatusStorage: com.android.server.timezone.CheckToken generateCheckToken(com.android.server.timezone.PackageVersions)>(r1);

     label25:
        if r35 != null goto label28;

     label26:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("timezone.PackageTracker", "triggerUpdateIfNeeded: Unable to generate check token. Not sending check request.");

        $r17 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i7 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l8 = (long) $i7;

        interfaceinvoke $r17.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l8);

     label27:
        exitmonitor r0;

        return;

     label28:
        $r15 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r15.<com.android.server.timezone.PackageTrackerIntentHelper: void sendTriggerUpdateCheck(com.android.server.timezone.CheckToken)>(r35);

        r0.<com.android.server.timezone.PackageTracker: boolean mCheckTriggered> = 1;

        specialinvoke r0.<com.android.server.timezone.PackageTracker: void setCheckInProgress()>();

        $r16 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        $i4 = r0.<com.android.server.timezone.PackageTracker: int mDelayBeforeReliabilityCheckMillis>;

        $l5 = (long) $i4;

        interfaceinvoke $r16.<com.android.server.timezone.PackageTrackerIntentHelper: void scheduleReliabilityTrigger(long)>($l5);

     label29:
        exitmonitor r0;

        return;

     label30:
        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No update triggered due to invalid application manifest entries. updaterApp=");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dataApp=");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r6 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("timezone.PackageTracker", $r6);

        $r7 = r0.<com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTrackerIntentHelper mIntentHelper>;

        interfaceinvoke $r7.<com.android.server.timezone.PackageTrackerIntentHelper: void unscheduleReliabilityTrigger()>();

     label31:
        exitmonitor r0;

        return;

     label32:
        r37 = new java.lang.IllegalStateException;

        specialinvoke r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected call. Tracking is disabled.");

        throw r37;

     label33:
        $r30 := @caughtexception;

        exitmonitor r0;

        throw $r30;

        catch java.lang.Throwable from label01 to label02 with label33;
        catch java.lang.Throwable from label04 to label05 with label33;
        catch java.lang.Throwable from label06 to label07 with label33;
        catch java.lang.Throwable from label08 to label09 with label33;
        catch java.lang.Throwable from label10 to label11 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Throwable from label16 to label17 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label20 to label21 with label33;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.lang.Throwable from label32 to label33 with label33;
    }

    public static void <clinit>()
    {
        <com.android.server.timezone.PackageTracker: java.lang.String TAG> = "timezone.PackageTracker";

        return;
    }
}
