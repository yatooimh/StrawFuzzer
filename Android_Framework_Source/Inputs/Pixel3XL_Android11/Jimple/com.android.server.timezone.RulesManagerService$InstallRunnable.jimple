class com.android.server.timezone.RulesManagerService$InstallRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final android.app.timezone.ICallback mCallback;
    private final com.android.server.timezone.CheckToken mCheckToken;
    private final android.os.ParcelFileDescriptor mDistroParcelFileDescriptor;
    final com.android.server.timezone.RulesManagerService this$0;

    void <init>(com.android.server.timezone.RulesManagerService, android.os.ParcelFileDescriptor, com.android.server.timezone.CheckToken, android.app.timezone.ICallback)
    {
        com.android.server.timezone.RulesManagerService$InstallRunnable r0;
        com.android.server.timezone.RulesManagerService r1;
        android.os.ParcelFileDescriptor r2;
        com.android.server.timezone.CheckToken r3;
        android.app.timezone.ICallback r4;

        r0 := @this: com.android.server.timezone.RulesManagerService$InstallRunnable;

        r1 := @parameter0: com.android.server.timezone.RulesManagerService;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: com.android.server.timezone.CheckToken;

        r4 := @parameter3: android.app.timezone.ICallback;

        r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: android.os.ParcelFileDescriptor mDistroParcelFileDescriptor> = r2;

        r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.CheckToken mCheckToken> = r3;

        r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: android.app.timezone.ICallback mCallback> = r4;

        return;
    }

    private int mapInstallerResultToApiCode(int)
    {
        com.android.server.timezone.RulesManagerService$InstallRunnable r0;
        int i0;

        r0 := @this: com.android.server.timezone.RulesManagerService$InstallRunnable;

        i0 := @parameter0: int;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        return 1;

     label1:
        return 5;

     label2:
        return 4;

     label3:
        return 3;

     label4:
        return 2;

     label5:
        return 0;
    }

    private void sendInstallNotificationIntentIfRequired(int)
    {
        com.android.server.timezone.RulesManagerService$InstallRunnable r0;
        int i0;
        com.android.server.timezone.RulesManagerService $r1;
        com.android.server.timezone.RulesManagerIntentHelper $r2;

        r0 := @this: com.android.server.timezone.RulesManagerService$InstallRunnable;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r2 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.RulesManagerIntentHelper access$600(com.android.server.timezone.RulesManagerService)>($r1);

        interfaceinvoke $r2.<com.android.server.timezone.RulesManagerIntentHelper: void sendTimeZoneOperationStaged()>();

     label1:
        return;
    }

    public void run()
    {
        com.android.server.timezone.RulesManagerService$InstallRunnable r0;
        java.io.FileInputStream r1;
        com.android.server.timezone.CheckToken $r2, $r7, $r14, $r21, $r32;
        java.lang.String $r3, $r8, $r15;
        java.io.FileDescriptor $r4;
        com.android.server.timezone.RulesManagerService $r5, $r10, $r17, $r19, $r22, $r30, $r33;
        com.android.timezone.distro.installer.TimeZoneDistroInstaller $r6;
        android.app.timezone.ICallback $r9, $r16;
        java.lang.Throwable $r11, $r12, $r18;
        java.lang.Exception $r13;
        com.android.server.timezone.PackageTracker $r20, $r31;
        java.util.concurrent.atomic.AtomicBoolean $r23, $r34;
        boolean z2, z3;
        android.os.ParcelFileDescriptor r24;
        com.android.timezone.distro.TimeZoneDistro r25;
        int i1, i2;

        r0 := @this: com.android.server.timezone.RulesManagerService$InstallRunnable;

        $r2 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        $r3 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String access$100(java.lang.Object)>($r2);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneInstallStarted(java.lang.String)>($r3);

        z2 = 0;

        z3 = 0;

     label01:
        r24 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: android.os.ParcelFileDescriptor mDistroParcelFileDescriptor>;

     label02:
        r1 = new java.io.FileInputStream;

        $r4 = virtualinvoke r24.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r1.<java.io.FileInputStream: void <init>(java.io.FileDescriptor,boolean)>($r4, 0);

        r25 = new com.android.timezone.distro.TimeZoneDistro;

        specialinvoke r25.<com.android.timezone.distro.TimeZoneDistro: void <init>(java.io.InputStream)>(r1);

        $r5 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r6 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller access$200(com.android.server.timezone.RulesManagerService)>($r5);

        i1 = virtualinvoke $r6.<com.android.timezone.distro.installer.TimeZoneDistroInstaller: int stageInstallWithErrorCode(com.android.timezone.distro.TimeZoneDistro)>(r25);

        specialinvoke r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: void sendInstallNotificationIntentIfRequired(int)>(i1);

        i2 = specialinvoke r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: int mapInstallerResultToApiCode(int)>(i1);

        $r7 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        $r8 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String access$100(java.lang.Object)>($r7);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneInstallComplete(java.lang.String,int)>($r8, i2);

        $r10 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r9 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: android.app.timezone.ICallback mCallback>;

        staticinvoke <com.android.server.timezone.RulesManagerService: void access$300(com.android.server.timezone.RulesManagerService,android.app.timezone.ICallback,int)>($r10, $r9, i2);

     label03:
        z2 = 1;

        z3 = 1;

        if r24 == null goto label20;

        z3 = 1;

     label04:
        virtualinvoke r24.<android.os.ParcelFileDescriptor: void close()>();

     label05:
        z3 = 1;

        goto label20;

     label06:
        $r11 := @caughtexception;

        if r24 == null goto label11;

     label07:
        virtualinvoke r24.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        z2 = 0;

        z3 = 0;

     label10:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label11:
        z2 = 0;

        z3 = 0;

     label12:
        throw $r11;

     label13:
        $r18 := @caughtexception;

        goto label21;

     label14:
        $r13 := @caughtexception;

        z2 = z3;

     label15:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to install distro.", $r13);

     label16:
        z2 = z3;

     label17:
        $r14 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        $r15 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String access$100(java.lang.Object)>($r14);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneInstallComplete(java.lang.String,int)>($r15, 1);

     label18:
        z2 = z3;

     label19:
        $r17 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r16 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: android.app.timezone.ICallback mCallback>;

        staticinvoke <com.android.server.timezone.RulesManagerService: void access$300(com.android.server.timezone.RulesManagerService,android.app.timezone.ICallback,int)>($r17, $r16, 1);

     label20:
        $r30 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r31 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker access$400(com.android.server.timezone.RulesManagerService)>($r30);

        $r32 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        virtualinvoke $r31.<com.android.server.timezone.PackageTracker: void recordCheckResult(com.android.server.timezone.CheckToken,boolean)>($r32, z3);

        $r33 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r34 = staticinvoke <com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean access$500(com.android.server.timezone.RulesManagerService)>($r33);

        virtualinvoke $r34.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;

     label21:
        $r19 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r20 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker access$400(com.android.server.timezone.RulesManagerService)>($r19);

        $r21 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        virtualinvoke $r20.<com.android.server.timezone.PackageTracker: void recordCheckResult(com.android.server.timezone.CheckToken,boolean)>($r21, z2);

        $r22 = r0.<com.android.server.timezone.RulesManagerService$InstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r23 = staticinvoke <com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean access$500(com.android.server.timezone.RulesManagerService)>($r22);

        virtualinvoke $r23.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        throw $r18;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Exception from label04 to label05 with label14;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Exception from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label17 to label18 with label13;
        catch java.lang.Throwable from label19 to label20 with label13;
    }
}
