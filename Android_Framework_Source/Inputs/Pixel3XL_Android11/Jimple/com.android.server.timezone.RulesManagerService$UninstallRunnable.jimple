class com.android.server.timezone.RulesManagerService$UninstallRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final android.app.timezone.ICallback mCallback;
    private final com.android.server.timezone.CheckToken mCheckToken;
    final com.android.server.timezone.RulesManagerService this$0;

    void <init>(com.android.server.timezone.RulesManagerService, com.android.server.timezone.CheckToken, android.app.timezone.ICallback)
    {
        com.android.server.timezone.RulesManagerService$UninstallRunnable r0;
        com.android.server.timezone.RulesManagerService r1;
        com.android.server.timezone.CheckToken r2;
        android.app.timezone.ICallback r3;

        r0 := @this: com.android.server.timezone.RulesManagerService$UninstallRunnable;

        r1 := @parameter0: com.android.server.timezone.RulesManagerService;

        r2 := @parameter1: com.android.server.timezone.CheckToken;

        r3 := @parameter2: android.app.timezone.ICallback;

        r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.CheckToken mCheckToken> = r2;

        r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: android.app.timezone.ICallback mCallback> = r3;

        return;
    }

    private void sendUninstallNotificationIntentIfRequired(int)
    {
        com.android.server.timezone.RulesManagerService$UninstallRunnable r0;
        int i0;
        com.android.server.timezone.RulesManagerService $r1, $r3;
        com.android.server.timezone.RulesManagerIntentHelper $r2, $r4;

        r0 := @this: com.android.server.timezone.RulesManagerService$UninstallRunnable;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        goto label3;

     label1:
        $r3 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r4 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.RulesManagerIntentHelper access$600(com.android.server.timezone.RulesManagerService)>($r3);

        interfaceinvoke $r4.<com.android.server.timezone.RulesManagerIntentHelper: void sendTimeZoneOperationUnstaged()>();

        goto label3;

     label2:
        $r1 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r2 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.RulesManagerIntentHelper access$600(com.android.server.timezone.RulesManagerService)>($r1);

        interfaceinvoke $r2.<com.android.server.timezone.RulesManagerIntentHelper: void sendTimeZoneOperationStaged()>();

     label3:
        return;
    }

    public void run()
    {
        com.android.server.timezone.RulesManagerService$UninstallRunnable r0;
        com.android.server.timezone.CheckToken $r1, $r5, $r11, $r17, $r21;
        java.lang.String $r2, $r6, $r22;
        com.android.server.timezone.RulesManagerService $r3, $r8, $r9, $r12, $r15, $r18, $r24;
        com.android.timezone.distro.installer.TimeZoneDistroInstaller $r4;
        android.app.timezone.ICallback $r7, $r23;
        com.android.server.timezone.PackageTracker $r10, $r16;
        java.util.concurrent.atomic.AtomicBoolean $r13, $r19;
        java.lang.Throwable $r14;
        java.lang.Exception $r20;
        boolean z2, z3, z4;
        int i1;
        byte b2;

        r0 := @this: com.android.server.timezone.RulesManagerService$UninstallRunnable;

        $r1 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        $r2 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String access$100(java.lang.Object)>($r1);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneUninstallStarted(java.lang.String)>($r2);

        z2 = 0;

        z3 = 0;

     label01:
        $r3 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r4 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller access$200(com.android.server.timezone.RulesManagerService)>($r3);

        i1 = virtualinvoke $r4.<com.android.timezone.distro.installer.TimeZoneDistroInstaller: int stageUninstall()>();

     label02:
        z2 = 0;

        z3 = 0;

     label03:
        specialinvoke r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: void sendUninstallNotificationIntentIfRequired(int)>(i1);

     label04:
        if i1 == 0 goto label06;

        if i1 != 1 goto label05;

        goto label06;

     label05:
        z4 = 0;

        goto label07;

     label06:
        z4 = 1;

     label07:
        if z4 == 0 goto label08;

        b2 = 0;

        goto label09;

     label08:
        b2 = 1;

     label09:
        z2 = z4;

        z3 = z4;

     label10:
        $r5 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        $r6 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String access$100(java.lang.Object)>($r5);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneUninstallComplete(java.lang.String,int)>($r6, b2);

     label11:
        z2 = z4;

        z3 = z4;

     label12:
        $r8 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r7 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: android.app.timezone.ICallback mCallback>;

        staticinvoke <com.android.server.timezone.RulesManagerService: void access$300(com.android.server.timezone.RulesManagerService,android.app.timezone.ICallback,int)>($r8, $r7, b2);

     label13:
        z3 = z4;

        goto label21;

     label14:
        $r14 := @caughtexception;

        goto label22;

     label15:
        $r20 := @caughtexception;

        z2 = z3;

     label16:
        $r21 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        $r22 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String access$100(java.lang.Object)>($r21);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneUninstallComplete(java.lang.String,int)>($r22, 1);

     label17:
        z2 = z3;

     label18:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to uninstall distro.", $r20);

     label19:
        z2 = z3;

     label20:
        $r24 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r23 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: android.app.timezone.ICallback mCallback>;

        staticinvoke <com.android.server.timezone.RulesManagerService: void access$300(com.android.server.timezone.RulesManagerService,android.app.timezone.ICallback,int)>($r24, $r23, 1);

     label21:
        $r9 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r10 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker access$400(com.android.server.timezone.RulesManagerService)>($r9);

        $r11 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        virtualinvoke $r10.<com.android.server.timezone.PackageTracker: void recordCheckResult(com.android.server.timezone.CheckToken,boolean)>($r11, z3);

        $r12 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r13 = staticinvoke <com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean access$500(com.android.server.timezone.RulesManagerService)>($r12);

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;

     label22:
        $r15 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r16 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker access$400(com.android.server.timezone.RulesManagerService)>($r15);

        $r17 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.CheckToken mCheckToken>;

        virtualinvoke $r16.<com.android.server.timezone.PackageTracker: void recordCheckResult(com.android.server.timezone.CheckToken,boolean)>($r17, z2);

        $r18 = r0.<com.android.server.timezone.RulesManagerService$UninstallRunnable: com.android.server.timezone.RulesManagerService this$0>;

        $r19 = staticinvoke <com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean access$500(com.android.server.timezone.RulesManagerService)>($r18);

        virtualinvoke $r19.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        throw $r14;

        catch java.lang.Exception from label01 to label02 with label15;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label15;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Exception from label10 to label11 with label15;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Exception from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
        catch java.lang.Throwable from label20 to label21 with label14;
    }
}
