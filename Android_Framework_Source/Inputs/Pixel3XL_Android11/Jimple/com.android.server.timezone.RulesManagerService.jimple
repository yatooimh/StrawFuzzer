public final class com.android.server.timezone.RulesManagerService extends android.app.timezone.IRulesManager$Stub
{
    static final android.app.timezone.DistroFormatVersion DISTRO_FORMAT_VERSION_SUPPORTED;
    static final java.lang.String REQUIRED_QUERY_PERMISSION;
    static final java.lang.String REQUIRED_UPDATER_PERMISSION;
    private static final java.lang.String TAG;
    private final java.util.concurrent.Executor mExecutor;
    private final com.android.timezone.distro.installer.TimeZoneDistroInstaller mInstaller;
    private final com.android.server.timezone.RulesManagerIntentHelper mIntentHelper;
    private final java.util.concurrent.atomic.AtomicBoolean mOperationInProgress;
    private final com.android.server.timezone.PackageTracker mPackageTracker;
    private final com.android.server.timezone.PermissionHelper mPermissionHelper;

    static void <clinit>()
    {
        android.app.timezone.DistroFormatVersion $r0;
        int $i0, $i1;

        <com.android.server.timezone.RulesManagerService: java.lang.String TAG> = "timezone.RulesManagerService";

        <com.android.server.timezone.RulesManagerService: java.lang.String REQUIRED_UPDATER_PERMISSION> = "android.permission.UPDATE_TIME_ZONE_RULES";

        <com.android.server.timezone.RulesManagerService: java.lang.String REQUIRED_QUERY_PERMISSION> = "android.permission.QUERY_TIME_ZONE_RULES";

        $r0 = new android.app.timezone.DistroFormatVersion;

        $i0 = staticinvoke <libcore.timezone.TzDataSetVersion: int currentFormatMajorVersion()>();

        $i1 = staticinvoke <libcore.timezone.TzDataSetVersion: int currentFormatMinorVersion()>();

        specialinvoke $r0.<android.app.timezone.DistroFormatVersion: void <init>(int,int)>($i0, $i1);

        <com.android.server.timezone.RulesManagerService: android.app.timezone.DistroFormatVersion DISTRO_FORMAT_VERSION_SUPPORTED> = $r0;

        return;
    }

    void <init>(com.android.server.timezone.PermissionHelper, java.util.concurrent.Executor, com.android.server.timezone.RulesManagerIntentHelper, com.android.server.timezone.PackageTracker, com.android.timezone.distro.installer.TimeZoneDistroInstaller)
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.server.timezone.PermissionHelper r1;
        java.util.concurrent.Executor r2;
        com.android.server.timezone.RulesManagerIntentHelper r3;
        com.android.server.timezone.PackageTracker r4;
        com.android.timezone.distro.installer.TimeZoneDistroInstaller r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        r1 := @parameter0: com.android.server.timezone.PermissionHelper;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: com.android.server.timezone.RulesManagerIntentHelper;

        r4 := @parameter3: com.android.server.timezone.PackageTracker;

        r5 := @parameter4: com.android.timezone.distro.installer.TimeZoneDistroInstaller;

        specialinvoke r0.<android.app.timezone.IRulesManager$Stub: void <init>()>();

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress> = $r6;

        r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PermissionHelper mPermissionHelper> = r1;

        r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.Executor mExecutor> = r2;

        r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.RulesManagerIntentHelper mIntentHelper> = r3;

        r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker mPackageTracker> = r4;

        r0.<com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller mInstaller> = r5;

        return;
    }

    static com.android.server.timezone.RulesManagerService access$000(android.content.Context)
    {
        android.content.Context r0;
        com.android.server.timezone.RulesManagerService $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.RulesManagerService create(android.content.Context)>(r0);

        return $r1;
    }

    static java.lang.String access$100(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String toStringOrNull(java.lang.Object)>(r0);

        return $r1;
    }

    static com.android.timezone.distro.installer.TimeZoneDistroInstaller access$200(com.android.server.timezone.RulesManagerService)
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.timezone.distro.installer.TimeZoneDistroInstaller $r1;

        r0 := @parameter0: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller mInstaller>;

        return $r1;
    }

    static void access$300(com.android.server.timezone.RulesManagerService, android.app.timezone.ICallback, int)
    {
        com.android.server.timezone.RulesManagerService r0;
        android.app.timezone.ICallback r1;
        int i0;

        r0 := @parameter0: com.android.server.timezone.RulesManagerService;

        r1 := @parameter1: android.app.timezone.ICallback;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.timezone.RulesManagerService: void sendFinishedStatus(android.app.timezone.ICallback,int)>(r1, i0);

        return;
    }

    static com.android.server.timezone.PackageTracker access$400(com.android.server.timezone.RulesManagerService)
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.server.timezone.PackageTracker $r1;

        r0 := @parameter0: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker mPackageTracker>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$500(com.android.server.timezone.RulesManagerService)
    {
        com.android.server.timezone.RulesManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        return $r1;
    }

    static com.android.server.timezone.RulesManagerIntentHelper access$600(com.android.server.timezone.RulesManagerService)
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.server.timezone.RulesManagerIntentHelper $r1;

        r0 := @parameter0: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.RulesManagerIntentHelper mIntentHelper>;

        return $r1;
    }

    private static com.android.server.timezone.RulesManagerService create(android.content.Context)
    {
        android.content.Context r0;
        com.android.server.timezone.RulesManagerServiceHelperImpl $r4;
        java.io.File $r5, $r7;
        java.lang.String $r6, $r8;
        com.android.server.timezone.RulesManagerService $r9;
        com.android.server.timezone.PackageTracker $r10;
        com.android.timezone.distro.installer.TimeZoneDistroInstaller $r11;

        r0 := @parameter0: android.content.Context;

        $r4 = new com.android.server.timezone.RulesManagerServiceHelperImpl;

        specialinvoke $r4.<com.android.server.timezone.RulesManagerServiceHelperImpl: void <init>(android.content.Context)>(r0);

        $r5 = new java.io.File;

        $r6 = staticinvoke <libcore.timezone.TimeZoneDataFiles: java.lang.String getTimeZoneModuleTzVersionFile()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        $r7 = new java.io.File;

        $r8 = staticinvoke <libcore.timezone.TimeZoneDataFiles: java.lang.String getDataTimeZoneRootDir()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        $r9 = new com.android.server.timezone.RulesManagerService;

        $r10 = staticinvoke <com.android.server.timezone.PackageTracker: com.android.server.timezone.PackageTracker create(android.content.Context)>(r0);

        $r11 = new com.android.timezone.distro.installer.TimeZoneDistroInstaller;

        specialinvoke $r11.<com.android.timezone.distro.installer.TimeZoneDistroInstaller: void <init>(java.lang.String,java.io.File,java.io.File)>("timezone.RulesManagerService", $r5, $r7);

        specialinvoke $r9.<com.android.server.timezone.RulesManagerService: void <init>(com.android.server.timezone.PermissionHelper,java.util.concurrent.Executor,com.android.server.timezone.RulesManagerIntentHelper,com.android.server.timezone.PackageTracker,com.android.timezone.distro.installer.TimeZoneDistroInstaller)>($r4, $r4, $r4, $r10, $r11);

        return $r9;
    }

    private static com.android.server.timezone.CheckToken createCheckTokenOrThrow(byte[])
    {
        byte[] r0;
        java.lang.Throwable $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        java.lang.IllegalArgumentException $r7;
        com.android.server.timezone.CheckToken r9;

        r0 := @parameter0: byte[];

     label1:
        r9 = staticinvoke <com.android.server.timezone.CheckToken: com.android.server.timezone.CheckToken fromByteArray(byte[])>(r0);

     label2:
        return r9;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read token bytes ");

        $r5 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r2);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.lang.String distroStatusToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return "Unknown";

     label1:
        return "Installed";

     label2:
        return "None";
    }

    private android.app.timezone.RulesState getRulesStateInternal()
    {
        com.android.server.timezone.RulesManagerService r0;
        libcore.timezone.TzDataSetVersion r1;
        boolean z0, $z1;
        com.android.timezone.distro.installer.TimeZoneDistroInstaller $r2, $r3, $r7;
        android.app.timezone.DistroRulesVersion $r4, $r8, r14, r16, r18;
        int $i0, $i1;
        java.lang.String $r5, $r9, $r23;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        java.lang.Throwable $r10, $r11, $r12, $r13;
        byte b2, b3, b4, b5;
        com.android.timezone.distro.DistroVersion r15, r20;
        com.android.timezone.distro.StagedDistroOperation r19;
        android.app.timezone.RulesState r22;
        android.app.timezone.DistroFormatVersion $r24;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        entermonitor r0;

     label01:
        $r2 = r0.<com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller mInstaller>;

        r1 = virtualinvoke $r2.<com.android.timezone.distro.installer.TimeZoneDistroInstaller: libcore.timezone.TzDataSetVersion readBaseVersion()>();

     label02:
        b2 = 0;

        r14 = null;

     label03:
        $r3 = r0.<com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller mInstaller>;

        r15 = virtualinvoke $r3.<com.android.timezone.distro.installer.TimeZoneDistroInstaller: com.android.timezone.distro.DistroVersion getInstalledDistroVersion()>();

     label04:
        if r15 != null goto label05;

        b3 = 1;

        r16 = null;

        goto label08;

     label05:
        b2 = 2;

     label06:
        $r4 = new android.app.timezone.DistroRulesVersion;

        $r5 = r15.<com.android.timezone.distro.DistroVersion: java.lang.String rulesVersion>;

        $i0 = r15.<com.android.timezone.distro.DistroVersion: int revision>;

        specialinvoke $r4.<android.app.timezone.DistroRulesVersion: void <init>(java.lang.String,int)>($r5, $i0);

        r16 = $r4;

     label07:
        b3 = 2;

     label08:
        b4 = b3;

        r14 = r16;

        goto label12;

     label09:
        $r13 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to read installed distro.", $r13);

     label11:
        b4 = b2;

     label12:
        $r6 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

     label13:
        b5 = 0;

        r18 = null;

        if z0 != 0 goto label28;

        b5 = 0;

     label14:
        $r7 = r0.<com.android.server.timezone.RulesManagerService: com.android.timezone.distro.installer.TimeZoneDistroInstaller mInstaller>;

        r19 = virtualinvoke $r7.<com.android.timezone.distro.installer.TimeZoneDistroInstaller: com.android.timezone.distro.StagedDistroOperation getStagedDistroOperation()>();

     label15:
        if r19 != null goto label16;

        b5 = 1;

        r18 = null;

        goto label24;

     label16:
        b5 = 0;

     label17:
        $z1 = r19.<com.android.timezone.distro.StagedDistroOperation: boolean isUninstall>;

        if $z1 == 0 goto label19;

     label18:
        b5 = 2;

        r18 = null;

        goto label24;

     label19:
        b5 = 3;

     label20:
        r20 = r19.<com.android.timezone.distro.StagedDistroOperation: com.android.timezone.distro.DistroVersion distroVersion>;

     label21:
        b5 = 3;

     label22:
        $r8 = new android.app.timezone.DistroRulesVersion;

        $r9 = r20.<com.android.timezone.distro.DistroVersion: java.lang.String rulesVersion>;

        $i1 = r20.<com.android.timezone.distro.DistroVersion: int revision>;

        specialinvoke $r8.<android.app.timezone.DistroRulesVersion: void <init>(java.lang.String,int)>($r9, $i1);

        r18 = $r8;

     label23:
        b5 = 3;

     label24:
        goto label28;

     label25:
        $r10 := @caughtexception;

     label26:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to read staged distro.", $r10);

     label27:
        r18 = null;

     label28:
        r22 = new android.app.timezone.RulesState;

        $r23 = virtualinvoke r1.<libcore.timezone.TzDataSetVersion: java.lang.String getRulesVersion()>();

        $r24 = <com.android.server.timezone.RulesManagerService: android.app.timezone.DistroFormatVersion DISTRO_FORMAT_VERSION_SUPPORTED>;

        specialinvoke r22.<android.app.timezone.RulesState: void <init>(java.lang.String,android.app.timezone.DistroFormatVersion,boolean,int,android.app.timezone.DistroRulesVersion,int,android.app.timezone.DistroRulesVersion)>($r23, $r24, z0, b5, r18, b4, r14);

        exitmonitor r0;

     label29:
        return r22;

     label30:
        $r11 := @caughtexception;

        goto label34;

     label31:
        $r12 := @caughtexception;

     label32:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to read base rules version", $r12);

        exitmonitor r0;

     label33:
        return null;

     label34:
        exitmonitor r0;

     label35:
        throw $r11;

        catch java.io.IOException from label01 to label02 with label31;
        catch java.lang.Throwable from label01 to label02 with label30;
        catch com.android.timezone.distro.DistroException from label03 to label04 with label09;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch com.android.timezone.distro.DistroException from label06 to label07 with label09;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label30;
        catch java.lang.Throwable from label10 to label11 with label30;
        catch java.lang.Throwable from label12 to label13 with label30;
        catch com.android.timezone.distro.DistroException from label14 to label15 with label25;
        catch java.io.IOException from label14 to label15 with label25;
        catch java.lang.Throwable from label14 to label15 with label30;
        catch com.android.timezone.distro.DistroException from label17 to label18 with label25;
        catch java.io.IOException from label17 to label18 with label25;
        catch java.lang.Throwable from label17 to label18 with label30;
        catch com.android.timezone.distro.DistroException from label20 to label21 with label25;
        catch java.io.IOException from label20 to label21 with label25;
        catch java.lang.Throwable from label20 to label21 with label30;
        catch com.android.timezone.distro.DistroException from label22 to label23 with label25;
        catch java.io.IOException from label22 to label23 with label25;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label26 to label27 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label32 to label33 with label30;
        catch java.lang.Throwable from label34 to label35 with label30;
    }

    private void sendFinishedStatus(android.app.timezone.ICallback, int)
    {
        com.android.server.timezone.RulesManagerService r0;
        int i0;
        android.os.RemoteException $r1;
        android.app.timezone.ICallback r2;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        r2 := @parameter0: android.app.timezone.ICallback;

        i0 := @parameter1: int;

     label1:
        interfaceinvoke r2.<android.app.timezone.ICallback: void onFinished(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Unable to notify observer of result", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static java.lang.String stagedOperationToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        return "Unknown";

     label1:
        return "Install";

     label2:
        return "Uninstall";

     label3:
        return "None";
    }

    private static java.lang.String toStringOrNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        r1 = null;

        goto label2;

     label1:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return r1;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.timezone.RulesManagerService r0;
        java.io.PrintWriter r1;
        android.app.timezone.RulesState r2;
        int i0, $i2, $i3, $i4, i5;
        char c1;
        com.android.server.timezone.PermissionHelper $r3;
        boolean $z0, $z1, $z2;
        java.lang.String $r14, $r15, $r16, $r17, $r25, $r29, $r33, $r37, $r40, $r44, $r48, $r50, $r54, r59, r61, r64, r66, r68, $r72, r73, $r77, $r80, $r81, $r84, $r86, $r88, $r89, $r92, $r93;
        java.lang.StringBuilder $r22, $r26, $r30, $r34, $r38, $r51, $r70, $r75, $r78, $r82, $r90;
        libcore.timezone.ZoneInfoDb $r43, $r85;
        libcore.timezone.TimeZoneFinder $r47, $r87;
        java.io.FileDescriptor r55;
        java.lang.String[] r56;
        char[] r57;
        android.app.timezone.DistroRulesVersion r69, r74;
        com.android.server.timezone.PackageTracker $r94;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        r55 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r56 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PermissionHelper mPermissionHelper>;

        $z0 = interfaceinvoke $r3.<com.android.server.timezone.PermissionHelper: boolean checkDumpPermission(java.lang.String,java.io.PrintWriter)>("timezone.RulesManagerService", r1);

        if $z0 != 0 goto label01;

        return;

     label01:
        r2 = specialinvoke r0.<com.android.server.timezone.RulesManagerService: android.app.timezone.RulesState getRulesStateInternal()>();

        if r56 == null goto label21;

        $i2 = lengthof r56;

        if $i2 != 2 goto label21;

        i5 = 0;

        $r15 = "-format_state";

        $r14 = r56[0];

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 == 0 goto label21;

        $r16 = r56[1];

        if $r16 == null goto label21;

        $r17 = r56[1];

        r57 = virtualinvoke $r17.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof r57;

     label02:
        if i5 >= i0 goto label20;

        c1 = r57[i5];

        if c1 == 105 goto label16;

        if c1 == 116 goto label13;

        if c1 == 111 goto label11;

        if c1 == 112 goto label09;

        tableswitch(c1)
        {
            case 97: goto label08;
            case 98: goto label06;
            case 99: goto label04;
            default: goto label03;
        };

     label03:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown option: ");

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r54);

        goto label19;

     label04:
        r59 = "Unknown";

        if r2 == null goto label05;

        $i4 = virtualinvoke r2.<android.app.timezone.RulesState: int getDistroStatus()>();

        r59 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String distroStatusToString(int)>($i4);

     label05:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current install state: ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        goto label19;

     label06:
        r61 = "Unknown";

        if r2 == null goto label07;

        r61 = virtualinvoke r2.<android.app.timezone.RulesState: java.lang.String getBaseRulesVersion()>();

     label07:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base rules version: ");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        goto label19;

     label08:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active rules version (ICU, ZoneInfoDb, TimeZoneFinder): ");

        $r40 = staticinvoke <android.icu.util.TimeZone: java.lang.String getTZDataVersion()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r43 = staticinvoke <libcore.timezone.ZoneInfoDb: libcore.timezone.ZoneInfoDb getInstance()>();

        $r44 = virtualinvoke $r43.<libcore.timezone.ZoneInfoDb: java.lang.String getVersion()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r47 = staticinvoke <libcore.timezone.TimeZoneFinder: libcore.timezone.TimeZoneFinder getInstance()>();

        $r48 = virtualinvoke $r47.<libcore.timezone.TimeZoneFinder: java.lang.String getIanaVersion()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        goto label19;

     label09:
        r64 = "Unknown";

        if r2 == null goto label10;

        $z2 = virtualinvoke r2.<android.app.timezone.RulesState: boolean isOperationInProgress()>();

        r64 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z2);

     label10:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation in progress: ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        goto label19;

     label11:
        r66 = "Unknown";

        if r2 == null goto label12;

        $i3 = virtualinvoke r2.<android.app.timezone.RulesState: int getStagedOperationType()>();

        r66 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String stagedOperationToString(int)>($i3);

     label12:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Staged operation: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        goto label19;

     label13:
        r68 = "Unknown";

        if r2 == null goto label15;

        r69 = virtualinvoke r2.<android.app.timezone.RulesState: android.app.timezone.DistroRulesVersion getStagedDistroRulesVersion()>();

        if r69 != null goto label14;

        r68 = "<None>";

        goto label15;

     label14:
        r68 = virtualinvoke r69.<android.app.timezone.DistroRulesVersion: java.lang.String toDumpString()>();

     label15:
        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Staged rules version: ");

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68);

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        goto label19;

     label16:
        r73 = "Unknown";

        if r2 == null goto label18;

        r74 = virtualinvoke r2.<android.app.timezone.RulesState: android.app.timezone.DistroRulesVersion getInstalledDistroRulesVersion()>();

        if r74 != null goto label17;

        r73 = "<None>";

        goto label18;

     label17:
        r73 = virtualinvoke r74.<android.app.timezone.DistroRulesVersion: java.lang.String toDumpString()>();

     label18:
        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installed rules version: ");

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r73);

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r77);

     label19:
        i5 = i5 + 1;

        goto label02;

     label20:
        return;

     label21:
        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RulesManagerService state: ");

        $r80 = virtualinvoke r0.<com.android.server.timezone.RulesManagerService: java.lang.String toString()>();

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r81 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r81);

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active rules version (ICU, ZoneInfoDB, TimeZoneFinder): ");

        $r84 = staticinvoke <android.icu.util.TimeZone: java.lang.String getTZDataVersion()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r85 = staticinvoke <libcore.timezone.ZoneInfoDb: libcore.timezone.ZoneInfoDb getInstance()>();

        $r86 = virtualinvoke $r85.<libcore.timezone.ZoneInfoDb: java.lang.String getVersion()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r87 = staticinvoke <libcore.timezone.TimeZoneFinder: libcore.timezone.TimeZoneFinder getInstance()>();

        $r88 = virtualinvoke $r87.<libcore.timezone.TimeZoneFinder: java.lang.String getIanaVersion()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r89 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r89);

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Distro state: ");

        $r92 = virtualinvoke r2.<android.app.timezone.RulesState: java.lang.String toString()>();

        virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r93 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r93);

        $r94 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker mPackageTracker>;

        virtualinvoke $r94.<com.android.server.timezone.PackageTracker: void dump(java.io.PrintWriter)>(r1);

        return;
    }

    public android.app.timezone.RulesState getRulesState()
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.server.timezone.PermissionHelper $r1;
        android.app.timezone.RulesState $r2;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PermissionHelper mPermissionHelper>;

        interfaceinvoke $r1.<com.android.server.timezone.PermissionHelper: void enforceCallerHasPermission(java.lang.String)>("android.permission.QUERY_TIME_ZONE_RULES");

        $r2 = specialinvoke r0.<com.android.server.timezone.RulesManagerService: android.app.timezone.RulesState getRulesStateInternal()>();

        return $r2;
    }

    void notifyIdle()
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.server.timezone.PackageTracker $r1;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker mPackageTracker>;

        virtualinvoke $r1.<com.android.server.timezone.PackageTracker: void triggerUpdateIfNeeded(boolean)>(0);

        return;
    }

    public int requestInstall(android.os.ParcelFileDescriptor, byte[], android.app.timezone.ICallback)
    {
        com.android.server.timezone.RulesManagerService r0;
        android.app.timezone.ICallback r1;
        com.android.server.timezone.RulesManagerService$InstallRunnable r2;
        com.android.server.timezone.PermissionHelper $r3;
        java.lang.String $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5, $r6;
        boolean $z2, z3;
        java.lang.Throwable $r7, $r8, $r9, $r10;
        android.os.ParcelFileDescriptor r12;
        byte[] r13;
        com.android.server.timezone.CheckToken r14;
        java.util.concurrent.Executor r16;
        java.lang.NullPointerException r18, r19;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        r12 := @parameter0: android.os.ParcelFileDescriptor;

        r13 := @parameter1: byte[];

        r1 := @parameter2: android.app.timezone.ICallback;

        z3 = 1;

     label01:
        $r3 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PermissionHelper mPermissionHelper>;

        interfaceinvoke $r3.<com.android.server.timezone.PermissionHelper: void enforceCallerHasPermission(java.lang.String)>("android.permission.UPDATE_TIME_ZONE_RULES");

     label02:
        r14 = null;

        if r13 == null goto label04;

        z3 = 1;

     label03:
        r14 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.CheckToken createCheckTokenOrThrow(byte[])>(r13);

     label04:
        z3 = 1;

     label05:
        $r4 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String toStringOrNull(java.lang.Object)>(r14);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneRequestInstall(java.lang.String)>($r4);

     label06:
        z3 = 1;

     label07:
        entermonitor r0;

     label08:
        if r12 == null goto label37;

        if r1 == null goto label31;

        z3 = 1;

     label09:
        $r5 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        $z2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 == 0 goto label17;

     label10:
        z3 = 1;

     label11:
        exitmonitor r0;

     label12:
        if r12 == null goto label16;

     label13:
        virtualinvoke r12.<android.os.ParcelFileDescriptor: void close()>();

     label14:
        goto label16;

     label15:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to close distroParcelFileDescriptor", $r8);

     label16:
        return 1;

     label17:
        z3 = 1;

     label18:
        $r6 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label19:
        z3 = 1;

     label20:
        r16 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.Executor mExecutor>;

     label21:
        z3 = 1;

     label22:
        r2 = new com.android.server.timezone.RulesManagerService$InstallRunnable;

     label23:
        z3 = 1;

     label24:
        specialinvoke r2.<com.android.server.timezone.RulesManagerService$InstallRunnable: void <init>(com.android.server.timezone.RulesManagerService,android.os.ParcelFileDescriptor,com.android.server.timezone.CheckToken,android.app.timezone.ICallback)>(r0, r12, r14, r1);

     label25:
        z3 = 1;

     label26:
        interfaceinvoke r16.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r2);

     label27:
        z3 = 0;

     label28:
        exitmonitor r0;

     label29:
        if r12 == null goto label30;

        goto label30;

     label30:
        return 0;

     label31:
        z3 = 1;

     label32:
        r18 = new java.lang.NullPointerException;

     label33:
        z3 = 1;

     label34:
        specialinvoke r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("observer == null");

     label35:
        z3 = 1;

     label36:
        throw r18;

     label37:
        z3 = 1;

     label38:
        r19 = new java.lang.NullPointerException;

     label39:
        z3 = 1;

     label40:
        specialinvoke r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("distroParcelFileDescriptor == null");

     label41:
        z3 = 1;

     label42:
        throw r19;

     label43:
        $r7 := @caughtexception;

     label44:
        exitmonitor r0;

     label45:
        throw $r7;

     label46:
        $r9 := @caughtexception;

        if r12 == null goto label50;

        if z3 == 0 goto label50;

     label47:
        virtualinvoke r12.<android.os.ParcelFileDescriptor: void close()>();

     label48:
        goto label50;

     label49:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("timezone.RulesManagerService", "Failed to close distroParcelFileDescriptor", $r10);

     label50:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label46;
        catch java.lang.Throwable from label03 to label04 with label46;
        catch java.lang.Throwable from label05 to label06 with label46;
        catch java.lang.Throwable from label07 to label08 with label46;
        catch java.lang.Throwable from label09 to label10 with label43;
        catch java.lang.Throwable from label11 to label12 with label43;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label43;
        catch java.lang.Throwable from label20 to label21 with label43;
        catch java.lang.Throwable from label22 to label23 with label43;
        catch java.lang.Throwable from label24 to label25 with label43;
        catch java.lang.Throwable from label26 to label27 with label43;
        catch java.lang.Throwable from label28 to label29 with label43;
        catch java.lang.Throwable from label32 to label33 with label43;
        catch java.lang.Throwable from label34 to label35 with label43;
        catch java.lang.Throwable from label36 to label37 with label43;
        catch java.lang.Throwable from label38 to label39 with label43;
        catch java.lang.Throwable from label40 to label41 with label43;
        catch java.lang.Throwable from label42 to label43 with label43;
        catch java.lang.Throwable from label44 to label45 with label43;
        catch java.lang.Throwable from label45 to label46 with label46;
        catch java.io.IOException from label47 to label48 with label49;
    }

    public void requestNothing(byte[], boolean)
    {
        com.android.server.timezone.RulesManagerService r0;
        byte[] r1;
        boolean z0;
        com.android.server.timezone.PermissionHelper $r2;
        java.lang.String $r3, $r5;
        com.android.server.timezone.PackageTracker $r4;
        com.android.server.timezone.CheckToken r6;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PermissionHelper mPermissionHelper>;

        interfaceinvoke $r2.<com.android.server.timezone.PermissionHelper: void enforceCallerHasPermission(java.lang.String)>("android.permission.UPDATE_TIME_ZONE_RULES");

        r6 = null;

        if r1 == null goto label1;

        r6 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.CheckToken createCheckTokenOrThrow(byte[])>(r1);

     label1:
        $r3 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String toStringOrNull(java.lang.Object)>(r6);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneRequestNothing(java.lang.String)>($r3);

        $r4 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker mPackageTracker>;

        virtualinvoke $r4.<com.android.server.timezone.PackageTracker: void recordCheckResult(com.android.server.timezone.CheckToken,boolean)>(r6, z0);

        $r5 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String toStringOrNull(java.lang.Object)>(r6);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneNothingComplete(java.lang.String)>($r5);

        return;
    }

    public int requestUninstall(byte[], android.app.timezone.ICallback)
    {
        com.android.server.timezone.RulesManagerService r0;
        android.app.timezone.ICallback r1;
        java.util.concurrent.Executor r2;
        com.android.server.timezone.PermissionHelper $r3;
        java.lang.String $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        byte[] r8;
        com.android.server.timezone.CheckToken r9;
        com.android.server.timezone.RulesManagerService$UninstallRunnable r10;
        java.lang.NullPointerException r12;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        r8 := @parameter0: byte[];

        r1 := @parameter1: android.app.timezone.ICallback;

        $r3 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PermissionHelper mPermissionHelper>;

        interfaceinvoke $r3.<com.android.server.timezone.PermissionHelper: void enforceCallerHasPermission(java.lang.String)>("android.permission.UPDATE_TIME_ZONE_RULES");

        r9 = null;

        if r8 == null goto label1;

        r9 = staticinvoke <com.android.server.timezone.RulesManagerService: com.android.server.timezone.CheckToken createCheckTokenOrThrow(byte[])>(r8);

     label1:
        $r4 = staticinvoke <com.android.server.timezone.RulesManagerService: java.lang.String toStringOrNull(java.lang.Object)>(r9);

        staticinvoke <com.android.server.EventLogTags: void writeTimezoneRequestUninstall(java.lang.String)>($r4);

        entermonitor r0;

        if r1 == null goto label7;

     label2:
        $r5 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label4;

        exitmonitor r0;

     label3:
        return 1;

     label4:
        $r6 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        r2 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.Executor mExecutor>;

        r10 = new com.android.server.timezone.RulesManagerService$UninstallRunnable;

        specialinvoke r10.<com.android.server.timezone.RulesManagerService$UninstallRunnable: void <init>(com.android.server.timezone.RulesManagerService,com.android.server.timezone.CheckToken,android.app.timezone.ICallback)>(r0, r9, r1);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r10);

        exitmonitor r0;

     label5:
        return 0;

     label6:
        $r7 := @caughtexception;

        goto label8;

     label7:
        r12 = new java.lang.NullPointerException;

        specialinvoke r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("callback == null");

        throw r12;

     label8:
        exitmonitor r0;

     label9:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label6;
    }

    public void start()
    {
        com.android.server.timezone.RulesManagerService r0;
        com.android.server.timezone.PackageTracker $r1;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        $r1 = r0.<com.android.server.timezone.RulesManagerService: com.android.server.timezone.PackageTracker mPackageTracker>;

        virtualinvoke $r1.<com.android.server.timezone.PackageTracker: boolean start()>();

        return;
    }

    public java.lang.String toString()
    {
        com.android.server.timezone.RulesManagerService r0;
        java.lang.StringBuilder $r2;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.timezone.RulesManagerService;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RulesManagerService{mOperationInProgress=");

        $r4 = r0.<com.android.server.timezone.RulesManagerService: java.util.concurrent.atomic.AtomicBoolean mOperationInProgress>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
