class com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl extends android.media.tv.ITvInputHardware$Stub
{
    private android.media.tv.TvStreamConfig mActiveConfig;
    private final android.media.AudioManager$OnAudioPortUpdateListener mAudioListener;
    private android.media.AudioPatch mAudioPatch;
    private java.util.List mAudioSink;
    private android.media.AudioDevicePort mAudioSource;
    private float mCommittedVolume;
    private int mDesiredChannelMask;
    private int mDesiredFormat;
    private int mDesiredSamplingRate;
    private final java.lang.Object mImplLock;
    private final android.media.tv.TvInputHardwareInfo mInfo;
    private java.lang.String mOverrideAudioAddress;
    private int mOverrideAudioType;
    private boolean mReleased;
    private float mSourceVolume;
    final com.android.server.tv.TvInputHardwareManager this$0;

    public void <init>(com.android.server.tv.TvInputHardwareManager, android.media.tv.TvInputHardwareInfo)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        com.android.server.tv.TvInputHardwareManager r1;
        android.media.tv.TvInputHardwareInfo r2, $r8, $r9, $r10;
        java.lang.Object $r3;
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl$1 $r4;
        java.util.ArrayList $r5;
        android.media.AudioManager $r6;
        android.media.AudioManager$OnAudioPortUpdateListener $r7;
        int $i0, $i1;
        java.lang.String $r11;
        android.media.AudioDevicePort $r12;
        java.util.List $r13;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: com.android.server.tv.TvInputHardwareManager;

        r2 := @parameter1: android.media.tv.TvInputHardwareInfo;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0> = r1;

        specialinvoke r0.<android.media.tv.ITvInputHardware$Stub: void <init>()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock> = $r3;

        $r4 = new com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl$1;

        specialinvoke $r4.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl$1: void <init>(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)>(r0);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioManager$OnAudioPortUpdateListener mAudioListener> = $r4;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType> = 0;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.String mOverrideAudioAddress> = "";

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink> = $r5;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = null;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mCommittedVolume> = -1.0F;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mSourceVolume> = 0.0F;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = null;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate> = 0;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask> = 1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat> = 1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo> = r2;

        $r6 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>(r1);

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioManager$OnAudioPortUpdateListener mAudioListener>;

        virtualinvoke $r6.<android.media.AudioManager: void registerAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)>($r7);

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r8.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        if $i0 == 0 goto label1;

        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r9.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        $r10 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $r11 = virtualinvoke $r10.<android.media.tv.TvInputHardwareInfo: java.lang.String getAudioAddress()>();

        $r12 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioDevicePort(int,java.lang.String)>($i1, $r11);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource> = $r12;

        $r13 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void findAudioSinkFromAudioPolicy(java.util.List)>($r13);

     label1:
        return;
    }

    static java.lang.Object access$1100(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        return $r1;
    }

    static void access$1200(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        return;
    }

    static android.media.AudioDevicePort access$1302(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.AudioDevicePort)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioDevicePort r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.AudioDevicePort;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource> = r1;

        return r1;
    }

    static java.util.List access$1400(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        return $r1;
    }

    static android.media.AudioPatch access$1500(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioPatch $r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        return $r1;
    }

    static android.media.AudioPatch access$1502(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.AudioPatch)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioPatch r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.AudioPatch;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = r1;

        return r1;
    }

    static void access$3000(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void handleAudioSinkUpdated()>();

        return;
    }

    static boolean access$700(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.view.Surface, android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.view.Surface r1;
        android.media.tv.TvStreamConfig r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: android.media.tv.TvStreamConfig;

        $z0 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean startCapture(android.view.Surface,android.media.tv.TvStreamConfig)>(r1, r2);

        return $z0;
    }

    static boolean access$800(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.tv.TvStreamConfig r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.tv.TvStreamConfig;

        $z0 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean stopCapture(android.media.tv.TvStreamConfig)>(r1);

        return $z0;
    }

    private android.media.AudioDevicePort findAudioDevicePort(int, java.lang.String)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r7;
        android.media.AudioDevicePort r2;
        java.util.ArrayList $r3;
        com.android.server.tv.TvInputHardwareManager $r4;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.util.Iterator r9;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r4);

        $i1 = staticinvoke <android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)>($r3);

        if $i1 == 0 goto label2;

        return null;

     label2:
        r9 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.AudioDevicePort) $r6;

        $i2 = virtualinvoke r2.<android.media.AudioDevicePort: int type()>();

        if $i2 != i0 goto label4;

        $r7 = virtualinvoke r2.<android.media.AudioDevicePort: java.lang.String address()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        return r2;

     label4:
        goto label3;

     label5:
        return null;
    }

    private void findAudioSinkFromAudioPolicy(java.util.List)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.util.List r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        com.android.server.tv.TvInputHardwareManager $r4, $r6;
        android.media.AudioManager $r7;
        boolean $z0;
        java.lang.Object $r8;
        android.media.AudioDevicePort r10;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: java.util.List;

        interfaceinvoke r1.<java.util.List: void clear()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r4);

        $i1 = staticinvoke <android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)>($r3);

        if $i1 == 0 goto label1;

        return;

     label1:
        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r7 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r6);

        i0 = virtualinvoke $r7.<android.media.AudioManager: int getDevicesForStream(int)>(3);

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.media.AudioDevicePort) $r8;

        $i2 = virtualinvoke r10.<android.media.AudioDevicePort: int type()>();

        $i3 = $i2 & i0;

        if $i3 == 0 goto label3;

        $i4 = virtualinvoke r10.<android.media.AudioDevicePort: int type()>();

        $i5 = $i4 & -2147483648;

        if $i5 != 0 goto label3;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r10);

     label3:
        goto label2;

     label4:
        return;
    }

    private void handleAudioSinkUpdated()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean startCapture(android.view.Surface, android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.tv.TvStreamConfig r1;
        java.lang.Object r2;
        boolean z0, z1;
        int $i0, $i1, $i2;
        com.android.server.tv.TvInputHardwareManager $r3;
        com.android.server.tv.TvInputHal $r4;
        android.media.tv.TvInputHardwareInfo $r5;
        java.lang.Throwable $r6;
        android.view.Surface r7;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r7 := @parameter0: android.view.Surface;

        r1 := @parameter1: android.media.tv.TvStreamConfig;

        r2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r2;

     label01:
        z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

     label02:
        z1 = 0;

        if z0 == 0 goto label05;

     label03:
        exitmonitor r2;

     label04:
        return 0;

     label05:
        if r7 == null goto label12;

        if r1 != null goto label06;

        goto label12;

     label06:
        $i0 = virtualinvoke r1.<android.media.tv.TvStreamConfig: int getType()>();

        if $i0 == 2 goto label08;

        exitmonitor r2;

     label07:
        return 0;

     label08:
        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r4 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1700(com.android.server.tv.TvInputHardwareManager)>($r3);

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r5.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        $i2 = virtualinvoke $r4.<com.android.server.tv.TvInputHal: int addOrUpdateStream(int,android.view.Surface,android.media.tv.TvStreamConfig)>($i1, r7, r1);

        if $i2 != 0 goto label10;

     label09:
        z1 = 1;

     label10:
        exitmonitor r2;

     label11:
        return z1;

     label12:
        exitmonitor r2;

     label13:
        return 0;

     label14:
        $r6 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private boolean stopCapture(android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object r1;
        boolean z0, z1;
        com.android.server.tv.TvInputHardwareManager $r2;
        com.android.server.tv.TvInputHal $r3;
        android.media.tv.TvInputHardwareInfo $r4;
        int $i0, $i1;
        java.lang.Throwable $r5;
        android.media.tv.TvStreamConfig r6;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r6 := @parameter0: android.media.tv.TvStreamConfig;

        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r1;

     label01:
        z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

     label02:
        z1 = 0;

        if z0 == 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        if r6 != null goto label08;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r3 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1700(com.android.server.tv.TvInputHardwareManager)>($r2);

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r4.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        $i1 = virtualinvoke $r3.<com.android.server.tv.TvInputHal: int removeStream(int,android.media.tv.TvStreamConfig)>($i0, r6);

        if $i1 != 0 goto label10;

     label09:
        z1 = 1;

     label10:
        exitmonitor r1;

     label11:
        return z1;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void updateAudioConfigLocked()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9;
        float f0, $f1, $f2, $f3, $f4, $f5;
        android.media.AudioPatch[] r2;
        java.util.Iterator r3;
        android.media.AudioDevicePort r4, $r5, $r12, $r15, $r17, $r19, $r21, $r29, $r32, $r38, $r44, $r55;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45;
        com.android.server.tv.TvInputHardwareManager $r6, $r10, $r11, $r23, $r28, $r30;
        android.media.AudioPatch $r7, $r22, $r27, $r31, $r47, $r58;
        java.util.List $r8, $r48;
        android.media.tv.TvStreamConfig $r9;
        android.media.AudioGain[] $r13, r42;
        java.lang.Object $r14, $r34;
        int[] $r16, $r18, $r20, $r33, $r35, $r36, $r37, $r40, $r51, $r52, r56;
        android.media.AudioPortConfig[] $r24, $r26, r57;
        java.lang.Object[] $r25;
        byte $b14, $b19;
        java.lang.String $r39;
        double $d0, $d1;
        android.media.AudioGainConfig r41;
        android.media.AudioGain r43;
        android.media.AudioPortConfig r45, r49, r50, r53, r54;
        java.util.ArrayList $r46;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        z0 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean updateAudioSinkLocked()>();

        z1 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean updateAudioSourceLocked()>();

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        if $r5 == null goto label34;

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        $z2 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label34;

        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if $r9 != null goto label01;

        goto label34;

     label01:
        $r10 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: void access$1800(com.android.server.tv.TvInputHardwareManager)>($r10);

        $f1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mSourceVolume>;

        $r11 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $f2 = staticinvoke <com.android.server.tv.TvInputHardwareManager: float access$1900(com.android.server.tv.TvInputHardwareManager)>($r11);

        f0 = $f1 * $f2;

        r41 = null;

        $r12 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r13 = virtualinvoke $r12.<android.media.AudioDevicePort: android.media.AudioGain[] gains()>();

        $i2 = lengthof $r13;

        if $i2 <= 0 goto label08;

        r41 = null;

        $f3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mCommittedVolume>;

        $b14 = f0 cmpl $f3;

        if $b14 == 0 goto label08;

        $r38 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        r42 = virtualinvoke $r38.<android.media.AudioDevicePort: android.media.AudioGain[] gains()>();

        i26 = lengthof r42;

        i27 = 0;

     label02:
        r43 = null;

        if i27 >= i26 goto label04;

        r43 = r42[i27];

        $i24 = virtualinvoke r43.<android.media.AudioGain: int mode()>();

        $i25 = $i24 & 1;

        if $i25 == 0 goto label03;

        goto label04;

     label03:
        i27 = i27 + 1;

        goto label02;

     label04:
        if r43 == null goto label07;

        $i15 = virtualinvoke r43.<android.media.AudioGain: int maxValue()>();

        $i16 = virtualinvoke r43.<android.media.AudioGain: int minValue()>();

        $i17 = $i15 - $i16;

        $i18 = virtualinvoke r43.<android.media.AudioGain: int stepValue()>();

        i28 = $i17 / $i18;

        i29 = virtualinvoke r43.<android.media.AudioGain: int minValue()>();

        $b19 = f0 cmpg 1.0F;

        if $b19 >= 0 goto label05;

        $i21 = virtualinvoke r43.<android.media.AudioGain: int stepValue()>();

        $f4 = (float) i28;

        $f5 = $f4 * f0;

        $d0 = (double) $f5;

        $d1 = $d0 + 0.5;

        $i22 = (int) $d1;

        $i23 = $i21 * $i22;

        i30 = i29 + $i23;

        goto label06;

     label05:
        i30 = virtualinvoke r43.<android.media.AudioGain: int maxValue()>();

     label06:
        $i20 = virtualinvoke r43.<android.media.AudioGain: int channelMask()>();

        $r40 = newarray (int)[1];

        $r40[0] = i30;

        r41 = virtualinvoke r43.<android.media.AudioGain: android.media.AudioGainConfig buildConfig(int,int,int[],int)>(1, $i20, $r40, 0);

        goto label08;

     label07:
        $r39 = staticinvoke <com.android.server.tv.TvInputHardwareManager: java.lang.String access$900()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r39, "No audio source gain with MODE_JOINT support exists.");

        r41 = null;

     label08:
        $r44 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        r45 = virtualinvoke $r44.<android.media.AudioDevicePort: android.media.AudioPortConfig activeConfig()>();

        $r46 = new java.util.ArrayList;

        specialinvoke $r46.<java.util.ArrayList: void <init>()>();

        r2 = newarray (android.media.AudioPatch)[1];

        $r47 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        r2[0] = $r47;

        if z1 != 0 goto label10;

        if z0 == 0 goto label09;

        goto label10;

     label09:
        z6 = 0;

        goto label11;

     label10:
        z6 = 1;

     label11:
        $r48 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        r3 = interfaceinvoke $r48.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label21;

        $r34 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.AudioDevicePort) $r34;

        r49 = virtualinvoke r4.<android.media.AudioDevicePort: android.media.AudioPortConfig activeConfig()>();

        i31 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate>;

        i0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask>;

        i1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat>;

        i32 = i0;

        i33 = i1;

        i34 = i31;

        if r49 == null goto label15;

        i35 = i31;

        if i31 != 0 goto label13;

        i35 = virtualinvoke r49.<android.media.AudioPortConfig: int samplingRate()>();

     label13:
        i36 = i0;

        if i0 != 1 goto label14;

        i36 = virtualinvoke r49.<android.media.AudioPortConfig: int channelMask()>();

     label14:
        i32 = i36;

        i33 = i1;

        i34 = i35;

        if i1 != 1 goto label15;

        i33 = virtualinvoke r49.<android.media.AudioPortConfig: int format()>();

        i34 = i35;

        i32 = i36;

     label15:
        if r49 == null goto label16;

        $i11 = virtualinvoke r49.<android.media.AudioPortConfig: int samplingRate()>();

        if $i11 != i34 goto label16;

        $i12 = virtualinvoke r49.<android.media.AudioPortConfig: int channelMask()>();

        if $i12 != i32 goto label16;

        r50 = r49;

        $i13 = virtualinvoke r49.<android.media.AudioPortConfig: int format()>();

        if $i13 == i33 goto label20;

     label16:
        i37 = i34;

        $r51 = virtualinvoke r4.<android.media.AudioDevicePort: int[] samplingRates()>();

        $z8 = staticinvoke <com.android.server.tv.TvInputHardwareManager: boolean access$2000(int[],int)>($r51, i34);

        if $z8 != 0 goto label17;

        i37 = i34;

        $r36 = virtualinvoke r4.<android.media.AudioDevicePort: int[] samplingRates()>();

        $i10 = lengthof $r36;

        if $i10 <= 0 goto label17;

        $r37 = virtualinvoke r4.<android.media.AudioDevicePort: int[] samplingRates()>();

        i37 = $r37[0];

     label17:
        i38 = i32;

        $r52 = virtualinvoke r4.<android.media.AudioDevicePort: int[] channelMasks()>();

        $z9 = staticinvoke <com.android.server.tv.TvInputHardwareManager: boolean access$2000(int[],int)>($r52, i32);

        if $z9 != 0 goto label18;

        i38 = 1;

     label18:
        i39 = i33;

        $r35 = virtualinvoke r4.<android.media.AudioDevicePort: int[] formats()>();

        $z5 = staticinvoke <com.android.server.tv.TvInputHardwareManager: boolean access$2000(int[],int)>($r35, i33);

        if $z5 != 0 goto label19;

        i39 = 1;

     label19:
        r50 = virtualinvoke r4.<android.media.AudioDevicePort: android.media.AudioDevicePortConfig buildConfig(int,int,int,android.media.AudioGainConfig)>(i37, i38, i39, null);

        z6 = 1;

     label20:
        interfaceinvoke $r46.<java.util.List: boolean add(java.lang.Object)>(r50);

        goto label12;

     label21:
        $r14 = interfaceinvoke $r46.<java.util.List: java.lang.Object get(int)>(0);

        r53 = (android.media.AudioPortConfig) $r14;

        if r45 == null goto label23;

        if r41 == null goto label22;

        goto label23;

     label22:
        r54 = r45;

        goto label31;

     label23:
        i40 = 0;

        $r15 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r16 = virtualinvoke $r15.<android.media.AudioDevicePort: int[] samplingRates()>();

        $i3 = virtualinvoke r53.<android.media.AudioPortConfig: int samplingRate()>();

        $z3 = staticinvoke <com.android.server.tv.TvInputHardwareManager: boolean access$2000(int[],int)>($r16, $i3);

        if $z3 == 0 goto label24;

        i40 = virtualinvoke r53.<android.media.AudioPortConfig: int samplingRate()>();

        goto label25;

     label24:
        $r17 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r18 = virtualinvoke $r17.<android.media.AudioDevicePort: int[] samplingRates()>();

        $i4 = lengthof $r18;

        if $i4 <= 0 goto label25;

        $r32 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r33 = virtualinvoke $r32.<android.media.AudioDevicePort: int[] samplingRates()>();

        i40 = $r33[0];

     label25:
        $r55 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        r56 = virtualinvoke $r55.<android.media.AudioDevicePort: int[] channelMasks()>();

        i41 = lengthof r56;

        i42 = 0;

     label26:
        if i42 >= i41 goto label28;

        i43 = r56[i42];

        $i7 = virtualinvoke r53.<android.media.AudioPortConfig: int channelMask()>();

        $i8 = staticinvoke <android.media.AudioFormat: int channelCountFromOutChannelMask(int)>($i7);

        $i9 = staticinvoke <android.media.AudioFormat: int channelCountFromInChannelMask(int)>(i43);

        if $i8 != $i9 goto label27;

        i44 = i43;

        goto label29;

     label27:
        i42 = i42 + 1;

        goto label26;

     label28:
        i44 = 1;

     label29:
        i45 = 1;

        $r19 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r20 = virtualinvoke $r19.<android.media.AudioDevicePort: int[] formats()>();

        $i5 = virtualinvoke r53.<android.media.AudioPortConfig: int format()>();

        $z4 = staticinvoke <com.android.server.tv.TvInputHardwareManager: boolean access$2000(int[],int)>($r20, $i5);

        if $z4 == 0 goto label30;

        i45 = virtualinvoke r53.<android.media.AudioPortConfig: int format()>();

     label30:
        $r21 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        r54 = virtualinvoke $r21.<android.media.AudioDevicePort: android.media.AudioDevicePortConfig buildConfig(int,int,int,android.media.AudioGainConfig)>(i40, i44, i45, r41);

        z6 = 1;

     label31:
        if z6 == 0 goto label33;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mCommittedVolume> = f0;

        $r22 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        if $r22 == null goto label32;

        $r30 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r30);

        $r31 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        staticinvoke <android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)>($r31);

     label32:
        $r23 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r23);

        $i6 = interfaceinvoke $r46.<java.util.List: int size()>();

        $r24 = newarray (android.media.AudioPortConfig)[$i6];

        $r25 = interfaceinvoke $r46.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24);

        r57 = (android.media.AudioPortConfig[]) $r25;

        $r26 = newarray (android.media.AudioPortConfig)[1];

        $r26[0] = r54;

        staticinvoke <android.media.AudioManager: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])>(r2, $r26, r57);

        $r27 = r2[0];

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = $r27;

        if r41 == null goto label33;

        $r28 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r28);

        $r29 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        staticinvoke <android.media.AudioManager: int setAudioPortGain(android.media.AudioPort,android.media.AudioGainConfig)>($r29, r41);

     label33:
        return;

     label34:
        $r58 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        if $r58 == null goto label35;

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r6);

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        staticinvoke <android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)>($r7);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = null;

     label35:
        return;
    }

    private boolean updateAudioSinkLocked()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.util.List r1, $r5, $r6, $r9;
        int i0, $i1, $i2, $i3;
        android.media.tv.TvInputHardwareInfo $r2;
        java.util.ArrayList $r3;
        java.lang.String $r4;
        boolean $z1, $z2;
        android.media.AudioDevicePort r8;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r2.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        if $i1 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink> = $r3;

        i0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType>;

        if i0 != 0 goto label2;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void findAudioSinkFromAudioPolicy(java.util.List)>($r3);

        goto label3;

     label2:
        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.String mOverrideAudioAddress>;

        r8 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioDevicePort(int,java.lang.String)>(i0, $r4);

        if r8 == null goto label3;

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r8);

     label3:
        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        $i2 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 == $i3 goto label4;

        return 1;

     label4:
        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.util.List mAudioSink>;

        interfaceinvoke r1.<java.util.List: boolean removeAll(java.util.Collection)>($r5);

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        $z2 = $z1 ^ 1;

        return $z2;
    }

    private boolean updateAudioSourceLocked()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        int i0, $i1;
        android.media.AudioDevicePort r1, r2;
        android.media.tv.TvInputHardwareInfo $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0, z1;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        i0 = virtualinvoke $r3.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        z1 = 0;

        if i0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r4.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $r6 = virtualinvoke $r5.<android.media.tv.TvInputHardwareInfo: java.lang.String getAudioAddress()>();

        r2 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioDevicePort(int,java.lang.String)>($i1, $r6);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource> = r2;

        if r2 != null goto label2;

        if r1 == null goto label3;

        z1 = 1;

        goto label3;

     label2:
        $z0 = virtualinvoke r2.<android.media.AudioDevicePort: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        z1 = 1;

     label3:
        return z1;
    }

    public void onMediaStreamVolumeChanged()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void overrideAudioSink(int, java.lang.String, int, int, int)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        int i0, i1, i2, i3;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType> = i0;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.String mOverrideAudioAddress> = r3;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate> = i1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask> = i2;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat> = i3;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void release()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object r1;
        com.android.server.tv.TvInputHardwareManager $r3, $r7;
        android.media.AudioManager $r4;
        android.media.AudioManager$OnAudioPortUpdateListener $r5;
        android.media.AudioPatch $r6, $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r4 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r3);

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioManager$OnAudioPortUpdateListener mAudioListener>;

        virtualinvoke $r4.<android.media.AudioManager: void unregisterAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)>($r5);

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        if $r6 == null goto label2;

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1600(com.android.server.tv.TvInputHardwareManager)>($r7);

        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        staticinvoke <android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)>($r9);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = null;

     label2:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased> = 1;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setStreamVolume(float) throws android.os.RemoteException
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        float f0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException r3;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        f0 := @parameter0: float;

        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 != 0 goto label3;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mSourceVolume> = f0;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        r3 = new java.lang.IllegalStateException;

        specialinvoke r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Device already released.");

        throw r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean setSurface(android.view.Surface, android.media.tv.TvStreamConfig) throws android.os.RemoteException
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.tv.TvStreamConfig r1, $r3, $r7, $r11, $r12, $r16;
        java.lang.Object r2;
        boolean $z0, $z1, z2;
        com.android.server.tv.TvInputHardwareManager $r4, $r8, $r13;
        com.android.server.tv.TvInputHal $r5, $r9, $r14;
        android.media.tv.TvInputHardwareInfo $r6, $r10, $r15;
        int $i0, $i1, $i2, i4, i5, i6, i7;
        java.lang.Throwable $r17;
        android.view.Surface r18;
        java.lang.IllegalStateException r19;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r18 := @parameter0: android.view.Surface;

        r1 := @parameter1: android.media.tv.TvStreamConfig;

        r2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        entermonitor r2;

     label01:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 != 0 goto label27;

     label02:
        z2 = 1;

        if r18 != null goto label07;

     label03:
        $r12 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if $r12 == null goto label05;

        $r13 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r14 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1700(com.android.server.tv.TvInputHardwareManager)>($r13);

        $r15 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i2 = virtualinvoke $r15.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        $r16 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        i4 = virtualinvoke $r14.<com.android.server.tv.TvInputHal: int removeStream(int,android.media.tv.TvStreamConfig)>($i2, $r16);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = null;

     label04:
        goto label22;

     label05:
        exitmonitor r2;

     label06:
        return 1;

     label07:
        if r1 != null goto label10;

     label08:
        exitmonitor r2;

     label09:
        return 0;

     label10:
        i5 = 0;

     label11:
        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if $r3 == null goto label17;

     label12:
        i5 = 0;

     label13:
        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        $z1 = virtualinvoke r1.<android.media.tv.TvStreamConfig: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label17;

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r9 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1700(com.android.server.tv.TvInputHardwareManager)>($r8);

        $r10 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r10.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        $r11 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        i6 = virtualinvoke $r9.<com.android.server.tv.TvInputHal: int removeStream(int,android.media.tv.TvStreamConfig)>($i1, $r11);

     label14:
        i5 = i6;

        if i6 == 0 goto label17;

     label15:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = null;

     label16:
        i5 = i6;

     label17:
        i4 = i5;

        if i5 != 0 goto label22;

     label18:
        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r5 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1700(com.android.server.tv.TvInputHardwareManager)>($r4);

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r6.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        i7 = virtualinvoke $r5.<com.android.server.tv.TvInputHal: int addOrUpdateStream(int,android.view.Surface,android.media.tv.TvStreamConfig)>($i0, r18, r1);

     label19:
        i4 = i7;

        if i7 != 0 goto label22;

     label20:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = r1;

     label21:
        i4 = i7;

     label22:
        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

     label23:
        if i4 != 0 goto label24;

        goto label25;

     label24:
        z2 = 0;

     label25:
        exitmonitor r2;

     label26:
        return z2;

     label27:
        r19 = new java.lang.IllegalStateException;

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Device already released.");

        throw r19;

     label28:
        $r17 := @caughtexception;

     label29:
        exitmonitor r2;

     label30:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label27 to label28 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }
}
