public class com.android.server.usage.AppIdleHistory extends java.lang.Object
{
    static final java.lang.String APP_IDLE_FILENAME;
    private static final java.lang.String ATTR_BUCKETING_REASON;
    private static final java.lang.String ATTR_BUCKET_ACTIVE_TIMEOUT_TIME;
    private static final java.lang.String ATTR_BUCKET_WORKING_SET_TIMEOUT_TIME;
    private static final java.lang.String ATTR_CURRENT_BUCKET;
    private static final java.lang.String ATTR_ELAPSED_IDLE;
    private static final java.lang.String ATTR_LAST_PREDICTED_TIME;
    private static final java.lang.String ATTR_LAST_RESTRICTION_ATTEMPT_ELAPSED;
    private static final java.lang.String ATTR_LAST_RESTRICTION_ATTEMPT_REASON;
    private static final java.lang.String ATTR_LAST_RUN_JOB_TIME;
    private static final java.lang.String ATTR_LAST_USED_BY_USER_ELAPSED;
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_SCREEN_IDLE;
    private static final boolean DEBUG;
    static final int IDLE_BUCKET_CUTOFF;
    private static final long ONE_MINUTE;
    private static final int STANDBY_BUCKET_UNKNOWN;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_PACKAGE;
    private static final java.lang.String TAG_PACKAGES;
    private long mElapsedDuration;
    private long mElapsedSnapshot;
    private android.util.SparseArray mIdleHistory;
    private boolean mScreenOn;
    private long mScreenOnDuration;
    private long mScreenOnSnapshot;
    private final java.io.File mStorageDir;

    void <init>(java.io.File, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.io.File r1;
        long l0;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory> = $r2;

        r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot> = l0;

        r0.<com.android.server.usage.AppIdleHistory: long mScreenOnSnapshot> = l0;

        r0.<com.android.server.usage.AppIdleHistory: java.io.File mStorageDir> = r1;

        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void readScreenOnTime()>();

        return;
    }

    private void dumpUser(com.android.internal.util.IndentingPrintWriter, int, java.util.List)
    {
        com.android.server.usage.AppIdleHistory r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int i0, i4, $i7, $i8, $i27, i28;
        java.util.List r2;
        android.util.ArrayMap r3;
        long l1, l2, l3, $l5, $l6, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l25, $l26;
        android.util.SparseArray $r5;
        java.lang.Object $r6, $r8, $r9;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r10, $r14, $r18, $r25, $r29;
        java.lang.String $r13, $r17, $r22, $r24, $r28, $r31, $r33, r34, r41;
        byte $b24;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r35;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("User ");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" App Standby States:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r5 = r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (android.util.ArrayMap) $r6;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

        l3 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getScreenOnTime(long)>(l1);

        if r3 != null goto label1;

        return;

     label1:
        i4 = virtualinvoke r3.<android.util.ArrayMap: int size()>();

        i28 = 0;

     label2:
        if i28 >= i4 goto label8;

        $r8 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i28);

        r34 = (java.lang.String) $r8;

        $r9 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i28);

        r35 = (com.android.server.usage.AppIdleHistory$AppUsageHistory) $r9;

        $z0 = staticinvoke <com.android.internal.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r2);

        if $z0 != 0 goto label3;

        $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r34);

        if $z2 != 0 goto label3;

        goto label7;

     label3:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bucket=");

        $i7 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reason=");

        $i8 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $r22 = staticinvoke <android.app.usage.UsageStatsManager: java.lang.String reasonToString(int)>($i8);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r24);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" used=");

        $l9 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime>;

        $l10 = l2 - $l9;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l10, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" usedByUser=");

        $l11 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime>;

        $l12 = l2 - $l11;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l12, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" usedScr=");

        $l13 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedScreenTime>;

        $l14 = l3 - $l13;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l14, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" lastPred=");

        $l15 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime>;

        $l16 = l2 - $l15;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l16, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" activeLeft=");

        $l17 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime>;

        $l18 = $l17 - l2;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l18, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" wsLeft=");

        $l19 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime>;

        $l20 = $l19 - l2;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l20, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" lastJob=");

        $l21 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime>;

        $l22 = l2 - $l21;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l22, r1);

        $l23 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime>;

        $b24 = $l23 cmp 0L;

        if $b24 <= 0 goto label4;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" lastRestrictAttempt=");

        $l25 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime>;

        $l26 = l2 - $l25;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l26, r1);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastRestrictReason=");

        $i27 = r35.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastRestrictReason>;

        $r31 = staticinvoke <android.app.usage.UsageStatsManager: java.lang.String reasonToString(int)>($i27);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r33);

     label4:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" idle=");

        $z1 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: boolean isIdle(java.lang.String,int,long)>(r34, i0, l1);

        if $z1 == 0 goto label5;

        r41 = "y";

        goto label6;

     label5:
        r41 = "n";

     label6:
        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r28);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label7:
        i28 = i28 + 1;

        goto label2;

     label8:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("totalElapsedTime=");

        $l5 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l5, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("totalScreenOnTime=");

        $l6 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getScreenOnTime(long)>(l1);

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l6, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    private long getLongValue(org.xmlpull.v1.XmlPullParser, java.lang.String, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1, r3;
        long l0, $l1;
        org.xmlpull.v1.XmlPullParser r2;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r2 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r1);

        if r3 != null goto label1;

        return l0;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r3);

        return $l1;
    }

    private com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap, java.lang.String, long, boolean)
    {
        com.android.server.usage.AppIdleHistory r0;
        android.util.ArrayMap r1;
        java.lang.String r2;
        long l0, $l1, $l2, $l3;
        boolean z0;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3, $r5, r7;
        java.lang.Object $r4;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: android.util.ArrayMap;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.usage.AppIdleHistory$AppUsageHistory) $r4;

        r7 = r3;

        if r3 != null goto label1;

        r7 = r3;

        if z0 == 0 goto label1;

        $r5 = new com.android.server.usage.AppIdleHistory$AppUsageHistory;

        specialinvoke $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: void <init>()>();

        r7 = $r5;

        $l1 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l0);

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime> = $l1;

        $l2 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getScreenOnTime(long)>(l0);

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedScreenTime> = $l2;

        $l3 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(0L);

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime> = $l3;

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket> = 50;

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason> = 256;

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastInformedBucket> = -1;

        $r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime> = -9223372036854775808L;

        virtualinvoke r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label1:
        return r7;
    }

    private android.util.ArrayMap getUserHistory(int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0;
        android.util.ArrayMap r1, $r4, r6;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.ArrayMap) $r3;

        r6 = r1;

        if r1 != null goto label1;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r6 = $r4;

        $r5 = r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void readAppIdleTimes(int,android.util.ArrayMap)>(i0, $r4);

     label1:
        return r6;
    }

    private void logAppStandbyBucketChanged(java.lang.String, int, int, int)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i4 = i2 & 65280;

        $i3 = i2 & 255;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,java.lang.String,int,int,int,int)>(258, r1, i0, i1, $i4, $i3);

        return;
    }

    private void readAppIdleTimes(int, android.util.ArrayMap)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0, $i9, $i10, i11, i12, i13;
        boolean z0, $z1;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r1;
        java.io.File $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r11, r24, r25, r26, r28;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l14;
        java.lang.Throwable $r10, $r12, $r13, $r14, $r15, $r16, r30, r31;
        android.util.ArrayMap r17;
        java.io.FileInputStream r18, r19, r21;
        android.util.AtomicFile r20;
        org.xmlpull.v1.XmlPullParser r22;
        java.lang.StringBuilder r23, r32;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i0 := @parameter0: int;

        r17 := @parameter1: android.util.ArrayMap;

        r18 = null;

        r19 = null;

     label01:
        r20 = new android.util.AtomicFile;

     label02:
        r18 = null;

        r19 = null;

     label03:
        $r2 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: java.io.File getUserFile(int)>(i0);

        specialinvoke r20.<android.util.AtomicFile: void <init>(java.io.File)>($r2);

     label04:
        r18 = null;

        r19 = null;

     label05:
        r21 = virtualinvoke r20.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label06:
        r18 = r21;

        r19 = r21;

     label07:
        r22 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label08:
        r18 = r21;

        r19 = r21;

     label09:
        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r21, $r4);

     label10:
        r18 = r21;

        r19 = r21;

     label11:
        i11 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: int next()>();

     label12:
        if i11 == 2 goto label13;

        if i11 == 1 goto label13;

        goto label10;

     label13:
        if i11 == 2 goto label24;

        r18 = r21;

        r19 = r21;

     label14:
        r23 = new java.lang.StringBuilder;

     label15:
        r18 = r21;

        r19 = r21;

     label16:
        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

     label17:
        r18 = r21;

        r19 = r21;

     label18:
        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read app idle file for user ");

     label19:
        r18 = r21;

        r19 = r21;

     label20:
        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label21:
        r18 = r21;

        r19 = r21;

     label22:
        $r9 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppIdleHistory", $r9);

     label23:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r21);

        return;

     label24:
        r18 = r21;

        r19 = r21;

     label25:
        $r5 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("packages");

     label26:
        if z0 != 0 goto label27;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r21);

        return;

     label27:
        r18 = r21;

        r19 = r21;

     label28:
        i12 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: int next()>();

     label29:
        if i12 == 1 goto label84;

        if i12 != 2 goto label83;

        r18 = r21;

        r19 = r21;

     label30:
        $r6 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("package");

        if $z1 == 0 goto label82;

     label31:
        r18 = r21;

        r19 = r21;

     label32:
        r24 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label33:
        r18 = r21;

        r19 = r21;

     label34:
        r1 = new com.android.server.usage.AppIdleHistory$AppUsageHistory;

     label35:
        r18 = r21;

        r19 = r21;

     label36:
        specialinvoke r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: void <init>()>();

     label37:
        r18 = r21;

        r19 = r21;

     label38:
        $r7 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "elapsedIdleTime");

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r7);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime> = $l1;

     label39:
        r18 = r21;

        r19 = r21;

     label40:
        $l2 = r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime>;

        $l3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: long getLongValue(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r22, "lastUsedByUserElapsedTime", $l2);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime> = $l3;

     label41:
        r18 = r21;

        r19 = r21;

     label42:
        $r8 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "screenIdleTime");

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedScreenTime> = $l4;

     label43:
        r18 = r21;

        r19 = r21;

     label44:
        $l5 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: long getLongValue(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r22, "lastPredictedTime", 0L);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime> = $l5;

     label45:
        r18 = r21;

        r19 = r21;

     label46:
        r25 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "appLimitBucket");

     label47:
        if r25 != null goto label48;

        i13 = 10;

        goto label50;

     label48:
        r18 = r21;

        r19 = r21;

     label49:
        i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r25);

     label50:
        r18 = r21;

        r19 = r21;

     label51:
        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket> = i13;

     label52:
        r18 = r21;

        r19 = r21;

     label53:
        r26 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "bucketReason");

     label54:
        r18 = r21;

        r19 = r21;

     label55:
        $l6 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: long getLongValue(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r22, "lastJobRunTime", -9223372036854775808L);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime> = $l6;

     label56:
        r18 = r21;

        r19 = r21;

     label57:
        $l7 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: long getLongValue(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r22, "activeTimeoutTime", 0L);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime> = $l7;

     label58:
        r18 = r21;

        r19 = r21;

     label59:
        $l8 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: long getLongValue(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r22, "workingSetTimeoutTime", 0L);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime> = $l8;

     label60:
        r18 = r21;

        r19 = r21;

     label61:
        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason> = 256;

     label62:
        if r26 == null goto label67;

        r18 = r21;

        r19 = r21;

     label63:
        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r26, 16);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason> = $i10;

     label64:
        goto label67;

     label65:
        $r16 := @caughtexception;

        r18 = r21;

        r19 = r21;

     label66:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIdleHistory", "Unable to read bucketing reason", $r16);

     label67:
        r18 = r21;

        r19 = r21;

     label68:
        $l14 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: long getLongValue(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r22, "lastRestrictionAttemptElapsedTime", 0L);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime> = $l14;

     label69:
        r18 = r21;

        r19 = r21;

     label70:
        r28 = interfaceinvoke r22.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lastRestrictionAttemptReason");

     label71:
        if r28 == null goto label76;

        r18 = r21;

        r19 = r21;

     label72:
        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r28, 16);

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastRestrictReason> = $i9;

     label73:
        goto label76;

     label74:
        $r15 := @caughtexception;

        r18 = r21;

        r19 = r21;

     label75:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIdleHistory", "Unable to read last restrict reason", $r15);

     label76:
        r18 = r21;

        r19 = r21;

     label77:
        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastInformedBucket> = -1;

     label78:
        r18 = r21;

     label79:
        virtualinvoke r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, r1);

     label80:
        goto label82;

     label81:
        $r10 := @caughtexception;

        r30 = $r10;

        goto label87;

     label82:
        goto label83;

     label83:
        goto label27;

     label84:
        goto label97;

     label85:
        $r13 := @caughtexception;

        r31 = $r13;

        goto label99;

     label86:
        $r14 := @caughtexception;

        r30 = $r14;

        r21 = r19;

     label87:
        r18 = r21;

     label88:
        r32 = new java.lang.StringBuilder;

     label89:
        r18 = r21;

     label90:
        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

     label91:
        r18 = r21;

     label92:
        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read app idle file for user ");

     label93:
        r18 = r21;

     label94:
        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label95:
        r18 = r21;

     label96:
        $r11 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIdleHistory", $r11, r30);

     label97:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r21);

        return;

     label98:
        $r12 := @caughtexception;

        r31 = $r12;

     label99:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r18);

        throw r31;

        catch java.io.IOException from label01 to label02 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label86;
        catch java.lang.Throwable from label01 to label02 with label85;
        catch java.io.IOException from label03 to label04 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label86;
        catch java.lang.Throwable from label03 to label04 with label85;
        catch java.io.IOException from label05 to label06 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label86;
        catch java.lang.Throwable from label05 to label06 with label85;
        catch java.io.IOException from label07 to label08 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label86;
        catch java.lang.Throwable from label07 to label08 with label85;
        catch java.io.IOException from label09 to label10 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label86;
        catch java.lang.Throwable from label09 to label10 with label85;
        catch java.io.IOException from label11 to label12 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label86;
        catch java.lang.Throwable from label11 to label12 with label85;
        catch java.io.IOException from label14 to label15 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label86;
        catch java.lang.Throwable from label14 to label15 with label85;
        catch java.io.IOException from label16 to label17 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label86;
        catch java.lang.Throwable from label16 to label17 with label85;
        catch java.io.IOException from label18 to label19 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label86;
        catch java.lang.Throwable from label18 to label19 with label85;
        catch java.io.IOException from label20 to label21 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label86;
        catch java.lang.Throwable from label20 to label21 with label85;
        catch java.io.IOException from label22 to label23 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label86;
        catch java.lang.Throwable from label22 to label23 with label85;
        catch java.io.IOException from label25 to label26 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label86;
        catch java.lang.Throwable from label25 to label26 with label85;
        catch java.io.IOException from label28 to label29 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label86;
        catch java.lang.Throwable from label28 to label29 with label85;
        catch java.io.IOException from label30 to label31 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label30 to label31 with label86;
        catch java.lang.Throwable from label30 to label31 with label85;
        catch java.io.IOException from label32 to label33 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label32 to label33 with label86;
        catch java.lang.Throwable from label32 to label33 with label85;
        catch java.io.IOException from label34 to label35 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label34 to label35 with label86;
        catch java.lang.Throwable from label34 to label35 with label85;
        catch java.io.IOException from label36 to label37 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label36 to label37 with label86;
        catch java.lang.Throwable from label36 to label37 with label85;
        catch java.io.IOException from label38 to label39 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label38 to label39 with label86;
        catch java.lang.Throwable from label38 to label39 with label85;
        catch java.io.IOException from label40 to label41 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label40 to label41 with label86;
        catch java.lang.Throwable from label40 to label41 with label85;
        catch java.io.IOException from label42 to label43 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label42 to label43 with label86;
        catch java.lang.Throwable from label42 to label43 with label85;
        catch java.io.IOException from label44 to label45 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label44 to label45 with label86;
        catch java.lang.Throwable from label44 to label45 with label85;
        catch java.io.IOException from label46 to label47 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label46 to label47 with label86;
        catch java.lang.Throwable from label46 to label47 with label85;
        catch java.io.IOException from label49 to label50 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label49 to label50 with label86;
        catch java.lang.Throwable from label49 to label50 with label85;
        catch java.io.IOException from label51 to label52 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label51 to label52 with label86;
        catch java.lang.Throwable from label51 to label52 with label85;
        catch java.io.IOException from label53 to label54 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label53 to label54 with label86;
        catch java.lang.Throwable from label53 to label54 with label85;
        catch java.io.IOException from label55 to label56 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label55 to label56 with label86;
        catch java.lang.Throwable from label55 to label56 with label85;
        catch java.io.IOException from label57 to label58 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label57 to label58 with label86;
        catch java.lang.Throwable from label57 to label58 with label85;
        catch java.io.IOException from label59 to label60 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label59 to label60 with label86;
        catch java.lang.Throwable from label59 to label60 with label85;
        catch java.io.IOException from label61 to label62 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label61 to label62 with label86;
        catch java.lang.Throwable from label61 to label62 with label85;
        catch java.lang.NumberFormatException from label63 to label64 with label65;
        catch java.io.IOException from label63 to label64 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label63 to label64 with label86;
        catch java.lang.Throwable from label63 to label64 with label85;
        catch java.io.IOException from label66 to label67 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label66 to label67 with label86;
        catch java.lang.Throwable from label66 to label67 with label85;
        catch java.io.IOException from label68 to label69 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label68 to label69 with label86;
        catch java.lang.Throwable from label68 to label69 with label85;
        catch java.io.IOException from label70 to label71 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label70 to label71 with label86;
        catch java.lang.Throwable from label70 to label71 with label85;
        catch java.lang.NumberFormatException from label72 to label73 with label74;
        catch java.io.IOException from label72 to label73 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label72 to label73 with label86;
        catch java.lang.Throwable from label72 to label73 with label85;
        catch java.io.IOException from label75 to label76 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label75 to label76 with label86;
        catch java.lang.Throwable from label75 to label76 with label85;
        catch java.io.IOException from label77 to label78 with label86;
        catch org.xmlpull.v1.XmlPullParserException from label77 to label78 with label86;
        catch java.lang.Throwable from label77 to label78 with label85;
        catch java.io.IOException from label79 to label80 with label81;
        catch org.xmlpull.v1.XmlPullParserException from label79 to label80 with label81;
        catch java.lang.Throwable from label79 to label80 with label98;
        catch java.lang.Throwable from label88 to label89 with label98;
        catch java.lang.Throwable from label90 to label91 with label98;
        catch java.lang.Throwable from label92 to label93 with label98;
        catch java.lang.Throwable from label94 to label95 with label98;
        catch java.lang.Throwable from label96 to label97 with label98;
    }

    private void readScreenOnTime()
    {
        com.android.server.usage.AppIdleHistory r0;
        java.io.BufferedReader r1;
        java.io.FileReader r2;
        boolean $z0;
        java.lang.String $r3, $r4;
        long $l0, $l1;
        java.lang.Throwable $r5;
        java.io.File r6;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r6 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: java.io.File getScreenOnTimeFile()>();

        $z0 = virtualinvoke r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

     label1:
        r1 = new java.io.BufferedReader;

        r2 = new java.io.FileReader;

        specialinvoke r2.<java.io.FileReader: void <init>(java.io.File)>(r6);

        specialinvoke r1.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2);

        $r3 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

        r0.<com.android.server.usage.AppIdleHistory: long mScreenOnDuration> = $l0;

        $r4 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r4);

        r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration> = $l1;

        virtualinvoke r1.<java.io.BufferedReader: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        goto label6;

     label5:
        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void writeScreenOnTime()>();

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void writeScreenOnTime()
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.StringBuilder r2;
        android.util.AtomicFile $r3;
        java.io.File $r4;
        long $l0, $l1;
        java.lang.String $r5, $r8, $r11;
        byte[] $r12;
        java.lang.Throwable $r13;
        java.io.FileOutputStream r14, r15;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        $r3 = new android.util.AtomicFile;

        $r4 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: java.io.File getScreenOnTimeFile()>();

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

        r14 = null;

     label01:
        r15 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r14 = r15;

     label03:
        r2 = new java.lang.StringBuilder;

     label04:
        r14 = r15;

     label05:
        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

     label06:
        r14 = r15;

     label07:
        $l0 = r0.<com.android.server.usage.AppIdleHistory: long mScreenOnDuration>;

        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label08:
        r14 = r15;

     label09:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label10:
        r14 = r15;

     label11:
        $l1 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration>;

        $r8 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label12:
        r14 = r15;

     label13:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label14:
        r14 = r15;

     label15:
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r15.<java.io.FileOutputStream: void write(byte[])>($r12);

     label16:
        r14 = r15;

     label17:
        virtualinvoke $r3.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r15);

     label18:
        goto label20;

     label19:
        $r13 := @caughtexception;

        virtualinvoke $r3.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r14);

     label20:
        return;

        catch java.io.IOException from label01 to label02 with label19;
        catch java.io.IOException from label03 to label04 with label19;
        catch java.io.IOException from label05 to label06 with label19;
        catch java.io.IOException from label07 to label08 with label19;
        catch java.io.IOException from label09 to label10 with label19;
        catch java.io.IOException from label11 to label12 with label19;
        catch java.io.IOException from label13 to label14 with label19;
        catch java.io.IOException from label15 to label16 with label19;
        catch java.io.IOException from label17 to label18 with label19;
    }

    public void clearUsage(java.lang.String, int)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0;
        android.util.ArrayMap $r2;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void dumpUsers(com.android.internal.util.IndentingPrintWriter, int[], java.util.List)
    {
        com.android.server.usage.AppIdleHistory r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int[] r2;
        java.util.List r3;
        int i0, $i1, i2;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.util.List;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $i1 = r2[i2];

        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void dumpUser(com.android.internal.util.IndentingPrintWriter,int,java.util.List)>(r1, $i1, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public int getAppStandbyBucket(java.lang.String, int, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        long l0;
        android.util.ArrayMap r1;
        java.lang.String r2;
        int i1, i2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r2 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        l0 := @parameter2: long;

        r1 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i1);

        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r1, r2, l0, 0);

        if r3 != null goto label1;

        i2 = 50;

        goto label2;

     label1:
        i2 = r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

     label2:
        return i2;
    }

    public java.util.ArrayList getAppStandbyBuckets(int, boolean)
    {
        com.android.server.usage.AppIdleHistory r0;
        boolean z0;
        android.util.ArrayMap r1;
        int i0, i1, i2, i3;
        java.lang.String r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5, $r7;
        android.app.usage.AppStandbyInfo $r6;
        com.android.server.usage.AppIdleHistory$AppUsageHistory $r8;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i1);

        i0 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r5 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        r3 = (java.lang.String) $r5;

        if z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r8 = (com.android.server.usage.AppIdleHistory$AppUsageHistory) $r7;

        i3 = $r8.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        goto label3;

     label2:
        i3 = 10;

     label3:
        $r6 = new android.app.usage.AppStandbyInfo;

        specialinvoke $r6.<android.app.usage.AppStandbyInfo: void <init>(java.lang.String,int)>(r3, i3);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label4:
        return $r4;
    }

    public int getAppStandbyReason(java.lang.String, int, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        long l0;
        android.util.ArrayMap r1;
        java.lang.String r2;
        int i1, i2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r2 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        l0 := @parameter2: long;

        r1 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i1);

        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r1, r2, l0, 0);

        if r3 == null goto label1;

        i2 = r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        goto label2;

     label1:
        i2 = 0;

     label2:
        return i2;
    }

    public com.android.server.usage.AppIdleHistory$AppUsageHistory getAppUsageHistory(java.lang.String, int, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0;
        long l1;
        android.util.ArrayMap r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory $r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r2 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r2, r1, l1, 1);

        return $r3;
    }

    public long getElapsedTime(long)
    {
        com.android.server.usage.AppIdleHistory r0;
        long l0, $l1, $l2, $l3, $l4;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot>;

        $l3 = l0 - $l1;

        $l2 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration>;

        $l4 = $l3 + $l2;

        return $l4;
    }

    public long getScreenOnTime(long)
    {
        com.android.server.usage.AppIdleHistory r0;
        long l0, l1, $l2, $l3, l4;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        l0 := @parameter0: long;

        l1 = r0.<com.android.server.usage.AppIdleHistory: long mScreenOnDuration>;

        l4 = l1;

        $z0 = r0.<com.android.server.usage.AppIdleHistory: boolean mScreenOn>;

        if $z0 == 0 goto label1;

        $l2 = r0.<com.android.server.usage.AppIdleHistory: long mScreenOnSnapshot>;

        $l3 = l0 - $l2;

        l4 = l1 + $l3;

     label1:
        return l4;
    }

    java.io.File getScreenOnTimeFile()
    {
        com.android.server.usage.AppIdleHistory r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.usage.AppIdleHistory: java.io.File mStorageDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "screen_on_time");

        return $r1;
    }

    int getThresholdIndex(java.lang.String, int, long, long[], long[])
    {
        com.android.server.usage.AppIdleHistory r0;
        long[] r1, r2;
        long l0, l1, l2, $l4, $l5, $l7, $l8, l13, l14;
        android.util.ArrayMap $r3;
        int $i3, $i10, $i11, i12, i15;
        byte $b6, $b9;
        java.lang.String r4;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r5;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r4 := @parameter0: java.lang.String;

        i12 := @parameter1: int;

        l13 := @parameter2: long;

        r1 := @parameter3: long[];

        r2 := @parameter4: long[];

        $r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i12);

        r5 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>($r3, r4, l13, 0);

        if r5 != null goto label1;

        $i10 = lengthof r1;

        $i11 = $i10 - 1;

        return $i11;

     label1:
        l0 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getScreenOnTime(long)>(l13);

        l1 = r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedScreenTime>;

        l14 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l13);

        l2 = r5.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime>;

        $i3 = lengthof r1;

        i15 = $i3 - 1;

     label2:
        if i15 < 0 goto label4;

        $l5 = l0 - l1;

        $l4 = r1[i15];

        $b6 = $l5 cmp $l4;

        if $b6 < 0 goto label3;

        $l8 = l14 - l2;

        $l7 = r2[i15];

        $b9 = $l8 cmp $l7;

        if $b9 < 0 goto label3;

        return i15;

     label3:
        i15 = i15 + -1;

        goto label2;

     label4:
        return 0;
    }

    public long getTimeSinceLastJobRun(java.lang.String, int, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0;
        long l1, $l2, $l4, $l5, $l6;
        android.util.ArrayMap r1;
        byte $b3;
        java.lang.String r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r1, r2, l1, 0);

        if r3 == null goto label2;

        $l2 = r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime>;

        $b3 = $l2 cmp -9223372036854775808L;

        if $b3 != 0 goto label1;

        goto label2;

     label1:
        $l4 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

        $l5 = r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime>;

        $l6 = $l4 - $l5;

        return $l6;

     label2:
        return 9223372036854775807L;
    }

    java.io.File getUserFile(int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0;
        java.io.File $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = new java.io.File;

        $r3 = new java.io.File;

        $r4 = r0.<com.android.server.usage.AppIdleHistory: java.io.File mStorageDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "users");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r5);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "app_idle_stats.xml");

        return $r1;
    }

    public boolean isIdle(java.lang.String, int, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0, $i2;
        long l1;
        android.util.ArrayMap r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory $r3;
        boolean z0;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r2 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r2, r1, l1, 1);

        $i2 = $r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i2 < 40 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void noteRestrictionAttempt(java.lang.String, int, long, int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0, i2;
        long l1, $l3;
        android.util.ArrayMap r1;
        java.lang.String r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        r1 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r1, r2, l1, 1);

        $l3 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime> = $l3;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastRestrictReason> = i2;

        return;
    }

    public void onUserRemoved(int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory>;

        virtualinvoke $r1.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(com.android.server.usage.AppIdleHistory$AppUsageHistory, java.lang.String, int, int, int, long, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1, $r6;
        int i0, i1, i3, $i4, i19, i21, i22, $i25;
        long l2, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, l20, l23;
        boolean z0;
        byte $b5, $b24;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r7;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r7 := @parameter0: com.android.server.usage.AppIdleHistory$AppUsageHistory;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i19 := @parameter4: int;

        l2 := @parameter5: long;

        l20 := @parameter6: long;

        i3 = i19 | 768;

        z0 = staticinvoke <com.android.server.usage.AppStandbyController: boolean isUserUsage(int)>(i3);

        $i4 = r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i4 != 45 goto label1;

        if z0 != 0 goto label1;

        i21 = 45;

        i22 = r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        goto label4;

     label1:
        i21 = i1;

        i22 = i3;

        $b5 = l20 cmp l2;

        if $b5 <= 0 goto label4;

        $l14 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration>;

        $l12 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot>;

        $l13 = l20 - $l12;

        l23 = $l14 + $l13;

        if i1 != 10 goto label2;

        $l17 = r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime>;

        $l18 = staticinvoke <java.lang.Math: long max(long,long)>(l23, $l17);

        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime> = $l18;

        i21 = i1;

        i22 = i3;

        goto label4;

     label2:
        if i1 != 20 goto label3;

        $l15 = r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime>;

        $l16 = staticinvoke <java.lang.Math: long max(long,long)>(l23, $l15);

        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime> = $l16;

        i21 = i1;

        i22 = i3;

        goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set a timeout on bucket=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        $b24 = l2 cmp 0L;

        if $b24 == 0 goto label6;

        $l8 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration>;

        $l6 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot>;

        $l7 = l2 - $l6;

        $l9 = $l8 + $l7;

        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime> = $l9;

        if z0 == 0 goto label5;

        $l11 = r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime>;

        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime> = $l11;

     label5:
        $l10 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getScreenOnTime(long)>(l2);

        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedScreenTime> = $l10;

     label6:
        $i25 = r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i25 <= i21 goto label7;

        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket> = i21;

        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void logAppStandbyBucketChanged(java.lang.String,int,int,int)>(r1, i0, i21, i22);

        goto label7;

     label7:
        r7.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason> = i22;

        return r7;
    }

    public com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(java.lang.String, int, int, int, long, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0, i1, i2;
        long l3, l4;
        android.util.ArrayMap $r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory $r3, $r4;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        l3 := @parameter4: long;

        l4 := @parameter5: long;

        $r2 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>($r2, r1, l3, 1);

        $r4 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(com.android.server.usage.AppIdleHistory$AppUsageHistory,java.lang.String,int,int,int,long,long)>($r3, r1, i0, i1, i2, l3, l4);

        return $r4;
    }

    public void setAppStandbyBucket(java.lang.String, int, long, int, int)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0, i2, i3;
        long l1;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int,boolean)>(r1, i0, l1, i2, i3, 0);

        return;
    }

    public void setAppStandbyBucket(java.lang.String, int, long, int, int, boolean)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4;
        boolean z0, z1;
        long l5, l6;
        android.util.ArrayMap r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l5 := @parameter2: long;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        r2 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r2, r1, l5, 1);

        $i3 = r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i3 == i1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket> = i1;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason> = i2;

        l6 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l5);

        $i4 = 65280 & i2;

        if $i4 != 1280 goto label3;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime> = l6;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastPredictedBucket> = i1;

     label3:
        if z0 == 0 goto label4;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime> = l6;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime> = l6;

     label4:
        if z1 == 0 goto label5;

        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void logAppStandbyBucketChanged(java.lang.String,int,int,int)>(r1, i0, i1, i2);

     label5:
        return;
    }

    public int setIdle(java.lang.String, int, boolean, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        long l1;
        byte b2;
        short s3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        if z0 == 0 goto label1;

        b2 = 40;

        s3 = 1024;

        goto label2;

     label1:
        b2 = 10;

        s3 = 771;

     label2:
        virtualinvoke r0.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int,boolean)>(r1, i0, l1, b2, s3, 0);

        return b2;
    }

    public void setLastJobRunTime(java.lang.String, int, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        java.lang.String r1;
        int i0;
        long l1, $l2;
        android.util.ArrayMap r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory $r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r2 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        $r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>(r2, r1, l1, 1);

        $l2 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

        $r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime> = $l2;

        return;
    }

    boolean shouldInformListeners(java.lang.String, int, long, int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0, i2, $i3;
        long l1;
        android.util.ArrayMap $r1;
        java.lang.String r2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r3;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        $r1 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getPackageHistory(android.util.ArrayMap,java.lang.String,long,boolean)>($r1, r2, l1, 1);

        $i3 = r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastInformedBucket>;

        if $i3 == i2 goto label1;

        r3.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastInformedBucket> = i2;

        return 1;

     label1:
        return 0;
    }

    public void updateDisplay(boolean, long)
    {
        com.android.server.usage.AppIdleHistory r0;
        boolean z0, $z1;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        $z1 = r0.<com.android.server.usage.AppIdleHistory: boolean mScreenOn>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<com.android.server.usage.AppIdleHistory: boolean mScreenOn> = z0;

        if z0 == 0 goto label2;

        r0.<com.android.server.usage.AppIdleHistory: long mScreenOnSnapshot> = l0;

        goto label3;

     label2:
        $l3 = r0.<com.android.server.usage.AppIdleHistory: long mScreenOnDuration>;

        $l1 = r0.<com.android.server.usage.AppIdleHistory: long mScreenOnSnapshot>;

        $l2 = l0 - $l1;

        $l4 = $l3 + $l2;

        r0.<com.android.server.usage.AppIdleHistory: long mScreenOnDuration> = $l4;

        $l7 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration>;

        $l5 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot>;

        $l6 = l0 - $l5;

        $l8 = $l7 + $l6;

        r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration> = $l8;

        r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot> = l0;

     label3:
        return;
    }

    public void updateLastPrediction(com.android.server.usage.AppIdleHistory$AppUsageHistory, long, int)
    {
        com.android.server.usage.AppIdleHistory r0;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r1;
        long l0;
        int i1;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        r1 := @parameter0: com.android.server.usage.AppIdleHistory$AppUsageHistory;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime> = l0;

        r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastPredictedBucket> = i1;

        return;
    }

    public boolean userFileExists(int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: java.io.File getUserFile(int)>(i0);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        return $z0;
    }

    public void writeAppIdleDurations()
    {
        com.android.server.usage.AppIdleHistory r0;
        long l0, $l1, $l2, $l3, $l4;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration>;

        $l1 = r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot>;

        $l2 = l0 - $l1;

        $l4 = $l3 + $l2;

        r0.<com.android.server.usage.AppIdleHistory: long mElapsedDuration> = $l4;

        r0.<com.android.server.usage.AppIdleHistory: long mElapsedSnapshot> = l0;

        specialinvoke r0.<com.android.server.usage.AppIdleHistory: void writeScreenOnTime()>();

        return;
    }

    public void writeAppIdleTimes()
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0, $i1, i2;
        android.util.SparseArray $r1, $r2;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        $r1 = r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory>;

        i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r2 = r0.<com.android.server.usage.AppIdleHistory: android.util.SparseArray mIdleHistory>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int keyAt(int)>(i2);

        virtualinvoke r0.<com.android.server.usage.AppIdleHistory: void writeAppIdleTimes(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void writeAppIdleTimes(int)
    {
        com.android.server.usage.AppIdleHistory r0;
        int i0, i1, $i6, $i7, $i16, i23;
        com.android.internal.util.FastXmlSerializer r2;
        android.util.ArrayMap r3;
        java.lang.String r4, $r8, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r31, $r33, $r35, $r37, $r43;
        android.util.AtomicFile $r5;
        java.io.File $r6;
        java.nio.charset.Charset $r7;
        java.lang.Boolean $r9;
        java.lang.Object $r12, $r13;
        long $l2, $l3, $l4, $l5, $l8, $l10, $l12, $l14, $l17, $l18, $l19, $l20;
        byte $b9, $b11, $b13, $b15;
        java.lang.Exception $r39;
        java.lang.StringBuilder $r40;
        java.io.FileOutputStream r44, r45;
        java.io.BufferedOutputStream r46;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r47;

        r0 := @this: com.android.server.usage.AppIdleHistory;

        i0 := @parameter0: int;

        r44 = null;

        $r5 = new android.util.AtomicFile;

        $r6 = virtualinvoke r0.<com.android.server.usage.AppIdleHistory: java.io.File getUserFile(int)>(i0);

        specialinvoke $r5.<android.util.AtomicFile: void <init>(java.io.File)>($r6);

     label01:
        r45 = virtualinvoke $r5.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r44 = r45;

     label03:
        r46 = new java.io.BufferedOutputStream;

     label04:
        r44 = r45;

     label05:
        specialinvoke r46.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r45);

     label06:
        r44 = r45;

     label07:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label08:
        r44 = r45;

     label09:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label10:
        r44 = r45;

     label11:
        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r46, $r8);

     label12:
        r44 = r45;

     label13:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

     label14:
        r44 = r45;

     label15:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

     label16:
        r44 = r45;

     label17:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "packages");

     label18:
        r44 = r45;

     label19:
        r3 = specialinvoke r0.<com.android.server.usage.AppIdleHistory: android.util.ArrayMap getUserHistory(int)>(i0);

     label20:
        r44 = r45;

     label21:
        i1 = virtualinvoke r3.<android.util.ArrayMap: int size()>();

     label22:
        i23 = 0;

     label23:
        if i23 >= i1 goto label68;

        r44 = r45;

     label24:
        $r12 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i23);

        r4 = (java.lang.String) $r12;

     label25:
        if r4 != null goto label28;

        r44 = r45;

     label26:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AppIdleHistory", "Skipping App Idle write for unexpected null package");

     label27:
        goto label67;

     label28:
        r44 = r45;

     label29:
        $r13 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i23);

        r47 = (com.android.server.usage.AppIdleHistory$AppUsageHistory) $r13;

     label30:
        r44 = r45;

     label31:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "package");

     label32:
        r44 = r45;

     label33:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", r4);

     label34:
        r44 = r45;

     label35:
        $l2 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedElapsedTime>;

        $r16 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "elapsedIdleTime", $r16);

     label36:
        r44 = r45;

     label37:
        $l3 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime>;

        $r18 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l3);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastUsedByUserElapsedTime", $r18);

     label38:
        r44 = r45;

     label39:
        $l4 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedScreenTime>;

        $r20 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l4);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "screenIdleTime", $r20);

     label40:
        r44 = r45;

     label41:
        $l5 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime>;

        $r22 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l5);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastPredictedTime", $r22);

     label42:
        r44 = r45;

     label43:
        $i6 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "appLimitBucket", $r24);

     label44:
        r44 = r45;

     label45:
        $i7 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "bucketReason", $r26);

     label46:
        r44 = r45;

     label47:
        $l8 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime>;

        $b9 = $l8 cmp 0L;

        if $b9 <= 0 goto label51;

     label48:
        r44 = r45;

     label49:
        $l20 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime>;

        $r37 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l20);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "activeTimeoutTime", $r37);

     label50:
        goto label51;

     label51:
        r44 = r45;

     label52:
        $l10 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime>;

        $b11 = $l10 cmp 0L;

        if $b11 <= 0 goto label55;

     label53:
        r44 = r45;

     label54:
        $l19 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime>;

        $r35 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l19);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "workingSetTimeoutTime", $r35);

     label55:
        r44 = r45;

     label56:
        $l12 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime>;

        $b13 = $l12 cmp -9223372036854775808L;

        if $b13 == 0 goto label59;

     label57:
        r44 = r45;

     label58:
        $l18 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastJobRunTime>;

        $r33 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l18);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastJobRunTime", $r33);

     label59:
        r44 = r45;

     label60:
        $l14 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime>;

        $b15 = $l14 cmp 0L;

        if $b15 <= 0 goto label63;

     label61:
        r44 = r45;

     label62:
        $l17 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime>;

        $r31 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l17);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastRestrictionAttemptElapsedTime", $r31);

     label63:
        r44 = r45;

     label64:
        $i16 = r47.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastRestrictReason>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i16);

        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastRestrictionAttemptReason", $r28);

     label65:
        r44 = r45;

     label66:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "package");

     label67:
        i23 = i23 + 1;

        goto label23;

     label68:
        r44 = r45;

     label69:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "packages");

     label70:
        r44 = r45;

     label71:
        virtualinvoke r2.<com.android.internal.util.FastXmlSerializer: void endDocument()>();

     label72:
        r44 = r45;

     label73:
        virtualinvoke $r5.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r45);

     label74:
        goto label76;

     label75:
        $r39 := @caughtexception;

        virtualinvoke $r5.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r44);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing app idle file for user ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIdleHistory", $r43, $r39);

     label76:
        return;

        catch java.lang.Exception from label01 to label02 with label75;
        catch java.lang.Exception from label03 to label04 with label75;
        catch java.lang.Exception from label05 to label06 with label75;
        catch java.lang.Exception from label07 to label08 with label75;
        catch java.lang.Exception from label09 to label10 with label75;
        catch java.lang.Exception from label11 to label12 with label75;
        catch java.lang.Exception from label13 to label14 with label75;
        catch java.lang.Exception from label15 to label16 with label75;
        catch java.lang.Exception from label17 to label18 with label75;
        catch java.lang.Exception from label19 to label20 with label75;
        catch java.lang.Exception from label21 to label22 with label75;
        catch java.lang.Exception from label24 to label25 with label75;
        catch java.lang.Exception from label26 to label27 with label75;
        catch java.lang.Exception from label29 to label30 with label75;
        catch java.lang.Exception from label31 to label32 with label75;
        catch java.lang.Exception from label33 to label34 with label75;
        catch java.lang.Exception from label35 to label36 with label75;
        catch java.lang.Exception from label37 to label38 with label75;
        catch java.lang.Exception from label39 to label40 with label75;
        catch java.lang.Exception from label41 to label42 with label75;
        catch java.lang.Exception from label43 to label44 with label75;
        catch java.lang.Exception from label45 to label46 with label75;
        catch java.lang.Exception from label47 to label48 with label75;
        catch java.lang.Exception from label49 to label50 with label75;
        catch java.lang.Exception from label52 to label53 with label75;
        catch java.lang.Exception from label54 to label55 with label75;
        catch java.lang.Exception from label56 to label57 with label75;
        catch java.lang.Exception from label58 to label59 with label75;
        catch java.lang.Exception from label60 to label61 with label75;
        catch java.lang.Exception from label62 to label63 with label75;
        catch java.lang.Exception from label64 to label65 with label75;
        catch java.lang.Exception from label66 to label67 with label75;
        catch java.lang.Exception from label69 to label70 with label75;
        catch java.lang.Exception from label71 to label72 with label75;
        catch java.lang.Exception from label73 to label74 with label75;
    }

    public static void <clinit>()
    {
        <com.android.server.usage.AppIdleHistory: java.lang.String TAG_PACKAGES> = "packages";

        <com.android.server.usage.AppIdleHistory: java.lang.String TAG_PACKAGE> = "package";

        <com.android.server.usage.AppIdleHistory: java.lang.String TAG> = "AppIdleHistory";

        <com.android.server.usage.AppIdleHistory: int STANDBY_BUCKET_UNKNOWN> = -1;

        <com.android.server.usage.AppIdleHistory: long ONE_MINUTE> = 60000L;

        <com.android.server.usage.AppIdleHistory: int IDLE_BUCKET_CUTOFF> = 40;

        <com.android.server.usage.AppIdleHistory: boolean DEBUG> = 0;

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_SCREEN_IDLE> = "screenIdleTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_NAME> = "name";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_LAST_USED_BY_USER_ELAPSED> = "lastUsedByUserElapsedTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_LAST_RUN_JOB_TIME> = "lastJobRunTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_LAST_RESTRICTION_ATTEMPT_REASON> = "lastRestrictionAttemptReason";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_LAST_RESTRICTION_ATTEMPT_ELAPSED> = "lastRestrictionAttemptElapsedTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_LAST_PREDICTED_TIME> = "lastPredictedTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_ELAPSED_IDLE> = "elapsedIdleTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_CURRENT_BUCKET> = "appLimitBucket";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_BUCKET_WORKING_SET_TIMEOUT_TIME> = "workingSetTimeoutTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_BUCKET_ACTIVE_TIMEOUT_TIME> = "activeTimeoutTime";

        <com.android.server.usage.AppIdleHistory: java.lang.String ATTR_BUCKETING_REASON> = "bucketReason";

        <com.android.server.usage.AppIdleHistory: java.lang.String APP_IDLE_FILENAME> = "app_idle_stats.xml";

        return;
    }
}
