class com.android.server.usage.AppStandbyController$Injector extends java.lang.Object
{
    long mAutoRestrictedBucketDelayMs;
    private android.os.BatteryManager mBatteryManager;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    int mBootPhase;
    private final android.content.Context mContext;
    private android.content.pm.CrossProfileAppsInternal mCrossProfileAppsInternal;
    private android.os.IDeviceIdleController mDeviceIdleController;
    private android.hardware.display.DisplayManager mDisplayManager;
    private final android.os.Looper mLooper;
    private android.content.pm.PackageManagerInternal mPackageManagerInternal;
    private android.os.PowerManager mPowerManager;
    private final android.util.ArraySet mPowerWhitelistedApps;

    void <init>(android.content.Context, android.os.Looper)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.content.Context r1;
        android.os.Looper r2;
        android.util.ArraySet $r3;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usage.AppStandbyController$Injector: long mAutoRestrictedBucketDelayMs> = 86400000L;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps> = $r3;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext> = r1;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.os.Looper mLooper> = r2;

        return;
    }

    long currentTimeMillis()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        long $l0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    void dump(java.io.PrintWriter)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.util.ArraySet r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        java.io.PrintWriter r7;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r7 := @parameter0: java.io.PrintWriter;

        virtualinvoke r7.<java.io.PrintWriter: void println(java.lang.String)>("mPowerWhitelistedApps=[");

        r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        $i0 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label5;

     label3:
        virtualinvoke r7.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r3 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        $r4 = virtualinvoke $r3.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r5 = (java.lang.String) $r4;

        virtualinvoke r7.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        virtualinvoke r7.<java.io.PrintWriter: void println(java.lang.String)>(",");

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        virtualinvoke r7.<java.io.PrintWriter: void println(java.lang.String)>("]");

        virtualinvoke r7.<java.io.PrintWriter: void println()>();

        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    long elapsedRealtime()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        long $l0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        return $l0;
    }

    java.lang.String getActiveNetworkScorer()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.NetworkScoreManager $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("network_score");

        $r3 = (android.net.NetworkScoreManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.NetworkScoreManager: java.lang.String getActiveScorerPackage()>();

        return $r4;
    }

    java.lang.String getAppIdleSettings()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "app_idle_constants");

        return $r3;
    }

    long getAutoRestrictedBucketDelayMs()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        long $l0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $l0 = r0.<com.android.server.usage.AppStandbyController$Injector: long mAutoRestrictedBucketDelayMs>;

        return $l0;
    }

    int getBootPhase()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        int $i0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $i0 = r0.<com.android.server.usage.AppStandbyController$Injector: int mBootPhase>;

        return $i0;
    }

    android.content.Context getContext()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        return $r1;
    }

    java.io.File getDataSystemDirectory()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        java.io.File $r1;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        return $r1;
    }

    android.os.Looper getLooper()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.os.Looper $r1;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.os.Looper mLooper>;

        return $r1;
    }

    android.content.pm.PackageManagerInternal getPackageManagerInternal()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.content.pm.PackageManagerInternal $r1;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        return $r1;
    }

    int[] getRunningUserIds() throws android.os.RemoteException
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.app.IActivityManager $r1;
        int[] $r2;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = interfaceinvoke $r1.<android.app.IActivityManager: int[] getRunningUserIds()>();

        return $r2;
    }

    public java.util.List getValidCrossProfileTargets(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        int i0, i1;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        android.content.pm.PackageManagerInternal $r2, $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, r11;
        boolean $z0, $z1;
        android.content.pm.CrossProfileAppsInternal $r8, $r9;
        java.util.List $r10, $r13;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        i1 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: int getPackageUidInternal(java.lang.String,int,int)>(r11, 0, i0);

        $r3 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        r1 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int)>(i1);

        if i1 < 0 goto label2;

        if r1 == null goto label2;

        $z0 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isCrossProfile()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.CrossProfileAppsInternal mCrossProfileAppsInternal>;

        $z1 = virtualinvoke $r8.<android.content.pm.CrossProfileAppsInternal: boolean verifyUidHasInteractAcrossProfilePermission(java.lang.String,int)>(r11, i1);

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r9 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.CrossProfileAppsInternal mCrossProfileAppsInternal>;

        $r10 = virtualinvoke $r9.<android.content.pm.CrossProfileAppsInternal: java.util.List getTargetUserProfiles(java.lang.String,int)>(r11, i0);

        return $r10;

     label2:
        if i1 < 0 goto label3;

        if r1 != null goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null package retrieved for UID ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("AppStandbyController", $r7);

     label3:
        $r13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r13;
    }

    boolean isAppIdleEnabled()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        boolean z0, z1, z2;
        android.content.ContentResolver r1, $r6;
        android.content.Context $r2, $r4, $r5;
        android.content.res.Resources $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891436);

        $r4 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z1 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "app_standby_enabled", 1);

        if $i0 != 1 goto label1;

        $r5 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "adaptive_battery_management_enabled", 1);

        if $i1 != 1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z0 == 0 goto label3;

        if z2 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean isBoundWidgetPackage(android.appwidget.AppWidgetManager, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.appwidget.AppWidgetManager r1;
        java.lang.String r2;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r1 := @parameter0: android.appwidget.AppWidgetManager;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r1.<android.appwidget.AppWidgetManager: boolean isBoundWidgetPackage(java.lang.String,int)>(r2, i0);

        return $z0;
    }

    boolean isCharging()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.os.BatteryManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.os.BatteryManager mBatteryManager>;

        $z0 = virtualinvoke $r1.<android.os.BatteryManager: boolean isCharging()>();

        return $z0;
    }

    boolean isDefaultDisplayOn()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.hardware.display.DisplayManager r1;
        android.view.Display $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.hardware.display.DisplayManager mDisplayManager>;

        z0 = 0;

        $r2 = virtualinvoke r1.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

        $i0 = virtualinvoke $r2.<android.view.Display: int getState()>();

        if $i0 != 2 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isDeviceIdleMode()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.os.PowerManager $r1;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.os.PowerManager mPowerManager>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager: boolean isDeviceIdleMode()>();

        return $z0;
    }

    boolean isNonIdleWhitelisted(java.lang.String)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.util.ArraySet r1, $r2;
        boolean z0;
        int $i0;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r4 := @parameter0: java.lang.String;

        $i0 = r0.<com.android.server.usage.AppStandbyController$Injector: int mBootPhase>;

        if $i0 >= 500 goto label1;

        return 0;

     label1:
        r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r4);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    boolean isPackageEphemeral(int, java.lang.String)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        int i0;
        java.lang.String r1;
        android.content.pm.PackageManagerInternal $r2;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: boolean isPackageEphemeral(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    boolean isPackageInstalled(java.lang.String, int, int)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.pm.PackageManagerInternal $r2;
        boolean z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        $i2 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>(r1, i0, i1);

        if $i2 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isRestrictedBucketEnabled()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "enable_restricted_bucket", 0);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    void noteEvent(int, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        int i0, i1;
        java.lang.String r1;
        com.android.internal.app.IBatteryStats $r2;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteEvent(int,java.lang.String,int)>(i0, r1, i1);

        return;
    }

    void onBootPhase(int)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        int i0;
        android.os.IBinder $r1, $r3;
        android.os.IDeviceIdleController $r2;
        com.android.internal.app.IBatteryStats $r4;
        java.lang.Object $r5, $r8, $r11, $r14, $r16, $r19;
        android.content.pm.PackageManagerInternal $r6;
        android.content.Context $r7, $r10, $r13, $r18;
        android.hardware.display.DisplayManager $r9;
        android.os.PowerManager $r12;
        android.os.BatteryManager $r15;
        android.content.pm.CrossProfileAppsInternal $r17;
        android.app.ActivityManager $r20;
        boolean $z0, $z1;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        i0 := @parameter0: int;

        if i0 != 500 goto label2;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("deviceidle");

        $r2 = staticinvoke <android.os.IDeviceIdleController$Stub: android.os.IDeviceIdleController asInterface(android.os.IBinder)>($r1);

        r0.<com.android.server.usage.AppStandbyController$Injector: android.os.IDeviceIdleController mDeviceIdleController> = $r2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r4 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.usage.AppStandbyController$Injector: com.android.internal.app.IBatteryStats mBatteryStats> = $r4;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r6 = (android.content.pm.PackageManagerInternal) $r5;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal mPackageManagerInternal> = $r6;

        $r7 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r9 = (android.hardware.display.DisplayManager) $r8;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.hardware.display.DisplayManager mDisplayManager> = $r9;

        $r10 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r12 = (android.os.PowerManager) $r11;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.os.PowerManager mPowerManager> = $r12;

        $r13 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/BatteryManager;");

        $r15 = (android.os.BatteryManager) $r14;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.os.BatteryManager mBatteryManager> = $r15;

        $r16 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/CrossProfileAppsInternal;");

        $r17 = (android.content.pm.CrossProfileAppsInternal) $r16;

        r0.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.CrossProfileAppsInternal mCrossProfileAppsInternal> = $r17;

        $r18 = r0.<com.android.server.usage.AppStandbyController$Injector: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r20 = (android.app.ActivityManager) $r19;

        $z0 = virtualinvoke $r20.<android.app.ActivityManager: boolean isLowRamDevice()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.app.ActivityManager: boolean isSmallBatteryDevice()>();

        if $z1 == 0 goto label2;

     label1:
        r0.<com.android.server.usage.AppStandbyController$Injector: long mAutoRestrictedBucketDelayMs> = 43200000L;

     label2:
        r0.<com.android.server.usage.AppStandbyController$Injector: int mBootPhase> = i0;

        return;
    }

    void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        android.hardware.display.DisplayManager$DisplayListener r1;
        android.os.Handler r2;
        android.hardware.display.DisplayManager $r3;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

        r1 := @parameter0: android.hardware.display.DisplayManager$DisplayListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = r0.<com.android.server.usage.AppStandbyController$Injector: android.hardware.display.DisplayManager mDisplayManager>;

        virtualinvoke $r3.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>(r1, r2);

        return;
    }

    void updatePowerWhitelistCache()
    {
        com.android.server.usage.AppStandbyController$Injector r0;
        int i0, i2;
        android.os.IDeviceIdleController $r1;
        android.util.ArraySet $r2, $r4, r8;
        java.lang.String $r3;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.String[] r7;

        r0 := @this: com.android.server.usage.AppStandbyController$Injector;

     label01:
        $r1 = r0.<com.android.server.usage.AppStandbyController$Injector: android.os.IDeviceIdleController mDeviceIdleController>;

        r7 = interfaceinvoke $r1.<android.os.IDeviceIdleController: java.lang.String[] getFullPowerWhitelistExceptIdle()>();

        r8 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        entermonitor r8;

     label02:
        $r2 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        virtualinvoke $r2.<android.util.ArraySet: void clear()>();

        i0 = lengthof r7;

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label07;

     label05:
        $r4 = r0.<com.android.server.usage.AppStandbyController$Injector: android.util.ArraySet mPowerWhitelistedApps>;

        $r3 = r7[i2];

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>($r3);

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        exitmonitor r8;

     label08:
        goto label13;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r8;

     label11:
        throw $r5;

     label12:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AppStandbyController", "Failed to get power whitelist", $r6);

     label13:
        return;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.os.RemoteException from label11 to label12 with label12;
    }
}
