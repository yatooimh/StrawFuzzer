class com.android.server.usage.AppStandbyController$SettingsObserver extends android.database.ContentObserver
{
    public static final long DEFAULT_AUTO_RESTRICTED_BUCKET_DELAY_MS;
    public static final boolean DEFAULT_CROSS_PROFILE_APPS_SHARE_STANDBY_BUCKETS;
    public static final long DEFAULT_EXEMPTED_SYNC_SCHEDULED_DOZE_TIMEOUT;
    public static final long DEFAULT_EXEMPTED_SYNC_SCHEDULED_NON_DOZE_TIMEOUT;
    public static final long DEFAULT_EXEMPTED_SYNC_START_TIMEOUT;
    public static final long DEFAULT_INITIAL_FOREGROUND_SERVICE_START_TIMEOUT;
    public static final long DEFAULT_NOTIFICATION_TIMEOUT;
    public static final long DEFAULT_STRONG_USAGE_TIMEOUT;
    public static final long DEFAULT_SYNC_ADAPTER_TIMEOUT;
    public static final long DEFAULT_SYSTEM_INTERACTION_TIMEOUT;
    public static final long DEFAULT_SYSTEM_UPDATE_TIMEOUT;
    public static final long DEFAULT_UNEXEMPTED_SYNC_SCHEDULED_TIMEOUT;
    private static final java.lang.String KEY_AUTO_RESTRICTED_BUCKET_DELAY_MS;
    private static final java.lang.String KEY_CROSS_PROFILE_APPS_SHARE_STANDBY_BUCKETS;
    private static final java.lang.String KEY_ELAPSED_TIME_THRESHOLDS;
    private static final java.lang.String KEY_EXEMPTED_SYNC_SCHEDULED_DOZE_HOLD_DURATION;
    private static final java.lang.String KEY_EXEMPTED_SYNC_SCHEDULED_NON_DOZE_HOLD_DURATION;
    private static final java.lang.String KEY_EXEMPTED_SYNC_START_HOLD_DURATION;
    private static final java.lang.String KEY_INITIAL_FOREGROUND_SERVICE_START_HOLD_DURATION;
    private static final java.lang.String KEY_NOTIFICATION_SEEN_HOLD_DURATION;
    private static final java.lang.String KEY_PREDICTION_TIMEOUT;
    private static final java.lang.String KEY_SCREEN_TIME_THRESHOLDS;
    private static final java.lang.String KEY_STRONG_USAGE_HOLD_DURATION;
    private static final java.lang.String KEY_SYNC_ADAPTER_HOLD_DURATION;
    private static final java.lang.String KEY_SYSTEM_INTERACTION_HOLD_DURATION;
    private static final java.lang.String KEY_SYSTEM_UPDATE_HOLD_DURATION;
    private static final java.lang.String KEY_UNEXEMPTED_SYNC_SCHEDULED_HOLD_DURATION;
    private final android.util.KeyValueListParser mParser;
    final com.android.server.usage.AppStandbyController this$0;

    void <init>(com.android.server.usage.AppStandbyController, android.os.Handler)
    {
        com.android.server.usage.AppStandbyController$SettingsObserver r0;
        com.android.server.usage.AppStandbyController r1;
        android.os.Handler r2;
        android.util.KeyValueListParser $r3;

        r0 := @this: com.android.server.usage.AppStandbyController$SettingsObserver;

        r1 := @parameter0: com.android.server.usage.AppStandbyController;

        r2 := @parameter1: android.os.Handler;

        r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0> = r1;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>(r2);

        $r3 = new android.util.KeyValueListParser;

        specialinvoke $r3.<android.util.KeyValueListParser: void <init>(char)>(44);

        r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser> = $r3;

        return;
    }

    public void onChange(boolean)
    {
        com.android.server.usage.AppStandbyController$SettingsObserver r0;
        boolean z0;
        com.android.server.usage.AppStandbyController $r1;

        r0 := @this: com.android.server.usage.AppStandbyController$SettingsObserver;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.usage.AppStandbyController$SettingsObserver: void updateSettings()>();

        $r1 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        virtualinvoke $r1.<com.android.server.usage.AppStandbyController: void postOneTimeCheckIdleStates()>();

        return;
    }

    long[] parseLongArray(java.lang.String, long[], long[])
    {
        com.android.server.usage.AppStandbyController$SettingsObserver r0;
        long[] r1, r14, r15, r16;
        java.lang.String[] r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i12, i13, $i14;
        int[] $r3, $r4, $r5, $r11, $r17;
        java.lang.String $r6, $r7, $r9, $r10, r13;
        long $l5, $l6, $l7, $l8, $l9, $l10;
        java.time.Duration $r8;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.usage.AppStandbyController$SettingsObserver;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: long[];

        r14 := @parameter2: long[];

        if r13 != null goto label01;

        return r1;

     label01:
        $z0 = virtualinvoke r13.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        return r1;

     label02:
        r2 = virtualinvoke r13.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof r2;

        $r3 = staticinvoke <com.android.server.usage.AppStandbyController: int[] access$2400()>();

        $i1 = lengthof $r3;

        if $i0 != $i1 goto label13;

        r15 = r14;

        $i2 = lengthof r14;

        $r4 = staticinvoke <com.android.server.usage.AppStandbyController: int[] access$2400()>();

        $i3 = lengthof $r4;

        if $i2 == $i3 goto label03;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("AppStandbyController", "minValues array is the wrong size");

        $r11 = staticinvoke <com.android.server.usage.AppStandbyController: int[] access$2400()>();

        $i12 = lengthof $r11;

        r15 = newarray (long)[$i12];

     label03:
        $r5 = staticinvoke <com.android.server.usage.AppStandbyController: int[] access$2400()>();

        $i4 = lengthof $r5;

        r16 = newarray (long)[$i4];

        i13 = 0;

     label04:
        $r17 = staticinvoke <com.android.server.usage.AppStandbyController: int[] access$2400()>();

        $i14 = lengthof $r17;

        if i13 >= $i14 goto label12;

     label05:
        $r6 = r2[i13];

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("P");

        if $z1 != 0 goto label09;

        $r9 = r2[i13];

        $z2 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("p");

        if $z2 == 0 goto label07;

     label06:
        goto label09;

     label07:
        $l8 = r15[i13];

        $r10 = r2[i13];

        $l9 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r10);

        $l10 = staticinvoke <java.lang.Math: long max(long,long)>($l8, $l9);

        r16[i13] = $l10;

     label08:
        goto label10;

     label09:
        $l5 = r15[i13];

        $r7 = r2[i13];

        $r8 = staticinvoke <java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>($r7);

        $l6 = virtualinvoke $r8.<java.time.Duration: long toMillis()>();

        $l7 = staticinvoke <java.lang.Math: long max(long,long)>($l5, $l6);

        r16[i13] = $l7;

     label10:
        i13 = i13 + 1;

        goto label04;

     label11:
        $r12 := @caughtexception;

        return r1;

     label12:
        return r16;

     label13:
        return r1;

        catch java.lang.NumberFormatException from label05 to label06 with label11;
        catch java.time.format.DateTimeParseException from label05 to label06 with label11;
        catch java.lang.NumberFormatException from label07 to label08 with label11;
        catch java.time.format.DateTimeParseException from label07 to label08 with label11;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.time.format.DateTimeParseException from label09 to label10 with label11;
    }

    void registerObserver()
    {
        com.android.server.usage.AppStandbyController$SettingsObserver r0;
        android.content.ContentResolver r1;
        com.android.server.usage.AppStandbyController $r2;
        android.content.Context $r3;
        android.net.Uri $r4, $r5, $r6, $r7;

        r0 := @this: com.android.server.usage.AppStandbyController$SettingsObserver;

        $r2 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r3 = staticinvoke <com.android.server.usage.AppStandbyController: android.content.Context access$1800(com.android.server.usage.AppStandbyController)>($r2);

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("app_idle_constants");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r4, 0, r0);

        $r5 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("app_standby_enabled");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r5, 0, r0);

        $r6 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("enable_restricted_bucket");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r6, 0, r0);

        $r7 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("adaptive_battery_management_enabled");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r7, 0, r0);

        return;
    }

    void updateSettings()
    {
        com.android.server.usage.AppStandbyController$SettingsObserver r0;
        com.android.server.usage.AppStandbyController $r1, $r5, $r7, $r12, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r41, $r45, $r46, $r48, r62;
        com.android.server.usage.AppStandbyController$Injector $r2, $r43, $r47, $r49;
        android.util.KeyValueListParser $r3, $r6, $r11, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r42, $r44;
        java.lang.String $r4, $r54, $r56, r60, r61;
        long[] $r8, $r9, $r10, $r13, $r14, $r15, $r17;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        boolean $z0, $z1, $z3;
        java.lang.Throwable $r50, $r51;
        java.lang.Object r59;
        java.lang.StringBuilder r64;
        java.lang.IllegalArgumentException r65;

        r0 := @this: com.android.server.usage.AppStandbyController$SettingsObserver;

     label01:
        $r3 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $r1 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r2 = $r1.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r4 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: java.lang.String getAppIdleSettings()>();

        virtualinvoke $r3.<android.util.KeyValueListParser: void setString(java.lang.String)>($r4);

     label02:
        goto label04;

     label03:
        $r51 := @caughtexception;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value for app idle settings: ");

        r65 = (java.lang.IllegalArgumentException) $r51;

        $r54 = virtualinvoke r65.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppStandbyController", $r56);

     label04:
        $r5 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        r59 = staticinvoke <com.android.server.usage.AppStandbyController: java.lang.Object access$1600(com.android.server.usage.AppStandbyController)>($r5);

        entermonitor r59;

     label05:
        $r6 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        r60 = virtualinvoke $r6.<android.util.KeyValueListParser: java.lang.String getString(java.lang.String,java.lang.String)>("screen_thresholds", null);

        $r7 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r8 = staticinvoke <com.android.server.usage.AppStandbyController: long[] access$1900()>();

        $r9 = staticinvoke <com.android.server.usage.AppStandbyController: long[] access$2000()>();

        $r10 = virtualinvoke r0.<com.android.server.usage.AppStandbyController$SettingsObserver: long[] parseLongArray(java.lang.String,long[],long[])>(r60, $r8, $r9);

        $r7.<com.android.server.usage.AppStandbyController: long[] mAppStandbyScreenThresholds> = $r10;

        $r11 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        r61 = virtualinvoke $r11.<android.util.KeyValueListParser: java.lang.String getString(java.lang.String,java.lang.String)>("elapsed_thresholds", null);

        $r12 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r13 = staticinvoke <com.android.server.usage.AppStandbyController: long[] access$2100()>();

        $r14 = staticinvoke <com.android.server.usage.AppStandbyController: long[] access$2200()>();

        $r15 = virtualinvoke r0.<com.android.server.usage.AppStandbyController$SettingsObserver: long[] parseLongArray(java.lang.String,long[],long[])>(r61, $r13, $r14);

        $r12.<com.android.server.usage.AppStandbyController: long[] mAppStandbyElapsedThresholds> = $r15;

        $r18 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r16 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r17 = $r16.<com.android.server.usage.AppStandbyController: long[] mAppStandbyElapsedThresholds>;

        $l0 = $r17[1];

        $l1 = $l0 / 4L;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, 14400000L);

        $r18.<com.android.server.usage.AppStandbyController: long mCheckIdleIntervalMillis> = $l2;

        $r20 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r19 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l3 = virtualinvoke $r19.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("strong_usage_duration", 3600000L);

        $r20.<com.android.server.usage.AppStandbyController: long mStrongUsageTimeoutMillis> = $l3;

        $r22 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r21 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l4 = virtualinvoke $r21.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("notification_seen_duration", 43200000L);

        $r22.<com.android.server.usage.AppStandbyController: long mNotificationSeenTimeoutMillis> = $l4;

        $r24 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r23 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l5 = virtualinvoke $r23.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("system_update_usage_duration", 7200000L);

        $r24.<com.android.server.usage.AppStandbyController: long mSystemUpdateUsageTimeoutMillis> = $l5;

        $r26 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r25 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l6 = virtualinvoke $r25.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("prediction_timeout", 43200000L);

        $r26.<com.android.server.usage.AppStandbyController: long mPredictionTimeoutMillis> = $l6;

        $r28 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r27 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l7 = virtualinvoke $r27.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("sync_adapter_duration", 600000L);

        $r28.<com.android.server.usage.AppStandbyController: long mSyncAdapterTimeoutMillis> = $l7;

        $r30 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r29 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l8 = virtualinvoke $r29.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("exempted_sync_scheduled_nd_duration", 600000L);

        $r30.<com.android.server.usage.AppStandbyController: long mExemptedSyncScheduledNonDozeTimeoutMillis> = $l8;

        $r32 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r31 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l9 = virtualinvoke $r31.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("exempted_sync_scheduled_d_duration", 14400000L);

        $r32.<com.android.server.usage.AppStandbyController: long mExemptedSyncScheduledDozeTimeoutMillis> = $l9;

        $r34 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r33 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l10 = virtualinvoke $r33.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("exempted_sync_start_duration", 600000L);

        $r34.<com.android.server.usage.AppStandbyController: long mExemptedSyncStartTimeoutMillis> = $l10;

        $r36 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r35 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l11 = virtualinvoke $r35.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("unexempted_sync_scheduled_duration", 600000L);

        $r36.<com.android.server.usage.AppStandbyController: long mUnexemptedSyncScheduledTimeoutMillis> = $l11;

        $r38 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r37 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l12 = virtualinvoke $r37.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("system_interaction_duration", 600000L);

        $r38.<com.android.server.usage.AppStandbyController: long mSystemInteractionTimeoutMillis> = $l12;

        $r40 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r39 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l13 = virtualinvoke $r39.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("initial_foreground_service_start_duration", 1800000L);

        $r40.<com.android.server.usage.AppStandbyController: long mInitialForegroundServiceStartTimeoutMillis> = $l13;

        $r41 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r43 = $r41.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r42 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $l14 = virtualinvoke $r42.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("auto_restricted_bucket_delay_ms", 86400000L);

        $l15 = staticinvoke <java.lang.Math: long max(long,long)>(7200000L, $l14);

        $r43.<com.android.server.usage.AppStandbyController$Injector: long mAutoRestrictedBucketDelayMs> = $l15;

        $r45 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r44 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: android.util.KeyValueListParser mParser>;

        $z0 = virtualinvoke $r44.<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)>("cross_profile_apps_share_standby_buckets", 1);

        $r45.<com.android.server.usage.AppStandbyController: boolean mLinkCrossProfileApps> = $z0;

        $r48 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r46 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r47 = $r46.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z1 = virtualinvoke $r47.<com.android.server.usage.AppStandbyController$Injector: boolean isRestrictedBucketEnabled()>();

        staticinvoke <com.android.server.usage.AppStandbyController: boolean access$2302(com.android.server.usage.AppStandbyController,boolean)>($r48, $z1);

     label06:
        exitmonitor r59;

     label07:
        r62 = r0.<com.android.server.usage.AppStandbyController$SettingsObserver: com.android.server.usage.AppStandbyController this$0>;

        $r49 = r62.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z3 = virtualinvoke $r49.<com.android.server.usage.AppStandbyController$Injector: boolean isAppIdleEnabled()>();

        virtualinvoke r62.<com.android.server.usage.AppStandbyController: void setAppIdleEnabled(boolean)>($z3);

        return;

     label08:
        $r50 := @caughtexception;

     label09:
        exitmonitor r59;

     label10:
        throw $r50;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public static void <clinit>()
    {
        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_UNEXEMPTED_SYNC_SCHEDULED_HOLD_DURATION> = "unexempted_sync_scheduled_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_SYSTEM_UPDATE_HOLD_DURATION> = "system_update_usage_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_SYSTEM_INTERACTION_HOLD_DURATION> = "system_interaction_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_SYNC_ADAPTER_HOLD_DURATION> = "sync_adapter_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_STRONG_USAGE_HOLD_DURATION> = "strong_usage_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_SCREEN_TIME_THRESHOLDS> = "screen_thresholds";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_PREDICTION_TIMEOUT> = "prediction_timeout";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_NOTIFICATION_SEEN_HOLD_DURATION> = "notification_seen_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_INITIAL_FOREGROUND_SERVICE_START_HOLD_DURATION> = "initial_foreground_service_start_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_EXEMPTED_SYNC_START_HOLD_DURATION> = "exempted_sync_start_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_EXEMPTED_SYNC_SCHEDULED_NON_DOZE_HOLD_DURATION> = "exempted_sync_scheduled_nd_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_EXEMPTED_SYNC_SCHEDULED_DOZE_HOLD_DURATION> = "exempted_sync_scheduled_d_duration";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_ELAPSED_TIME_THRESHOLDS> = "elapsed_thresholds";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_CROSS_PROFILE_APPS_SHARE_STANDBY_BUCKETS> = "cross_profile_apps_share_standby_buckets";

        <com.android.server.usage.AppStandbyController$SettingsObserver: java.lang.String KEY_AUTO_RESTRICTED_BUCKET_DELAY_MS> = "auto_restricted_bucket_delay_ms";

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_UNEXEMPTED_SYNC_SCHEDULED_TIMEOUT> = 600000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_SYSTEM_UPDATE_TIMEOUT> = 7200000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_SYSTEM_INTERACTION_TIMEOUT> = 600000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_SYNC_ADAPTER_TIMEOUT> = 600000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_STRONG_USAGE_TIMEOUT> = 3600000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_NOTIFICATION_TIMEOUT> = 43200000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_INITIAL_FOREGROUND_SERVICE_START_TIMEOUT> = 1800000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_EXEMPTED_SYNC_START_TIMEOUT> = 600000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_EXEMPTED_SYNC_SCHEDULED_NON_DOZE_TIMEOUT> = 600000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_EXEMPTED_SYNC_SCHEDULED_DOZE_TIMEOUT> = 14400000L;

        <com.android.server.usage.AppStandbyController$SettingsObserver: boolean DEFAULT_CROSS_PROFILE_APPS_SHARE_STANDBY_BUCKETS> = 1;

        <com.android.server.usage.AppStandbyController$SettingsObserver: long DEFAULT_AUTO_RESTRICTED_BUCKET_DELAY_MS> = 86400000L;

        return;
    }
}
