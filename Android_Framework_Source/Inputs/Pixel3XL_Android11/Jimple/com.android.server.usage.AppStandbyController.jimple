public class com.android.server.usage.AppStandbyController extends java.lang.Object implements com.android.server.usage.AppStandbyInternal
{
    static final boolean COMPRESS_TIME;
    static final boolean DEBUG;
    private static final long DEFAULT_PREDICTION_TIMEOUT;
    private static final long[] ELAPSED_TIME_THRESHOLDS;
    private static final int HEADLESS_APP_CHECK_FLAGS;
    private static final long[] MINIMUM_ELAPSED_TIME_THRESHOLDS;
    private static final long[] MINIMUM_SCREEN_TIME_THRESHOLDS;
    static final int MSG_CHECK_IDLE_STATES;
    static final int MSG_CHECK_PACKAGE_IDLE_STATE;
    static final int MSG_FORCE_IDLE_STATE;
    static final int MSG_INFORM_LISTENERS;
    static final int MSG_ONE_TIME_CHECK_IDLE_STATES;
    static final int MSG_PAROLE_STATE_CHANGED;
    static final int MSG_REPORT_CONTENT_PROVIDER_USAGE;
    static final int MSG_REPORT_EXEMPTED_SYNC_START;
    static final int MSG_REPORT_SYNC_SCHEDULED;
    private static final long NETWORK_SCORER_CACHE_DURATION_MILLIS;
    private static final long ONE_DAY;
    private static final long ONE_HOUR;
    private static final long ONE_MINUTE;
    private static final long[] SCREEN_TIME_THRESHOLDS;
    private static final java.lang.String TAG;
    private static final int[] THRESHOLD_BUCKETS;
    private static final long WAIT_FOR_ADMIN_DATA_TIMEOUT_MS;
    static final java.util.ArrayList sStandbyUpdatePool;
    private final android.util.SparseArray mActiveAdminApps;
    private final java.util.concurrent.CountDownLatch mAdminDataAvailableLatch;
    private boolean mAllowRestrictedBucket;
    private volatile boolean mAppIdleEnabled;
    private com.android.server.usage.AppIdleHistory mAppIdleHistory;
    private final java.lang.Object mAppIdleLock;
    long[] mAppStandbyElapsedThresholds;
    long[] mAppStandbyScreenThresholds;
    private android.appwidget.AppWidgetManager mAppWidgetManager;
    private volatile java.lang.String mCachedNetworkScorer;
    private volatile long mCachedNetworkScorerAtMillis;
    private java.util.List mCarrierPrivilegedApps;
    long mCheckIdleIntervalMillis;
    private final android.content.Context mContext;
    private final android.hardware.display.DisplayManager$DisplayListener mDisplayListener;
    long mExemptedSyncScheduledDozeTimeoutMillis;
    long mExemptedSyncScheduledNonDozeTimeoutMillis;
    long mExemptedSyncStartTimeoutMillis;
    private final com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler;
    private boolean mHaveCarrierPrivilegedApps;
    private final android.util.ArraySet mHeadlessSystemApps;
    long mInitialForegroundServiceStartTimeoutMillis;
    com.android.server.usage.AppStandbyController$Injector mInjector;
    private boolean mIsCharging;
    boolean mLinkCrossProfileApps;
    long mNotificationSeenTimeoutMillis;
    private final java.util.ArrayList mPackageAccessListeners;
    private android.content.pm.PackageManager mPackageManager;
    private boolean mPendingInitializeDefaults;
    private volatile boolean mPendingOneTimeCheckIdleStates;
    long mPredictionTimeoutMillis;
    long mStrongUsageTimeoutMillis;
    long mSyncAdapterTimeoutMillis;
    long mSystemInteractionTimeoutMillis;
    private boolean mSystemServicesReady;
    long mSystemUpdateUsageTimeoutMillis;
    long mUnexemptedSyncScheduledTimeoutMillis;

    static void <clinit>()
    {
        long[] $r0, $r1, $r2, $r3;
        int[] $r4;
        java.util.ArrayList $r5;

        <com.android.server.usage.AppStandbyController: long WAIT_FOR_ADMIN_DATA_TIMEOUT_MS> = 10000L;

        <com.android.server.usage.AppStandbyController: java.lang.String TAG> = "AppStandbyController";

        <com.android.server.usage.AppStandbyController: long ONE_MINUTE> = 60000L;

        <com.android.server.usage.AppStandbyController: long ONE_HOUR> = 3600000L;

        <com.android.server.usage.AppStandbyController: long ONE_DAY> = 86400000L;

        <com.android.server.usage.AppStandbyController: long NETWORK_SCORER_CACHE_DURATION_MILLIS> = 5000L;

        <com.android.server.usage.AppStandbyController: int MSG_REPORT_SYNC_SCHEDULED> = 12;

        <com.android.server.usage.AppStandbyController: int MSG_REPORT_EXEMPTED_SYNC_START> = 13;

        <com.android.server.usage.AppStandbyController: int MSG_REPORT_CONTENT_PROVIDER_USAGE> = 8;

        <com.android.server.usage.AppStandbyController: int MSG_PAROLE_STATE_CHANGED> = 9;

        <com.android.server.usage.AppStandbyController: int MSG_ONE_TIME_CHECK_IDLE_STATES> = 10;

        <com.android.server.usage.AppStandbyController: int MSG_INFORM_LISTENERS> = 3;

        <com.android.server.usage.AppStandbyController: int MSG_FORCE_IDLE_STATE> = 4;

        <com.android.server.usage.AppStandbyController: int MSG_CHECK_PACKAGE_IDLE_STATE> = 11;

        <com.android.server.usage.AppStandbyController: int MSG_CHECK_IDLE_STATES> = 5;

        <com.android.server.usage.AppStandbyController: int HEADLESS_APP_CHECK_FLAGS> = 786945;

        <com.android.server.usage.AppStandbyController: long DEFAULT_PREDICTION_TIMEOUT> = 43200000L;

        <com.android.server.usage.AppStandbyController: boolean DEBUG> = 0;

        <com.android.server.usage.AppStandbyController: boolean COMPRESS_TIME> = 0;

        $r0 = newarray (long)[5];

        $r0[0] = 0L;

        $r0[1] = 0L;

        $r0[2] = 3600000L;

        $r0[3] = 7200000L;

        $r0[4] = 21600000L;

        <com.android.server.usage.AppStandbyController: long[] SCREEN_TIME_THRESHOLDS> = $r0;

        $r1 = newarray (long)[5];

        $r1[0] = 0L;

        $r1[1] = 0L;

        $r1[2] = 0L;

        $r1[3] = 1800000L;

        $r1[4] = 3600000L;

        <com.android.server.usage.AppStandbyController: long[] MINIMUM_SCREEN_TIME_THRESHOLDS> = $r1;

        $r2 = newarray (long)[5];

        $r2[0] = 0L;

        $r2[1] = 43200000L;

        $r2[2] = 86400000L;

        $r2[3] = 172800000L;

        $r2[4] = 2592000000L;

        <com.android.server.usage.AppStandbyController: long[] ELAPSED_TIME_THRESHOLDS> = $r2;

        $r3 = newarray (long)[5];

        $r3[0] = 0L;

        $r3[1] = 3600000L;

        $r3[2] = 3600000L;

        $r3[3] = 7200000L;

        $r3[4] = 345600000L;

        <com.android.server.usage.AppStandbyController: long[] MINIMUM_ELAPSED_TIME_THRESHOLDS> = $r3;

        $r4 = newarray (int)[5];

        $r4[0] = 10;

        $r4[1] = 20;

        $r4[2] = 30;

        $r4[3] = 40;

        $r4[4] = 45;

        <com.android.server.usage.AppStandbyController: int[] THRESHOLD_BUCKETS> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(4);

        <com.android.server.usage.AppStandbyController: java.util.ArrayList sStandbyUpdatePool> = $r5;

        return;
    }

    public void <init>(android.content.Context, android.os.Looper)
    {
        com.android.server.usage.AppStandbyController r0;
        android.content.Context r1;
        android.os.Looper r2;
        com.android.server.usage.AppStandbyController$Injector $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        $r3 = new com.android.server.usage.AppStandbyController$Injector;

        specialinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: void <init>(android.content.Context,android.os.Looper)>(r1, r2);

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void <init>(com.android.server.usage.AppStandbyController$Injector)>($r3);

        return;
    }

    void <init>(com.android.server.usage.AppStandbyController$Injector)
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppStandbyController$Lock $r1;
        java.util.ArrayList $r2;
        android.util.SparseArray $r3;
        android.util.ArraySet $r4;
        java.util.concurrent.CountDownLatch $r5;
        long[] $r6, $r7;
        com.android.server.usage.AppStandbyController$1 $r8;
        android.content.Context $r9, $r13, $r17, $r24;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r10, $r25;
        com.android.server.usage.AppStandbyController$Injector $r11, $r19, $r21, r29;
        android.os.Looper $r12;
        android.content.pm.PackageManager $r14;
        com.android.server.usage.AppStandbyController$DeviceStateReceiver $r15;
        android.content.IntentFilter $r16, $r22;
        java.io.File $r20;
        long $l0;
        com.android.server.usage.AppStandbyController$PackageReceiver $r23;
        android.os.UserHandle $r26;
        java.lang.Throwable $r28;
        java.lang.Object r32;
        com.android.server.usage.AppIdleHistory r33;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r29 := @parameter0: com.android.server.usage.AppStandbyController$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.server.usage.AppStandbyController$Lock;

        specialinvoke $r1.<com.android.server.usage.AppStandbyController$Lock: void <init>()>();

        r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps> = $r3;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps> = $r4;

        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.usage.AppStandbyController: java.util.concurrent.CountDownLatch mAdminDataAvailableLatch> = $r5;

        r0.<com.android.server.usage.AppStandbyController: java.lang.String mCachedNetworkScorer> = null;

        r0.<com.android.server.usage.AppStandbyController: long mCachedNetworkScorerAtMillis> = 0L;

        $r6 = <com.android.server.usage.AppStandbyController: long[] SCREEN_TIME_THRESHOLDS>;

        r0.<com.android.server.usage.AppStandbyController: long[] mAppStandbyScreenThresholds> = $r6;

        $r7 = <com.android.server.usage.AppStandbyController: long[] ELAPSED_TIME_THRESHOLDS>;

        r0.<com.android.server.usage.AppStandbyController: long[] mAppStandbyElapsedThresholds> = $r7;

        r0.<com.android.server.usage.AppStandbyController: boolean mSystemServicesReady> = 0;

        $r8 = new com.android.server.usage.AppStandbyController$1;

        specialinvoke $r8.<com.android.server.usage.AppStandbyController$1: void <init>(com.android.server.usage.AppStandbyController)>(r0);

        r0.<com.android.server.usage.AppStandbyController: android.hardware.display.DisplayManager$DisplayListener mDisplayListener> = $r8;

        r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector> = r29;

        $r9 = virtualinvoke r29.<com.android.server.usage.AppStandbyController$Injector: android.content.Context getContext()>();

        r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext> = $r9;

        $r10 = new com.android.server.usage.AppStandbyController$AppStandbyHandler;

        $r11 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r12 = virtualinvoke $r11.<com.android.server.usage.AppStandbyController$Injector: android.os.Looper getLooper()>();

        specialinvoke $r10.<com.android.server.usage.AppStandbyController$AppStandbyHandler: void <init>(com.android.server.usage.AppStandbyController,android.os.Looper)>(r0, $r12);

        r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler> = $r10;

        $r13 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager> = $r14;

        $r15 = new com.android.server.usage.AppStandbyController$DeviceStateReceiver;

        specialinvoke $r15.<com.android.server.usage.AppStandbyController$DeviceStateReceiver: void <init>(com.android.server.usage.AppStandbyController,com.android.server.usage.AppStandbyController$1)>(r0, null);

        $r16 = new android.content.IntentFilter;

        specialinvoke $r16.<android.content.IntentFilter: void <init>(java.lang.String)>("android.os.action.CHARGING");

        virtualinvoke $r16.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.DISCHARGING");

        virtualinvoke $r16.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.POWER_SAVE_WHITELIST_CHANGED");

        $r17 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        virtualinvoke $r17.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r15, $r16);

        r32 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r32;

     label1:
        r33 = new com.android.server.usage.AppIdleHistory;

        $r19 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r20 = virtualinvoke $r19.<com.android.server.usage.AppStandbyController$Injector: java.io.File getDataSystemDirectory()>();

        $r21 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $l0 = virtualinvoke $r21.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        specialinvoke r33.<com.android.server.usage.AppIdleHistory: void <init>(java.io.File,long)>($r20, $l0);

        r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory> = r33;

        exitmonitor r32;

     label2:
        $r22 = new android.content.IntentFilter;

        specialinvoke $r22.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r22.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke $r22.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke $r22.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r22.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r24 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r23 = new com.android.server.usage.AppStandbyController$PackageReceiver;

        specialinvoke $r23.<com.android.server.usage.AppStandbyController$PackageReceiver: void <init>(com.android.server.usage.AppStandbyController,com.android.server.usage.AppStandbyController$1)>(r0, null);

        $r26 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r25 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        virtualinvoke $r24.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r23, $r26, $r22, null, $r25);

        return;

     label3:
        $r28 := @caughtexception;

     label4:
        exitmonitor r32;

     label5:
        throw $r28;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void access$1000(com.android.server.usage.AppStandbyController, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportExemptedSyncScheduled(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$1100(com.android.server.usage.AppStandbyController, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportUnexemptedSyncScheduled(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$1200(com.android.server.usage.AppStandbyController, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportExemptedSyncStart(java.lang.String,int)>(r1, i0);

        return;
    }

    static boolean access$1300(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mSystemServicesReady>;

        return $z0;
    }

    static void access$1400(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void updatePowerWhitelistCache()>();

        return;
    }

    static boolean access$1500(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $z0 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isDisplayOn()>();

        return $z0;
    }

    static java.lang.Object access$1600(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        return $r1;
    }

    static com.android.server.usage.AppIdleHistory access$1700(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppIdleHistory $r1;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        return $r1;
    }

    static android.content.Context access$1800(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        return $r1;
    }

    static long[] access$1900()
    {
        long[] $r0;

        $r0 = <com.android.server.usage.AppStandbyController: long[] SCREEN_TIME_THRESHOLDS>;

        return $r0;
    }

    static void access$200(com.android.server.usage.AppStandbyController, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void evaluateSystemAppException(java.lang.String,int)>(r1, i0);

        return;
    }

    static long[] access$2000()
    {
        long[] $r0;

        $r0 = <com.android.server.usage.AppStandbyController: long[] MINIMUM_SCREEN_TIME_THRESHOLDS>;

        return $r0;
    }

    static long[] access$2100()
    {
        long[] $r0;

        $r0 = <com.android.server.usage.AppStandbyController: long[] ELAPSED_TIME_THRESHOLDS>;

        return $r0;
    }

    static long[] access$2200()
    {
        long[] $r0;

        $r0 = <com.android.server.usage.AppStandbyController: long[] MINIMUM_ELAPSED_TIME_THRESHOLDS>;

        return $r0;
    }

    static boolean access$2302(com.android.server.usage.AppStandbyController, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean z0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        z0 := @parameter1: boolean;

        r0.<com.android.server.usage.AppStandbyController: boolean mAllowRestrictedBucket> = z0;

        return z0;
    }

    static int[] access$2400()
    {
        int[] $r0;

        $r0 = <com.android.server.usage.AppStandbyController: int[] THRESHOLD_BUCKETS>;

        return $r0;
    }

    static com.android.server.usage.AppStandbyController$AppStandbyHandler access$300(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r1;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        return $r1;
    }

    static void access$400(com.android.server.usage.AppStandbyController, java.lang.String, int, int, int, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1, i2;
        boolean z0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void informListeners(java.lang.String,int,int,int,boolean)>(r1, i0, i1, i2, z0);

        return;
    }

    static boolean access$500(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        return $z0;
    }

    static void access$600(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void waitForAdminData()>();

        return;
    }

    static void access$700(com.android.server.usage.AppStandbyController, java.lang.String, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportContentProviderUsage(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    static void access$800(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void informParoleStateChanged()>();

        return;
    }

    static void access$900(com.android.server.usage.AppStandbyController, java.lang.String, int, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1;
        long l2;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void checkAndUpdateStandbyState(java.lang.String,int,int,long)>(r1, i0, i1, l2);

        return;
    }

    private void checkAndUpdateStandbyState(java.lang.String, int, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i2, i3, $i5, $i14, $i15, i16, i17, i18, i19, i20, i21, i23, i28, i29, i30;
        long l1, l4, $l6, $l7, $l8, $l10, $l12, $l25, $l26;
        boolean z0, $z1;
        com.android.server.usage.AppIdleHistory $r1, $r2, $r4, $r16;
        com.android.server.usage.AppStandbyController$Injector $r3;
        byte $b9, $b11, $b13, $b27;
        android.content.pm.PackageManager $r5;
        java.lang.Throwable $r6, $r7, $r9, r20;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.String r10;
        java.lang.Object r12, r14, r17, r19;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r15;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i16 := @parameter2: int;

        l1 := @parameter3: long;

        if i16 > 0 goto label04;

     label01:
        $r5 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        i16 = virtualinvoke $r5.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r10, i0);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        return;

     label04:
        $i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i16);

        i2 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int getAppMinBucket(java.lang.String,int,int)>(r10, $i5, i0);

        if i2 > 10 goto label10;

        r12 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r12;

     label05:
        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int)>(r10, i0, l1, i2, 256);

        exitmonitor r12;

     label06:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void maybeInformListeners(java.lang.String,int,long,int,int,boolean)>(r10, i0, l1, i2, 256, 0);

        goto label57;

     label07:
        $r6 := @caughtexception;

     label08:
        exitmonitor r12;

     label09:
        throw $r6;

     label10:
        r14 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r14;

     label11:
        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        r15 = virtualinvoke $r1.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getAppUsageHistory(java.lang.String,int,long)>(r10, i0, l1);

        i17 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label12:
        i18 = i17 & 65280;

        if i18 != 1024 goto label15;

     label13:
        exitmonitor r14;

     label14:
        return;

     label15:
        i3 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

     label16:
        if i3 != 50 goto label19;

     label17:
        exitmonitor r14;

     label18:
        return;

     label19:
        i19 = staticinvoke <java.lang.Math: int max(int,int)>(i3, 10);

        z0 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean predictionTimedOut(com.android.server.usage.AppIdleHistory$AppUsageHistory,long)>(r15, l1);

     label20:
        if i18 == 256 goto label21;

        if i18 == 768 goto label21;

        if i18 == 512 goto label21;

        if z0 == 0 goto label26;

     label21:
        if z0 != 0 goto label24;

     label22:
        $i14 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastPredictedBucket>;

        if $i14 < 10 goto label24;

        $i15 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastPredictedBucket>;

        if $i15 > 40 goto label24;

        i19 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastPredictedBucket>;

     label23:
        i17 = 1281;

        goto label26;

     label24:
        i19 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int getBucketForLocked(java.lang.String,int,long)>(r10, i0, l1);

     label25:
        i17 = 512;

     label26:
        $r16 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        l4 = virtualinvoke $r16.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

     label27:
        if i19 < 10 goto label32;

     label28:
        $l12 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime>;

        $b13 = $l12 cmp l4;

        if $b13 <= 0 goto label32;

     label29:
        i20 = 10;

     label30:
        i21 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label31:
        goto label40;

     label32:
        if i19 < 20 goto label39;

     label33:
        $l10 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime>;

        $b11 = $l10 cmp l4;

        if $b11 <= 0 goto label39;

     label34:
        if 20 != i3 goto label37;

     label35:
        i23 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label36:
        goto label38;

     label37:
        i23 = 775;

     label38:
        i21 = i23;

        i20 = 20;

        goto label40;

     label39:
        i20 = i19;

        i21 = i17;

     label40:
        $l25 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastRestrictAttemptElapsedTime>;

        $l26 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime>;

        $b27 = $l25 cmp $l26;

        if $b27 <= 0 goto label44;

        $l6 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime>;

        $l7 = l4 - $l6;

        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $l8 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: long getAutoRestrictedBucketDelayMs()>();

        $b9 = $l7 cmp $l8;

        if $b9 < 0 goto label44;

     label41:
        i20 = 45;

     label42:
        i28 = r15.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int lastRestrictReason>;

     label43:
        goto label45;

     label44:
        i28 = i21;

     label45:
        i29 = i20;

        if i20 != 45 goto label48;

        i29 = i20;

     label46:
        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAllowRestrictedBucket>;

        if $z1 != 0 goto label48;

     label47:
        i29 = 40;

     label48:
        if i29 <= i2 goto label49;

        i30 = i2;

        goto label50;

     label49:
        i30 = i29;

     label50:
        if i3 != i30 goto label52;

        if z0 == 0 goto label51;

        goto label52;

     label51:
        goto label55;

     label52:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int)>(r10, i0, l1, i30, i28);

     label53:
        r17 = r14;

     label54:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void maybeInformListeners(java.lang.String,int,long,int,int,boolean)>(r10, i0, l1, i30, i28, 0);

     label55:
        r17 = r14;

     label56:
        exitmonitor r14;

     label57:
        return;

     label58:
        $r9 := @caughtexception;

        r19 = r14;

        r20 = $r9;

     label59:
        r17 = r19;

     label60:
        exitmonitor r19;

     label61:
        throw r20;

     label62:
        $r7 := @caughtexception;

        r20 = $r7;

        r19 = r17;

        goto label59;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label58;
        catch java.lang.Throwable from label13 to label14 with label58;
        catch java.lang.Throwable from label15 to label16 with label58;
        catch java.lang.Throwable from label17 to label18 with label58;
        catch java.lang.Throwable from label19 to label20 with label58;
        catch java.lang.Throwable from label22 to label23 with label58;
        catch java.lang.Throwable from label24 to label25 with label58;
        catch java.lang.Throwable from label26 to label27 with label58;
        catch java.lang.Throwable from label28 to label29 with label58;
        catch java.lang.Throwable from label30 to label31 with label58;
        catch java.lang.Throwable from label33 to label34 with label58;
        catch java.lang.Throwable from label35 to label36 with label58;
        catch java.lang.Throwable from label40 to label41 with label58;
        catch java.lang.Throwable from label42 to label43 with label58;
        catch java.lang.Throwable from label46 to label47 with label58;
        catch java.lang.Throwable from label52 to label53 with label58;
        catch java.lang.Throwable from label54 to label55 with label62;
        catch java.lang.Throwable from label56 to label57 with label62;
        catch java.lang.Throwable from label60 to label61 with label62;
    }

    private void evaluateSystemAppException(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        boolean $z0;
        android.content.pm.PackageManager $r1;
        android.content.pm.PackageInfo $r2;
        java.lang.Throwable $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.util.ArraySet $r5, r8;
        java.lang.String r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mSystemServicesReady>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        $r2 = virtualinvoke $r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r6, 786945, i0);

        specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean evaluateSystemAppException(android.content.pm.PackageInfo)>($r2);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r8 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        entermonitor r8;

     label4:
        $r5 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        virtualinvoke $r5.<android.util.ArraySet: boolean remove(java.lang.Object)>(r6);

        exitmonitor r8;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r8;

     label8:
        throw $r3;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean evaluateSystemAppException(android.content.pm.PackageInfo)
    {
        com.android.server.usage.AppStandbyController r0;
        android.util.ArraySet r1, $r6, $r9;
        android.content.pm.ApplicationInfo $r2, $r3, $r10;
        boolean $z0, $z1, z2, z3;
        android.content.pm.ActivityInfo[] $r4, $r7;
        java.lang.String $r5, $r8;
        int $i0;
        java.lang.Throwable $r11;
        android.content.pm.PackageInfo r12;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r12 := @parameter0: android.content.pm.PackageInfo;

        if r12 == null goto label11;

        $r2 = r12.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r2 == null goto label11;

        $r3 = r12.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r3.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z0 != 0 goto label01;

        $r10 = r12.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z1 = virtualinvoke $r10.<android.content.pm.ApplicationInfo: boolean isUpdatedSystemApp()>();

        if $z1 != 0 goto label01;

        goto label11;

     label01:
        r1 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        entermonitor r1;

     label02:
        $r4 = r12.<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] activities>;

        if $r4 == null goto label06;

        $r7 = r12.<android.content.pm.PackageInfo: android.content.pm.ActivityInfo[] activities>;

        $i0 = lengthof $r7;

        if $i0 != 0 goto label04;

     label03:
        goto label06;

     label04:
        $r9 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        $r8 = r12.<android.content.pm.PackageInfo: java.lang.String packageName>;

        z2 = virtualinvoke $r9.<android.util.ArraySet: boolean remove(java.lang.Object)>($r8);

        exitmonitor r1;

     label05:
        return z2;

     label06:
        $r6 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        $r5 = r12.<android.content.pm.PackageInfo: java.lang.String packageName>;

        z3 = virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>($r5);

        exitmonitor r1;

     label07:
        return z3;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r11;

     label11:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void fetchCarrierPrivilegedAppsLocked()
    {
        com.android.server.usage.AppStandbyController r0;
        android.telephony.TelephonyManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r2 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r1 = (android.telephony.TelephonyManager) $r3;

        $r4 = virtualinvoke r1.<android.telephony.TelephonyManager: java.util.List getCarrierPrivilegedPackagesForAllActiveSubscriptions()>();

        r0.<com.android.server.usage.AppStandbyController: java.util.List mCarrierPrivilegedApps> = $r4;

        r0.<com.android.server.usage.AppStandbyController: boolean mHaveCarrierPrivilegedApps> = 1;

        return;
    }

    private int getAppMinBucket(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        android.content.pm.PackageManager $r1;
        int $i0, $i1, i2, i3;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r3 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        $i0 = virtualinvoke $r1.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r3, i2);

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        i3 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int getAppMinBucket(java.lang.String,int,int)>(r3, $i1, i2);

     label2:
        return i3;

     label3:
        $r2 := @caughtexception;

        return 50;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private int getAppMinBucket(java.lang.String, int, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1;
        android.appwidget.AppWidgetManager r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.android.server.usage.AppStandbyController$Injector $r3, $r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label01;

        return 50;

     label01:
        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 != 0 goto label02;

        return 5;

     label02:
        if i0 >= 10000 goto label03;

        return 5;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z1 == 0 goto label04;

        return 5;

     label04:
        $z2 = r0.<com.android.server.usage.AppStandbyController: boolean mSystemServicesReady>;

        if $z2 == 0 goto label09;

        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z5 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: boolean isNonIdleWhitelisted(java.lang.String)>(r1);

        if $z5 == 0 goto label05;

        return 5;

     label05:
        $z6 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isActiveDeviceAdmin(java.lang.String,int)>(r1, i1);

        if $z6 == 0 goto label06;

        return 5;

     label06:
        $z7 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isActiveNetworkScorer(java.lang.String)>(r1);

        if $z7 == 0 goto label07;

        return 5;

     label07:
        r2 = r0.<com.android.server.usage.AppStandbyController: android.appwidget.AppWidgetManager mAppWidgetManager>;

        if r2 == null goto label08;

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z9 = virtualinvoke $r4.<com.android.server.usage.AppStandbyController$Injector: boolean isBoundWidgetPackage(android.appwidget.AppWidgetManager,java.lang.String,int)>(r2, r1, i1);

        if $z9 == 0 goto label08;

        return 10;

     label08:
        $z8 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isDeviceProvisioningPackage(java.lang.String)>(r1);

        if $z8 == 0 goto label09;

        return 5;

     label09:
        $z3 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isCarrierApp(java.lang.String)>(r1);

        if $z3 == 0 goto label10;

        return 5;

     label10:
        $z4 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isHeadlessSystemApp(java.lang.String)>(r1);

        if $z4 == 0 goto label11;

        return 10;

     label11:
        return 50;
    }

    private int getBucketForLocked(java.lang.String, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        long l0;
        long[] $r2, $r3;
        com.android.server.usage.AppIdleHistory $r4;
        int[] $r5;
        int $i1, i2, i3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        l0 := @parameter2: long;

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $r3 = r0.<com.android.server.usage.AppStandbyController: long[] mAppStandbyScreenThresholds>;

        $r2 = r0.<com.android.server.usage.AppStandbyController: long[] mAppStandbyElapsedThresholds>;

        i3 = virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: int getThresholdIndex(java.lang.String,int,long,long[],long[])>(r1, i2, l0, $r3, $r2);

        $r5 = <com.android.server.usage.AppStandbyController: int[] THRESHOLD_BUCKETS>;

        $i1 = $r5[i3];

        return $i1;
    }

    private java.util.List getCrossProfileTargets(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.usage.AppStandbyController$Injector $r2;
        java.util.List $r3, r6;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mLinkCrossProfileApps>;

        if $z0 != 0 goto label3;

        r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r1;

     label2:
        return r6;

     label3:
        exitmonitor r1;

     label4:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: java.util.List getValidCrossProfileTargets(java.lang.String,int)>(r5, i0);

        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void informListeners(java.lang.String, int, int, int, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i1, i2;
        boolean z0, z1, $z2;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener r3;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        if i1 < 40 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        r1 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        entermonitor r1;

     label03:
        $r4 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener) $r5;

        virtualinvoke r3.<com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener: void onAppIdleStateChanged(java.lang.String,int,boolean,int,int)>(r7, i0, z1, i1, i2);

     label05:
        if z0 == 0 goto label07;

     label06:
        virtualinvoke r3.<com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener: void onUserInteractionStarted(java.lang.String,int)>(r7, i0);

     label07:
        goto label04;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void informParoleStateChanged()
    {
        com.android.server.usage.AppStandbyController r0;
        boolean z0, $z1;
        java.util.ArrayList r1, $r2;
        java.lang.Object $r3;
        com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener $r4;
        java.lang.Throwable $r5;
        java.util.Iterator r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        z0 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isInParole()>();

        r1 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        r6 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener) $r3;

        virtualinvoke $r4.<com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener: void onParoleStateChanged(boolean)>(z0);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean isActiveNetworkScorer(java.lang.String)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1, $r2, $r4, $r5;
        long l0, $l1, $l2;
        com.android.server.usage.AppStandbyController$Injector $r3;
        boolean $z0, z1;
        byte $b3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r2 = r0.<com.android.server.usage.AppStandbyController: java.lang.String mCachedNetworkScorer>;

        if $r2 == null goto label1;

        $l2 = r0.<com.android.server.usage.AppStandbyController: long mCachedNetworkScorerAtMillis>;

        $l1 = l0 - 5000L;

        $b3 = $l2 cmp $l1;

        if $b3 >= 0 goto label2;

     label1:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: java.lang.String getActiveNetworkScorer()>();

        r0.<com.android.server.usage.AppStandbyController: java.lang.String mCachedNetworkScorer> = $r4;

        r0.<com.android.server.usage.AppStandbyController: long mCachedNetworkScorerAtMillis> = l0;

     label2:
        if r1 == null goto label3;

        $r5 = r0.<com.android.server.usage.AppStandbyController: java.lang.String mCachedNetworkScorer>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    private boolean isAppIdleUnfiltered(java.lang.String, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        long l1;
        java.lang.Object r1;
        boolean z0;
        com.android.server.usage.AppIdleHistory $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        z0 = virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: boolean isIdle(java.lang.String,int,long)>(r4, i0, l1);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isCarrierApp(java.lang.String)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.util.List $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mHaveCarrierPrivilegedApps>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void fetchCarrierPrivilegedAppsLocked()>();

     label2:
        $r2 = r0.<com.android.server.usage.AppStandbyController: java.util.List mCarrierPrivilegedApps>;

        if $r2 == null goto label4;

        $r3 = r0.<com.android.server.usage.AppStandbyController: java.util.List mCarrierPrivilegedApps>;

        z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r5);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        exitmonitor r1;

     label5:
        return 0;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private boolean isDeviceProvisioningPackage(java.lang.String)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1, r2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        boolean $z0, z1;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String getString(int)>(17039878);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isDisplayOn()
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppStandbyController$Injector $r1;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z0 = virtualinvoke $r1.<com.android.server.usage.AppStandbyController$Injector: boolean isDefaultDisplayOn()>();

        return $z0;
    }

    private boolean isHeadlessSystemApp(java.lang.String)
    {
        com.android.server.usage.AppStandbyController r0;
        android.util.ArraySet r1, $r2;
        boolean z0;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static boolean isUserUsage(int)
    {
        int $i0, i1, i2;
        boolean z0;

        i1 := @parameter0: int;

        z0 = 0;

        $i0 = 65280 & i1;

        if $i0 != 768 goto label3;

        i2 = i1 & 255;

        if i2 == 3 goto label1;

        if i2 != 4 goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;

     label3:
        return 0;
    }

    public static void lambda$J3RrF9pXWs15TjJGaLdogSJkcZI(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void updatePowerWhitelistCache()>();

        return;
    }

    public static void lambda$eFYmNoFgBdX9ZGJEOAzlovFS3-c(com.android.server.usage.AppStandbyController)
    {
        com.android.server.usage.AppStandbyController r0;

        r0 := @parameter0: com.android.server.usage.AppStandbyController;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void loadHeadlessSystemAppCache()>();

        return;
    }

    private void loadHeadlessSystemAppCache()
    {
        com.android.server.usage.AppStandbyController r0;
        java.util.List r1;
        int i0, i2;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1;
        java.lang.String $r5, $r8;
        android.content.pm.PackageManager $r6;
        java.lang.Object $r7;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r9;
        android.os.Message $r10;
        android.content.pm.PackageInfo r12;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading headless system app cache. appIdleEnabled=");

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AppStandbyController", $r5);

        $r6 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r6.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(786945, 0);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r12 = (android.content.pm.PackageInfo) $r7;

        if r12 == null goto label2;

        $z1 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean evaluateSystemAppException(android.content.pm.PackageInfo)>(r12);

        if $z1 == 0 goto label2;

        $r9 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r8 = r12.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r10 = virtualinvoke $r9.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(11, 0, -1, $r8);

        virtualinvoke $r10.<android.os.Message: void sendToTarget()>();

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void maybeInformListeners(java.lang.String, int, long, int, int, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i2, i3;
        long l1;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.usage.AppIdleHistory $r2;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r3, $r4;
        android.os.Message $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        com.android.server.usage.AppStandbyController$StandbyUpdateRecord r8;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $z1 = virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: boolean shouldInformListeners(java.lang.String,int,long,int)>(r7, i0, l1, i2);

        if $z1 == 0 goto label2;

        r8 = staticinvoke <com.android.server.usage.AppStandbyController$StandbyUpdateRecord: com.android.server.usage.AppStandbyController$StandbyUpdateRecord obtain(java.lang.String,int,int,int,boolean)>(r7, i0, i2, i3, z0);

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r5 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r8);

        virtualinvoke $r4.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendMessage(android.os.Message)>($r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void notifyBatteryStats(java.lang.String, int, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean z0;
        android.content.pm.PackageManager $r1;
        com.android.server.usage.AppStandbyController$Injector $r2, $r3;
        android.util.AndroidException $r4;
        java.lang.String r5;
        int i0, i1;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        $r1 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        i1 = virtualinvoke $r1.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int,int)>(r5, 8192, i0);

     label2:
        if z0 == 0 goto label5;

     label3:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: void noteEvent(int,java.lang.String,int)>(15, r5, i1);

     label4:
        goto label6;

     label5:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: void noteEvent(int,java.lang.String,int)>(16, r5, i1);

     label6:
        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label7;
        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label5 to label6 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private void postParoleStateChanged()
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r1, $r2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        virtualinvoke $r1.<com.android.server.usage.AppStandbyController$AppStandbyHandler: void removeMessages(int)>(9);

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        virtualinvoke $r2.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendEmptyMessage(int)>(9);

        return;
    }

    private boolean predictionTimedOut(com.android.server.usage.AppIdleHistory$AppUsageHistory, long)
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r1;
        long l0, $l1, $l3, $l4, $l5, $l6;
        byte $b2, $b7;
        com.android.server.usage.AppIdleHistory $r2;
        boolean z0;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: com.android.server.usage.AppIdleHistory$AppUsageHistory;

        l0 := @parameter1: long;

        $l1 = r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $l3 = virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l0);

        $l4 = r1.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastPredictedTime>;

        $l6 = $l3 - $l4;

        $l5 = r0.<com.android.server.usage.AppStandbyController: long mPredictionTimeoutMillis>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void reportContentProviderUsage(java.lang.String, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1, r11, r12;
        int i0, i5, i6, i7, i8, i9, i10, i15;
        java.lang.String[] r2;
        long l1, l2;
        java.util.List r3;
        boolean $z0, $z1;
        com.android.server.usage.AppStandbyController$Injector $r4;
        android.content.pm.PackageManager $r5;
        android.content.pm.ApplicationInfo $r6;
        java.lang.Throwable $r7, $r8, r17;
        android.content.pm.PackageManager$NameNotFoundException $r9, $r10;
        android.content.pm.PackageInfo r13;
        java.lang.Object r14, r16, r18;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        r2 = staticinvoke <android.content.ContentResolver: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>(r11, i0);

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        i5 = lengthof r2;

        i6 = 0;

     label02:
        if i6 >= i5 goto label24;

        r12 = r2[i6];

     label03:
        $r5 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        r13 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r12, 1048576, i0);

     label04:
        if r13 == null goto label21;

     label05:
        $r6 = r13.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r6 != null goto label07;

     label06:
        goto label21;

     label07:
        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label20;

        r3 = specialinvoke r0.<com.android.server.usage.AppStandbyController: java.util.List getCrossProfileTargets(java.lang.String,int)>(r12, i0);

        r14 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r14;

     label08:
        l2 = r0.<com.android.server.usage.AppStandbyController: long mSyncAdapterTimeoutMillis>;

     label09:
        r16 = r14;

        i7 = i5;

        i8 = i6;

     label10:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportNoninteractiveUsageCrossUserLocked(java.lang.String,int,int,int,long,long,java.util.List)>(r12, i0, 10, 8, l1, l2, r3);

     label11:
        r16 = r14;

        i7 = i5;

        i8 = i6;

     label12:
        exitmonitor r14;

     label13:
        goto label20;

     label14:
        $r7 := @caughtexception;

        r17 = $r7;

        r18 = r16;

        i9 = i7;

        i10 = i8;

        goto label16;

     label15:
        $r8 := @caughtexception;

        r17 = $r8;

        i10 = i6;

        i9 = i5;

        r18 = r14;

     label16:
        r16 = r18;

        i7 = i9;

        i8 = i10;

     label17:
        exitmonitor r18;

     label18:
        throw r17;

     label19:
        $r10 := @caughtexception;

        goto label23;

     label20:
        i9 = i5;

        i10 = i6;

        goto label23;

     label21:
        i9 = i5;

        i10 = i6;

        goto label23;

     label22:
        $r9 := @caughtexception;

        i10 = i6;

        i9 = i5;

     label23:
        i15 = i10 + 1;

        i5 = i9;

        i6 = i15;

        goto label02;

     label24:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label22;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label22;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label22;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label14;
        catch android.content.pm.PackageManager$NameNotFoundException from label18 to label19 with label19;
    }

    private void reportEventLocked(java.lang.String, int, long, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i2, i3, i4, i5, i6, $i9, $i10, $i18, $i19;
        long l1, $l7, $l8, $l11, $l12, $l13, $l14, $l15, $l16, l17;
        boolean z0, z2;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r2;
        com.android.server.usage.AppStandbyController$AppStandbyHandler r3;
        com.android.server.usage.AppIdleHistory $r4, $r5, $r6, $r9, $r11, $r13;
        android.os.Message $r8;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        z0 = virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: boolean isIdle(java.lang.String,int,long)>(r1, i2, l1);

        $r5 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        r2 = virtualinvoke $r5.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getAppUsageHistory(java.lang.String,int,long)>(r1, i2, l1);

        i3 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        i4 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        i5 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int usageEventToSubReason(int)>(i0);

        i6 = i5 | 768;

        if i0 == 10 goto label05;

        if i0 != 14 goto label01;

        goto label05;

     label01:
        if i0 != 6 goto label02;

        $r13 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $l15 = r0.<com.android.server.usage.AppStandbyController: long mSystemInteractionTimeoutMillis>;

        $l16 = l1 + $l15;

        virtualinvoke $r13.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(com.android.server.usage.AppIdleHistory$AppUsageHistory,java.lang.String,int,int,int,long,long)>(r2, r1, i2, 10, i5, 0L, $l16);

        l17 = r0.<com.android.server.usage.AppStandbyController: long mSystemInteractionTimeoutMillis>;

        goto label06;

     label02:
        if i0 != 19 goto label04;

        if i3 == 50 goto label03;

        return;

     label03:
        $r11 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $l13 = r0.<com.android.server.usage.AppStandbyController: long mInitialForegroundServiceStartTimeoutMillis>;

        $l14 = l1 + $l13;

        virtualinvoke $r11.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(com.android.server.usage.AppIdleHistory$AppUsageHistory,java.lang.String,int,int,int,long,long)>(r2, r1, i2, 10, i5, 0L, $l14);

        l17 = r0.<com.android.server.usage.AppStandbyController: long mInitialForegroundServiceStartTimeoutMillis>;

        goto label06;

     label04:
        $r9 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $l11 = r0.<com.android.server.usage.AppStandbyController: long mStrongUsageTimeoutMillis>;

        $l12 = l1 + $l11;

        virtualinvoke $r9.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(com.android.server.usage.AppIdleHistory$AppUsageHistory,java.lang.String,int,int,int,long,long)>(r2, r1, i2, 10, i5, l1, $l12);

        l17 = r0.<com.android.server.usage.AppStandbyController: long mStrongUsageTimeoutMillis>;

        goto label06;

     label05:
        $r6 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $l7 = r0.<com.android.server.usage.AppStandbyController: long mNotificationSeenTimeoutMillis>;

        $l8 = l1 + $l7;

        virtualinvoke $r6.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(com.android.server.usage.AppIdleHistory$AppUsageHistory,java.lang.String,int,int,int,long,long)>(r2, r1, i2, 20, i5, 0L, $l8);

        l17 = r0.<com.android.server.usage.AppStandbyController: long mNotificationSeenTimeoutMillis>;

     label06:
        $i18 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i18 == i3 goto label09;

        r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r8 = virtualinvoke r3.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(11, i2, -1, r1);

        virtualinvoke r3.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendMessageDelayed(android.os.Message,long)>($r8, l17);

        $i9 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i9 != 10 goto label07;

        $i10 = i4 & 65280;

        if $i10 == 768 goto label07;

        z2 = 1;

        goto label08;

     label07:
        z2 = 0;

     label08:
        $i19 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void maybeInformListeners(java.lang.String,int,long,int,int,boolean)>(r1, i2, l1, $i19, i6, z2);

        goto label09;

     label09:
        if z0 == 0 goto label10;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void notifyBatteryStats(java.lang.String,int,boolean)>(r1, i2, 0);

     label10:
        return;
    }

    private void reportExemptedSyncScheduled(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        long l1, l2;
        java.util.List r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        com.android.server.usage.AppStandbyController$Injector $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        byte b3, b4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z1 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: boolean isDeviceIdleMode()>();

        if $z1 != 0 goto label2;

        l2 = r0.<com.android.server.usage.AppStandbyController: long mExemptedSyncScheduledNonDozeTimeoutMillis>;

        b3 = 10;

        b4 = 11;

        goto label3;

     label2:
        l2 = r0.<com.android.server.usage.AppStandbyController: long mExemptedSyncScheduledDozeTimeoutMillis>;

        b3 = 20;

        b4 = 12;

     label3:
        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        r1 = specialinvoke r0.<com.android.server.usage.AppStandbyController: java.util.List getCrossProfileTargets(java.lang.String,int)>(r6, i0);

        r2 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r2;

     label4:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportNoninteractiveUsageCrossUserLocked(java.lang.String,int,int,int,long,long,java.util.List)>(r6, i0, b3, b4, l1, l2, r1);

        exitmonitor r2;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r5;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void reportExemptedSyncStart(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        long l1, $l2;
        java.util.List r1;
        java.lang.Object r2;
        boolean $z0;
        com.android.server.usage.AppStandbyController$Injector $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        r1 = specialinvoke r0.<com.android.server.usage.AppStandbyController: java.util.List getCrossProfileTargets(java.lang.String,int)>(r5, i0);

        r2 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r2;

     label2:
        $l2 = r0.<com.android.server.usage.AppStandbyController: long mExemptedSyncStartTimeoutMillis>;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportNoninteractiveUsageCrossUserLocked(java.lang.String,int,int,int,long,long,java.util.List)>(r5, i0, 10, 13, l1, $l2, r1);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void reportNoninteractiveUsageCrossUserLocked(java.lang.String, int, int, int, long, long, java.util.List)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1, i4, $i5, i6, i7;
        long l2, l3;
        java.util.List r2;
        java.lang.Object $r3;
        android.os.UserHandle $r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        l3 := @parameter5: long;

        r2 := @parameter6: java.util.List;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportNoninteractiveUsageLocked(java.lang.String,int,int,int,long,long)>(r1, i6, i0, i1, l2, l3);

        i4 = interfaceinvoke r2.<java.util.List: int size()>();

        i7 = 0;

     label1:
        if i7 >= i4 goto label2;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        $r4 = (android.os.UserHandle) $r3;

        $i5 = virtualinvoke $r4.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportNoninteractiveUsageLocked(java.lang.String,int,int,int,long,long)>(r1, $i5, i0, i1, l2, l3);

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    private void reportNoninteractiveUsageLocked(java.lang.String, int, int, int, long, long)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1, i2, $i6, $i7;
        long l3, l4, $l5;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r2;
        com.android.server.usage.AppStandbyController$AppStandbyHandler r3;
        com.android.server.usage.AppIdleHistory $r4;
        android.os.Message $r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        l3 := @parameter4: long;

        l4 := @parameter5: long;

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $l5 = l3 + l4;

        r2 = virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(java.lang.String,int,int,int,long,long)>(r1, i0, i1, i2, 0L, $l5);

        r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r5 = virtualinvoke r3.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(11, i0, -1, r1);

        virtualinvoke r3.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendMessageDelayed(android.os.Message,long)>($r5, l4);

        $i7 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        $i6 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void maybeInformListeners(java.lang.String,int,long,int,int,boolean)>(r1, i0, l3, $i7, $i6, 0);

        return;
    }

    private void reportUnexemptedSyncScheduled(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, $i2;
        long l1, $l3;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.usage.AppStandbyController$Injector $r2;
        java.lang.Throwable $r3, $r4, r8;
        java.lang.String r5;
        com.android.server.usage.AppIdleHistory r6;
        java.util.List r7;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label2:
        r6 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

     label3:
        $i2 = virtualinvoke r6.<com.android.server.usage.AppIdleHistory: int getAppStandbyBucket(java.lang.String,int,long)>(r5, i0, l1);

        if $i2 != 50 goto label4;

        r7 = specialinvoke r0.<com.android.server.usage.AppStandbyController: java.util.List getCrossProfileTargets(java.lang.String,int)>(r5, i0);

        $l3 = r0.<com.android.server.usage.AppStandbyController: long mUnexemptedSyncScheduledTimeoutMillis>;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportNoninteractiveUsageCrossUserLocked(java.lang.String,int,int,int,long,long,java.util.List)>(r5, i0, 20, 14, l1, $l3, r7);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

        r8 = $r4;

        goto label8;

     label7:
        $r3 := @caughtexception;

        r8 = $r3;

     label8:
        exitmonitor r1;

     label9:
        throw r8;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label8 to label9 with label6;
    }

    private void setAppStandbyBucket(java.lang.String, int, int, int, long, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i27, i28, $i29, i30, $i31, i35, i37, i41, $i43, i44;
        long l1, $l12, $l13, $l14, l32, l33, l34, l38;
        boolean z0, $z1, $z2, $z4, $z5, z6, z7, z8, z9, z10, z11;
        java.lang.Object r1;
        java.lang.StringBuilder r2, r43, r47;
        com.android.server.usage.AppStandbyController$Injector $r3, $r7;
        com.android.server.usage.AppIdleHistory $r4, $r5, $r6, $r27, $r28, $r45, r48;
        byte $b9, $b11, $b15;
        java.lang.String $r12, $r18, $r25, $r31, r42;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r13, $r14, $r19;
        android.os.Message $r15;
        android.content.Context $r20, $r22;
        android.os.Looper $r21;
        android.content.res.Resources $r23;
        java.lang.Object[] $r24;
        android.widget.Toast $r26;
        java.lang.Throwable $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, r44;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r46;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r42 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i27 := @parameter2: int;

        i28 := @parameter3: int;

        l1 := @parameter4: long;

        z0 := @parameter5: boolean;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z1 != 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        z6 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: boolean isPackageInstalled(java.lang.String,int,int)>(r42, 0, i0);

     label03:
        if z6 != 0 goto label07;

     label04:
        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to set bucket of uninstalled app: ");

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r31 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppStandbyController", $r31);

        exitmonitor r1;

     label05:
        return;

     label06:
        $r37 := @caughtexception;

        r44 = $r37;

        goto label86;

     label07:
        if i27 != 45 goto label11;

     label08:
        z7 = r0.<com.android.server.usage.AppStandbyController: boolean mAllowRestrictedBucket>;

     label09:
        if z7 != 0 goto label11;

        i27 = 40;

        goto label11;

     label10:
        $r39 := @caughtexception;

        r44 = $r39;

        goto label86;

     label11:
        $r45 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        r46 = virtualinvoke $r45.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getAppUsageHistory(java.lang.String,int,long)>(r42, i0, l1);

     label12:
        $i29 = i28 & 65280;

        if $i29 != 1280 goto label13;

        z8 = 1;

        goto label14;

     label13:
        z8 = 0;

     label14:
        $i2 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i2 >= 10 goto label16;

        exitmonitor r1;

     label15:
        return;

     label16:
        $i3 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i3 == 50 goto label18;

     label17:
        if i27 != 50 goto label21;

     label18:
        if z8 == 0 goto label21;

     label19:
        exitmonitor r1;

     label20:
        return;

     label21:
        $i4 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $i5 = $i4 & 65280;

        if $i5 != 1536 goto label23;

     label22:
        z9 = 1;

        goto label24;

     label23:
        z9 = 0;

     label24:
        if z8 == 0 goto label29;

     label25:
        $i24 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $i25 = $i24 & 65280;

        if $i25 == 1024 goto label27;

     label26:
        if z9 == 0 goto label29;

     label27:
        exitmonitor r1;

     label28:
        return;

     label29:
        $i6 = i28 & 65280;

        if $i6 != 1536 goto label30;

        z10 = 1;

        goto label31;

     label30:
        z10 = 0;

     label31:
        $i7 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i7 != i27 goto label37;

     label32:
        if z9 == 0 goto label37;

        if z10 == 0 goto label37;

     label33:
        $r27 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r27.<com.android.server.usage.AppIdleHistory: void noteRestrictionAttempt(java.lang.String,int,long,int)>(r42, i0, l1, i28);

        i30 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label34:
        $r28 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $i20 = i30 & 255;

        $i22 = 1536 | $i20;

        $i21 = i28 & 255;

        $i23 = $i22 | $i21;

        virtualinvoke $r28.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int,boolean)>(r42, i0, l1, i27, $i23, z0);

        exitmonitor r1;

     label35:
        return;

     label36:
        $r40 := @caughtexception;

        r44 = $r40;

        goto label86;

     label37:
        $i31 = i28 & 65280;

        if $i31 != 1024 goto label38;

        z11 = 1;

        goto label39;

     label38:
        z11 = 0;

     label39:
        $i8 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i8 != 45 goto label47;

        $i18 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $i19 = 65280 & $i18;

        if $i19 != 512 goto label43;

     label40:
        if z8 == 0 goto label47;

        if i27 < 40 goto label47;

     label41:
        exitmonitor r1;

     label42:
        return;

     label43:
        $z5 = staticinvoke <com.android.server.usage.AppStandbyController: boolean isUserUsage(int)>(i28);

        if $z5 != 0 goto label47;

     label44:
        if z11 != 0 goto label47;

     label45:
        exitmonitor r1;

     label46:
        return;

     label47:
        if i27 != 45 goto label58;

     label48:
        $r6 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r6.<com.android.server.usage.AppIdleHistory: void noteRestrictionAttempt(java.lang.String,int,long,int)>(r42, i0, l1, i28);

     label49:
        if z11 == 0 goto label54;

     label50:
        $z4 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z4 == 0 goto label52;

        $r20 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r19 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r21 = virtualinvoke $r19.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Looper getLooper()>();

        $r22 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.res.Resources getResources()>();

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r42;

        $r25 = virtualinvoke $r23.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17039662, $r24);

        $r26 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,android.os.Looper,java.lang.CharSequence,int)>($r20, $r21, $r25, 0);

        virtualinvoke $r26.<android.widget.Toast: void show()>();

     label51:
        goto label58;

     label52:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restricted by user");

        $r18 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AppStandbyController", $r18);

     label53:
        goto label58;

     label54:
        $l12 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long lastUsedByUserElapsedTime>;

        $r7 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $l13 = virtualinvoke $r7.<com.android.server.usage.AppStandbyController$Injector: long getAutoRestrictedBucketDelayMs()>();

        $l14 = $l12 + $l13;

        l32 = $l14 - l1;

     label55:
        $b15 = l32 cmp 0L;

        if $b15 <= 0 goto label58;

     label56:
        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to restrict recently used app: ");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to ");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28);

        $r12 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AppStandbyController", $r12);

        $r14 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r13 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r15 = virtualinvoke $r13.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(11, i0, -1, r42);

        virtualinvoke $r14.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendMessageDelayed(android.os.Message,long)>($r15, l32);

        exitmonitor r1;

     label57:
        return;

     label58:
        if z8 == 0 goto label76;

     label59:
        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        l33 = virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: long getElapsedTime(long)>(l1);

        $r5 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r5.<com.android.server.usage.AppIdleHistory: void updateLastPrediction(com.android.server.usage.AppIdleHistory$AppUsageHistory,long,int)>(r46, l33, i27);

     label60:
        if i27 <= 10 goto label66;

     label61:
        l34 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketActiveTimeoutTime>;

     label62:
        $b11 = l34 cmp l33;

        if $b11 <= 0 goto label66;

        i35 = 10;

     label63:
        i37 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label64:
        goto label77;

     label65:
        $r38 := @caughtexception;

        r44 = $r38;

        goto label86;

     label66:
        if i27 <= 20 goto label73;

     label67:
        l38 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: long bucketWorkingSetTimeoutTime>;

     label68:
        $b9 = l38 cmp l33;

        if $b9 <= 0 goto label73;

        i35 = 20;

     label69:
        $i10 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i10 == 20 goto label71;

     label70:
        i37 = 775;

        goto label77;

     label71:
        i37 = r46.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label72:
        goto label77;

     label73:
        if i27 != 40 goto label76;

     label74:
        $z2 = r0.<com.android.server.usage.AppStandbyController: boolean mAllowRestrictedBucket>;

        if $z2 == 0 goto label76;

        i41 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int getBucketForLocked(java.lang.String,int,long)>(r42, i0, l1);

     label75:
        if i41 != 45 goto label76;

        i35 = 45;

        i37 = 512;

        goto label77;

     label76:
        i37 = i28;

        i35 = i27;

     label77:
        $i43 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int getAppMinBucket(java.lang.String,int)>(r42, i0);

        i44 = staticinvoke <java.lang.Math: int min(int,int)>(i35, $i43);

     label78:
        r48 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

     label79:
        virtualinvoke r48.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int,boolean)>(r42, i0, l1, i44, i37, z0);

        exitmonitor r1;

     label80:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void maybeInformListeners(java.lang.String,int,long,int,int,boolean)>(r42, i0, l1, i44, i37, 0);

        return;

     label81:
        $r35 := @caughtexception;

        r44 = $r35;

        goto label86;

     label82:
        $r36 := @caughtexception;

        r44 = $r36;

        goto label86;

     label83:
        $r34 := @caughtexception;

        r44 = $r34;

        goto label86;

     label84:
        $r33 := @caughtexception;

        r44 = $r33;

        goto label86;

     label85:
        $r41 := @caughtexception;

        r44 = $r41;

     label86:
        exitmonitor r1;

     label87:
        throw r44;

     label88:
        $r32 := @caughtexception;

        r44 = $r32;

        goto label86;

        catch java.lang.Throwable from label02 to label03 with label85;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label84;
        catch java.lang.Throwable from label14 to label15 with label84;
        catch java.lang.Throwable from label16 to label17 with label84;
        catch java.lang.Throwable from label19 to label20 with label84;
        catch java.lang.Throwable from label21 to label22 with label84;
        catch java.lang.Throwable from label25 to label26 with label84;
        catch java.lang.Throwable from label27 to label28 with label84;
        catch java.lang.Throwable from label31 to label32 with label84;
        catch java.lang.Throwable from label33 to label34 with label84;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label39 to label40 with label84;
        catch java.lang.Throwable from label41 to label42 with label84;
        catch java.lang.Throwable from label43 to label44 with label84;
        catch java.lang.Throwable from label45 to label46 with label84;
        catch java.lang.Throwable from label48 to label49 with label84;
        catch java.lang.Throwable from label50 to label51 with label84;
        catch java.lang.Throwable from label52 to label53 with label84;
        catch java.lang.Throwable from label54 to label55 with label84;
        catch java.lang.Throwable from label56 to label57 with label84;
        catch java.lang.Throwable from label59 to label60 with label84;
        catch java.lang.Throwable from label61 to label62 with label84;
        catch java.lang.Throwable from label63 to label64 with label65;
        catch java.lang.Throwable from label67 to label68 with label84;
        catch java.lang.Throwable from label69 to label70 with label65;
        catch java.lang.Throwable from label71 to label72 with label65;
        catch java.lang.Throwable from label74 to label75 with label84;
        catch java.lang.Throwable from label77 to label78 with label83;
        catch java.lang.Throwable from label78 to label79 with label82;
        catch java.lang.Throwable from label79 to label80 with label81;
        catch java.lang.Throwable from label86 to label87 with label88;
    }

    private void updatePowerWhitelistCache()
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppStandbyController$Injector $r1, $r2;
        int $i0;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $i0 = virtualinvoke $r1.<com.android.server.usage.AppStandbyController$Injector: int getBootPhase()>();

        if $i0 >= 500 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: void updatePowerWhitelistCache()>();

        virtualinvoke r0.<com.android.server.usage.AppStandbyController: void postCheckIdleStates(int)>(-1);

        return;
    }

    private int usageEventToSubReason(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        if i0 == 1 goto label8;

        if i0 == 2 goto label7;

        if i0 == 6 goto label6;

        if i0 == 7 goto label5;

        if i0 == 10 goto label4;

        if i0 == 19 goto label3;

        if i0 == 13 goto label2;

        if i0 == 14 goto label1;

        return 0;

     label1:
        return 9;

     label2:
        return 10;

     label3:
        return 15;

     label4:
        return 2;

     label5:
        return 3;

     label6:
        return 1;

     label7:
        return 5;

     label8:
        return 4;
    }

    private void waitForAdminData()
    {
        com.android.server.usage.AppStandbyController r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.device_admin");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.usage.AppStandbyController: java.util.concurrent.CountDownLatch mAdminDataAvailableLatch>;

        staticinvoke <com.android.internal.util.ConcurrentUtils: void waitForCountDownNoInterrupt(java.util.concurrent.CountDownLatch,long,java.lang.String)>($r3, 10000L, "Wait for admin data");

     label1:
        return;
    }

    public void addActiveDeviceAdmin(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        android.util.SparseArray r1, $r3, $r5;
        java.util.Set r2, r11;
        java.lang.Object $r4, r8;
        java.lang.Throwable $r6;
        java.lang.String r7;
        android.util.ArraySet r10;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (java.util.Set) $r4;

     label02:
        r8 = r2;

        if r2 != null goto label05;

     label03:
        r10 = new android.util.ArraySet;

        r8 = r10;

        specialinvoke r10.<android.util.ArraySet: void <init>()>();

     label04:
        $r5 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r10);

     label05:
        r11 = (java.util.Set) r8;

        interfaceinvoke r11.<java.util.Set: boolean add(java.lang.Object)>(r7);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void addListener(com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener)
    {
        com.android.server.usage.AppStandbyController r0;
        java.util.ArrayList r1, $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        if $z0 != 0 goto label2;

        $r3 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    boolean checkIdleStates(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i2, i3, $i4, i5, $i6, i7;
        boolean z0, $z1;
        long l1;
        java.util.List r1;
        android.content.pm.PackageInfo r2;
        com.android.server.usage.AppStandbyController$Injector $r3, $r4;
        android.content.pm.PackageManager $r5;
        java.lang.Object $r6;
        android.content.pm.ApplicationInfo $r7;
        java.lang.String $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        int[] r11;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        r11 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: int[] getRunningUserIds()>();

     label02:
        if i0 == -1 goto label05;

     label03:
        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r11, i0);

     label04:
        if z0 != 0 goto label05;

        return 0;

     label05:
        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r4.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        i5 = 0;

     label06:
        $i6 = lengthof r11;

        if i5 >= $i6 goto label10;

        i2 = r11[i5];

        if i0 == -1 goto label07;

        if i0 == i2 goto label07;

        goto label09;

     label07:
        $r5 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r5.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(512, i2);

        i3 = interfaceinvoke r1.<java.util.List: int size()>();

        i7 = 0;

     label08:
        if i7 >= i3 goto label09;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        r2 = (android.content.pm.PackageInfo) $r6;

        $r8 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r7 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void checkAndUpdateStandbyState(java.lang.String,int,int,long)>($r8, i2, $i4, l1);

        i7 = i7 + 1;

        goto label08;

     label09:
        i5 = i5 + 1;

        goto label06;

     label10:
        return 1;

     label11:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label11;
    }

    void clearAppIdleForPackage(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        java.lang.Object r1;
        com.android.server.usage.AppIdleHistory $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: void clearUsage(java.lang.String,int)>(r4, i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void clearCarrierPrivilegedApps()
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.usage.AppStandbyController: boolean mHaveCarrierPrivilegedApps> = 0;

        r0.<com.android.server.usage.AppStandbyController: java.util.List mCarrierPrivilegedApps> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dumpState(java.lang.String[], java.io.PrintWriter)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.StringBuilder r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r5;
        java.lang.String $r7, $r9, $r11, $r16;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        long[] $r8, $r10;
        android.util.ArraySet $r12, $r14, r22;
        int $i12, i13;
        com.android.server.usage.AppStandbyController$Injector $r13;
        java.lang.Object $r15, r21;
        java.lang.Throwable $r17, $r18;
        java.lang.String[] r19;
        java.io.PrintWriter r20;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r19 := @parameter0: java.lang.String[];

        r20 := @parameter1: java.io.PrintWriter;

        r21 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r21;

     label01:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Carrier privileged apps (have=");

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mHaveCarrierPrivilegedApps>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r5 = r0.<com.android.server.usage.AppStandbyController: java.util.List mCarrierPrivilegedApps>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        exitmonitor r21;

     label02:
        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>("Settings:");

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mCheckIdleIntervalMillis=");

        $l0 = r0.<com.android.server.usage.AppStandbyController: long mCheckIdleIntervalMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l0, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mStrongUsageTimeoutMillis=");

        $l1 = r0.<com.android.server.usage.AppStandbyController: long mStrongUsageTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l1, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mNotificationSeenTimeoutMillis=");

        $l2 = r0.<com.android.server.usage.AppStandbyController: long mNotificationSeenTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l2, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mSyncAdapterTimeoutMillis=");

        $l3 = r0.<com.android.server.usage.AppStandbyController: long mSyncAdapterTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l3, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mSystemInteractionTimeoutMillis=");

        $l4 = r0.<com.android.server.usage.AppStandbyController: long mSystemInteractionTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l4, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mInitialForegroundServiceStartTimeoutMillis=");

        $l5 = r0.<com.android.server.usage.AppStandbyController: long mInitialForegroundServiceStartTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l5, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mPredictionTimeoutMillis=");

        $l6 = r0.<com.android.server.usage.AppStandbyController: long mPredictionTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l6, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mExemptedSyncScheduledNonDozeTimeoutMillis=");

        $l7 = r0.<com.android.server.usage.AppStandbyController: long mExemptedSyncScheduledNonDozeTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l7, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mExemptedSyncScheduledDozeTimeoutMillis=");

        $l8 = r0.<com.android.server.usage.AppStandbyController: long mExemptedSyncScheduledDozeTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l8, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mExemptedSyncStartTimeoutMillis=");

        $l9 = r0.<com.android.server.usage.AppStandbyController: long mExemptedSyncStartTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l9, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mUnexemptedSyncScheduledTimeoutMillis=");

        $l10 = r0.<com.android.server.usage.AppStandbyController: long mUnexemptedSyncScheduledTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l10, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  mSystemUpdateUsageTimeoutMillis=");

        $l11 = r0.<com.android.server.usage.AppStandbyController: long mSystemUpdateUsageTimeoutMillis>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l11, r20);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("mAppIdleEnabled=");

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        virtualinvoke r20.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>(" mAllowRestrictedBucket=");

        $z2 = r0.<com.android.server.usage.AppStandbyController: boolean mAllowRestrictedBucket>;

        virtualinvoke r20.<java.io.PrintWriter: void print(boolean)>($z2);

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>(" mIsCharging=");

        $z3 = r0.<com.android.server.usage.AppStandbyController: boolean mIsCharging>;

        virtualinvoke r20.<java.io.PrintWriter: void print(boolean)>($z3);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("mScreenThresholds=");

        $r8 = r0.<com.android.server.usage.AppStandbyController: long[] mAppStandbyScreenThresholds>;

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r8);

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("mElapsedThresholds=");

        $r10 = r0.<com.android.server.usage.AppStandbyController: long[] mAppStandbyElapsedThresholds>;

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r10);

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>("mHeadlessSystemApps=[");

        r22 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        entermonitor r22;

     label03:
        $r12 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        $i12 = virtualinvoke $r12.<android.util.ArraySet: int size()>();

        i13 = $i12 - 1;

     label04:
        if i13 < 0 goto label07;

     label05:
        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r14 = r0.<com.android.server.usage.AppStandbyController: android.util.ArraySet mHeadlessSystemApps>;

        $r15 = virtualinvoke $r14.<android.util.ArraySet: java.lang.Object valueAt(int)>(i13);

        $r16 = (java.lang.String) $r15;

        virtualinvoke r20.<java.io.PrintWriter: void print(java.lang.String)>($r16);

        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>(",");

     label06:
        i13 = i13 + -1;

        goto label04;

     label07:
        exitmonitor r22;

     label08:
        virtualinvoke r20.<java.io.PrintWriter: void println(java.lang.String)>("]");

        virtualinvoke r20.<java.io.PrintWriter: void println()>();

        $r13 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        virtualinvoke $r13.<com.android.server.usage.AppStandbyController$Injector: void dump(java.io.PrintWriter)>(r20);

        return;

     label09:
        $r18 := @caughtexception;

     label10:
        exitmonitor r22;

     label11:
        throw $r18;

     label12:
        $r17 := @caughtexception;

     label13:
        exitmonitor r21;

     label14:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void dumpUsers(com.android.internal.util.IndentingPrintWriter, int[], java.util.List)
    {
        com.android.server.usage.AppStandbyController r0;
        int[] r1;
        java.util.List r2;
        java.lang.Object r3;
        com.android.server.usage.AppIdleHistory $r4;
        java.lang.Throwable $r5;
        com.android.internal.util.IndentingPrintWriter r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r6 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 := @parameter1: int[];

        r2 := @parameter2: java.util.List;

        r3 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r3;

     label1:
        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: void dumpUsers(com.android.internal.util.IndentingPrintWriter,int[],java.util.List)>(r6, r1, r2);

        exitmonitor r3;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void flushToDisk()
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.Object r1;
        com.android.server.usage.AppIdleHistory $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r3.<com.android.server.usage.AppIdleHistory: void writeAppIdleTimes()>();

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: void writeAppIdleDurations()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void forceIdleState(java.lang.String, int, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i1, i3;
        boolean z0, z1, z2, $z3;
        long l2;
        java.lang.Object r1;
        com.android.server.usage.AppStandbyController$Injector $r2;
        com.android.server.usage.AppIdleHistory $r3;
        java.lang.Throwable $r4, $r5, r7;
        java.lang.String r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z3 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z3 != 0 goto label1;

        return;

     label1:
        i1 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: int getAppId(java.lang.String)>(r6);

        if i1 >= 0 goto label2;

        return;

     label2:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l2 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        z1 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isAppIdleFiltered(java.lang.String,int,int,long)>(r6, i1, i0, l2);

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label3:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        i3 = virtualinvoke $r3.<com.android.server.usage.AppIdleHistory: int setIdle(java.lang.String,int,boolean,long)>(r6, i0, z0, l2);

        exitmonitor r1;

     label4:
        z2 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isAppIdleFiltered(java.lang.String,int,int,long)>(r6, i1, i0, l2);

        if z1 == z2 goto label5;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void maybeInformListeners(java.lang.String,int,long,int,int,boolean)>(r6, i0, l2, i3, 1024, 0);

        if z2 != 0 goto label5;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void notifyBatteryStats(java.lang.String,int,boolean)>(r6, i0, z0);

        goto label5;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        exitmonitor r1;

     label8:
        throw r7;

     label9:
        $r5 := @caughtexception;

        r7 = $r5;

        goto label7;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    java.util.Set getActiveAdminAppsForTest(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.util.Set r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (java.util.Set) $r3;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getAppId(java.lang.String)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        android.content.pm.PackageManager $r1;
        android.content.pm.ApplicationInfo $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        $r2 = virtualinvoke $r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r4, 4194816);

        i0 = $r2.<android.content.pm.ApplicationInfo: int uid>;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public int getAppStandbyBucket(java.lang.String, int, long, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        long l0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.usage.AppIdleHistory $r2;
        com.android.server.usage.AppStandbyController$Injector $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;
        int i1, i2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        l0 := @parameter2: long;

        z0 := @parameter3: boolean;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z1 == 0 goto label7;

        if z0 == 0 goto label1;

        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z2 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: boolean isPackageEphemeral(int,java.lang.String)>(i1, r5);

        if $z2 == 0 goto label1;

        goto label7;

     label1:
        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        i2 = virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: int getAppStandbyBucket(java.lang.String,int,long)>(r5, i1, l0);

        exitmonitor r1;

     label3:
        return i2;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        return 10;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    int getAppStandbyBucketReason(java.lang.String, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        long l0;
        java.lang.Object r1;
        com.android.server.usage.AppIdleHistory $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        int i1, i2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        l0 := @parameter2: long;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        i2 = virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: int getAppStandbyReason(java.lang.String,int,long)>(r4, i1, l0);

        exitmonitor r1;

     label2:
        return i2;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getAppStandbyBuckets(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.usage.AppIdleHistory $r2;
        java.lang.Throwable $r3;
        java.util.ArrayList r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        r4 = virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: java.util.ArrayList getAppStandbyBuckets(int,boolean)>(i0, $z0);

        exitmonitor r1;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getIdleUidsForUser(int)
    {
        com.android.server.usage.AppStandbyController r0;
        long l0;
        java.util.List r1;
        boolean z0, $z1;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28;
        com.android.server.usage.AppStandbyController$Injector $r2;
        android.util.SparseIntArray $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        int[] $r6, $r7, r15;
        android.os.RemoteException $r8, $r10, r16;
        java.lang.RuntimeException $r9;
        android.content.pm.IPackageManager r11;
        android.content.pm.ParceledListSlice r12;
        android.content.pm.ApplicationInfo r14;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i16 := @parameter0: int;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z1 != 0 goto label01;

        $r7 = newarray (int)[0];

        return $r7;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "getIdleUidsForUser");

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l0 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

     label02:
        r11 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

     label03:
        r12 = interfaceinvoke r11.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>(0, i16);

     label04:
        if r12 != null goto label06;

     label05:
        $r6 = newarray (int)[0];

        return $r6;

     label06:
        r1 = virtualinvoke r12.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label07:
        $r3 = new android.util.SparseIntArray;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>()>();

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i17 = $i2 - 1;

     label08:
        if i17 < 0 goto label15;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i17);

        r14 = (android.content.pm.ApplicationInfo) $r4;

        $r5 = r14.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i10 = r14.<android.content.pm.ApplicationInfo: int uid>;

        $i11 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i10);

        z0 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isAppIdleFiltered(java.lang.String,int,int,long)>($r5, $i11, i16, l0);

        $i12 = r14.<android.content.pm.ApplicationInfo: int uid>;

        i18 = virtualinvoke $r3.<android.util.SparseIntArray: int indexOfKey(int)>($i12);

        i19 = 65536;

        if i18 >= 0 goto label11;

        i20 = r14.<android.content.pm.ApplicationInfo: int uid>;

        if z0 == 0 goto label09;

        goto label10;

     label09:
        i19 = 0;

     label10:
        $i15 = i19 + 1;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i20, $i15);

        goto label14;

     label11:
        i1 = virtualinvoke $r3.<android.util.SparseIntArray: int valueAt(int)>(i18);

        if z0 == 0 goto label12;

        goto label13;

     label12:
        i19 = 0;

     label13:
        $i13 = i1 + 1;

        $i14 = $i13 + i19;

        virtualinvoke $r3.<android.util.SparseIntArray: void setValueAt(int,int)>(i18, $i14);

     label14:
        i17 = i17 + -1;

        goto label08;

     label15:
        i21 = 0;

        $i3 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        i22 = $i3 - 1;

     label16:
        if i22 < 0 goto label18;

        i23 = virtualinvoke $r3.<android.util.SparseIntArray: int valueAt(int)>(i22);

        i24 = i21;

        $i9 = i23 & 32767;

        $i8 = i23 >> 16;

        if $i9 != $i8 goto label17;

        i24 = i21 + 1;

     label17:
        i22 = i22 + -1;

        i21 = i24;

        goto label16;

     label18:
        r15 = newarray (int)[i21];

        i25 = 0;

        $i4 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        i26 = $i4 - 1;

     label19:
        if i26 < 0 goto label21;

        i27 = virtualinvoke $r3.<android.util.SparseIntArray: int valueAt(int)>(i26);

        i28 = i25;

        $i6 = i27 & 32767;

        $i5 = i27 >> 16;

        if $i6 != $i5 goto label20;

        $i7 = virtualinvoke $r3.<android.util.SparseIntArray: int keyAt(int)>(i26);

        r15[i25] = $i7;

        i28 = i25 + 1;

     label20:
        i26 = i26 + -1;

        i25 = i28;

        goto label19;

     label21:
        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return r15;

     label22:
        $r8 := @caughtexception;

        r16 = $r8;

        goto label24;

     label23:
        $r10 := @caughtexception;

        r16 = $r10;

     label24:
        $r9 = virtualinvoke r16.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label02 to label03 with label23;
        catch android.os.RemoteException from label03 to label04 with label22;
        catch android.os.RemoteException from label05 to label06 with label22;
        catch android.os.RemoteException from label06 to label07 with label22;
    }

    public long getTimeSinceLastJobRun(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        java.lang.Object r1;
        com.android.server.usage.AppStandbyController$Injector $r2;
        com.android.server.usage.AppIdleHistory $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;
        long l1, l2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        l2 = virtualinvoke $r3.<com.android.server.usage.AppIdleHistory: long getTimeSinceLastJobRun(java.lang.String,int,long)>(r5, i0, l1);

        exitmonitor r1;

     label2:
        return l2;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void initializeDefaultsForSystemApps(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i2, i6;
        long l1, l3, $l5;
        java.lang.String r1, $r8;
        com.android.server.usage.AppIdleHistory r2, $r11;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        com.android.server.usage.AppStandbyController$Injector $r9;
        android.content.pm.PackageManager $r10;
        java.lang.Object $r12, r20, r22;
        android.content.pm.ApplicationInfo $r13, $r14;
        java.lang.Throwable $r16, $r17, r23;
        java.util.List r19;
        android.content.pm.PackageInfo r21;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mSystemServicesReady>;

        if $z0 != 0 goto label01;

        r0.<com.android.server.usage.AppStandbyController: boolean mPendingInitializeDefaults> = 1;

        return;

     label01:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initializing defaults for system apps on user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", appIdleEnabled=");

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AppStandbyController", $r8);

        $r9 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r9.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        $r10 = r0.<com.android.server.usage.AppStandbyController: android.content.pm.PackageManager mPackageManager>;

        r19 = virtualinvoke $r10.<android.content.pm.PackageManager: java.util.List getInstalledPackagesAsUser(int,int)>(512, i0);

        i2 = interfaceinvoke r19.<java.util.List: int size()>();

        r20 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r20;

        i6 = 0;

     label02:
        if i6 >= i2 goto label09;

     label03:
        $r12 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i6);

        r21 = (android.content.pm.PackageInfo) $r12;

        r1 = r21.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r13 = r21.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r13 == null goto label07;

        $r14 = r21.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z2 = virtualinvoke $r14.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z2 == 0 goto label07;

        r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        l3 = r0.<com.android.server.usage.AppStandbyController: long mSystemUpdateUsageTimeoutMillis>;

     label04:
        r22 = r20;

     label05:
        $l5 = l1 + l3;

        virtualinvoke r2.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory reportUsage(java.lang.String,int,int,int,long,long)>(r1, i0, 10, 6, 0L, $l5);

     label06:
        goto label07;

     label07:
        i6 = i6 + 1;

        goto label02;

     label08:
        $r16 := @caughtexception;

        r23 = $r16;

        goto label15;

     label09:
        r22 = r20;

     label10:
        $r11 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r11.<com.android.server.usage.AppIdleHistory: void writeAppIdleTimes(int)>(i0);

     label11:
        r22 = r20;

     label12:
        exitmonitor r20;

     label13:
        return;

     label14:
        $r17 := @caughtexception;

        r23 = $r17;

        r20 = r22;

     label15:
        r22 = r20;

     label16:
        exitmonitor r20;

     label17:
        throw r23;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
    }

    boolean isActiveDeviceAdmin(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.util.Set r2;
        java.lang.Object $r4;
        boolean $z0, z1;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (java.util.Set) $r4;

     label02:
        if r2 == null goto label05;

     label03:
        $z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z0 == 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isAppIdleEnabled()
    {
        com.android.server.usage.AppStandbyController r0;
        boolean $z0;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        return $z0;
    }

    public boolean isAppIdleFiltered(java.lang.String, int, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i1, $i3;
        long l2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $i3 = specialinvoke r0.<com.android.server.usage.AppStandbyController: int getAppMinBucket(java.lang.String,int,int)>(r3, i0, i1);

        if $i3 >= 40 goto label01;

        return 0;

     label01:
        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label02:
        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 == 0 goto label06;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mIsCharging>;

        if $z1 == 0 goto label04;

     label03:
        goto label06;

     label04:
        exitmonitor r1;

     label05:
        $z2 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isAppIdleUnfiltered(java.lang.String,int,long)>(r3, i1, l2);

        return $z2;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isAppIdleFiltered(java.lang.String, int, long, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, $i2;
        long l1;
        boolean z0, $z1, $z2;
        com.android.server.usage.AppStandbyController$Injector $r2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z2 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: boolean isPackageEphemeral(int,java.lang.String)>(i0, r1);

        if $z2 == 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: int getAppId(java.lang.String)>(r1);

        $z1 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isAppIdleFiltered(java.lang.String,int,int,long)>(r1, $i2, i0, l1);

        return $z1;
    }

    public boolean isInParole()
    {
        com.android.server.usage.AppStandbyController r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mIsCharging>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    void maybeUnrestrictBuggyApp(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, $i2, $i3, $i4, $i5, $i6, i8, i9;
        java.lang.Object r1;
        long l1;
        com.android.server.usage.AppIdleHistory$AppUsageHistory r2;
        com.android.server.usage.AppStandbyController$Injector $r3;
        com.android.server.usage.AppIdleHistory $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        byte b7;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        r2 = virtualinvoke $r4.<com.android.server.usage.AppIdleHistory: com.android.server.usage.AppIdleHistory$AppUsageHistory getAppUsageHistory(java.lang.String,int,long)>(r7, i0, l1);

        $i2 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int currentBucket>;

        if $i2 != 45 goto label09;

        $i3 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $i4 = $i3 & 65280;

        if $i4 == 1536 goto label03;

     label02:
        goto label09;

     label03:
        $i5 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

        $i6 = $i5 & 255;

        if $i6 != 4 goto label05;

     label04:
        b7 = 40;

        i8 = 257;

        goto label07;

     label05:
        i9 = r2.<com.android.server.usage.AppIdleHistory$AppUsageHistory: int bucketingReason>;

     label06:
        b7 = 45;

        i8 = i9 & -5;

     label07:
        $r5 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r5.<com.android.server.usage.AppIdleHistory: void setAppStandbyBucket(java.lang.String,int,long,int,int)>(r7, i0, l1, b7, i8);

        exitmonitor r1;

     label08:
        return;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void onAdminDataAvailable()
    {
        com.android.server.usage.AppStandbyController r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: java.util.concurrent.CountDownLatch mAdminDataAvailableLatch>;

        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        boolean z0, $z1, $z3, $z5, $z6;
        com.android.server.usage.AppStandbyController$Injector $r1, $r2, $r12, $r14;
        com.android.server.usage._$$Lambda$AppStandbyController$eFYmNoFgBdX9ZGJEOAzlovFS3_c $r3;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r4, $r6, $r10, $r16;
        com.android.server.usage.AppStandbyController$SettingsObserver $r5;
        android.content.Context $r7;
        java.lang.Object $r8, r21, r22;
        android.appwidget.AppWidgetManager $r9;
        android.hardware.display.DisplayManager$DisplayListener $r11;
        com.android.server.usage.AppIdleHistory $r13, $r17;
        long $l2;
        com.android.server.usage._$$Lambda$AppStandbyController$J3RrF9pXWs15TjJGaLdogSJkcZI $r15;
        java.lang.Throwable $r18, $r19;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        virtualinvoke $r1.<com.android.server.usage.AppStandbyController$Injector: void onBootPhase(int)>(i0);

        if i0 != 500 goto label13;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("AppStandbyController", "Setting app idle enabled state");

        $r5 = new com.android.server.usage.AppStandbyController$SettingsObserver;

        $r6 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        specialinvoke $r5.<com.android.server.usage.AppStandbyController$SettingsObserver: void <init>(com.android.server.usage.AppStandbyController,android.os.Handler)>(r0, $r6);

        virtualinvoke $r5.<com.android.server.usage.AppStandbyController$SettingsObserver: void registerObserver()>();

        virtualinvoke $r5.<com.android.server.usage.AppStandbyController$SettingsObserver: void updateSettings()>();

        $r7 = r0.<com.android.server.usage.AppStandbyController: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/appwidget/AppWidgetManager;");

        $r9 = (android.appwidget.AppWidgetManager) $r8;

        r0.<com.android.server.usage.AppStandbyController: android.appwidget.AppWidgetManager mAppWidgetManager> = $r9;

        $r12 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r11 = r0.<com.android.server.usage.AppStandbyController: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        $r10 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        virtualinvoke $r12.<com.android.server.usage.AppStandbyController$Injector: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r11, $r10);

        r21 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r21;

     label01:
        $r13 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        $z3 = specialinvoke r0.<com.android.server.usage.AppStandbyController: boolean isDisplayOn()>();

        $r14 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $l2 = virtualinvoke $r14.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        virtualinvoke $r13.<com.android.server.usage.AppIdleHistory: void updateDisplay(boolean,long)>($z3, $l2);

        exitmonitor r21;

     label02:
        r0.<com.android.server.usage.AppStandbyController: boolean mSystemServicesReady> = 1;

        $r16 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r15 = new com.android.server.usage._$$Lambda$AppStandbyController$J3RrF9pXWs15TjJGaLdogSJkcZI;

        specialinvoke $r15.<com.android.server.usage._$$Lambda$AppStandbyController$J3RrF9pXWs15TjJGaLdogSJkcZI: void <init>(com.android.server.usage.AppStandbyController)>(r0);

        virtualinvoke $r16.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean post(java.lang.Runnable)>($r15);

        r22 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r22;

     label03:
        $r17 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        z0 = virtualinvoke $r17.<com.android.server.usage.AppIdleHistory: boolean userFileExists(int)>(0);

        exitmonitor r22;

     label04:
        $z5 = r0.<com.android.server.usage.AppStandbyController: boolean mPendingInitializeDefaults>;

        if $z5 != 0 goto label05;

        if z0 != 0 goto label06;

     label05:
        virtualinvoke r0.<com.android.server.usage.AppStandbyController: void initializeDefaultsForSystemApps(int)>(0);

     label06:
        $z6 = r0.<com.android.server.usage.AppStandbyController: boolean mPendingOneTimeCheckIdleStates>;

        if $z6 == 0 goto label14;

        virtualinvoke r0.<com.android.server.usage.AppStandbyController: void postOneTimeCheckIdleStates()>();

        goto label14;

     label07:
        $r19 := @caughtexception;

     label08:
        exitmonitor r22;

     label09:
        throw $r19;

     label10:
        $r18 := @caughtexception;

     label11:
        exitmonitor r21;

     label12:
        throw $r18;

     label13:
        if i0 != 1000 goto label14;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z1 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: boolean isCharging()>();

        virtualinvoke r0.<com.android.server.usage.AppStandbyController: void setChargingState(boolean)>($z1);

        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r3 = new com.android.server.usage._$$Lambda$AppStandbyController$eFYmNoFgBdX9ZGJEOAzlovFS3_c;

        specialinvoke $r3.<com.android.server.usage._$$Lambda$AppStandbyController$eFYmNoFgBdX9ZGJEOAzlovFS3_c: void <init>(com.android.server.usage.AppStandbyController)>(r0);

        virtualinvoke $r4.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean post(java.lang.Runnable)>($r3);

        goto label14;

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void onUserRemoved(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray r2, $r4;
        com.android.server.usage.AppIdleHistory $r3;
        java.lang.Throwable $r5, $r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r3.<com.android.server.usage.AppIdleHistory: void onUserRemoved(int)>(i0);

        r2 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        entermonitor r2;

     label02:
        $r4 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r2;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r6 := @caughtexception;

     label06:
        exitmonitor r2;

     label07:
        throw $r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void postCheckIdleStates(int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        com.android.server.usage.AppStandbyController$AppStandbyHandler r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r2 = virtualinvoke r1.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int)>(5, i0, 0);

        virtualinvoke r1.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendMessage(android.os.Message)>($r2);

        return;
    }

    public void postOneTimeCheckIdleStates()
    {
        com.android.server.usage.AppStandbyController r0;
        com.android.server.usage.AppStandbyController$Injector $r1;
        int $i0;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r2;

        r0 := @this: com.android.server.usage.AppStandbyController;

        $r1 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $i0 = virtualinvoke $r1.<com.android.server.usage.AppStandbyController$Injector: int getBootPhase()>();

        if $i0 >= 500 goto label1;

        r0.<com.android.server.usage.AppStandbyController: boolean mPendingOneTimeCheckIdleStates> = 1;

        goto label2;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        virtualinvoke $r2.<com.android.server.usage.AppStandbyController$AppStandbyHandler: boolean sendEmptyMessage(int)>(10);

        r0.<com.android.server.usage.AppStandbyController: boolean mPendingOneTimeCheckIdleStates> = 0;

     label2:
        return;
    }

    public void postReportContentProviderUsage(java.lang.String, java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1, r2;
        int i0;
        com.android.internal.os.SomeArgs r3;
        java.lang.Integer $r4;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r5;
        android.os.Message $r6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r1;

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg3> = $r4;

        $r5 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r6 = virtualinvoke $r5.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,java.lang.Object)>(8, r3);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void postReportExemptedSyncStart(java.lang.String, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(13, i0, 0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void postReportSyncScheduled(java.lang.String, int, boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1;
        boolean z0;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        i1 = (int) z0;

        $r3 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(12, i0, i1, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void removeListener(com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener)
    {
        com.android.server.usage.AppStandbyController r0;
        java.util.ArrayList r1, $r2;
        java.lang.Throwable $r3;
        com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: java.util.ArrayList mPackageAccessListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void reportEvent(android.app.usage.UsageEvents$Event, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i2, i3, i4, i5;
        java.lang.String r1;
        long l1;
        boolean $z0;
        java.lang.Object $r2, r8, r10, r16;
        android.os.UserHandle $r3;
        java.lang.Throwable $r4, $r5, r19;
        android.app.usage.UsageEvents$Event r6;
        java.util.List r7;
        com.android.server.usage.AppStandbyController$Injector $r11;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r6 := @parameter0: android.app.usage.UsageEvents$Event;

        i4 := @parameter1: int;

        $z0 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        i0 = virtualinvoke r6.<android.app.usage.UsageEvents$Event: int getEventType()>();

        if i0 == 1 goto label03;

        if i0 == 2 goto label03;

        if i0 == 6 goto label03;

        if i0 == 7 goto label03;

        if i0 == 10 goto label03;

        if i0 == 14 goto label03;

        if i0 == 13 goto label03;

        if i0 != 19 goto label02;

        goto label03;

     label02:
        goto label17;

     label03:
        r1 = virtualinvoke r6.<android.app.usage.UsageEvents$Event: java.lang.String getPackageName()>();

        r7 = specialinvoke r0.<com.android.server.usage.AppStandbyController: java.util.List getCrossProfileTargets(java.lang.String,int)>(r1, i4);

        r8 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r8;

        r10 = r8;

     label04:
        $r11 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l1 = virtualinvoke $r11.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

     label05:
        r10 = r8;

     label06:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportEventLocked(java.lang.String,int,long,int)>(r1, i0, l1, i4);

     label07:
        r10 = r8;

     label08:
        i2 = interfaceinvoke r7.<java.util.List: int size()>();

     label09:
        i5 = 0;

     label10:
        if i5 >= i2 goto label15;

        r10 = r8;

     label11:
        $r2 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i5);

        $r3 = (android.os.UserHandle) $r2;

        i3 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

     label12:
        r16 = r8;

     label13:
        specialinvoke r0.<com.android.server.usage.AppStandbyController: void reportEventLocked(java.lang.String,int,long,int)>(r1, i0, l1, i3);

     label14:
        i5 = i5 + 1;

        goto label10;

     label15:
        r16 = r8;

     label16:
        exitmonitor r8;

     label17:
        return;

     label18:
        $r4 := @caughtexception;

        r19 = $r4;

     label19:
        r16 = r10;

     label20:
        exitmonitor r10;

     label21:
        throw r19;

     label22:
        $r5 := @caughtexception;

        r19 = $r5;

        r10 = r16;

        goto label19;

        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    public void restrictApp(java.lang.String, int, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1, $r8;
        int i0, i1, $i3, $i4;
        long l2;
        com.android.server.usage.AppStandbyController$Injector $r3, $r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;
        byte b6;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $z0 = virtualinvoke $r3.<com.android.server.usage.AppStandbyController$Injector: boolean isPackageInstalled(java.lang.String,int,int)>(r1, 0, i0);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to restrict uninstalled app: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppStandbyController", $r8);

        return;

     label1:
        $r4 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l2 = virtualinvoke $r4.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAllowRestrictedBucket>;

        if $z1 == 0 goto label2;

        b6 = 45;

        goto label3;

     label2:
        b6 = 40;

     label3:
        $i3 = i1 & 255;

        $i4 = $i3 | 1536;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void setAppStandbyBucket(java.lang.String,int,int,int,long,boolean)>(r1, i0, b6, $i4, l2, 0);

        return;
    }

    public void setActiveAdminApps(java.util.Set, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        android.util.SparseArray r1, $r2, $r3;
        java.lang.Throwable $r4;
        java.util.Set r5;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r5 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        entermonitor r1;

        if r5 != null goto label3;

     label1:
        $r3 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 = r0.<com.android.server.usage.AppStandbyController: android.util.SparseArray mActiveAdminApps>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setAppIdleAsync(java.lang.String, boolean, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        boolean z0, $z1;
        int i0, i1;
        com.android.server.usage.AppStandbyController$AppStandbyHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if r1 == null goto label2;

        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$AppStandbyHandler mHandler>;

        i1 = (int) z0;

        $r3 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$AppStandbyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(4, i0, i1, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;

     label2:
        return;
    }

    void setAppIdleEnabled(boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean z0, z1, $z2, $z3;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $z2 = r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled>;

        if $z2 == z0 goto label2;

        z1 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isInParole()>();

        r0.<com.android.server.usage.AppStandbyController: boolean mAppIdleEnabled> = z0;

        $z3 = virtualinvoke r0.<com.android.server.usage.AppStandbyController: boolean isInParole()>();

        if $z3 == z1 goto label2;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void postParoleStateChanged()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setAppStandbyBucket(java.lang.String, int, int, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1, i2;
        com.android.server.usage.AppStandbyController$Injector $r2;
        long $l3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $l3 = virtualinvoke $r2.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void setAppStandbyBucket(java.lang.String,int,int,int,long,boolean)>(r1, i0, i1, i2, $l3, 0);

        return;
    }

    public void setAppStandbyBucket(java.lang.String, int, int, int, int)
    {
        com.android.server.usage.AppStandbyController r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        android.app.usage.AppStandbyInfo $r2;
        java.util.List $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r2 = new android.app.usage.AppStandbyInfo;

        specialinvoke $r2.<android.app.usage.AppStandbyInfo: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        virtualinvoke r0.<com.android.server.usage.AppStandbyController: void setAppStandbyBuckets(java.util.List,int,int,int)>($r3, i1, i2, i3);

        return;
    }

    public void setAppStandbyBuckets(java.util.List, int, int, int)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0, i1, i2, i4, i5, $i6, i7, i8, i10;
        long l3;
        android.app.usage.AppStandbyInfo r1;
        java.lang.String r2, $r8, $r17;
        boolean $z0, z1, $z2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r12;
        java.lang.IllegalArgumentException $r7, $r11, $r16;
        com.android.server.usage.AppStandbyController$Injector $r9, $r19;
        android.content.pm.PackageManagerInternal $r10;
        java.util.List r18;
        short s9;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r18 := @parameter0: java.util.List;

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        i8 := @parameter3: int;

        i1 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>(i8, i0, i7, 0, 1, "setAppStandbyBucket", null);

        if i0 == 0 goto label02;

        if i0 != 2000 goto label01;

        goto label02;

     label01:
        z1 = 0;

        goto label03;

     label02:
        z1 = 1;

     label03:
        $z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i0, 1000);

        if $z2 == 0 goto label04;

        $i6 = staticinvoke <android.os.Process: int myPid()>();

        if i8 != $i6 goto label05;

        goto label04;

     label04:
        if z1 == 0 goto label06;

     label05:
        s9 = 1024;

        goto label08;

     label06:
        $z0 = staticinvoke <android.os.UserHandle: boolean isCore(int)>(i0);

        if $z0 == 0 goto label07;

        s9 = 1536;

        goto label08;

     label07:
        s9 = 1280;

     label08:
        i2 = interfaceinvoke r18.<java.util.List: int size()>();

        $r19 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        l3 = virtualinvoke $r19.<com.android.server.usage.AppStandbyController$Injector: long elapsedRealtime()>();

        i10 = 0;

     label09:
        if i10 >= i2 goto label13;

        $r3 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i10);

        r1 = (android.app.usage.AppStandbyInfo) $r3;

        r2 = r1.<android.app.usage.AppStandbyInfo: java.lang.String mPackageName>;

        i4 = r1.<android.app.usage.AppStandbyInfo: int mStandbyBucket>;

        if i4 < 10 goto label12;

        if i4 > 50 goto label12;

        $r9 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppStandbyController$Injector mInjector>;

        $r10 = virtualinvoke $r9.<com.android.server.usage.AppStandbyController$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        i5 = virtualinvoke $r10.<android.content.pm.PackageManagerInternal: int getPackageUid(java.lang.String,int,int)>(r2, 4980736, i1);

        if i5 == i0 goto label11;

        if i5 < 0 goto label10;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void setAppStandbyBucket(java.lang.String,int,int,int,long,boolean)>(r2, i1, i4, s9, l3, z1);

        i10 = i10 + 1;

        goto label09;

     label10:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set standby bucket for non existent package (");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label11:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set your own standby bucket");

        throw $r11;

     label12:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set the standby bucket to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label13:
        return;
    }

    void setChargingState(boolean)
    {
        com.android.server.usage.AppStandbyController r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.usage.AppStandbyController;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<com.android.server.usage.AppStandbyController: boolean mIsCharging>;

        if $z1 == z0 goto label2;

        r0.<com.android.server.usage.AppStandbyController: boolean mIsCharging> = z0;

        specialinvoke r0.<com.android.server.usage.AppStandbyController: void postParoleStateChanged()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setLastJobRunTime(java.lang.String, int, long)
    {
        com.android.server.usage.AppStandbyController r0;
        int i0;
        long l1;
        java.lang.Object r1;
        com.android.server.usage.AppIdleHistory $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.usage.AppStandbyController;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 = r0.<com.android.server.usage.AppStandbyController: java.lang.Object mAppIdleLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.usage.AppStandbyController: com.android.server.usage.AppIdleHistory mAppIdleHistory>;

        virtualinvoke $r2.<com.android.server.usage.AppIdleHistory: void setLastJobRunTime(java.lang.String,int,long)>(r4, i0, l1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
