public interface  com.android.server.usage.AppStandbyInternal extends java.lang.Object
{

    public static com.android.server.usage.AppStandbyInternal newAppStandbyController(java.lang.ClassLoader, android.content.Context, android.os.Looper)
    {
        android.content.Context r0;
        android.os.Looper r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7;
        java.lang.RuntimeException $r8;
        java.lang.ClassLoader r9;
        com.android.server.usage.AppStandbyInternal r10;

        r9 := @parameter0: java.lang.ClassLoader;

        r0 := @parameter1: android.content.Context;

        r1 := @parameter2: android.os.Looper;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.android.server.usage.AppStandbyController", 1, r9);

        $r3 = newarray (java.lang.Class)[2];

        $r3[0] = class "Landroid/content/Context;";

        $r3[1] = class "Landroid/os/Looper;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r0;

        $r5[1] = r1;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        r10 = (com.android.server.usage.AppStandbyInternal) $r6;

     label2:
        return r10;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to instantiate AppStandbyController!", $r7);

        throw $r8;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public abstract void addActiveDeviceAdmin(java.lang.String, int);

    public abstract void addListener(com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener);

    public abstract void clearCarrierPrivilegedApps();

    public abstract void dumpState(java.lang.String[], java.io.PrintWriter);

    public abstract void dumpUsers(com.android.internal.util.IndentingPrintWriter, int[], java.util.List);

    public abstract void flushToDisk();

    public abstract int getAppId(java.lang.String);

    public abstract int getAppStandbyBucket(java.lang.String, int, long, boolean);

    public abstract java.util.List getAppStandbyBuckets(int);

    public abstract int[] getIdleUidsForUser(int);

    public abstract long getTimeSinceLastJobRun(java.lang.String, int);

    public abstract void initializeDefaultsForSystemApps(int);

    public abstract boolean isAppIdleEnabled();

    public abstract boolean isAppIdleFiltered(java.lang.String, int, int, long);

    public abstract boolean isAppIdleFiltered(java.lang.String, int, long, boolean);

    public abstract boolean isInParole();

    public abstract void onAdminDataAvailable();

    public abstract void onBootPhase(int);

    public abstract void onUserRemoved(int);

    public abstract void postCheckIdleStates(int);

    public abstract void postOneTimeCheckIdleStates();

    public abstract void postReportContentProviderUsage(java.lang.String, java.lang.String, int);

    public abstract void postReportExemptedSyncStart(java.lang.String, int);

    public abstract void postReportSyncScheduled(java.lang.String, int, boolean);

    public abstract void removeListener(com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener);

    public abstract void reportEvent(android.app.usage.UsageEvents$Event, int);

    public abstract void restrictApp(java.lang.String, int, int);

    public abstract void setActiveAdminApps(java.util.Set, int);

    public abstract void setAppIdleAsync(java.lang.String, boolean, int);

    public abstract void setAppStandbyBucket(java.lang.String, int, int, int, int);

    public abstract void setAppStandbyBuckets(java.util.List, int, int, int);

    public abstract void setLastJobRunTime(java.lang.String, int, long);
}
