public final class com.android.server.usb.UsbAlsaManager extends java.lang.Object
{
    private static final java.lang.String ALSA_DIRECTORY;
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static final int USB_BLACKLIST_INPUT;
    private static final int USB_BLACKLIST_OUTPUT;
    private static final int USB_PRODUCTID_PS4CONTROLLER_ZCT1;
    private static final int USB_PRODUCTID_PS4CONTROLLER_ZCT2;
    private static final int USB_VENDORID_SONY;
    private static final boolean mIsSingleMode;
    static final java.util.List sDeviceBlacklist;
    private final java.util.ArrayList mAlsaDevices;
    private android.media.IAudioService mAudioService;
    private final com.android.internal.alsa.AlsaCardsParser mCardsParser;
    private final android.content.Context mContext;
    private final boolean mHasMidiFeature;
    private final java.util.HashMap mMidiDevices;
    private com.android.server.usb.UsbMidiDevice mPeripheralMidiDevice;
    private com.android.server.usb.UsbAlsaDevice mSelectedDevice;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        com.android.server.usb.UsbAlsaManager$BlackListEntry[] $r2;
        com.android.server.usb.UsbAlsaManager$BlackListEntry $r3, $r4;
        java.util.List $r5;

        <com.android.server.usb.UsbAlsaManager: boolean mIsSingleMode> = 1;

        <com.android.server.usb.UsbAlsaManager: int USB_VENDORID_SONY> = 1356;

        <com.android.server.usb.UsbAlsaManager: int USB_PRODUCTID_PS4CONTROLLER_ZCT2> = 2508;

        <com.android.server.usb.UsbAlsaManager: int USB_PRODUCTID_PS4CONTROLLER_ZCT1> = 1476;

        <com.android.server.usb.UsbAlsaManager: int USB_BLACKLIST_OUTPUT> = 1;

        <com.android.server.usb.UsbAlsaManager: int USB_BLACKLIST_INPUT> = 2;

        <com.android.server.usb.UsbAlsaManager: boolean DEBUG> = 0;

        <com.android.server.usb.UsbAlsaManager: java.lang.String ALSA_DIRECTORY> = "/dev/snd/";

        $r0 = class "Lcom/android/server/usb/UsbAlsaManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.usb.UsbAlsaManager: java.lang.String TAG> = $r1;

        $r2 = newarray (com.android.server.usb.UsbAlsaManager$BlackListEntry)[2];

        $r3 = new com.android.server.usb.UsbAlsaManager$BlackListEntry;

        specialinvoke $r3.<com.android.server.usb.UsbAlsaManager$BlackListEntry: void <init>(int,int,int)>(1356, 1476, 1);

        $r2[0] = $r3;

        $r4 = new com.android.server.usb.UsbAlsaManager$BlackListEntry;

        specialinvoke $r4.<com.android.server.usb.UsbAlsaManager$BlackListEntry: void <init>(int,int,int)>(1356, 2508, 1);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        <com.android.server.usb.UsbAlsaManager: java.util.List sDeviceBlacklist> = $r5;

        return;
    }

    void <init>(android.content.Context)
    {
        com.android.server.usb.UsbAlsaManager r0;
        android.content.Context r1;
        com.android.internal.alsa.AlsaCardsParser $r2;
        java.util.ArrayList $r3;
        java.util.HashMap $r4;
        android.content.pm.PackageManager $r5;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.internal.alsa.AlsaCardsParser;

        specialinvoke $r2.<com.android.internal.alsa.AlsaCardsParser: void <init>()>();

        r0.<com.android.server.usb.UsbAlsaManager: com.android.internal.alsa.AlsaCardsParser mCardsParser> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbAlsaManager: java.util.HashMap mMidiDevices> = $r4;

        r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbMidiDevice mPeripheralMidiDevice> = null;

        r0.<com.android.server.usb.UsbAlsaManager: android.content.Context mContext> = r1;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r5.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.midi");

        r0.<com.android.server.usb.UsbAlsaManager: boolean mHasMidiFeature> = $z0;

        return;
    }

    private void deselectAlsaDevice()
    {
        com.android.server.usb.UsbAlsaManager r0;
        com.android.server.usb.UsbAlsaDevice $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice mSelectedDevice>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice mSelectedDevice>;

        virtualinvoke $r3.<com.android.server.usb.UsbAlsaDevice: void stop()>();

        r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice mSelectedDevice> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int getAlsaDeviceListIndexFor(java.lang.String)
    {
        com.android.server.usb.UsbAlsaManager r0;
        java.lang.String r1, $r6;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.usb.UsbAlsaDevice $r5;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: java.lang.String;

        i1 = 0;

     label1:
        $r2 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.usb.UsbAlsaDevice) $r4;

        $r6 = virtualinvoke $r5.<com.android.server.usb.UsbAlsaDevice: java.lang.String getDeviceAddress()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static boolean isDeviceBlacklisted(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.util.Iterator r0;
        boolean z0, z1;
        com.android.server.usb.UsbAlsaManager$BlackListEntry r1;
        java.util.List $r2;
        java.lang.Object $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = <com.android.server.usb.UsbAlsaManager: java.util.List sDeviceBlacklist>;

        r0 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        z1 = 0;

        if z0 == 0 goto label4;

        $r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.usb.UsbAlsaManager$BlackListEntry) $r3;

        $i3 = r1.<com.android.server.usb.UsbAlsaManager$BlackListEntry: int mVendorId>;

        if $i3 != i0 goto label3;

        $i4 = r1.<com.android.server.usb.UsbAlsaManager$BlackListEntry: int mProductId>;

        if $i4 != i1 goto label3;

        $i5 = r1.<com.android.server.usb.UsbAlsaManager$BlackListEntry: int mFlags>;

        $i6 = $i5 & i2;

        if $i6 == 0 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        goto label1;

     label4:
        return 0;
    }

    private com.android.server.usb.UsbAlsaDevice removeAlsaDeviceFromList(java.lang.String)
    {
        com.android.server.usb.UsbAlsaManager r0;
        java.lang.String r1;
        int i0;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        com.android.server.usb.UsbAlsaDevice $r4;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<com.android.server.usb.UsbAlsaManager: int getAlsaDeviceListIndexFor(java.lang.String)>(r1);

        if i0 <= -1 goto label1;

        $r2 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        $r4 = (com.android.server.usb.UsbAlsaDevice) $r3;

        return $r4;

     label1:
        return null;
    }

    private void selectAlsaDevice(com.android.server.usb.UsbAlsaDevice)
    {
        com.android.server.usb.UsbAlsaManager r0;
        int i0;
        com.android.server.usb.UsbAlsaDevice $r1, r5;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r5 := @parameter0: com.android.server.usb.UsbAlsaDevice;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice mSelectedDevice>;

        if $r1 == null goto label2;

        specialinvoke r0.<com.android.server.usb.UsbAlsaManager: void deselectAlsaDevice()>();

     label2:
        $r2 = r0.<com.android.server.usb.UsbAlsaManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "usb_audio_automatic_routing_disabled", 0);

     label3:
        if i0 == 0 goto label4;

        exitmonitor r0;

        return;

     label4:
        r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice mSelectedDevice> = r5;

        virtualinvoke r5.<com.android.server.usb.UsbAlsaDevice: void start()>();

     label5:
        exitmonitor r0;

        return;

     label6:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void dump(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.usb.UsbAlsaManager r0;
        com.android.internal.util.dump.DualDumpOutputStream r1;
        java.util.Iterator r2, r14;
        com.android.internal.alsa.AlsaCardsParser $r3;
        int $i0;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        java.util.HashMap $r5, $r8;
        java.util.Set $r6;
        java.lang.Object $r7, $r9, $r11;
        com.android.server.usb.UsbMidiDevice $r10;
        com.android.server.usb.UsbAlsaDevice $r12;
        java.lang.String r13, r15;
        long l1, l2;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r13 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        l2 = virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r13, l1);

        $r3 = r0.<com.android.server.usb.UsbAlsaManager: com.android.internal.alsa.AlsaCardsParser mCardsParser>;

        $i0 = virtualinvoke $r3.<com.android.internal.alsa.AlsaCardsParser: int getScanStatus()>();

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,int)>("cards_parser", 1120986464257L, $i0);

        $r4 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        r14 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.android.server.usb.UsbAlsaDevice) $r11;

        virtualinvoke $r12.<com.android.server.usb.UsbAlsaDevice: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r1, "alsa_devices", 2246267895810L);

        goto label1;

     label2:
        $r5 = r0.<com.android.server.usb.UsbAlsaManager: java.util.HashMap mMidiDevices>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r7;

        $r8 = r0.<com.android.server.usb.UsbAlsaManager: java.util.HashMap mMidiDevices>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r15);

        $r10 = (com.android.server.usb.UsbMidiDevice) $r9;

        virtualinvoke $r10.<com.android.server.usb.UsbMidiDevice: void dump(java.lang.String,com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r15, r1, "midi_devices", 2246267895811L);

        goto label3;

     label4:
        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l2);

        return;
    }

    public void logDevices(java.lang.String)
    {
        com.android.server.usb.UsbAlsaManager r0;
        java.lang.String r1;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void logDevicesList(java.lang.String)
    {
        com.android.server.usb.UsbAlsaManager r0;
        java.lang.String r1;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: java.lang.String;

        return;
    }

    com.android.server.usb.UsbAlsaDevice selectDefaultDevice()
    {
        com.android.server.usb.UsbAlsaManager r0;
        com.android.server.usb.UsbAlsaDevice r1;
        java.util.ArrayList $r2, $r3;
        int $i0;
        java.lang.Object $r4;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        $r2 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label2;

        $r3 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r1 = (com.android.server.usb.UsbAlsaDevice) $r4;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.usb.UsbAlsaManager: void selectAlsaDevice(com.android.server.usb.UsbAlsaDevice)>(r1);

     label1:
        return r1;

     label2:
        return null;
    }

    void setPeripheralMidiState(boolean, int, int)
    {
        com.android.server.usb.UsbAlsaManager r0;
        boolean z0, $z1;
        int i0, i1;
        android.content.res.Resources r1;
        com.android.server.usb.UsbMidiDevice $r2, $r9, r11;
        android.os.Bundle $r3;
        android.content.Context $r4, $r8;
        java.lang.String $r5, $r6, $r7;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z1 = r0.<com.android.server.usb.UsbAlsaManager: boolean mHasMidiFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        $r2 = r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbMidiDevice mPeripheralMidiDevice>;

        if $r2 != null goto label2;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        $r4 = r0.<com.android.server.usb.UsbAlsaManager: android.content.Context mContext>;

        r1 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getString(int)>(17041390);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("name", $r5);

        $r6 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getString(int)>(17041389);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("manufacturer", $r6);

        $r7 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getString(int)>(17041391);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("product", $r7);

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("alsa_card", i0);

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("alsa_device", i1);

        $r8 = r0.<com.android.server.usb.UsbAlsaManager: android.content.Context mContext>;

        $r9 = staticinvoke <com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice create(android.content.Context,android.os.Bundle,int,int)>($r8, $r3, i0, i1);

        r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbMidiDevice mPeripheralMidiDevice> = $r9;

        goto label3;

     label2:
        if z0 != 0 goto label3;

        r11 = r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbMidiDevice mPeripheralMidiDevice>;

        if r11 == null goto label3;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r11);

        r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbMidiDevice mPeripheralMidiDevice> = null;

        goto label3;

     label3:
        return;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbAlsaManager r0;
        android.os.IBinder $r1;
        android.media.IAudioService $r2;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        $r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

        r0.<com.android.server.usb.UsbAlsaManager: android.media.IAudioService mAudioService> = $r2;

        return;
    }

    void usbDeviceAdded(java.lang.String, android.hardware.usb.UsbDevice, com.android.server.usb.descriptors.UsbDescriptorParser)
    {
        com.android.server.usb.UsbAlsaManager r0;
        java.lang.String r1, r4, r5, $r9, $r10, $r19, r24, r26, $r27;
        com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, $z11;
        com.android.internal.alsa.AlsaCardsParser $r6, $r7;
        com.android.server.usb.UsbAlsaDevice $r8;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.ArrayList $r11;
        android.os.Bundle $r12;
        java.util.HashMap $r13;
        java.lang.StringBuilder $r15;
        android.hardware.usb.UsbDevice r20;
        com.android.server.usb.descriptors.UsbDescriptorParser r21;
        android.media.IAudioService r22;
        android.content.Context $r28;
        com.android.server.usb.UsbMidiDevice r29;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r1 := @parameter0: java.lang.String;

        r20 := @parameter1: android.hardware.usb.UsbDevice;

        r21 := @parameter2: com.android.server.usb.descriptors.UsbDescriptorParser;

        $r6 = r0.<com.android.server.usb.UsbAlsaManager: com.android.internal.alsa.AlsaCardsParser mCardsParser>;

        virtualinvoke $r6.<com.android.internal.alsa.AlsaCardsParser: int scan()>();

        $r7 = r0.<com.android.server.usb.UsbAlsaManager: com.android.internal.alsa.AlsaCardsParser mCardsParser>;

        r2 = virtualinvoke $r7.<com.android.internal.alsa.AlsaCardsParser: com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord findCardNumFor(java.lang.String)>(r1);

        if r2 != null goto label01;

        return;

     label01:
        z8 = virtualinvoke r21.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasInput()>();

        z9 = 1;

        if z8 == 0 goto label02;

        $i5 = virtualinvoke r20.<android.hardware.usb.UsbDevice: int getVendorId()>();

        $i6 = virtualinvoke r20.<android.hardware.usb.UsbDevice: int getProductId()>();

        $z7 = staticinvoke <com.android.server.usb.UsbAlsaManager: boolean isDeviceBlacklisted(int,int,int)>($i5, $i6, 2);

        if $z7 != 0 goto label02;

        z10 = 1;

        goto label03;

     label02:
        z10 = 0;

     label03:
        $z11 = virtualinvoke r21.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasOutput()>();

        if $z11 == 0 goto label04;

        $i3 = virtualinvoke r20.<android.hardware.usb.UsbDevice: int getVendorId()>();

        $i4 = virtualinvoke r20.<android.hardware.usb.UsbDevice: int getProductId()>();

        $z6 = staticinvoke <com.android.server.usb.UsbAlsaManager: boolean isDeviceBlacklisted(int,int,int)>($i3, $i4, 1);

        if $z6 != 0 goto label04;

        goto label05;

     label04:
        z9 = 0;

     label05:
        if z10 != 0 goto label06;

        if z9 == 0 goto label08;

     label06:
        z0 = virtualinvoke r21.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean isInputHeadset()>();

        z1 = virtualinvoke r21.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean isOutputHeadset()>();

        r22 = r0.<com.android.server.usb.UsbAlsaManager: android.media.IAudioService mAudioService>;

        if r22 != null goto label07;

        $r19 = <com.android.server.usb.UsbAlsaManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r19, "no AudioService");

        return;

     label07:
        $r8 = new com.android.server.usb.UsbAlsaDevice;

        $i1 = virtualinvoke r2.<com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord: int getCardNum()>();

        specialinvoke $r8.<com.android.server.usb.UsbAlsaDevice: void <init>(android.media.IAudioService,int,int,java.lang.String,boolean,boolean,boolean,boolean)>(r22, $i1, 0, r1, z9, z10, z0, z1);

        $r9 = virtualinvoke r2.<com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord: java.lang.String getCardName()>();

        $r10 = virtualinvoke r2.<com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord: java.lang.String getCardDescription()>();

        virtualinvoke $r8.<com.android.server.usb.UsbAlsaDevice: void setDeviceNameAndDescription(java.lang.String,java.lang.String)>($r9, $r10);

        $r11 = r0.<com.android.server.usb.UsbAlsaManager: java.util.ArrayList mAlsaDevices>;

        virtualinvoke $r11.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r8);

        specialinvoke r0.<com.android.server.usb.UsbAlsaManager: void selectAlsaDevice(com.android.server.usb.UsbAlsaDevice)>($r8);

     label08:
        $z2 = virtualinvoke r21.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasMIDIInterface()>();

        if $z2 == 0 goto label14;

        $z3 = r0.<com.android.server.usb.UsbAlsaManager: boolean mHasMidiFeature>;

        if $z3 == 0 goto label14;

        $r12 = new android.os.Bundle;

        specialinvoke $r12.<android.os.Bundle: void <init>()>();

        r4 = virtualinvoke r20.<android.hardware.usb.UsbDevice: java.lang.String getManufacturerName()>();

        r24 = virtualinvoke r20.<android.hardware.usb.UsbDevice: java.lang.String getProductName()>();

        r5 = virtualinvoke r20.<android.hardware.usb.UsbDevice: java.lang.String getVersion()>();

        if r4 == null goto label12;

        $z4 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label09;

        goto label12;

     label09:
        if r24 == null goto label11;

        $z5 = virtualinvoke r24.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label10;

        goto label11;

     label10:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        r26 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label13;

     label11:
        r26 = r4;

        goto label13;

     label12:
        r26 = r24;

     label13:
        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("name", r26);

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("manufacturer", r4);

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("product", r24);

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("version", r5);

        $r27 = virtualinvoke r20.<android.hardware.usb.UsbDevice: java.lang.String getSerialNumber()>();

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("serial_number", $r27);

        $i7 = virtualinvoke r2.<com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord: int getCardNum()>();

        virtualinvoke $r12.<android.os.Bundle: void putInt(java.lang.String,int)>("alsa_card", $i7);

        virtualinvoke $r12.<android.os.Bundle: void putInt(java.lang.String,int)>("alsa_device", 0);

        virtualinvoke $r12.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("usb_device", r20);

        $r28 = r0.<com.android.server.usb.UsbAlsaManager: android.content.Context mContext>;

        $i8 = virtualinvoke r2.<com.android.internal.alsa.AlsaCardsParser$AlsaCardRecord: int getCardNum()>();

        r29 = staticinvoke <com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice create(android.content.Context,android.os.Bundle,int,int)>($r28, $r12, $i8, 0);

        if r29 == null goto label14;

        $r13 = r0.<com.android.server.usb.UsbAlsaManager: java.util.HashMap mMidiDevices>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r29);

        goto label14;

     label14:
        virtualinvoke r0.<com.android.server.usb.UsbAlsaManager: void logDevices(java.lang.String)>("deviceAdded()");

        return;
    }

    void usbDeviceRemoved(java.lang.String)
    {
        com.android.server.usb.UsbAlsaManager r0;
        java.lang.StringBuilder r1, r18;
        java.lang.String $r4, $r7, r11, r13, r17;
        com.android.server.usb.UsbAlsaDevice $r8, r12;
        java.lang.Throwable $r10;
        java.util.HashMap $r14;
        java.lang.Object $r15;
        com.android.server.usb.UsbMidiDevice r16;

        r0 := @this: com.android.server.usb.UsbAlsaManager;

        r11 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r12 = specialinvoke r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice removeAlsaDeviceFromList(java.lang.String)>(r11);

        r13 = <com.android.server.usb.UsbAlsaManager: java.lang.String TAG>;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USB Audio Device Removed: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r13, $r4);

     label2:
        if r12 == null goto label4;

     label3:
        $r8 = r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice mSelectedDevice>;

        if r12 != $r8 goto label4;

        specialinvoke r0.<com.android.server.usb.UsbAlsaManager: void deselectAlsaDevice()>();

        virtualinvoke r0.<com.android.server.usb.UsbAlsaManager: com.android.server.usb.UsbAlsaDevice selectDefaultDevice()>();

     label4:
        $r14 = r0.<com.android.server.usb.UsbAlsaManager: java.util.HashMap mMidiDevices>;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r11);

        r16 = (com.android.server.usb.UsbMidiDevice) $r15;

     label5:
        if r16 == null goto label7;

     label6:
        r17 = <com.android.server.usb.UsbAlsaManager: java.lang.String TAG>;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USB MIDI Device Removed: ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r7 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r17, $r7);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

     label7:
        virtualinvoke r0.<com.android.server.usb.UsbAlsaManager: void logDevices(java.lang.String)>("usbDeviceRemoved()");

     label8:
        exitmonitor r0;

        return;

     label9:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }
}
