abstract class com.android.server.usb.UsbDeviceManager$UsbHandler extends android.os.Handler
{
    protected static final java.lang.String USB_PERSISTENT_CONFIG_PROPERTY;
    private boolean mAdbNotificationShown;
    private boolean mAudioAccessoryConnected;
    private boolean mAudioAccessorySupported;
    private boolean mAudioSourceEnabled;
    protected boolean mBootCompleted;
    private android.content.Intent mBroadcastedIntent;
    private boolean mConfigured;
    protected boolean mConnected;
    protected final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private android.hardware.usb.UsbAccessory mCurrentAccessory;
    protected long mCurrentFunctions;
    protected boolean mCurrentFunctionsApplied;
    protected boolean mCurrentUsbFunctionsReceived;
    protected int mCurrentUser;
    private boolean mHideUsbNotification;
    private boolean mHostConnected;
    private int mMidiCard;
    private int mMidiDevice;
    private boolean mMidiEnabled;
    private android.app.NotificationManager mNotificationManager;
    private boolean mPendingBootBroadcast;
    private final com.android.server.usb.UsbPermissionManager mPermissionManager;
    private boolean mScreenLocked;
    protected long mScreenUnlockedFunctions;
    protected android.content.SharedPreferences mSettings;
    private boolean mSinkPower;
    private boolean mSourcePower;
    private boolean mSupportsAllCombinations;
    private boolean mSystemReady;
    private final com.android.server.usb.UsbAlsaManager mUsbAlsaManager;
    private boolean mUsbCharging;
    protected final com.android.server.usb.UsbDeviceManager mUsbDeviceManager;
    private int mUsbNotificationId;
    protected boolean mUseUsbNotification;

    void <init>(android.os.Looper, android.content.Context, com.android.server.usb.UsbDeviceManager, com.android.server.usb.UsbAlsaManager, com.android.server.usb.UsbPermissionManager)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Context r1, $r6, $r12, $r13;
        com.android.server.usb.UsbDeviceManager r2;
        com.android.server.usb.UsbAlsaManager r3;
        com.android.server.usb.UsbPermissionManager r4;
        android.content.ContentResolver $r5;
        int $i0, $i1;
        java.lang.Object[] $r7;
        java.util.Locale $r8;
        java.lang.Integer $r9;
        java.lang.String $r10, $r11, $r15;
        long $l2;
        android.content.res.Resources $r14;
        boolean $z0, $z1, z2, z3;
        android.os.Looper r16;
        android.content.SharedPreferences r17;
        android.os.storage.StorageManager r18;
        android.os.storage.StorageVolume r19;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r16 := @parameter0: android.os.Looper;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: com.android.server.usb.UsbDeviceManager;

        r3 := @parameter3: com.android.server.usb.UsbAlsaManager;

        r4 := @parameter4: com.android.server.usb.UsbPermissionManager;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r16);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext> = r1;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbDeviceManager mUsbDeviceManager> = r2;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbAlsaManager mUsbAlsaManager> = r3;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbPermissionManager mPermissionManager> = r4;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.ContentResolver mContentResolver> = $r5;

        $i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mCurrentUser> = $i0;

        z2 = 1;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked> = 1;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        r17 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.SharedPreferences getPinnedSharedPrefs(android.content.Context)>($r6);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.SharedPreferences mSettings> = r17;

        if r17 != null goto label1;

        $r15 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r15, "Couldn\'t load shared preferences");

        goto label2;

     label1:
        $r8 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r7 = newarray (java.lang.Object)[1];

        $i1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mCurrentUser>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r8, "usb-screen-unlocked-config-%d", $r7);

        $r11 = interfaceinvoke r17.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r10, "");

        $l2 = staticinvoke <android.hardware.usb.UsbManager: long usbFunctionsFromString(java.lang.String)>($r11);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions> = $l2;

     label2:
        $r12 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        r18 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r12);

        if r18 == null goto label3;

        r19 = virtualinvoke r18.<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()>();

        goto label4;

     label3:
        r19 = null;

     label4:
        if r19 == null goto label5;

        $z1 = virtualinvoke r19.<android.os.storage.StorageVolume: boolean allowMassStorage()>();

        if $z1 == 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        if z3 != 0 goto label7;

        $r13 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r14.<android.content.res.Resources: boolean getBoolean(int)>(17891565);

        if $z0 == 0 goto label7;

        goto label8;

     label7:
        z2 = 0;

     label8:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mUseUsbNotification> = z2;

        return;
    }

    private void dumpFunctions(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long, long)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        com.android.internal.util.dump.DualDumpOutputStream r1;
        java.lang.String r2, $r3;
        long l0, l1, $l2, $l3, $l5, $l6;
        byte $b4;
        boolean $z0;
        int i7;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        i7 = 0;

     label1:
        if i7 >= 63 goto label4;

        $l2 = 1L << i7;

        $l3 = $l2 & l1;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        $z0 = virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: boolean isProto()>();

        if $z0 == 0 goto label2;

        $l6 = 1L << i7;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,long)>(r2, l0, $l6);

        goto label3;

     label2:
        $l5 = 1L << i7;

        $r3 = staticinvoke <android.hardware.usb.gadget.V1_0.GadgetFunction: java.lang.String toString(long)>($l5);

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>(r2, l0, $r3);

        goto label3;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        return;
    }

    private boolean isTv()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        return $z0;
    }

    private boolean isUsbStateChanged(android.content.Intent)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Intent r1, $r6, r10;
        android.os.Bundle $r2, $r3;
        java.util.Set $r4, r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r5, $r7;
        java.lang.String $r8, r13;
        java.util.Iterator r11, r12;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke r1.<android.content.Intent: android.os.Bundle getExtras()>();

        r9 = virtualinvoke $r2.<android.os.Bundle: java.util.Set keySet()>();

        r10 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Intent mBroadcastedIntent>;

        if r10 != null goto label4;

        r11 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $z5 = virtualinvoke r1.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>($r8, 0);

        if $z5 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        goto label8;

     label4:
        $r3 = virtualinvoke r10.<android.content.Intent: android.os.Bundle getExtras()>();

        $r4 = virtualinvoke $r3.<android.os.Bundle: java.util.Set keySet()>();

        $z0 = interfaceinvoke r9.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label5;

        return 1;

     label5:
        r12 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r5 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r5;

        $z2 = virtualinvoke r1.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>(r13, 0);

        $r6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Intent mBroadcastedIntent>;

        $z3 = virtualinvoke $r6.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>(r13, 0);

        if $z2 == $z3 goto label7;

        return 1;

     label7:
        goto label6;

     label8:
        return 0;
    }

    private void notifyAccessoryModeExit()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.hardware.usb.UsbAccessory r1;
        java.lang.String $r2;
        boolean $z0;
        com.android.server.usb.UsbPermissionManager $r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $r2 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r2, "exited USB accessory mode");

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 0);

        r1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        if r1 == null goto label2;

        $z0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbPermissionManager: void usbAccessoryRemoved(android.hardware.usb.UsbAccessory)>(r1);

     label1:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory> = null;

     label2:
        return;
    }

    private void setAdbEnabled(boolean)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        boolean z0;
        long $l0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setSystemProperty(java.lang.String,java.lang.String)>("persist.sys.usb.config", "adb");

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setSystemProperty(java.lang.String,java.lang.String)>("persist.sys.usb.config", "");

     label2:
        $l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>($l0, 1);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAdbNotification(boolean)>(0);

        return;
    }

    private void setScreenUnlockedFunctions()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        long $l0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>($l0, 0);

        return;
    }

    private void updateCurrentAccessory()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        boolean z0, $z1, $z2;
        com.android.server.usb.UsbDeviceManager $r1, $r18;
        java.lang.String $r2, $r4, $r8, $r9, $r10, $r11, $r12, $r17, r24;
        com.android.server.usb.UsbSerialReader $r3;
        com.android.server.usb.UsbPermissionManager $r5;
        android.content.Context $r6;
        android.hardware.usb.UsbAccessory $r7, $r15, $r20;
        java.lang.StringBuilder $r13;
        com.android.server.usb.UsbProfileGroupSettingsManager $r19;
        java.lang.String[] r21;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        z0 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean hasMessages(int)>(8);

        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConfigured>;

        if $z1 == 0 goto label4;

        if z0 == 0 goto label4;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbDeviceManager mUsbDeviceManager>;

        r21 = virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager: java.lang.String[] getAccessoryStrings()>();

        if r21 == null goto label2;

        $r3 = new com.android.server.usb.UsbSerialReader;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r5 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        $r4 = r21[5];

        specialinvoke $r3.<com.android.server.usb.UsbSerialReader: void <init>(android.content.Context,com.android.server.usb.UsbPermissionManager,java.lang.String)>($r6, $r5, $r4);

        $r7 = new android.hardware.usb.UsbAccessory;

        $r12 = r21[0];

        $r11 = r21[1];

        $r10 = r21[2];

        $r9 = r21[3];

        $r8 = r21[4];

        specialinvoke $r7.<android.hardware.usb.UsbAccessory: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.hardware.usb.IUsbSerialReader)>($r12, $r11, $r10, $r9, $r8, $r3);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory> = $r7;

        virtualinvoke $r3.<com.android.server.usb.UsbSerialReader: void setDevice(java.lang.Object)>($r7);

        r24 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entering USB accessory mode: ");

        $r15 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r24, $r17);

        $z2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z2 == 0 goto label1;

        $r18 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbDeviceManager mUsbDeviceManager>;

        $r19 = virtualinvoke $r18.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbProfileGroupSettingsManager getCurrentSettings()>();

        $r20 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        virtualinvoke $r19.<com.android.server.usb.UsbProfileGroupSettingsManager: void accessoryAttached(android.hardware.usb.UsbAccessory)>($r20);

     label1:
        goto label3;

     label2:
        $r2 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r2, "nativeGetAccessoryStrings failed");

     label3:
        goto label5;

     label4:
        if z0 != 0 goto label5;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void notifyAccessoryModeExit()>();

     label5:
        return;
    }

    private void updateMidiFunction()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        long l0, $l1;
        java.io.File r1;
        byte $b2;
        boolean $z0, $z1, z2, z3, $z4, z5;
        int $i3, $i4, $i5, $i6;
        java.lang.Throwable $r2, $r3;
        java.lang.String $r4;
        java.util.Scanner r5, r6, r7;
        com.android.server.usb.UsbAlsaManager r10;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $l1 = l0 & 8L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $z0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mMidiEnabled>;

        if z2 == $z0 goto label23;

        z3 = z2;

        if z2 == 0 goto label22;

        r5 = null;

        r6 = null;

     label03:
        r7 = new java.util.Scanner;

     label04:
        r5 = null;

        r6 = null;

     label05:
        r1 = new java.io.File;

     label06:
        r5 = null;

        r6 = null;

     label07:
        specialinvoke r1.<java.io.File: void <init>(java.lang.String)>("/sys/class/android_usb/android0/f_midi/alsa");

     label08:
        r5 = null;

        r6 = null;

     label09:
        specialinvoke r7.<java.util.Scanner: void <init>(java.io.File)>(r1);

     label10:
        r5 = r7;

        r6 = r7;

     label11:
        $i3 = virtualinvoke r7.<java.util.Scanner: int nextInt()>();

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mMidiCard> = $i3;

     label12:
        r5 = r7;

        r6 = r7;

     label13:
        $i4 = virtualinvoke r7.<java.util.Scanner: int nextInt()>();

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mMidiDevice> = $i4;

     label14:
        r6 = r7;

        goto label19;

     label15:
        $r2 := @caughtexception;

        goto label20;

     label16:
        $r3 := @caughtexception;

        r5 = r6;

     label17:
        $r4 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "could not open MIDI file", $r3);

     label18:
        z3 = 0;

        z2 = 0;

        if r6 == null goto label22;

     label19:
        virtualinvoke r6.<java.util.Scanner: void close()>();

        z3 = z2;

        goto label22;

     label20:
        if r5 == null goto label21;

        virtualinvoke r5.<java.util.Scanner: void close()>();

     label21:
        throw $r2;

     label22:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mMidiEnabled> = z3;

     label23:
        r10 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbAlsaManager mUsbAlsaManager>;

        $z4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mMidiEnabled>;

        if $z4 == 0 goto label24;

        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConfigured>;

        if $z1 == 0 goto label24;

        z5 = 1;

        goto label25;

     label24:
        z5 = 0;

     label25:
        $i5 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mMidiCard>;

        $i6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mMidiDevice>;

        virtualinvoke r10.<com.android.server.usb.UsbAlsaManager: void setPeripheralMidiState(boolean,int,int)>(z5, $i5, $i6);

        return;

        catch java.io.FileNotFoundException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.io.FileNotFoundException from label05 to label06 with label16;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.io.FileNotFoundException from label07 to label08 with label16;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.io.FileNotFoundException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.io.FileNotFoundException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.io.FileNotFoundException from label13 to label14 with label16;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
    }

    private void updateUsbFunctions()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateMidiFunction()>();

        return;
    }

    public void dump(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        com.android.internal.util.dump.DualDumpOutputStream r1;
        long $l0, $l1, l4, l5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r9, r10;
        java.lang.Exception $r6, $r8;
        android.hardware.usb.UsbAccessory r11;
        java.io.File r12, r14;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r10 := @parameter1: java.lang.String;

        l4 := @parameter2: long;

        l5 = virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r10, l4);

        $l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void dumpFunctions(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,long)>(r1, "current_functions", 2259152797697L, $l0);

        $z0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mCurrentFunctionsApplied>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("current_functions_applied", 1133871366146L, $z0);

        $l1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void dumpFunctions(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,long)>(r1, "screen_unlocked_functions", 2259152797699L, $l1);

        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("screen_locked", 1133871366148L, $z1);

        $z2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("connected", 1133871366149L, $z2);

        $z3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConfigured>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("configured", 1133871366150L, $z3);

        r11 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        if r11 == null goto label1;

        staticinvoke <com.android.internal.usb.DumpUtils: void writeAccessory(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,android.hardware.usb.UsbAccessory)>(r1, "current_accessory", 1146756268039L, r11);

     label1:
        $z4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHostConnected>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("host_connected", 1133871366152L, $z4);

        $z5 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSourcePower>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("source_power", 1133871366153L, $z5);

        $z6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSinkPower>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("sink_power", 1133871366154L, $z6);

        $z7 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mUsbCharging>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("usb_charging", 1133871366155L, $z7);

        $z8 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHideUsbNotification>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("hide_usb_notification", 1133871366156L, $z8);

        $z9 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAudioAccessoryConnected>;

        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,boolean)>("audio_accessory_connected", 1133871366157L, $z9);

     label2:
        r12 = new java.io.File;

        specialinvoke r12.<java.io.File: void <init>(java.lang.String)>("/sys/class/android_usb/android0/state");

        $r2 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r12, 0, null);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        staticinvoke <com.android.internal.util.dump.DumpUtils: void writeStringIfNotNull(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,java.lang.String)>(r1, "kernel_state", 1138166333455L, $r3);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r7, "Could not read kernel state", $r6);

     label5:
        r14 = new java.io.File;

        specialinvoke r14.<java.io.File: void <init>(java.lang.String)>("/sys/class/android_usb/android0/functions");

        $r4 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>(r14, 0, null);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        staticinvoke <com.android.internal.util.dump.DumpUtils: void writeStringIfNotNull(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,java.lang.String)>(r1, "kernel_function_list", 1138166333456L, $r5);

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        $r9 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Could not read kernel function list", $r8);

     label8:
        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l5);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void finishBoot()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.usb.UsbDeviceManager $r1;
        com.android.server.usb.UsbProfileGroupSettingsManager $r2;
        android.hardware.usb.UsbAccessory $r3, $r4;
        long $l0, $l2, $l3;
        byte $b1;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $z0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z0 == 0 goto label5;

        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mCurrentUsbFunctionsReceived>;

        if $z1 == 0 goto label5;

        $z2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSystemReady>;

        if $z2 == 0 goto label5;

        $z3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mPendingBootBroadcast>;

        if $z3 == 0 goto label1;

        $l2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $l3 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long getAppliedFunctions(long)>($l2);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbStateBroadcastIfNeeded(long)>($l3);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mPendingBootBroadcast> = 0;

     label1:
        $z4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked>;

        if $z4 != 0 goto label2;

        $l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setScreenUnlockedFunctions()>();

        goto label3;

     label2:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 0);

     label3:
        $r4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        if $r4 == null goto label4;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: com.android.server.usb.UsbDeviceManager mUsbDeviceManager>;

        $r2 = virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbProfileGroupSettingsManager getCurrentSettings()>();

        $r3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        virtualinvoke $r2.<com.android.server.usb.UsbProfileGroupSettingsManager: void accessoryAttached(android.hardware.usb.UsbAccessory)>($r3);

     label4:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification(boolean)>(0);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAdbNotification(boolean)>(0);

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbFunctions()>();

     label5:
        return;
    }

    long getAppliedFunctions(long)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        long l0, $l2, $l3;
        byte $b1;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l3 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long getChargingFunctions()>();

        return $l3;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isAdbEnabled()>();

        if $z0 == 0 goto label2;

        $l2 = 1L | l0;

        return $l2;

     label2:
        return l0;
    }

    protected long getChargingFunctions()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $z0 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isAdbEnabled()>();

        if $z0 == 0 goto label1;

        return 1L;

     label1:
        return 4L;
    }

    public android.hardware.usb.UsbAccessory getCurrentAccessory()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.hardware.usb.UsbAccessory $r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory mCurrentAccessory>;

        return $r1;
    }

    public long getEnabledFunctions()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        long $l0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        return $l0;
    }

    protected android.content.SharedPreferences getPinnedSharedPrefs(android.content.Context)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Context r1, $r5;
        java.io.File $r3, $r4;
        android.content.SharedPreferences $r6;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: android.content.Context;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataSystemDeDirectory(int)>(0);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "UsbDeviceManagerPrefs.xml");

        $r5 = virtualinvoke r1.<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.io.File,int)>($r3, 0);

        return $r6;
    }

    public long getScreenUnlockedFunctions()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        long $l0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $l0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        return $l0;
    }

    protected java.lang.String getSystemProperty(java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.hardware.usb.UsbConfiguration r1;
        int i0, $i1, $i2, $i10, $i12, $i13, $i14, $i15, $i16, $i20, $i21, $i22, $i23, $i27, $i28, $i29, $i30, $i33, $i34, $i35, i43, i44, i45;
        boolean $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, z23, z25, z26, $z27, z28, z29, z30, z31, z32, z33, z34, $z35, z36, z37;
        long $l3, $l5, $l7, $l8, $l11, $l17, $l18, $l24, $l25, $l26, $l31, $l32, $l36, $l37, $l39, $l41, $l42;
        byte $b4, $b6, $b9, $b19, $b38, $b40;
        java.lang.Object $r2, $r10, $r11, $r13, $r16, $r17, $r18, $r25, $r27, $r34;
        java.lang.Long $r3, $r35;
        java.lang.Object[] $r4, $r19;
        java.util.Locale $r5, $r20;
        java.lang.Integer $r6, $r15, $r21;
        java.lang.String $r7, $r8, $r22, $r23, $r33;
        java.util.Map$Entry $r12;
        java.util.Set $r14;
        android.content.Context $r24, $r31;
        android.app.NotificationManager $r26, $r32;
        com.android.server.usb.UsbDeviceManager$UsbHandler$AdbTransport $r28;
        android.debug.AdbManagerInternal $r29;
        android.app.NotificationChannel $r30;
        android.os.Message r36;
        android.content.SharedPreferences r37, r45;
        android.content.SharedPreferences$Editor r38;
        java.util.Iterator r39;
        android.hardware.usb.UsbDevice r40;
        android.hardware.usb.UsbInterface r41;
        com.android.internal.os.SomeArgs r42;
        android.hardware.usb.UsbPort r43;
        android.hardware.usb.UsbPortStatus r44;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r36 := @parameter0: android.os.Message;

        i43 = r36.<android.os.Message: int what>;

        z23 = 0;

        tableswitch(i43)
        {
            case 0: goto label50;
            case 1: goto label48;
            case 2: goto label47;
            case 3: goto label45;
            case 4: goto label44;
            case 5: goto label42;
            case 6: goto label41;
            case 7: goto label28;
            case 8: goto label26;
            case 9: goto label23;
            case 10: goto label14;
            case 11: goto label13;
            case 12: goto label10;
            case 13: goto label02;
            default: goto label01;
        };

     label01:
        goto label60;

     label02:
        $i1 = r36.<android.os.Message: int arg1>;

        if $i1 != 1 goto label03;

        z25 = 1;

        goto label04;

     label03:
        z25 = 0;

     label04:
        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked>;

        if z25 != $z1 goto label05;

        goto label60;

     label05:
        $i2 = r36.<android.os.Message: int arg1>;

        if $i2 != 1 goto label06;

        z26 = 1;

        goto label07;

     label06:
        z26 = 0;

     label07:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked> = z26;

        $z2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z2 != 0 goto label08;

        goto label60;

     label08:
        if z26 == 0 goto label09;

        $z3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        if $z3 != 0 goto label60;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 0);

        goto label60;

     label09:
        $l3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label60;

        $l5 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label60;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setScreenUnlockedFunctions()>();

        goto label60;

     label10:
        $r2 = r36.<android.os.Message: java.lang.Object obj>;

        $r3 = (java.lang.Long) $r2;

        $l7 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions> = $l7;

        r37 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.SharedPreferences mSettings>;

        if r37 == null goto label11;

        r38 = interfaceinvoke r37.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r5 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = newarray (java.lang.Object)[1];

        $i10 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mCurrentUser>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, "usb-screen-unlocked-config-%d", $r4);

        $l11 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        $r8 = staticinvoke <android.hardware.usb.UsbManager: java.lang.String usbFunctionsToString(long)>($l11);

        interfaceinvoke r38.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r7, $r8);

        interfaceinvoke r38.<android.content.SharedPreferences$Editor: boolean commit()>();

     label11:
        $z4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked>;

        if $z4 != 0 goto label12;

        $l8 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        $b9 = $l8 cmp 0L;

        if $b9 == 0 goto label12;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setScreenUnlockedFunctions()>();

        goto label60;

     label12:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 0);

        goto label60;

     label13:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAdbNotification(boolean)>(1);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification(boolean)>(1);

        goto label60;

     label14:
        $r10 = r36.<android.os.Message: java.lang.Object obj>;

        r39 = (java.util.Iterator) $r10;

        $i12 = r36.<android.os.Message: int arg1>;

        if $i12 != 1 goto label15;

        goto label15;

     label15:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHideUsbNotification> = 0;

     label16:
        $z27 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z27 == 0 goto label22;

        $r11 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r40 = (android.hardware.usb.UsbDevice) $r13;

        $i13 = virtualinvoke r40.<android.hardware.usb.UsbDevice: int getConfigurationCount()>();

        i44 = $i13 - 1;

     label17:
        if i44 < 0 goto label21;

        r1 = virtualinvoke r40.<android.hardware.usb.UsbDevice: android.hardware.usb.UsbConfiguration getConfiguration(int)>(i44);

        i0 = i44 - 1;

        $i14 = virtualinvoke r1.<android.hardware.usb.UsbConfiguration: int getInterfaceCount()>();

        i45 = $i14 - 1;

     label18:
        if i45 < 0 goto label20;

        r41 = virtualinvoke r1.<android.hardware.usb.UsbConfiguration: android.hardware.usb.UsbInterface getInterface(int)>(i45);

        i45 = i45 + -1;

        $r14 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.util.Set access$400()>();

        $i15 = virtualinvoke r41.<android.hardware.usb.UsbInterface: int getInterfaceClass()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $z6 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z6 == 0 goto label19;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHideUsbNotification> = 1;

        goto label20;

     label19:
        goto label18;

     label20:
        i44 = i0;

        goto label17;

     label21:
        goto label16;

     label22:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification(boolean)>(0);

        goto label60;

     label23:
        $i16 = r36.<android.os.Message: int arg1>;

        if $i16 != 1 goto label24;

        z28 = 1;

        goto label25;

     label24:
        z28 = 0;

     label25:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mUsbCharging> = z28;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification(boolean)>(0);

        goto label60;

     label26:
        $z7 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        if $z7 == 0 goto label27;

        $l17 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $l18 = $l17 & 2L;

        $b19 = $l18 cmp 0L;

        if $b19 != 0 goto label60;

     label27:
        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void notifyAccessoryModeExit()>();

        goto label60;

     label28:
        $r16 = r36.<android.os.Message: java.lang.Object obj>;

        r42 = (com.android.internal.os.SomeArgs) $r16;

        z29 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHostConnected>;

        $r17 = r42.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        r43 = (android.hardware.usb.UsbPort) $r17;

        $r18 = r42.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        r44 = (android.hardware.usb.UsbPortStatus) $r18;

        $i20 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: int getCurrentDataRole()>();

        if $i20 != 1 goto label29;

        z30 = 1;

        goto label30;

     label29:
        z30 = 0;

     label30:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHostConnected> = z30;

        $i21 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: int getCurrentPowerRole()>();

        if $i21 != 1 goto label31;

        z31 = 1;

        goto label32;

     label31:
        z31 = 0;

     label32:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSourcePower> = z31;

        $i22 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: int getCurrentPowerRole()>();

        if $i22 != 2 goto label33;

        z32 = 1;

        goto label34;

     label33:
        z32 = 0;

     label34:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSinkPower> = z32;

        $i23 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: int getCurrentMode()>();

        if $i23 != 4 goto label35;

        z33 = 1;

        goto label36;

     label35:
        z33 = 0;

     label36:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAudioAccessoryConnected> = z33;

        $z8 = virtualinvoke r43.<android.hardware.usb.UsbPort: boolean isModeSupported(int)>(4);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAudioAccessorySupported> = $z8;

        $z9 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: boolean isRoleCombinationSupported(int,int)>(1, 1);

        if $z9 == 0 goto label37;

        $z11 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: boolean isRoleCombinationSupported(int,int)>(2, 1);

        if $z11 == 0 goto label37;

        $z12 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: boolean isRoleCombinationSupported(int,int)>(1, 2);

        if $z12 == 0 goto label37;

        $z13 = virtualinvoke r44.<android.hardware.usb.UsbPortStatus: boolean isRoleCombinationSupported(int,int)>(2, 2);

        if $z13 == 0 goto label37;

        z34 = 1;

        goto label38;

     label37:
        z34 = 0;

     label38:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSupportsAllCombinations> = z34;

        virtualinvoke r42.<com.android.internal.os.SomeArgs: void recycle()>();

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification(boolean)>(0);

        $z35 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z35 == 0 goto label40;

        $z10 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHostConnected>;

        if $z10 != 0 goto label39;

        if z29 == 0 goto label60;

     label39:
        $l24 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $l25 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long getAppliedFunctions(long)>($l24);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbStateBroadcastIfNeeded(long)>($l25);

        goto label60;

     label40:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mPendingBootBroadcast> = 1;

        goto label60;

     label41:
        $l26 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $z14 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isUsbDataTransferActive(long)>($l26);

        if $z14 == 0 goto label60;

        $z15 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isUsbTransferAllowed()>();

        if $z15 != 0 goto label60;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 1);

        goto label60;

     label42:
        $i28 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mCurrentUser>;

        $i27 = r36.<android.os.Message: int arg1>;

        if $i28 == $i27 goto label60;

        $i29 = r36.<android.os.Message: int arg1>;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mCurrentUser> = $i29;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked> = 1;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions> = 0L;

        r45 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.SharedPreferences mSettings>;

        if r45 == null goto label43;

        $r20 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r19 = newarray (java.lang.Object)[1];

        $i30 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mCurrentUser>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i30);

        $r19[0] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r20, "usb-screen-unlocked-config-%d", $r19);

        $r23 = interfaceinvoke r45.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r22, "");

        $l31 = staticinvoke <android.hardware.usb.UsbManager: long usbFunctionsFromString(java.lang.String)>($r23);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions> = $l31;

     label43:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 0);

        goto label60;

     label44:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted> = 1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void finishBoot()>();

        goto label60;

     label45:
        $r24 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r25 = virtualinvoke $r24.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r26 = (android.app.NotificationManager) $r25;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager> = $r26;

        $r27 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/debug/AdbManagerInternal;");

        $r29 = (android.debug.AdbManagerInternal) $r27;

        $r28 = new com.android.server.usb.UsbDeviceManager$UsbHandler$AdbTransport;

        specialinvoke $r28.<com.android.server.usb.UsbDeviceManager$UsbHandler$AdbTransport: void <init>(com.android.server.usb.UsbDeviceManager$UsbHandler)>(r0);

        virtualinvoke $r29.<android.debug.AdbManagerInternal: void registerTransport(android.debug.IAdbTransport)>($r28);

        $z16 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isTv()>();

        if $z16 == 0 goto label46;

        $r32 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r30 = new android.app.NotificationChannel;

        $r31 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r33 = virtualinvoke $r31.<android.content.Context: java.lang.String getString(int)>(17039605);

        specialinvoke $r30.<android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>("usbdevicemanager.adb.tv", $r33, 4);

        virtualinvoke $r32.<android.app.NotificationManager: void createNotificationChannel(android.app.NotificationChannel)>($r30);

     label46:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSystemReady> = 1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void finishBoot()>();

        goto label60;

     label47:
        $r34 = r36.<android.os.Message: java.lang.Object obj>;

        $r35 = (java.lang.Long) $r34;

        $l32 = virtualinvoke $r35.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>($l32, 0);

        goto label60;

     label48:
        $i33 = r36.<android.os.Message: int arg1>;

        if $i33 != 1 goto label49;

        z23 = 1;

     label49:
        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setAdbEnabled(boolean)>(z23);

        goto label60;

     label50:
        $i34 = r36.<android.os.Message: int arg1>;

        if $i34 != 1 goto label51;

        z36 = 1;

        goto label52;

     label51:
        z36 = 0;

     label52:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected> = z36;

        $i35 = r36.<android.os.Message: int arg2>;

        if $i35 != 1 goto label53;

        z37 = 1;

        goto label54;

     label53:
        z37 = 0;

     label54:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConfigured> = z37;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbNotification(boolean)>(0);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAdbNotification(boolean)>(0);

        $z17 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z17 == 0 goto label55;

        $l41 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $l42 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long getAppliedFunctions(long)>($l41);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbStateBroadcastIfNeeded(long)>($l42);

     label55:
        $l36 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $l37 = $l36 & 2L;

        $b38 = $l37 cmp 0L;

        if $b38 == 0 goto label56;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateCurrentAccessory()>();

     label56:
        $z18 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mBootCompleted>;

        if $z18 == 0 goto label59;

        $z19 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        if $z19 != 0 goto label58;

        $z20 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean hasMessages(int)>(8);

        if $z20 != 0 goto label58;

        $z21 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean hasMessages(int)>(17);

        if $z21 != 0 goto label58;

        $z22 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mScreenLocked>;

        if $z22 != 0 goto label57;

        $l39 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mScreenUnlockedFunctions>;

        $b40 = $l39 cmp 0L;

        if $b40 == 0 goto label57;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setScreenUnlockedFunctions()>();

        goto label58;

     label57:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(long,boolean)>(0L, 0);

     label58:
        specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbFunctions()>();

        goto label60;

     label59:
        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mPendingBootBroadcast> = 1;

     label60:
        return;
    }

    protected boolean isAdbEnabled()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        java.lang.Object $r1;
        android.debug.AdbManagerInternal $r2;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/debug/AdbManagerInternal;");

        $r2 = (android.debug.AdbManagerInternal) $r1;

        $z0 = virtualinvoke $r2.<android.debug.AdbManagerInternal: boolean isAdbEnabled(byte)>(0);

        return $z0;
    }

    protected boolean isUsbDataTransferActive(long)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        long l0, $l1, $l3;
        byte $b2, $b4;
        boolean z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        l0 := @parameter0: long;

        $l1 = 4L & l0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        $l3 = 16L & l0;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    protected boolean isUsbTransferAllowed()
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.UserManager $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r3 = (android.os.UserManager) $r2;

        $z0 = virtualinvoke $r3.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_usb_file_transfer");

        $z1 = $z0 ^ 1;

        return $z1;
    }

    protected void putGlobalSettings(android.content.ContentResolver, java.lang.String, int)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.ContentResolver r1;
        java.lang.String r2;
        int i0;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    public void sendMessage(int, java.lang.Object)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        int i0;
        java.lang.Object r1;
        android.os.Message r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(i0);

        r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(r0, i0);

        r2.<android.os.Message: java.lang.Object obj> = r1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void sendMessage(int, java.lang.Object, boolean)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        int i0, i1;
        java.lang.Object r1;
        boolean z0;
        android.os.Message r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(i0);

        r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(r0, i0);

        r2.<android.os.Message: java.lang.Object obj> = r1;

        i1 = (int) z0;

        r2.<android.os.Message: int arg1> = i1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void sendMessage(int, boolean)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        int i0, i1;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(i0);

        r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(r0, i0);

        i1 = (int) z0;

        r1.<android.os.Message: int arg1> = i1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void sendMessage(int, boolean, boolean)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        int i0, i1, i2;
        boolean z0, z1;
        android.os.Message r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(i0);

        r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(r0, i0);

        i1 = (int) z0;

        r1.<android.os.Message: int arg1> = i1;

        i2 = (int) z1;

        r1.<android.os.Message: int arg2> = i2;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void sendMessageDelayed(int, boolean, long)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        int i0, i2;
        boolean z0;
        long l1;
        android.os.Message r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        l1 := @parameter2: long;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(i0);

        r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(r0, i0);

        i2 = (int) z0;

        r1.<android.os.Message: int arg1> = i2;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessageDelayed(android.os.Message,long)>(r1, l1);

        return;
    }

    protected void sendStickyBroadcast(android.content.Intent)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: android.content.Intent;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r2 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r3.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r2);

        return;
    }

    protected abstract void setEnabledFunctions(long, boolean);

    protected void setSystemProperty(java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    protected void updateAdbNotification(boolean)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.app.Notification r1;
        android.app.NotificationManager $r2, $r4, $r9, $r11;
        android.os.UserHandle $r3, $r8, $r10;
        java.lang.String $r5, $r6;
        android.content.Context $r7;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        if $r2 != null goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isAdbEnabled()>();

        if $z1 == 0 goto label4;

        $z3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        if $z3 == 0 goto label4;

        $r5 = "0";

        $r6 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("persist.adb.notify", "");

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label2;

        return;

     label2:
        if z0 == 0 goto label3;

        $z5 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAdbNotificationShown>;

        if $z5 == 0 goto label3;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAdbNotificationShown> = 0;

        $r11 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r10 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r11.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 26, $r10);

     label3:
        $z6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAdbNotificationShown>;

        if $z6 != 0 goto label5;

        $r7 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        r1 = staticinvoke <android.debug.AdbNotifications: android.app.Notification createNotification(android.content.Context,byte)>($r7, 0);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAdbNotificationShown> = 1;

        $r9 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r8 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r9.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 26, r1, $r8);

        goto label5;

     label4:
        $z2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAdbNotificationShown>;

        if $z2 == 0 goto label5;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAdbNotificationShown> = 0;

        $r4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 26, $r3);

     label5:
        return;
    }

    public void updateHostState(android.hardware.usb.UsbPort, android.hardware.usb.UsbPortStatus)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.hardware.usb.UsbPort r1;
        android.hardware.usb.UsbPortStatus r2;
        com.android.internal.os.SomeArgs r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r1 := @parameter0: android.hardware.usb.UsbPort;

        r2 := @parameter1: android.hardware.usb.UsbPortStatus;

        r3 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r1;

        r3.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r2;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(7);

        $r4 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r3);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessageDelayed(android.os.Message,long)>($r4, 1000L);

        return;
    }

    public void updateState(java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        java.lang.String r1, $r3, $r4, $r5, $r9, r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6;
        byte b1, b2;
        android.os.Message r11;
        long l3;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        r10 := @parameter0: java.lang.String;

        $r3 = "DISCONNECTED";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label1;

        b1 = 0;

        b2 = 0;

        goto label3;

     label1:
        $r4 = "CONNECTED";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label2;

        b1 = 1;

        b2 = 0;

        goto label3;

     label2:
        $r5 = "CONFIGURED";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label7;

        b1 = 1;

        b2 = 1;

     label3:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(0);

        if b1 != 1 goto label4;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void removeMessages(int)>(17);

     label4:
        r11 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(r0, 0);

        r11.<android.os.Message: int arg1> = b1;

        r11.<android.os.Message: int arg2> = b2;

        if b1 != 0 goto label5;

        l3 = 1000L;

        goto label6;

     label5:
        l3 = 0L;

     label6:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessageDelayed(android.os.Message,long)>(r11, l3);

        return;

     label7:
        r1 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown state ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r1, $r9);

        return;
    }

    protected void updateUsbNotification(boolean)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        long l1;
        java.lang.CharSequence r1, r2, r35, r36;
        android.app.NotificationManager $r3, $r16, $r29, $r32;
        java.lang.String $r4, $r5, $r20, $r30, $r33, r39, r56;
        android.content.Context $r6, $r7, $r12, $r24, $r27, $r43, $r49;
        android.content.pm.PackageManager $r8, $r13;
        android.content.Intent $r9, r37;
        android.content.pm.ResolveInfo $r14;
        android.os.UserHandle $r15, $r26, $r28, $r31;
        java.lang.StringBuilder $r17;
        android.app.Notification$BigTextStyle $r21, $r22;
        android.content.ComponentName $r25;
        byte $b4, $b5, $b6, $b7, $b8, b12;
        int i10, i14, i15, $i16, i17, $i18;
        android.content.res.Resources r34;
        android.app.PendingIntent r38, r41;
        android.app.Notification$Builder $r42, $r44, $r45, $r46, $r47, $r48, $r50, $r51, $r52, $r53, r54;
        android.app.Notification r55;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        if $r3 == null goto label24;

        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mUseUsbNotification>;

        if $z1 == 0 goto label24;

        $r4 = "0";

        $r5 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("persist.charging.notify", "");

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label01;

        goto label24;

     label01:
        $z3 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHideUsbNotification>;

        if $z3 == 0 goto label03;

        $z12 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSupportsAllCombinations>;

        if $z12 != 0 goto label03;

        i10 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId>;

        if i10 == 0 goto label02;

        $r32 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r31 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r32.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, i10, $r31);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId> = 0;

        $r33 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r33, "Clear notification");

     label02:
        return;

     label03:
        b12 = 0;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        r34 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        r35 = virtualinvoke r34.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17041395);

        $z4 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAudioAccessoryConnected>;

        if $z4 == 0 goto label04;

        $z11 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mAudioAccessorySupported>;

        if $z11 != 0 goto label04;

        i14 = 17041401;

        b12 = 41;

        r36 = r35;

        goto label14;

     label04:
        $z5 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        if $z5 == 0 goto label12;

        l1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $b4 = l1 cmp 4L;

        if $b4 != 0 goto label05;

        i15 = 17041394;

        b12 = 27;

        goto label09;

     label05:
        $b5 = l1 cmp 16L;

        if $b5 != 0 goto label06;

        i15 = 17041397;

        b12 = 28;

        goto label09;

     label06:
        $b6 = l1 cmp 8L;

        if $b6 != 0 goto label07;

        i15 = 17041388;

        b12 = 29;

        goto label09;

     label07:
        $b7 = l1 cmp 32L;

        if $b7 != 0 goto label08;

        i15 = 17041399;

        b12 = 47;

        goto label09;

     label08:
        i15 = 0;

        $b8 = l1 cmp 2L;

        if $b8 != 0 goto label09;

        i15 = 17041381;

        b12 = 30;

     label09:
        $z13 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSourcePower>;

        if $z13 == 0 goto label11;

        if i15 == 0 goto label10;

        r36 = virtualinvoke r34.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17041396);

        i14 = i15;

        goto label14;

     label10:
        i14 = 17041398;

        b12 = 31;

        r36 = r35;

        goto label14;

     label11:
        i14 = i15;

        r36 = r35;

        if i15 != 0 goto label14;

        i14 = 17041382;

        b12 = 32;

        r36 = r35;

        goto label14;

     label12:
        $z6 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSourcePower>;

        if $z6 == 0 goto label13;

        i14 = 17041398;

        b12 = 31;

        r36 = r35;

        goto label14;

     label13:
        b12 = 0;

        i14 = 0;

        r36 = r35;

        $z7 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHostConnected>;

        if $z7 == 0 goto label14;

        b12 = 0;

        i14 = 0;

        r36 = r35;

        $z9 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mSinkPower>;

        if $z9 == 0 goto label14;

        b12 = 0;

        i14 = 0;

        r36 = r35;

        $z10 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mUsbCharging>;

        if $z10 == 0 goto label14;

        i14 = 17041382;

        b12 = 32;

        r36 = r35;

     label14:
        $i16 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId>;

        if b12 != $i16 goto label15;

        if z0 == 0 goto label23;

     label15:
        i17 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId>;

        if i17 == 0 goto label16;

        $r29 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r28 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r29.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, i17, $r28);

        $r30 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r30, "Clear notification");

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId> = 0;

     label16:
        $r7 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z8 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        if $z8 == 0 goto label17;

        if b12 != 32 goto label17;

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId> = 0;

        return;

     label17:
        if b12 == 0 goto label23;

        r1 = virtualinvoke r34.<android.content.res.Resources: java.lang.CharSequence getText(int)>(i14);

        if i14 == 17041401 goto label18;

        $r25 = new android.content.ComponentName;

        specialinvoke $r25.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.Settings$UsbDetailsActivity");

        r37 = staticinvoke <android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>($r25);

        $r27 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r26 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r38 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r27, 0, r37, 0, null, $r26);

        r39 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String USB>;

        goto label21;

     label18:
        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>()>();

        virtualinvoke $r9.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.HelpTrampoline");

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.TEXT", "help_url_audio_accessory_not_supported");

        $r12 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r14 = virtualinvoke $r13.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>($r9, 0);

        if $r14 == null goto label19;

        $r24 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        r41 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r24, 0, $r9, 0);

        goto label20;

     label19:
        r41 = null;

     label20:
        r39 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String ALERTS>;

        r2 = virtualinvoke r34.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17041400);

        r38 = r41;

        r36 = r2;

     label21:
        $r42 = new android.app.Notification$Builder;

        $r43 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        specialinvoke $r42.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r43, r39);

        $r44 = virtualinvoke $r42.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17303547);

        $r45 = virtualinvoke $r44.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r46 = virtualinvoke $r45.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r47 = virtualinvoke $r46.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r1);

        $r48 = virtualinvoke $r47.<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>(0);

        $r49 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Context mContext>;

        $i18 = virtualinvoke $r49.<android.content.Context: int getColor(int)>(17170460);

        $r50 = virtualinvoke $r48.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i18);

        $r51 = virtualinvoke $r50.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r1);

        $r52 = virtualinvoke $r51.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r36);

        $r53 = virtualinvoke $r52.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r38);

        r54 = virtualinvoke $r53.<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>(1);

        if i14 != 17041401 goto label22;

        $r21 = new android.app.Notification$BigTextStyle;

        specialinvoke $r21.<android.app.Notification$BigTextStyle: void <init>()>();

        $r22 = virtualinvoke $r21.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>(r36);

        virtualinvoke r54.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r22);

     label22:
        r55 = virtualinvoke r54.<android.app.Notification$Builder: android.app.Notification build()>();

        $r16 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.app.NotificationManager mNotificationManager>;

        $r15 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r16.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, b12, r55, $r15);

        r56 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String access$300()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("push notification:");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r56, $r20);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: int mUsbNotificationId> = b12;

     label23:
        return;

     label24:
        return;
    }

    protected void updateUsbStateBroadcastIfNeeded(long)
    {
        com.android.server.usb.UsbDeviceManager$UsbHandler r0;
        android.content.Intent $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        long $l0, $l1, $l2, l3;
        java.lang.String $r8;
        byte $b4;

        r0 := @this: com.android.server.usb.UsbDeviceManager$UsbHandler;

        l3 := @parameter0: long;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.usb.action.USB_STATE");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(822083584);

        $z0 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConnected>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("connected", $z0);

        $z1 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mHostConnected>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("host_connected", $z1);

        $z2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean mConfigured>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("configured", $z2);

        $z3 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isUsbTransferAllowed()>();

        if $z3 == 0 goto label1;

        $l2 = r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: long mCurrentFunctions>;

        $z5 = virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isUsbDataTransferActive(long)>($l2);

        if $z5 == 0 goto label1;

        z6 = 1;

        goto label2;

     label1:
        z6 = 0;

     label2:
        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("unlocked", z6);

     label3:
        $b4 = l3 cmp 0L;

        if $b4 == 0 goto label4;

        $l0 = staticinvoke <java.lang.Long: long highestOneBit(long)>(l3);

        $r8 = staticinvoke <android.hardware.usb.UsbManager: java.lang.String usbFunctionsToString(long)>($l0);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>($r8, 1);

        $l1 = staticinvoke <java.lang.Long: long highestOneBit(long)>(l3);

        l3 = l3 - $l1;

        goto label3;

     label4:
        $z4 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean isUsbStateChanged(android.content.Intent)>($r2);

        if $z4 != 0 goto label5;

        return;

     label5:
        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendStickyBroadcast(android.content.Intent)>($r2);

        r0.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.content.Intent mBroadcastedIntent> = $r2;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.usb.UsbDeviceManager$UsbHandler: java.lang.String USB_PERSISTENT_CONFIG_PROPERTY> = "persist.sys.usb.config";

        return;
    }
}
