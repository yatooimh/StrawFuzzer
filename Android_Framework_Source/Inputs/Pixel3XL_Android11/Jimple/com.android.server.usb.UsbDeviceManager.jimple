public class com.android.server.usb.UsbDeviceManager extends java.lang.Object implements com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver
{
    private static final int ACCESSORY_REQUEST_TIMEOUT;
    private static final java.lang.String ACCESSORY_START_MATCH;
    private static final java.lang.String ADB_NOTIFICATION_CHANNEL_ID_TV;
    private static final int AUDIO_MODE_SOURCE;
    private static final java.lang.String AUDIO_SOURCE_PCM_PATH;
    private static final java.lang.String BOOT_MODE_PROPERTY;
    private static final boolean DEBUG;
    private static final java.lang.String FUNCTIONS_PATH;
    private static final java.lang.String MIDI_ALSA_PATH;
    private static final int MSG_ACCESSORY_MODE_ENTER_TIMEOUT;
    private static final int MSG_BOOT_COMPLETED;
    private static final int MSG_ENABLE_ADB;
    private static final int MSG_FUNCTION_SWITCH_TIMEOUT;
    private static final int MSG_GADGET_HAL_REGISTERED;
    private static final int MSG_GET_CURRENT_USB_FUNCTIONS;
    private static final int MSG_LOCALE_CHANGED;
    private static final int MSG_RESET_USB_GADGET;
    private static final int MSG_SET_CHARGING_FUNCTIONS;
    private static final int MSG_SET_CURRENT_FUNCTIONS;
    private static final int MSG_SET_FUNCTIONS_TIMEOUT;
    private static final int MSG_SET_SCREEN_UNLOCKED_FUNCTIONS;
    private static final int MSG_SYSTEM_READY;
    private static final int MSG_UPDATE_CHARGING_STATE;
    private static final int MSG_UPDATE_HOST_STATE;
    private static final int MSG_UPDATE_PORT_STATE;
    private static final int MSG_UPDATE_SCREEN_LOCK;
    private static final int MSG_UPDATE_STATE;
    private static final int MSG_UPDATE_USER_RESTRICTIONS;
    private static final int MSG_USER_SWITCHED;
    private static final java.lang.String NORMAL_BOOT;
    private static final java.lang.String RNDIS_ETH_ADDR_PATH;
    private static final java.lang.String STATE_PATH;
    private static final java.lang.String TAG;
    static final java.lang.String UNLOCKED_CONFIG_PREF;
    private static final int UPDATE_DELAY;
    private static final java.lang.String USB_PREFS_XML;
    private static final java.lang.String USB_STATE_MATCH;
    private static java.util.Set sBlackListedInterfaces;
    private java.lang.String[] mAccessoryStrings;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private java.util.HashMap mControlFds;
    private com.android.server.usb.UsbProfileGroupSettingsManager mCurrentSettings;
    private com.android.server.usb.UsbDeviceManager$UsbHandler mHandler;
    private final boolean mHasUsbAccessory;
    private final java.lang.Object mLock;
    private final android.os.UEventObserver mUEventObserver;

    static void <clinit>()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.HashSet $r3;
        java.lang.Integer $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        java.util.Set $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;

        <com.android.server.usb.UsbDeviceManager: java.lang.String USB_STATE_MATCH> = "DEVPATH=/devices/virtual/android_usb/android0";

        <com.android.server.usb.UsbDeviceManager: java.lang.String USB_PREFS_XML> = "UsbDeviceManagerPrefs.xml";

        <com.android.server.usb.UsbDeviceManager: int UPDATE_DELAY> = 1000;

        <com.android.server.usb.UsbDeviceManager: java.lang.String UNLOCKED_CONFIG_PREF> = "usb-screen-unlocked-config-%d";

        <com.android.server.usb.UsbDeviceManager: java.lang.String STATE_PATH> = "/sys/class/android_usb/android0/state";

        <com.android.server.usb.UsbDeviceManager: java.lang.String RNDIS_ETH_ADDR_PATH> = "/sys/class/android_usb/android0/f_rndis/ethaddr";

        <com.android.server.usb.UsbDeviceManager: java.lang.String NORMAL_BOOT> = "normal";

        <com.android.server.usb.UsbDeviceManager: int MSG_USER_SWITCHED> = 5;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_USER_RESTRICTIONS> = 6;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_STATE> = 0;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_SCREEN_LOCK> = 13;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_PORT_STATE> = 7;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_HOST_STATE> = 10;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_CHARGING_STATE> = 9;

        <com.android.server.usb.UsbDeviceManager: int MSG_SYSTEM_READY> = 3;

        <com.android.server.usb.UsbDeviceManager: int MSG_SET_SCREEN_UNLOCKED_FUNCTIONS> = 12;

        <com.android.server.usb.UsbDeviceManager: int MSG_SET_FUNCTIONS_TIMEOUT> = 15;

        <com.android.server.usb.UsbDeviceManager: int MSG_SET_CURRENT_FUNCTIONS> = 2;

        <com.android.server.usb.UsbDeviceManager: int MSG_SET_CHARGING_FUNCTIONS> = 14;

        <com.android.server.usb.UsbDeviceManager: int MSG_RESET_USB_GADGET> = 19;

        <com.android.server.usb.UsbDeviceManager: int MSG_LOCALE_CHANGED> = 11;

        <com.android.server.usb.UsbDeviceManager: int MSG_GET_CURRENT_USB_FUNCTIONS> = 16;

        <com.android.server.usb.UsbDeviceManager: int MSG_GADGET_HAL_REGISTERED> = 18;

        <com.android.server.usb.UsbDeviceManager: int MSG_FUNCTION_SWITCH_TIMEOUT> = 17;

        <com.android.server.usb.UsbDeviceManager: int MSG_ENABLE_ADB> = 1;

        <com.android.server.usb.UsbDeviceManager: int MSG_BOOT_COMPLETED> = 4;

        <com.android.server.usb.UsbDeviceManager: int MSG_ACCESSORY_MODE_ENTER_TIMEOUT> = 8;

        <com.android.server.usb.UsbDeviceManager: java.lang.String MIDI_ALSA_PATH> = "/sys/class/android_usb/android0/f_midi/alsa";

        <com.android.server.usb.UsbDeviceManager: java.lang.String FUNCTIONS_PATH> = "/sys/class/android_usb/android0/functions";

        <com.android.server.usb.UsbDeviceManager: boolean DEBUG> = 0;

        <com.android.server.usb.UsbDeviceManager: java.lang.String BOOT_MODE_PROPERTY> = "ro.bootmode";

        <com.android.server.usb.UsbDeviceManager: java.lang.String AUDIO_SOURCE_PCM_PATH> = "/sys/class/android_usb/android0/f_audio_source/pcm";

        <com.android.server.usb.UsbDeviceManager: int AUDIO_MODE_SOURCE> = 1;

        <com.android.server.usb.UsbDeviceManager: java.lang.String ADB_NOTIFICATION_CHANNEL_ID_TV> = "usbdevicemanager.adb.tv";

        <com.android.server.usb.UsbDeviceManager: java.lang.String ACCESSORY_START_MATCH> = "DEVPATH=/devices/virtual/misc/usb_accessory";

        <com.android.server.usb.UsbDeviceManager: int ACCESSORY_REQUEST_TIMEOUT> = 10000;

        $r1 = class "Lcom/android/server/usb/UsbDeviceManager;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.usb.UsbDeviceManager: java.lang.String TAG> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces> = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $r5 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

        $r7 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r8);

        $r9 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10);

        $r11 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r13 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>($r14);

        $r15 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r16);

        $r17 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>($r18);

        $r19 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r20);

        $r21 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r22);

        $r23 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(224);

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>($r24);

        return;
    }

    public void <init>(android.content.Context, com.android.server.usb.UsbAlsaManager, com.android.server.usb.UsbSettingsManager, com.android.server.usb.UsbPermissionManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.Object $r1;
        android.content.ContentResolver $r2;
        android.content.Context $r3, $r16, $r22, $r25, $r28, $r31, $r38, r45;
        android.content.pm.PackageManager $r4;
        boolean $z0, $z1, z2;
        java.util.HashMap $r6, $r7, $r10;
        java.lang.Long $r8, $r11;
        com.android.server.usb.UsbDeviceManager$UsbHandlerHal $r13;
        com.android.server.FgThread $r14, $r36;
        android.os.Looper $r15, $r37;
        com.android.server.usb.UsbDeviceManager$1 $r17;
        com.android.server.usb.UsbDeviceManager$2 $r18;
        com.android.server.usb.UsbDeviceManager$3 $r19;
        com.android.server.usb.UsbDeviceManager$4 $r20;
        android.content.IntentFilter $r21, $r24, $r27, $r30;
        com.android.server.usb.UsbDeviceManager$UsbUEventObserver $r33;
        android.os.UEventObserver $r34;
        com.android.server.usb.UsbDeviceManager$UsbHandlerLegacy $r35;
        java.lang.String $r39, $r40, $r42, $r44;
        android.os.RemoteException $r41;
        java.lang.Throwable $r43;
        com.android.server.usb.UsbAlsaManager r46;
        com.android.server.usb.UsbSettingsManager r47;
        com.android.server.usb.UsbPermissionManager r48;
        java.io.FileDescriptor r51, r52;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r45 := @parameter0: android.content.Context;

        r46 := @parameter1: com.android.server.usb.UsbAlsaManager;

        r47 := @parameter2: com.android.server.usb.UsbSettingsManager;

        r48 := @parameter3: com.android.server.usb.UsbPermissionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock> = $r1;

        r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext> = r45;

        $r2 = virtualinvoke r45.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.usb.UsbDeviceManager: android.content.ContentResolver mContentResolver> = $r2;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.accessory");

        r0.<com.android.server.usb.UsbDeviceManager: boolean mHasUsbAccessory> = $z0;

        staticinvoke <com.android.server.usb.UsbDeviceManager: void initRndisAddress()>();

     label01:
        staticinvoke <android.hardware.usb.gadget.V1_0.IUsbGadget: android.hardware.usb.gadget.V1_0.IUsbGadget getService(boolean)>(1);

     label02:
        goto label05;

     label03:
        $r43 := @caughtexception;

        $r44 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>($r44, "USB GADGET HAL not present in the device", $r43);

        z2 = 1;

        goto label06;

     label04:
        $r41 := @caughtexception;

        $r42 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r42, "USB GADGET HAL present but exception thrown", $r41);

        goto label02;

     label05:
        z2 = 0;

     label06:
        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbDeviceManager: java.util.HashMap mControlFds> = $r6;

        r51 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: java.io.FileDescriptor nativeOpenControl(java.lang.String)>("mtp");

        if r51 != null goto label07;

        $r40 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r40, "Failed to open control for mtp");

     label07:
        $r7 = r0.<com.android.server.usb.UsbDeviceManager: java.util.HashMap mControlFds>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r51);

        r52 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: java.io.FileDescriptor nativeOpenControl(java.lang.String)>("ptp");

        if r52 != null goto label08;

        $r39 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r39, "Failed to open control for ptp");

     label08:
        $r10 = r0.<com.android.server.usb.UsbDeviceManager: java.util.HashMap mControlFds>;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(16L);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r52);

        if z2 == 0 goto label09;

        $r35 = new com.android.server.usb.UsbDeviceManager$UsbHandlerLegacy;

        $r36 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r37 = virtualinvoke $r36.<com.android.server.FgThread: android.os.Looper getLooper()>();

        $r38 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        specialinvoke $r35.<com.android.server.usb.UsbDeviceManager$UsbHandlerLegacy: void <init>(android.os.Looper,android.content.Context,com.android.server.usb.UsbDeviceManager,com.android.server.usb.UsbAlsaManager,com.android.server.usb.UsbPermissionManager)>($r37, $r38, r0, r46, r48);

        r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler> = $r35;

        goto label10;

     label09:
        $r13 = new com.android.server.usb.UsbDeviceManager$UsbHandlerHal;

        $r14 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r15 = virtualinvoke $r14.<com.android.server.FgThread: android.os.Looper getLooper()>();

        $r16 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        specialinvoke $r13.<com.android.server.usb.UsbDeviceManager$UsbHandlerHal: void <init>(android.os.Looper,android.content.Context,com.android.server.usb.UsbDeviceManager,com.android.server.usb.UsbAlsaManager,com.android.server.usb.UsbPermissionManager)>($r15, $r16, r0, r46, r48);

        r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler> = $r13;

     label10:
        $z1 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: boolean nativeIsStartRequested()>();

        if $z1 == 0 goto label11;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager: void startAccessoryMode()>();

     label11:
        $r17 = new com.android.server.usb.UsbDeviceManager$1;

        specialinvoke $r17.<com.android.server.usb.UsbDeviceManager$1: void <init>(com.android.server.usb.UsbDeviceManager)>(r0);

        $r18 = new com.android.server.usb.UsbDeviceManager$2;

        specialinvoke $r18.<com.android.server.usb.UsbDeviceManager$2: void <init>(com.android.server.usb.UsbDeviceManager)>(r0);

        $r19 = new com.android.server.usb.UsbDeviceManager$3;

        specialinvoke $r19.<com.android.server.usb.UsbDeviceManager$3: void <init>(com.android.server.usb.UsbDeviceManager)>(r0);

        $r20 = new com.android.server.usb.UsbDeviceManager$4;

        specialinvoke $r20.<com.android.server.usb.UsbDeviceManager$4: void <init>(com.android.server.usb.UsbDeviceManager)>(r0);

        $r22 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r21 = new android.content.IntentFilter;

        specialinvoke $r21.<android.content.IntentFilter: void <init>(java.lang.String)>("android.hardware.usb.action.USB_PORT_CHANGED");

        virtualinvoke $r22.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r17, $r21);

        $r25 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r24 = new android.content.IntentFilter;

        specialinvoke $r24.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        virtualinvoke $r25.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r18, $r24);

        $r27 = new android.content.IntentFilter;

        specialinvoke $r27.<android.content.IntentFilter: void <init>(java.lang.String)>("android.hardware.usb.action.USB_DEVICE_ATTACHED");

        virtualinvoke $r27.<android.content.IntentFilter: void addAction(java.lang.String)>("android.hardware.usb.action.USB_DEVICE_DETACHED");

        $r28 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        virtualinvoke $r28.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r19, $r27);

        $r31 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r30 = new android.content.IntentFilter;

        specialinvoke $r30.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.LOCALE_CHANGED");

        virtualinvoke $r31.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r20, $r30);

        $r33 = new com.android.server.usb.UsbDeviceManager$UsbUEventObserver;

        specialinvoke $r33.<com.android.server.usb.UsbDeviceManager$UsbUEventObserver: void <init>(com.android.server.usb.UsbDeviceManager,com.android.server.usb.UsbDeviceManager$1)>(r0, null);

        r0.<com.android.server.usb.UsbDeviceManager: android.os.UEventObserver mUEventObserver> = $r33;

        virtualinvoke $r33.<android.os.UEventObserver: void startObserving(java.lang.String)>("DEVPATH=/devices/virtual/android_usb/android0");

        $r34 = r0.<com.android.server.usb.UsbDeviceManager: android.os.UEventObserver mUEventObserver>;

        virtualinvoke $r34.<android.os.UEventObserver: void startObserving(java.lang.String)>("DEVPATH=/devices/virtual/misc/usb_accessory");

        return;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.util.NoSuchElementException from label01 to label02 with label03;
    }

    static com.android.server.usb.UsbDeviceManager$UsbHandler access$000(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        return $r1;
    }

    static void access$100(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager: void startAccessoryMode()>();

        return;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        return $r0;
    }

    static java.util.Set access$400()
    {
        java.util.Set $r0;

        $r0 = <com.android.server.usb.UsbDeviceManager: java.util.Set sBlackListedInterfaces>;

        return $r0;
    }

    private static void initRndisAddress()
    {
        java.lang.String r0, $r10, r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i13;
        java.lang.Object[] $r1;
        java.util.Locale $r2;
        java.lang.Integer $r3, $r4, $r5, $r6, $r7, $r8;
        char $c10;
        java.lang.Throwable $r9;
        int[] r11;

        r11 = newarray (int)[6];

        r11[0] = 2;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.serialno", "1234567890ABCDEF");

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i13 = 0;

     label1:
        if i13 >= i0 goto label2;

        $i8 = i13 % 5;

        i1 = $i8 + 1;

        $i9 = r11[i1];

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        $i11 = $i9 ^ $c10;

        r11[i1] = $i11;

        i13 = i13 + 1;

        goto label1;

     label2:
        $r2 = <java.util.Locale: java.util.Locale US>;

        $r1 = newarray (java.lang.Object)[6];

        $i2 = r11[0];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[0] = $r3;

        $i3 = r11[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[1] = $r4;

        $i4 = r11[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r1[2] = $r5;

        $i5 = r11[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r1[3] = $r6;

        $i6 = r11[4];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r1[4] = $r7;

        $i7 = r11[5];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r1[5] = $r8;

        r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "%02X:%02X:%02X:%02X:%02X:%02X", $r1);

     label3:
        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/class/android_usb/android0/f_rndis/ethaddr", r12);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r10, "failed to write to /sys/class/android_usb/android0/f_rndis/ethaddr");

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private native java.lang.String[] nativeGetAccessoryStrings();

    private native int nativeGetAudioMode();

    private native boolean nativeIsStartRequested();

    private native android.os.ParcelFileDescriptor nativeOpenAccessory();

    private native java.io.FileDescriptor nativeOpenControl(java.lang.String);

    private void onAdbEnabled(boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)>(1, z0);

        return;
    }

    private void startAccessoryMode()
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean $z1, z3, z4;
        java.lang.String[] $r1, r5;
        byte $b0;
        android.os.Message $r2;
        java.lang.String $r3, $r4;
        int i1;
        long l2, l3;
        com.android.server.usb.UsbDeviceManager$UsbHandler r6;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $z1 = r0.<com.android.server.usb.UsbDeviceManager: boolean mHasUsbAccessory>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] nativeGetAccessoryStrings()>();

        r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings> = $r1;

        i1 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: int nativeGetAudioMode()>();

        if i1 != 1 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        r5 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings>;

        z4 = 0;

        if r5 == null goto label4;

        z4 = 0;

        $r3 = r5[0];

        if $r3 == null goto label4;

        z4 = 0;

        $r4 = r5[1];

        if $r4 == null goto label4;

        z4 = 1;

     label4:
        l2 = 0L;

        if z4 == 0 goto label5;

        l2 = 0L | 2L;

     label5:
        l3 = l2;

        if z3 == 0 goto label6;

        l3 = l2 | 64L;

     label6:
        $b0 = l3 cmp 0L;

        if $b0 == 0 goto label7;

        r6 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $r2 = virtualinvoke r6.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.os.Message obtainMessage(int)>(8);

        virtualinvoke r6.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendMessageDelayed(android.os.Message,long)>($r2, 10000L);

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(long)>(l3);

     label7:
        return;
    }

    public void bootCompleted()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendEmptyMessage(int)>(4);

        return;
    }

    public void dump(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.internal.util.dump.DualDumpOutputStream r1;
        java.lang.String r2;
        long l0, l1;
        com.android.server.usb.UsbDeviceManager$UsbHandler r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 = virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r2, l0);

        r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r1, "handler", 1146756268033L);

     label1:
        virtualinvoke r1.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l1);

        return;
    }

    java.lang.String[] getAccessoryStrings()
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String[] r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.os.ParcelFileDescriptor getControlFd(long)
    {
        com.android.server.usb.UsbDeviceManager r0;
        long l0;
        java.lang.String r1, $r9;
        java.util.HashMap $r2;
        java.lang.Long $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        java.io.FileDescriptor r10;
        android.os.ParcelFileDescriptor r11;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: java.util.HashMap mControlFds>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r10 = (java.io.FileDescriptor) $r4;

        if r10 != null goto label1;

        return null;

     label1:
        r11 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>(r10);

     label2:
        return r11;

     label3:
        $r5 := @caughtexception;

        r1 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not dup fd for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r1, $r9);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.hardware.usb.UsbAccessory getCurrentAccessory()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;
        android.hardware.usb.UsbAccessory $r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        return $r2;
    }

    public long getCurrentFunctions()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;
        long $l0;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $l0 = virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: long getEnabledFunctions()>();

        return $l0;
    }

    com.android.server.usb.UsbProfileGroupSettingsManager getCurrentSettings()
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.usb.UsbProfileGroupSettingsManager r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbProfileGroupSettingsManager mCurrentSettings>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long getScreenUnlockedFunctions()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;
        long $l0;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $l0 = virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: long getScreenUnlockedFunctions()>();

        return $l0;
    }

    public void onAwakeStateChanged(boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        z0 := @parameter0: boolean;

        return;
    }

    public void onKeyguardStateChanged(boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        int i0;
        boolean z0, z1, z2;
        com.android.server.usb.UsbDeviceManager$UsbHandler r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.KeyguardManager $r4;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        z1 := @parameter0: boolean;

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/KeyguardManager;");

        $r4 = (android.app.KeyguardManager) $r3;

        z0 = virtualinvoke $r4.<android.app.KeyguardManager: boolean isDeviceSecure(int)>(i0);

        r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        if z1 == 0 goto label1;

        if z0 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        virtualinvoke r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)>(13, z2);

        return;
    }

    public void onUnlockUser(int)
    {
        com.android.server.usb.UsbDeviceManager r0;
        int i0;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager: void onKeyguardStateChanged(boolean)>(0);

        return;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory, com.android.server.usb.UsbUserPermissionManager, int)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.hardware.usb.UsbAccessory r1, r2;
        int i0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r3;
        java.lang.IllegalArgumentException $r4, $r10;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r11;
        android.os.ParcelFileDescriptor $r12;
        com.android.server.usb.UsbUserPermissionManager r13;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        r13 := @parameter1: com.android.server.usb.UsbUserPermissionManager;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        r2 = virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<android.hardware.usb.UsbAccessory: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r13.<com.android.server.usb.UsbUserPermissionManager: void checkPermission(android.hardware.usb.UsbAccessory,int)>(r1, i0);

        $r12 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor nativeOpenAccessory()>();

        return $r12;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<android.hardware.usb.UsbAccessory: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match current accessory ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("no accessory attached");

        throw $r4;
    }

    public void resetUsbGadget()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)>(19, null);

        return;
    }

    public void setCurrentFunctions(long)
    {
        com.android.server.usb.UsbDeviceManager r0;
        long l0;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        android.content.Context $r1, $r2, $r3, $r4, $r5, $r6;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r7;
        java.lang.Long $r8;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int)>($r6, 1275);

        goto label6;

     label1:
        $b2 = l0 cmp 4L;

        if $b2 != 0 goto label2;

        $r5 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int)>($r5, 1276);

        goto label6;

     label2:
        $b3 = l0 cmp 16L;

        if $b3 != 0 goto label3;

        $r4 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int)>($r4, 1277);

        goto label6;

     label3:
        $b4 = l0 cmp 8L;

        if $b4 != 0 goto label4;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int)>($r3, 1279);

        goto label6;

     label4:
        $b5 = l0 cmp 32L;

        if $b5 != 0 goto label5;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int)>($r2, 1278);

        goto label6;

     label5:
        $b6 = l0 cmp 2L;

        if $b6 != 0 goto label6;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.content.Context,int)>($r1, 1280);

     label6:
        $r7 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r7.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)>(2, $r8);

        return;
    }

    public void setCurrentUser(int, com.android.server.usb.UsbProfileGroupSettingsManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        int i0;
        java.lang.Object r1;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r2;
        android.os.Message $r3;
        java.lang.Throwable $r4;
        com.android.server.usb.UsbProfileGroupSettingsManager r5;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        i0 := @parameter0: int;

        r5 := @parameter1: com.android.server.usb.UsbProfileGroupSettingsManager;

        r1 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbProfileGroupSettingsManager mCurrentSettings> = r5;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.os.Message obtainMessage(int,int,int)>(5, i0, 0);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setScreenUnlockedFunctions(long)
    {
        com.android.server.usb.UsbDeviceManager r0;
        long l0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;
        java.lang.Long $r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object)>(12, $r2);

        return;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.Object $r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r2 = (com.android.server.wm.ActivityTaskManagerInternal) $r1;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void registerScreenObserver(com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver)>(r0);

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendEmptyMessage(int)>(3);

        return;
    }

    public void updateUserRestrictions()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendEmptyMessage(int)>(6);

        return;
    }
}
