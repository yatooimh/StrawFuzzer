public class com.android.server.usb.UsbHostManager extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int LINUX_FOUNDATION_VID;
    private static final int MAX_CONNECT_RECORDS;
    private static final java.lang.String TAG;
    static final java.text.SimpleDateFormat sFormat;
    private final android.util.ArrayMap mConnected;
    private final java.util.LinkedList mConnections;
    private final android.content.Context mContext;
    private com.android.server.usb.UsbProfileGroupSettingsManager mCurrentSettings;
    private final java.util.HashMap mDevices;
    private java.lang.Object mHandlerLock;
    private final java.lang.String[] mHostBlacklist;
    private com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect;
    private final java.lang.Object mLock;
    private int mNumConnects;
    private final com.android.server.usb.UsbPermissionManager mPermissionManager;
    private java.lang.Object mSettingsLock;
    private final com.android.server.usb.UsbAlsaManager mUsbAlsaManager;
    private android.content.ComponentName mUsbDeviceConnectionHandler;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.text.SimpleDateFormat $r2;

        <com.android.server.usb.UsbHostManager: int MAX_CONNECT_RECORDS> = 32;

        <com.android.server.usb.UsbHostManager: int LINUX_FOUNDATION_VID> = 7531;

        <com.android.server.usb.UsbHostManager: boolean DEBUG> = 0;

        $r0 = class "Lcom/android/server/usb/UsbHostManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.usb.UsbHostManager: java.lang.String TAG> = $r1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM-dd HH:mm:ss:SSS");

        <com.android.server.usb.UsbHostManager: java.text.SimpleDateFormat sFormat> = $r2;

        return;
    }

    public void <init>(android.content.Context, com.android.server.usb.UsbAlsaManager, com.android.server.usb.UsbPermissionManager)
    {
        com.android.server.usb.UsbHostManager r0;
        com.android.server.usb.UsbAlsaManager r1;
        com.android.server.usb.UsbPermissionManager r2;
        java.lang.Object $r3, $r5, $r6;
        java.util.HashMap $r4;
        java.util.LinkedList $r7;
        android.util.ArrayMap $r8;
        android.content.res.Resources $r9, $r11;
        java.lang.String[] $r10;
        boolean $z0;
        android.content.ComponentName $r12;
        android.content.Context r13;
        java.lang.String r14;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r13 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.usb.UsbAlsaManager;

        r2 := @parameter2: com.android.server.usb.UsbPermissionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.lang.Object mSettingsLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.lang.Object mHandlerLock> = $r6;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.LinkedList mConnections> = $r7;

        $r8 = new android.util.ArrayMap;

        specialinvoke $r8.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: android.util.ArrayMap mConnected> = $r8;

        r0.<com.android.server.usb.UsbHostManager: android.content.Context mContext> = r13;

        $r9 = virtualinvoke r13.<android.content.Context: android.content.res.Resources getResources()>();

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236091);

        r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist> = $r10;

        r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbAlsaManager mUsbAlsaManager> = r1;

        r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbPermissionManager mPermissionManager> = r2;

        $r11 = virtualinvoke r13.<android.content.Context: android.content.res.Resources getResources()>();

        r14 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getString(int)>(17039820);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r14);

        if $z0 != 0 goto label1;

        $r12 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r14);

        virtualinvoke r0.<com.android.server.usb.UsbHostManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>($r12);

     label1:
        return;
    }

    private void addConnectionRecord(java.lang.String, int, byte[])
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        java.util.LinkedList $r2, $r4, $r9;
        com.android.server.usb.UsbHostManager$ConnectionRecord $r3;
        android.util.ArrayMap $r5, $r7;
        byte[] r11;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r11 := @parameter2: byte[];

        $i1 = r0.<com.android.server.usb.UsbHostManager: int mNumConnects>;

        $i2 = $i1 + 1;

        r0.<com.android.server.usb.UsbHostManager: int mNumConnects> = $i2;

     label1:
        $r2 = r0.<com.android.server.usb.UsbHostManager: java.util.LinkedList mConnections>;

        $i3 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i3 < 32 goto label2;

        $r9 = r0.<com.android.server.usb.UsbHostManager: java.util.LinkedList mConnections>;

        virtualinvoke $r9.<java.util.LinkedList: java.lang.Object removeFirst()>();

        goto label1;

     label2:
        $r3 = new com.android.server.usb.UsbHostManager$ConnectionRecord;

        specialinvoke $r3.<com.android.server.usb.UsbHostManager$ConnectionRecord: void <init>(com.android.server.usb.UsbHostManager,java.lang.String,int,byte[])>(r0, r1, i0, r11);

        $r4 = r0.<com.android.server.usb.UsbHostManager: java.util.LinkedList mConnections>;

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r3);

        if i0 == -1 goto label3;

        r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect> = $r3;

     label3:
        if i0 != 0 goto label4;

        $r7 = r0.<com.android.server.usb.UsbHostManager: android.util.ArrayMap mConnected>;

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        goto label5;

     label4:
        if i0 != -1 goto label5;

        $r5 = r0.<com.android.server.usb.UsbHostManager: android.util.ArrayMap mConnected>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

     label5:
        return;
    }

    private boolean checkUsbInterfacesBlackListed(com.android.server.usb.descriptors.UsbDescriptorParser)
    {
        com.android.server.usb.UsbHostManager r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        boolean $z0, z1, z2, $z3;
        int $i0, $i1;
        com.android.server.usb.descriptors.UsbDescriptorParser r3;
        java.util.Iterator r4;
        com.android.server.usb.descriptors.UsbDescriptor r5;
        com.android.server.usb.descriptors.UsbInterfaceDescriptor r6;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r3 := @parameter0: com.android.server.usb.descriptors.UsbDescriptorParser;

        z1 = 0;

        $r1 = virtualinvoke r3.<com.android.server.usb.descriptors.UsbDescriptorParser: java.util.ArrayList getDescriptors()>();

        r4 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        z2 = z1;

        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.usb.descriptors.UsbDescriptor) $r2;

        $z0 = r5 instanceof com.android.server.usb.descriptors.UsbInterfaceDescriptor;

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        r6 = (com.android.server.usb.descriptors.UsbInterfaceDescriptor) r5;

        $i0 = virtualinvoke r6.<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int getUsbClass()>();

        $i1 = virtualinvoke r6.<com.android.server.usb.descriptors.UsbInterfaceDescriptor: int getUsbSubclass()>();

        z1 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(int,int)>($i0, $i1);

        if z1 != 0 goto label3;

        z2 = z1;

        goto label4;

     label3:
        goto label1;

     label4:
        if z2 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private com.android.server.usb.UsbProfileGroupSettingsManager getCurrentUserSettings()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.usb.UsbProfileGroupSettingsManager r3;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbProfileGroupSettingsManager mCurrentSettings>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.content.ComponentName getUsbDeviceConnectionHandler()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.content.ComponentName r3;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mHandlerLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.usb.UsbHostManager: android.content.ComponentName mUsbDeviceConnectionHandler>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isBlackListed(int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1;
        boolean z0;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = 1;

        if i0 != 9 goto label1;

        return 1;

     label1:
        if i0 != 3 goto label2;

        if i1 != 1 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    private boolean isBlackListed(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, $r4;
        int i0, i1;
        java.lang.String[] $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist>;

        $r4 = $r3[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void lambda$XT3F5aQci4H6VWSBYBQQNSzpnvs(com.android.server.usb.UsbHostManager)
    {
        com.android.server.usb.UsbHostManager r0;

        r0 := @parameter0: com.android.server.usb.UsbHostManager;

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void monitorUsbHostBus()>();

        return;
    }

    private void logUsbDevice(com.android.server.usb.descriptors.UsbDescriptorParser)
    {
        com.android.server.usb.UsbHostManager r0;
        boolean z0, z1, z2;
        java.lang.StringBuilder $r1, $r8, $r13;
        java.lang.Object[] $r3, $r10, $r15;
        java.lang.Integer $r4, $r5;
        java.lang.String $r6, $r11, $r19, $r21, r23, r24, r25, r26, r29, r31, r33;
        java.lang.Boolean $r16, $r17, $r18;
        com.android.server.usb.descriptors.UsbDescriptorParser r22;
        int i1, i2;
        com.android.server.usb.descriptors.UsbDeviceDescriptor r27;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r22 := @parameter0: com.android.server.usb.descriptors.UsbDescriptorParser;

        i1 = 0;

        i2 = 0;

        r23 = "<unknown>";

        r24 = "<unknown>";

        r25 = "<unknown>";

        r26 = "<unknown>";

        r27 = virtualinvoke r22.<com.android.server.usb.descriptors.UsbDescriptorParser: com.android.server.usb.descriptors.UsbDeviceDescriptor getDeviceDescriptor()>();

        if r27 == null goto label1;

        i1 = virtualinvoke r27.<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getVendorID()>();

        i2 = virtualinvoke r27.<com.android.server.usb.descriptors.UsbDeviceDescriptor: int getProductID()>();

        r23 = virtualinvoke r27.<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getMfgString(com.android.server.usb.descriptors.UsbDescriptorParser)>(r22);

        r24 = virtualinvoke r27.<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getProductString(com.android.server.usb.descriptors.UsbDescriptorParser)>(r22);

        r25 = virtualinvoke r27.<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getDeviceReleaseString()>();

        r26 = virtualinvoke r27.<com.android.server.usb.descriptors.UsbDeviceDescriptor: java.lang.String getSerialString(com.android.server.usb.descriptors.UsbDescriptorParser)>(r22);

     label1:
        if i1 != 7531 goto label2;

        return;

     label2:
        z0 = virtualinvoke r22.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioInterface()>();

        z1 = virtualinvoke r22.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasHIDInterface()>();

        z2 = virtualinvoke r22.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasStorageInterface()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USB device attached: ");

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("vidpid %04x:%04x", $r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r29 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = r23;

        $r10[1] = r24;

        $r10[2] = r25;

        $r10[3] = r26;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(" mfg/product/ver/serial %s/%s/%s/%s", $r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r31 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r15 = newarray (java.lang.Object)[3];

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r15[1] = $r17;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r15[2] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(" hasAudio/HID/Storage: %b/%b/%b", $r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r33 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r21, r33);

        return;
    }

    private native void monitorUsbHostBus();

    private native android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String);

    private boolean usbDeviceAdded(java.lang.String, int, int, byte[])
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, $i3, $i4;
        java.lang.String r1, $r5, $r12, $r17, $r21, r23, r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.usb.descriptors.UsbDescriptorParser $r2;
        java.util.HashMap $r3, $r8;
        java.lang.Object $r4, r26;
        com.android.server.usb.UsbPermissionManager $r6;
        android.content.Context $r7;
        com.android.server.usb.UsbProfileGroupSettingsManager $r13, $r16;
        com.android.server.usb.UsbAlsaManager $r14;
        byte[] $r15, $r18, r24;
        java.lang.Throwable $r22;
        java.lang.StringBuilder r28, r32;
        android.hardware.usb.UsbDevice$Builder r29;
        com.android.server.usb.UsbSerialReader r30;
        android.hardware.usb.UsbDevice r31;
        android.content.ComponentName r33;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r23 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r24 := @parameter3: byte[];

        $z0 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>(r23);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z1 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(int,int)>(i0, i1);

        if $z1 == 0 goto label02;

        return 0;

     label02:
        $r2 = new com.android.server.usb.descriptors.UsbDescriptorParser;

        specialinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: void <init>(java.lang.String,byte[])>(r23, r24);

        if i0 != 0 goto label03;

        $z5 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean checkUsbInterfacesBlackListed(com.android.server.usb.descriptors.UsbDescriptorParser)>($r2);

        if $z5 != 0 goto label03;

        return 0;

     label03:
        specialinvoke r0.<com.android.server.usb.UsbHostManager: void logUsbDevice(com.android.server.usb.descriptors.UsbDescriptorParser)>($r2);

        r26 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r26;

     label04:
        $r3 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r23);

        if $r4 == null goto label06;

        r27 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device already on mDevices list: ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r21 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r27, $r21);

        exitmonitor r26;

     label05:
        return 0;

     label06:
        r29 = virtualinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: android.hardware.usb.UsbDevice$Builder toAndroidUsbDeviceBuilder()>();

     label07:
        if r29 != null goto label10;

     label08:
        $r17 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r17, "Couldn\'t create UsbDevice object.");

        $r18 = virtualinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: byte[] getRawDescriptors()>();

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void addConnectionRecord(java.lang.String,int,byte[])>(r23, 2, $r18);

     label09:
        goto label17;

     label10:
        r30 = new com.android.server.usb.UsbSerialReader;

        $r7 = r0.<com.android.server.usb.UsbHostManager: android.content.Context mContext>;

        $r6 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        $r5 = r29.<android.hardware.usb.UsbDevice$Builder: java.lang.String serialNumber>;

        specialinvoke r30.<com.android.server.usb.UsbSerialReader: void <init>(android.content.Context,com.android.server.usb.UsbPermissionManager,java.lang.String)>($r7, $r6, $r5);

        r31 = virtualinvoke r29.<android.hardware.usb.UsbDevice$Builder: android.hardware.usb.UsbDevice build(android.hardware.usb.IUsbSerialReader)>(r30);

        virtualinvoke r30.<com.android.server.usb.UsbSerialReader: void setDevice(java.lang.Object)>(r31);

        $r8 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r31);

        r1 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added device ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r12 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r1, $r12);

        r33 = specialinvoke r0.<com.android.server.usb.UsbHostManager: android.content.ComponentName getUsbDeviceConnectionHandler()>();

     label11:
        if r33 != null goto label14;

     label12:
        $r16 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbProfileGroupSettingsManager getCurrentUserSettings()>();

        virtualinvoke $r16.<com.android.server.usb.UsbProfileGroupSettingsManager: void deviceAttached(android.hardware.usb.UsbDevice)>(r31);

     label13:
        goto label15;

     label14:
        $r13 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbProfileGroupSettingsManager getCurrentUserSettings()>();

        virtualinvoke $r13.<com.android.server.usb.UsbProfileGroupSettingsManager: void deviceAttachedForFixedHandler(android.hardware.usb.UsbDevice,android.content.ComponentName)>(r31, r33);

     label15:
        $r14 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbAlsaManager mUsbAlsaManager>;

        virtualinvoke $r14.<com.android.server.usb.UsbAlsaManager: void usbDeviceAdded(java.lang.String,android.hardware.usb.UsbDevice,com.android.server.usb.descriptors.UsbDescriptorParser)>(r23, r31, $r2);

     label16:
        $r15 = virtualinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: byte[] getRawDescriptors()>();

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void addConnectionRecord(java.lang.String,int,byte[])>(r23, 0, $r15);

        $i3 = virtualinvoke r31.<android.hardware.usb.UsbDevice: int getVendorId()>();

        $i4 = virtualinvoke r31.<android.hardware.usb.UsbDevice: int getProductId()>();

        $z2 = virtualinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioInterface()>();

        $z3 = virtualinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasHIDInterface()>();

        $z4 = virtualinvoke $r2.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasStorageInterface()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,boolean,boolean,boolean,int,long)>(77, $i3, $i4, $z2, $z3, $z4, 1, 0L);

     label17:
        exitmonitor r26;

     label18:
        return 1;

     label19:
        $r22 := @caughtexception;

     label20:
        exitmonitor r26;

     label21:
        throw $r22;

        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private void usbDeviceRemoved(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1, $r3, $r18;
        java.util.HashMap $r2;
        java.lang.String $r7, $r11, $r13, r21, r23, r27;
        com.android.server.usb.UsbAlsaManager $r14;
        com.android.server.usb.UsbPermissionManager $r15;
        com.android.server.usb.UsbProfileGroupSettingsManager $r16;
        android.util.ArrayMap $r17;
        byte[] $r19;
        int $i2, $i3;
        boolean $z0, $z1, $z2;
        long $l4, $l5, $l6;
        java.lang.Throwable $r20;
        android.hardware.usb.UsbDevice r22;
        java.lang.StringBuilder r24, r28;
        com.android.server.usb.UsbHostManager$ConnectionRecord r25;
        com.android.server.usb.descriptors.UsbDescriptorParser r26;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r21 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r21);

        r22 = (android.hardware.usb.UsbDevice) $r3;

     label02:
        if r22 == null goto label08;

     label03:
        r23 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed device at ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke r22.<android.hardware.usb.UsbDevice: java.lang.String getProductName()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r23, $r13);

        $r14 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbAlsaManager mUsbAlsaManager>;

        virtualinvoke $r14.<com.android.server.usb.UsbAlsaManager: void usbDeviceRemoved(java.lang.String)>(r21);

        $r15 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        virtualinvoke $r15.<com.android.server.usb.UsbPermissionManager: void usbDeviceRemoved(android.hardware.usb.UsbDevice)>(r22);

        $r16 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbProfileGroupSettingsManager getCurrentUserSettings()>();

        virtualinvoke $r16.<com.android.server.usb.UsbProfileGroupSettingsManager: void usbDeviceRemoved(android.hardware.usb.UsbDevice)>(r22);

        $r17 = r0.<com.android.server.usb.UsbHostManager: android.util.ArrayMap mConnected>;

        $r18 = virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r21);

        r25 = (com.android.server.usb.UsbHostManager$ConnectionRecord) $r18;

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void addConnectionRecord(java.lang.String,int,byte[])>(r21, -1, null);

     label04:
        if r25 == null goto label07;

     label05:
        r26 = new com.android.server.usb.descriptors.UsbDescriptorParser;

        $r19 = r25.<com.android.server.usb.UsbHostManager$ConnectionRecord: byte[] mDescriptors>;

        specialinvoke r26.<com.android.server.usb.descriptors.UsbDescriptorParser: void <init>(java.lang.String,byte[])>(r21, $r19);

     label06:
        $i2 = virtualinvoke r22.<android.hardware.usb.UsbDevice: int getVendorId()>();

        $i3 = virtualinvoke r22.<android.hardware.usb.UsbDevice: int getProductId()>();

        $z0 = virtualinvoke r26.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasAudioInterface()>();

        $z1 = virtualinvoke r26.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasHIDInterface()>();

        $z2 = virtualinvoke r26.<com.android.server.usb.descriptors.UsbDescriptorParser: boolean hasStorageInterface()>();

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = r25.<com.android.server.usb.UsbHostManager$ConnectionRecord: long mTimestamp>;

        $l6 = $l4 - $l5;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,boolean,boolean,boolean,int,long)>(77, $i2, $i3, $z0, $z1, $z2, 0, $l6);

     label07:
        goto label09;

     label08:
        r27 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed device at ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was already gone");

        $r7 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r27, $r7);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r20 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void dump(com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.usb.UsbHostManager r0;
        java.util.Iterator r1, r20;
        android.content.ComponentName $r2, $r12;
        java.util.HashMap $r3, $r9;
        java.util.Set $r4;
        int $i0;
        java.util.LinkedList $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8, $r10, r17, r18;
        com.android.server.usb.UsbHostManager$ConnectionRecord $r7;
        android.hardware.usb.UsbDevice $r11;
        java.lang.Throwable $r13, $r14;
        com.android.internal.util.dump.DualDumpOutputStream r15;
        java.lang.String r16, r19;
        long l1, l2;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r15 := @parameter0: com.android.internal.util.dump.DualDumpOutputStream;

        r16 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        l2 = virtualinvoke r15.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r16, l1);

        r17 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mHandlerLock>;

        entermonitor r17;

     label01:
        $r2 = r0.<com.android.server.usb.UsbHostManager: android.content.ComponentName mUsbDeviceConnectionHandler>;

        if $r2 == null goto label02;

        $r12 = r0.<com.android.server.usb.UsbHostManager: android.content.ComponentName mUsbDeviceConnectionHandler>;

        staticinvoke <com.android.internal.util.dump.DumpUtils: void writeComponentName(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,android.content.ComponentName)>(r15, "default_usb_host_connection_handler", 1146756268033L, $r12);

     label02:
        exitmonitor r17;

     label03:
        r18 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r18;

     label04:
        $r3 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.String) $r8;

        $r9 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r19);

        $r11 = (android.hardware.usb.UsbDevice) $r10;

        staticinvoke <com.android.internal.usb.DumpUtils: void writeDevice(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long,android.hardware.usb.UsbDevice)>(r15, "devices", 2246267895810L, $r11);

     label06:
        goto label05;

     label07:
        $i0 = r0.<com.android.server.usb.UsbHostManager: int mNumConnects>;

        virtualinvoke r15.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,int)>("num_connects", 1120986464259L, $i0);

        $r5 = r0.<com.android.server.usb.UsbHostManager: java.util.LinkedList mConnections>;

        r20 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.usb.UsbHostManager$ConnectionRecord) $r6;

        virtualinvoke $r7.<com.android.server.usb.UsbHostManager$ConnectionRecord: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r15, "connections", 2246267895812L);

     label09:
        goto label08;

     label10:
        exitmonitor r18;

     label11:
        virtualinvoke r15.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l2);

        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r18;

     label14:
        throw $r13;

     label15:
        $r14 := @caughtexception;

     label16:
        exitmonitor r17;

     label17:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void dumpDescriptors(com.android.internal.util.IndentingPrintWriter, java.lang.String[])
    {
        com.android.server.usb.UsbHostManager r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.String[] r2;
        com.android.server.usb.UsbHostManager$ConnectionRecord $r3, $r4, $r9, $r10, $r11;
        int $i0;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: java.lang.String[];

        $r3 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect>;

        if $r3 == null goto label5;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Last Connected USB Device:");

        $i0 = lengthof r2;

        if $i0 <= 1 goto label4;

        $r5 = r2[1];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-dump-short");

        if $z0 == 0 goto label1;

        goto label4;

     label1:
        $r6 = r2[1];

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("-dump-tree");

        if $z1 == 0 goto label2;

        $r11 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect>;

        virtualinvoke $r11.<com.android.server.usb.UsbHostManager$ConnectionRecord: void dumpTree(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label6;

     label2:
        $r7 = r2[1];

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("-dump-list");

        if $z2 == 0 goto label3;

        $r10 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect>;

        virtualinvoke $r10.<com.android.server.usb.UsbHostManager$ConnectionRecord: void dumpList(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label6;

     label3:
        $r8 = r2[1];

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("-dump-raw");

        if $z3 == 0 goto label6;

        $r9 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect>;

        virtualinvoke $r9.<com.android.server.usb.UsbHostManager$ConnectionRecord: void dumpRaw(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label6;

     label4:
        $r4 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbHostManager$ConnectionRecord mLastConnect>;

        virtualinvoke $r4.<com.android.server.usb.UsbHostManager$ConnectionRecord: void dumpShort(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label6;

     label5:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("No USB Devices have been connected.");

     label6:
        return;
    }

    public void getDeviceList(android.os.Bundle)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1, $r6, $r8;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.HashMap $r4, $r7;
        java.util.Set $r5;
        boolean $z0;
        android.os.Parcelable $r9;
        java.lang.Throwable $r10;
        android.os.Bundle r11;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r11 := @parameter0: android.os.Bundle;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r7 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r9 = (android.os.Parcelable) $r8;

        virtualinvoke r11.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>(r3, $r9);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.os.ParcelFileDescriptor openDevice(java.lang.String, com.android.server.usb.UsbUserPermissionManager, java.lang.String, int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1;
        java.lang.Object r1, $r4;
        android.hardware.usb.UsbDevice r2;
        boolean $z0;
        java.util.HashMap $r3;
        java.lang.String $r8, r10, r12;
        java.lang.Throwable $r9;
        com.android.server.usb.UsbUserPermissionManager r11;
        android.os.ParcelFileDescriptor r13;
        java.lang.IllegalArgumentException r14;
        java.lang.StringBuilder r15;
        java.lang.SecurityException r16;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: com.android.server.usb.UsbUserPermissionManager;

        r12 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>(r10);

        if $z0 != 0 goto label6;

        $r3 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r10);

        r2 = (android.hardware.usb.UsbDevice) $r4;

     label2:
        if r2 == null goto label5;

     label3:
        virtualinvoke r11.<com.android.server.usb.UsbUserPermissionManager: void checkPermission(android.hardware.usb.UsbDevice,java.lang.String,int,int)>(r2, r12, i0, i1);

        r13 = specialinvoke r0.<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String)>(r10);

        exitmonitor r1;

     label4:
        return r13;

     label5:
        r14 = new java.lang.IllegalArgumentException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist or is restricted");

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r14;

     label6:
        r16 = new java.lang.SecurityException;

        specialinvoke r16.<java.lang.SecurityException: void <init>(java.lang.String)>("USB device is on a restricted bus");

        throw r16;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setCurrentUserSettings(com.android.server.usb.UsbProfileGroupSettingsManager)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.usb.UsbProfileGroupSettingsManager r3;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r3 := @parameter0: com.android.server.usb.UsbProfileGroupSettingsManager;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbProfileGroupSettingsManager mCurrentSettings> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setUsbDeviceConnectionHandler(android.content.ComponentName)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.content.ComponentName r3;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r3 := @parameter0: android.content.ComponentName;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mHandlerLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.usb.UsbHostManager: android.content.ComponentName mUsbDeviceConnectionHandler> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Thread r2;
        java.lang.Throwable $r3;
        com.android.server.usb._$$Lambda$UsbHostManager$XT3F5aQci4H6VWSBYBQQNSzpnvs r4;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r4 = new com.android.server.usb._$$Lambda$UsbHostManager$XT3F5aQci4H6VWSBYBQQNSzpnvs;

        specialinvoke r4.<com.android.server.usb._$$Lambda$UsbHostManager$XT3F5aQci4H6VWSBYBQQNSzpnvs: void <init>(com.android.server.usb.UsbHostManager)>(r0);

        r2 = new java.lang.Thread;

        specialinvoke r2.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>(null, r4, "UsbService host thread");

        virtualinvoke r2.<java.lang.Thread: void start()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
