class com.android.server.usb.UsbMidiDevice$3 extends java.lang.Thread
{
    final com.android.server.usb.UsbMidiDevice this$0;
    final com.android.internal.midi.MidiEventScheduler val$eventSchedulerF;
    final java.io.FileOutputStream val$outputStreamF;
    final int val$portF;

    void <init>(com.android.server.usb.UsbMidiDevice, java.lang.String, com.android.internal.midi.MidiEventScheduler, java.io.FileOutputStream, int)
    {
        com.android.server.usb.UsbMidiDevice$3 r0;
        com.android.server.usb.UsbMidiDevice r1;
        java.lang.String r2;
        com.android.internal.midi.MidiEventScheduler r3;
        java.io.FileOutputStream r4;
        int i0;

        r0 := @this: com.android.server.usb.UsbMidiDevice$3;

        r1 := @parameter0: com.android.server.usb.UsbMidiDevice;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.midi.MidiEventScheduler;

        r4 := @parameter3: java.io.FileOutputStream;

        i0 := @parameter4: int;

        r0.<com.android.server.usb.UsbMidiDevice$3: com.android.server.usb.UsbMidiDevice this$0> = r1;

        r0.<com.android.server.usb.UsbMidiDevice$3: com.android.internal.midi.MidiEventScheduler val$eventSchedulerF> = r3;

        r0.<com.android.server.usb.UsbMidiDevice$3: java.io.FileOutputStream val$outputStreamF> = r4;

        r0.<com.android.server.usb.UsbMidiDevice$3: int val$portF> = i0;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>(r2);

        return;
    }

    public void run()
    {
        com.android.server.usb.UsbMidiDevice$3 r0;
        int $i0, $i2;
        byte[] $r1;
        java.io.FileOutputStream $r2;
        com.android.internal.midi.MidiEventScheduler $r3, $r10;
        java.lang.Throwable $r4, $r9;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        com.android.internal.midi.EventScheduler$SchedulableEvent $r11;
        com.android.internal.midi.MidiEventScheduler$MidiEvent r12;

        r0 := @this: com.android.server.usb.UsbMidiDevice$3;

     label1:
        $r10 = r0.<com.android.server.usb.UsbMidiDevice$3: com.android.internal.midi.MidiEventScheduler val$eventSchedulerF>;

        $r11 = virtualinvoke $r10.<com.android.internal.midi.MidiEventScheduler: com.android.internal.midi.EventScheduler$SchedulableEvent waitNextEvent()>();

        r12 = (com.android.internal.midi.MidiEventScheduler$MidiEvent) $r11;

     label2:
        if r12 != null goto label3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("UsbMidiDevice", "output thread exit");

        return;

     label3:
        $r2 = r0.<com.android.server.usb.UsbMidiDevice$3: java.io.FileOutputStream val$outputStreamF>;

        $r1 = r12.<com.android.internal.midi.MidiEventScheduler$MidiEvent: byte[] data>;

        $i0 = r12.<com.android.internal.midi.MidiEventScheduler$MidiEvent: int count>;

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write failed for port ");

        $i2 = r0.<com.android.server.usb.UsbMidiDevice$3: int val$portF>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UsbMidiDevice", $r8);

     label6:
        $r3 = r0.<com.android.server.usb.UsbMidiDevice$3: com.android.internal.midi.MidiEventScheduler val$eventSchedulerF>;

        virtualinvoke $r3.<com.android.internal.midi.MidiEventScheduler: void addEventToPool(com.android.internal.midi.EventScheduler$SchedulableEvent)>(r12);

        goto label1;

     label7:
        $r9 := @caughtexception;

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label5;
    }
}
