public final class com.android.server.usb.UsbMidiDevice extends java.lang.Object implements java.io.Closeable
{
    private static final int BUFFER_SIZE;
    private static final java.lang.String TAG;
    private final int mAlsaCard;
    private final int mAlsaDevice;
    private final android.media.midi.MidiDeviceServer$Callback mCallback;
    private com.android.internal.midi.MidiEventScheduler[] mEventSchedulers;
    private java.io.FileDescriptor[] mFileDescriptors;
    private final com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] mInputPortReceivers;
    private java.io.FileInputStream[] mInputStreams;
    private boolean mIsOpen;
    private final java.lang.Object mLock;
    private java.io.FileOutputStream[] mOutputStreams;
    private int mPipeFD;
    private android.system.StructPollfd[] mPollFDs;
    private android.media.midi.MidiDeviceServer mServer;
    private final int mSubdeviceCount;

    private void <init>(int, int, int)
    {
        com.android.server.usb.UsbMidiDevice r0;
        int i0, i1, i2, i3;
        java.lang.Object $r1;
        com.android.server.usb.UsbMidiDevice$1 $r2;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] $r3, $r5;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy $r4;

        r0 := @this: com.android.server.usb.UsbMidiDevice;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbMidiDevice: java.lang.Object mLock> = $r1;

        r0.<com.android.server.usb.UsbMidiDevice: int mPipeFD> = -1;

        $r2 = new com.android.server.usb.UsbMidiDevice$1;

        specialinvoke $r2.<com.android.server.usb.UsbMidiDevice$1: void <init>(com.android.server.usb.UsbMidiDevice)>(r0);

        r0.<com.android.server.usb.UsbMidiDevice: android.media.midi.MidiDeviceServer$Callback mCallback> = $r2;

        r0.<com.android.server.usb.UsbMidiDevice: int mAlsaCard> = i2;

        r0.<com.android.server.usb.UsbMidiDevice: int mAlsaDevice> = i0;

        r0.<com.android.server.usb.UsbMidiDevice: int mSubdeviceCount> = i1;

        $r3 = newarray (com.android.server.usb.UsbMidiDevice$InputReceiverProxy)[i1];

        r0.<com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] mInputPortReceivers> = $r3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r5 = r0.<com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] mInputPortReceivers>;

        $r4 = new com.android.server.usb.UsbMidiDevice$InputReceiverProxy;

        specialinvoke $r4.<com.android.server.usb.UsbMidiDevice$InputReceiverProxy: void <init>(com.android.server.usb.UsbMidiDevice,com.android.server.usb.UsbMidiDevice$1)>(r0, null);

        $r5[i3] = $r4;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    static java.lang.Object access$000(com.android.server.usb.UsbMidiDevice)
    {
        com.android.server.usb.UsbMidiDevice r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.usb.UsbMidiDevice;

        $r1 = r0.<com.android.server.usb.UsbMidiDevice: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$100(com.android.server.usb.UsbMidiDevice)
    {
        com.android.server.usb.UsbMidiDevice r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbMidiDevice;

        $z0 = r0.<com.android.server.usb.UsbMidiDevice: boolean mIsOpen>;

        return $z0;
    }

    static boolean access$200(com.android.server.usb.UsbMidiDevice)
    {
        com.android.server.usb.UsbMidiDevice r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbMidiDevice;

        $z0 = specialinvoke r0.<com.android.server.usb.UsbMidiDevice: boolean openLocked()>();

        return $z0;
    }

    static void access$300(com.android.server.usb.UsbMidiDevice)
    {
        com.android.server.usb.UsbMidiDevice r0;

        r0 := @parameter0: com.android.server.usb.UsbMidiDevice;

        specialinvoke r0.<com.android.server.usb.UsbMidiDevice: void closeLocked()>();

        return;
    }

    static android.system.StructPollfd[] access$500(com.android.server.usb.UsbMidiDevice)
    {
        com.android.server.usb.UsbMidiDevice r0;
        android.system.StructPollfd[] $r1;

        r0 := @parameter0: com.android.server.usb.UsbMidiDevice;

        $r1 = r0.<com.android.server.usb.UsbMidiDevice: android.system.StructPollfd[] mPollFDs>;

        return $r1;
    }

    static java.io.FileInputStream[] access$600(com.android.server.usb.UsbMidiDevice)
    {
        com.android.server.usb.UsbMidiDevice r0;
        java.io.FileInputStream[] $r1;

        r0 := @parameter0: com.android.server.usb.UsbMidiDevice;

        $r1 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileInputStream[] mInputStreams>;

        return $r1;
    }

    private void closeLocked()
    {
        com.android.server.usb.UsbMidiDevice r0;
        com.android.internal.midi.MidiEventScheduler[] $r1, $r7;
        int $i0, $i1, $i2, i3, i4, i5;
        java.io.FileDescriptor[] $r2;
        java.io.FileOutputStream $r3;
        java.io.FileInputStream $r4;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] $r5;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy $r6;
        com.android.internal.midi.MidiEventScheduler $r8;
        java.io.FileInputStream[] r9;
        java.io.FileOutputStream[] r10;

        r0 := @this: com.android.server.usb.UsbMidiDevice;

        i3 = 0;

     label1:
        $r1 = r0.<com.android.server.usb.UsbMidiDevice: com.android.internal.midi.MidiEventScheduler[] mEventSchedulers>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r5 = r0.<com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] mInputPortReceivers>;

        $r6 = $r5[i3];

        virtualinvoke $r6.<com.android.server.usb.UsbMidiDevice$InputReceiverProxy: void setReceiver(android.media.midi.MidiReceiver)>(null);

        $r7 = r0.<com.android.server.usb.UsbMidiDevice: com.android.internal.midi.MidiEventScheduler[] mEventSchedulers>;

        $r8 = $r7[i3];

        virtualinvoke $r8.<com.android.internal.midi.MidiEventScheduler: void close()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        r0.<com.android.server.usb.UsbMidiDevice: com.android.internal.midi.MidiEventScheduler[] mEventSchedulers> = null;

        i4 = 0;

     label3:
        r9 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileInputStream[] mInputStreams>;

        $i1 = lengthof r9;

        if i4 >= $i1 goto label4;

        $r4 = r9[i4];

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r4);

        i4 = i4 + 1;

        goto label3;

     label4:
        r0.<com.android.server.usb.UsbMidiDevice: java.io.FileInputStream[] mInputStreams> = null;

        i5 = 0;

     label5:
        r10 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileOutputStream[] mOutputStreams>;

        $i2 = lengthof r10;

        if i5 >= $i2 goto label6;

        $r3 = r10[i5];

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        i5 = i5 + 1;

        goto label5;

     label6:
        r0.<com.android.server.usb.UsbMidiDevice: java.io.FileOutputStream[] mOutputStreams> = null;

        $r2 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileDescriptor[] mFileDescriptors>;

        specialinvoke r0.<com.android.server.usb.UsbMidiDevice: void nativeClose(java.io.FileDescriptor[])>($r2);

        r0.<com.android.server.usb.UsbMidiDevice: java.io.FileDescriptor[] mFileDescriptors> = null;

        r0.<com.android.server.usb.UsbMidiDevice: boolean mIsOpen> = 0;

        return;
    }

    public static com.android.server.usb.UsbMidiDevice create(android.content.Context, android.os.Bundle, int, int)
    {
        android.content.Context r0;
        android.os.Bundle r1;
        int i0, i1, i2;
        com.android.server.usb.UsbMidiDevice $r3;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = staticinvoke <com.android.server.usb.UsbMidiDevice: int nativeGetSubdeviceCount(int,int)>(i0, i1);

        if i2 > 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UsbMidiDevice", "nativeGetSubdeviceCount failed");

        return null;

     label1:
        $r3 = new com.android.server.usb.UsbMidiDevice;

        specialinvoke $r3.<com.android.server.usb.UsbMidiDevice: void <init>(int,int,int)>(i0, i1, i2);

        $z0 = specialinvoke $r3.<com.android.server.usb.UsbMidiDevice: boolean register(android.content.Context,android.os.Bundle)>(r0, r1);

        if $z0 != 0 goto label2;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UsbMidiDevice", "createDeviceServer failed");

        return null;

     label2:
        return $r3;
    }

    private native void nativeClose(java.io.FileDescriptor[]);

    private static native int nativeGetSubdeviceCount(int, int);

    private native java.io.FileDescriptor[] nativeOpen(int, int, int);

    private boolean openLocked()
    {
        com.android.server.usb.UsbMidiDevice r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i10, i11, i12;
        android.system.StructPollfd[] $r1, $r24;
        java.io.FileInputStream[] $r2, $r26;
        java.io.FileOutputStream[] $r3, $r9, $r17;
        com.android.internal.midi.MidiEventScheduler[] $r4, $r8, $r19;
        com.android.server.usb.UsbMidiDevice$2 $r5;
        android.media.midi.MidiDeviceServer $r6;
        android.media.midi.MidiReceiver[] $r7;
        java.lang.StringBuilder $r10;
        com.android.server.usb.UsbMidiDevice$3 $r13;
        java.lang.String $r14;
        java.io.FileOutputStream $r15, r32;
        java.io.FileDescriptor $r16, r28;
        com.android.internal.midi.MidiEventScheduler $r18, r31;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] $r20;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy $r21;
        android.media.midi.MidiReceiver $r22;
        android.system.StructPollfd $r23;
        short $s7, $s8;
        java.io.FileInputStream $r25;
        java.io.FileDescriptor[] r27;

        r0 := @this: com.android.server.usb.UsbMidiDevice;

        $i4 = r0.<com.android.server.usb.UsbMidiDevice: int mAlsaCard>;

        $i3 = r0.<com.android.server.usb.UsbMidiDevice: int mAlsaDevice>;

        $i2 = r0.<com.android.server.usb.UsbMidiDevice: int mSubdeviceCount>;

        r27 = specialinvoke r0.<com.android.server.usb.UsbMidiDevice: java.io.FileDescriptor[] nativeOpen(int,int,int)>($i4, $i3, $i2);

        if r27 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UsbMidiDevice", "nativeOpen failed");

        return 0;

     label1:
        r0.<com.android.server.usb.UsbMidiDevice: java.io.FileDescriptor[] mFileDescriptors> = r27;

        i0 = lengthof r27;

        $i5 = lengthof r27;

        i1 = $i5 - 1;

        $r1 = newarray (android.system.StructPollfd)[i0];

        r0.<com.android.server.usb.UsbMidiDevice: android.system.StructPollfd[] mPollFDs> = $r1;

        $r2 = newarray (java.io.FileInputStream)[i0];

        r0.<com.android.server.usb.UsbMidiDevice: java.io.FileInputStream[] mInputStreams> = $r2;

        i10 = 0;

     label2:
        if i10 >= i0 goto label3;

        r28 = r27[i10];

        $r23 = new android.system.StructPollfd;

        specialinvoke $r23.<android.system.StructPollfd: void <init>()>();

        $r23.<android.system.StructPollfd: java.io.FileDescriptor fd> = r28;

        $i6 = <android.system.OsConstants: int POLLIN>;

        $s7 = (short) $i6;

        $s8 = (short) $s7;

        $r23.<android.system.StructPollfd: short events> = $s8;

        $r24 = r0.<com.android.server.usb.UsbMidiDevice: android.system.StructPollfd[] mPollFDs>;

        $r24[i10] = $r23;

        $r26 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileInputStream[] mInputStreams>;

        $r25 = new java.io.FileInputStream;

        specialinvoke $r25.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>(r28);

        $r26[i10] = $r25;

        i10 = i10 + 1;

        goto label2;

     label3:
        $r3 = newarray (java.io.FileOutputStream)[i1];

        r0.<com.android.server.usb.UsbMidiDevice: java.io.FileOutputStream[] mOutputStreams> = $r3;

        $r4 = newarray (com.android.internal.midi.MidiEventScheduler)[i1];

        r0.<com.android.server.usb.UsbMidiDevice: com.android.internal.midi.MidiEventScheduler[] mEventSchedulers> = $r4;

        i11 = 0;

     label4:
        if i11 >= i1 goto label5;

        $r17 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileOutputStream[] mOutputStreams>;

        $r15 = new java.io.FileOutputStream;

        $r16 = r27[i11];

        specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r16);

        $r17[i11] = $r15;

        $r18 = new com.android.internal.midi.MidiEventScheduler;

        specialinvoke $r18.<com.android.internal.midi.MidiEventScheduler: void <init>()>();

        $r19 = r0.<com.android.server.usb.UsbMidiDevice: com.android.internal.midi.MidiEventScheduler[] mEventSchedulers>;

        $r19[i11] = $r18;

        $r20 = r0.<com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] mInputPortReceivers>;

        $r21 = $r20[i11];

        $r22 = virtualinvoke $r18.<com.android.internal.midi.MidiEventScheduler: android.media.midi.MidiReceiver getReceiver()>();

        virtualinvoke $r21.<com.android.server.usb.UsbMidiDevice$InputReceiverProxy: void setReceiver(android.media.midi.MidiReceiver)>($r22);

        i11 = i11 + 1;

        goto label4;

     label5:
        $r5 = new com.android.server.usb.UsbMidiDevice$2;

        $r6 = r0.<com.android.server.usb.UsbMidiDevice: android.media.midi.MidiDeviceServer mServer>;

        $r7 = virtualinvoke $r6.<android.media.midi.MidiDeviceServer: android.media.midi.MidiReceiver[] getOutputPortReceivers()>();

        specialinvoke $r5.<com.android.server.usb.UsbMidiDevice$2: void <init>(com.android.server.usb.UsbMidiDevice,java.lang.String,android.media.midi.MidiReceiver[])>(r0, "UsbMidiDevice input thread", $r7);

        virtualinvoke $r5.<com.android.server.usb.UsbMidiDevice$2: void start()>();

        i12 = 0;

     label6:
        if i12 >= i1 goto label7;

        $r8 = r0.<com.android.server.usb.UsbMidiDevice: com.android.internal.midi.MidiEventScheduler[] mEventSchedulers>;

        r31 = $r8[i12];

        $r9 = r0.<com.android.server.usb.UsbMidiDevice: java.io.FileOutputStream[] mOutputStreams>;

        r32 = $r9[i12];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UsbMidiDevice output thread ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r13 = new com.android.server.usb.UsbMidiDevice$3;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<com.android.server.usb.UsbMidiDevice$3: void <init>(com.android.server.usb.UsbMidiDevice,java.lang.String,com.android.internal.midi.MidiEventScheduler,java.io.FileOutputStream,int)>(r0, $r14, r31, r32, i12);

        virtualinvoke $r13.<com.android.server.usb.UsbMidiDevice$3: void start()>();

        i12 = i12 + 1;

        goto label6;

     label7:
        r0.<com.android.server.usb.UsbMidiDevice: boolean mIsOpen> = 1;

        return 1;
    }

    private boolean register(android.content.Context, android.os.Bundle)
    {
        com.android.server.usb.UsbMidiDevice r0;
        android.os.Bundle r1;
        java.lang.Object $r2;
        android.media.midi.MidiDeviceServer$Callback $r3;
        int $i0;
        com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] $r4;
        android.content.Context r5;
        android.media.midi.MidiManager r6;
        android.media.midi.MidiDeviceServer r7;

        r0 := @this: com.android.server.usb.UsbMidiDevice;

        r5 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Bundle;

        $r2 = virtualinvoke r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("midi");

        r6 = (android.media.midi.MidiManager) $r2;

        if r6 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UsbMidiDevice", "No MidiManager in UsbMidiDevice.create()");

        return 0;

     label1:
        $r4 = r0.<com.android.server.usb.UsbMidiDevice: com.android.server.usb.UsbMidiDevice$InputReceiverProxy[] mInputPortReceivers>;

        $i0 = r0.<com.android.server.usb.UsbMidiDevice: int mSubdeviceCount>;

        $r3 = r0.<com.android.server.usb.UsbMidiDevice: android.media.midi.MidiDeviceServer$Callback mCallback>;

        r7 = virtualinvoke r6.<android.media.midi.MidiManager: android.media.midi.MidiDeviceServer createDeviceServer(android.media.midi.MidiReceiver[],int,java.lang.String[],java.lang.String[],android.os.Bundle,int,android.media.midi.MidiDeviceServer$Callback)>($r4, $i0, null, null, r1, 1, $r3);

        r0.<com.android.server.usb.UsbMidiDevice: android.media.midi.MidiDeviceServer mServer> = r7;

        if r7 != null goto label2;

        return 0;

     label2:
        return 1;
    }

    public void close() throws java.io.IOException
    {
        com.android.server.usb.UsbMidiDevice r0;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.Object r3;
        android.media.midi.MidiDeviceServer r4;

        r0 := @this: com.android.server.usb.UsbMidiDevice;

        r3 = r0.<com.android.server.usb.UsbMidiDevice: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $z0 = r0.<com.android.server.usb.UsbMidiDevice: boolean mIsOpen>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.usb.UsbMidiDevice: void closeLocked()>();

     label2:
        exitmonitor r3;

     label3:
        r4 = r0.<com.android.server.usb.UsbMidiDevice: android.media.midi.MidiDeviceServer mServer>;

        if r4 == null goto label4;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r3;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void dump(java.lang.String, com.android.internal.util.dump.DualDumpOutputStream, java.lang.String, long)
    {
        com.android.server.usb.UsbMidiDevice r0;
        java.lang.String r1, r3;
        com.android.internal.util.dump.DualDumpOutputStream r2;
        int $i0, $i1;
        long l2, l3;

        r0 := @this: com.android.server.usb.UsbMidiDevice;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.util.dump.DualDumpOutputStream;

        r3 := @parameter2: java.lang.String;

        l2 := @parameter3: long;

        l3 = virtualinvoke r2.<com.android.internal.util.dump.DualDumpOutputStream: long start(java.lang.String,long)>(r3, l2);

        virtualinvoke r2.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,java.lang.String)>("device_address", 1138166333443L, r1);

        $i0 = r0.<com.android.server.usb.UsbMidiDevice: int mAlsaCard>;

        virtualinvoke r2.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,int)>("card", 1120986464257L, $i0);

        $i1 = r0.<com.android.server.usb.UsbMidiDevice: int mAlsaDevice>;

        virtualinvoke r2.<com.android.internal.util.dump.DualDumpOutputStream: void write(java.lang.String,long,int)>("device", 1120986464258L, $i1);

        virtualinvoke r2.<com.android.internal.util.dump.DualDumpOutputStream: void end(long)>(l3);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.usb.UsbMidiDevice: java.lang.String TAG> = "UsbMidiDevice";

        <com.android.server.usb.UsbMidiDevice: int BUFFER_SIZE> = 512;

        return;
    }
}
