public class com.android.server.usb.UsbService extends android.hardware.usb.IUsbManager$Stub
{
    private static final java.lang.String TAG;
    private final com.android.server.usb.UsbAlsaManager mAlsaManager;
    private final android.content.Context mContext;
    private int mCurrentUserId;
    private com.android.server.usb.UsbDeviceManager mDeviceManager;
    private com.android.server.usb.UsbHostManager mHostManager;
    private final java.lang.Object mLock;
    private final com.android.server.usb.UsbPermissionManager mPermissionManager;
    private com.android.server.usb.UsbPortManager mPortManager;
    private final com.android.server.usb.UsbSettingsManager mSettingsManager;
    private final android.os.UserManager mUserManager;

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbService r0;
        java.lang.Object $r2, $r3;
        android.os.UserManager $r4;
        com.android.server.usb.UsbSettingsManager $r5, $r17;
        com.android.server.usb.UsbPermissionManager $r6, $r16, $r20;
        com.android.server.usb.UsbAlsaManager $r7, $r18, $r21;
        android.content.Context $r8, r22, $r26;
        android.content.pm.PackageManager $r9;
        boolean $z0, $z1;
        java.io.File $r10;
        com.android.server.usb.UsbHostManager $r11, $r19;
        com.android.server.usb.UsbPortManager $r12;
        com.android.server.usb.UsbDeviceManager $r14, $r15;
        com.android.server.usb.UsbService$1 $r23;
        android.content.IntentFilter $r24;

        r0 := @this: com.android.server.usb.UsbService;

        r22 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.usb.IUsbManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbService: java.lang.Object mLock> = $r2;

        r0.<com.android.server.usb.UsbService: android.content.Context mContext> = r22;

        $r3 = virtualinvoke r22.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r4 = (android.os.UserManager) $r3;

        r0.<com.android.server.usb.UsbService: android.os.UserManager mUserManager> = $r4;

        $r5 = new com.android.server.usb.UsbSettingsManager;

        specialinvoke $r5.<com.android.server.usb.UsbSettingsManager: void <init>(android.content.Context,com.android.server.usb.UsbService)>(r22, r0);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager> = $r5;

        $r6 = new com.android.server.usb.UsbPermissionManager;

        specialinvoke $r6.<com.android.server.usb.UsbPermissionManager: void <init>(android.content.Context,com.android.server.usb.UsbService)>(r22, r0);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager> = $r6;

        $r7 = new com.android.server.usb.UsbAlsaManager;

        specialinvoke $r7.<com.android.server.usb.UsbAlsaManager: void <init>(android.content.Context)>(r22);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbAlsaManager mAlsaManager> = $r7;

        $r8 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r9.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.host");

        if $z0 == 0 goto label1;

        $r19 = new com.android.server.usb.UsbHostManager;

        $r21 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbAlsaManager mAlsaManager>;

        $r20 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        specialinvoke $r19.<com.android.server.usb.UsbHostManager: void <init>(android.content.Context,com.android.server.usb.UsbAlsaManager,com.android.server.usb.UsbPermissionManager)>(r22, $r21, $r20);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager> = $r19;

     label1:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("/sys/class/android_usb");

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r15 = new com.android.server.usb.UsbDeviceManager;

        $r18 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbAlsaManager mAlsaManager>;

        $r17 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r16 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        specialinvoke $r15.<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context,com.android.server.usb.UsbAlsaManager,com.android.server.usb.UsbSettingsManager,com.android.server.usb.UsbPermissionManager)>(r22, $r18, $r17, $r16);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager> = $r15;

     label2:
        $r11 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r11 != null goto label3;

        $r14 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r14 == null goto label4;

     label3:
        $r12 = new com.android.server.usb.UsbPortManager;

        specialinvoke $r12.<com.android.server.usb.UsbPortManager: void <init>(android.content.Context)>(r22);

        r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager> = $r12;

     label4:
        specialinvoke r0.<com.android.server.usb.UsbService: void onSwitchUser(int)>(0);

        $r23 = new com.android.server.usb.UsbService$1;

        specialinvoke $r23.<com.android.server.usb.UsbService$1: void <init>(com.android.server.usb.UsbService)>(r0);

        $r24 = new android.content.IntentFilter;

        specialinvoke $r24.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r24.<android.content.IntentFilter: void setPriority(int)>(1000);

        virtualinvoke $r24.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");

        $r26 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r26.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r23, $r24, null, null);

        return;
    }

    static void access$000(com.android.server.usb.UsbService, android.os.UserHandle)
    {
        com.android.server.usb.UsbService r0;
        android.os.UserHandle r1;

        r0 := @parameter0: com.android.server.usb.UsbService;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.usb.UsbService: void onStopUser(android.os.UserHandle)>(r1);

        return;
    }

    static void access$100(com.android.server.usb.UsbService, int)
    {
        com.android.server.usb.UsbService r0;
        int i0;

        r0 := @parameter0: com.android.server.usb.UsbService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.usb.UsbService: void onSwitchUser(int)>(i0);

        return;
    }

    static com.android.server.usb.UsbDeviceManager access$200(com.android.server.usb.UsbService)
    {
        com.android.server.usb.UsbService r0;
        com.android.server.usb.UsbDeviceManager $r1;

        r0 := @parameter0: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        return $r1;
    }

    private void onStopUser(android.os.UserHandle)
    {
        com.android.server.usb.UsbService r0;
        android.os.UserHandle r1;
        com.android.server.usb.UsbSettingsManager $r2;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.os.UserHandle;

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        virtualinvoke $r2.<com.android.server.usb.UsbSettingsManager: void remove(android.os.UserHandle)>(r1);

        return;
    }

    private void onSwitchUser(int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.usb.UsbSettingsManager $r2;
        android.os.UserHandle $r3;
        com.android.server.usb.UsbHostManager $r4, $r7;
        com.android.server.usb.UsbDeviceManager $r5, $r6;
        java.lang.Throwable $r8;
        com.android.server.usb.UsbProfileGroupSettingsManager r9;

        r0 := @this: com.android.server.usb.UsbService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.usb.UsbService: int mCurrentUserId> = i0;

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r9 = virtualinvoke $r2.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>($r3);

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r4 == null goto label2;

        $r7 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r7.<com.android.server.usb.UsbHostManager: void setCurrentUserSettings(com.android.server.usb.UsbProfileGroupSettingsManager)>(r9);

     label2:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r6.<com.android.server.usb.UsbDeviceManager: void setCurrentUser(int,com.android.server.usb.UsbProfileGroupSettingsManager)>(i0, r9);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static java.lang.String removeLastChar(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r1;
    }

    public void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory, java.lang.String[], android.os.UserHandle)
    {
        com.android.server.usb.UsbService r0;
        android.os.UserHandle r1;
        long l0;
        java.lang.Object[] $r3;
        android.content.Context $r5;
        com.android.server.usb.UsbSettingsManager $r6;
        com.android.server.usb.UsbProfileGroupSettingsManager $r7;
        java.lang.Throwable $r8;
        android.hardware.usb.UsbAccessory r9;
        java.lang.String[] r10, r11;

        r0 := @this: com.android.server.usb.UsbService;

        r9 := @parameter0: android.hardware.usb.UsbAccessory;

        r10 := @parameter1: java.lang.String[];

        r1 := @parameter2: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r10, "packageNames");

        r11 = (java.lang.String[]) $r3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r7 = virtualinvoke $r6.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r1);

        virtualinvoke $r7.<com.android.server.usb.UsbProfileGroupSettingsManager: void addAccessoryPackagesToDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>(r9, r11, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice, java.lang.String[], android.os.UserHandle)
    {
        com.android.server.usb.UsbService r0;
        android.os.UserHandle r1;
        long l0;
        java.lang.Object[] $r3;
        android.content.Context $r5;
        com.android.server.usb.UsbSettingsManager $r6;
        com.android.server.usb.UsbProfileGroupSettingsManager $r7;
        java.lang.Throwable $r8;
        android.hardware.usb.UsbDevice r9;
        java.lang.String[] r10, r11;

        r0 := @this: com.android.server.usb.UsbService;

        r9 := @parameter0: android.hardware.usb.UsbDevice;

        r10 := @parameter1: java.lang.String[];

        r1 := @parameter2: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r10, "packageNames");

        r11 = (java.lang.String[]) $r3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r7 = virtualinvoke $r6.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r1);

        virtualinvoke $r7.<com.android.server.usb.UsbProfileGroupSettingsManager: void addDevicePackagesToDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>(r9, r11, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void bootCompleted()
    {
        com.android.server.usb.UsbService r0;
        com.android.server.usb.UsbDeviceManager r1;

        r0 := @this: com.android.server.usb.UsbService;

        r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.usb.UsbDeviceManager: void bootCompleted()>();

     label1:
        return;
    }

    public void clearDefaults(java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        java.lang.String r1, r7;
        long l1;
        java.lang.CharSequence $r2;
        android.content.Context $r3;
        com.android.server.usb.UsbSettingsManager $r4;
        com.android.server.usb.UsbProfileGroupSettingsManager $r5;
        java.lang.Throwable $r6;
        android.os.UserHandle r8;

        r0 := @this: com.android.server.usb.UsbService;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r7);

        r1 = (java.lang.String) $r2;

        $r3 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r5 = virtualinvoke $r4.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r8);

        virtualinvoke $r5.<com.android.server.usb.UsbProfileGroupSettingsManager: void clearDefaults(java.lang.String,android.os.UserHandle)>(r1, r8);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.usb.UsbService r0;
        long l0;
        android.content.Context $r1;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z20, z21, z22, z23, z24, z25, z26, z27, z28, z29, z30, z31, z32, z33, z34;
        com.android.internal.util.IndentingPrintWriter $r2, r96, r103, r113, r118, r122, r125, r129, r132, r136;
        com.android.internal.util.dump.DualDumpOutputStream $r3, r95, r102, r112, r117, r121, r124, r128, r131, r133, r135;
        com.android.server.usb.UsbDeviceManager $r4, $r12;
        com.android.server.usb.UsbHostManager $r5, $r11, $r32;
        com.android.server.usb.UsbPortManager $r6, $r10, $r33, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r43, $r47, $r48, $r64, $r69, $r93, r94, $r100, r101, r111, r116, r120, r123, r127, r130;
        com.android.server.usb.UsbAlsaManager $r7;
        com.android.server.usb.UsbSettingsManager $r8;
        com.android.server.usb.UsbPermissionManager $r9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i14, i19, i22, i25;
        java.lang.String $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r44, $r45, $r46, $r50, $r52, $r53, $r55, $r57, $r58, $r60, $r62, $r63, $r66, $r68, $r71, $r73, $r75, $r77, r88, r89, r91, r97, r98, r104, r105, r107, r109, r115, r119, r126;
        java.lang.Boolean $r37;
        java.lang.Throwable $r78, $r79, $r80, $r81, $r82, r114;
        java.io.FileDescriptor r83;
        java.io.PrintWriter r84;
        java.lang.String[] r85;
        android.util.ArraySet r87;
        byte b12, b13, b15, b16, b17, b18, b20, b21, b23, b24, b26, b27;
        java.lang.StringBuilder r90, r92, r99, r106, r108, r110;
        android.util.proto.ProtoOutputStream r134;

        r0 := @this: com.android.server.usb.UsbService;

        r83 := @parameter0: java.io.FileDescriptor;

        r84 := @parameter1: java.io.PrintWriter;

        r85 := @parameter2: java.lang.String[];

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r1, "UsbService", r84);

        if $z0 != 0 goto label001;

        return;

     label001:
        $r2 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r84, "  ");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label002:
        r87 = new android.util.ArraySet;

        specialinvoke r87.<android.util.ArraySet: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r87, r85);

        z20 = virtualinvoke r87.<android.util.ArraySet: boolean contains(java.lang.Object)>("--proto");

     label003:
        if z20 == 0 goto label004;

        z21 = 1;

        goto label005;

     label004:
        z21 = 0;

     label005:
        if r85 == null goto label157;

     label006:
        $i1 = lengthof r85;

        if $i1 == 0 goto label157;

        $r13 = r85[0];

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("-a");

        if $z2 != 0 goto label157;

     label007:
        if z21 == 0 goto label008;

        goto label157;

     label008:
        $r15 = "set-port-roles";

        $r14 = r85[0];

        z22 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

     label009:
        if z22 == 0 goto label047;

     label010:
        $i10 = lengthof r85;

        if $i10 != 4 goto label047;

     label011:
        r88 = r85[1];

        r89 = r85[2];

     label012:
        i11 = virtualinvoke r89.<java.lang.String: int hashCode()>();

     label013:
        if i11 == -896505829 goto label019;

        if i11 == -440560135 goto label017;

        if i11 == 3530387 goto label015;

     label014:
        goto label021;

     label015:
        $z19 = virtualinvoke r89.<java.lang.String: boolean equals(java.lang.Object)>("sink");

        if $z19 == 0 goto label014;

     label016:
        b12 = 1;

        goto label022;

     label017:
        $z18 = virtualinvoke r89.<java.lang.String: boolean equals(java.lang.Object)>("no-power");

        if $z18 == 0 goto label014;

     label018:
        b12 = 2;

        goto label022;

     label019:
        $z14 = virtualinvoke r89.<java.lang.String: boolean equals(java.lang.Object)>("source");

        if $z14 == 0 goto label014;

     label020:
        b12 = 0;

        goto label022;

     label021:
        b12 = -1;

     label022:
        if b12 == 0 goto label027;

        if b12 == 1 goto label026;

        if b12 == 2 goto label025;

     label023:
        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid power role: ");

        $r75 = r85[2];

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r77 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r77);

     label024:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label025:
        b13 = 0;

        goto label028;

     label026:
        b13 = 2;

        goto label028;

     label027:
        b13 = 1;

     label028:
        r91 = r85[3];

     label029:
        i14 = virtualinvoke r91.<java.lang.String: int hashCode()>();

     label030:
        if i14 == -1335157162 goto label036;

        if i14 == 3208616 goto label034;

        if i14 == 2063627318 goto label032;

     label031:
        goto label038;

     label032:
        $z17 = virtualinvoke r91.<java.lang.String: boolean equals(java.lang.Object)>("no-data");

        if $z17 == 0 goto label031;

     label033:
        b15 = 2;

        goto label039;

     label034:
        $z16 = virtualinvoke r91.<java.lang.String: boolean equals(java.lang.Object)>("host");

        if $z16 == 0 goto label031;

     label035:
        b15 = 0;

        goto label039;

     label036:
        $z15 = virtualinvoke r91.<java.lang.String: boolean equals(java.lang.Object)>("device");

        if $z15 == 0 goto label031;

     label037:
        b15 = 1;

        goto label039;

     label038:
        b15 = -1;

     label039:
        if b15 == 0 goto label044;

        if b15 == 1 goto label043;

        if b15 == 2 goto label042;

     label040:
        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid data role: ");

        $r71 = r85[3];

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r73);

     label041:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label042:
        b16 = 0;

        goto label045;

     label043:
        b16 = 2;

        goto label045;

     label044:
        b16 = 1;

     label045:
        $r93 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r93 == null goto label046;

        $r69 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r69.<com.android.server.usb.UsbPortManager: void setPortRoles(java.lang.String,int,int,com.android.internal.util.IndentingPrintWriter)>(r88, b13, b16, $r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r94 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r95 = new com.android.internal.util.dump.DualDumpOutputStream;

        r96 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r96.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r95.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r96);

        virtualinvoke r94.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r95, "", 0L);

     label046:
        goto label167;

     label047:
        $r17 = "add-port";

        $r16 = r85[0];

        z23 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

     label048:
        if z23 == 0 goto label071;

     label049:
        $i8 = lengthof r85;

        if $i8 != 3 goto label071;

     label050:
        r97 = r85[1];

        r98 = r85[2];

     label051:
        $i9 = virtualinvoke r98.<java.lang.String: int hashCode()>();

        lookupswitch($i9)
        {
            case 99374: goto label059;
            case 115711: goto label057;
            case 3094652: goto label055;
            case 3387192: goto label053;
            default: goto label052;
        };

     label052:
        goto label061;

     label053:
        $z10 = virtualinvoke r98.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z10 == 0 goto label052;

     label054:
        b17 = 3;

        goto label062;

     label055:
        $z11 = virtualinvoke r98.<java.lang.String: boolean equals(java.lang.Object)>("dual");

        if $z11 == 0 goto label052;

     label056:
        b17 = 2;

        goto label062;

     label057:
        $z12 = virtualinvoke r98.<java.lang.String: boolean equals(java.lang.Object)>("ufp");

        if $z12 == 0 goto label052;

     label058:
        b17 = 0;

        goto label062;

     label059:
        $z13 = virtualinvoke r98.<java.lang.String: boolean equals(java.lang.Object)>("dfp");

        if $z13 == 0 goto label052;

     label060:
        b17 = 1;

        goto label062;

     label061:
        b17 = -1;

     label062:
        if b17 == 0 goto label068;

        if b17 == 1 goto label067;

        if b17 == 2 goto label066;

        if b17 == 3 goto label065;

     label063:
        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mode: ");

        $r66 = r85[2];

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r68);

     label064:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label065:
        b18 = 0;

        goto label069;

     label066:
        b18 = 3;

        goto label069;

     label067:
        b18 = 2;

        goto label069;

     label068:
        b18 = 1;

     label069:
        $r100 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r100 == null goto label070;

        $r64 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r64.<com.android.server.usb.UsbPortManager: void addSimulatedPort(java.lang.String,int,com.android.internal.util.IndentingPrintWriter)>(r97, b18, $r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r101 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r102 = new com.android.internal.util.dump.DualDumpOutputStream;

        r103 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r103.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r102.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r103);

        virtualinvoke r101.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r102, "", 0L);

     label070:
        goto label167;

     label071:
        $r19 = "connect-port";

        $r18 = r85[0];

        z24 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

     label072:
        if z24 == 0 goto label133;

     label073:
        $i7 = lengthof r85;

        if $i7 != 5 goto label133;

     label074:
        r104 = r85[1];

     label075:
        $r44 = r85[2];

        z25 = virtualinvoke $r44.<java.lang.String: boolean endsWith(java.lang.String)>("?");

     label076:
        if z25 == 0 goto label079;

     label077:
        $r63 = r85[2];

        r105 = staticinvoke <com.android.server.usb.UsbService: java.lang.String removeLastChar(java.lang.String)>($r63);

     label078:
        goto label080;

     label079:
        r105 = r85[2];

     label080:
        i19 = virtualinvoke r105.<java.lang.String: int hashCode()>();

     label081:
        if i19 == 99374 goto label085;

        if i19 == 115711 goto label083;

     label082:
        goto label087;

     label083:
        z26 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>("ufp");

     label084:
        if z26 == 0 goto label082;

        b20 = 0;

        goto label088;

     label085:
        z27 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>("dfp");

     label086:
        if z27 == 0 goto label082;

        b20 = 1;

        goto label088;

     label087:
        b20 = -1;

     label088:
        if b20 == 0 goto label092;

        if b20 == 1 goto label091;

     label089:
        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mode: ");

        $r60 = r85[2];

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r62);

     label090:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label091:
        b21 = 2;

        goto label093;

     label092:
        b21 = 1;

     label093:
        $r45 = r85[3];

        z28 = virtualinvoke $r45.<java.lang.String: boolean endsWith(java.lang.String)>("?");

     label094:
        if z28 == 0 goto label097;

     label095:
        $r58 = r85[3];

        r107 = staticinvoke <com.android.server.usb.UsbService: java.lang.String removeLastChar(java.lang.String)>($r58);

     label096:
        goto label098;

     label097:
        r107 = r85[3];

     label098:
        i22 = virtualinvoke r107.<java.lang.String: int hashCode()>();

     label099:
        if i22 == -896505829 goto label103;

        if i22 == 3530387 goto label101;

     label100:
        goto label105;

     label101:
        z29 = virtualinvoke r107.<java.lang.String: boolean equals(java.lang.Object)>("sink");

     label102:
        if z29 == 0 goto label100;

        b23 = 1;

        goto label106;

     label103:
        z30 = virtualinvoke r107.<java.lang.String: boolean equals(java.lang.Object)>("source");

     label104:
        if z30 == 0 goto label100;

        b23 = 0;

        goto label106;

     label105:
        b23 = -1;

     label106:
        if b23 == 0 goto label110;

        if b23 == 1 goto label109;

     label107:
        r108 = new java.lang.StringBuilder;

        specialinvoke r108.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid power role: ");

        $r55 = r85[3];

        virtualinvoke r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r57);

     label108:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label109:
        b24 = 2;

        goto label111;

     label110:
        b24 = 1;

     label111:
        $r46 = r85[4];

        z31 = virtualinvoke $r46.<java.lang.String: boolean endsWith(java.lang.String)>("?");

     label112:
        if z31 == 0 goto label115;

     label113:
        $r53 = r85[4];

        r109 = staticinvoke <com.android.server.usb.UsbService: java.lang.String removeLastChar(java.lang.String)>($r53);

     label114:
        goto label116;

     label115:
        r109 = r85[4];

     label116:
        i25 = virtualinvoke r109.<java.lang.String: int hashCode()>();

     label117:
        if i25 == -1335157162 goto label121;

        if i25 == 3208616 goto label119;

     label118:
        goto label123;

     label119:
        z32 = virtualinvoke r109.<java.lang.String: boolean equals(java.lang.Object)>("host");

     label120:
        if z32 == 0 goto label118;

        b26 = 0;

        goto label124;

     label121:
        z33 = virtualinvoke r109.<java.lang.String: boolean equals(java.lang.Object)>("device");

     label122:
        if z33 == 0 goto label118;

        b26 = 1;

        goto label124;

     label123:
        b26 = -1;

     label124:
        if b26 == 0 goto label128;

        if b26 == 1 goto label127;

     label125:
        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid data role: ");

        $r50 = r85[4];

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r52);

     label126:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label127:
        b27 = 2;

        goto label129;

     label128:
        b27 = 1;

     label129:
        $r47 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r47 == null goto label131;

        $r48 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r48.<com.android.server.usb.UsbPortManager: void connectSimulatedPort(java.lang.String,int,boolean,int,boolean,int,boolean,com.android.internal.util.IndentingPrintWriter)>(r104, b21, z25, b24, z28, b27, z31, $r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r111 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r112 = new com.android.internal.util.dump.DualDumpOutputStream;

        r113 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r113.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r112.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r113);

        virtualinvoke r111.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r112, "", 0L);

     label130:
        goto label131;

     label131:
        goto label167;

     label132:
        $r82 := @caughtexception;

        r114 = $r82;

        goto label170;

     label133:
        $r21 = "disconnect-port";

        $r20 = r85[0];

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z3 == 0 goto label137;

        $i6 = lengthof r85;

        if $i6 != 2 goto label137;

     label134:
        r115 = r85[1];

     label135:
        $r42 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r42 == null goto label136;

        $r43 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r43.<com.android.server.usb.UsbPortManager: void disconnectSimulatedPort(java.lang.String,com.android.internal.util.IndentingPrintWriter)>(r115, $r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r116 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r117 = new com.android.internal.util.dump.DualDumpOutputStream;

        r118 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r118.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r117.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r118);

        virtualinvoke r116.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r117, "", 0L);

     label136:
        goto label167;

     label137:
        $r23 = "remove-port";

        $r22 = r85[0];

        $z4 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z4 == 0 goto label141;

        $i5 = lengthof r85;

        if $i5 != 2 goto label141;

     label138:
        r119 = r85[1];

     label139:
        $r40 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r40 == null goto label140;

        $r41 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r41.<com.android.server.usb.UsbPortManager: void removeSimulatedPort(java.lang.String,com.android.internal.util.IndentingPrintWriter)>(r119, $r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r120 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r121 = new com.android.internal.util.dump.DualDumpOutputStream;

        r122 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r122.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r121.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r122);

        virtualinvoke r120.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r121, "", 0L);

     label140:
        goto label167;

     label141:
        $r25 = "reset";

        $r24 = r85[0];

        $z5 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z5 == 0 goto label144;

        $i4 = lengthof r85;

        if $i4 != 1 goto label144;

        $r38 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r38 == null goto label143;

        $r39 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r39.<com.android.server.usb.UsbPortManager: void resetSimulation(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r123 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r124 = new com.android.internal.util.dump.DualDumpOutputStream;

        r125 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r125.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r124.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r125);

        virtualinvoke r123.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r124, "", 0L);

     label142:
        goto label167;

     label143:
        goto label167;

     label144:
        $r27 = "set-contaminant-status";

        $r26 = r85[0];

        $z6 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z6 == 0 goto label148;

        $i3 = lengthof r85;

        if $i3 != 3 goto label148;

     label145:
        r126 = r85[1];

     label146:
        $r34 = r85[2];

        z34 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r34);

        $r35 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r35 == null goto label147;

        $r36 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z34);

        $z9 = virtualinvoke $r37.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r36.<com.android.server.usb.UsbPortManager: void simulateContaminantStatus(java.lang.String,boolean,com.android.internal.util.IndentingPrintWriter)>(r126, $z9, $r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r127 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r128 = new com.android.internal.util.dump.DualDumpOutputStream;

        r129 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r129.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r128.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r129);

        virtualinvoke r127.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r128, "", 0L);

     label147:
        goto label167;

     label148:
        $r29 = "ports";

        $r28 = r85[0];

        $z7 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z7 == 0 goto label151;

        $i2 = lengthof r85;

        if $i2 != 1 goto label151;

        $r33 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r33 == null goto label150;

        r130 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r131 = new com.android.internal.util.dump.DualDumpOutputStream;

        r132 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r132.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        specialinvoke r131.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r132);

        virtualinvoke r130.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r131, "", 0L);

     label149:
        goto label167;

     label150:
        goto label167;

     label151:
        $r31 = "dump-descriptors";

        $r30 = r85[0];

        $z8 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z8 == 0 goto label153;

        $r32 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r32.<com.android.server.usb.UsbHostManager: void dumpDescriptors(com.android.internal.util.IndentingPrintWriter,java.lang.String[])>($r2, r85);

     label152:
        goto label167;

     label153:
        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Dump current USB state or issue command:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  ports");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  set-port-roles <id> <source|sink|no-power> <host|device|no-data>");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  add-port <id> <ufp|dfp|dual|none>");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  connect-port <id> <ufp|dfp><?> <source|sink><?> <host|device><?>");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("    (add ? suffix if mode, power role, or data role can be changed)");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  disconnect-port <id>");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  remove-port <id>");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  reset");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example USB type C port role switch:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb set-port-roles \"default\" source device");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example USB type C port simulation with full capabilities:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb add-port \"matrix\" dual");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb connect-port \"matrix\" ufp? sink? device?");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb ports");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb disconnect-port \"matrix\"");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb remove-port \"matrix\"");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb reset");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example USB type C port where only power role can be changed:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb add-port \"matrix\" dual");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb connect-port \"matrix\" dfp source? host");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb reset");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example USB OTG port where id pin determines function:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb add-port \"matrix\" dual");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb connect-port \"matrix\" dfp source host");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb reset");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example USB device-only port:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb add-port \"matrix\" ufp");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb connect-port \"matrix\" ufp sink device");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb reset");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example simulate contaminant status:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb add-port \"matrix\" ufp");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb set-contaminant-status \"matrix\" true");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb set-contaminant-status \"matrix\" false");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Example USB device descriptors:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb dump-descriptors -dump-short");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb dump-descriptors -dump-tree");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb dump-descriptors -dump-list");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  dumpsys usb dump-descriptors -dump-raw");

     label154:
        goto label167;

     label155:
        $r78 := @caughtexception;

        r114 = $r78;

     label156:
        goto label170;

     label157:
        if z21 == 0 goto label162;

     label158:
        r133 = new com.android.internal.util.dump.DualDumpOutputStream;

        r134 = new android.util.proto.ProtoOutputStream;

     label159:
        specialinvoke r134.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r83);

        specialinvoke r133.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(android.util.proto.ProtoOutputStream)>(r134);

     label160:
        r135 = r133;

        goto label163;

     label161:
        $r81 := @caughtexception;

        r114 = $r81;

        goto label156;

     label162:
        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("USB MANAGER STATE (dumpsys usb):");

        r136 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r136.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "  ");

        $r3 = new com.android.internal.util.dump.DualDumpOutputStream;

        specialinvoke $r3.<com.android.internal.util.dump.DualDumpOutputStream: void <init>(com.android.internal.util.IndentingPrintWriter)>(r136);

        r135 = $r3;

     label163:
        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r4 == null goto label164;

        $r12 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r12.<com.android.server.usb.UsbDeviceManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r135, "device_manager", 1146756268033L);

     label164:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r5 == null goto label165;

        $r11 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r11.<com.android.server.usb.UsbHostManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r135, "host_manager", 1146756268034L);

     label165:
        $r6 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r6 == null goto label166;

        $r10 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r10.<com.android.server.usb.UsbPortManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r135, "port_manager", 1146756268035L);

     label166:
        $r7 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbAlsaManager mAlsaManager>;

        virtualinvoke $r7.<com.android.server.usb.UsbAlsaManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r135, "alsa_manager", 1146756268036L);

        $r8 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        virtualinvoke $r8.<com.android.server.usb.UsbSettingsManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r135, "settings_manager", 1146756268037L);

        $r9 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        virtualinvoke $r9.<com.android.server.usb.UsbPermissionManager: void dump(com.android.internal.util.dump.DualDumpOutputStream,java.lang.String,long)>(r135, "permissions_manager", 1146756268038L);

        virtualinvoke r135.<com.android.internal.util.dump.DualDumpOutputStream: void flush()>();

     label167:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label168:
        $r80 := @caughtexception;

        r114 = $r80;

        goto label170;

     label169:
        $r79 := @caughtexception;

        r114 = $r79;

     label170:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r114;

        catch java.lang.Throwable from label002 to label003 with label169;
        catch java.lang.Throwable from label006 to label007 with label155;
        catch java.lang.Throwable from label008 to label009 with label155;
        catch java.lang.Throwable from label010 to label011 with label169;
        catch java.lang.Throwable from label012 to label013 with label169;
        catch java.lang.Throwable from label015 to label016 with label169;
        catch java.lang.Throwable from label017 to label018 with label169;
        catch java.lang.Throwable from label019 to label020 with label169;
        catch java.lang.Throwable from label023 to label024 with label169;
        catch java.lang.Throwable from label029 to label030 with label169;
        catch java.lang.Throwable from label032 to label033 with label169;
        catch java.lang.Throwable from label034 to label035 with label169;
        catch java.lang.Throwable from label036 to label037 with label169;
        catch java.lang.Throwable from label040 to label041 with label169;
        catch java.lang.Throwable from label045 to label046 with label169;
        catch java.lang.Throwable from label047 to label048 with label155;
        catch java.lang.Throwable from label049 to label050 with label169;
        catch java.lang.Throwable from label051 to label052 with label169;
        catch java.lang.Throwable from label053 to label054 with label169;
        catch java.lang.Throwable from label055 to label056 with label169;
        catch java.lang.Throwable from label057 to label058 with label169;
        catch java.lang.Throwable from label059 to label060 with label169;
        catch java.lang.Throwable from label063 to label064 with label169;
        catch java.lang.Throwable from label069 to label070 with label169;
        catch java.lang.Throwable from label071 to label072 with label155;
        catch java.lang.Throwable from label073 to label074 with label132;
        catch java.lang.Throwable from label075 to label076 with label132;
        catch java.lang.Throwable from label077 to label078 with label169;
        catch java.lang.Throwable from label080 to label081 with label132;
        catch java.lang.Throwable from label083 to label084 with label169;
        catch java.lang.Throwable from label085 to label086 with label132;
        catch java.lang.Throwable from label089 to label090 with label169;
        catch java.lang.Throwable from label093 to label094 with label132;
        catch java.lang.Throwable from label095 to label096 with label169;
        catch java.lang.Throwable from label098 to label099 with label132;
        catch java.lang.Throwable from label101 to label102 with label169;
        catch java.lang.Throwable from label103 to label104 with label132;
        catch java.lang.Throwable from label107 to label108 with label169;
        catch java.lang.Throwable from label111 to label112 with label132;
        catch java.lang.Throwable from label113 to label114 with label169;
        catch java.lang.Throwable from label116 to label117 with label132;
        catch java.lang.Throwable from label119 to label120 with label169;
        catch java.lang.Throwable from label121 to label122 with label132;
        catch java.lang.Throwable from label125 to label126 with label169;
        catch java.lang.Throwable from label129 to label130 with label132;
        catch java.lang.Throwable from label133 to label134 with label161;
        catch java.lang.Throwable from label135 to label136 with label161;
        catch java.lang.Throwable from label137 to label138 with label161;
        catch java.lang.Throwable from label139 to label140 with label161;
        catch java.lang.Throwable from label141 to label142 with label161;
        catch java.lang.Throwable from label144 to label145 with label161;
        catch java.lang.Throwable from label146 to label147 with label161;
        catch java.lang.Throwable from label148 to label149 with label161;
        catch java.lang.Throwable from label151 to label152 with label161;
        catch java.lang.Throwable from label153 to label154 with label161;
        catch java.lang.Throwable from label158 to label159 with label161;
        catch java.lang.Throwable from label159 to label160 with label168;
        catch java.lang.Throwable from label162 to label163 with label168;
        catch java.lang.Throwable from label163 to label164 with label168;
        catch java.lang.Throwable from label164 to label165 with label168;
        catch java.lang.Throwable from label165 to label166 with label168;
        catch java.lang.Throwable from label166 to label167 with label168;
    }

    public void enableContaminantDetection(java.lang.String, boolean)
    {
        com.android.server.usb.UsbService r0;
        boolean z0;
        long l0;
        android.content.Context $r2;
        com.android.server.usb.UsbPortManager $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.usb.UsbService;

        r6 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "portId must not be null");

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r4.<com.android.server.usb.UsbPortManager: void enableContaminantDetection(java.lang.String,boolean,com.android.internal.util.IndentingPrintWriter)>(r6, z0, null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.os.ParcelFileDescriptor getControlFd(long)
    {
        com.android.server.usb.UsbService r0;
        long l0;
        android.content.Context $r1;
        com.android.server.usb.UsbDeviceManager $r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: com.android.server.usb.UsbService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_MTP", null);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        $r3 = virtualinvoke $r2.<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor getControlFd(long)>(l0);

        return $r3;
    }

    public android.hardware.usb.UsbAccessory getCurrentAccessory()
    {
        com.android.server.usb.UsbService r0;
        com.android.server.usb.UsbDeviceManager r1;
        android.hardware.usb.UsbAccessory $r2;

        r0 := @this: com.android.server.usb.UsbService;

        r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        return $r2;

     label1:
        return null;
    }

    public long getCurrentFunctions()
    {
        com.android.server.usb.UsbService r0;
        android.content.Context $r1;
        com.android.server.usb.UsbDeviceManager $r2, $r3;
        long $l0;
        boolean z0;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>(z0);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        $l0 = virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager: long getCurrentFunctions()>();

        return $l0;
    }

    public void getDeviceList(android.os.Bundle)
    {
        com.android.server.usb.UsbService r0;
        android.os.Bundle r1;
        com.android.server.usb.UsbHostManager r2;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: android.os.Bundle;

        r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.usb.UsbHostManager: void getDeviceList(android.os.Bundle)>(r1);

     label1:
        return;
    }

    com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        com.android.server.usb.UsbPermissionManager $r1;
        com.android.server.usb.UsbUserPermissionManager $r2;

        r0 := @this: com.android.server.usb.UsbService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        $r2 = virtualinvoke $r1.<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i0);

        return $r2;
    }

    public android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        android.content.Context r1;
        long l0;
        com.android.server.usb.UsbPortManager $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        android.hardware.usb.UsbPortStatus r7;

        r0 := @this: com.android.server.usb.UsbService;

        r6 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "portId must not be null");

        r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        r7 = null;

        virtualinvoke r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r7 = virtualinvoke $r4.<com.android.server.usb.UsbPortManager: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>(r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r7;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getPorts()
    {
        com.android.server.usb.UsbService r0;
        long l0;
        android.hardware.usb.UsbPort[] r1;
        int i1, i2;
        android.content.Context $r2;
        com.android.server.usb.UsbPortManager $r3, r7;
        android.hardware.usb.UsbPort $r4;
        android.hardware.usb.ParcelableUsbPort $r5;
        java.lang.Throwable $r6;
        java.util.ArrayList r8;

        r0 := @this: com.android.server.usb.UsbService;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r7 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

     label2:
        if r7 != null goto label3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label3:
        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        r1 = virtualinvoke $r3.<com.android.server.usb.UsbPortManager: android.hardware.usb.UsbPort[] getPorts()>();

        i1 = lengthof r1;

        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

     label4:
        i2 = 0;

     label5:
        if i2 >= i1 goto label8;

     label6:
        $r4 = r1[i2];

        $r5 = staticinvoke <android.hardware.usb.ParcelableUsbPort: android.hardware.usb.ParcelableUsbPort of(android.hardware.usb.UsbPort)>($r4);

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label7:
        i2 = i2 + 1;

        goto label5;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r8;

     label9:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public long getScreenUnlockedFunctions()
    {
        com.android.server.usb.UsbService r0;
        android.content.Context $r1;
        com.android.server.usb.UsbDeviceManager $r2, $r3;
        long $l0;
        boolean z0;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>(z0);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        $l0 = virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager: long getScreenUnlockedFunctions()>();

        return $l0;
    }

    com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        com.android.server.usb.UsbSettingsManager $r1;
        com.android.server.usb.UsbUserSettingsManager $r2;

        r0 := @this: com.android.server.usb.UsbService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r2 = virtualinvoke $r1.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)>(i0);

        return $r2;
    }

    public void grantAccessoryPermission(android.hardware.usb.UsbAccessory, int)
    {
        com.android.server.usb.UsbService r0;
        int i0, i1;
        long l2;
        android.content.Context $r1;
        com.android.server.usb.UsbUserPermissionManager $r2;
        java.lang.Throwable $r3;
        android.hardware.usb.UsbAccessory r4;

        r0 := @this: com.android.server.usb.UsbService;

        r4 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i1);

        virtualinvoke $r2.<com.android.server.usb.UsbUserPermissionManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>(r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void grantDevicePermission(android.hardware.usb.UsbDevice, int)
    {
        com.android.server.usb.UsbService r0;
        int i0, i1;
        long l2;
        android.content.Context $r1;
        com.android.server.usb.UsbUserPermissionManager $r2;
        java.lang.Throwable $r3;
        android.hardware.usb.UsbDevice r4;

        r0 := @this: com.android.server.usb.UsbService;

        r4 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i1);

        virtualinvoke $r2.<com.android.server.usb.UsbUserPermissionManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>(r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbService r0;
        int i0, i1;
        long l2;
        boolean z0;
        com.android.server.usb.UsbUserPermissionManager $r1;
        java.lang.Throwable $r2;
        android.hardware.usb.UsbAccessory r3;

        r0 := @this: com.android.server.usb.UsbService;

        r3 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i1);

        z0 = virtualinvoke $r1.<com.android.server.usb.UsbUserPermissionManager: boolean hasPermission(android.hardware.usb.UsbAccessory,int)>(r3, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean hasDefaults(java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        java.lang.String r1, r7;
        long l1;
        boolean z0;
        java.lang.CharSequence $r2;
        android.content.Context $r3;
        com.android.server.usb.UsbSettingsManager $r4;
        com.android.server.usb.UsbProfileGroupSettingsManager $r5;
        java.lang.Throwable $r6;
        android.os.UserHandle r8;

        r0 := @this: com.android.server.usb.UsbService;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r7);

        r1 = (java.lang.String) $r2;

        $r3 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r5 = virtualinvoke $r4.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r8);

        z0 = virtualinvoke $r5.<com.android.server.usb.UsbProfileGroupSettingsManager: boolean hasDefaults(java.lang.String,android.os.UserHandle)>(r1, r8);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean hasDevicePermission(android.hardware.usb.UsbDevice, java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        int i0, i1, i2;
        long l3;
        boolean z0;
        com.android.server.usb.UsbUserPermissionManager $r2;
        java.lang.Throwable $r3;
        android.hardware.usb.UsbDevice r4;

        r0 := @this: com.android.server.usb.UsbService;

        r4 := @parameter0: android.hardware.usb.UsbDevice;

        r1 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i2);

        z0 = virtualinvoke $r2.<com.android.server.usb.UsbUserPermissionManager: boolean hasPermission(android.hardware.usb.UsbDevice,java.lang.String,int,int)>(r4, r1, i1, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isFunctionEnabled(java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        long $l0, $l1, $l2;
        byte $b3;
        boolean z0;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        $l0 = virtualinvoke r0.<com.android.server.usb.UsbService: long getCurrentFunctions()>();

        $l1 = staticinvoke <android.hardware.usb.UsbManager: long usbFunctionsFromString(java.lang.String)>(r1);

        $l2 = $l0 & $l1;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void onUnlockUser(int)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        com.android.server.usb.UsbDeviceManager r1;

        r0 := @this: com.android.server.usb.UsbService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.usb.UsbDeviceManager: void onUnlockUser(int)>(i0);

     label1:
        return;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbService r0;
        int i0, i1, $i3;
        long l2;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        com.android.server.usb.UsbDeviceManager $r3, $r11;
        android.os.UserManager $r4;
        boolean $z0;
        java.lang.String $r10;
        com.android.server.usb.UsbUserPermissionManager $r12;
        java.lang.Throwable $r13, $r14;
        android.hardware.usb.UsbAccessory r15;
        android.os.ParcelFileDescriptor r16;

        r0 := @this: com.android.server.usb.UsbService;

        r15 := @parameter0: android.hardware.usb.UsbAccessory;

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r3 == null goto label10;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l2 = staticinvoke <com.android.server.usb.UsbService: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.usb.UsbService: android.os.UserManager mUserManager>;

        $i3 = r0.<com.android.server.usb.UsbService: int mCurrentUserId>;

        $z0 = virtualinvoke $r4.<android.os.UserManager: boolean isSameProfileGroup(int,int)>(i1, $i3);

        if $z0 == 0 goto label04;

        $r11 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        $r12 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i1);

        r16 = virtualinvoke $r11.<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory,com.android.server.usb.UsbUserPermissionManager,int)>(r15, $r12, i0);

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.usb.UsbService: void restoreCallingIdentity(long)>(l2);

        return r16;

     label04:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot open ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as user is not active.");

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("UsbService", $r10);

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.usb.UsbService: void restoreCallingIdentity(long)>(l2);

        goto label10;

     label06:
        $r13 := @caughtexception;

     label07:
        exitmonitor r1;

     label08:
        throw $r13;

     label09:
        $r14 := @caughtexception;

        staticinvoke <com.android.server.usb.UsbService: void restoreCallingIdentity(long)>(l2);

        throw $r14;

     label10:
        return null;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label09;
    }

    public android.os.ParcelFileDescriptor openDevice(java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbService r0;
        int i0, i1, i2, $i4;
        long l3;
        com.android.server.usb.UsbHostManager $r1, $r4;
        android.os.UserManager $r2;
        boolean $z0;
        java.lang.String $r3, r8, r9;
        com.android.server.usb.UsbUserPermissionManager $r5;
        java.lang.Throwable $r6, $r7;
        android.os.ParcelFileDescriptor r10, r12;
        java.lang.Object r11;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.usb.UsbService;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r10 = null;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r1 == null goto label12;

        r10 = null;

        if r8 == null goto label12;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l3 = staticinvoke <com.android.server.usb.UsbService: long clearCallingIdentity()>();

     label01:
        r11 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        entermonitor r11;

     label02:
        $r2 = r0.<com.android.server.usb.UsbService: android.os.UserManager mUserManager>;

        $i4 = r0.<com.android.server.usb.UsbService: int mCurrentUserId>;

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean isSameProfileGroup(int,int)>(i2, $i4);

        if $z0 == 0 goto label04;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        $r5 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i2);

        r12 = virtualinvoke $r4.<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor openDevice(java.lang.String,com.android.server.usb.UsbUserPermissionManager,java.lang.String,int,int)>(r8, $r5, r9, i1, i0);

     label03:
        goto label06;

     label04:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot open ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as user is not active.");

        $r3 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("UsbService", $r3);

     label05:
        r12 = null;

     label06:
        exitmonitor r11;

     label07:
        staticinvoke <com.android.server.usb.UsbService: void restoreCallingIdentity(long)>(l3);

        r10 = r12;

        goto label12;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r11;

     label10:
        throw $r6;

     label11:
        $r7 := @caughtexception;

        staticinvoke <com.android.server.usb.UsbService: void restoreCallingIdentity(long)>(l3);

        throw $r7;

     label12:
        return r10;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory, java.lang.String[], android.os.UserHandle)
    {
        com.android.server.usb.UsbService r0;
        android.os.UserHandle r1;
        long l0;
        java.lang.Object[] $r3;
        android.content.Context $r5;
        com.android.server.usb.UsbSettingsManager $r6;
        com.android.server.usb.UsbProfileGroupSettingsManager $r7;
        java.lang.Throwable $r8;
        android.hardware.usb.UsbAccessory r9;
        java.lang.String[] r10, r11;

        r0 := @this: com.android.server.usb.UsbService;

        r9 := @parameter0: android.hardware.usb.UsbAccessory;

        r10 := @parameter1: java.lang.String[];

        r1 := @parameter2: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r10, "packageNames");

        r11 = (java.lang.String[]) $r3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r7 = virtualinvoke $r6.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r1);

        virtualinvoke $r7.<com.android.server.usb.UsbProfileGroupSettingsManager: void removeAccessoryPackagesFromDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>(r9, r11, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice, java.lang.String[], android.os.UserHandle)
    {
        com.android.server.usb.UsbService r0;
        android.os.UserHandle r1;
        long l0;
        java.lang.Object[] $r3;
        android.content.Context $r5;
        com.android.server.usb.UsbSettingsManager $r6;
        com.android.server.usb.UsbProfileGroupSettingsManager $r7;
        java.lang.Throwable $r8;
        android.hardware.usb.UsbDevice r9;
        java.lang.String[] r10, r11;

        r0 := @this: com.android.server.usb.UsbService;

        r9 := @parameter0: android.hardware.usb.UsbDevice;

        r10 := @parameter1: java.lang.String[];

        r1 := @parameter2: android.os.UserHandle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r9);

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[],java.lang.String)>(r10, "packageNames");

        r11 = (java.lang.String[]) $r3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r7 = virtualinvoke $r6.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r1);

        virtualinvoke $r7.<com.android.server.usb.UsbProfileGroupSettingsManager: void removeDevicePackagesFromDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>(r9, r11, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void requestAccessoryPermission(android.hardware.usb.UsbAccessory, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        android.app.PendingIntent r2;
        int i0, i1;
        long l2;
        com.android.server.usb.UsbUserPermissionManager $r3;
        java.lang.Throwable $r4;
        android.hardware.usb.UsbAccessory r5;

        r0 := @this: com.android.server.usb.UsbService;

        r5 := @parameter0: android.hardware.usb.UsbAccessory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.app.PendingIntent;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i1);

        virtualinvoke $r3.<com.android.server.usb.UsbUserPermissionManager: void requestPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent,int)>(r5, r1, r2, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void requestDevicePermission(android.hardware.usb.UsbDevice, java.lang.String, android.app.PendingIntent)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        android.app.PendingIntent r2;
        int i0, i1, i2;
        long l3;
        com.android.server.usb.UsbUserPermissionManager $r3;
        java.lang.Throwable $r4;
        android.hardware.usb.UsbDevice r5;

        r0 := @this: com.android.server.usb.UsbService;

        r5 := @parameter0: android.hardware.usb.UsbDevice;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.app.PendingIntent;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = virtualinvoke r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>(i2);

        virtualinvoke $r3.<com.android.server.usb.UsbUserPermissionManager: void requestPermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent,int,int)>(r5, r1, r2, i1, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void resetUsbGadget()
    {
        com.android.server.usb.UsbService r0;
        long l0;
        android.content.Context $r2;
        com.android.server.usb.UsbDeviceManager $r3, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.usb.UsbService;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "DeviceManager must not be null");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r5.<com.android.server.usb.UsbDeviceManager: void resetUsbGadget()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setAccessoryPackage(android.hardware.usb.UsbAccessory, java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        int i0;
        android.os.UserHandle r2;
        long l1;
        android.content.Context $r4;
        com.android.server.usb.UsbSettingsManager $r5;
        com.android.server.usb.UsbProfileGroupSettingsManager $r6;
        java.lang.Throwable $r7;
        android.hardware.usb.UsbAccessory r8;

        r0 := @this: com.android.server.usb.UsbService;

        r8 := @parameter0: android.hardware.usb.UsbAccessory;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        $r4 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r6 = virtualinvoke $r5.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r2);

        virtualinvoke $r6.<com.android.server.usb.UsbProfileGroupSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,android.os.UserHandle)>(r8, r1, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory, int, android.os.UserHandle, boolean)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        android.os.UserHandle r1;
        boolean z0;
        long l1;
        android.content.Context $r4;
        com.android.server.usb.UsbPermissionManager $r5;
        com.android.server.usb.UsbUserPermissionManager $r6;
        java.lang.Throwable $r7;
        android.hardware.usb.UsbAccessory r8;

        r0 := @this: com.android.server.usb.UsbService;

        r8 := @parameter0: android.hardware.usb.UsbAccessory;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.UserHandle;

        z0 := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        $r6 = virtualinvoke $r5.<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(android.os.UserHandle)>(r1);

        virtualinvoke $r6.<com.android.server.usb.UsbUserPermissionManager: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,boolean)>(r8, i0, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setCurrentFunction(java.lang.String, boolean)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        boolean z0;
        long $l0;

        r0 := @this: com.android.server.usb.UsbService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $l0 = staticinvoke <android.hardware.usb.UsbManager: long usbFunctionsFromString(java.lang.String)>(r1);

        virtualinvoke r0.<com.android.server.usb.UsbService: void setCurrentFunctions(long)>($l0);

        return;
    }

    public void setCurrentFunctions(long)
    {
        com.android.server.usb.UsbService r0;
        long l0;
        android.content.Context $r1;
        boolean $z0, z1;
        com.android.server.usb.UsbDeviceManager $r2, $r3;

        r0 := @this: com.android.server.usb.UsbService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $z0 = staticinvoke <android.hardware.usb.UsbManager: boolean areSettableFunctions(long)>(l0);

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>($z0);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r2 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>(z1);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(long)>(l0);

        return;
    }

    public void setDevicePackage(android.hardware.usb.UsbDevice, java.lang.String, int)
    {
        com.android.server.usb.UsbService r0;
        java.lang.String r1;
        int i0;
        android.os.UserHandle r2;
        long l1;
        android.content.Context $r4;
        com.android.server.usb.UsbSettingsManager $r5;
        com.android.server.usb.UsbProfileGroupSettingsManager $r6;
        java.lang.Throwable $r7;
        android.hardware.usb.UsbDevice r8;

        r0 := @this: com.android.server.usb.UsbService;

        r8 := @parameter0: android.hardware.usb.UsbDevice;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        $r4 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbSettingsManager mSettingsManager>;

        $r6 = virtualinvoke $r5.<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>(r2);

        virtualinvoke $r6.<com.android.server.usb.UsbProfileGroupSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,android.os.UserHandle)>(r8, r1, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDevicePersistentPermission(android.hardware.usb.UsbDevice, int, android.os.UserHandle, boolean)
    {
        com.android.server.usb.UsbService r0;
        int i0;
        android.os.UserHandle r1;
        boolean z0;
        long l1;
        android.content.Context $r4;
        com.android.server.usb.UsbPermissionManager $r5;
        com.android.server.usb.UsbUserPermissionManager $r6;
        java.lang.Throwable $r7;
        android.hardware.usb.UsbDevice r8;

        r0 := @this: com.android.server.usb.UsbService;

        r8 := @parameter0: android.hardware.usb.UsbDevice;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.UserHandle;

        z0 := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPermissionManager mPermissionManager>;

        $r6 = virtualinvoke $r5.<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(android.os.UserHandle)>(r1);

        virtualinvoke $r6.<com.android.server.usb.UsbUserPermissionManager: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,boolean)>(r8, i0, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setPortRoles(java.lang.String, int, int)
    {
        com.android.server.usb.UsbService r0;
        int i0, i1;
        long l2;
        android.content.Context $r2;
        com.android.server.usb.UsbPortManager $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.usb.UsbService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "portId must not be null");

        staticinvoke <android.hardware.usb.UsbPort: void checkRoles(int,int)>(i0, i1);

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        virtualinvoke $r4.<com.android.server.usb.UsbPortManager: void setPortRoles(java.lang.String,int,int,com.android.internal.util.IndentingPrintWriter)>(r6, i0, i1, null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setScreenUnlockedFunctions(long)
    {
        com.android.server.usb.UsbService r0;
        long l0;
        android.content.Context $r1;
        boolean $z0, z1;
        com.android.server.usb.UsbDeviceManager $r2, $r3;

        r0 := @this: com.android.server.usb.UsbService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        $z0 = staticinvoke <android.hardware.usb.UsbManager: boolean areSettableFunctions(long)>(l0);

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>($z0);

        $r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if $r2 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>(z1);

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbDeviceManager: void setScreenUnlockedFunctions(long)>(l0);

        return;
    }

    public void setUsbDeviceConnectionHandler(android.content.ComponentName)
    {
        com.android.server.usb.UsbService r0;
        java.lang.Object r1;
        android.content.Context $r2;
        int $i0, $i1;
        com.android.server.usb.UsbHostManager $r3, $r4;
        java.lang.Throwable $r5;
        android.content.ComponentName r6;
        java.lang.IllegalArgumentException r7;

        r0 := @this: com.android.server.usb.UsbService;

        r6 := @parameter0: android.content.ComponentName;

        $r2 = r0.<com.android.server.usb.UsbService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USB", null);

        r1 = r0.<com.android.server.usb.UsbService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.usb.UsbService: int mCurrentUserId>;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i0 != $i1 goto label4;

        $r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        virtualinvoke $r4.<com.android.server.usb.UsbHostManager: void setUsbDeviceConnectionHandler(android.content.ComponentName)>(r6);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only the current user can register a usb connection handler");

        throw r7;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbService r0;
        com.android.server.usb.UsbAlsaManager $r1;
        com.android.server.usb.UsbDeviceManager r2;
        com.android.server.usb.UsbHostManager r3;
        com.android.server.usb.UsbPortManager r4;

        r0 := @this: com.android.server.usb.UsbService;

        $r1 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbAlsaManager mAlsaManager>;

        virtualinvoke $r1.<com.android.server.usb.UsbAlsaManager: void systemReady()>();

        r2 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbDeviceManager mDeviceManager>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.usb.UsbDeviceManager: void systemReady()>();

     label1:
        r3 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbHostManager mHostManager>;

        if r3 == null goto label2;

        virtualinvoke r3.<com.android.server.usb.UsbHostManager: void systemReady()>();

     label2:
        r4 = r0.<com.android.server.usb.UsbService: com.android.server.usb.UsbPortManager mPortManager>;

        if r4 == null goto label3;

        virtualinvoke r4.<com.android.server.usb.UsbPortManager: void systemReady()>();

     label3:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.usb.UsbService: java.lang.String TAG> = "UsbService";

        return;
    }
}
