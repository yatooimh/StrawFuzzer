public abstract class com.android.server.usb.descriptors.UsbDescriptor extends java.lang.Object implements com.android.server.usb.descriptors.report.Reporting
{
    public static final int AUDIO_AUDIOCONTROL;
    public static final int AUDIO_AUDIOSTREAMING;
    public static final int AUDIO_MIDISTREAMING;
    public static final int AUDIO_SUBCLASS_UNDEFINED;
    public static final int CLASSID_APPSPECIFIC;
    public static final int CLASSID_AUDIO;
    public static final int CLASSID_AUDIOVIDEO;
    public static final int CLASSID_BILLBOARD;
    public static final int CLASSID_CDC_CONTROL;
    public static final int CLASSID_COM;
    public static final int CLASSID_DEVICE;
    public static final int CLASSID_DIAGNOSTIC;
    public static final int CLASSID_HEALTHCARE;
    public static final int CLASSID_HID;
    public static final int CLASSID_HUB;
    public static final int CLASSID_IMAGE;
    public static final int CLASSID_MISC;
    public static final int CLASSID_PHYSICAL;
    public static final int CLASSID_PRINTER;
    public static final int CLASSID_SECURITY;
    public static final int CLASSID_SMART_CARD;
    public static final int CLASSID_STORAGE;
    public static final int CLASSID_TYPECBRIDGE;
    public static final int CLASSID_VENDSPECIFIC;
    public static final int CLASSID_VIDEO;
    public static final int CLASSID_WIRELESS;
    public static final byte DESCRIPTORTYPE_BOS;
    public static final byte DESCRIPTORTYPE_CAPABILITY;
    public static final byte DESCRIPTORTYPE_CLASSSPECIFIC_ENDPOINT;
    public static final byte DESCRIPTORTYPE_CLASSSPECIFIC_INTERFACE;
    public static final byte DESCRIPTORTYPE_CONFIG;
    public static final byte DESCRIPTORTYPE_DEVICE;
    public static final byte DESCRIPTORTYPE_ENDPOINT;
    public static final byte DESCRIPTORTYPE_ENDPOINT_COMPANION;
    public static final byte DESCRIPTORTYPE_HID;
    public static final byte DESCRIPTORTYPE_HUB;
    public static final byte DESCRIPTORTYPE_INTERFACE;
    public static final byte DESCRIPTORTYPE_INTERFACEASSOC;
    public static final byte DESCRIPTORTYPE_PHYSICAL;
    public static final byte DESCRIPTORTYPE_REPORT;
    public static final byte DESCRIPTORTYPE_STRING;
    public static final byte DESCRIPTORTYPE_SUPERSPEED_HUB;
    public static final int REQUEST_CLEAR_FEATURE;
    public static final int REQUEST_GET_ADDRESS;
    public static final int REQUEST_GET_CONFIGURATION;
    public static final int REQUEST_GET_DESCRIPTOR;
    public static final int REQUEST_GET_STATUS;
    public static final int REQUEST_SET_CONFIGURATION;
    public static final int REQUEST_SET_DESCRIPTOR;
    public static final int REQUEST_SET_FEATURE;
    private static final int SIZE_STRINGBUFFER;
    public static final int STATUS_PARSED_OK;
    public static final int STATUS_PARSED_OVERRUN;
    public static final int STATUS_PARSED_UNDERRUN;
    public static final int STATUS_PARSE_EXCEPTION;
    public static final int STATUS_UNPARSED;
    private static final java.lang.String TAG;
    public static final int USB_CONTROL_TRANSFER_TIMEOUT_MS;
    private static java.lang.String[] sStatusStrings;
    private static byte[] sStringBuffer;
    protected int mHierarchyLevel;
    protected final int mLength;
    private int mOverUnderRunCount;
    private byte[] mRawData;
    private int mStatus;
    protected final byte mType;

    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String[] $r1;

        <com.android.server.usb.descriptors.UsbDescriptor: int USB_CONTROL_TRANSFER_TIMEOUT_MS> = 200;

        <com.android.server.usb.descriptors.UsbDescriptor: java.lang.String TAG> = "UsbDescriptor";

        <com.android.server.usb.descriptors.UsbDescriptor: int STATUS_UNPARSED> = 0;

        <com.android.server.usb.descriptors.UsbDescriptor: int STATUS_PARSE_EXCEPTION> = 4;

        <com.android.server.usb.descriptors.UsbDescriptor: int STATUS_PARSED_UNDERRUN> = 2;

        <com.android.server.usb.descriptors.UsbDescriptor: int STATUS_PARSED_OVERRUN> = 3;

        <com.android.server.usb.descriptors.UsbDescriptor: int STATUS_PARSED_OK> = 1;

        <com.android.server.usb.descriptors.UsbDescriptor: int SIZE_STRINGBUFFER> = 256;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_SET_FEATURE> = 3;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_SET_DESCRIPTOR> = 7;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_SET_CONFIGURATION> = 9;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_GET_STATUS> = 0;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_GET_DESCRIPTOR> = 6;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_GET_CONFIGURATION> = 8;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_GET_ADDRESS> = 5;

        <com.android.server.usb.descriptors.UsbDescriptor: int REQUEST_CLEAR_FEATURE> = 1;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_SUPERSPEED_HUB> = 42;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_STRING> = 3;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_REPORT> = 34;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_PHYSICAL> = 35;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_INTERFACEASSOC> = 11;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_INTERFACE> = 4;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_HUB> = 41;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_HID> = 33;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_ENDPOINT_COMPANION> = 48;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_ENDPOINT> = 5;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_DEVICE> = 1;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_CONFIG> = 2;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_CLASSSPECIFIC_INTERFACE> = 36;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_CLASSSPECIFIC_ENDPOINT> = 37;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_CAPABILITY> = 16;

        <com.android.server.usb.descriptors.UsbDescriptor: byte DESCRIPTORTYPE_BOS> = 15;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_WIRELESS> = 224;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_VIDEO> = 14;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_VENDSPECIFIC> = 255;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_TYPECBRIDGE> = 18;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_STORAGE> = 8;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_SMART_CARD> = 11;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_SECURITY> = 13;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_PRINTER> = 7;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_PHYSICAL> = 5;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_MISC> = 239;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_IMAGE> = 6;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_HUB> = 9;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_HID> = 3;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_HEALTHCARE> = 15;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_DIAGNOSTIC> = 220;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_DEVICE> = 0;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_COM> = 2;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_CDC_CONTROL> = 10;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_BILLBOARD> = 17;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_AUDIOVIDEO> = 16;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_AUDIO> = 1;

        <com.android.server.usb.descriptors.UsbDescriptor: int CLASSID_APPSPECIFIC> = 254;

        <com.android.server.usb.descriptors.UsbDescriptor: int AUDIO_SUBCLASS_UNDEFINED> = 0;

        <com.android.server.usb.descriptors.UsbDescriptor: int AUDIO_MIDISTREAMING> = 3;

        <com.android.server.usb.descriptors.UsbDescriptor: int AUDIO_AUDIOSTREAMING> = 2;

        <com.android.server.usb.descriptors.UsbDescriptor: int AUDIO_AUDIOCONTROL> = 1;

        $r0 = newarray (byte)[256];

        <com.android.server.usb.descriptors.UsbDescriptor: byte[] sStringBuffer> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "UNPARSED";

        $r1[1] = "PARSED - OK";

        $r1[2] = "PARSED - UNDERRUN";

        $r1[3] = "PARSED - OVERRUN";

        <com.android.server.usb.descriptors.UsbDescriptor: java.lang.String[] sStatusStrings> = $r1;

        return;
    }

    void <init>(int, byte)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int i0;
        byte b1, $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus> = 0;

        if i0 < 2 goto label1;

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength> = i0;

        $b2 = (byte) b1;

        r0.<com.android.server.usb.descriptors.UsbDescriptor: byte mType> = $b2;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    static java.lang.String getDescriptorName(byte, int)
    {
        byte b0;
        int i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r4, $r8, r9;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        r9 = staticinvoke <com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getDescriptorName(byte)>(b0);

        if r9 == null goto label1;

        return r9;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown Descriptor Type ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(b0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length:");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String getUsbDescriptorString(android.hardware.usb.UsbDeviceConnection, byte)
    {
        byte[] $r1, $r2;
        short $s0;
        int $i1, i4;
        java.lang.Exception $r3;
        android.hardware.usb.UsbDeviceConnection r4;
        byte b3;
        java.lang.String r5, r6;

        r4 := @parameter0: android.hardware.usb.UsbDeviceConnection;

        b3 := @parameter1: byte;

        r5 = "";

        if b3 == 0 goto label8;

     label1:
        $s0 = b3 | 768;

        $r1 = <com.android.server.usb.descriptors.UsbDescriptor: byte[] sStringBuffer>;

        i4 = virtualinvoke r4.<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>(128, 6, $s0, 0, $r1, 255, 200);

     label2:
        if i4 < 0 goto label5;

     label3:
        r6 = new java.lang.String;

        $r2 = <com.android.server.usb.descriptors.UsbDescriptor: byte[] sStringBuffer>;

        $i1 = i4 - 2;

        specialinvoke r6.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r2, 2, $i1, "UTF-16LE");

     label4:
        goto label6;

     label5:
        r6 = "?";

     label6:
        r5 = r6;

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbDescriptor", "Can not communicate with USB device", $r3);

        r5 = "";

     label8:
        return r5;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
    }

    static void logDescriptorName(byte, int)
    {
        byte b0;
        int i1;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        return;
    }

    private void reportParseStatus(com.android.server.usb.descriptors.report.ReportCanvas)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        com.android.server.usb.descriptors.report.ReportCanvas r1;
        int i0, $i1;
        java.lang.StringBuilder $r8;
        java.lang.String $r9, $r10;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        r1 := @parameter0: com.android.server.usb.descriptors.report.ReportCanvas;

        i0 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: int getStatus()>();

        if i0 == 0 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        goto label2;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("status: ");

        $r9 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: java.lang.String getStatusString()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $i1 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: int getOverUnderRunCount()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.usb.descriptors.report.ReportCanvas: void writeParagraph(java.lang.String,boolean)>($r10, 1);

     label2:
        return;
    }

    public int getLength()
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int $i0;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        $i0 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        return $i0;
    }

    public int getOverUnderRunCount()
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int $i0;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        $i0 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mOverUnderRunCount>;

        return $i0;
    }

    public byte[] getRawData()
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        byte[] $r1;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        $r1 = r0.<com.android.server.usb.descriptors.UsbDescriptor: byte[] mRawData>;

        return $r1;
    }

    public int getStatus()
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int $i0;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        $i0 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus>;

        return $i0;
    }

    public java.lang.String getStatusString()
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        $r1 = <com.android.server.usb.descriptors.UsbDescriptor: java.lang.String[] sStatusStrings>;

        $i0 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public byte getType()
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        byte $b0;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        $b0 = r0.<com.android.server.usb.descriptors.UsbDescriptor: byte mType>;

        return $b0;
    }

    public int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        com.android.server.usb.descriptors.ByteStream r1;
        int i0, $i1, $i2, i4, i5;
        byte[] $r2, $r3;
        byte $b3;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        r1 := @parameter0: com.android.server.usb.descriptors.ByteStream;

        i4 = virtualinvoke r1.<com.android.server.usb.descriptors.ByteStream: int getReadCount()>();

        $i1 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        i0 = $i1 - i4;

        if i0 <= 0 goto label2;

        $r2 = newarray (byte)[i0];

        r0.<com.android.server.usb.descriptors.UsbDescriptor: byte[] mRawData> = $r2;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r3 = r0.<com.android.server.usb.descriptors.UsbDescriptor: byte[] mRawData>;

        $b3 = virtualinvoke r1.<com.android.server.usb.descriptors.ByteStream: byte getByte()>();

        $r3[i5] = $b3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i2 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        return $i2;
    }

    public void postParse(com.android.server.usb.descriptors.ByteStream)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i8, $i9, $i10, $i12;
        java.lang.StringBuilder $r1, $r10;
        byte $b5, $b11;
        java.lang.String $r3, $r9, $r12, $r18;
        com.android.server.usb.descriptors.ByteStream r19;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        r19 := @parameter0: com.android.server.usb.descriptors.ByteStream;

        i0 = virtualinvoke r19.<com.android.server.usb.descriptors.ByteStream: int getReadCount()>();

        i1 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        if i0 >= i1 goto label1;

        $i8 = i1 - i0;

        virtualinvoke r19.<com.android.server.usb.descriptors.ByteStream: void advance(int)>($i8);

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus> = 2;

        $i9 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        $i10 = $i9 - i0;

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mOverUnderRunCount> = $i10;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNDERRUN t:0x");

        $b11 = r0.<com.android.server.usb.descriptors.UsbDescriptor: byte mType>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($b11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" r: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < l: ");

        $i12 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UsbDescriptor", $r18);

        goto label3;

     label1:
        if i0 <= i1 goto label2;

        $i2 = i0 - i1;

        virtualinvoke r19.<com.android.server.usb.descriptors.ByteStream: void reverse(int)>($i2);

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus> = 3;

        $i3 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        $i4 = i0 - $i3;

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mOverUnderRunCount> = $i4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OVERRRUN t:0x");

        $b5 = r0.<com.android.server.usb.descriptors.UsbDescriptor: byte mType>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($b5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" r: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > l: ");

        $i6 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mLength>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("UsbDescriptor", $r9);

        goto label3;

     label2:
        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus> = 1;

     label3:
        return;
    }

    public void report(com.android.server.usb.descriptors.report.ReportCanvas)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        com.android.server.usb.descriptors.report.ReportCanvas r1;
        int i0, $i3, $i4;
        byte $b1, $b2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r10, r11;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        r1 := @parameter0: com.android.server.usb.descriptors.report.ReportCanvas;

        $b1 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: byte getType()>();

        r10 = staticinvoke <com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getDescriptorName(byte)>($b1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $b2 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: byte getType()>();

        $r6 = staticinvoke <com.android.server.usb.descriptors.report.ReportCanvas: java.lang.String getHexString(byte)>($b2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Len: ");

        $i3 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: int getLength()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = r0.<com.android.server.usb.descriptors.UsbDescriptor: int mHierarchyLevel>;

        if i0 == 0 goto label1;

        virtualinvoke r1.<com.android.server.usb.descriptors.report.ReportCanvas: void writeHeader(int,java.lang.String)>(i0, r11);

        goto label2;

     label1:
        virtualinvoke r1.<com.android.server.usb.descriptors.report.ReportCanvas: void writeParagraph(java.lang.String,boolean)>(r11, 0);

     label2:
        $i4 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: int getStatus()>();

        if $i4 == 1 goto label3;

        specialinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: void reportParseStatus(com.android.server.usb.descriptors.report.ReportCanvas)>(r1);

     label3:
        return;
    }

    public void setStatus(int)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        int i0;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        i0 := @parameter0: int;

        r0.<com.android.server.usb.descriptors.UsbDescriptor: int mStatus> = i0;

        return;
    }

    public void shortReport(com.android.server.usb.descriptors.report.ReportCanvas)
    {
        com.android.server.usb.descriptors.UsbDescriptor r0;
        com.android.server.usb.descriptors.report.ReportCanvas r1;
        java.lang.String r2, $r7, $r11;
        byte $b0, $b1;
        java.lang.StringBuilder $r4;
        int $i2;

        r0 := @this: com.android.server.usb.descriptors.UsbDescriptor;

        r1 := @parameter0: com.android.server.usb.descriptors.report.ReportCanvas;

        $b0 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: byte getType()>();

        r2 = staticinvoke <com.android.server.usb.descriptors.report.UsbStrings: java.lang.String getDescriptorName(byte)>($b0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $b1 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: byte getType()>();

        $r7 = staticinvoke <com.android.server.usb.descriptors.report.ReportCanvas: java.lang.String getHexString(byte)>($b1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Len: ");

        $i2 = virtualinvoke r0.<com.android.server.usb.descriptors.UsbDescriptor: int getLength()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.usb.descriptors.report.ReportCanvas: void writeParagraph(java.lang.String,boolean)>($r11, 0);

        return;
    }
}
