class com.android.server.vr.Vr2dDisplay extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String DEBUG_ACTION_SET_MODE;
    private static final java.lang.String DEBUG_ACTION_SET_SURFACE;
    private static final java.lang.String DEBUG_EXTRA_MODE_ON;
    private static final java.lang.String DEBUG_EXTRA_SURFACE;
    public static final int DEFAULT_VIRTUAL_DISPLAY_DPI;
    public static final int DEFAULT_VIRTUAL_DISPLAY_HEIGHT;
    public static final int DEFAULT_VIRTUAL_DISPLAY_WIDTH;
    private static final java.lang.String DISPLAY_NAME;
    public static final int MIN_VR_DISPLAY_DPI;
    public static final int MIN_VR_DISPLAY_HEIGHT;
    public static final int MIN_VR_DISPLAY_WIDTH;
    private static final int STOP_VIRTUAL_DISPLAY_DELAY_MILLIS;
    private static final java.lang.String TAG;
    private static final java.lang.String UNIQUE_DISPLAY_ID;
    private final android.app.ActivityManagerInternal mActivityManagerInternal;
    private boolean mBootsToVr;
    private final android.hardware.display.DisplayManager mDisplayManager;
    private final android.os.Handler mHandler;
    private android.media.ImageReader mImageReader;
    private boolean mIsPersistentVrModeEnabled;
    private boolean mIsVirtualDisplayAllowed;
    private boolean mIsVrModeOverrideEnabled;
    private java.lang.Runnable mStopVDRunnable;
    private android.view.Surface mSurface;
    private final java.lang.Object mVdLock;
    private android.hardware.display.VirtualDisplay mVirtualDisplay;
    private int mVirtualDisplayDpi;
    private int mVirtualDisplayHeight;
    private int mVirtualDisplayWidth;
    private final android.service.vr.IVrManager mVrManager;
    private final android.service.vr.IPersistentVrStateCallbacks mVrStateCallbacks;
    private final com.android.server.wm.WindowManagerInternal mWindowManagerInternal;

    public void <init>(android.hardware.display.DisplayManager, android.app.ActivityManagerInternal, com.android.server.wm.WindowManagerInternal, android.service.vr.IVrManager)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.hardware.display.DisplayManager r1;
        android.app.ActivityManagerInternal r2;
        com.android.server.wm.WindowManagerInternal r3;
        android.service.vr.IVrManager r4;
        java.lang.Object $r5;
        android.os.Handler $r6;
        com.android.server.vr.Vr2dDisplay$1 $r7;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r1 := @parameter0: android.hardware.display.DisplayManager;

        r2 := @parameter1: android.app.ActivityManagerInternal;

        r3 := @parameter2: com.android.server.wm.WindowManagerInternal;

        r4 := @parameter3: android.service.vr.IVrManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.vr.Vr2dDisplay: java.lang.Object mVdLock> = $r5;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>()>();

        r0.<com.android.server.vr.Vr2dDisplay: android.os.Handler mHandler> = $r6;

        $r7 = new com.android.server.vr.Vr2dDisplay$1;

        specialinvoke $r7.<com.android.server.vr.Vr2dDisplay$1: void <init>(com.android.server.vr.Vr2dDisplay)>(r0);

        r0.<com.android.server.vr.Vr2dDisplay: android.service.vr.IPersistentVrStateCallbacks mVrStateCallbacks> = $r7;

        r0.<com.android.server.vr.Vr2dDisplay: boolean mIsVirtualDisplayAllowed> = 1;

        r0.<com.android.server.vr.Vr2dDisplay: boolean mBootsToVr> = 0;

        r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.DisplayManager mDisplayManager> = r1;

        r0.<com.android.server.vr.Vr2dDisplay: android.app.ActivityManagerInternal mActivityManagerInternal> = r2;

        r0.<com.android.server.vr.Vr2dDisplay: com.android.server.wm.WindowManagerInternal mWindowManagerInternal> = r3;

        r0.<com.android.server.vr.Vr2dDisplay: android.service.vr.IVrManager mVrManager> = r4;

        r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayWidth> = 1400;

        r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayHeight> = 1800;

        r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayDpi> = 320;

        return;
    }

    static boolean access$000(com.android.server.vr.Vr2dDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        $z0 = r0.<com.android.server.vr.Vr2dDisplay: boolean mIsPersistentVrModeEnabled>;

        return $z0;
    }

    static boolean access$002(com.android.server.vr.Vr2dDisplay, boolean)
    {
        com.android.server.vr.Vr2dDisplay r0;
        boolean z0;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        z0 := @parameter1: boolean;

        r0.<com.android.server.vr.Vr2dDisplay: boolean mIsPersistentVrModeEnabled> = z0;

        return z0;
    }

    static void access$100(com.android.server.vr.Vr2dDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void updateVirtualDisplay()>();

        return;
    }

    static boolean access$200(com.android.server.vr.Vr2dDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        $z0 = specialinvoke r0.<com.android.server.vr.Vr2dDisplay: boolean shouldRunVirtualDisplay()>();

        return $z0;
    }

    static java.lang.Object access$300(com.android.server.vr.Vr2dDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        $r1 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Object mVdLock>;

        return $r1;
    }

    static void access$400(com.android.server.vr.Vr2dDisplay, int)
    {
        com.android.server.vr.Vr2dDisplay r0;
        int i0;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void updateDisplayId(int)>(i0);

        return;
    }

    static void access$500(com.android.server.vr.Vr2dDisplay, android.view.Surface)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.view.Surface r1;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        r1 := @parameter1: android.view.Surface;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void setSurfaceLocked(android.view.Surface)>(r1);

        return;
    }

    static android.hardware.display.VirtualDisplay access$600(com.android.server.vr.Vr2dDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.hardware.display.VirtualDisplay $r1;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        $r1 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        return $r1;
    }

    static android.hardware.display.VirtualDisplay access$602(com.android.server.vr.Vr2dDisplay, android.hardware.display.VirtualDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.hardware.display.VirtualDisplay r1;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        r1 := @parameter1: android.hardware.display.VirtualDisplay;

        r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay> = r1;

        return r1;
    }

    static void access$700(com.android.server.vr.Vr2dDisplay)
    {
        com.android.server.vr.Vr2dDisplay r0;

        r0 := @parameter0: com.android.server.vr.Vr2dDisplay;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void stopImageReader()>();

        return;
    }

    private void setSurfaceLocked(android.view.Surface)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.view.Surface r1, $r2, $r5, r12;
        java.lang.StringBuilder $r3;
        java.lang.String $r9;
        boolean $z0;
        android.hardware.display.VirtualDisplay r11;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<com.android.server.vr.Vr2dDisplay: android.view.Surface mSurface>;

        if $r2 == r1 goto label4;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z0 == 0 goto label4;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting the new surface from ");

        $r5 = r0.<com.android.server.vr.Vr2dDisplay: android.view.Surface mSurface>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", $r9);

        r11 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        if r11 == null goto label2;

        virtualinvoke r11.<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>(r1);

     label2:
        r12 = r0.<com.android.server.vr.Vr2dDisplay: android.view.Surface mSurface>;

        if r12 == null goto label3;

        virtualinvoke r12.<android.view.Surface: void release()>();

     label3:
        r0.<com.android.server.vr.Vr2dDisplay: android.view.Surface mSurface> = r1;

     label4:
        return;
    }

    private boolean shouldRunVirtualDisplay()
    {
        com.android.server.vr.Vr2dDisplay r0;
        boolean $z0, $z1, $z2, $z3, z4;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        $z0 = r0.<com.android.server.vr.Vr2dDisplay: boolean mIsVirtualDisplayAllowed>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.vr.Vr2dDisplay: boolean mBootsToVr>;

        if $z1 != 0 goto label1;

        $z2 = r0.<com.android.server.vr.Vr2dDisplay: boolean mIsPersistentVrModeEnabled>;

        if $z2 != 0 goto label1;

        $z3 = r0.<com.android.server.vr.Vr2dDisplay: boolean mIsVrModeOverrideEnabled>;

        if $z3 == 0 goto label2;

     label1:
        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        return z4;
    }

    private void startDebugOnlyBroadcastReceiver(android.content.Context)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.content.Context r1;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r1 := @parameter0: android.content.Context;

        return;
    }

    private void startImageReader()
    {
        com.android.server.vr.Vr2dDisplay r0;
        java.lang.Object r1;
        android.media.ImageReader $r2, $r3, $r5;
        android.view.Surface $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r6;
        java.lang.String $r13;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        $r2 = r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader>;

        if $r2 != null goto label1;

        $i1 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayWidth>;

        $i0 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayHeight>;

        $r5 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i1, $i0, 1, 2);

        r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VD startImageReader: res = ");

        $i2 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayWidth>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X");

        $i3 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayHeight>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dpi = ");

        $i4 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayDpi>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", $r13);

     label1:
        r1 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Object mVdLock>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader>;

        $r4 = virtualinvoke $r3.<android.media.ImageReader: android.view.Surface getSurface()>();

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void setSurfaceLocked(android.view.Surface)>($r4);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r14 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r14;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void startVirtualDisplay()
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.hardware.display.DisplayManager $r1, $r5;
        android.hardware.display.VirtualDisplay $r2, $r10, r16;
        int $i0, $i1, $i2, $i9;
        short $s3, $s4, $s5, $s6, $s7;
        android.hardware.display.VirtualDisplayConfig $r6;
        android.view.Display $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r12;
        java.lang.Throwable $r13;
        java.lang.Object r14;
        android.hardware.display.VirtualDisplayConfig$Builder r15;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        $r1 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.DisplayManager mDisplayManager>;

        if $r1 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vr2dDisplay", "Cannot create virtual display because mDisplayManager == null");

        return;

     label01:
        r14 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Object mVdLock>;

        entermonitor r14;

     label02:
        $r2 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        if $r2 == null goto label04;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", "VD already exists, ignoring request");

        exitmonitor r14;

     label03:
        return;

     label04:
        r15 = new android.hardware.display.VirtualDisplayConfig$Builder;

        $i2 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayWidth>;

        $i1 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayHeight>;

        $i0 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayDpi>;

        specialinvoke r15.<android.hardware.display.VirtualDisplayConfig$Builder: void <init>(java.lang.String,int,int,int)>("VR 2D Display", $i2, $i1, $i0);

        virtualinvoke r15.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig$Builder setUniqueId(java.lang.String)>("277f1a09-b88d-4d1e-8716-796f114d080b");

        $s3 = 64 | 128;

        $s4 = $s3 | 1;

        $s5 = $s4 | 8;

        $s6 = $s5 | 256;

        $s7 = $s6 | 4;

        virtualinvoke r15.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig$Builder setFlags(int)>($s7);

        $r5 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.DisplayManager mDisplayManager>;

        $r6 = virtualinvoke r15.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig build()>();

        r16 = virtualinvoke $r5.<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,android.hardware.display.VirtualDisplayConfig,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(null, $r6, null, null);

        r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay> = r16;

     label05:
        if r16 == null goto label08;

     label06:
        $r7 = virtualinvoke r16.<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>();

        $i9 = virtualinvoke $r7.<android.view.Display: int getDisplayId()>();

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void updateDisplayId(int)>($i9);

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void startImageReader()>();

        exitmonitor r14;

     label07:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VD created: ");

        $r10 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", $r12);

        return;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vr2dDisplay", "Virtual display id is null after createVirtualDisplay");

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void updateDisplayId(int)>(-1);

        exitmonitor r14;

     label09:
        return;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r14;

     label12:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void startVrModeListener()
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.service.vr.IPersistentVrStateCallbacks $r1;
        android.os.RemoteException $r2;
        android.service.vr.IVrManager r3;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r3 = r0.<com.android.server.vr.Vr2dDisplay: android.service.vr.IVrManager mVrManager>;

        if r3 == null goto label4;

     label1:
        $r1 = r0.<com.android.server.vr.Vr2dDisplay: android.service.vr.IPersistentVrStateCallbacks mVrStateCallbacks>;

        interfaceinvoke r3.<android.service.vr.IVrManager: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Vr2dDisplay", "Could not register VR State listener.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void stopImageReader()
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.media.ImageReader r1;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r1 = r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.ImageReader: void close()>();

        r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader> = null;

     label1:
        return;
    }

    private void stopVirtualDisplay()
    {
        com.android.server.vr.Vr2dDisplay r0;
        java.lang.Runnable $r1, $r2, $r4;
        android.os.Handler $r3, $r5;
        com.android.server.vr.Vr2dDisplay$3 $r6;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        $r1 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Runnable mStopVDRunnable>;

        if $r1 != null goto label1;

        $r6 = new com.android.server.vr.Vr2dDisplay$3;

        specialinvoke $r6.<com.android.server.vr.Vr2dDisplay$3: void <init>(com.android.server.vr.Vr2dDisplay)>(r0);

        r0.<com.android.server.vr.Vr2dDisplay: java.lang.Runnable mStopVDRunnable> = $r6;

     label1:
        $r3 = r0.<com.android.server.vr.Vr2dDisplay: android.os.Handler mHandler>;

        $r2 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Runnable mStopVDRunnable>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r2);

        $r5 = r0.<com.android.server.vr.Vr2dDisplay: android.os.Handler mHandler>;

        $r4 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Runnable mStopVDRunnable>;

        virtualinvoke $r5.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r4, 2000L);

        return;
    }

    private void updateDisplayId(int)
    {
        com.android.server.vr.Vr2dDisplay r0;
        int i0;
        java.lang.Object $r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        com.android.server.wm.WindowManagerInternal $r3;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r2 = (com.android.server.wm.ActivityTaskManagerInternal) $r1;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void setVr2dDisplayId(int)>(i0);

        $r3 = r0.<com.android.server.vr.Vr2dDisplay: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerInternal: void setVr2dDisplayId(int)>(i0);

        return;
    }

    private void updateVirtualDisplay()
    {
        com.android.server.vr.Vr2dDisplay r0;
        boolean $z0;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        $z0 = specialinvoke r0.<com.android.server.vr.Vr2dDisplay: boolean shouldRunVirtualDisplay()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", "Attempting to start virtual display");

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void startVirtualDisplay()>();

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void stopVirtualDisplay()>();

     label2:
        return;
    }

    public int getVirtualDisplayId()
    {
        com.android.server.vr.Vr2dDisplay r0;
        java.lang.Object r1;
        int i0;
        android.hardware.display.VirtualDisplay $r3, $r4;
        android.view.Display $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r1 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Object mVdLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        $r5 = virtualinvoke $r4.<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>();

        i0 = virtualinvoke $r5.<android.view.Display: int getDisplayId()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        exitmonitor r1;

     label4:
        return -1;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void init(android.content.Context, boolean)
    {
        com.android.server.vr.Vr2dDisplay r0;
        android.content.Context r1;
        boolean z0;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void startVrModeListener()>();

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void startDebugOnlyBroadcastReceiver(android.content.Context)>(r1);

        r0.<com.android.server.vr.Vr2dDisplay: boolean mBootsToVr> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void updateVirtualDisplay()>();

     label1:
        return;
    }

    public void setVirtualDisplayProperties(android.app.Vr2dDisplayProperties)
    {
        com.android.server.vr.Vr2dDisplay r0;
        java.lang.Object r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11;
        boolean $z0, z1;
        android.hardware.display.VirtualDisplay $r8, $r21;
        java.lang.String $r15, $r20;
        java.lang.Throwable $r16;
        android.app.Vr2dDisplayProperties r17;
        java.lang.StringBuilder r18, r19;
        android.media.ImageReader r22;

        r0 := @this: com.android.server.vr.Vr2dDisplay;

        r17 := @parameter0: android.app.Vr2dDisplayProperties;

        r1 = r0.<com.android.server.vr.Vr2dDisplay: java.lang.Object mVdLock>;

        entermonitor r1;

     label01:
        i0 = virtualinvoke r17.<android.app.Vr2dDisplayProperties: int getWidth()>();

        i1 = virtualinvoke r17.<android.app.Vr2dDisplayProperties: int getHeight()>();

        i2 = virtualinvoke r17.<android.app.Vr2dDisplayProperties: int getDpi()>();

     label02:
        z1 = 0;

        if i0 < 1 goto label05;

        if i1 < 1 goto label05;

        if i2 >= 1 goto label03;

        goto label05;

     label03:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting width/height/dpi to ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", $r15);

        r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayWidth> = i0;

        r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayHeight> = i1;

        r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayDpi> = i2;

     label04:
        z1 = 1;

        goto label06;

     label05:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring Width/Height/Dpi values of ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r20 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vr2dDisplay", $r20);

     label06:
        $i10 = virtualinvoke r17.<android.app.Vr2dDisplayProperties: int getAddedFlags()>();

        $i11 = $i10 & 1;

        if $i11 != 1 goto label08;

        r0.<com.android.server.vr.Vr2dDisplay: boolean mIsVirtualDisplayAllowed> = 1;

     label07:
        goto label09;

     label08:
        $i4 = virtualinvoke r17.<android.app.Vr2dDisplayProperties: int getRemovedFlags()>();

        $i5 = $i4 & 1;

        if $i5 != 1 goto label09;

        r0.<com.android.server.vr.Vr2dDisplay: boolean mIsVirtualDisplayAllowed> = 0;

     label09:
        $r21 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        if $r21 == null goto label12;

     label10:
        if z1 == 0 goto label12;

     label11:
        $z0 = r0.<com.android.server.vr.Vr2dDisplay: boolean mIsVirtualDisplayAllowed>;

        if $z0 == 0 goto label12;

        $r8 = r0.<com.android.server.vr.Vr2dDisplay: android.hardware.display.VirtualDisplay mVirtualDisplay>;

        $i8 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayWidth>;

        $i7 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayHeight>;

        $i6 = r0.<com.android.server.vr.Vr2dDisplay: int mVirtualDisplayDpi>;

        virtualinvoke $r8.<android.hardware.display.VirtualDisplay: void resize(int,int,int)>($i8, $i7, $i6);

        r22 = r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader>;

        r0.<com.android.server.vr.Vr2dDisplay: android.media.ImageReader mImageReader> = null;

        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void startImageReader()>();

        virtualinvoke r22.<android.media.ImageReader: void close()>();

     label12:
        specialinvoke r0.<com.android.server.vr.Vr2dDisplay: void updateVirtualDisplay()>();

        exitmonitor r1;

     label13:
        return;

     label14:
        $r16 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public static void <clinit>()
    {
        <com.android.server.vr.Vr2dDisplay: java.lang.String UNIQUE_DISPLAY_ID> = "277f1a09-b88d-4d1e-8716-796f114d080b";

        <com.android.server.vr.Vr2dDisplay: java.lang.String TAG> = "Vr2dDisplay";

        <com.android.server.vr.Vr2dDisplay: int STOP_VIRTUAL_DISPLAY_DELAY_MILLIS> = 2000;

        <com.android.server.vr.Vr2dDisplay: int MIN_VR_DISPLAY_WIDTH> = 1;

        <com.android.server.vr.Vr2dDisplay: int MIN_VR_DISPLAY_HEIGHT> = 1;

        <com.android.server.vr.Vr2dDisplay: int MIN_VR_DISPLAY_DPI> = 1;

        <com.android.server.vr.Vr2dDisplay: java.lang.String DISPLAY_NAME> = "VR 2D Display";

        <com.android.server.vr.Vr2dDisplay: int DEFAULT_VIRTUAL_DISPLAY_WIDTH> = 1400;

        <com.android.server.vr.Vr2dDisplay: int DEFAULT_VIRTUAL_DISPLAY_HEIGHT> = 1800;

        <com.android.server.vr.Vr2dDisplay: int DEFAULT_VIRTUAL_DISPLAY_DPI> = 320;

        <com.android.server.vr.Vr2dDisplay: java.lang.String DEBUG_EXTRA_SURFACE> = "com.android.server.vr.Vr2dDisplay.EXTRA_SURFACE";

        <com.android.server.vr.Vr2dDisplay: java.lang.String DEBUG_EXTRA_MODE_ON> = "com.android.server.vr.Vr2dDisplay.EXTRA_MODE_ON";

        <com.android.server.vr.Vr2dDisplay: java.lang.String DEBUG_ACTION_SET_SURFACE> = "com.android.server.vr.Vr2dDisplay.SET_SURFACE";

        <com.android.server.vr.Vr2dDisplay: java.lang.String DEBUG_ACTION_SET_MODE> = "com.android.server.vr.Vr2dDisplay.SET_MODE";

        <com.android.server.vr.Vr2dDisplay: boolean DEBUG> = 0;

        return;
    }
}
