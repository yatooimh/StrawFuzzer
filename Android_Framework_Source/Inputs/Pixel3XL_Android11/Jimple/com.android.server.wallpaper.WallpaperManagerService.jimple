public class com.android.server.wallpaper.WallpaperManagerService extends android.app.IWallpaperManager$Stub implements com.android.server.wallpaper.IWallpaperManagerService
{
    private static final boolean DEBUG;
    private static final boolean DEBUG_LIVE;
    private static final int MAX_BITMAP_SIZE;
    private static final int MAX_WALLPAPER_COMPONENT_LOG_LENGTH;
    private static final long MIN_WALLPAPER_CRASH_TIME;
    private static final java.lang.String TAG;
    static final java.lang.String WALLPAPER;
    static final java.lang.String WALLPAPER_CROP;
    static final java.lang.String WALLPAPER_INFO;
    static final java.lang.String WALLPAPER_LOCK_CROP;
    static final java.lang.String WALLPAPER_LOCK_ORIG;
    private static final java.lang.String[] sPerUserFiles;
    private final android.app.AppOpsManager mAppOpsManager;
    private android.app.WallpaperColors mCacheDefaultImageWallpaperColors;
    private final android.util.SparseArray mColorsChangedListeners;
    private final android.content.Context mContext;
    private int mCurrentUserId;
    private final android.content.ComponentName mDefaultWallpaperComponent;
    private android.util.SparseArray mDisplayDatas;
    private final android.hardware.display.DisplayManager$DisplayListener mDisplayListener;
    private final android.hardware.display.DisplayManager mDisplayManager;
    protected com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper;
    private final android.content.pm.IPackageManager mIPackageManager;
    private final android.content.ComponentName mImageWallpaper;
    private boolean mInAmbientMode;
    private android.app.IWallpaperManagerCallback mKeyguardListener;
    protected com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper;
    private final java.lang.Object mLock;
    private final android.util.SparseArray mLockWallpaperMap;
    private final com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor mMonitor;
    private boolean mShuttingDown;
    private final android.util.SparseBooleanArray mUserRestorecon;
    private boolean mWaitingForUnlock;
    private int mWallpaperId;
    private final android.util.SparseArray mWallpaperMap;
    private final com.android.server.wm.WindowManagerInternal mWindowManagerInternal;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER_LOCK_ORIG> = "wallpaper_lock_orig";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER_LOCK_CROP> = "wallpaper_lock";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER_INFO> = "wallpaper_info.xml";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER_CROP> = "wallpaper";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER> = "wallpaper_orig";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String TAG> = "WallpaperManagerService";

        <com.android.server.wallpaper.WallpaperManagerService: long MIN_WALLPAPER_CRASH_TIME> = 10000L;

        <com.android.server.wallpaper.WallpaperManagerService: int MAX_WALLPAPER_COMPONENT_LOG_LENGTH> = 128;

        <com.android.server.wallpaper.WallpaperManagerService: int MAX_BITMAP_SIZE> = 104857600;

        <com.android.server.wallpaper.WallpaperManagerService: boolean DEBUG_LIVE> = 1;

        <com.android.server.wallpaper.WallpaperManagerService: boolean DEBUG> = 0;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "wallpaper_orig";

        $r0[1] = "wallpaper";

        $r0[2] = "wallpaper_lock_orig";

        $r0[3] = "wallpaper_lock";

        $r0[4] = "wallpaper_info.xml";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String[] sPerUserFiles> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object $r1, $r11, $r15, $r18;
        com.android.server.wallpaper.WallpaperManagerService$1 $r2;
        android.util.SparseArray $r3, $r4, $r5, $r21;
        android.util.SparseBooleanArray $r6;
        android.content.res.Resources $r7;
        java.lang.String $r8;
        android.content.ComponentName $r9, $r10;
        com.android.server.wm.WindowManagerInternal $r12;
        android.content.pm.IPackageManager $r13;
        android.content.Context $r14, $r17, r23;
        android.app.AppOpsManager $r16;
        android.hardware.display.DisplayManager$DisplayListener $r19;
        com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor $r20;
        com.android.server.wallpaper.WallpaperManagerService$LocalService $r22;
        android.hardware.display.DisplayManager r24;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r23 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.IWallpaperManager$Stub: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock> = $r1;

        $r2 = new com.android.server.wallpaper.WallpaperManagerService$1;

        specialinvoke $r2.<com.android.server.wallpaper.WallpaperManagerService$1: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager$DisplayListener mDisplayListener> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mDisplayDatas> = $r5;

        $r6 = new android.util.SparseBooleanArray;

        specialinvoke $r6.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseBooleanArray mUserRestorecon> = $r6;

        r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId> = -10000;

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext> = r23;

        r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mShuttingDown> = 0;

        $r7 = virtualinvoke r23.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(17040313);

        $r9 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r8);

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper> = $r9;

        $r10 = staticinvoke <android.app.WallpaperManager: android.content.ComponentName getDefaultWallpaperComponent(android.content.Context)>(r23);

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mDefaultWallpaperComponent> = $r10;

        $r11 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r12 = (com.android.server.wm.WindowManagerInternal) $r11;

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal> = $r12;

        $r13 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager> = $r13;

        $r14 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r16 = (android.app.AppOpsManager) $r15;

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.AppOpsManager mAppOpsManager> = $r16;

        $r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        r24 = (android.hardware.display.DisplayManager) $r18;

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager mDisplayManager> = r24;

        $r19 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        virtualinvoke r24.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r19, null);

        $r20 = new com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor;

        specialinvoke $r20.<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor mMonitor> = $r20;

        $r21 = new android.util.SparseArray;

        specialinvoke $r21.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mColorsChangedListeners> = $r21;

        $r22 = new com.android.server.wallpaper.WallpaperManagerService$LocalService;

        specialinvoke $r22.<com.android.server.wallpaper.WallpaperManagerService$LocalService: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/wallpaper/WallpaperManagerInternal;", $r22);

        return;
    }

    static java.lang.Object access$000(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static android.util.SparseArray access$100(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        return $r1;
    }

    static void access$1000(com.android.server.wallpaper.WallpaperManagerService, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(int)>(i0);

        return;
    }

    static void access$1100(com.android.server.wallpaper.WallpaperManagerService, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void removeDisplayData(int)>(i0);

        return;
    }

    static android.util.SparseArray access$1200(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mColorsChangedListeners>;

        return $r1;
    }

    static com.android.server.wallpaper.WallpaperManagerService$DisplayData access$1500(com.android.server.wallpaper.WallpaperManagerService, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(i0);

        return $r1;
    }

    static com.android.server.wm.WindowManagerInternal access$1600(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wm.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        return $r1;
    }

    static boolean access$1700(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        $z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean supportsMultiDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>(r1);

        return $z0;
    }

    static android.hardware.display.DisplayManager access$1800(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.hardware.display.DisplayManager $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        return $r1;
    }

    static void access$1900(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        r2 := @parameter2: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void attachServiceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1, r2);

        return;
    }

    static android.util.SparseArray access$200(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        return $r1;
    }

    static android.content.Context access$2000(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        return $r1;
    }

    static int access$2100(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $i0 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        return $i0;
    }

    static android.content.ComponentName access$2200(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mDefaultWallpaperComponent>;

        return $r1;
    }

    static void access$2300(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChangedOnDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int,int)>(r1, i0, i1);

        return;
    }

    static boolean access$2400(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $z0 = r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mInAmbientMode>;

        return $z0;
    }

    static boolean access$2500(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $z0 = r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mShuttingDown>;

        return $z0;
    }

    static boolean access$2502(com.android.server.wallpaper.WallpaperManagerService, boolean)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mShuttingDown> = z0;

        return z0;
    }

    static void access$2600(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperComponentLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    static void access$2900(com.android.server.wallpaper.WallpaperManagerService, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void onDisplayReadyInternal(int)>(i0);

        return;
    }

    static void access$300(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyLockWallpaperChanged()>();

        return;
    }

    static void access$400(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        int i0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r1, i0);

        return;
    }

    static void access$500(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    static void access$600(com.android.server.wallpaper.WallpaperManagerService, int, boolean)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>(i0, z0);

        return;
    }

    static void access$700(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void generateCrop(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    static android.content.ComponentName access$800(com.android.server.wallpaper.WallpaperManagerService)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        return $r1;
    }

    static boolean access$900(com.android.server.wallpaper.WallpaperManagerService, android.content.ComponentName, boolean, boolean, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName r1;
        boolean z0, z1, $z2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        android.os.IRemoteCallback r3;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: android.content.ComponentName;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r3 := @parameter5: android.os.IRemoteCallback;

        $z2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r1, z0, z1, r2, r3);

        return $z2;
    }

    private void attachServiceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$D8sKj0RqX_3Qbw982v7_y2qaq5w $r3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r3 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$D8sKj0RqX_3Qbw982v7_y2qaq5w;

        specialinvoke $r3.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$D8sKj0RqX_3Qbw982v7_y2qaq5w: void <init>(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1, r2);

        virtualinvoke r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>($r3);

        return;
    }

    private boolean bindWallpaperComponentLocked(android.content.ComponentName, boolean, boolean, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, $z10;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9;
        android.content.Intent r1, r67, r70;
        java.lang.StringBuilder $r2, r45, r46, r57, r60, r75, $r78;
        java.lang.String $r3, $r4, $r5, $r11, $r16, $r20, $r21, $r22, $r23, $r27, r47, r58, r61, $r64, r76, r80;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r6, $r7, $r8, $r9, r35;
        android.content.pm.IPackageManager $r10, $r14, $r43, $r63;
        android.content.ComponentName $r12, r34, r39, r40, r41;
        android.content.Context $r13, $r24, r66, $r68, r73;
        android.content.ContentResolver $r15;
        android.content.pm.ParceledListSlice $r17;
        java.lang.Object $r18, $r25;
        android.content.pm.ResolveInfo $r19, $r26;
        java.lang.Throwable $r28, $r32;
        android.os.RemoteException $r29, $r31, $r33, r42;
        java.lang.IllegalArgumentException $r30, r54, r56, r77;
        android.os.IRemoteCallback r36;
        android.content.pm.ServiceInfo r44, r52;
        java.lang.SecurityException r48, r59, r62;
        android.app.WallpaperInfo r49, r51;
        java.util.List r50;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r65;
        java.lang.CharSequence $r69;
        android.os.UserHandle r71, r74;
        android.app.PendingIntent $r72;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r34 := @parameter0: android.content.ComponentName;

        z8 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        r35 := @parameter3: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r36 := @parameter4: android.os.IRemoteCallback;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bindWallpaperComponentLocked: componentName=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperManagerService", $r3);

        if z8 != 0 goto label001;

        $z7 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean changingToSame(android.content.ComponentName,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r34, r35);

        if $z7 == 0 goto label001;

        return 1;

     label001:
        r39 = r34;

        if r34 != null goto label009;

     label002:
        r40 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mDefaultWallpaperComponent>;

     label003:
        r41 = r40;

        r39 = r40;

        if r40 != null goto label009;

     label004:
        r39 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

     label005:
        r41 = r39;

     label006:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperManagerService", "No default component; using image wallpaper");

     label007:
        goto label009;

     label008:
        $r31 := @caughtexception;

        r42 = $r31;

        r39 = r34;

        goto label198;

     label009:
        r41 = r39;

     label010:
        i0 = r35.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

     label011:
        r41 = r39;

     label012:
        $r43 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r44 = interfaceinvoke $r43.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r39, 4224, i0);

     label013:
        if r44 != null goto label026;

        r41 = r39;

     label014:
        r45 = new java.lang.StringBuilder;

     label015:
        r41 = r39;

     label016:
        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

     label017:
        r41 = r39;

     label018:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted wallpaper ");

     label019:
        r41 = r39;

     label020:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

     label021:
        r41 = r39;

     label022:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unavailable");

     label023:
        r41 = r39;

     label024:
        $r27 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r27);

     label025:
        return 0;

     label026:
        r41 = r39;

     label027:
        $r5 = "android.permission.BIND_WALLPAPER";

        $r4 = r44.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label047;

     label028:
        r41 = r39;

     label029:
        r46 = new java.lang.StringBuilder;

     label030:
        r41 = r39;

     label031:
        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

     label032:
        r41 = r39;

     label033:
        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service does not have android.permission.BIND_WALLPAPER: ");

     label034:
        r41 = r39;

     label035:
        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

     label036:
        r41 = r39;

     label037:
        r47 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

     label038:
        if z0 != 0 goto label041;

        r41 = r39;

     label039:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r47);

     label040:
        return 0;

     label041:
        r41 = r39;

     label042:
        r48 = new java.lang.SecurityException;

     label043:
        r41 = r39;

     label044:
        specialinvoke r48.<java.lang.SecurityException: void <init>(java.lang.String)>(r47);

     label045:
        r41 = r39;

     label046:
        throw r48;

     label047:
        r41 = r39;

     label048:
        r1 = new android.content.Intent;

     label049:
        r41 = r39;

     label050:
        specialinvoke r1.<android.content.Intent: void <init>(java.lang.String)>("android.service.wallpaper.WallpaperService");

     label051:
        r49 = null;

        if r39 == null goto label107;

        r49 = null;

        r41 = r39;

     label052:
        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $z5 = virtualinvoke r39.<android.content.ComponentName: boolean equals(java.lang.Object)>($r12);

        if $z5 != 0 goto label107;

     label053:
        r41 = r39;

     label054:
        $r14 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r13.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r15);

        $r17 = interfaceinvoke $r14.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>(r1, $r16, 128, i0);

        r50 = virtualinvoke $r17.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label055:
        i5 = 0;

     label056:
        r51 = null;

        r41 = r39;

     label057:
        $i4 = interfaceinvoke r50.<java.util.List: int size()>();

        if i5 >= $i4 goto label088;

     label058:
        r41 = r39;

     label059:
        $r18 = interfaceinvoke r50.<java.util.List: java.lang.Object get(int)>(i5);

        $r19 = (android.content.pm.ResolveInfo) $r18;

        r52 = $r19.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

     label060:
        r41 = r39;

     label061:
        $r21 = r52.<android.content.pm.ServiceInfo: java.lang.String name>;

        $r20 = r44.<android.content.pm.ServiceInfo: java.lang.String name>;

        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z6 == 0 goto label087;

     label062:
        r41 = r39;

     label063:
        $r23 = r52.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r22 = r44.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        z9 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r22);

     label064:
        if z9 == 0 goto label087;

        r41 = r39;

     label065:
        r51 = new android.app.WallpaperInfo;

     label066:
        r41 = r39;

     label067:
        $r24 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r25 = interfaceinvoke r50.<java.util.List: java.lang.Object get(int)>(i5);

        $r26 = (android.content.pm.ResolveInfo) $r25;

        specialinvoke r51.<android.app.WallpaperInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>($r24, $r26);

     label068:
        goto label088;

     label069:
        $r32 := @caughtexception;

        if z0 != 0 goto label072;

        r41 = r39;

     label070:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("WallpaperManagerService", $r32);

     label071:
        return 0;

     label072:
        r41 = r39;

     label073:
        r54 = new java.lang.IllegalArgumentException;

     label074:
        r41 = r39;

     label075:
        specialinvoke r54.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r32);

     label076:
        r41 = r39;

     label077:
        throw r54;

     label078:
        $r28 := @caughtexception;

        if z0 != 0 goto label081;

        r41 = r39;

     label079:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("WallpaperManagerService", $r28);

     label080:
        return 0;

     label081:
        r41 = r39;

     label082:
        r56 = new java.lang.IllegalArgumentException;

     label083:
        r41 = r39;

     label084:
        specialinvoke r56.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r28);

     label085:
        r41 = r39;

     label086:
        throw r56;

     label087:
        i5 = i5 + 1;

        goto label056;

     label088:
        r49 = r51;

        if r51 != null goto label107;

        r41 = r39;

     label089:
        r57 = new java.lang.StringBuilder;

     label090:
        r41 = r39;

     label091:
        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

     label092:
        r41 = r39;

     label093:
        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service is not a wallpaper: ");

     label094:
        r41 = r39;

     label095:
        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

     label096:
        r41 = r39;

     label097:
        r58 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

     label098:
        if z0 != 0 goto label101;

        r41 = r39;

     label099:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r58);

     label100:
        return 0;

     label101:
        r41 = r39;

     label102:
        r59 = new java.lang.SecurityException;

     label103:
        r41 = r39;

     label104:
        specialinvoke r59.<java.lang.SecurityException: void <init>(java.lang.String)>(r58);

     label105:
        r41 = r39;

     label106:
        throw r59;

     label107:
        if r49 == null goto label130;

        r41 = r39;

     label108:
        $z4 = virtualinvoke r49.<android.app.WallpaperInfo: boolean supportsAmbientMode()>();

        if $z4 == 0 goto label130;

     label109:
        r41 = r39;

     label110:
        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r11 = virtualinvoke r49.<android.app.WallpaperInfo: java.lang.String getPackageName()>();

        $i3 = interfaceinvoke $r10.<android.content.pm.IPackageManager: int checkPermission(java.lang.String,java.lang.String,int)>("android.permission.AMBIENT_WALLPAPER", $r11, i0);

        if $i3 == 0 goto label130;

     label111:
        r41 = r39;

     label112:
        r60 = new java.lang.StringBuilder;

     label113:
        r41 = r39;

     label114:
        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

     label115:
        r41 = r39;

     label116:
        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service does not have android.permission.AMBIENT_WALLPAPER: ");

     label117:
        r41 = r39;

     label118:
        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

     label119:
        r41 = r39;

     label120:
        r61 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

     label121:
        if z0 != 0 goto label124;

        r41 = r39;

     label122:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r61);

     label123:
        return 0;

     label124:
        r41 = r39;

     label125:
        r62 = new java.lang.SecurityException;

     label126:
        r41 = r39;

     label127:
        specialinvoke r62.<java.lang.SecurityException: void <init>(java.lang.String)>(r61);

     label128:
        r41 = r39;

     label129:
        throw r62;

     label130:
        r41 = r39;

     label131:
        $r63 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r64 = virtualinvoke r39.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i6 = r35.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        i7 = interfaceinvoke $r63.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>($r64, 268435456, $i6);

     label132:
        r41 = r39;

     label133:
        r65 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

     label134:
        r41 = r39;

     label135:
        specialinvoke r65.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void <init>(com.android.server.wallpaper.WallpaperManagerService,android.app.WallpaperInfo,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r0, r49, r35, i7);

     label136:
        r41 = r39;

     label137:
        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r39);

     label138:
        r41 = r39;

     label139:
        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.client_label", 17041437);

     label140:
        r41 = r39;

     label141:
        r66 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

     label142:
        r41 = r39;

     label143:
        r67 = new android.content.Intent;

     label144:
        r41 = r39;

     label145:
        specialinvoke r67.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SET_WALLPAPER");

     label146:
        r41 = r39;

     label147:
        $r68 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r69 = virtualinvoke $r68.<android.content.Context: java.lang.CharSequence getText(int)>(17039808);

        r70 = staticinvoke <android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>(r67, $r69);

     label148:
        r41 = r39;

     label149:
        r71 = new android.os.UserHandle;

     label150:
        r41 = r39;

     label151:
        specialinvoke r71.<android.os.UserHandle: void <init>(int)>(i0);

     label152:
        r41 = r39;

     label153:
        $r72 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r66, 0, r70, 67108864, null, r71);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.client_intent", $r72);

     label154:
        r41 = r39;

     label155:
        r73 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

     label156:
        r41 = r39;

     label157:
        r74 = new android.os.UserHandle;

     label158:
        r41 = r39;

     label159:
        specialinvoke r74.<android.os.UserHandle: void <init>(int)>(i0);

     label160:
        r41 = r39;

     label161:
        $z10 = virtualinvoke r73.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r1, r65, 570429441, r74);

        if $z10 != 0 goto label181;

     label162:
        r41 = r39;

     label163:
        r75 = new java.lang.StringBuilder;

     label164:
        r41 = r39;

     label165:
        specialinvoke r75.<java.lang.StringBuilder: void <init>()>();

     label166:
        r41 = r39;

     label167:
        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to bind service: ");

     label168:
        r41 = r39;

     label169:
        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

     label170:
        r41 = r39;

     label171:
        r76 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.String toString()>();

     label172:
        if z0 != 0 goto label175;

        r41 = r39;

     label173:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r76);

     label174:
        return 0;

     label175:
        r41 = r39;

     label176:
        r77 = new java.lang.IllegalArgumentException;

     label177:
        r41 = r39;

     label178:
        specialinvoke r77.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r76);

     label179:
        r41 = r39;

     label180:
        throw r77;

     label181:
        r41 = r39;

     label182:
        $i2 = r35.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $i1 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i2 != $i1 goto label189;

     label183:
        r41 = r39;

     label184:
        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        if $r7 == null goto label189;

     label185:
        r41 = r39;

     label186:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $z3 = virtualinvoke r35.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z3 != 0 goto label189;

     label187:
        r41 = r39;

     label188:
        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void detachWallpaperLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r9);

     label189:
        r41 = r39;

     label190:
        r35.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = r39;

     label191:
        r41 = r39;

     label192:
        r35.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection> = r65;

     label193:
        r65.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply> = r36;

        $i8 = r35.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $i9 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i8 != $i9 goto label194;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $z2 = virtualinvoke r35.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label194;

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper> = r35;

     label194:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void updateFallbackConnection()>();

     label195:
        return 1;

     label196:
        $r29 := @caughtexception;

        r42 = $r29;

        goto label198;

     label197:
        $r33 := @caughtexception;

        r42 = $r33;

        r39 = r41;

     label198:
        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception for ");

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 != 0 goto label199;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r80);

        return 0;

     label199:
        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r80);

        throw $r30;

        catch android.os.RemoteException from label002 to label003 with label008;
        catch android.os.RemoteException from label004 to label005 with label197;
        catch android.os.RemoteException from label006 to label007 with label197;
        catch android.os.RemoteException from label010 to label011 with label197;
        catch android.os.RemoteException from label012 to label013 with label197;
        catch android.os.RemoteException from label014 to label015 with label197;
        catch android.os.RemoteException from label016 to label017 with label197;
        catch android.os.RemoteException from label018 to label019 with label197;
        catch android.os.RemoteException from label020 to label021 with label197;
        catch android.os.RemoteException from label022 to label023 with label197;
        catch android.os.RemoteException from label024 to label025 with label197;
        catch android.os.RemoteException from label027 to label028 with label197;
        catch android.os.RemoteException from label029 to label030 with label197;
        catch android.os.RemoteException from label031 to label032 with label197;
        catch android.os.RemoteException from label033 to label034 with label197;
        catch android.os.RemoteException from label035 to label036 with label197;
        catch android.os.RemoteException from label037 to label038 with label197;
        catch android.os.RemoteException from label039 to label040 with label197;
        catch android.os.RemoteException from label042 to label043 with label197;
        catch android.os.RemoteException from label044 to label045 with label197;
        catch android.os.RemoteException from label046 to label047 with label197;
        catch android.os.RemoteException from label048 to label049 with label197;
        catch android.os.RemoteException from label050 to label051 with label197;
        catch android.os.RemoteException from label052 to label053 with label197;
        catch android.os.RemoteException from label054 to label055 with label197;
        catch android.os.RemoteException from label057 to label058 with label197;
        catch android.os.RemoteException from label059 to label060 with label197;
        catch android.os.RemoteException from label061 to label062 with label197;
        catch android.os.RemoteException from label063 to label064 with label197;
        catch org.xmlpull.v1.XmlPullParserException from label065 to label066 with label078;
        catch java.io.IOException from label065 to label066 with label069;
        catch android.os.RemoteException from label065 to label066 with label197;
        catch org.xmlpull.v1.XmlPullParserException from label067 to label068 with label078;
        catch java.io.IOException from label067 to label068 with label069;
        catch android.os.RemoteException from label067 to label068 with label197;
        catch android.os.RemoteException from label070 to label071 with label197;
        catch android.os.RemoteException from label073 to label074 with label197;
        catch android.os.RemoteException from label075 to label076 with label197;
        catch android.os.RemoteException from label077 to label078 with label197;
        catch android.os.RemoteException from label079 to label080 with label197;
        catch android.os.RemoteException from label082 to label083 with label197;
        catch android.os.RemoteException from label084 to label085 with label197;
        catch android.os.RemoteException from label086 to label087 with label197;
        catch android.os.RemoteException from label089 to label090 with label197;
        catch android.os.RemoteException from label091 to label092 with label197;
        catch android.os.RemoteException from label093 to label094 with label197;
        catch android.os.RemoteException from label095 to label096 with label197;
        catch android.os.RemoteException from label097 to label098 with label197;
        catch android.os.RemoteException from label099 to label100 with label197;
        catch android.os.RemoteException from label102 to label103 with label197;
        catch android.os.RemoteException from label104 to label105 with label197;
        catch android.os.RemoteException from label106 to label107 with label197;
        catch android.os.RemoteException from label108 to label109 with label197;
        catch android.os.RemoteException from label110 to label111 with label197;
        catch android.os.RemoteException from label112 to label113 with label197;
        catch android.os.RemoteException from label114 to label115 with label197;
        catch android.os.RemoteException from label116 to label117 with label197;
        catch android.os.RemoteException from label118 to label119 with label197;
        catch android.os.RemoteException from label120 to label121 with label197;
        catch android.os.RemoteException from label122 to label123 with label197;
        catch android.os.RemoteException from label125 to label126 with label197;
        catch android.os.RemoteException from label127 to label128 with label197;
        catch android.os.RemoteException from label129 to label130 with label197;
        catch android.os.RemoteException from label131 to label132 with label197;
        catch android.os.RemoteException from label133 to label134 with label197;
        catch android.os.RemoteException from label135 to label136 with label197;
        catch android.os.RemoteException from label137 to label138 with label197;
        catch android.os.RemoteException from label139 to label140 with label197;
        catch android.os.RemoteException from label141 to label142 with label197;
        catch android.os.RemoteException from label143 to label144 with label197;
        catch android.os.RemoteException from label145 to label146 with label197;
        catch android.os.RemoteException from label147 to label148 with label197;
        catch android.os.RemoteException from label149 to label150 with label197;
        catch android.os.RemoteException from label151 to label152 with label197;
        catch android.os.RemoteException from label153 to label154 with label197;
        catch android.os.RemoteException from label155 to label156 with label197;
        catch android.os.RemoteException from label157 to label158 with label197;
        catch android.os.RemoteException from label159 to label160 with label197;
        catch android.os.RemoteException from label161 to label162 with label197;
        catch android.os.RemoteException from label163 to label164 with label197;
        catch android.os.RemoteException from label165 to label166 with label197;
        catch android.os.RemoteException from label167 to label168 with label197;
        catch android.os.RemoteException from label169 to label170 with label197;
        catch android.os.RemoteException from label171 to label172 with label197;
        catch android.os.RemoteException from label173 to label174 with label197;
        catch android.os.RemoteException from label176 to label177 with label197;
        catch android.os.RemoteException from label178 to label179 with label197;
        catch android.os.RemoteException from label180 to label181 with label197;
        catch android.os.RemoteException from label182 to label183 with label197;
        catch android.os.RemoteException from label184 to label185 with label197;
        catch android.os.RemoteException from label186 to label187 with label197;
        catch android.os.RemoteException from label188 to label189 with label197;
        catch android.os.RemoteException from label190 to label191 with label197;
        catch android.os.RemoteException from label192 to label193 with label197;
        catch android.os.RemoteException from label193 to label194 with label196;
        catch android.os.RemoteException from label194 to label195 with label196;
    }

    private boolean changingToSame(android.content.ComponentName, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName r1, $r4, $r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r3;
        boolean $z0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r3 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r3 == null goto label2;

        $r4 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r4 != null goto label1;

        if r1 != null goto label2;

        return 1;

     label1:
        $r5 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $z0 = virtualinvoke $r5.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private void checkPermission(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, $r10;
        android.content.Context $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r9;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access denied to process: ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must have permission ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = new java.lang.SecurityException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private void clearWallpaperComponentLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = null;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void detachWallpaperLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    private void detachWallpaperLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1, $r12;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r2, $r3, $r5, $r8, $r9, $r10, $r13, $r15, $r17, $r21;
        android.os.IRemoteCallback $r4, $r16;
        android.content.Context $r6;
        com.android.server.wallpaper.'-$$Lambda$havGP5uMdRgWQrLydPeIOu1qDGE' $r7;
        android.util.SparseArray $r11;
        android.service.wallpaper.IWallpaperService $r14, $r22;
        android.os.RemoteException $r18, $r19;
        java.util.function.Consumer r24;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r2 == null goto label9;

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r4 = $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply>;

        if $r4 == null goto label5;

     label1:
        $r15 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r16 = $r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply>;

        interfaceinvoke $r16.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

     label4:
        $r17 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply> = null;

     label5:
        $r21 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r22 = $r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        if $r22 == null goto label6;

        $r13 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r14 = $r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        interfaceinvoke $r14.<android.service.wallpaper.IWallpaperService: void detach()>();

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Failed detaching wallpaper service ", $r18);

     label8:
        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r5 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke $r6.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r5);

        $r8 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r7 = <com.android.server.wallpaper._$$Lambda$havGP5uMdRgWQrLydPeIOu1qDGE: com.android.server.wallpaper.'-$$Lambda$havGP5uMdRgWQrLydPeIOu1qDGE' INSTANCE>;

        r24 = (java.util.function.Consumer) $r7;

        virtualinvoke $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>(r24);

        $r9 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService> = null;

        $r10 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r11 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.util.SparseArray access$1300(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>($r10);

        virtualinvoke $r11.<android.util.SparseArray: void clear()>();

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection> = null;

        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        if r1 != $r12 goto label9;

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper> = null;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private static boolean emptyCallbackList(android.os.RemoteCallbackList)
    {
        android.os.RemoteCallbackList r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.os.RemoteCallbackList;

        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private void ensureSaneWallpaperData(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        android.graphics.Rect $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i0 = virtualinvoke $r2.<android.graphics.Rect: int width()>();

        if $i0 < 0 goto label1;

        $r4 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i1 = virtualinvoke $r4.<android.graphics.Rect: int height()>();

        if $i1 >= 0 goto label2;

     label1:
        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

     label2:
        return;
    }

    private void ensureSaneWallpaperDisplaySize(com.android.server.wallpaper.WallpaperManagerService$DisplayData, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r1;
        int $i0, $i1, i2, i3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$DisplayData;

        i2 := @parameter1: int;

        i3 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getMaximumSizeDimension(int)>(i2);

        $i0 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        if $i0 >= i3 goto label1;

        r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth> = i3;

     label1:
        $i1 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        if $i1 >= i3 goto label2;

        r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight> = i3;

     label2:
        return;
    }

    private void extractColors(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r1, $r8, $r10, r15;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        android.content.ComponentName $r2, $r3, $r7;
        int $i0, $i1, i2;
        java.io.File $r4, $r5, $r6;
        android.app.WallpaperColors $r9, r17, r24;
        java.lang.Throwable $r11, $r12, $r13, $r14;
        java.lang.Object r16, r18, r21, r25;
        java.lang.String r22;
        android.graphics.Bitmap r23;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r15 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $z0 = virtualinvoke r15.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label13;

        r16 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label01:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r9 = $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        if $r9 == null goto label03;

        exitmonitor r16;

     label02:
        return;

     label03:
        exitmonitor r16;

     label04:
        r17 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors extractDefaultImageWallpaperColors()>();

        r18 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r18;

     label05:
        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = r17;

        exitmonitor r18;

     label06:
        return;

     label07:
        $r14 := @caughtexception;

     label08:
        exitmonitor r18;

     label09:
        throw $r14;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r16;

     label12:
        throw $r12;

     label13:
        r21 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r21;

     label14:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $r2 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $z1 = virtualinvoke $r3.<android.content.ComponentName: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label17;

        $r7 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r7 != null goto label16;

     label15:
        goto label17;

     label16:
        z5 = 0;

        goto label18;

     label17:
        z5 = 1;

     label18:
        if z5 == 0 goto label21;

     label19:
        $r4 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        if $r4 == null goto label21;

        $r5 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        $z4 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label21;

        $r6 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        r22 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

     label20:
        z6 = 0;

        goto label26;

     label21:
        r22 = null;

        z6 = 0;

        if z5 == 0 goto label26;

        r22 = null;

        z6 = 0;

     label22:
        $z2 = virtualinvoke r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean cropExists()>();

        if $z2 != 0 goto label26;

     label23:
        r22 = null;

        z6 = 0;

     label24:
        $z3 = virtualinvoke r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean sourceExists()>();

        if $z3 != 0 goto label26;

     label25:
        z6 = 1;

        r22 = null;

     label26:
        i2 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        exitmonitor r21;

     label27:
        if r22 == null goto label28;

        r23 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>(r22);

        r24 = null;

        if r23 == null goto label29;

        r24 = staticinvoke <android.app.WallpaperColors: android.app.WallpaperColors fromBitmap(android.graphics.Bitmap)>(r23);

        virtualinvoke r23.<android.graphics.Bitmap: void recycle()>();

        goto label29;

     label28:
        r24 = null;

        if z6 == 0 goto label29;

        r24 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors extractDefaultImageWallpaperColors()>();

        goto label29;

     label29:
        if r24 != null goto label30;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Cannot extract colors because wallpaper could not be read.");

        return;

     label30:
        r25 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r25;

     label31:
        $i0 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        if $i0 != i2 goto label33;

        r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = r24;

        $i1 = r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(int)>($i1);

     label32:
        goto label34;

     label33:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Not setting primary colors since wallpaper changed");

     label34:
        exitmonitor r25;

     label35:
        return;

     label36:
        $r11 := @caughtexception;

     label37:
        exitmonitor r25;

     label38:
        throw $r11;

     label39:
        $r13 := @caughtexception;

     label40:
        exitmonitor r21;

     label41:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label39;
        catch java.lang.Throwable from label19 to label20 with label39;
        catch java.lang.Throwable from label22 to label23 with label39;
        catch java.lang.Throwable from label24 to label25 with label39;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label37 to label38 with label36;
        catch java.lang.Throwable from label40 to label41 with label39;
    }

    private android.app.WallpaperColors extractDefaultImageWallpaperColors()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.io.InputStream r1;
        android.app.WallpaperColors $r2, r11, r12, r13, r14, r17, r18, r22;
        android.content.Context $r3;
        java.lang.Throwable $r4, $r5, $r6, $r8, $r9;
        java.lang.OutOfMemoryError $r7;
        java.lang.Object r10, r24;
        android.graphics.BitmapFactory$Options r15;
        android.graphics.Bitmap r16;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r10;

     label01:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors mCacheDefaultImageWallpaperColors>;

        if $r2 == null goto label03;

        r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors mCacheDefaultImageWallpaperColors>;

        exitmonitor r10;

     label02:
        return r11;

     label03:
        exitmonitor r10;

     label04:
        r12 = null;

        r13 = null;

     label05:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        r1 = staticinvoke <android.app.WallpaperManager: java.io.InputStream openDefaultWallpaper(android.content.Context,int)>($r3, 1);

     label06:
        if r1 != null goto label11;

        r14 = null;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Can\'t open default wallpaper stream");

     label08:
        if r1 == null goto label10;

        r12 = null;

        r13 = null;

     label09:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label10:
        return null;

     label11:
        r14 = null;

     label12:
        r15 = new android.graphics.BitmapFactory$Options;

     label13:
        r14 = null;

     label14:
        specialinvoke r15.<android.graphics.BitmapFactory$Options: void <init>()>();

     label15:
        r14 = null;

     label16:
        r16 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r1, null, r15);

     label17:
        r17 = null;

        if r16 == null goto label22;

        r14 = null;

     label18:
        r18 = staticinvoke <android.app.WallpaperColors: android.app.WallpaperColors fromBitmap(android.graphics.Bitmap)>(r16);

     label19:
        r14 = r18;

     label20:
        virtualinvoke r16.<android.graphics.Bitmap: void recycle()>();

     label21:
        r17 = r18;

     label22:
        r13 = r17;

        if r1 == null goto label34;

        r12 = r17;

        r13 = r17;

     label23:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label24:
        r13 = r17;

        goto label34;

     label25:
        $r5 := @caughtexception;

        if r1 == null goto label30;

     label26:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label27:
        goto label30;

     label28:
        $r4 := @caughtexception;

        r12 = r14;

        r13 = r14;

     label29:
        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label30:
        r12 = r14;

        r13 = r14;

     label31:
        throw $r5;

     label32:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Can\'t close default wallpaper stream", $r8);

        r22 = r12;

        goto label35;

     label33:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Can\'t decode default wallpaper stream", $r7);

     label34:
        r22 = r13;

     label35:
        if r22 != null goto label36;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", "Extract default image wallpaper colors failed");

        goto label38;

     label36:
        r24 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r24;

     label37:
        r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors mCacheDefaultImageWallpaperColors> = r22;

        exitmonitor r24;

     label38:
        return r22;

     label39:
        $r9 := @caughtexception;

     label40:
        exitmonitor r24;

     label41:
        throw $r9;

     label42:
        $r6 := @caughtexception;

     label43:
        exitmonitor r10;

     label44:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label42;
        catch java.lang.Throwable from label03 to label04 with label42;
        catch java.lang.OutOfMemoryError from label05 to label06 with label33;
        catch java.io.IOException from label05 to label06 with label32;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.OutOfMemoryError from label09 to label10 with label33;
        catch java.io.IOException from label09 to label10 with label32;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.OutOfMemoryError from label23 to label24 with label33;
        catch java.io.IOException from label23 to label24 with label32;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.OutOfMemoryError from label29 to label30 with label33;
        catch java.io.IOException from label29 to label30 with label32;
        catch java.lang.OutOfMemoryError from label31 to label32 with label33;
        catch java.io.IOException from label31 to label32 with label32;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label40 to label41 with label39;
        catch java.lang.Throwable from label43 to label44 with label42;
    }

    private com.android.server.wallpaper.WallpaperManagerService$WallpaperData findWallpaperAtDisplay(int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1, $r3, $r5, $r8;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r2, $r4;
        boolean $z0;
        android.util.SparseArray $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        if r1 == null goto label1;

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r4 = $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $z0 = virtualinvoke $r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: boolean containsDisplay(int)>(i1);

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        return $r5;

     label1:
        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r8 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r7;

        return $r8;
    }

    private void generateCrop(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r1;
        android.graphics.BitmapRegionDecoder r3;
        android.graphics.Rect r4, $r5, $r6;
        android.view.DisplayInfo $r7;
        android.hardware.display.DisplayManager $r8;
        android.view.Display $r9;
        android.graphics.BitmapFactory$Options $r10;
        java.io.File $r11, $r13, $r14, $r15, $r16, $r17, $r19, $r21, $r22, $r23;
        java.lang.String $r12, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, i63, i64, $i65, $i66, i67, i68, $i69, i70, i71, i72, i73, i74, i75, i76, i77;
        boolean $z0, $z1, z2, z3, z4, z5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, f25, f26, f27, f28;
        android.graphics.Bitmap$CompressFormat $r20;
        long $l40;
        byte $b41;
        java.lang.Throwable $r24, $r26, $r27, $r30, r46;
        java.lang.Exception $r25, $r28, $r29, $r31;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r32;
        java.io.FileOutputStream r35, r36, r40, r43;
        java.io.BufferedOutputStream r37, r38, r41, r44;
        android.graphics.Bitmap r39, r42;
        java.lang.RuntimeException r45;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r32 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        z2 = 0;

        r1 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(0);

        $r5 = new android.graphics.Rect;

        $r6 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        specialinvoke $r5.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r6);

        $r7 = new android.view.DisplayInfo;

        specialinvoke $r7.<android.view.DisplayInfo: void <init>()>();

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        $r9 = virtualinvoke $r8.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

        virtualinvoke $r9.<android.view.Display: boolean getDisplayInfo(android.view.DisplayInfo)>($r7);

        $r10 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r10.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r10.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        $r11 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>($r12, $r10);

        $i0 = $r10.<android.graphics.BitmapFactory$Options: int outWidth>;

        if $i0 <= 0 goto label85;

        $i1 = $r10.<android.graphics.BitmapFactory$Options: int outHeight>;

        if $i1 > 0 goto label01;

        goto label85;

     label01:
        z3 = 0;

        $z1 = virtualinvoke $r5.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        $r5.<android.graphics.Rect: int top> = 0;

        $r5.<android.graphics.Rect: int left> = 0;

        $i61 = $r10.<android.graphics.BitmapFactory$Options: int outWidth>;

        $r5.<android.graphics.Rect: int right> = $i61;

        $i62 = $r10.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r5.<android.graphics.Rect: int bottom> = $i62;

        goto label11;

     label02:
        $i3 = $r5.<android.graphics.Rect: int right>;

        $i2 = $r10.<android.graphics.BitmapFactory$Options: int outWidth>;

        if $i3 <= $i2 goto label03;

        $i60 = $r10.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i59 = $r5.<android.graphics.Rect: int right>;

        i63 = $i60 - $i59;

        goto label04;

     label03:
        i63 = 0;

     label04:
        $i5 = $r5.<android.graphics.Rect: int bottom>;

        $i4 = $r10.<android.graphics.BitmapFactory$Options: int outHeight>;

        if $i5 <= $i4 goto label05;

        $i58 = $r10.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i57 = $r5.<android.graphics.Rect: int bottom>;

        i64 = $i58 - $i57;

        goto label06;

     label05:
        i64 = 0;

     label06:
        virtualinvoke $r5.<android.graphics.Rect: void offset(int,int)>(i63, i64);

        $i6 = $r5.<android.graphics.Rect: int left>;

        if $i6 >= 0 goto label07;

        $r5.<android.graphics.Rect: int left> = 0;

     label07:
        $i7 = $r5.<android.graphics.Rect: int top>;

        if $i7 >= 0 goto label08;

        $r5.<android.graphics.Rect: int top> = 0;

     label08:
        $i8 = $r10.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i9 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        if $i8 > $i9 goto label10;

        $i55 = $r10.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i56 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        if $i55 <= $i56 goto label09;

        goto label10;

     label09:
        z3 = 0;

        goto label11;

     label10:
        z3 = 1;

     label11:
        $i65 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        $i66 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        if $i65 != $i66 goto label13;

        $i51 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        $i52 = staticinvoke <com.android.server.wallpaper.GLHelper: int getMaxTextureSize()>();

        if $i51 > $i52 goto label13;

        $i53 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        $i54 = staticinvoke <com.android.server.wallpaper.GLHelper: int getMaxTextureSize()>();

        if $i53 <= $i54 goto label12;

        goto label13;

     label12:
        z4 = 0;

        goto label14;

     label13:
        z4 = 1;

     label14:
        z5 = z3;

        if z4 == 0 goto label15;

        $i42 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        $f17 = (float) $i42;

        $i43 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        $f18 = (float) $i43;

        f25 = $f17 / $f18;

        z5 = z3;

        $i44 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        $f19 = (float) $i44;

        $f20 = $f19 * f25;

        $i46 = (int) $f20;

        $i45 = $r7.<android.view.DisplayInfo: int logicalWidth>;

        if $i46 >= $i45 goto label15;

        $i47 = $r7.<android.view.DisplayInfo: int logicalHeight>;

        $f22 = (float) $i47;

        $i48 = $r7.<android.view.DisplayInfo: int logicalWidth>;

        $f21 = (float) $i48;

        f26 = $f22 / $f21;

        $i49 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        $f23 = (float) $i49;

        $f24 = $f23 * f26;

        $i50 = (int) $f24;

        $r5.<android.graphics.Rect: int bottom> = $i50;

        z5 = 1;

     label15:
        if z5 != 0 goto label18;

        if z4 != 0 goto label18;

        $i37 = $r10.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i36 = $r10.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i38 = $i37 * $i36;

        $i39 = $i38 * 4;

        $l40 = (long) $i39;

        $b41 = $l40 cmp 104857600L;

        if $b41 >= 0 goto label16;

        $r23 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r22 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        z2 = staticinvoke <android.os.FileUtils: boolean copyFile(java.io.File,java.io.File)>($r23, $r22);

     label16:
        if z2 != 0 goto label17;

        $r21 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        virtualinvoke $r21.<java.io.File: boolean delete()>();

     label17:
        goto label86;

     label18:
        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label19:
        $r17 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r18 = virtualinvoke $r17.<java.io.File: java.lang.String getAbsolutePath()>();

        r3 = staticinvoke <android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)>($r18, 0);

        $i10 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        $i11 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        i67 = $i10 / $i11;

     label20:
        i68 = 1;

     label21:
        $i69 = i68 * 2;

        if $i69 > i67 goto label22;

        i68 = i68 * 2;

        goto label21;

     label22:
        $r10.<android.graphics.BitmapFactory$Options: int inSampleSize> = i68;

        $r10.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        r4 = new android.graphics.Rect;

        specialinvoke r4.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r5);

        $i12 = $r10.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $f0 = (float) $i12;

        $f1 = 1.0F / $f0;

        virtualinvoke r4.<android.graphics.Rect: void scale(float)>($f1);

        i70 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

     label23:
        f27 = (float) i70;

     label24:
        $i13 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $f2 = (float) $i13;

        f28 = f27 / $f2;

        $i14 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $f3 = (float) $i14;

        $f4 = $f3 * f28;

        i71 = (int) $f4;

        i72 = virtualinvoke r4.<android.graphics.Rect: int width()>();

     label25:
        $f5 = (float) i72;

        $f6 = $f5 * f28;

        i73 = (int) $f6;

     label26:
        $i15 = staticinvoke <com.android.server.wallpaper.GLHelper: int getMaxTextureSize()>();

        if i73 <= $i15 goto label40;

        $i19 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        $f11 = (float) $i19;

        $f12 = $f11 / f28;

        i74 = (int) $f12;

        $i20 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        $f13 = (float) $i20;

        $f14 = $f13 / f28;

        i75 = (int) $f14;

        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r5);

     label27:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label28:
        $i21 = r4.<android.graphics.Rect: int left>;

        $i22 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        $i23 = $i22 - i75;

        $i24 = $i23 / 2;

        $i25 = $i21 + $i24;

        r4.<android.graphics.Rect: int left> = $i25;

     label29:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label30:
        $i26 = r4.<android.graphics.Rect: int top>;

        $i27 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        $i28 = $i27 - i74;

        $i29 = $i28 / 2;

        $i30 = $i26 + $i29;

        r4.<android.graphics.Rect: int top> = $i30;

     label31:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label32:
        $i31 = r4.<android.graphics.Rect: int left>;

        $i32 = $i31 + i75;

        r4.<android.graphics.Rect: int right> = $i32;

     label33:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label34:
        $i33 = r4.<android.graphics.Rect: int top>;

        $i34 = $i33 + i74;

        r4.<android.graphics.Rect: int bottom> = $i34;

     label35:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label36:
        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r4);

     label37:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label38:
        $i35 = $r10.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $f15 = (float) $i35;

        $f16 = 1.0F / $f15;

        virtualinvoke r4.<android.graphics.Rect: void scale(float)>($f16);

     label39:
        goto label40;

     label40:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label41:
        $i16 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $f7 = (float) $i16;

        $f8 = $f7 * f28;

        i76 = (int) $f8;

     label42:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label43:
        $i17 = virtualinvoke r4.<android.graphics.Rect: int width()>();

        $f9 = (float) $i17;

        $f10 = $f9 * f28;

        i77 = (int) $f10;

     label44:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label45:
        r39 = virtualinvoke r3.<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r5, $r10);

     label46:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label47:
        virtualinvoke r3.<android.graphics.BitmapRegionDecoder: void recycle()>();

     label48:
        if r39 != null goto label51;

        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label49:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", "Could not decode new wallpaper");

     label50:
        z2 = 0;

        r40 = null;

        r41 = null;

        goto label68;

     label51:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label52:
        r42 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r39, i77, i76, 1);

     label53:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label54:
        $i18 = virtualinvoke r42.<android.graphics.Bitmap: int getByteCount()>();

        if $i18 > 104857600 goto label69;

     label55:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label56:
        r43 = new java.io.FileOutputStream;

     label57:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label58:
        $r19 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        specialinvoke r43.<java.io.FileOutputStream: void <init>(java.io.File)>($r19);

     label59:
        r40 = r43;

        r35 = r43;

        r37 = null;

        r36 = r43;

        r38 = null;

     label60:
        r44 = new java.io.BufferedOutputStream;

     label61:
        r35 = r43;

        r37 = null;

        r36 = r43;

        r38 = null;

     label62:
        specialinvoke r44.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r43, 32768);

     label63:
        r41 = r44;

        r35 = r43;

        r37 = r44;

        r36 = r43;

        r38 = r44;

     label64:
        $r20 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>;

        virtualinvoke r42.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r20, 100, r44);

     label65:
        r35 = r43;

        r37 = r44;

        r36 = r43;

        r38 = r44;

     label66:
        virtualinvoke r44.<java.io.BufferedOutputStream: void flush()>();

     label67:
        z2 = 1;

     label68:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r41);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r40);

        goto label86;

     label69:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label70:
        r45 = new java.lang.RuntimeException;

     label71:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label72:
        specialinvoke r45.<java.lang.RuntimeException: void <init>(java.lang.String)>("Too large bitmap, limit=104857600");

     label73:
        r35 = null;

        r37 = null;

        r36 = null;

        r38 = null;

     label74:
        throw r45;

     label75:
        $r27 := @caughtexception;

        r46 = $r27;

        goto label82;

     label76:
        $r25 := @caughtexception;

        goto label84;

     label77:
        $r26 := @caughtexception;

        r46 = $r26;

        goto label82;

     label78:
        $r28 := @caughtexception;

        goto label84;

     label79:
        $r30 := @caughtexception;

        r46 = $r30;

        goto label82;

     label80:
        $r31 := @caughtexception;

        goto label84;

     label81:
        $r24 := @caughtexception;

        r46 = $r24;

     label82:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r37);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r35);

        throw r46;

     label83:
        $r29 := @caughtexception;

     label84:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r38);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r36);

        z2 = 0;

        goto label86;

     label85:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Invalid wallpaper data");

        z2 = 0;

     label86:
        if z2 != 0 goto label87;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", "Unable to apply new wallpaper");

        $r16 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        virtualinvoke $r16.<java.io.File: boolean delete()>();

     label87:
        $r13 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        $z0 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label88;

        $r14 = r32.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        $r15 = virtualinvoke $r14.<java.io.File: java.io.File getAbsoluteFile()>();

        staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r15);

     label88:
        return;

        catch java.lang.Exception from label19 to label20 with label83;
        catch java.lang.Throwable from label19 to label20 with label81;
        catch java.lang.Exception from label22 to label23 with label83;
        catch java.lang.Throwable from label22 to label23 with label81;
        catch java.lang.Exception from label24 to label25 with label80;
        catch java.lang.Throwable from label24 to label25 with label79;
        catch java.lang.Exception from label26 to label27 with label78;
        catch java.lang.Throwable from label26 to label27 with label77;
        catch java.lang.Exception from label28 to label29 with label76;
        catch java.lang.Throwable from label28 to label29 with label75;
        catch java.lang.Exception from label30 to label31 with label76;
        catch java.lang.Throwable from label30 to label31 with label75;
        catch java.lang.Exception from label32 to label33 with label76;
        catch java.lang.Throwable from label32 to label33 with label75;
        catch java.lang.Exception from label34 to label35 with label76;
        catch java.lang.Throwable from label34 to label35 with label75;
        catch java.lang.Exception from label36 to label37 with label76;
        catch java.lang.Throwable from label36 to label37 with label75;
        catch java.lang.Exception from label38 to label39 with label76;
        catch java.lang.Throwable from label38 to label39 with label75;
        catch java.lang.Exception from label41 to label42 with label76;
        catch java.lang.Throwable from label41 to label42 with label75;
        catch java.lang.Exception from label43 to label44 with label76;
        catch java.lang.Throwable from label43 to label44 with label75;
        catch java.lang.Exception from label45 to label46 with label76;
        catch java.lang.Throwable from label45 to label46 with label75;
        catch java.lang.Exception from label47 to label48 with label76;
        catch java.lang.Throwable from label47 to label48 with label75;
        catch java.lang.Exception from label49 to label50 with label76;
        catch java.lang.Throwable from label49 to label50 with label75;
        catch java.lang.Exception from label52 to label53 with label76;
        catch java.lang.Throwable from label52 to label53 with label75;
        catch java.lang.Exception from label54 to label55 with label76;
        catch java.lang.Throwable from label54 to label55 with label75;
        catch java.lang.Exception from label56 to label57 with label76;
        catch java.lang.Throwable from label56 to label57 with label75;
        catch java.lang.Exception from label58 to label59 with label76;
        catch java.lang.Throwable from label58 to label59 with label75;
        catch java.lang.Exception from label60 to label61 with label76;
        catch java.lang.Throwable from label60 to label61 with label75;
        catch java.lang.Exception from label62 to label63 with label76;
        catch java.lang.Throwable from label62 to label63 with label75;
        catch java.lang.Exception from label64 to label65 with label76;
        catch java.lang.Throwable from label64 to label65 with label75;
        catch java.lang.Exception from label66 to label67 with label76;
        catch java.lang.Throwable from label66 to label67 with label75;
        catch java.lang.Exception from label70 to label71 with label76;
        catch java.lang.Throwable from label70 to label71 with label75;
        catch java.lang.Exception from label72 to label73 with label76;
        catch java.lang.Throwable from label72 to label73 with label75;
        catch java.lang.Exception from label74 to label75 with label76;
        catch java.lang.Throwable from label74 to label75 with label75;
    }

    private int getAttributeInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, r3;
        int i0, $i1;
        org.xmlpull.v1.XmlPullParser r2;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r2 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r1);

        if r3 != null goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        return $i1;
    }

    private com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r1, $r4, r6;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mDisplayDatas>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wallpaper.WallpaperManagerService$DisplayData) $r3;

        r6 = r1;

        if r1 != null goto label1;

        $r4 = new com.android.server.wallpaper.WallpaperManagerService$DisplayData;

        specialinvoke $r4.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: void <init>(int)>(i0);

        r6 = $r4;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperDisplaySize(com.android.server.wallpaper.WallpaperManagerService$DisplayData,int)>($r4, i0);

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mDisplayDatas>;

        virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, $r4);

     label1:
        return r6;
    }

    private int getMaximumSizeDimension(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1;
        android.view.Display r1, r11;
        android.hardware.display.DisplayManager $r2, $r10;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, $r9;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        r1 = virtualinvoke $r2.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        r11 = r1;

        if r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid displayId=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r9);

        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        r11 = virtualinvoke $r10.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

     label1:
        $i1 = virtualinvoke r11.<android.view.Display: int getMaximumSizeDimension()>();

        return $i1;
    }

    private android.os.RemoteCallbackList getWallpaperCallbacks(int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3, $r4;
        android.os.RemoteCallbackList r5;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 = null;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mColorsChangedListeners>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.SparseArray) $r3;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (android.os.RemoteCallbackList) $r4;

     label1:
        return r5;
    }

    private com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1, $r4, $r7, r11, r12;
        java.lang.Object $r2, $r3;
        java.io.File $r5, $r8;
        android.util.SparseArray $r6, $r9, r10;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 2 goto label1;

        r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        goto label2;

     label1:
        r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

     label2:
        $r2 = virtualinvoke r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r2;

        r11 = r1;

        if r1 != null goto label4;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>(i0, 0);

        $r3 = virtualinvoke r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r12 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

        r11 = r12;

        if r12 != null goto label4;

        if i1 != 2 goto label3;

        $r7 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r8 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>(i0, $r8, "wallpaper_lock_orig", "wallpaper_lock");

        r11 = $r7;

        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r7);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperData(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r7);

        goto label4;

     label3:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WallpaperManagerService", "Didn\'t find wallpaper in non-lock case!");

        $r4 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r5 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>(i0, $r5, "wallpaper_orig", "wallpaper");

        r11 = $r4;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r4);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperData(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r4);

     label4:
        return r11;
    }

    private void initializeFallbackWallpaper()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r2, $r3, $r5, $r6;
        java.io.File $r4;
        int $i0;
        android.content.ComponentName $r7;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        if $r2 != null goto label1;

        $r3 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r4 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>(0, $r4, "wallpaper_orig", "wallpaper");

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper> = $r3;

        $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup> = 0;

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $i0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int makeWallpaperIdLocked()>();

        $r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i0;

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r7, 1, 0, $r6, null);

     label1:
        return;
    }

    private boolean isValidDisplay(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        android.hardware.display.DisplayManager $r1;
        android.view.Display $r2;
        boolean z0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        $r2 = virtualinvoke $r1.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$attachServiceLocked$7(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r2;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r2 := @parameter2: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

        virtualinvoke r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: void connectLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r0, r1);

        return;
    }

    static void lambda$dump$10(java.io.PrintWriter, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        java.io.PrintWriter r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r1;
        int $i0;
        android.os.Binder $r2;
        android.service.wallpaper.IWallpaperEngine $r3;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("     mDisplayId=");

        $i0 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: int mDisplayId>;

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("     mToken=");

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.os.Binder mToken>;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>($r2);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("     mEngine=");

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>($r3);

        return;
    }

    static void lambda$dump$8(java.io.PrintWriter, com.android.server.wallpaper.WallpaperManagerService$DisplayData)
    {
        java.io.PrintWriter r0;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r1;
        int $i0, $i1, $i2;
        android.graphics.Rect $r2;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$DisplayData;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  displayId=");

        $i0 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mDisplayId>;

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  mWidth=");

        $i1 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  mHeight=");

        $i2 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i2);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  mPadding=");

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>($r2);

        return;
    }

    static void lambda$dump$9(java.io.PrintWriter, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        java.io.PrintWriter r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r1;
        int $i0;
        android.os.Binder $r2;
        android.service.wallpaper.IWallpaperEngine $r3;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("     mDisplayId=");

        $i0 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: int mDisplayId>;

        virtualinvoke r0.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("     mToken=");

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.os.Binder mToken>;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>($r2);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("     mEngine=");

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>($r3);

        return;
    }

    static void lambda$setWallpaperComponent$6(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        android.service.wallpaper.IWallpaperEngine $r0, $r1;
        android.os.RemoteException $r2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r3;

        r3 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

     label1:
        $r0 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r0 == null goto label2;

        $r1 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

        interfaceinvoke $r1.<android.service.wallpaper.IWallpaperEngine: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>("android.wallpaper.reapply", 0, 0, 0, null);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Error sending apply message to wallpaper", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$updateFallbackConnection$1(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r0;
        android.service.wallpaper.IWallpaperEngine $r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r1 == null goto label1;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: void disconnectLocked()>();

     label1:
        return;
    }

    static boolean lambda$updateFallbackConnection$2(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection, android.view.Display)
    {
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r0;
        android.view.Display r1;
        boolean $z0, $z1, z2;
        int $i0, $i1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        r1 := @parameter1: android.view.Display;

        $z0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: boolean isUsableDisplay(android.view.Display)>(r1);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        $z1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: boolean containsDisplay(int)>($i1);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void loadSettingsLocked(int, boolean)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, $i2, $i3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.io.File r1, $r16, $r24;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r2;
        org.xmlpull.v1.XmlPullParser r3;
        java.lang.String r4, $r8, $r12, $r13, $r21, $r22, r67, $r76, $r79, $r82, $r85, $r88;
        android.util.SparseArray $r5, $r11, $r14, $r17, $r25, $r89;
        java.lang.Object $r6, $r15, $r90;
        java.nio.charset.Charset $r7;
        android.graphics.Rect $r9, $r10;
        android.content.ComponentName $r18, $r19, $r20, r66;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r23, r58, r73, r91;
        java.lang.Throwable $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r35, $r37, $r38, $r40, $r43, $r45, $r46, $r48, $r51, $r52, $r53, $r54, $r55, r69, r70, r71;
        java.lang.NullPointerException $r32, $r33, $r41, $r44, $r49, r72;
        java.lang.IndexOutOfBoundsException $r36, $r39, $r42, $r47, $r50, r68;
        com.android.internal.util.JournaledFile r56;
        java.io.FileInputStream r57, r59, r60, r61, r62, r63, r64, r65;
        java.lang.StringBuilder $r74, $r77, $r80, $r83, $r86;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r56 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r57 = null;

        r1 = virtualinvoke r56.<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>();

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r58 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

        if r58 != null goto label03;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void migrateFromOld()>();

        $r23 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r24 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>(i0, $r24, "wallpaper_orig", "wallpaper");

        r58 = $r23;

        $r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup> = 1;

        $r25 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r25.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r23);

        $z4 = virtualinvoke $r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean cropExists()>();

        if $z4 != 0 goto label02;

        $z5 = virtualinvoke $r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean sourceExists()>();

        if $z5 == 0 goto label01;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void generateCrop(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r23);

        goto label02;

     label01:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WallpaperManagerService", "No static wallpaper imagery; defaults will be shown");

     label02:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void initializeFallbackWallpaper()>();

        goto label03;

     label03:
        z6 = 0;

        r2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(0);

     label04:
        r59 = new java.io.FileInputStream;

        specialinvoke r59.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label05:
        r57 = r59;

        r60 = r59;

        r61 = r59;

        r62 = r59;

        r63 = r59;

        r64 = r59;

        r65 = r59;

     label06:
        r3 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label07:
        r60 = r59;

        r61 = r59;

        r62 = r59;

        r63 = r59;

        r64 = r59;

        r65 = r59;

     label08:
        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r59, $r8);

     label09:
        r60 = r59;

        r61 = r59;

        r62 = r59;

        r63 = r59;

        r64 = r59;

        r65 = r59;

     label10:
        i1 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int next()>();

     label11:
        if i1 != 2 goto label53;

        r60 = r59;

        r61 = r59;

        r62 = r59;

        r63 = r59;

        r64 = r59;

        r65 = r59;

     label12:
        r4 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label13:
        r60 = r59;

        r61 = r59;

        r62 = r59;

        r63 = r59;

        r64 = r59;

        r65 = r59;

     label14:
        $r12 = "wp";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label39;

     label15:
        r60 = r59;

        r61 = r59;

        r62 = r59;

        r63 = r59;

        r64 = r59;

        r65 = r59;

     label16:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void parseWallpaperAttributes(org.xmlpull.v1.XmlPullParser,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,boolean)>(r3, r58, z0);

     label17:
        r66 = null;

     label18:
        r67 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "component");

     label19:
        if r67 == null goto label28;

     label20:
        r66 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r67);

     label21:
        goto label28;

     label22:
        $r47 := @caughtexception;

        r68 = $r47;

        goto label62;

     label23:
        $r45 := @caughtexception;

        r69 = $r45;

        goto label64;

     label24:
        $r30 := @caughtexception;

        r70 = $r30;

        goto label66;

     label25:
        $r46 := @caughtexception;

        r71 = $r46;

        goto label68;

     label26:
        $r41 := @caughtexception;

        r72 = $r41;

        goto label70;

     label27:
        $r38 := @caughtexception;

        goto label72;

     label28:
        r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent> = r66;

        $r18 = r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        if $r18 == null goto label31;

     label29:
        $r21 = "android";

        $r20 = r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $r22 = virtualinvoke $r20.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z3 == 0 goto label46;

     label30:
        goto label31;

     label31:
        $r19 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent> = $r19;

     label32:
        goto label46;

     label33:
        $r36 := @caughtexception;

        r68 = $r36;

        goto label62;

     label34:
        $r52 := @caughtexception;

        r69 = $r52;

        goto label64;

     label35:
        $r34 := @caughtexception;

        r70 = $r34;

        goto label66;

     label36:
        $r51 := @caughtexception;

        r71 = $r51;

        goto label68;

     label37:
        $r44 := @caughtexception;

        r72 = $r44;

        goto label70;

     label38:
        $r43 := @caughtexception;

        goto label72;

     label39:
        $r13 = "kwp";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label46;

        $r14 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r15 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r73 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r15;

     label40:
        if r73 != null goto label44;

     label41:
        r73 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r16 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke r73.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>(i0, $r16, "wallpaper_lock_orig", "wallpaper_lock");

     label42:
        $r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r73);

     label43:
        goto label44;

     label44:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void parseWallpaperAttributes(org.xmlpull.v1.XmlPullParser,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,boolean)>(r3, r73, 0);

     label45:
        goto label53;

     label46:
        goto label53;

     label47:
        $r42 := @caughtexception;

        r68 = $r42;

        goto label62;

     label48:
        $r48 := @caughtexception;

        r69 = $r48;

        goto label64;

     label49:
        $r37 := @caughtexception;

        r70 = $r37;

        goto label66;

     label50:
        $r55 := @caughtexception;

        r71 = $r55;

        goto label68;

     label51:
        $r49 := @caughtexception;

        r72 = $r49;

        goto label70;

     label52:
        $r29 := @caughtexception;

        goto label72;

     label53:
        if i1 != 1 goto label54;

        z6 = 1;

        goto label73;

     label54:
        goto label09;

     label55:
        $r39 := @caughtexception;

        r68 = $r39;

        r57 = r60;

        goto label62;

     label56:
        $r54 := @caughtexception;

        r69 = $r54;

        r57 = r61;

        goto label64;

     label57:
        $r26 := @caughtexception;

        r70 = $r26;

        r57 = r62;

        goto label66;

     label58:
        $r40 := @caughtexception;

        r71 = $r40;

        r57 = r63;

        goto label68;

     label59:
        $r33 := @caughtexception;

        r72 = $r33;

        r57 = r64;

        goto label70;

     label60:
        $r31 := @caughtexception;

        r57 = r65;

        goto label72;

     label61:
        $r50 := @caughtexception;

        r68 = $r50;

     label62:
        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r68);

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r76);

        goto label73;

     label63:
        $r53 := @caughtexception;

        r69 = $r53;

        r57 = null;

     label64:
        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r69);

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r79);

        goto label73;

     label65:
        $r35 := @caughtexception;

        r70 = $r35;

        r57 = null;

     label66:
        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70);

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r82);

        goto label73;

     label67:
        $r27 := @caughtexception;

        r71 = $r27;

        r57 = null;

     label68:
        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r71);

        $r85 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r85);

        goto label73;

     label69:
        $r32 := @caughtexception;

        r72 = $r32;

        r57 = null;

     label70:
        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r72);

        $r88 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r88);

        goto label73;

     label71:
        $r28 := @caughtexception;

        r57 = null;

     label72:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "no current wallpaper -- first boot?");

     label73:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r57);

        if z6 != 0 goto label74;

        $r9 = r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke $r9.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        $r10 = r2.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        virtualinvoke $r10.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = "";

        $r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        virtualinvoke $r11.<android.util.SparseArray: void remove(int)>(i0);

        goto label75;

     label74:
        $i2 = r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        if $i2 > 0 goto label75;

        $i3 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int makeWallpaperIdLocked()>();

        r58.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i3;

     label75:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperDisplaySize(com.android.server.wallpaper.WallpaperManagerService$DisplayData,int)>(r2, 0);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperData(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r58);

        $r89 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r90 = virtualinvoke $r89.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r91 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r90;

        if r91 == null goto label76;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperData(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r91);

     label76:
        return;

        catch java.io.FileNotFoundException from label04 to label05 with label71;
        catch java.lang.NullPointerException from label04 to label05 with label69;
        catch java.lang.NumberFormatException from label04 to label05 with label67;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label65;
        catch java.io.IOException from label04 to label05 with label63;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label61;
        catch java.io.FileNotFoundException from label06 to label07 with label60;
        catch java.lang.NullPointerException from label06 to label07 with label59;
        catch java.lang.NumberFormatException from label06 to label07 with label58;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label57;
        catch java.io.IOException from label06 to label07 with label56;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label55;
        catch java.io.FileNotFoundException from label08 to label09 with label60;
        catch java.lang.NullPointerException from label08 to label09 with label59;
        catch java.lang.NumberFormatException from label08 to label09 with label58;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label57;
        catch java.io.IOException from label08 to label09 with label56;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label55;
        catch java.io.FileNotFoundException from label10 to label11 with label60;
        catch java.lang.NullPointerException from label10 to label11 with label59;
        catch java.lang.NumberFormatException from label10 to label11 with label58;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label57;
        catch java.io.IOException from label10 to label11 with label56;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label55;
        catch java.io.FileNotFoundException from label12 to label13 with label60;
        catch java.lang.NullPointerException from label12 to label13 with label59;
        catch java.lang.NumberFormatException from label12 to label13 with label58;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label57;
        catch java.io.IOException from label12 to label13 with label56;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label55;
        catch java.io.FileNotFoundException from label14 to label15 with label60;
        catch java.lang.NullPointerException from label14 to label15 with label59;
        catch java.lang.NumberFormatException from label14 to label15 with label58;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label57;
        catch java.io.IOException from label14 to label15 with label56;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label55;
        catch java.io.FileNotFoundException from label16 to label17 with label60;
        catch java.lang.NullPointerException from label16 to label17 with label59;
        catch java.lang.NumberFormatException from label16 to label17 with label58;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label57;
        catch java.io.IOException from label16 to label17 with label56;
        catch java.lang.IndexOutOfBoundsException from label16 to label17 with label55;
        catch java.io.FileNotFoundException from label18 to label19 with label38;
        catch java.lang.NullPointerException from label18 to label19 with label37;
        catch java.lang.NumberFormatException from label18 to label19 with label36;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label35;
        catch java.io.IOException from label18 to label19 with label34;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label33;
        catch java.io.FileNotFoundException from label20 to label21 with label27;
        catch java.lang.NullPointerException from label20 to label21 with label26;
        catch java.lang.NumberFormatException from label20 to label21 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label24;
        catch java.io.IOException from label20 to label21 with label23;
        catch java.lang.IndexOutOfBoundsException from label20 to label21 with label22;
        catch java.io.FileNotFoundException from label28 to label29 with label38;
        catch java.lang.NullPointerException from label28 to label29 with label37;
        catch java.lang.NumberFormatException from label28 to label29 with label36;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label35;
        catch java.io.IOException from label28 to label29 with label34;
        catch java.lang.IndexOutOfBoundsException from label28 to label29 with label33;
        catch java.io.FileNotFoundException from label29 to label30 with label52;
        catch java.lang.NullPointerException from label29 to label30 with label51;
        catch java.lang.NumberFormatException from label29 to label30 with label50;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label49;
        catch java.io.IOException from label29 to label30 with label48;
        catch java.lang.IndexOutOfBoundsException from label29 to label30 with label47;
        catch java.io.FileNotFoundException from label31 to label32 with label52;
        catch java.lang.NullPointerException from label31 to label32 with label51;
        catch java.lang.NumberFormatException from label31 to label32 with label50;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label49;
        catch java.io.IOException from label31 to label32 with label48;
        catch java.lang.IndexOutOfBoundsException from label31 to label32 with label47;
        catch java.io.FileNotFoundException from label39 to label40 with label52;
        catch java.lang.NullPointerException from label39 to label40 with label51;
        catch java.lang.NumberFormatException from label39 to label40 with label50;
        catch org.xmlpull.v1.XmlPullParserException from label39 to label40 with label49;
        catch java.io.IOException from label39 to label40 with label48;
        catch java.lang.IndexOutOfBoundsException from label39 to label40 with label47;
        catch java.io.FileNotFoundException from label41 to label42 with label52;
        catch java.lang.NullPointerException from label41 to label42 with label51;
        catch java.lang.NumberFormatException from label41 to label42 with label50;
        catch org.xmlpull.v1.XmlPullParserException from label41 to label42 with label49;
        catch java.io.IOException from label41 to label42 with label48;
        catch java.lang.IndexOutOfBoundsException from label41 to label42 with label47;
        catch java.io.FileNotFoundException from label42 to label43 with label52;
        catch java.lang.NullPointerException from label42 to label43 with label51;
        catch java.lang.NumberFormatException from label42 to label43 with label50;
        catch org.xmlpull.v1.XmlPullParserException from label42 to label43 with label49;
        catch java.io.IOException from label42 to label43 with label48;
        catch java.lang.IndexOutOfBoundsException from label42 to label43 with label47;
        catch java.io.FileNotFoundException from label44 to label45 with label52;
        catch java.lang.NullPointerException from label44 to label45 with label51;
        catch java.lang.NumberFormatException from label44 to label45 with label50;
        catch org.xmlpull.v1.XmlPullParserException from label44 to label45 with label49;
        catch java.io.IOException from label44 to label45 with label48;
        catch java.lang.IndexOutOfBoundsException from label44 to label45 with label47;
    }

    private com.android.internal.util.JournaledFile makeJournaledFile(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        java.lang.String r1, $r12;
        java.io.File $r4, $r5, $r6, $r11;
        java.lang.StringBuilder $r7;
        com.android.internal.util.JournaledFile $r10;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r4 = new java.io.File;

        $r5 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "wallpaper_info.xml");

        r1 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r10 = new com.android.internal.util.JournaledFile;

        $r11 = new java.io.File;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r12);

        specialinvoke $r10.<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>($r6, $r11);

        return $r10;
    }

    private void migrateFromOld()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.io.File $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z6;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r5 = new java.io.File;

        $r6 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "wallpaper");

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>("/data/data/com.android.settings/files/wallpaper");

        $r8 = new java.io.File;

        $r9 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "wallpaper_orig");

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z6 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z6 != 0 goto label3;

        staticinvoke <android.os.FileUtils: boolean copyFile(java.io.File,java.io.File)>($r5, $r8);

        goto label3;

     label1:
        $z1 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>("/data/system/wallpaper_info.xml");

        $z2 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label2;

        $r11 = new java.io.File;

        $r12 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "wallpaper_info.xml");

        virtualinvoke $r10.<java.io.File: boolean renameTo(java.io.File)>($r11);

     label2:
        staticinvoke <android.os.FileUtils: boolean copyFile(java.io.File,java.io.File)>($r7, $r5);

        virtualinvoke $r7.<java.io.File: boolean renameTo(java.io.File)>($r8);

     label3:
        return;
    }

    private void migrateSystemToLockWallpaperLocked(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1;
        android.util.SparseArray $r3, $r18;
        java.lang.Object $r4;
        java.io.File $r6, $r10, $r12, $r14, $r16, $r25, $r26;
        android.graphics.Rect $r7, $r8;
        boolean $z0;
        android.app.WallpaperColors $r9;
        java.lang.String $r11, $r13, $r15, $r17, $r22, $r24;
        java.lang.Throwable $r19;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r27, r29;
        java.lang.StringBuilder r30;
        android.system.ErrnoException r31;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r27 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r4;

        if r27 != null goto label1;

        return;

     label1:
        r29 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r6 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>(i0, $r6, "wallpaper_lock_orig", "wallpaper_lock");

        $i1 = r27.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i1;

        $r8 = r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $r7 = r27.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        $z0 = r27.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup>;

        r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup> = $z0;

        $r9 = r27.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = $r9;

     label2:
        $r10 = r27.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        $r12 = r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void rename(java.lang.String,java.lang.String)>($r11, $r13);

        $r14 = r27.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>();

        $r16 = r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        $r17 = virtualinvoke $r16.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void rename(java.lang.String,java.lang.String)>($r15, $r17);

     label3:
        $r18 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        virtualinvoke $r18.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r29);

        return;

     label4:
        $r19 := @caughtexception;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t migrate system wallpaper: ");

        r31 = (android.system.ErrnoException) $r19;

        $r22 = virtualinvoke r31.<android.system.ErrnoException: java.lang.String getMessage()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r24);

        $r25 = r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        virtualinvoke $r25.<java.io.File: boolean delete()>();

        $r26 = r29.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        virtualinvoke $r26.<java.io.File: boolean delete()>();

        return;

        catch android.system.ErrnoException from label2 to label3 with label4;
    }

    private void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1, i2;
        android.os.RemoteCallbackList $r2, $r3, $r7;
        android.content.Intent $r4;
        android.os.UserHandle $r5;
        android.content.Context $r6;
        android.os.IInterface $r8;
        android.app.IWallpaperManagerCallback $r9;
        android.os.RemoteException $r10;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r11;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r11 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r2 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$3000(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r11);

        i0 = virtualinvoke $r2.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

     label2:
        $r7 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$3000(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r11);

        $r8 = virtualinvoke $r7.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i2);

        $r9 = (android.app.IWallpaperManagerCallback) $r8;

        interfaceinvoke $r9.<android.app.IWallpaperManagerCallback: void onWallpaperChanged()>();

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r3 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$3000(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r11);

        virtualinvoke $r3.<android.os.RemoteCallbackList: void finishBroadcast()>();

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.WALLPAPER_CHANGED");

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r5 = new android.os.UserHandle;

        $i1 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        specialinvoke $r5.<android.os.UserHandle: void <init>(int)>($i1);

        virtualinvoke $r6.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r5);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void notifyColorListeners(android.app.WallpaperColors, int, int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        android.os.RemoteCallbackList r2, r3;
        android.app.IWallpaperManagerCallback r4, $r7, $r9, $r11;
        java.util.ArrayList $r5;
        java.lang.Object $r6, r16;
        android.os.IInterface $r8, $r10;
        android.os.RemoteException $r12, $r14;
        java.lang.Throwable $r13;
        android.app.WallpaperColors r15;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r15 := @parameter0: android.app.WallpaperColors;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r16 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label01:
        r2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.RemoteCallbackList getWallpaperCallbacks(int,int)>(i1, i2);

        r3 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.RemoteCallbackList getWallpaperCallbacks(int,int)>(-1, i2);

        r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.IWallpaperManagerCallback mKeyguardListener>;

     label02:
        if r2 == null goto label09;

     label03:
        i3 = virtualinvoke r2.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label04:
        i4 = 0;

     label05:
        if i4 >= i3 goto label08;

     label06:
        $r10 = virtualinvoke r2.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i4);

        $r11 = (android.app.IWallpaperManagerCallback) $r10;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label07:
        i4 = i4 + 1;

        goto label05;

     label08:
        virtualinvoke r2.<android.os.RemoteCallbackList: void finishBroadcast()>();

     label09:
        if r3 == null goto label16;

     label10:
        i5 = virtualinvoke r3.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label11:
        i6 = 0;

     label12:
        if i6 >= i5 goto label15;

     label13:
        $r8 = virtualinvoke r3.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i6);

        $r9 = (android.app.IWallpaperManagerCallback) $r8;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label14:
        i6 = i6 + 1;

        goto label12;

     label15:
        virtualinvoke r3.<android.os.RemoteCallbackList: void finishBroadcast()>();

     label16:
        exitmonitor r16;

     label17:
        i7 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i8 = 0;

     label18:
        if i8 >= i7 goto label23;

     label19:
        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r7 = (android.app.IWallpaperManagerCallback) $r6;

        interfaceinvoke $r7.<android.app.IWallpaperManagerCallback: void onWallpaperColorsChanged(android.app.WallpaperColors,int,int)>(r15, i0, i1);

     label20:
        goto label22;

     label21:
        $r14 := @caughtexception;

     label22:
        i8 = i8 + 1;

        goto label18;

     label23:
        if r4 == null goto label27;

        if i2 != 0 goto label27;

     label24:
        interfaceinvoke r4.<android.app.IWallpaperManagerCallback: void onWallpaperColorsChanged(android.app.WallpaperColors,int,int)>(r15, i0, i1);

     label25:
        goto label27;

     label26:
        $r12 := @caughtexception;

     label27:
        return;

     label28:
        $r13 := @caughtexception;

     label29:
        exitmonitor r16;

     label30:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch android.os.RemoteException from label19 to label20 with label21;
        catch android.os.RemoteException from label24 to label25 with label26;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private void notifyLockWallpaperChanged()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.os.RemoteException $r1;
        android.app.IWallpaperManagerCallback r2;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.IWallpaperManagerCallback mKeyguardListener>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.app.IWallpaperManagerCallback: void onWallpaperChanged()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        int i0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r2, $r4;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$la7x4YHA_l88Cd6HFTscnLBbKfI $r3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        i0 := @parameter1: int;

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r2 == null goto label1;

        $r4 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r3 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$la7x4YHA_l88Cd6HFTscnLBbKfI;

        specialinvoke $r3.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$la7x4YHA_l88Cd6HFTscnLBbKfI: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r0, r1, i0);

        virtualinvoke $r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>($r3);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChangedOnDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int,int)>(r1, i0, 0);

     label2:
        return;
    }

    private void notifyWallpaperColorsChangedOnDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperData, int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        android.os.RemoteCallbackList r1, r2;
        boolean $z0, $z1, z2;
        android.app.WallpaperColors $r3, $r4, $r5, $r6;
        java.lang.Throwable $r7, $r8;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r9;
        java.lang.Object r10, r11;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r9 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r10;

     label01:
        $i2 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        r1 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.RemoteCallbackList getWallpaperCallbacks(int,int)>($i2, i1);

        r2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.RemoteCallbackList getWallpaperCallbacks(int,int)>(-1, i1);

        $z0 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: boolean emptyCallbackList(android.os.RemoteCallbackList)>(r1);

        if $z0 == 0 goto label03;

        $z1 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: boolean emptyCallbackList(android.os.RemoteCallbackList)>(r2);

        if $z1 == 0 goto label03;

        exitmonitor r10;

     label02:
        return;

     label03:
        $r3 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        if $r3 != null goto label05;

     label04:
        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        exitmonitor r10;

     label07:
        $r4 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        $i3 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyColorListeners(android.app.WallpaperColors,int,int,int)>($r4, i0, $i3, i1);

        if z2 == 0 goto label15;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void extractColors(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r9);

        r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label08:
        $r5 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        if $r5 != null goto label10;

        exitmonitor r11;

     label09:
        return;

     label10:
        exitmonitor r11;

     label11:
        $r6 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        $i4 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyColorListeners(android.app.WallpaperColors,int,int,int)>($r6, i0, $i4, i1);

        goto label15;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r11;

     label14:
        throw $r7;

     label15:
        return;

     label16:
        $r8 := @caughtexception;

     label17:
        exitmonitor r10;

     label18:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void onDisplayReadyInternal(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r14;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r4, $r7, $r10, $r12, $r15;
        boolean $z0;
        java.lang.Throwable $r16;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r17, r18;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        if $r2 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        $r4 = $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean supportsMultiDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>($r4);

        if $z0 == 0 goto label09;

        $r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        $r12 = $r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        r17 = virtualinvoke $r12.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>(i0);

     label04:
        if r17 != null goto label07;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        $r15 = $r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r14 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        virtualinvoke r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: void connectLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r15, $r14);

        exitmonitor r1;

     label08:
        return;

     label09:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        if $r5 == null goto label15;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r7 = $r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        r18 = virtualinvoke $r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>(i0);

     label10:
        if r18 != null goto label13;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r10 = $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        virtualinvoke r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: void connectLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r10, $r9);

     label14:
        goto label16;

     label15:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "No wallpaper can be added to the new display");

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r16 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private void parseWallpaperAttributes(org.xmlpull.v1.XmlPullParser, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, boolean)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        android.graphics.Rect $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        android.app.WallpaperColors $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r15, $r16, $r17, r18, $r25, $r26, $r27;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r19;
        android.graphics.Color r20, r21, r22, r24;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        z0 := @parameter2: boolean;

        r18 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "id");

        if r18 == null goto label02;

        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r18);

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = i15;

        $i14 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mWallpaperId>;

        if i15 <= $i14 goto label01;

        r0.<com.android.server.wallpaper.WallpaperManagerService: int mWallpaperId> = i15;

     label01:
        goto label03;

     label02:
        $i1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int makeWallpaperIdLocked()>();

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i1;

     label03:
        r19 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(0);

        if z0 != 0 goto label04;

        $r16 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "width");

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth> = $i12;

        $r17 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "height");

        $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight> = $i13;

     label04:
        $r3 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "cropLeft", 0);

        $r3.<android.graphics.Rect: int left> = $i2;

        $r4 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i3 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "cropTop", 0);

        $r4.<android.graphics.Rect: int top> = $i3;

        $r5 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i4 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "cropRight", 0);

        $r5.<android.graphics.Rect: int right> = $i4;

        $r6 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i5 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "cropBottom", 0);

        $r6.<android.graphics.Rect: int bottom> = $i5;

        $r7 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i6 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "paddingLeft", 0);

        $r7.<android.graphics.Rect: int left> = $i6;

        $r8 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i7 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "paddingTop", 0);

        $r8.<android.graphics.Rect: int top> = $i7;

        $r9 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i8 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "paddingRight", 0);

        $r9.<android.graphics.Rect: int right> = $i8;

        $r10 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i9 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "paddingBottom", 0);

        $r10.<android.graphics.Rect: int bottom> = $i9;

        i0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "colorsCount", 0);

        if i0 <= 0 goto label10;

        r20 = null;

        r21 = null;

        r22 = null;

        i16 = 0;

     label05:
        if i16 >= i0 goto label09;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("colorValue");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $i11 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, $r15, 0);

        r24 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(int)>($i11);

        if i16 != 0 goto label06;

        r20 = r24;

        goto label08;

     label06:
        if i16 != 1 goto label07;

        r21 = r24;

        goto label08;

     label07:
        if i16 != 2 goto label09;

        r22 = r24;

     label08:
        i16 = i16 + 1;

        goto label05;

     label09:
        $r11 = new android.app.WallpaperColors;

        $i10 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "colorHints", 0);

        specialinvoke $r11.<android.app.WallpaperColors: void <init>(android.graphics.Color,android.graphics.Color,android.graphics.Color,int)>(r20, r21, r22, $i10);

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = $r11;

     label10:
        $r25 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = $r25;

        $r26 = "true";

        $r27 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "backup");

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup> = $z1;

        return;
    }

    private void removeDisplayData(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mDisplayDatas>;

        virtualinvoke $r1.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    private boolean restoreNamedResourceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r7, $r13, $r16, $r19, $r22, r24, r25, r26;
        android.content.res.Resources r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        boolean $z0, $z1;
        android.content.Context $r8, $r9;
        java.io.File $r10, $r11, $r12, $r14, $r15;
        java.lang.Throwable $r17, $r20;
        android.content.res.Resources$NotFoundException $r18;
        android.content.pm.PackageManager$NameNotFoundException $r21;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r23;
        java.io.InputStream r27, r30, r33, r36, r40;
        java.io.FileOutputStream r28, r29, r31, r32, r34, r35, r37, r38, r41, r42, r48, r49;
        java.lang.StringBuilder r39, r45, r50, r51;
        byte[] r44;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r23 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r3 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= 4 goto label104;

        $r5 = "res:";

        $r4 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label104;

        $r7 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        r1 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(4);

        i5 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if i5 <= 0 goto label001;

        r24 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        goto label002;

     label001:
        r24 = null;

     label002:
        i6 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(47);

        if i6 <= 0 goto label003;

        $i4 = i6 + 1;

        r25 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i4);

        goto label004;

     label003:
        r25 = null;

     label004:
        if i5 <= 0 goto label005;

        if i6 <= 0 goto label005;

        $i2 = i6 - i5;

        if $i2 <= 1 goto label005;

        $i3 = i5 + 1;

        r26 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i3, i6);

        goto label006;

     label005:
        r26 = null;

     label006:
        if r24 == null goto label103;

        if r25 == null goto label103;

        if r26 == null goto label103;

        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = -1;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label007:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r24, 4);

        r2 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

     label008:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = -1;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label009:
        i8 = virtualinvoke r2.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r1, null, null);

     label010:
        if i8 != 0 goto label031;

        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label011:
        r39 = new java.lang.StringBuilder;

     label012:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label013:
        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

     label014:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label015:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t resolve identifier pkg=");

     label016:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label017:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

     label018:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label019:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

     label020:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label021:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

     label022:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label023:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ident=");

     label024:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label025:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

     label026:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label027:
        $r16 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r16);

     label028:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(null);

        goto label029;

     label029:
        goto label030;

     label030:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(null);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(null);

        return 0;

     label031:
        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = null;

        r34 = null;

        r35 = null;

        r36 = null;

        r37 = null;

        r38 = null;

     label032:
        r40 = virtualinvoke r2.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i8);

     label033:
        r27 = r40;

        r28 = null;

        r29 = null;

        r30 = r40;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = null;

        r35 = null;

        r36 = r40;

        r37 = null;

        r38 = null;

     label034:
        $r10 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label039;

     label035:
        r27 = r40;

        r28 = null;

        r29 = null;

        r30 = r40;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = null;

        r35 = null;

        r36 = r40;

        r37 = null;

        r38 = null;

     label036:
        $r14 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        virtualinvoke $r14.<java.io.File: boolean delete()>();

     label037:
        r27 = r40;

        r28 = null;

        r29 = null;

        r30 = r40;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = null;

        r35 = null;

        r36 = r40;

        r37 = null;

        r38 = null;

     label038:
        $r15 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        virtualinvoke $r15.<java.io.File: boolean delete()>();

     label039:
        r27 = r40;

        r28 = null;

        r29 = null;

        r30 = r40;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = null;

        r35 = null;

        r36 = r40;

        r37 = null;

        r38 = null;

     label040:
        r41 = new java.io.FileOutputStream;

     label041:
        r27 = r40;

        r28 = null;

        r29 = null;

        r30 = r40;

        r31 = null;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = null;

        r35 = null;

        r36 = r40;

        r37 = null;

        r38 = null;

     label042:
        $r11 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        specialinvoke r41.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

     label043:
        r27 = r40;

        r28 = r41;

        r29 = null;

        r30 = r40;

        r31 = r41;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = null;

        r36 = r40;

        r37 = r41;

        r38 = null;

     label044:
        r42 = new java.io.FileOutputStream;

     label045:
        r27 = r40;

        r28 = r41;

        r29 = null;

        r30 = r40;

        r31 = r41;

        r32 = null;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = null;

        r36 = r40;

        r37 = r41;

        r38 = null;

     label046:
        $r12 = r23.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        specialinvoke r42.<java.io.FileOutputStream: void <init>(java.io.File)>($r12);

     label047:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label048:
        r44 = newarray (byte)[32768];

     label049:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label050:
        i0 = virtualinvoke r40.<java.io.InputStream: int read(byte[])>(r44);

     label051:
        if i0 <= 0 goto label056;

        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label052:
        virtualinvoke r41.<java.io.FileOutputStream: void write(byte[],int,int)>(r44, 0, i0);

     label053:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label054:
        virtualinvoke r42.<java.io.FileOutputStream: void write(byte[],int,int)>(r44, 0, i0);

     label055:
        goto label049;

     label056:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label057:
        r45 = new java.lang.StringBuilder;

     label058:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label059:
        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

     label060:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label061:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restored wallpaper: ");

     label062:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label063:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label064:
        r27 = r40;

        r28 = r41;

        r29 = r42;

        r30 = r40;

        r31 = r41;

        r32 = r42;

        i7 = i8;

        r33 = r40;

        r34 = r41;

        r35 = r42;

        r36 = r40;

        r37 = r41;

        r38 = r42;

     label065:
        $r13 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperManagerService", $r13);

     label066:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r40);

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r41);

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r42);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r41);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r42);

        return 1;

     label067:
        $r17 := @caughtexception;

        goto label100;

     label068:
        $r20 := @caughtexception;

        r27 = r30;

        r28 = r31;

        r29 = r32;

     label069:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "IOException while restoring wallpaper ", $r20);

     label070:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r30);

        if r31 == null goto label071;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r31);

     label071:
        r48 = r31;

        r49 = r32;

        if r32 == null goto label073;

        r49 = r32;

        r34 = r31;

     label072:
        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r49);

        r48 = r34;

     label073:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r48);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r49);

        goto label104;

     label074:
        $r18 := @caughtexception;

        r27 = r33;

        r28 = r34;

        r29 = r35;

     label075:
        r50 = new java.lang.StringBuilder;

     label076:
        r27 = r33;

        r28 = r34;

        r29 = r35;

     label077:
        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

     label078:
        r27 = r33;

        r28 = r34;

        r29 = r35;

     label079:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found: ");

     label080:
        r27 = r33;

        r28 = r34;

        r29 = r35;

     label081:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

     label082:
        r27 = r33;

        r28 = r34;

        r29 = r35;

     label083:
        $r19 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r19);

     label084:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r33);

        if r34 == null goto label085;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r34);

     label085:
        r48 = r34;

        r49 = r35;

        if r35 == null goto label073;

        r49 = r35;

        goto label072;

     label086:
        $r21 := @caughtexception;

        r27 = r36;

        r28 = r37;

        r29 = r38;

     label087:
        r51 = new java.lang.StringBuilder;

     label088:
        r27 = r36;

        r28 = r37;

        r29 = r38;

     label089:
        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

     label090:
        r27 = r36;

        r28 = r37;

        r29 = r38;

     label091:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package name ");

     label092:
        r27 = r36;

        r28 = r37;

        r29 = r38;

     label093:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

     label094:
        r27 = r36;

        r28 = r37;

        r29 = r38;

     label095:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

     label096:
        r27 = r36;

        r28 = r37;

        r29 = r38;

     label097:
        $r22 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r22);

     label098:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r36);

        if r37 == null goto label099;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r37);

     label099:
        r48 = r37;

        r49 = r38;

        if r38 == null goto label073;

        r34 = r37;

        r49 = r38;

        goto label072;

     label100:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r27);

        if r28 == null goto label101;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r28);

     label101:
        if r29 == null goto label102;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r29);

     label102:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r28);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r29);

        throw $r17;

     label103:
        goto label104;

     label104:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label007 to label008 with label086;
        catch android.content.res.Resources$NotFoundException from label007 to label008 with label074;
        catch java.io.IOException from label007 to label008 with label068;
        catch java.lang.Throwable from label007 to label008 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label009 to label010 with label086;
        catch android.content.res.Resources$NotFoundException from label009 to label010 with label074;
        catch java.io.IOException from label009 to label010 with label068;
        catch java.lang.Throwable from label009 to label010 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label011 to label012 with label086;
        catch android.content.res.Resources$NotFoundException from label011 to label012 with label074;
        catch java.io.IOException from label011 to label012 with label068;
        catch java.lang.Throwable from label011 to label012 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label013 to label014 with label086;
        catch android.content.res.Resources$NotFoundException from label013 to label014 with label074;
        catch java.io.IOException from label013 to label014 with label068;
        catch java.lang.Throwable from label013 to label014 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label015 to label016 with label086;
        catch android.content.res.Resources$NotFoundException from label015 to label016 with label074;
        catch java.io.IOException from label015 to label016 with label068;
        catch java.lang.Throwable from label015 to label016 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label017 to label018 with label086;
        catch android.content.res.Resources$NotFoundException from label017 to label018 with label074;
        catch java.io.IOException from label017 to label018 with label068;
        catch java.lang.Throwable from label017 to label018 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label019 to label020 with label086;
        catch android.content.res.Resources$NotFoundException from label019 to label020 with label074;
        catch java.io.IOException from label019 to label020 with label068;
        catch java.lang.Throwable from label019 to label020 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label021 to label022 with label086;
        catch android.content.res.Resources$NotFoundException from label021 to label022 with label074;
        catch java.io.IOException from label021 to label022 with label068;
        catch java.lang.Throwable from label021 to label022 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label023 to label024 with label086;
        catch android.content.res.Resources$NotFoundException from label023 to label024 with label074;
        catch java.io.IOException from label023 to label024 with label068;
        catch java.lang.Throwable from label023 to label024 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label025 to label026 with label086;
        catch android.content.res.Resources$NotFoundException from label025 to label026 with label074;
        catch java.io.IOException from label025 to label026 with label068;
        catch java.lang.Throwable from label025 to label026 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label027 to label028 with label086;
        catch android.content.res.Resources$NotFoundException from label027 to label028 with label074;
        catch java.io.IOException from label027 to label028 with label068;
        catch java.lang.Throwable from label027 to label028 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label032 to label033 with label086;
        catch android.content.res.Resources$NotFoundException from label032 to label033 with label074;
        catch java.io.IOException from label032 to label033 with label068;
        catch java.lang.Throwable from label032 to label033 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label034 to label035 with label086;
        catch android.content.res.Resources$NotFoundException from label034 to label035 with label074;
        catch java.io.IOException from label034 to label035 with label068;
        catch java.lang.Throwable from label034 to label035 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label036 to label037 with label086;
        catch android.content.res.Resources$NotFoundException from label036 to label037 with label074;
        catch java.io.IOException from label036 to label037 with label068;
        catch java.lang.Throwable from label036 to label037 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label038 to label039 with label086;
        catch android.content.res.Resources$NotFoundException from label038 to label039 with label074;
        catch java.io.IOException from label038 to label039 with label068;
        catch java.lang.Throwable from label038 to label039 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label040 to label041 with label086;
        catch android.content.res.Resources$NotFoundException from label040 to label041 with label074;
        catch java.io.IOException from label040 to label041 with label068;
        catch java.lang.Throwable from label040 to label041 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label042 to label043 with label086;
        catch android.content.res.Resources$NotFoundException from label042 to label043 with label074;
        catch java.io.IOException from label042 to label043 with label068;
        catch java.lang.Throwable from label042 to label043 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label044 to label045 with label086;
        catch android.content.res.Resources$NotFoundException from label044 to label045 with label074;
        catch java.io.IOException from label044 to label045 with label068;
        catch java.lang.Throwable from label044 to label045 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label046 to label047 with label086;
        catch android.content.res.Resources$NotFoundException from label046 to label047 with label074;
        catch java.io.IOException from label046 to label047 with label068;
        catch java.lang.Throwable from label046 to label047 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label048 to label049 with label086;
        catch android.content.res.Resources$NotFoundException from label048 to label049 with label074;
        catch java.io.IOException from label048 to label049 with label068;
        catch java.lang.Throwable from label048 to label049 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label050 to label051 with label086;
        catch android.content.res.Resources$NotFoundException from label050 to label051 with label074;
        catch java.io.IOException from label050 to label051 with label068;
        catch java.lang.Throwable from label050 to label051 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label052 to label053 with label086;
        catch android.content.res.Resources$NotFoundException from label052 to label053 with label074;
        catch java.io.IOException from label052 to label053 with label068;
        catch java.lang.Throwable from label052 to label053 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label054 to label055 with label086;
        catch android.content.res.Resources$NotFoundException from label054 to label055 with label074;
        catch java.io.IOException from label054 to label055 with label068;
        catch java.lang.Throwable from label054 to label055 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label057 to label058 with label086;
        catch android.content.res.Resources$NotFoundException from label057 to label058 with label074;
        catch java.io.IOException from label057 to label058 with label068;
        catch java.lang.Throwable from label057 to label058 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label059 to label060 with label086;
        catch android.content.res.Resources$NotFoundException from label059 to label060 with label074;
        catch java.io.IOException from label059 to label060 with label068;
        catch java.lang.Throwable from label059 to label060 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label061 to label062 with label086;
        catch android.content.res.Resources$NotFoundException from label061 to label062 with label074;
        catch java.io.IOException from label061 to label062 with label068;
        catch java.lang.Throwable from label061 to label062 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label063 to label064 with label086;
        catch android.content.res.Resources$NotFoundException from label063 to label064 with label074;
        catch java.io.IOException from label063 to label064 with label068;
        catch java.lang.Throwable from label063 to label064 with label067;
        catch android.content.pm.PackageManager$NameNotFoundException from label065 to label066 with label086;
        catch android.content.res.Resources$NotFoundException from label065 to label066 with label074;
        catch java.io.IOException from label065 to label066 with label068;
        catch java.lang.Throwable from label065 to label066 with label067;
        catch java.lang.Throwable from label069 to label070 with label067;
        catch java.lang.Throwable from label075 to label076 with label067;
        catch java.lang.Throwable from label077 to label078 with label067;
        catch java.lang.Throwable from label079 to label080 with label067;
        catch java.lang.Throwable from label081 to label082 with label067;
        catch java.lang.Throwable from label083 to label084 with label067;
        catch java.lang.Throwable from label087 to label088 with label067;
        catch java.lang.Throwable from label089 to label090 with label067;
        catch java.lang.Throwable from label091 to label092 with label067;
        catch java.lang.Throwable from label093 to label094 with label067;
        catch java.lang.Throwable from label095 to label096 with label067;
        catch java.lang.Throwable from label097 to label098 with label067;
    }

    private void saveSettingsLocked(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        com.android.internal.util.JournaledFile r1;
        com.android.internal.util.FastXmlSerializer r2;
        java.io.FileOutputStream r3;
        java.io.File $r4;
        java.nio.charset.Charset $r5;
        java.lang.String $r6;
        java.lang.Boolean $r7;
        android.util.SparseArray $r8, $r10;
        java.lang.Object $r9, $r11;
        java.lang.Throwable $r12;
        java.io.BufferedOutputStream r13, r14;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r16, r17;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r13 = null;

     label01:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label02:
        r13 = null;

     label03:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label04:
        r13 = null;

     label05:
        r3 = new java.io.FileOutputStream;

     label06:
        r13 = null;

     label07:
        $r4 = virtualinvoke r1.<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>();

        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r4, 0);

     label08:
        r13 = null;

     label09:
        r14 = new java.io.BufferedOutputStream;

     label10:
        r13 = null;

     label11:
        specialinvoke r14.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r3);

     label12:
        r13 = r14;

     label13:
        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r14, $r6);

     label14:
        r13 = r14;

     label15:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r7);

     label16:
        r13 = r14;

     label17:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r16 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r9;

     label18:
        if r16 == null goto label20;

        r13 = r14;

     label19:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void writeWallpaperAttributes(org.xmlpull.v1.XmlSerializer,java.lang.String,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r2, "wp", r16);

     label20:
        r13 = r14;

     label21:
        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r11;

     label22:
        if r17 == null goto label24;

        r13 = r14;

     label23:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void writeWallpaperAttributes(org.xmlpull.v1.XmlSerializer,java.lang.String,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r2, "kwp", r17);

     label24:
        r13 = r14;

     label25:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label26:
        r13 = r14;

     label27:
        virtualinvoke r14.<java.io.BufferedOutputStream: void flush()>();

     label28:
        r13 = r14;

     label29:
        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r3);

     label30:
        r13 = r14;

     label31:
        virtualinvoke r14.<java.io.BufferedOutputStream: void close()>();

     label32:
        r13 = r14;

     label33:
        virtualinvoke r1.<com.android.internal.util.JournaledFile: void commit()>();

     label34:
        goto label36;

     label35:
        $r12 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r13);

        virtualinvoke r1.<com.android.internal.util.JournaledFile: void rollback()>();

     label36:
        return;

        catch java.io.IOException from label01 to label02 with label35;
        catch java.io.IOException from label03 to label04 with label35;
        catch java.io.IOException from label05 to label06 with label35;
        catch java.io.IOException from label07 to label08 with label35;
        catch java.io.IOException from label09 to label10 with label35;
        catch java.io.IOException from label11 to label12 with label35;
        catch java.io.IOException from label13 to label14 with label35;
        catch java.io.IOException from label15 to label16 with label35;
        catch java.io.IOException from label17 to label18 with label35;
        catch java.io.IOException from label19 to label20 with label35;
        catch java.io.IOException from label21 to label22 with label35;
        catch java.io.IOException from label23 to label24 with label35;
        catch java.io.IOException from label25 to label26 with label35;
        catch java.io.IOException from label27 to label28 with label35;
        catch java.io.IOException from label29 to label30 with label35;
        catch java.io.IOException from label31 to label32 with label35;
        catch java.io.IOException from label33 to label34 with label35;
    }

    private void setWallpaperComponent(android.content.ComponentName, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i2, $i3, i6, $i8;
        java.lang.Object r1, $r7, $r18, r24;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2, $r13;
        long l1;
        boolean z0, $z1, $z2, z3;
        java.lang.String $r5, $r10;
        android.util.SparseArray $r6, $r17, $r23;
        android.content.ComponentName $r11, $r12, r21;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r14, $r16;
        com.android.server.wallpaper.'-$$Lambda$WallpaperManagerService$pePYR2FPkz66RXZXwMS35xFK0MM' $r15;
        java.lang.Throwable $r19, $r20;
        byte b7;
        java.lang.StringBuilder r29, r30;
        java.lang.IllegalStateException r31;
        java.util.function.Consumer r32;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r21 := @parameter0: android.content.ComponentName;

        i6 := @parameter1: int;

        $i2 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: int getCallingPid()>();

        $i3 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: int getCallingUid()>();

        i0 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i2, $i3, i6, 0, 1, "changing live wallpaper", null);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_COMPONENT");

        b7 = 1;

        z3 = 0;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWallpaperComponent name=");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r5 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperManagerService", $r5);

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r7;

     label02:
        if r2 == null goto label21;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $r11 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $z1 = virtualinvoke $r12.<android.content.ComponentName: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label04;

        $r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r18 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r18 != null goto label04;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WallpaperManagerService", "Migrating current wallpaper to be lock-only beforeupdating system wallpaper");

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>(i0);

     label04:
        $r23 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        r24 = virtualinvoke $r23.<android.util.SparseArray: java.lang.Object get(int)>(i0);

     label05:
        if r24 != null goto label06;

        b7 = 1 | 2;

     label06:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 0;

        z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean changingToSame(android.content.ComponentName,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r21, r2);

     label07:
        $z2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r21, 0, 1, r2, null);

        if $z2 == 0 goto label14;

     label08:
        if z0 != 0 goto label11;

     label09:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = null;

     label10:
        goto label12;

     label11:
        $r14 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r14 == null goto label12;

        $r16 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r15 = <com.android.server.wallpaper._$$Lambda$WallpaperManagerService$pePYR2FPkz66RXZXwMS35xFK0MM: com.android.server.wallpaper.'-$$Lambda$WallpaperManagerService$pePYR2FPkz66RXZXwMS35xFK0MM' INSTANCE>;

        r32 = (java.util.function.Consumer) $r15;

        virtualinvoke $r16.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>(r32);

     label12:
        $i8 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int makeWallpaperIdLocked()>();

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i8;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r2);

     label13:
        z3 = 1;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label15:
        exitmonitor r1;

     label16:
        if z3 == 0 goto label17;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r2, b7);

        $r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>($r13, 1);

     label17:
        return;

     label18:
        $r20 := @caughtexception;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label20:
        throw $r20;

     label21:
        r31 = new java.lang.IllegalStateException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw r31;

     label22:
        $r19 := @caughtexception;

     label23:
        exitmonitor r1;

     label24:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private boolean supportsMultiDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1;
        android.app.WallpaperInfo $r2, $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        z1 = 0;

        if r1 == null goto label3;

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        if $r2 == null goto label1;

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        $z0 = virtualinvoke $r3.<android.app.WallpaperInfo: boolean supportsMultipleDisplays()>();

        if $z0 == 0 goto label2;

     label1:
        z1 = 1;

     label2:
        return z1;

     label3:
        return 0;
    }

    private void updateFallbackConnection()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1, r10;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r2, $r3, r9;
        boolean $z0;
        android.util.SparseArray $r6, $r8;
        int $i0;
        com.android.server.wallpaper.'-$$Lambda$WallpaperManagerService$pVmree9DyIpBSg0s3RDK3MDesvs' $r7;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$SxaUJpgTTfzUoz6u3AWuAOQdoNw r11;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$tRb4SPHGj0pcxb3p7arcqKFqs08 r12;
        java.util.function.Consumer r13;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        if r9 == null goto label5;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        if $r2 != null goto label1;

        goto label5;

     label1:
        r1 = r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        r10 = $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if r10 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Fallback wallpaper connection has not been created yet!!");

        return;

     label2:
        $z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean supportsMultiDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>(r1);

        if $z0 == 0 goto label3;

        $r6 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.util.SparseArray access$1300(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>(r10);

        $i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        if $i0 == 0 goto label4;

        $r7 = <com.android.server.wallpaper._$$Lambda$WallpaperManagerService$pVmree9DyIpBSg0s3RDK3MDesvs: com.android.server.wallpaper.'-$$Lambda$WallpaperManagerService$pVmree9DyIpBSg0s3RDK3MDesvs' INSTANCE>;

        r13 = (java.util.function.Consumer) $r7;

        virtualinvoke r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>(r13);

        $r8 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.util.SparseArray access$1300(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>(r10);

        virtualinvoke $r8.<android.util.SparseArray: void clear()>();

        goto label4;

     label3:
        r11 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$SxaUJpgTTfzUoz6u3AWuAOQdoNw;

        specialinvoke r11.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$SxaUJpgTTfzUoz6u3AWuAOQdoNw: void <init>(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>(r10);

        staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void access$1400(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,java.util.function.Predicate)>(r10, r11);

        r12 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$tRb4SPHGj0pcxb3p7arcqKFqs08;

        specialinvoke r12.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$tRb4SPHGj0pcxb3p7arcqKFqs08: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection)>(r0, r10);

        virtualinvoke r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>(r12);

     label4:
        return;

     label5:
        return;
    }

    private void writeWallpaperAttributes(org.xmlpull.v1.XmlSerializer, java.lang.String, com.android.server.wallpaper.WallpaperManagerService$WallpaperData) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.io.IOException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, $r6, $r8, $r10, $r13, $r16, $r19, $r22, $r35, $r39, $r42, $r50, $r51, $r54, $r57, $r60, $r63, $r67;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        android.graphics.Color r4;
        android.graphics.Rect $r12, $r15, $r18, $r21, $r24, $r25, $r26, $r27, $r53, $r56, $r59, $r62;
        android.app.WallpaperColors $r28, $r37, $r41, $r44;
        android.content.ComponentName $r32, $r33, $r34, $r68;
        boolean $z0, $z1;
        java.util.List $r38, $r45;
        java.lang.Object $r46;
        java.lang.StringBuilder $r47;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r65;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r65 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, r2);

        $i1 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "id", $r6);

        $i2 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "width", $r8);

        $i3 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "height", $r10);

        $r12 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i4 = $r12.<android.graphics.Rect: int left>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "cropLeft", $r13);

        $r15 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i5 = $r15.<android.graphics.Rect: int top>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "cropTop", $r16);

        $r18 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i6 = $r18.<android.graphics.Rect: int right>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "cropRight", $r19);

        $r21 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        $i7 = $r21.<android.graphics.Rect: int bottom>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i7);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "cropBottom", $r22);

        $r24 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i8 = $r24.<android.graphics.Rect: int left>;

        if $i8 == 0 goto label1;

        $r62 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i17 = $r62.<android.graphics.Rect: int left>;

        $r63 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i17);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingLeft", $r63);

     label1:
        $r25 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i9 = $r25.<android.graphics.Rect: int top>;

        if $i9 == 0 goto label2;

        $r59 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i16 = $r59.<android.graphics.Rect: int top>;

        $r60 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i16);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingTop", $r60);

     label2:
        $r26 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i10 = $r26.<android.graphics.Rect: int right>;

        if $i10 == 0 goto label3;

        $r56 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i15 = $r56.<android.graphics.Rect: int right>;

        $r57 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i15);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingRight", $r57);

     label3:
        $r27 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i11 = $r27.<android.graphics.Rect: int bottom>;

        if $i11 == 0 goto label4;

        $r53 = r65.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $i14 = $r53.<android.graphics.Rect: int bottom>;

        $r54 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i14);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingBottom", $r54);

     label4:
        $r28 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        if $r28 == null goto label7;

        $r37 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        $r38 = virtualinvoke $r37.<android.app.WallpaperColors: java.util.List getMainColors()>();

        i0 = interfaceinvoke $r38.<java.util.List: int size()>();

        $r39 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "colorsCount", $r39);

        if i0 <= 0 goto label6;

        i18 = 0;

     label5:
        if i18 >= i0 goto label6;

        $r44 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        $r45 = virtualinvoke $r44.<android.app.WallpaperColors: java.util.List getMainColors()>();

        $r46 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(i18);

        r4 = (android.graphics.Color) $r46;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("colorValue");

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $i13 = virtualinvoke r4.<android.graphics.Color: int toArgb()>();

        $r51 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, $r50, $r51);

        i18 = i18 + 1;

        goto label5;

     label6:
        $r41 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        $i12 = virtualinvoke $r41.<android.app.WallpaperColors: int getColorHints()>();

        $r42 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "colorHints", $r42);

     label7:
        $r67 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r67);

        $r68 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r68 == null goto label8;

        $r33 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $r32 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $z0 = virtualinvoke $r33.<android.content.ComponentName: boolean equals(java.lang.Object)>($r32);

        if $z0 != 0 goto label8;

        $r34 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $r35 = virtualinvoke $r34.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "component", $r35);

     label8:
        $z1 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup>;

        if $z1 == 0 goto label9;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "backup", "true");

     label9:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, r2);

        return;
    }

    public void clearWallpaper(java.lang.String, int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r1, $r3, $r6;
        boolean $z0, $z1;
        android.util.SparseArray $r2, $r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r4, r9, r10;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER");

        $z0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>(r8);

        if $z0 == 0 goto label13;

        $z1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>(r8);

        if $z1 != 0 goto label01;

        goto label13;

     label01:
        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i3, 0, 1, "clearWallpaper", null);

        r9 = null;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperLocked(boolean,int,int,android.os.IRemoteCallback)>(0, i0, i4, null);

     label03:
        if i0 != 2 goto label05;

     label04:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r9 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

     label05:
        if i0 == 1 goto label06;

        r10 = r9;

        if r9 != null goto label07;

     label06:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r10 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

     label07:
        exitmonitor r1;

     label08:
        if r10 == null goto label09;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r10, i0);

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>($r4, 1);

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void clearWallpaperLocked(boolean, int, int, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i2, i3;
        long l1;
        android.util.SparseArray $r1, $r6, $r7, $r9;
        java.lang.Object $r2, $r8, $r10;
        java.io.File $r3, $r4, $r5;
        boolean $z0, z1, z2;
        java.lang.IllegalArgumentException $r11;
        java.lang.Throwable $r12, $r14, r20;
        android.os.RemoteException $r13, $r15;
        android.os.IRemoteCallback r16;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r17;
        android.app.IWallpaperManagerCallback r18;
        android.content.ComponentName r19;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        z1 := @parameter0: boolean;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r16 := @parameter3: android.os.IRemoteCallback;

        if i2 == 1 goto label02;

        if i2 != 2 goto label01;

        goto label02;

     label01:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify exactly one kind of wallpaper to clear");

        throw $r11;

     label02:
        if i2 != 2 goto label04;

        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r10;

        if r17 != null goto label03;

        return;

     label03:
        goto label05;

     label04:
        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r2;

        if r17 != null goto label05;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>(i0, 0);

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r8;

        goto label05;

     label05:
        if r17 != null goto label06;

        return;

     label06:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r3 = r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label16;

        $r4 = r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r5 = r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

     label08:
        if i2 != 2 goto label16;

     label09:
        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

        r18 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.IWallpaperManagerCallback mKeyguardListener>;

     label10:
        if r18 == null goto label14;

     label11:
        interfaceinvoke r18.<android.app.IWallpaperManagerCallback: void onWallpaperChanged()>();

     label12:
        goto label14;

     label13:
        $r13 := @caughtexception;

     label14:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(int)>(i0);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label16:
        r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = null;

        r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 0;

        i3 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

     label17:
        if i0 == i3 goto label18;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label18:
        if z1 == 0 goto label21;

     label19:
        r19 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

     label20:
        goto label22;

     label21:
        r19 = null;

     label22:
        z2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r19, 1, 0, r17, r16);

     label23:
        if z2 == 0 goto label24;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label24:
        r20 = null;

        goto label26;

     label25:
        $r14 := @caughtexception;

        r20 = $r14;

     label26:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Default wallpaper component not found!", r20);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperComponentLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r17);

     label27:
        if r16 == null goto label31;

     label28:
        interfaceinvoke r16.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label29:
        goto label31;

     label30:
        $r15 := @caughtexception;

     label31:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label32:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r12;

        catch java.lang.Throwable from label07 to label08 with label32;
        catch java.lang.Throwable from label09 to label10 with label32;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label32;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch java.lang.IllegalArgumentException from label16 to label17 with label25;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.IllegalArgumentException from label19 to label20 with label25;
        catch java.lang.Throwable from label19 to label20 with label32;
        catch java.lang.IllegalArgumentException from label22 to label23 with label25;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch android.os.RemoteException from label28 to label29 with label30;
        catch java.lang.Throwable from label28 to label29 with label32;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$4phuz9MKBqoKfDMu8M8EBVJyI2I r1;
        android.content.Context $r2;
        boolean $z0, $z1, $z2, $z3;
        android.content.ComponentName $r3, $r4, $r21, $r30, $r35;
        android.util.SparseArray $r5, $r6, $r22, $r26;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, i14, i15;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r7, $r8, $r9, $r11, $r13, $r14, $r16, $r19, r41, r44;
        android.graphics.Rect $r10, $r24, $r28;
        java.lang.String $r12, $r25, $r29;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r15, $r31, r43, r45;
        android.app.WallpaperInfo $r17, $r20, $r32, $r34;
        android.service.wallpaper.IWallpaperService $r18, $r33;
        long $l4, $l5, $l6, $l11, $l12, $l13;
        java.lang.Object $r23, $r27, r40;
        java.lang.Throwable $r36;
        java.io.FileDescriptor r37;
        java.io.PrintWriter r38;
        java.lang.String[] r39;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$NjJWXk8Bi_l1pjCm41zPCbZJ2ME r42;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$8NPecRUvsVyVb9PqWBr_ybjykpE r46;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r37 := @parameter0: java.io.FileDescriptor;

        r38 := @parameter1: java.io.PrintWriter;

        r39 := @parameter2: java.lang.String[];

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r2, "WallpaperManagerService", r38);

        if $z0 != 0 goto label01;

        return;

     label01:
        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("mDefaultWallpaperComponent=");

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mDefaultWallpaperComponent>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r3);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("mImageWallpaper=");

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r4);

        r40 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r40;

     label02:
        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>("System wallpaper state:");

     label03:
        i14 = 0;

     label04:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i14 >= $i0 goto label07;

        $r26 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r27 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i14);

        r41 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r27;

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>(" User ");

        $i9 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        virtualinvoke r38.<java.io.PrintWriter: void print(int)>($i9);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>(": id=");

        $i10 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        virtualinvoke r38.<java.io.PrintWriter: void println(int)>($i10);

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>(" Display state:");

        r42 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$NjJWXk8Bi_l1pjCm41zPCbZJ2ME;

        specialinvoke r42.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$NjJWXk8Bi_l1pjCm41zPCbZJ2ME: void <init>(java.io.PrintWriter)>(r38);

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void forEachDisplayData(java.util.function.Consumer)>(r42);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mCropHint=");

        $r28 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r28);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mName=");

        $r29 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mAllowBackup=");

        $z3 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup>;

        virtualinvoke r38.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mWallpaperComponent=");

        $r30 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r30);

        $r31 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r31 == null goto label06;

        r43 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  Wallpaper connection ");

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.Object)>(r43);

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r32 = r43.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        if $r32 == null goto label05;

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("    mInfo.component=");

        $r34 = r43.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        $r35 = virtualinvoke $r34.<android.app.WallpaperInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r35);

     label05:
        r1 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$4phuz9MKBqoKfDMu8M8EBVJyI2I;

        specialinvoke r1.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$4phuz9MKBqoKfDMu8M8EBVJyI2I: void <init>(java.io.PrintWriter)>(r38);

        virtualinvoke r43.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>(r1);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("    mService=");

        $r33 = r43.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r33);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("    mLastDiedTime=");

        $l11 = r41.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: long lastDiedTime>;

        $l12 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l13 = $l11 - $l12;

        virtualinvoke r38.<java.io.PrintWriter: void println(long)>($l13);

     label06:
        i14 = i14 + 1;

        goto label04;

     label07:
        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>("Lock wallpaper state:");

     label08:
        i15 = 0;

     label09:
        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $i1 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        if i15 >= $i1 goto label11;

        $r22 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r23 = virtualinvoke $r22.<android.util.SparseArray: java.lang.Object valueAt(int)>(i15);

        r44 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r23;

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>(" User ");

        $i7 = r44.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        virtualinvoke r38.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>(": id=");

        $i8 = r44.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        virtualinvoke r38.<java.io.PrintWriter: void println(int)>($i8);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mCropHint=");

        $r24 = r44.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r24);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mName=");

        $r25 = r44.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mAllowBackup=");

        $z2 = r44.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup>;

        virtualinvoke r38.<java.io.PrintWriter: void println(boolean)>($z2);

     label10:
        i15 = i15 + 1;

        goto label09;

     label11:
        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>("Fallback wallpaper state:");

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>(" User ");

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $i2 = $r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        virtualinvoke r38.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>(": id=");

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $i3 = $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        virtualinvoke r38.<java.io.PrintWriter: void println(int)>($i3);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mCropHint=");

        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r10 = $r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r10);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mName=");

        $r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r12 = $r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  mAllowBackup=");

        $r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $z1 = $r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup>;

        virtualinvoke r38.<java.io.PrintWriter: void println(boolean)>($z1);

        $r14 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $r15 = $r14.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r15 == null goto label13;

        $r16 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        r45 = $r16.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("  Fallback Wallpaper connection ");

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.Object)>(r45);

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r17 = r45.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        if $r17 == null goto label12;

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("    mInfo.component=");

        $r20 = r45.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        $r21 = virtualinvoke $r20.<android.app.WallpaperInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r21);

     label12:
        r46 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$8NPecRUvsVyVb9PqWBr_ybjykpE;

        specialinvoke r46.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$8NPecRUvsVyVb9PqWBr_ybjykpE: void <init>(java.io.PrintWriter)>(r38);

        virtualinvoke r45.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void forEachDisplayConnector(java.util.function.Consumer)>(r46);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("    mService=");

        $r18 = r45.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        virtualinvoke r38.<java.io.PrintWriter: void println(java.lang.Object)>($r18);

        virtualinvoke r38.<java.io.PrintWriter: void print(java.lang.String)>("    mLastDiedTime=");

        $r19 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        $l4 = $r19.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: long lastDiedTime>;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l6 = $l4 - $l5;

        virtualinvoke r38.<java.io.PrintWriter: void println(long)>($l6);

     label13:
        exitmonitor r40;

     label14:
        return;

     label15:
        $r36 := @caughtexception;

     label16:
        exitmonitor r40;

     label17:
        throw $r36;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.util.SparseArray $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r4;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver $r5;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        i1 = 0;

     label1:
        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r4 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

        $r5 = $r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void stopWatching()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void forEachDisplayData(java.util.function.Consumer)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.util.function.Consumer r1;
        android.util.SparseArray $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData $r5;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mDisplayDatas>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mDisplayDatas>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.wallpaper.WallpaperManagerService$DisplayData) $r4;

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r5);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    com.android.server.wallpaper.WallpaperManagerService$WallpaperData getCurrentWallpaperData(int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r2;
        java.lang.Throwable $r3;
        android.util.SparseArray r4;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r5;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if i0 != 1 goto label3;

     label1:
        r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

     label2:
        goto label4;

     label3:
        r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

     label4:
        $r2 = virtualinvoke r4.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r2;

        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int getHeightHint(int) throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r7;
        java.lang.StringBuilder r2;
        boolean $z0;
        java.lang.String $r5;
        android.util.SparseArray $r6;
        int $i0, i1, i2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r8;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData $r9;
        java.lang.Throwable $r10;
        java.lang.IllegalArgumentException r11;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isValidDisplay(int)>(i1);

        if $z0 == 0 goto label5;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r8 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r7;

        if $r8 == null goto label3;

        $r9 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(i1);

        i2 = $r9.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        exitmonitor r1;

     label2:
        return i2;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        r11 = new java.lang.IllegalArgumentException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find display with id=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r11;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String getName()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r4;
        int $i0;
        java.lang.RuntimeException $r2;
        android.util.SparseArray $r3;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label6;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(0);

        $r5 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r4;

        r7 = $r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        exitmonitor r1;

     label2:
        return r7;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

     label6:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("getName() can only be called from the system process");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.os.ParcelFileDescriptor getWallpaper(java.lang.String, android.app.IWallpaperManagerCallback, int, android.os.Bundle, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1;
        android.app.IWallpaperManagerCallback r2;
        int i0, i1;
        android.os.Bundle r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.app.IWallpaperManagerCallback;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.Bundle;

        i1 := @parameter4: int;

        $r4 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>(r1, null, r2, i0, r3, i1);

        return $r4;
    }

    public android.app.WallpaperColors getWallpaperColors(int, int, int) throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1, $i2, i3, i4, i5;
        java.lang.Object r1, $r4, r11;
        android.app.WallpaperColors $r2, r12;
        android.util.SparseArray $r3;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r8, r10;
        boolean z1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        if i3 == 2 goto label02;

        if i3 != 1 goto label01;

        goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("which should be either FLAG_LOCK or FLAG_SYSTEM");

        throw $r5;

     label02:
        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i5 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i4, 0, 1, "getWallpaperColors", null);

        r8 = null;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if i3 != 2 goto label06;

     label03:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i5);

        r8 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r4;

     label04:
        goto label06;

     label05:
        $r6 := @caughtexception;

        goto label22;

     label06:
        r10 = r8;

        if r8 != null goto label08;

     label07:
        r10 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData findWallpaperAtDisplay(int,int)>(i5, i0);

     label08:
        if r10 != null goto label11;

     label09:
        exitmonitor r1;

     label10:
        return null;

     label11:
        $r2 = r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        if $r2 != null goto label13;

     label12:
        z1 = 1;

        goto label14;

     label13:
        z1 = 0;

     label14:
        exitmonitor r1;

     label15:
        if z1 == 0 goto label16;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void extractColors(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r10);

     label16:
        r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label17:
        r12 = r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors>;

        exitmonitor r11;

     label18:
        return r12;

     label19:
        $r7 := @caughtexception;

     label20:
        exitmonitor r11;

     label21:
        throw $r7;

     label22:
        exitmonitor r1;

     label23:
        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label22 to label23 with label05;
    }

    java.io.File getWallpaperDir(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        java.io.File $r1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        return $r1;
    }

    public int getWallpaperIdForUser(int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r2;
        int $i0, $i1, i2, i3, i4, i5;
        java.lang.IllegalArgumentException $r3;
        java.lang.Throwable $r4;
        android.util.SparseArray r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r6;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i0, $i1, i3, 0, 1, "getWallpaperIdForUser", null);

        if i2 == 1 goto label02;

        if i2 != 2 goto label01;

        goto label02;

     label01:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify exactly one kind of wallpaper");

        throw $r3;

     label02:
        if i2 != 2 goto label03;

        r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        goto label04;

     label03:
        r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

     label04:
        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label05:
        $r2 = virtualinvoke r5.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r2;

     label06:
        if r6 == null goto label09;

     label07:
        i5 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        exitmonitor r1;

     label08:
        return i5;

     label09:
        exitmonitor r1;

     label10:
        return -1;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.app.WallpaperInfo getWallpaperInfo(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r3;
        int $i0, $i1, i2, i3;
        android.util.SparseArray $r2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r4, $r5;
        java.lang.Throwable $r6;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r7;
        android.app.WallpaperInfo r8;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i2 := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i0, $i1, i2, 0, 1, "getWallpaperInfo", null);

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

     label2:
        if r7 == null goto label5;

     label3:
        $r4 = r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r4 == null goto label5;

        $r5 = r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        r8 = $r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        exitmonitor r1;

     label4:
        return r8;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String, java.lang.String, android.app.IWallpaperManagerCallback, int, android.os.Bundle, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.app.IWallpaperManagerCallback r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10;
        android.os.Bundle r2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3;
        boolean z0;
        android.content.Context $r4, $r10;
        java.lang.Object $r5, $r11, r17;
        java.io.File $r6, $r7;
        android.os.RemoteCallbackList $r8;
        java.lang.IllegalArgumentException $r9;
        android.os.storage.StorageManager $r12;
        java.lang.Throwable $r13, $r14;
        java.lang.String r15, r16;
        android.util.SparseArray r18;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r19;
        android.os.ParcelFileDescriptor r21;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        r1 := @parameter2: android.app.IWallpaperManagerCallback;

        i0 := @parameter3: int;

        r2 := @parameter4: android.os.Bundle;

        i9 := @parameter5: int;

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_WALLPAPER_INTERNAL");

        if $i1 == 0 goto label01;

        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r12 = (android.os.storage.StorageManager) $r11;

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r12.<android.os.storage.StorageManager: boolean checkPermissionReadImages(boolean,int,int,java.lang.String,java.lang.String)>(1, $i6, $i7, r15, r16);

     label01:
        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i10 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i2, $i3, i9, 0, 1, "getWallpaper", null);

        if i0 == 1 goto label03;

        if i0 != 2 goto label02;

        goto label03;

     label02:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify exactly one kind of wallpaper to read");

        throw $r9;

     label03:
        r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r17;

        if i0 != 2 goto label06;

     label04:
        r18 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

     label05:
        goto label07;

     label06:
        r18 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

     label07:
        $r5 = virtualinvoke r18.<android.util.SparseArray: java.lang.Object get(int)>(i10);

        r3 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r5;

     label08:
        if r3 != null goto label11;

     label09:
        exitmonitor r17;

     label10:
        return null;

     label11:
        r19 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(0);

     label12:
        if r2 == null goto label16;

     label13:
        $i4 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("width", $i4);

        $i5 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("height", $i5);

     label14:
        goto label16;

     label15:
        $r13 := @caughtexception;

        goto label25;

     label16:
        if r1 == null goto label18;

     label17:
        $r8 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$3000(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r3);

        virtualinvoke $r8.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

     label18:
        $r6 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

     label19:
        if z0 != 0 goto label22;

     label20:
        exitmonitor r17;

     label21:
        return null;

     label22:
        $r7 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File cropFile>;

        r21 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>($r7, 268435456);

     label23:
        exitmonitor r17;

     label24:
        return r21;

     label25:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Error getting wallpaper", $r13);

     label26:
        exitmonitor r17;

     label27:
        return null;

     label28:
        $r14 := @caughtexception;

     label29:
        exitmonitor r17;

     label30:
        throw $r14;

        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.io.FileNotFoundException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.io.FileNotFoundException from label17 to label18 with label15;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.io.FileNotFoundException from label18 to label19 with label15;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.io.FileNotFoundException from label22 to label23 with label15;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public int getWidthHint(int) throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r7;
        java.lang.IllegalArgumentException r2;
        boolean $z0;
        java.lang.String $r5;
        android.util.SparseArray $r6;
        int $i0, i1, i2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r8;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isValidDisplay(int)>(i1);

        if $z0 == 0 goto label5;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r8 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r7;

        if $r8 == null goto label3;

        $r9 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(i1);

        i2 = $r9.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        exitmonitor r1;

     label2:
        return i2;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        r2 = new java.lang.IllegalArgumentException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find display with id=");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r2;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean hasNamedWallpaper(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r6, $r8, $r10, $r13;
        long l0;
        java.util.Iterator r2;
        android.content.pm.UserInfo r3;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r4, r18;
        android.content.Context $r5;
        android.os.UserManager $r7;
        boolean $z0, $z1, $z2;
        int $i1, $i2, $i3;
        android.util.SparseArray $r9, $r12;
        java.lang.String $r11, r16;
        java.lang.Throwable $r14, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r16 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r7 = (android.os.UserManager) $r6;

        r17 = virtualinvoke $r7.<android.os.UserManager: java.util.List getUsers()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        r2 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r8;

        $z0 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label07;

     label06:
        goto label05;

     label07:
        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = r3.<android.content.pm.UserInfo: int id>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r4 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r10;

     label08:
        r18 = r4;

        if r4 != null goto label10;

     label09:
        $i2 = r3.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>($i2, 0);

        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i3 = r3.<android.content.pm.UserInfo: int id>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object get(int)>($i3);

        r18 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r13;

     label10:
        if r18 == null goto label13;

     label11:
        $r11 = r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $z1 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label13;

        exitmonitor r1;

     label12:
        return 1;

     label13:
        goto label05;

     label14:
        exitmonitor r1;

     label15:
        return 0;

     label16:
        $r15 := @caughtexception;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label18:
        throw $r15;

     label19:
        $r14 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    void initialize()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.os.UserHandle $r1;
        android.content.Context $r2;
        com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor $r3;
        java.io.File $r4;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor mMonitor>;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r1 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r3.<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: void register(android.content.Context,android.os.Looper,android.os.UserHandle,boolean)>($r2, null, $r1, 1);

        $r4 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>(0, 0);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>(0, 1);

        return;
    }

    public boolean isSetWallpaperAllowed(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.app.admin.DevicePolicyManager r1;
        int i0, $i2;
        long l1;
        boolean z0, $z1, $z2, $z3, $z4;
        android.content.Context $r2, $r6;
        android.content.pm.PackageManager $r3;
        java.lang.String[] $r4;
        java.util.List $r5;
        java.lang.Object $r7, $r8;
        android.os.UserManagerInternal $r9;
        java.lang.Throwable $r10;
        java.lang.String r11;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r11 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i2);

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $z1 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManager;");

        r1 = (android.app.admin.DevicePolicyManager) $r7;

        $z2 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>(r11);

        if $z2 != 0 goto label6;

        $z3 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean isProfileOwnerApp(java.lang.String)>(r11);

        if $z3 == 0 goto label2;

        goto label6;

     label2:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r9 = (android.os.UserManagerInternal) $r8;

        z0 = virtualinvoke $r9.<android.os.UserManagerInternal: boolean hasUserRestriction(java.lang.String,int)>("no_set_wallpaper", i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        $z4 = 1 ^ z0;

        return $z4;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r10;

     label6:
        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean isWallpaperBackupEligible(int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, $i2;
        java.lang.SecurityException $r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3, $r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r6;
        boolean z0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 != 1000 goto label5;

        if i0 != 2 goto label1;

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r5;

        goto label2;

     label1:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

     label2:
        if r6 == null goto label3;

        z0 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup>;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call isWallpaperBackupEligible");

        throw $r1;
    }

    public boolean isWallpaperSupported(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1;
        android.app.AppOpsManager $r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.AppOpsManager mAppOpsManager>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke $r2.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(48, $i0, r1);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void lambda$notifyWallpaperColorsChanged$0$WallpaperManagerService(com.android.server.wallpaper.WallpaperManagerService$WallpaperData, int, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        int i0, $i1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r2;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

        $i1 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: int mDisplayId>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChangedOnDisplay(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int,int)>(r1, i0, $i1);

        return;
    }

    public void lambda$onUnlockUser$4$WallpaperManagerService(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.io.File r1, $r4;
        java.lang.String[] r2;
        int i0, i1, i2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i1 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i1);

        r2 = <com.android.server.wallpaper.WallpaperManagerService: java.lang.String[] sPerUserFiles>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r4 = new java.io.File;

        $r5 = r2[i2];

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r5);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void lambda$switchUser$5$WallpaperManagerService(com.android.server.wallpaper.WallpaperManagerService$WallpaperData, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1, r2, $r3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r1, 1);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>(r2, 2);

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyWallpaperColorsChanged(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,int)>($r3, 1);

        return;
    }

    public void lambda$updateFallbackConnection$3$WallpaperManagerService(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection, com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r2;
        android.service.wallpaper.IWallpaperEngine $r3;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r4;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector;

        $r3 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r3 != null goto label1;

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mFallbackWallpaper>;

        virtualinvoke r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: void connectLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1, $r4);

     label1:
        return;
    }

    int makeWallpaperIdLocked()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

     label1:
        $i1 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mWallpaperId>;

        i0 = $i1 + 1;

        r0.<com.android.server.wallpaper.WallpaperManagerService: int mWallpaperId> = i0;

        if i0 == 0 goto label2;

        return i0;

     label2:
        goto label1;
    }

    public void onBootPhase(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        if i0 != 550 goto label1;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void systemReady()>();

        goto label2;

     label1:
        if i0 != 600 goto label2;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void switchUser(int,android.os.IRemoteCallback)>(0, null);

     label2:
        return;
    }

    void onRemoveUser(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, i2;
        java.io.File r1, r4;
        java.lang.Object r2;
        java.lang.String r3;
        android.util.SparseBooleanArray $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        if i0 >= 1 goto label01;

        return;

     label01:
        r1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void stopObserversLocked(int)>(i0);

        r7 = <com.android.server.wallpaper.WallpaperManagerService: java.lang.String[] sPerUserFiles>;

        i1 = lengthof r7;

     label03:
        i2 = 0;

     label04:
        if i2 >= i1 goto label07;

        r3 = r7[i2];

     label05:
        r4 = new java.io.File;

        specialinvoke r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r3);

        virtualinvoke r4.<java.io.File: boolean delete()>();

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseBooleanArray mUserRestorecon>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void delete(int)>(i0);

        exitmonitor r2;

     label08:
        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void onUnlockUser(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1;
        com.android.server.utils.TimingsTraceAndSlog $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        boolean $z0, $z1;
        android.util.SparseBooleanArray $r7, $r8;
        android.os.Handler $r9;
        java.lang.Throwable $r10, $r11;
        java.lang.Object r13;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r14;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$ZY5r01reAnoB4Dl2bo4au8KMz3Y r15;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r2 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke $r2.<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String)>("WallpaperManagerService");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("on-unlock-user-");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>($r6);

     label01:
        r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r13;

     label02:
        $i1 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i1 != i0 goto label05;

        $z0 = r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mWaitingForUnlock>;

        if $z0 == 0 goto label04;

     label03:
        r14 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>(i0, 1);

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void switchWallpaper(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r14, null);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r14);

     label04:
        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseBooleanArray mUserRestorecon>;

        $z1 = virtualinvoke $r7.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 != 0 goto label05;

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseBooleanArray mUserRestorecon>;

        virtualinvoke $r8.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        r15 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$ZY5r01reAnoB4Dl2bo4au8KMz3Y;

        specialinvoke r15.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$ZY5r01reAnoB4Dl2bo4au8KMz3Y: void <init>(com.android.server.wallpaper.WallpaperManagerService,int)>(r0, i0);

        $r9 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>(r15);

     label05:
        exitmonitor r13;

     label06:
        virtualinvoke $r2.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r13;

     label09:
        throw $r10;

     label10:
        $r11 := @caughtexception;

        virtualinvoke $r2.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback, int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r1, $r4, $r5;
        android.os.RemoteCallbackList r2, r11;
        android.util.SparseArray $r3, $r6, r9, r10;
        java.lang.Throwable $r7;
        android.app.IWallpaperManagerCallback r8;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r8 := @parameter0: android.app.IWallpaperManagerCallback;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i3, 1, 1, "registerWallpaperColorsCallback", null);

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mColorsChangedListeners>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r9 = (android.util.SparseArray) $r4;

     label02:
        r10 = r9;

        if r9 != null goto label05;

     label03:
        r10 = new android.util.SparseArray;

        specialinvoke r10.<android.util.SparseArray: void <init>()>();

     label04:
        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mColorsChangedListeners>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r10);

     label05:
        $r5 = virtualinvoke r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.os.RemoteCallbackList) $r5;

     label06:
        r11 = r2;

        if r2 != null goto label09;

     label07:
        r11 = new android.os.RemoteCallbackList;

        specialinvoke r11.<android.os.RemoteCallbackList: void <init>()>();

     label08:
        virtualinvoke r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11);

     label09:
        virtualinvoke r11.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r8);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setDimensionHints(int, int, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        java.lang.Object r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r2;
        boolean $z0, $z1;
        java.lang.String $r5, r12;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r6, $r7, $r8;
        android.service.wallpaper.IWallpaperService $r9;
        android.os.RemoteException $r10;
        java.lang.Throwable $r11;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r13;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r14;
        android.service.wallpaper.IWallpaperEngine r15;
        java.lang.IllegalArgumentException r17, r19;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        r12 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_HINTS");

        $z0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>(r12);

        if $z0 != 0 goto label01;

        return;

     label01:
        $i2 = staticinvoke <com.android.server.wallpaper.GLHelper: int getMaxTextureSize()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i7, $i2);

        $i3 = staticinvoke <com.android.server.wallpaper.GLHelper: int getMaxTextureSize()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i8, $i3);

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        i10 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r13 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>(i10, 1);

     label03:
        if i9 <= 0 goto label27;

        if i1 <= 0 goto label27;

     label04:
        $z1 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isValidDisplay(int)>(i0);

        if $z1 == 0 goto label26;

        r14 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(i0);

        $i4 = r14.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth>;

        if i9 != $i4 goto label05;

        $i6 = r14.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight>;

        if i1 == $i6 goto label24;

     label05:
        r14.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mWidth> = i9;

        r14.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: int mHeight> = i1;

     label06:
        if i0 != 0 goto label08;

     label07:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(int)>(i10);

     label08:
        $i5 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i5 == i10 goto label10;

        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r6 == null goto label24;

        $r7 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        r2 = virtualinvoke $r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>(i0);

     label11:
        if r2 == null goto label14;

     label12:
        r15 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

     label13:
        goto label15;

     label14:
        r15 = null;

     label15:
        if r15 == null goto label21;

     label16:
        interfaceinvoke r15.<android.service.wallpaper.IWallpaperEngine: void setDesiredSize(int,int)>(i9, i1);

     label17:
        goto label19;

     label18:
        $r10 := @caughtexception;

     label19:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r13);

     label20:
        goto label24;

     label21:
        $r8 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r9 = $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        if $r9 == null goto label24;

     label22:
        if r2 == null goto label24;

     label23:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: boolean mDimensionsChanged> = 1;

     label24:
        exitmonitor r1;

     label25:
        return;

     label26:
        r17 = new java.lang.IllegalArgumentException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find display with id=");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r17;

     label27:
        r19 = new java.lang.IllegalArgumentException;

        specialinvoke r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw r19;

     label28:
        $r11 := @caughtexception;

     label29:
        exitmonitor r1;

     label30:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch android.os.RemoteException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label27 to label28 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public void setDisplayPadding(android.graphics.Rect, java.lang.String, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r5, r17, $r24;
        android.graphics.Rect $r8, $r9, r16;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r10, $r11, $r12;
        android.service.wallpaper.IWallpaperService $r13;
        android.os.RemoteException $r14;
        java.lang.Throwable $r15;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r18;
        com.android.server.wallpaper.WallpaperManagerService$DisplayData r19;
        android.service.wallpaper.IWallpaperEngine r20;
        java.lang.IllegalArgumentException r22, r25;
        java.lang.StringBuilder r23, r26;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r16 := @parameter0: android.graphics.Rect;

        r17 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_HINTS");

        $z0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>(r17);

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $z1 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isValidDisplay(int)>(i0);

        if $z1 == 0 goto label24;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r18 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>(i1, 1);

        $i2 = r16.<android.graphics.Rect: int left>;

        if $i2 < 0 goto label23;

        $i3 = r16.<android.graphics.Rect: int top>;

        if $i3 < 0 goto label23;

        $i4 = r16.<android.graphics.Rect: int right>;

        if $i4 < 0 goto label23;

        $i5 = r16.<android.graphics.Rect: int bottom>;

        if $i5 < 0 goto label23;

        r19 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>(i0);

        $r8 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        $z2 = virtualinvoke r16.<android.graphics.Rect: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label21;

        $r9 = r19.<com.android.server.wallpaper.WallpaperManagerService$DisplayData: android.graphics.Rect mPadding>;

        virtualinvoke $r9.<android.graphics.Rect: void set(android.graphics.Rect)>(r16);

     label03:
        if i0 != 0 goto label05;

     label04:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(int)>(i1);

     label05:
        $i6 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i6 == i1 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        $r10 = r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r10 == null goto label21;

        $r11 = r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        r2 = virtualinvoke $r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>(i0);

     label08:
        if r2 == null goto label11;

     label09:
        r20 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

     label10:
        goto label12;

     label11:
        r20 = null;

     label12:
        if r20 == null goto label18;

     label13:
        interfaceinvoke r20.<android.service.wallpaper.IWallpaperEngine: void setDisplayPadding(android.graphics.Rect)>(r16);

     label14:
        goto label16;

     label15:
        $r14 := @caughtexception;

     label16:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r18);

     label17:
        goto label21;

     label18:
        $r12 = r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r13 = $r12.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        if $r13 == null goto label21;

     label19:
        if r2 == null goto label21;

     label20:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: boolean mPaddingChanged> = 1;

     label21:
        exitmonitor r1;

     label22:
        return;

     label23:
        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding must be positive: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r24 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw r22;

     label24:
        r25 = new java.lang.IllegalArgumentException;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find display with id=");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r25;

     label25:
        $r15 := @caughtexception;

     label26:
        exitmonitor r1;

     label27:
        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public void setInAmbientMode(boolean, long)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean z0, $z1;
        long l0;
        java.lang.Object r1, $r3;
        int $i1;
        android.util.SparseArray $r2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r4, $r5, $r7, $r9;
        android.app.WallpaperInfo $r6, $r10;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector $r8;
        android.os.RemoteException $r11;
        java.lang.Throwable $r12;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r13;
        android.service.wallpaper.IWallpaperEngine r14;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mInAmbientMode> = z0;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r13 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

     label02:
        if r13 == null goto label06;

     label03:
        $r4 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r4 == null goto label06;

        $r5 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r6 = $r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        if $r6 == null goto label04;

        $r9 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r10 = $r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        $z1 = virtualinvoke $r10.<android.app.WallpaperInfo: boolean supportsAmbientMode()>();

        if $z1 == 0 goto label06;

     label04:
        $r7 = r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r8 = virtualinvoke $r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>(0);

        r14 = $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector: android.service.wallpaper.IWallpaperEngine mEngine>;

     label05:
        goto label07;

     label06:
        r14 = null;

     label07:
        exitmonitor r1;

     label08:
        if r14 == null goto label12;

     label09:
        interfaceinvoke r14.<android.service.wallpaper.IWallpaperEngine: void setInAmbientMode(boolean,long)>(z0, l0);

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

     label12:
        return;

     label13:
        $r12 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.app.IWallpaperManagerCallback r3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r3 := @parameter0: android.app.IWallpaperManagerCallback;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.wallpaper.WallpaperManagerService: android.app.IWallpaperManagerCallback mKeyguardListener> = r3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.os.ParcelFileDescriptor setWallpaper(java.lang.String, java.lang.String, android.graphics.Rect, boolean, android.os.Bundle, int, android.app.IWallpaperManagerCallback, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean z0, $z1, $z2;
        android.os.Bundle r1;
        int i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, i11, i12;
        android.app.IWallpaperManagerCallback r2;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3;
        long l1;
        java.lang.IllegalArgumentException $r4, $r23;
        android.graphics.Rect $r7, $r10, r15, r16;
        android.util.SparseArray $r8;
        java.lang.Object $r9, r17;
        java.lang.Throwable $r11, $r12;
        java.lang.String r13, r14, $r24;
        android.os.ParcelFileDescriptor r18;
        java.lang.StringBuilder $r21;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r15 := @parameter2: android.graphics.Rect;

        z0 := @parameter3: boolean;

        r1 := @parameter4: android.os.Bundle;

        i0 := @parameter5: int;

        r2 := @parameter6: android.app.IWallpaperManagerCallback;

        i11 := @parameter7: int;

        $i2 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: int getCallingPid()>();

        $i3 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: int getCallingUid()>();

        i12 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i2, $i3, i11, 0, 1, "changing wallpaper", null);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER");

        $i4 = i0 & 3;

        if $i4 == 0 goto label19;

        $z1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>(r14);

        if $z1 == 0 goto label18;

        $z2 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>(r14);

        if $z2 != 0 goto label01;

        goto label18;

     label01:
        if r15 != null goto label02;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, 0, 0);

        r16 = $r10;

        goto label03;

     label02:
        $i6 = virtualinvoke r15.<android.graphics.Rect: int width()>();

        if $i6 < 0 goto label17;

        $i7 = virtualinvoke r15.<android.graphics.Rect: int height()>();

        if $i7 < 0 goto label17;

        $i8 = r15.<android.graphics.Rect: int left>;

        if $i8 < 0 goto label17;

        $i9 = r15.<android.graphics.Rect: int top>;

        if $i9 < 0 goto label17;

        r16 = r15;

     label03:
        r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r17;

        if i0 != 1 goto label05;

     label04:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i12);

        if $r9 != null goto label05;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WallpaperManagerService", "Migrating current wallpaper to be lock-only beforeupdating system wallpaper");

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>(i12);

     label05:
        r3 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>(i12, i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        r18 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.Bundle)>(r13, r3, r1);

     label07:
        if r18 == null goto label09;

     label08:
        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 1;

        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int whichPending> = i0;

        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.IWallpaperManagerCallback setComplete> = r2;

        $r7 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect cropHint>;

        virtualinvoke $r7.<android.graphics.Rect: void set(android.graphics.Rect)>(r16);

        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup> = z0;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r17;

     label10:
        return r18;

     label11:
        $r12 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        throw $r12;

     label14:
        $r11 := @caughtexception;

     label15:
        exitmonitor r17;

     label16:
        throw $r11;

     label17:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid crop rect supplied: ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label18:
        return null;

     label19:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", "Must specify a valid wallpaper category to set");

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a valid wallpaper category to set");

        throw $r4;

        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void setWallpaperComponent(android.content.ComponentName)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName r1;
        int $i0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName,int)>(r1, $i0);

        return;
    }

    public void setWallpaperComponentChecked(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>(r2);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName,int)>(r1, i0);

     label1:
        return;
    }

    public void settingsRestored()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3, r20, r23;
        android.content.ComponentName $r4, $r14, $r15, $r16, $r17;
        java.lang.String $r5, $r6, $r9, $r12;
        boolean $z0, $z3, $z4, z6, z7;
        java.lang.StringBuilder $r7;
        java.io.File $r13;
        java.lang.Throwable $r18, $r19;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r21;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label20;

        r20 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r20;

     label01:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>(0, 0);

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r21 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

        $i1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int makeWallpaperIdLocked()>();

        r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i1;

        r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean allowBackup> = 1;

        $r4 = r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        if $r4 == null goto label03;

        $r16 = r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $r15 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $z3 = virtualinvoke $r16.<android.content.ComponentName: boolean equals(java.lang.Object)>($r15);

        if $z3 != 0 goto label03;

        $r17 = r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $z4 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r17, 0, 0, r21, null);

        if $z4 != 0 goto label02;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(null, 0, 0, r21, null);

     label02:
        z6 = 1;

        goto label09;

     label03:
        $r6 = "";

        $r5 = r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label05;

     label04:
        z7 = 1;

        goto label06;

     label05:
        z7 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean restoreNamedResourceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r21);

     label06:
        z6 = z7;

        if z7 == 0 goto label09;

     label07:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void generateCrop(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r21);

        $r14 = r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r14, 1, 0, r21, null);

     label08:
        z6 = z7;

     label09:
        exitmonitor r20;

     label10:
        if z6 != 0 goto label11;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore wallpaper: \'");

        $r9 = r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r12);

        r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = "";

        $r13 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        virtualinvoke $r13.<java.io.File: boolean delete()>();

     label11:
        r23 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r23;

     label12:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(int)>(0);

        exitmonitor r23;

     label13:
        return;

     label14:
        $r19 := @caughtexception;

     label15:
        exitmonitor r23;

     label16:
        throw $r19;

     label17:
        $r18 := @caughtexception;

     label18:
        exitmonitor r20;

     label19:
        throw $r18;

     label20:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("settingsRestored() can only be called from the system process");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    void stopObserver(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver $r2, $r3;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        if r1 == null goto label1;

        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        if $r2 == null goto label1;

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void stopWatching()>();

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver> = null;

     label1:
        return;
    }

    void stopObserversLocked(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        android.util.SparseArray $r1, $r4, $r7, $r8;
        java.lang.Object $r2, $r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r3, $r6;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r2;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void stopObserver(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r3);

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r5;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void stopObserver(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r6);

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>(i0);

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        virtualinvoke $r8.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    void switchUser(int, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2, r18;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver r3, $r11, $r12;
        com.android.server.utils.TimingsTraceAndSlog $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        android.util.SparseArray $r9;
        java.lang.Object $r10, r17;
        java.lang.Throwable $r13, $r14;
        android.os.IRemoteCallback r15;
        android.os.Handler r19;
        com.android.server.wallpaper._$$Lambda$WallpaperManagerService$1tPkxHr3PHUgpfvv03vRyPzY3uM r20;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        r15 := @parameter1: android.os.IRemoteCallback;

        $r4 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke $r4.<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String)>("WallpaperManagerService");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("switch-user-");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>($r8);

     label01:
        r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r17;

     label02:
        $i1 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i1 != i0 goto label04;

        exitmonitor r17;

     label03:
        virtualinvoke $r4.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;

     label04:
        r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId> = i0;

        r2 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>(i0, 1);

        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mLockWallpaperMap>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r18 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r10;

     label05:
        if r18 != null goto label06;

        r18 = r2;

        goto label06;

     label06:
        $r11 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        if $r11 != null goto label07;

        r3 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver;

        specialinvoke r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r0, r2);

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver> = r3;

        $r12 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r12.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void startWatching()>();

     label07:
        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void switchWallpaper(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r2, r15);

        exitmonitor r17;

     label08:
        r19 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        r20 = new com.android.server.wallpaper._$$Lambda$WallpaperManagerService$1tPkxHr3PHUgpfvv03vRyPzY3uM;

        specialinvoke r20.<com.android.server.wallpaper._$$Lambda$WallpaperManagerService$1tPkxHr3PHUgpfvv03vRyPzY3uM: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r0, r2, r18);

        virtualinvoke r19.<android.os.Handler: boolean post(java.lang.Runnable)>(r20);

     label09:
        virtualinvoke $r4.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        return;

     label10:
        $r14 := @caughtexception;

     label11:
        exitmonitor r17;

     label12:
        throw $r14;

     label13:
        $r13 := @caughtexception;

        virtualinvoke $r4.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    void switchWallpaper(com.android.server.wallpaper.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.os.IRemoteCallback r1;
        java.lang.Object r2;
        boolean z0;
        int i0, $i1, $i3, $i4;
        android.content.ComponentName $r3, $r5, $r7, r12;
        android.content.pm.IPackageManager $r4;
        java.io.File $r6;
        java.lang.Throwable $r8, $r9, r16;
        android.os.RemoteException $r10;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r11, r15;
        android.content.pm.ServiceInfo r13;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r11 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r1 := @parameter1: android.os.IRemoteCallback;

        r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mWaitingForUnlock> = 0;

        $r3 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r3 == null goto label03;

        r12 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

     label02:
        goto label04;

     label03:
        r12 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

     label04:
        z0 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r12, 1, 0, r11, r1);

     label05:
        if z0 != 0 goto label15;

     label06:
        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $i1 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        r13 = interfaceinvoke $r4.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r12, 262144, $i1);

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        r13 = null;

     label09:
        if r13 != null goto label13;

     label10:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Failure starting previous wallpaper; clearing");

        i0 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

     label11:
        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperLocked(boolean,int,int,android.os.IRemoteCallback)>(0, 1, i0, r1);

     label12:
        goto label15;

     label13:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "Wallpaper isn\'t direct boot aware; using fallback until unlocked");

        $r5 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = $r5;

        r15 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $i4 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $i3 = r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $r6 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>($i3);

        specialinvoke r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int,java.io.File,java.lang.String,java.lang.String)>($i4, $r6, "wallpaper_lock_orig", "wallpaper_lock");

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void ensureSaneWallpaperData(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r15);

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r7, 1, 0, r15, r1);

        r0.<com.android.server.wallpaper.WallpaperManagerService: boolean mWaitingForUnlock> = 1;

     label14:
        goto label15;

     label15:
        exitmonitor r2;

     label16:
        return;

     label17:
        $r8 := @caughtexception;

        r16 = $r8;

     label18:
        exitmonitor r2;

     label19:
        throw r16;

     label20:
        $r9 := @caughtexception;

        r16 = $r9;

        goto label18;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    void systemReady()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.app.IActivityManager r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        android.content.ComponentName $r4, $r5;
        boolean $z0, $z1, $z2;
        android.os.RemoteException $r8;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r10;
        android.content.IntentFilter $r11, $r15;
        android.content.Context $r13, $r17;
        com.android.server.wallpaper.WallpaperManagerService$2 $r14;
        com.android.server.wallpaper.WallpaperManagerService$3 $r18;
        com.android.server.wallpaper.WallpaperManagerService$4 r19;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void initialize()>();

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r10 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r3;

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $r4 = r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $z0 = virtualinvoke $r5.<android.content.ComponentName: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean cropExists()>();

        if $z1 != 0 goto label1;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void generateCrop(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r10);

     label1:
        $z2 = virtualinvoke r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean cropExists()>();

        if $z2 != 0 goto label2;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperLocked(boolean,int,int,android.os.IRemoteCallback)>(0, 1, 0, null);

     label2:
        $r11 = new android.content.IntentFilter;

        specialinvoke $r11.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r11.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r14 = new com.android.server.wallpaper.WallpaperManagerService$2;

        specialinvoke $r14.<com.android.server.wallpaper.WallpaperManagerService$2: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        virtualinvoke $r13.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r14, $r11);

        $r15 = new android.content.IntentFilter;

        specialinvoke $r15.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.ACTION_SHUTDOWN");

        $r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r18 = new com.android.server.wallpaper.WallpaperManagerService$3;

        specialinvoke $r18.<com.android.server.wallpaper.WallpaperManagerService$3: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        virtualinvoke $r17.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r18, $r15);

     label3:
        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r19 = new com.android.server.wallpaper.WallpaperManagerService$4;

        specialinvoke r19.<com.android.server.wallpaper.WallpaperManagerService$4: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        interfaceinvoke r1.<android.app.IActivityManager: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>(r19, "WallpaperManagerService");

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback, int, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r1, $r3, $r4;
        android.util.SparseArray $r2, r7;
        java.lang.Throwable $r5;
        android.app.IWallpaperManagerCallback r6;
        android.os.RemoteCallbackList r8;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r6 := @parameter0: android.app.IWallpaperManagerCallback;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i3, 1, 1, "unregisterWallpaperColorsCallback", null);

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mColorsChangedListeners>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r7 = (android.util.SparseArray) $r3;

     label02:
        if r7 == null goto label06;

     label03:
        $r4 = virtualinvoke r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r8 = (android.os.RemoteCallbackList) $r4;

     label04:
        if r8 == null goto label06;

     label05:
        virtualinvoke r8.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r6);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, android.os.Bundle)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        int $i0, $i1, $i2, $i4;
        boolean $z0, $z1;
        java.io.File $r2, $r3, $r9, $r14, r23;
        java.lang.String $r10, $r12, $r15, $r17, $r18, r20, r22;
        java.lang.Throwable $r19;
        android.os.Bundle r21;
        android.os.ParcelFileDescriptor r24;
        java.lang.StringBuilder r25, r26;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r20 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r21 := @parameter2: android.os.Bundle;

        r22 = r20;

        if r20 != null goto label01;

        r22 = "";

     label01:
        $i0 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        r23 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>($i0);

        $z0 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label03;

        virtualinvoke r23.<java.io.File: boolean mkdir()>();

     label02:
        $r18 = virtualinvoke r23.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r18, 505, -1, -1);

     label03:
        $r2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        r24 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>($r2, 1006632960);

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r3);

        if $z1 != 0 goto label05;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restorecon failed for wallpaper file: ");

        $r14 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r17);

     label04:
        return null;

     label05:
        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = r22;

        $i1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int makeWallpaperIdLocked()>();

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId> = $i1;

     label06:
        if r21 == null goto label08;

     label07:
        $i4 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        virtualinvoke r21.<android.os.Bundle: void putInt(java.lang.String,int)>("android.service.wallpaper.extra.ID", $i4);

     label08:
        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.app.WallpaperColors primaryColors> = null;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateWallpaperBitmapLocked() : id=");

        $i2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int wallpaperId>;

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" name=");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file=");

        $r9 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getName()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperManagerService", $r12);

     label09:
        return r24;

     label10:
        $r19 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Error setting wallpaper", $r19);

        return null;

        catch java.io.FileNotFoundException from label01 to label02 with label10;
        catch java.io.FileNotFoundException from label02 to label03 with label10;
        catch java.io.FileNotFoundException from label03 to label04 with label10;
        catch java.io.FileNotFoundException from label05 to label06 with label10;
        catch java.io.FileNotFoundException from label07 to label08 with label10;
        catch java.io.FileNotFoundException from label08 to label09 with label10;
    }
}
