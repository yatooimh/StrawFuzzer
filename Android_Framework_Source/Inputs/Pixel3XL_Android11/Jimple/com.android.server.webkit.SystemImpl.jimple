public class com.android.server.webkit.SystemImpl extends java.lang.Object implements com.android.server.webkit.SystemInterface
{
    private static final int PACKAGE_FLAGS;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_AVAILABILITY;
    private static final java.lang.String TAG_DESCRIPTION;
    private static final java.lang.String TAG_FALLBACK;
    private static final java.lang.String TAG_PACKAGE_NAME;
    private static final java.lang.String TAG_SIGNATURE;
    private static final java.lang.String TAG_START;
    private static final java.lang.String TAG_WEBVIEW_PROVIDER;
    private final android.webkit.WebViewProviderInfo[] mWebViewProviderPackages;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_WEBVIEW_PROVIDER> = "webviewprovider";

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_START> = "webviewproviders";

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_SIGNATURE> = "signature";

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_PACKAGE_NAME> = "packageName";

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_FALLBACK> = "isFallback";

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_DESCRIPTION> = "description";

        <com.android.server.webkit.SystemImpl: java.lang.String TAG_AVAILABILITY> = "availableByDefault";

        <com.android.server.webkit.SystemImpl: int PACKAGE_FLAGS> = 272630976;

        $r0 = class "Lcom/android/server/webkit/SystemImpl;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.webkit.SystemImpl: java.lang.String TAG> = $r1;

        return;
    }

    private void <init>()
    {
        com.android.server.webkit.SystemImpl r0;
        java.lang.String r1, $r6, $r7, $r8, $r9, $r10, $r20, r25, r26;
        boolean z0, z1, $z2, $z3, $z4, $z6;
        android.webkit.WebViewProviderInfo r2;
        java.util.ArrayList $r3;
        android.app.Application $r4;
        android.content.res.Resources $r5;
        java.lang.String[] $r11;
        android.util.AndroidRuntimeException $r12, r27, r28, r29, r30, r33;
        int $i1, i2, i3, i4, i5;
        android.webkit.WebViewProviderInfo[] $r13, $r15;
        java.lang.Object[] $r14;
        java.lang.Throwable $r16, $r17;
        android.content.res.XmlResourceParser r21, r22, r24;
        java.lang.StringBuilder r34;

        r0 := @this: com.android.server.webkit.SystemImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i2 = 0;

        i3 = 0;

        r21 = null;

        r22 = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label01:
        $r4 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r5 = virtualinvoke $r4.<android.app.Application: android.content.res.Resources getResources()>();

        r24 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(18284551);

     label02:
        r22 = r24;

        r21 = r24;

     label03:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r24, "webviewproviders");

     label04:
        r22 = r24;

        r21 = r24;

     label05:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r24);

     label06:
        r22 = r24;

        r21 = r24;

     label07:
        r25 = interfaceinvoke r24.<android.content.res.XmlResourceParser: java.lang.String getName()>();

     label08:
        if r25 != null goto label11;

        if r24 == null goto label09;

        interfaceinvoke r24.<android.content.res.XmlResourceParser: void close()>();

     label09:
        if i3 == 0 goto label10;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r13 = newarray (android.webkit.WebViewProviderInfo)[$i1];

        $r14 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (android.webkit.WebViewProviderInfo[]) $r14;

        r0.<com.android.server.webkit.SystemImpl: android.webkit.WebViewProviderInfo[] mWebViewProviderPackages> = $r15;

        return;

     label10:
        $r12 = new android.util.AndroidRuntimeException;

        specialinvoke $r12.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("There must be at least one WebView package that is available by default");

        throw $r12;

     label11:
        r22 = r24;

        r21 = r24;

     label12:
        $z2 = virtualinvoke r25.<java.lang.String: boolean equals(java.lang.Object)>("webviewprovider");

        if $z2 == 0 goto label60;

     label13:
        r22 = r24;

        r21 = r24;

     label14:
        r1 = interfaceinvoke r24.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "packageName");

     label15:
        if r1 == null goto label54;

        r22 = r24;

        r21 = r24;

     label16:
        r26 = interfaceinvoke r24.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "description");

     label17:
        if r26 == null goto label48;

        r22 = r24;

        r21 = r24;

     label18:
        $r7 = "true";

        $r8 = interfaceinvoke r24.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "availableByDefault");

        z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label19:
        r22 = r24;

        r21 = r24;

     label20:
        $r9 = "true";

        $r10 = interfaceinvoke r24.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "isFallback");

        z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

     label21:
        r22 = r24;

        r21 = r24;

     label22:
        r2 = new android.webkit.WebViewProviderInfo;

     label23:
        r22 = r24;

        r21 = r24;

     label24:
        $r11 = staticinvoke <com.android.server.webkit.SystemImpl: java.lang.String[] readSignatures(android.content.res.XmlResourceParser)>(r24);

        specialinvoke r2.<android.webkit.WebViewProviderInfo: void <init>(java.lang.String,java.lang.String,boolean,boolean,java.lang.String[])>(r1, r26, z0, z1, $r11);

     label25:
        i4 = i2;

        r22 = r24;

        r21 = r24;

     label26:
        $z3 = r2.<android.webkit.WebViewProviderInfo: boolean isFallback>;

        if $z3 == 0 goto label42;

     label27:
        i4 = i2 + 1;

        r22 = r24;

        r21 = r24;

     label28:
        $z6 = r2.<android.webkit.WebViewProviderInfo: boolean availableByDefault>;

        if $z6 == 0 goto label36;

     label29:
        if i4 > 1 goto label30;

        goto label42;

     label30:
        r22 = r24;

        r21 = r24;

     label31:
        r27 = new android.util.AndroidRuntimeException;

     label32:
        r22 = r24;

        r21 = r24;

     label33:
        specialinvoke r27.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("There can be at most one WebView fallback package.");

     label34:
        r22 = r24;

        r21 = r24;

     label35:
        throw r27;

     label36:
        r22 = r24;

        r21 = r24;

     label37:
        r28 = new android.util.AndroidRuntimeException;

     label38:
        r22 = r24;

        r21 = r24;

     label39:
        specialinvoke r28.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Each WebView fallback package must be available by default.");

     label40:
        r22 = r24;

        r21 = r24;

     label41:
        throw r28;

     label42:
        i5 = i3;

        r22 = r24;

        r21 = r24;

     label43:
        $z4 = r2.<android.webkit.WebViewProviderInfo: boolean availableByDefault>;

        if $z4 == 0 goto label45;

     label44:
        i5 = i3 + 1;

     label45:
        r22 = r24;

        r21 = r24;

     label46:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label47:
        i3 = i5;

        goto label63;

     label48:
        r22 = r24;

        r21 = r24;

     label49:
        r29 = new android.util.AndroidRuntimeException;

     label50:
        r22 = r24;

        r21 = r24;

     label51:
        specialinvoke r29.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("WebView provider in framework resources missing description");

     label52:
        r22 = r24;

        r21 = r24;

     label53:
        throw r29;

     label54:
        r22 = r24;

        r21 = r24;

     label55:
        r30 = new android.util.AndroidRuntimeException;

     label56:
        r22 = r24;

        r21 = r24;

     label57:
        specialinvoke r30.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("WebView provider in framework resources missing package name");

     label58:
        r22 = r24;

        r21 = r24;

     label59:
        throw r30;

     label60:
        r22 = r24;

        r21 = r24;

     label61:
        $r6 = <com.android.server.webkit.SystemImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Found an element that is not a WebView provider");

     label62:
        i4 = i2;

     label63:
        i2 = i4;

        goto label04;

     label64:
        $r16 := @caughtexception;

        goto label79;

     label65:
        $r17 := @caughtexception;

        r22 = r21;

     label66:
        r33 = new android.util.AndroidRuntimeException;

     label67:
        r22 = r21;

     label68:
        r34 = new java.lang.StringBuilder;

     label69:
        r22 = r21;

     label70:
        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

     label71:
        r22 = r21;

     label72:
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error when parsing WebView config ");

     label73:
        r22 = r21;

     label74:
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

     label75:
        r22 = r21;

     label76:
        $r20 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>($r20);

     label77:
        r22 = r21;

     label78:
        throw r33;

     label79:
        if r22 == null goto label80;

        interfaceinvoke r22.<android.content.res.XmlResourceParser: void close()>();

     label80:
        throw $r16;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label65;
        catch java.io.IOException from label01 to label02 with label65;
        catch java.lang.Throwable from label01 to label02 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label65;
        catch java.io.IOException from label03 to label04 with label65;
        catch java.lang.Throwable from label03 to label04 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label65;
        catch java.io.IOException from label05 to label06 with label65;
        catch java.lang.Throwable from label05 to label06 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label65;
        catch java.io.IOException from label07 to label08 with label65;
        catch java.lang.Throwable from label07 to label08 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label65;
        catch java.io.IOException from label12 to label13 with label65;
        catch java.lang.Throwable from label12 to label13 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label65;
        catch java.io.IOException from label14 to label15 with label65;
        catch java.lang.Throwable from label14 to label15 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label65;
        catch java.io.IOException from label16 to label17 with label65;
        catch java.lang.Throwable from label16 to label17 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label65;
        catch java.io.IOException from label18 to label19 with label65;
        catch java.lang.Throwable from label18 to label19 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label65;
        catch java.io.IOException from label20 to label21 with label65;
        catch java.lang.Throwable from label20 to label21 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label65;
        catch java.io.IOException from label22 to label23 with label65;
        catch java.lang.Throwable from label22 to label23 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label24 to label25 with label65;
        catch java.io.IOException from label24 to label25 with label65;
        catch java.lang.Throwable from label24 to label25 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label65;
        catch java.io.IOException from label26 to label27 with label65;
        catch java.lang.Throwable from label26 to label27 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label65;
        catch java.io.IOException from label28 to label29 with label65;
        catch java.lang.Throwable from label28 to label29 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label65;
        catch java.io.IOException from label31 to label32 with label65;
        catch java.lang.Throwable from label31 to label32 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label33 to label34 with label65;
        catch java.io.IOException from label33 to label34 with label65;
        catch java.lang.Throwable from label33 to label34 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label35 to label36 with label65;
        catch java.io.IOException from label35 to label36 with label65;
        catch java.lang.Throwable from label35 to label36 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label37 to label38 with label65;
        catch java.io.IOException from label37 to label38 with label65;
        catch java.lang.Throwable from label37 to label38 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label39 to label40 with label65;
        catch java.io.IOException from label39 to label40 with label65;
        catch java.lang.Throwable from label39 to label40 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label41 to label42 with label65;
        catch java.io.IOException from label41 to label42 with label65;
        catch java.lang.Throwable from label41 to label42 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label43 to label44 with label65;
        catch java.io.IOException from label43 to label44 with label65;
        catch java.lang.Throwable from label43 to label44 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label46 to label47 with label65;
        catch java.io.IOException from label46 to label47 with label65;
        catch java.lang.Throwable from label46 to label47 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label49 to label50 with label65;
        catch java.io.IOException from label49 to label50 with label65;
        catch java.lang.Throwable from label49 to label50 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label51 to label52 with label65;
        catch java.io.IOException from label51 to label52 with label65;
        catch java.lang.Throwable from label51 to label52 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label53 to label54 with label65;
        catch java.io.IOException from label53 to label54 with label65;
        catch java.lang.Throwable from label53 to label54 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label55 to label56 with label65;
        catch java.io.IOException from label55 to label56 with label65;
        catch java.lang.Throwable from label55 to label56 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label57 to label58 with label65;
        catch java.io.IOException from label57 to label58 with label65;
        catch java.lang.Throwable from label57 to label58 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label59 to label60 with label65;
        catch java.io.IOException from label59 to label60 with label65;
        catch java.lang.Throwable from label59 to label60 with label64;
        catch org.xmlpull.v1.XmlPullParserException from label61 to label62 with label65;
        catch java.io.IOException from label61 to label62 with label65;
        catch java.lang.Throwable from label61 to label62 with label64;
        catch java.lang.Throwable from label66 to label67 with label64;
        catch java.lang.Throwable from label68 to label69 with label64;
        catch java.lang.Throwable from label70 to label71 with label64;
        catch java.lang.Throwable from label72 to label73 with label64;
        catch java.lang.Throwable from label74 to label75 with label64;
        catch java.lang.Throwable from label76 to label77 with label64;
        catch java.lang.Throwable from label78 to label79 with label64;
    }

    void <init>(com.android.server.webkit.SystemImpl$1)
    {
        com.android.server.webkit.SystemImpl r0;
        com.android.server.webkit.SystemImpl$1 r1;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: com.android.server.webkit.SystemImpl$1;

        specialinvoke r0.<com.android.server.webkit.SystemImpl: void <init>()>();

        return;
    }

    private void enablePackageForUser(java.lang.String, boolean, int)
    {
        com.android.server.webkit.SystemImpl r0;
        java.lang.String r1, r3, $r14, r16;
        boolean z0;
        int i0;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        android.content.pm.IPackageManager r15;
        byte b2;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        r15 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

     label2:
        if z0 == 0 goto label3;

        b2 = 0;

        goto label4;

     label3:
        b2 = 3;

     label4:
        interfaceinvoke r15.<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>(r1, b2, 0, i0, null);

     label5:
        goto label9;

     label6:
        $r5 := @caughtexception;

        r3 = <com.android.server.webkit.SystemImpl: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to ");

        if z0 == 0 goto label7;

        r16 = "enable ";

        goto label8;

     label7:
        r16 = "disable ";

     label8:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r3, $r14);

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public static com.android.server.webkit.SystemImpl getInstance()
    {
        com.android.server.webkit.SystemImpl $r0;

        $r0 = staticinvoke <com.android.server.webkit.SystemImpl$LazyHolder: com.android.server.webkit.SystemImpl access$100()>();

        return $r0;
    }

    private static java.lang.String[] readSignatures(android.content.res.XmlResourceParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.content.res.XmlResourceParser r0;
        int i0, $i1;
        java.util.ArrayList $r2;
        java.lang.String[] $r3, $r5;
        java.lang.Object[] $r4;
        java.lang.String $r6, $r7, $r8;
        boolean $z0, $z2;

        r0 := @parameter0: android.content.res.XmlResourceParser;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i0 = interfaceinvoke r0.<android.content.res.XmlResourceParser: int getDepth()>();

     label1:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r0, i0);

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r0.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("signature");

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r0.<android.content.res.XmlResourceParser: java.lang.String nextText()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r7 = <com.android.server.webkit.SystemImpl: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, "Found an element in a webview provider that is not a signature");

        goto label1;

     label3:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (java.lang.String)[$i1];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public void enableFallbackLogic(boolean)
    {
        com.android.server.webkit.SystemImpl r0;
        boolean z0;
        android.content.ContentResolver r1;
        android.app.Application $r2;
        int i0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        z0 := @parameter0: boolean;

        $r2 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        r1 = virtualinvoke $r2.<android.app.Application: android.content.ContentResolver getContentResolver()>();

        i0 = (int) z0;

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "webview_fallback_logic_enabled", i0);

        return;
    }

    public void enablePackageForAllUsers(android.content.Context, java.lang.String, boolean)
    {
        com.android.server.webkit.SystemImpl r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.Object $r2, $r5;
        android.os.UserManager $r3;
        java.util.List $r4;
        android.content.pm.UserInfo $r6;
        int $i0;
        android.content.Context r7;
        java.util.Iterator r8;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r7 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r3 = (android.os.UserManager) $r2;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers()>();

        r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.UserInfo) $r5;

        $i0 = $r6.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.webkit.SystemImpl: void enablePackageForUser(java.lang.String,boolean,int)>(r1, z0, $i0);

        goto label1;

     label2:
        return;
    }

    public void ensureZygoteStarted()
    {
        com.android.server.webkit.SystemImpl r0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        staticinvoke <android.webkit.WebViewZygote: android.os.ZygoteProcess getProcess()>();

        return;
    }

    public long getFactoryPackageVersion(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        com.android.server.webkit.SystemImpl r0;
        java.lang.String r1;
        android.app.Application $r2;
        android.content.pm.PackageManager $r3;
        android.content.pm.PackageInfo $r4;
        long $l0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r3 = virtualinvoke $r2.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 2097152);

        $l0 = virtualinvoke $r4.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        return $l0;
    }

    public int getMultiProcessSetting(android.content.Context)
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.Context r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "webview_multiprocess", 0);

        return $i0;
    }

    public android.content.pm.PackageInfo getPackageInfoForProvider(android.webkit.WebViewProviderInfo) throws android.content.pm.PackageManager$NameNotFoundException
    {
        com.android.server.webkit.SystemImpl r0;
        android.webkit.WebViewProviderInfo r1;
        android.app.Application $r2;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4;
        android.content.pm.PackageInfo $r5;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.webkit.WebViewProviderInfo;

        $r2 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r3 = virtualinvoke $r2.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

        $r4 = r1.<android.webkit.WebViewProviderInfo: java.lang.String packageName>;

        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 272630976);

        return $r5;
    }

    public java.util.List getPackageInfoForProviderAllUsers(android.content.Context, android.webkit.WebViewProviderInfo)
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.Context r1;
        android.webkit.WebViewProviderInfo r2;
        java.lang.String $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.webkit.WebViewProviderInfo;

        $r3 = r2.<android.webkit.WebViewProviderInfo: java.lang.String packageName>;

        $r4 = staticinvoke <android.webkit.UserPackage: java.util.List getPackageInfosAllUsers(android.content.Context,java.lang.String,int)>(r1, $r3, 272630976);

        return $r4;
    }

    public java.lang.String getUserChosenWebViewProvider(android.content.Context)
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.Context r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "webview_provider");

        return $r3;
    }

    public android.webkit.WebViewProviderInfo[] getWebViewPackages()
    {
        com.android.server.webkit.SystemImpl r0;
        android.webkit.WebViewProviderInfo[] $r1;

        r0 := @this: com.android.server.webkit.SystemImpl;

        $r1 = r0.<com.android.server.webkit.SystemImpl: android.webkit.WebViewProviderInfo[] mWebViewProviderPackages>;

        return $r1;
    }

    public boolean isFallbackLogicEnabled()
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.ContentResolver r1;
        android.app.Application $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        $r2 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        r1 = virtualinvoke $r2.<android.app.Application: android.content.ContentResolver getContentResolver()>();

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "webview_fallback_logic_enabled", 1);

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isMultiProcessDefaultEnabled()
    {
        com.android.server.webkit.SystemImpl r0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        return 1;
    }

    public void killPackageDependents(java.lang.String)
    {
        com.android.server.webkit.SystemImpl r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void killPackageDependents(java.lang.String,int)>(r3, -1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyZygote(boolean)
    {
        com.android.server.webkit.SystemImpl r0;
        boolean z0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        z0 := @parameter0: boolean;

        staticinvoke <android.webkit.WebViewZygote: void setMultiprocessEnabled(boolean)>(z0);

        return;
    }

    public int onWebViewProviderChanged(android.content.pm.PackageInfo)
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.pm.PackageInfo r1;
        int $i0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.content.pm.PackageInfo;

        $i0 = staticinvoke <android.webkit.WebViewFactory: int onWebViewProviderChanged(android.content.pm.PackageInfo)>(r1);

        return $i0;
    }

    public void setMultiProcessSetting(android.content.Context, int)
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.Context r1;
        int i0;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "webview_multiprocess", i0);

        return;
    }

    public boolean systemIsDebuggable()
    {
        com.android.server.webkit.SystemImpl r0;
        boolean $z0;

        r0 := @this: com.android.server.webkit.SystemImpl;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        return $z0;
    }

    public void updateUserSetting(android.content.Context, java.lang.String)
    {
        com.android.server.webkit.SystemImpl r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.ContentResolver r3;

        r0 := @this: com.android.server.webkit.SystemImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if r2 != null goto label1;

        r2 = "";

        goto label1;

     label1:
        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r3, "webview_provider", r2);

        return;
    }
}
