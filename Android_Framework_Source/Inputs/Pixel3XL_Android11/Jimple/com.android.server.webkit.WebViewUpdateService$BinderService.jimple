class com.android.server.webkit.WebViewUpdateService$BinderService extends android.webkit.IWebViewUpdateService$Stub
{
    final com.android.server.webkit.WebViewUpdateService this$0;

    private void <init>(com.android.server.webkit.WebViewUpdateService)
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        com.android.server.webkit.WebViewUpdateService r1;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r1 := @parameter0: com.android.server.webkit.WebViewUpdateService;

        r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0> = r1;

        specialinvoke r0.<android.webkit.IWebViewUpdateService$Stub: void <init>()>();

        return;
    }

    void <init>(com.android.server.webkit.WebViewUpdateService, com.android.server.webkit.WebViewUpdateService$1)
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        com.android.server.webkit.WebViewUpdateService r1;
        com.android.server.webkit.WebViewUpdateService$1 r2;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r1 := @parameter0: com.android.server.webkit.WebViewUpdateService;

        r2 := @parameter1: com.android.server.webkit.WebViewUpdateService$1;

        specialinvoke r0.<com.android.server.webkit.WebViewUpdateService$BinderService: void <init>(com.android.server.webkit.WebViewUpdateService)>(r1);

        return;
    }

    private void grantVisibilityToCaller(java.lang.String, int)
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4;
        android.content.pm.PackageManagerInternal r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r2 = (android.content.pm.PackageManagerInternal) $r3;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        i1 = virtualinvoke r2.<android.content.pm.PackageManagerInternal: int getPackageUidInternal(java.lang.String,int,int)>(r1, 0, $i2);

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        virtualinvoke r2.<android.content.pm.PackageManagerInternal: void grantImplicitAccess(int,android.content.Intent,int,int,boolean)>($i3, null, $i4, i1, 1);

        return;
    }

    public java.lang.String changeProviderAndSetting(java.lang.String)
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        long l0;
        com.android.server.webkit.WebViewUpdateService $r1, $r11;
        android.content.Context $r2;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r10;
        com.android.server.webkit.WebViewUpdateServiceImpl $r12;
        java.lang.Throwable $r13;
        java.lang.String r14, r15, r18;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r14 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.webkit.WebViewUpdateService: android.content.Context getContext()>();

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r11 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r12 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r11);

        r15 = virtualinvoke $r12.<com.android.server.webkit.WebViewUpdateServiceImpl: java.lang.String changeProviderAndSetting(java.lang.String)>(r14);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r15;

     label3:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r13;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: changeProviderAndSetting() from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        r18 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WebViewUpdateService", r18);

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>(r18);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.server.webkit.WebViewUpdateService $r4, $r6;
        android.content.Context $r5;
        boolean $z0;
        com.android.server.webkit.WebViewUpdateServiceImpl $r7;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.webkit.WebViewUpdateService: android.content.Context getContext()>();

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r5, "WebViewUpdateService", r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r7 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r6);

        virtualinvoke $r7.<com.android.server.webkit.WebViewUpdateServiceImpl: void dumpState(java.io.PrintWriter)>(r2);

        return;
    }

    public void enableMultiProcess(boolean)
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        boolean z0;
        long l0;
        com.android.server.webkit.WebViewUpdateService $r1, $r11;
        android.content.Context $r2;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r10;
        com.android.server.webkit.WebViewUpdateServiceImpl $r12;
        java.lang.Throwable $r13;
        java.lang.String r16;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.webkit.WebViewUpdateService: android.content.Context getContext()>();

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r11 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r12 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r11);

        virtualinvoke $r12.<com.android.server.webkit.WebViewUpdateServiceImpl: void enableMultiProcess(boolean)>(z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r13;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: enableMultiProcess() from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        r16 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WebViewUpdateService", r16);

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>(r16);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.webkit.WebViewProviderInfo[] getAllWebViewPackages()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        com.android.server.webkit.WebViewUpdateService $r1;
        com.android.server.webkit.WebViewUpdateServiceImpl $r2;
        android.webkit.WebViewProviderInfo[] $r3;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        $r1 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r2 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r1);

        $r3 = virtualinvoke $r2.<com.android.server.webkit.WebViewUpdateServiceImpl: android.webkit.WebViewProviderInfo[] getWebViewPackages()>();

        return $r3;
    }

    public android.content.pm.PackageInfo getCurrentWebViewPackage()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        android.content.pm.PackageInfo r1;
        com.android.server.webkit.WebViewUpdateService $r2;
        com.android.server.webkit.WebViewUpdateServiceImpl $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        $r2 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r3 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r2);

        r1 = virtualinvoke $r3.<com.android.server.webkit.WebViewUpdateServiceImpl: android.content.pm.PackageInfo getCurrentWebViewPackage()>();

        if r1 == null goto label1;

        $r4 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.webkit.WebViewUpdateService$BinderService: void grantVisibilityToCaller(java.lang.String,int)>($r4, $i0);

     label1:
        return r1;
    }

    public java.lang.String getCurrentWebViewPackageName()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        android.content.pm.PackageInfo r1;
        java.lang.String r2;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r1 = virtualinvoke r0.<com.android.server.webkit.WebViewUpdateService$BinderService: android.content.pm.PackageInfo getCurrentWebViewPackage()>();

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

     label2:
        return r2;
    }

    public android.webkit.WebViewProviderInfo[] getValidWebViewPackages()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        com.android.server.webkit.WebViewUpdateService $r1;
        com.android.server.webkit.WebViewUpdateServiceImpl $r2;
        android.webkit.WebViewProviderInfo[] $r3;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        $r1 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r2 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r1);

        $r3 = virtualinvoke $r2.<com.android.server.webkit.WebViewUpdateServiceImpl: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()>();

        return $r3;
    }

    public boolean isMultiProcessEnabled()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        com.android.server.webkit.WebViewUpdateService $r1;
        com.android.server.webkit.WebViewUpdateServiceImpl $r2;
        boolean $z0;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        $r1 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r2 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r1);

        $z0 = virtualinvoke $r2.<com.android.server.webkit.WebViewUpdateServiceImpl: boolean isMultiProcessEnabled()>();

        return $z0;
    }

    public void notifyRelroCreationCompleted()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        long l0;
        int $i1, $i2;
        com.android.server.webkit.WebViewUpdateService $r2;
        com.android.server.webkit.WebViewUpdateServiceImpl $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1037 goto label1;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 == 1000 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r3 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r2);

        virtualinvoke $r3.<com.android.server.webkit.WebViewUpdateServiceImpl: void notifyRelroCreationCompleted()>();

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.webkit.WebViewUpdateServiceShellCommand $r7;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.webkit.WebViewUpdateServiceShellCommand;

        specialinvoke $r7.<com.android.server.webkit.WebViewUpdateServiceShellCommand: void <init>(android.webkit.IWebViewUpdateService)>(r0);

        virtualinvoke $r7.<com.android.server.webkit.WebViewUpdateServiceShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public android.webkit.WebViewProviderResponse waitForAndGetProvider()
    {
        com.android.server.webkit.WebViewUpdateService$BinderService r0;
        android.webkit.WebViewProviderResponse r1;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r2;
        com.android.server.webkit.WebViewUpdateService $r3;
        com.android.server.webkit.WebViewUpdateServiceImpl $r4;
        android.content.pm.PackageInfo $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.webkit.WebViewUpdateService$BinderService;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 == $i1 goto label2;

        $r3 = r0.<com.android.server.webkit.WebViewUpdateService$BinderService: com.android.server.webkit.WebViewUpdateService this$0>;

        $r4 = staticinvoke <com.android.server.webkit.WebViewUpdateService: com.android.server.webkit.WebViewUpdateServiceImpl access$100(com.android.server.webkit.WebViewUpdateService)>($r3);

        r1 = virtualinvoke $r4.<com.android.server.webkit.WebViewUpdateServiceImpl: android.webkit.WebViewProviderResponse waitForAndGetProvider()>();

        $r5 = r1.<android.webkit.WebViewProviderResponse: android.content.pm.PackageInfo packageInfo>;

        if $r5 == null goto label1;

        $r6 = r1.<android.webkit.WebViewProviderResponse: android.content.pm.PackageInfo packageInfo>;

        $r7 = $r6.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.webkit.WebViewUpdateService$BinderService: void grantVisibilityToCaller(java.lang.String,int)>($r7, $i2);

     label1:
        return r1;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot create a WebView from the SystemServer");

        throw $r2;
    }
}
