final class com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private final com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback mCallback;
    private final int mDisplayId;
    private final android.util.IntArray mEmbeddedDisplayIdList;
    private final android.os.Handler mHandler;
    private final long mRecurringAccessibilityEventsIntervalMillis;
    private final com.android.server.wm.WindowManagerService mService;
    private final java.util.Set mTempBinderSet;
    private final android.graphics.Matrix mTempMatrix;
    private final android.graphics.Point mTempPoint;
    private final android.graphics.RectF mTempRectF;
    private final android.graphics.Region mTempRegion;
    private final android.graphics.Region mTempRegion1;
    private final android.util.SparseArray mTempWindowStates;

    public void <init>(com.android.server.wm.WindowManagerService, int, com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowManagerService r1, $r12;
        int i0;
        com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback r2;
        android.util.SparseArray $r3;
        android.util.ArraySet $r4;
        android.graphics.RectF $r5;
        android.graphics.Matrix $r6;
        android.graphics.Point $r7;
        android.graphics.Region $r8, $r9;
        android.util.IntArray $r10;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver$MyHandler $r11;
        com.android.server.wm.WindowManagerService$H $r13;
        android.os.Looper $r14;
        long $l1;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.SparseArray mTempWindowStates> = $r3;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.Set mTempBinderSet> = $r4;

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.RectF mTempRectF> = $r5;

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Matrix mTempMatrix> = $r6;

        $r7 = new android.graphics.Point;

        specialinvoke $r7.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint> = $r7;

        $r8 = new android.graphics.Region;

        specialinvoke $r8.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion> = $r8;

        $r9 = new android.graphics.Region;

        specialinvoke $r9.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion1> = $r9;

        $r10 = new android.util.IntArray;

        specialinvoke $r10.<android.util.IntArray: void <init>(int)>(0);

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.IntArray mEmbeddedDisplayIdList> = $r10;

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback mCallback> = r2;

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: int mDisplayId> = i0;

        $r11 = new com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver$MyHandler;

        $r12 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        $r13 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: android.os.Looper getLooper()>();

        specialinvoke $r11.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver$MyHandler: void <init>(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver,android.os.Looper)>(r0, $r14);

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler> = $r11;

        $l1 = staticinvoke <android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: long mRecurringAccessibilityEventsIntervalMillis> = $l1;

        virtualinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeChangedWindows(boolean)>(1);

        return;
    }

    private static void addPopulatedWindowInfo(com.android.server.wm.WindowState, android.graphics.Region, java.util.List, java.util.Set)
    {
        android.graphics.Region r0, $r3;
        java.util.List r1;
        java.util.Set r2;
        int $i0;
        android.os.IBinder $r4;
        com.android.server.wm.WindowState r5;
        android.view.WindowInfo r6;

        r5 := @parameter0: com.android.server.wm.WindowState;

        r0 := @parameter1: android.graphics.Region;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: java.util.Set;

        r6 = virtualinvoke r5.<com.android.server.wm.WindowState: android.view.WindowInfo getWindowInfo()>();

        $r3 = r6.<android.view.WindowInfo: android.graphics.Region regionInScreen>;

        virtualinvoke $r3.<android.graphics.Region: boolean set(android.graphics.Region)>(r0);

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        r6.<android.view.WindowInfo: int layer> = $i0;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r4 = r6.<android.view.WindowInfo: android.os.IBinder token>;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

        return;
    }

    private static void clearAndRecycleWindows(java.util.List)
    {
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r1;
        android.view.WindowInfo $r2;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i1);

        $r2 = (android.view.WindowInfo) $r1;

        virtualinvoke $r2.<android.view.WindowInfo: void recycle()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    private void computeWindowRegionInScreen(com.android.server.wm.WindowState, android.graphics.Region)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowState r1;
        android.graphics.Region r2, r3;
        android.graphics.Matrix r4;
        com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$2C1tADzS58YZU_H5KqoEnZ2M57I $r5;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: android.graphics.Region;

        r3 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion1>;

        virtualinvoke r1.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>(r3);

        r4 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Matrix mTempMatrix>;

        staticinvoke <com.android.server.wm.AccessibilityController: void access$500(com.android.server.wm.WindowState,android.graphics.Matrix)>(r1, r4);

        $r5 = new com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$2C1tADzS58YZU_H5KqoEnZ2M57I;

        specialinvoke $r5.<com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$2C1tADzS58YZU_H5KqoEnZ2M57I: void <init>(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver,com.android.server.wm.WindowState,android.graphics.Matrix,android.graphics.Region)>(r0, r1, r4, r2);

        staticinvoke <com.android.server.wm.utils.RegionUtils: void forEachRect(android.graphics.Region,java.util.function.Consumer)>(r3, $r5);

        return;
    }

    private com.android.server.wm.WindowState findRootDisplayParentWindow(com.android.server.wm.WindowState)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowState r1, r4, r5, r6;
        com.android.server.wm.DisplayContent $r2, $r3;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r4 := @parameter0: com.android.server.wm.WindowState;

        $r2 = virtualinvoke r4.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r5 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        if r5 != null goto label1;

        return null;

     label1:
        r6 = r5;

     label2:
        if r6 == null goto label3;

        $r3 = virtualinvoke r6.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        r5 = r6;

        r6 = r1;

        goto label2;

     label3:
        return r5;
    }

    private com.android.server.wm.WindowState getTopFocusWindow()
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        return $r4;
    }

    private static boolean isReportedWindowType(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 2013 goto label1;

        if i0 == 2021 goto label1;

        if i0 == 2026 goto label1;

        if i0 == 2016 goto label1;

        if i0 == 2022 goto label1;

        if i0 == 2018 goto label1;

        if i0 == 2027 goto label1;

        if i0 == 1004 goto label1;

        if i0 == 2015 goto label1;

        if i0 == 2030 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$populateVisibleWindowsOnScreenLocked$1(java.util.List, com.android.server.wm.WindowState)
    {
        java.util.List r0;
        com.android.server.wm.WindowState r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void populateVisibleWindowsOnScreenLocked(android.util.SparseArray)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        android.util.SparseArray r1;
        com.android.server.wm.DisplayContent r3;
        java.util.ArrayList $r4;
        com.android.server.wm.WindowManagerService $r5, $r8;
        int $i0, $i1, i2;
        com.android.server.wm.RootWindowContainer $r6, $r10;
        com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$gS9b6G5QkV_2hX2iGcgQl5HPWws $r7;
        com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$n5Rg8WjCeBbjXNbZvPUlKzhx8Nw $r9;
        java.lang.Object $r11;
        com.android.server.wm.WindowState $r12;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: android.util.SparseArray;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i0 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: int mDisplayId>;

        r3 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i0);

        if r3 != null goto label1;

        return;

     label1:
        $r7 = new com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$gS9b6G5QkV_2hX2iGcgQl5HPWws;

        specialinvoke $r7.<com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$gS9b6G5QkV_2hX2iGcgQl5HPWws: void <init>(java.util.List)>($r4);

        virtualinvoke r3.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r7, 0);

        $r8 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        $r10 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r9 = new com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$n5Rg8WjCeBbjXNbZvPUlKzhx8Nw;

        specialinvoke $r9.<com.android.server.wm._$$Lambda$AccessibilityController$WindowsForAccessibilityObserver$n5Rg8WjCeBbjXNbZvPUlKzhx8Nw: void <init>(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver,java.util.List)>(r0, $r4);

        virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r9, 0);

        i2 = 0;

     label2:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i2 >= $i1 goto label3;

        $r11 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r12 = (com.android.server.wm.WindowState) $r11;

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, $r12);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private void updateUnaccountedSpace(com.android.server.wm.WindowState, android.graphics.Region, android.graphics.Region, java.util.HashSet)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowState r1;
        android.graphics.Region r2, $r8, $r10, r16;
        java.util.HashSet r3;
        android.view.WindowManager$LayoutParams $r5, $r7;
        int $i0, $i1, $i2, $i3;
        android.graphics.Region$Op $r6, $r11, $r12, $r15;
        boolean $z1, $z4;
        android.graphics.Rect $r9, $r14;
        java.lang.Integer $r13;
        com.android.server.wm.Task r18;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r16 := @parameter1: android.graphics.Region;

        r2 := @parameter2: android.graphics.Region;

        r3 := @parameter3: java.util.HashSet;

        $r5 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2032 goto label4;

        $r6 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>(r16, r2, $r6);

        $r7 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r7.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 40;

        if $i2 != 0 goto label4;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean hasTapExcludeRegion()>();

        if $z1 != 0 goto label1;

        $r14 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()>();

        $r15 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>($r14, r2, $r15);

        goto label2;

     label1:
        $r8 = new android.graphics.Region;

        $r9 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()>();

        specialinvoke $r8.<android.graphics.Region: void <init>(android.graphics.Rect)>($r9);

        $r10 = new android.graphics.Region;

        specialinvoke $r10.<android.graphics.Region: void <init>()>();

        virtualinvoke r1.<com.android.server.wm.WindowState: void getTapExcludeRegion(android.graphics.Region)>($r10);

        $r11 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke $r8.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>($r10, $r8, $r11);

        $r12 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>($r8, r2, $r12);

     label2:
        r18 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r18 == null goto label3;

        $i3 = r18.<com.android.server.wm.Task: int mTaskId>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>($r13);

        goto label4;

     label3:
        $z4 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean hasTapExcludeRegion()>();

        if $z4 != 0 goto label4;

        virtualinvoke r2.<android.graphics.Region: void setEmpty()>();

     label4:
        return;
    }

    private boolean windowMattersToAccessibility(com.android.server.wm.WindowState, android.graphics.Region, android.graphics.Region, java.util.HashSet)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowState r1;
        android.graphics.Region r2, r3;
        java.util.HashSet r4;
        com.android.server.wm.WindowManagerService $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.WindowManager$LayoutParams $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r9;
        com.android.server.wm.RecentsAnimationController r10;
        com.android.server.wm.Task r11;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: android.graphics.Region;

        r3 := @parameter2: android.graphics.Region;

        r4 := @parameter3: java.util.HashSet;

        $r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        r10 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r10 == null goto label1;

        $z4 = virtualinvoke r10.<com.android.server.wm.RecentsAnimationController: boolean shouldIgnoreForAccessibility(com.android.server.wm.WindowState)>(r1);

        if $z4 == 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r11 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r11 == null goto label3;

        $i4 = r11.<com.android.server.wm.Task: int mTaskId>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $z3 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r9);

        if $z3 == 0 goto label3;

        return 0;

     label3:
        $r6 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r6.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label4;

        $r8 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 == 2034 goto label4;

        return 0;

     label4:
        $z1 = virtualinvoke r3.<android.graphics.Region: boolean quickReject(android.graphics.Region)>(r2);

        if $z1 == 0 goto label5;

        return 0;

     label5:
        $r7 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        $z2 = staticinvoke <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: boolean isReportedWindowType(int)>($i2);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    void addEmbeddedDisplay(int)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        int i0, $i1;
        android.util.IntArray $r1;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: int mDisplayId>;

        if i0 != $i1 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.IntArray mEmbeddedDisplayIdList>;

        virtualinvoke $r1.<android.util.IntArray: void add(int)>(i0);

        return;
    }

    public void computeChangedWindows(boolean)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        boolean z0, $z3, $z4, $z7, $z8, $z10, z11, $z12;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowState r3, r8;
        android.graphics.Region r4, r9, $r36;
        android.util.SparseArray r5, $r17, $r31;
        java.util.Set r6;
        java.util.HashSet r7;
        java.util.ArrayList $r10;
        com.android.server.wm.WindowManagerService $r11, $r12, $r18;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12;
        com.android.server.wm.RootWindowContainer $r13, $r19;
        android.graphics.Point $r14, $r15, $r16;
        com.android.server.wm.DisplayContent $r20, r46;
        android.view.IWindow $r21;
        com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback $r22;
        java.lang.Object $r23, $r28, $r32, $r35;
        android.os.IBinder $r24, $r34, r51;
        java.util.List $r25, $r26, $r27, $r29;
        com.android.server.wm.ShellRoot $r33;
        android.graphics.Rect $r37;
        android.graphics.Region$Op $r38;
        java.lang.Throwable $r39, $r40, $r41, $r42, $r43, $r44, r45;
        android.view.Display r47;
        android.view.WindowInfo r48, r50;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        z0 := @parameter0: boolean;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        r2 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowState getTopFocusWindow()>();

     label02:
        if r3 != null goto label06;

     label03:
        exitmonitor r2;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r44 := @caughtexception;

        r45 = $r44;

        goto label46;

     label06:
        $r12 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        $r13 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i0 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: int mDisplayId>;

        r46 = virtualinvoke $r13.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i0);

     label07:
        if r46 != null goto label10;

     label08:
        exitmonitor r2;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        r47 = virtualinvoke r46.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r14 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint>;

        virtualinvoke r47.<android.view.Display: void getRealSize(android.graphics.Point)>($r14);

        $r15 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint>;

        i4 = $r15.<android.graphics.Point: int x>;

        $r16 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint>;

        i5 = $r16.<android.graphics.Point: int y>;

        r4 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion>;

        virtualinvoke r4.<android.graphics.Region: boolean set(int,int,int,int)>(0, 0, i4, i5);

        r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.SparseArray mTempWindowStates>;

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void populateVisibleWindowsOnScreenLocked(android.util.SparseArray)>(r5);

        r6 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.Set mTempBinderSet>;

        interfaceinvoke r6.<java.util.Set: void clear()>();

     label11:
        z11 = 0;

     label12:
        i6 = virtualinvoke r5.<android.util.SparseArray: int size()>();

        r7 = new java.util.HashSet;

        specialinvoke r7.<java.util.HashSet: void <init>()>();

     label13:
        i7 = i6 + -1;

     label14:
        if i7 < 0 goto label24;

     label15:
        $r35 = virtualinvoke r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i7);

        r8 = (com.android.server.wm.WindowState) $r35;

        r9 = new android.graphics.Region;

        specialinvoke r9.<android.graphics.Region: void <init>()>();

     label16:
        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeWindowRegionInScreen(com.android.server.wm.WindowState,android.graphics.Region)>(r8, r9);

        $z7 = specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: boolean windowMattersToAccessibility(com.android.server.wm.WindowState,android.graphics.Region,android.graphics.Region,java.util.HashSet)>(r8, r9, r4, r7);

        if $z7 == 0 goto label18;

        staticinvoke <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void addPopulatedWindowInfo(com.android.server.wm.WindowState,android.graphics.Region,java.util.List,java.util.Set)>(r8, r9, $r10, r6);

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void updateUnaccountedSpace(com.android.server.wm.WindowState,android.graphics.Region,android.graphics.Region,java.util.HashSet)>(r8, r9, r4, r7);

        $z10 = virtualinvoke r8.<com.android.server.wm.WindowState: boolean isFocused()>();

        z11 = z11 | $z10;

     label17:
        goto label20;

     label18:
        $r36 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion1>;

        $z8 = staticinvoke <com.android.server.wm.AccessibilityController: boolean isUntouchableNavigationBar(com.android.server.wm.WindowState,android.graphics.Region)>(r8, $r36);

        if $z8 == 0 goto label20;

        $r37 = staticinvoke <com.android.server.wm.AccessibilityController: android.graphics.Rect getNavBarInsets(com.android.server.wm.DisplayContent)>(r46);

        $r38 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke r4.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>($r37, r4, $r38);

     label19:
        goto label20;

     label20:
        $z12 = virtualinvoke r4.<android.graphics.Region: boolean isEmpty()>();

        if $z12 == 0 goto label22;

     label21:
        if z11 == 0 goto label22;

        goto label24;

     label22:
        i7 = i7 + -1;

        goto label14;

     label23:
        $r40 := @caughtexception;

        r45 = $r40;

        goto label46;

     label24:
        $r17 = r46.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $i1 = virtualinvoke $r17.<android.util.SparseArray: int size()>();

        i8 = $i1 - 1;

     label25:
        if i8 < 0 goto label30;

     label26:
        $r31 = r46.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $r32 = virtualinvoke $r31.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        $r33 = (com.android.server.wm.ShellRoot) $r32;

        r48 = virtualinvoke $r33.<com.android.server.wm.ShellRoot: android.view.WindowInfo getWindowInfo()>();

     label27:
        if r48 != null goto label28;

        goto label29;

     label28:
        $i3 = interfaceinvoke r6.<java.util.Set: int size()>();

        r48.<android.view.WindowInfo: int layer> = $i3;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r48);

        $r34 = r48.<android.view.WindowInfo: android.os.IBinder token>;

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r34);

     label29:
        i8 = i8 + -1;

        goto label25;

     label30:
        i9 = interfaceinvoke $r10.<java.util.List: int size()>();

     label31:
        i10 = 0;

     label32:
        if i10 >= i9 goto label40;

     label33:
        $r23 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i10);

        r50 = (android.view.WindowInfo) $r23;

        $r24 = r50.<android.view.WindowInfo: android.os.IBinder parentToken>;

        $z3 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r24);

        if $z3 != 0 goto label34;

        r50.<android.view.WindowInfo: android.os.IBinder parentToken> = null;

     label34:
        $r25 = r50.<android.view.WindowInfo: java.util.List childTokens>;

        if $r25 == null goto label39;

        $r26 = r50.<android.view.WindowInfo: java.util.List childTokens>;

        $i2 = interfaceinvoke $r26.<java.util.List: int size()>();

        i11 = $i2 - 1;

     label35:
        if i11 < 0 goto label38;

     label36:
        $r27 = r50.<android.view.WindowInfo: java.util.List childTokens>;

        $r28 = interfaceinvoke $r27.<java.util.List: java.lang.Object get(int)>(i11);

        $z4 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r28);

        if $z4 != 0 goto label37;

        $r29 = r50.<android.view.WindowInfo: java.util.List childTokens>;

        interfaceinvoke $r29.<java.util.List: java.lang.Object remove(int)>(i11);

     label37:
        i11 = i11 + -1;

        goto label35;

     label38:
        goto label39;

     label39:
        i10 = i10 + 1;

        goto label32;

     label40:
        virtualinvoke r5.<android.util.SparseArray: void clear()>();

        interfaceinvoke r6.<java.util.Set: void clear()>();

        $r18 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mService>;

        $r19 = $r18.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r20 = virtualinvoke $r19.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        i12 = virtualinvoke $r20.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r21 = r3.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r51 = interfaceinvoke $r21.<android.view.IWindow: android.os.IBinder asBinder()>();

     label41:
        exitmonitor r2;

     label42:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r22 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback mCallback>;

        interfaceinvoke $r22.<com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback: void onWindowsForAccessibilityChanged(boolean,int,android.os.IBinder,java.util.List)>(z0, i12, r51, $r10);

        staticinvoke <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void clearAndRecycleWindows(java.util.List)>($r10);

        return;

     label43:
        $r41 := @caughtexception;

        r45 = $r41;

        goto label46;

     label44:
        $r39 := @caughtexception;

        r45 = $r39;

        goto label46;

     label45:
        $r43 := @caughtexception;

        r45 = $r43;

     label46:
        exitmonitor r2;

     label47:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r45;

     label48:
        $r42 := @caughtexception;

        r45 = $r42;

        goto label46;

        catch java.lang.Throwable from label01 to label02 with label45;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label45;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label45;
        catch java.lang.Throwable from label12 to label13 with label45;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label16 to label17 with label44;
        catch java.lang.Throwable from label18 to label19 with label44;
        catch java.lang.Throwable from label20 to label21 with label44;
        catch java.lang.Throwable from label24 to label25 with label44;
        catch java.lang.Throwable from label26 to label27 with label44;
        catch java.lang.Throwable from label28 to label29 with label44;
        catch java.lang.Throwable from label30 to label31 with label44;
        catch java.lang.Throwable from label33 to label34 with label44;
        catch java.lang.Throwable from label34 to label35 with label44;
        catch java.lang.Throwable from label36 to label37 with label44;
        catch java.lang.Throwable from label40 to label41 with label44;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label46 to label47 with label48;
    }

    android.util.IntArray getAndClearEmbeddedDisplayIdList()
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        android.util.IntArray $r2, $r3, $r4, $r5;
        int $i0;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r2 = new android.util.IntArray;

        $r3 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.IntArray mEmbeddedDisplayIdList>;

        $i0 = virtualinvoke $r3.<android.util.IntArray: int size()>();

        specialinvoke $r2.<android.util.IntArray: void <init>(int)>($i0);

        $r4 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.IntArray mEmbeddedDisplayIdList>;

        virtualinvoke $r2.<android.util.IntArray: void addAll(android.util.IntArray)>($r4);

        $r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.IntArray mEmbeddedDisplayIdList>;

        virtualinvoke $r5.<android.util.IntArray: void clear()>();

        return $r2;
    }

    public void lambda$computeWindowRegionInScreen$0$AccessibilityController$WindowsForAccessibilityObserver(com.android.server.wm.WindowState, android.graphics.Matrix, android.graphics.Region, android.graphics.Rect)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowState r1;
        android.graphics.Matrix r2;
        android.graphics.Region r3;
        android.graphics.Rect r4, $r6, $r7, $r8;
        android.graphics.RectF r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: android.graphics.Matrix;

        r3 := @parameter2: android.graphics.Region;

        r4 := @parameter3: android.graphics.Rect;

        r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.RectF mTempRectF>;

        virtualinvoke r5.<android.graphics.RectF: void set(android.graphics.Rect)>(r4);

        $r6 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i0 = $r6.<android.graphics.Rect: int left>;

        $i1 = neg $i0;

        $f0 = (float) $i1;

        $r7 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i2 = $r7.<android.graphics.Rect: int top>;

        $i3 = neg $i2;

        $f1 = (float) $i3;

        virtualinvoke r5.<android.graphics.RectF: void offset(float,float)>($f0, $f1);

        virtualinvoke r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r5);

        $r8 = new android.graphics.Rect;

        $f2 = r5.<android.graphics.RectF: float left>;

        $i7 = (int) $f2;

        $f3 = r5.<android.graphics.RectF: float top>;

        $i6 = (int) $f3;

        $f4 = r5.<android.graphics.RectF: float right>;

        $i5 = (int) $f4;

        $f5 = r5.<android.graphics.RectF: float bottom>;

        $i4 = (int) $f5;

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>($i7, $i6, $i5, $i4);

        virtualinvoke r3.<android.graphics.Region: boolean union(android.graphics.Rect)>($r8);

        return;
    }

    public void lambda$populateVisibleWindowsOnScreenLocked$2$AccessibilityController$WindowsForAccessibilityObserver(java.util.List, com.android.server.wm.WindowState)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        java.util.List r1;
        com.android.server.wm.WindowState r2, r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.android.server.wm.WindowState;

        r3 = specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowState findRootDisplayParentWindow(com.android.server.wm.WindowState)>(r2);

        if r3 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        $i0 = interfaceinvoke r1.<java.util.List: int lastIndexOf(java.lang.Object)>(r3);

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>($i0, r2);

     label2:
        return;
    }

    public void performComputeChangedWindowsNotLocked(boolean)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        boolean z0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(1);

        virtualinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeChangedWindows(boolean)>(z0);

        return;
    }

    public void scheduleComputeChangedWindowsLocked()
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        android.os.Handler $r1, $r2;
        boolean $z0;
        long $l0;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r1.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        $l0 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: long mRecurringAccessibilityEventsIntervalMillis>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, $l0);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.lang.String LOG_TAG> = "WindowManager";

        <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: boolean DEBUG> = 0;

        return;
    }
}
