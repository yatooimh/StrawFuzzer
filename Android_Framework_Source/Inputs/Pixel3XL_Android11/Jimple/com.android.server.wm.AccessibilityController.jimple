final class com.android.server.wm.AccessibilityController extends java.lang.Object
{
    private static final android.graphics.Rect EMPTY_RECT;
    private static final float[] sTempFloats;
    private android.util.SparseArray mDisplayMagnifiers;
    private final com.android.server.wm.WindowManagerService mService;
    private android.util.SparseArray mWindowsForAccessibilityObserver;

    static void <clinit>()
    {
        android.graphics.Rect $r0;
        float[] $r1;

        $r0 = new android.graphics.Rect;

        specialinvoke $r0.<android.graphics.Rect: void <init>()>();

        <com.android.server.wm.AccessibilityController: android.graphics.Rect EMPTY_RECT> = $r0;

        $r1 = newarray (float)[9];

        <com.android.server.wm.AccessibilityController: float[] sTempFloats> = $r1;

        return;
    }

    public void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.WindowManagerService r1;
        android.util.SparseArray $r2, $r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver> = $r3;

        r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService> = r1;

        return;
    }

    static void access$500(com.android.server.wm.WindowState, android.graphics.Matrix)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Matrix r1;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.graphics.Matrix;

        staticinvoke <com.android.server.wm.AccessibilityController: void populateTransformationMatrixLocked(com.android.server.wm.WindowState,android.graphics.Matrix)>(r0, r1);

        return;
    }

    static android.graphics.Rect getNavBarInsets(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.InsetsStateController $r0;
        android.view.InsetsState $r1;
        com.android.server.wm.DisplayContent r2;
        android.view.InsetsSource r3;
        android.graphics.Rect r4;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        $r0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        $r1 = virtualinvoke $r0.<com.android.server.wm.InsetsStateController: android.view.InsetsState getRawInsetsState()>();

        r3 = virtualinvoke $r1.<android.view.InsetsState: android.view.InsetsSource peekSource(int)>(1);

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.view.InsetsSource: android.graphics.Rect getFrame()>();

        goto label2;

     label1:
        r4 = <com.android.server.wm.AccessibilityController: android.graphics.Rect EMPTY_RECT>;

     label2:
        return r4;
    }

    private static boolean isEmbeddedDisplay(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.Display $r1;
        int $i0;
        com.android.server.wm.WindowState $r2;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $i0 = virtualinvoke $r1.<android.view.Display: int getType()>();

        if $i0 != 5 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static boolean isUntouchableNavigationBar(com.android.server.wm.WindowState, android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.graphics.Region;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2019 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>(r1);

        $z0 = virtualinvoke r1.<android.graphics.Region: boolean isEmpty()>();

        return $z0;
    }

    private static void populateTransformationMatrixLocked(com.android.server.wm.WindowState, android.graphics.Matrix)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Matrix r1;
        float[] $r2;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.graphics.Matrix;

        $r2 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        virtualinvoke r0.<com.android.server.wm.WindowState: void getTransformationMatrix(float[],android.graphics.Matrix)>($r2, r1);

        return;
    }

    private void removeObserverOfEmbeddedDisplay(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0, $i1, i2;
        android.util.SparseArray $r1;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r2;
        android.util.IntArray r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r2 := @parameter0: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r3 = virtualinvoke r2.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.IntArray getAndClearEmbeddedDisplayIdList()>();

        i2 = 0;

     label1:
        $i1 = virtualinvoke r3.<android.util.IntArray: int size()>();

        if i2 >= $i1 goto label2;

        i0 = virtualinvoke r3.<android.util.IntArray: int get(int)>(i2);

        $r1 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        virtualinvoke $r1.<android.util.SparseArray: void remove(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void drawMagnifiedRegionBorderIfNeededLocked(int, android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.SurfaceControl$Transaction;

        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r4;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void drawMagnifiedRegionBorderIfNeededLocked(android.view.SurfaceControl$Transaction)>(r1);

     label1:
        return;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.AccessibilityController r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r13;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r3;
        android.util.SparseArray $r5, $r6, $r11;
        int $i0, $i1, i2;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        i2 = 0;

     label1:
        $r5 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label3;

        $r6 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r3 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r7;

        if r3 == null goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Magnification display# ");

        $r11 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $i1 = virtualinvoke $r11.<android.util.SparseArray: int keyAt(int)>(i2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void dump(java.io.PrintWriter,java.lang.String)>(r1, $r13);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void getMagnificationRegionLocked(int, android.graphics.Region)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        android.graphics.Region r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r4;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void getMagnificationRegionLocked(android.graphics.Region)>(r1);

     label1:
        return;
    }

    public android.view.MagnificationSpec getMagnificationSpecForWindowLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.WindowState r1;
        int i0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        android.view.MagnificationSpec $r5;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 = virtualinvoke r1.<com.android.server.wm.WindowState: int getDisplayId()>();

        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r4;

        if r2 == null goto label1;

        $r5 = virtualinvoke r2.<com.android.server.wm.AccessibilityController$DisplayMagnifier: android.view.MagnificationSpec getMagnificationSpecForWindowLocked(com.android.server.wm.WindowState)>(r1);

        return $r5;

     label1:
        return null;
    }

    public void handleWindowObserverOfEmbeddedDisplayLocked(int, com.android.server.wm.WindowState)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0, i1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.WindowState r6, r7, r8;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r9;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r6 := @parameter1: com.android.server.wm.WindowState;

        if i0 == 0 goto label5;

        if r6 != null goto label1;

        goto label5;

     label1:
        r7 = r6;

        r8 = r6;

     label2:
        if r8 == null goto label3;

        r7 = r8;

        $r5 = virtualinvoke r8.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r8 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        goto label2;

     label3:
        i1 = virtualinvoke r7.<com.android.server.wm.WindowState: int getDisplayId()>();

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r9 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r3;

        if r9 == null goto label4;

        virtualinvoke r9.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void addEmbeddedDisplay(int)>(i0);

        $r4 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9);

     label4:
        return;

     label5:
        return;
    }

    public boolean hasCallbacksLocked()
    {
        com.android.server.wm.AccessibilityController r0;
        android.util.SparseArray $r1, $r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.AccessibilityController;

        $r1 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if $i0 > 0 goto label2;

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public void onAppWindowTransitionLocked(int, int)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0, i1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onAppWindowTransitionLocked(int,int)>(i0, i1);

     label1:
        return;
    }

    public void onRectangleOnScreenRequestedLocked(int, android.graphics.Rect)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        android.graphics.Rect r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r4;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onRectangleOnScreenRequestedLocked(android.graphics.Rect)>(r1);

     label1:
        return;
    }

    public void onRotationChangedLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3, $r5;
        com.android.server.wm.DisplayContent r6;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r7;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r6 := @parameter0: com.android.server.wm.DisplayContent;

        i0 = virtualinvoke r6.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onRotationChangedLocked(com.android.server.wm.DisplayContent)>(r6);

     label1:
        $r4 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r5;

        if r7 == null goto label2;

        virtualinvoke r7.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public transient void onSomeWindowResizedOrMovedLocked(int[])
    {
        com.android.server.wm.AccessibilityController r0;
        int[] r1;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r2;
        int $i0, $i1, i2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: int[];

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $i1 = r1[i2];

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r2 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r4;

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void onWindowFocusChangedNotLocked(int)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r2, r6;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r6 = null;

        r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r4;

     label2:
        if r2 == null goto label3;

        r6 = r2;

     label3:
        exitmonitor r1;

     label4:
        if r6 == null goto label5;

        virtualinvoke r6.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void performComputeChangedWindowsNotLocked(boolean)>(0);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onWindowLayersChangedLocked(int)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        android.util.SparseArray $r1, $r3;
        java.lang.Object $r2, $r4;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r5;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r6;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r2;

        if r5 == null goto label1;

        virtualinvoke r5.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onWindowLayersChangedLocked()>();

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r4;

        if r6 == null goto label2;

        virtualinvoke r6.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public void onWindowTransitionLocked(com.android.server.wm.WindowState, int)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0, i1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3, $r5;
        com.android.server.wm.WindowState r6;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r7;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r6 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        i1 = virtualinvoke r6.<com.android.server.wm.WindowState: int getDisplayId()>();

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r6, i0);

     label1:
        $r4 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r7 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r5;

        if r7 == null goto label2;

        virtualinvoke r7.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public void performComputeChangedWindowsNotLocked(int, boolean)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        boolean z0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r2, r6;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r6 = null;

        r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r4;

     label2:
        if r2 == null goto label3;

        r6 = r2;

     label3:
        exitmonitor r1;

     label4:
        if r6 == null goto label5;

        virtualinvoke r6.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void performComputeChangedWindowsNotLocked(boolean)>(z0);

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setForceShowMagnifiableBoundsLocked(int, boolean)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        boolean z0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void setForceShowMagnifiableBoundsLocked(boolean)>(z0);

        virtualinvoke r1.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void showMagnificationBoundsIfNeeded()>();

     label1:
        return;
    }

    public boolean setMagnificationCallbacksLocked(int, com.android.server.wm.WindowManagerInternal$MagnificationCallbacks)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0, $i1;
        com.android.server.wm.DisplayContent r1;
        android.view.Display r2;
        android.util.SparseArray $r3, $r6, $r7, $r14;
        java.lang.Object $r4, $r8;
        java.lang.IllegalStateException $r5, $r9;
        com.android.server.wm.WindowManagerService $r10, $r13;
        com.android.server.wm.RootWindowContainer $r11;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r12, r16;
        com.android.server.wm.WindowManagerInternal$MagnificationCallbacks r15;
        boolean z1;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r15 := @parameter1: com.android.server.wm.WindowManagerInternal$MagnificationCallbacks;

        if r15 == null goto label3;

        $r7 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r8 != null goto label2;

        $r10 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        z1 = 0;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        z1 = 0;

        if r2 == null goto label1;

        z1 = 0;

        $i1 = virtualinvoke r2.<android.view.Display: int getType()>();

        if $i1 == 4 goto label1;

        $r14 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r12 = new com.android.server.wm.AccessibilityController$DisplayMagnifier;

        $r13 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService>;

        specialinvoke $r12.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent,android.view.Display,com.android.server.wm.WindowManagerInternal$MagnificationCallbacks)>($r13, r1, r2, r15);

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r12);

        z1 = 1;

     label1:
        goto label4;

     label2:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks already set!");

        throw $r9;

     label3:
        $r3 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r16 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r4;

        if r16 == null goto label5;

        virtualinvoke r16.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void destroyLocked()>();

        $r6 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

        z1 = 1;

     label4:
        return z1;

     label5:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks already cleared!");

        throw $r5;
    }

    public void setMagnificationSpecLocked(int, android.view.MagnificationSpec)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3, $r5;
        android.view.MagnificationSpec r6;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r7;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r6 := @parameter1: android.view.MagnificationSpec;

        $r2 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mDisplayMagnifiers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.AccessibilityController$DisplayMagnifier) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void setMagnificationSpecLocked(android.view.MagnificationSpec)>(r6);

     label1:
        $r4 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r5;

        if r7 == null goto label2;

        virtualinvoke r7.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public boolean setWindowsForAccessibilityCallbackLocked(int, com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback)
    {
        com.android.server.wm.AccessibilityController r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowManagerService $r2, $r22;
        com.android.server.wm.RootWindowContainer $r3;
        boolean $z0, $z1;
        android.util.SparseArray $r4, $r12, $r13, $r23, $r24;
        java.lang.Object $r5, $r14, $r25;
        java.lang.StringBuilder $r6, $r15;
        java.lang.IllegalStateException $r10, $r19;
        java.lang.String $r11, $r20;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r21, r29;
        com.android.server.wm.WindowState $r26;
        com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback r27;

        r0 := @this: com.android.server.wm.AccessibilityController;

        i0 := @parameter0: int;

        r27 := @parameter1: com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i0);

        if r1 != null goto label1;

        return 0;

     label1:
        if r27 == null goto label5;

        $z1 = staticinvoke <com.android.server.wm.AccessibilityController: boolean isEmbeddedDisplay(com.android.server.wm.DisplayContent)>(r1);

        if $z1 == 0 goto label3;

        $r24 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r25 = virtualinvoke $r24.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r25 != null goto label2;

        $r26 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        virtualinvoke r0.<com.android.server.wm.AccessibilityController: void handleWindowObserverOfEmbeddedDisplayLocked(int,com.android.server.wm.WindowState)>(i0, $r26);

     label2:
        return 0;

     label3:
        $r13 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r14 != null goto label4;

        $r23 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r21 = new com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r22 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mService>;

        specialinvoke $r21.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void <init>(com.android.server.wm.WindowManagerService,int,com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback)>($r22, i0, r27);

        virtualinvoke $r23.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r21);

        goto label7;

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Windows for accessibility callback of display ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already set!");

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label5:
        $z0 = staticinvoke <com.android.server.wm.AccessibilityController: boolean isEmbeddedDisplay(com.android.server.wm.DisplayContent)>(r1);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        $r4 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r29 = (com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver) $r5;

        if r29 == null goto label8;

        specialinvoke r0.<com.android.server.wm.AccessibilityController: void removeObserverOfEmbeddedDisplay(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver)>(r29);

        $r12 = r0.<com.android.server.wm.AccessibilityController: android.util.SparseArray mWindowsForAccessibilityObserver>;

        virtualinvoke $r12.<android.util.SparseArray: void remove(int)>(i0);

     label7:
        return 1;

     label8:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Windows for accessibility callback of display ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already cleared!");

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }
}
