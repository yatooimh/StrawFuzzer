class com.android.server.wm.ActivityMetricsLogger extends java.lang.Object
{
    private static final int IGNORE_CALLER;
    private static final int INVALID_DELAY;
    private static final int INVALID_TRANSITION_TYPE;
    static final int LAUNCH_OBSERVER_ACTIVITY_RECORD_PROTO_CHUNK_SIZE;
    private static final java.lang.String TAG;
    private static final java.lang.String[] TRON_WINDOW_STATE_VARZ_STRINGS;
    private static final int WINDOW_STATE_ASSISTANT;
    private static final int WINDOW_STATE_FREEFORM;
    private static final int WINDOW_STATE_INVALID;
    private static final int WINDOW_STATE_MULTI_WINDOW;
    private static final int WINDOW_STATE_SIDE_BY_SIDE;
    private static final int WINDOW_STATE_STANDARD;
    private android.content.pm.dex.ArtManagerInternal mArtManagerInternal;
    private long mLastLogTimeSecs;
    private final android.util.ArrayMap mLastTransitionInfo;
    private final com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver;
    private final com.android.internal.logging.MetricsLogger mMetricsLogger;
    private final java.lang.StringBuilder mStringBuilder;
    private final com.android.server.wm.ActivityStackSupervisor mSupervisor;
    private final java.util.ArrayList mTransitionInfoList;
    private int mWindowState;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <com.android.server.wm.ActivityMetricsLogger: int WINDOW_STATE_STANDARD> = 0;

        <com.android.server.wm.ActivityMetricsLogger: int WINDOW_STATE_SIDE_BY_SIDE> = 1;

        <com.android.server.wm.ActivityMetricsLogger: int WINDOW_STATE_MULTI_WINDOW> = 4;

        <com.android.server.wm.ActivityMetricsLogger: int WINDOW_STATE_INVALID> = -1;

        <com.android.server.wm.ActivityMetricsLogger: int WINDOW_STATE_FREEFORM> = 2;

        <com.android.server.wm.ActivityMetricsLogger: int WINDOW_STATE_ASSISTANT> = 3;

        <com.android.server.wm.ActivityMetricsLogger: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.ActivityMetricsLogger: int LAUNCH_OBSERVER_ACTIVITY_RECORD_PROTO_CHUNK_SIZE> = 512;

        <com.android.server.wm.ActivityMetricsLogger: int INVALID_TRANSITION_TYPE> = -1;

        <com.android.server.wm.ActivityMetricsLogger: int INVALID_DELAY> = -1;

        <com.android.server.wm.ActivityMetricsLogger: int IGNORE_CALLER> = -1;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "window_time_0";

        $r0[1] = "window_time_1";

        $r0[2] = "window_time_2";

        $r0[3] = "window_time_3";

        $r0[4] = "window_time_4";

        <com.android.server.wm.ActivityMetricsLogger: java.lang.String[] TRON_WINDOW_STATE_VARZ_STRINGS> = $r0;

        return;
    }

    void <init>(com.android.server.wm.ActivityStackSupervisor, android.os.Looper)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityStackSupervisor r1;
        android.os.Looper r2;
        com.android.internal.logging.MetricsLogger $r3;
        java.util.ArrayList $r4;
        android.util.ArrayMap $r5;
        java.lang.StringBuilder $r6;
        long $l0, $l1;
        com.android.server.wm.LaunchObserverRegistryImpl $r7;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = 0;

        $r3 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r3.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.wm.ActivityMetricsLogger: com.android.internal.logging.MetricsLogger mMetricsLogger> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.wm.ActivityMetricsLogger: android.util.ArrayMap mLastTransitionInfo> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r0.<com.android.server.wm.ActivityMetricsLogger: java.lang.StringBuilder mStringBuilder> = $r6;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = $l0 / 1000L;

        r0.<com.android.server.wm.ActivityMetricsLogger: long mLastLogTimeSecs> = $l1;

        r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityStackSupervisor mSupervisor> = r1;

        $r7 = new com.android.server.wm.LaunchObserverRegistryImpl;

        specialinvoke $r7.<com.android.server.wm.LaunchObserverRegistryImpl: void <init>(android.os.Looper)>(r2);

        r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver> = $r7;

        return;
    }

    private void abort(com.android.server.wm.ActivityMetricsLogger$TransitionInfo, java.lang.String)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void done(boolean,com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String,long)>(1, r1, r2, 0L);

        return;
    }

    private void checkVisibility(com.android.server.wm.Task, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1, $r6;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r3;
        com.android.server.wm.ActivityStackSupervisor $r4;
        com.android.server.wm.ActivityTaskManagerService $r5;
        boolean $z0;
        java.lang.Throwable $r7;
        com.android.server.wm.Task r8;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r8 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $r4 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityStackSupervisor mSupervisor>;

        $r5 = $r4.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        r2 = $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfo getActiveTransitionInfo(com.android.server.wm.WindowContainer)>(r1);

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r6 = r3.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        if $r6 == r1 goto label07;

        exitmonitor r2;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $z0 = staticinvoke <com.android.server.wm.ActivityMetricsLogger: boolean hasActivityToBeDrawn(com.android.server.wm.Task)>(r8);

        if $z0 == 0 goto label09;

        exitmonitor r2;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void logAppTransitionCancel(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r3);

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void abort(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String)>(r3, "notifyVisibilityChanged to invisible");

        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    static byte[] convertActivityRecordToProto(com.android.server.wm.ActivityRecord)
    {
        android.util.proto.ProtoOutputStream $r1;
        com.android.server.wm.ActivityRecord r2;
        byte[] r3;

        r2 := @parameter0: com.android.server.wm.ActivityRecord;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:convertActivityRecordToProto");

        $r1 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r1.<android.util.proto.ProtoOutputStream: void <init>(int)>(512);

        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void dumpDebug(android.util.proto.ProtoOutputStream,int)>($r1, 0);

        r3 = virtualinvoke $r1.<android.util.proto.ProtoOutputStream: byte[] getBytes()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return r3;
    }

    private int convertAppStartTransitionType(int)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        int i0;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        i0 := @parameter0: int;

        if i0 != 7 goto label1;

        return 3;

     label1:
        if i0 != 8 goto label2;

        return 1;

     label2:
        if i0 != 9 goto label3;

        return 2;

     label3:
        return 0;
    }

    private static int convertTransitionTypeToLaunchObserverTemperature(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 7 goto label3;

        if i0 == 8 goto label2;

        if i0 == 9 goto label1;

        return -1;

     label1:
        return 3;

     label2:
        return 2;

     label3:
        return 1;
    }

    private void done(boolean, com.android.server.wm.ActivityMetricsLogger$TransitionInfo, java.lang.String, long)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        boolean z0, $z1;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        java.lang.String r2;
        long l0;
        java.util.LinkedList $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        r2 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        if r1 != null goto label1;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyIntentFailed()>();

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void stopLaunchTrace(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r1);

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyActivityLaunchCancelled(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r1);

        goto label4;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean isInterestingToLoggerAndObserver()>();

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyActivityLaunchFinished(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,long)>(r1, l0);

     label3:
        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void logAppTransitionFinished(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r1);

     label4:
        $r3 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.util.LinkedList mPendingDrawActivities>;

        virtualinvoke $r3.<java.util.LinkedList: void clear()>();

        $r4 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private com.android.server.wm.ActivityMetricsLogger$TransitionInfo getActiveTransitionInfo(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;
        java.util.ArrayList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        $r3 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.ActivityMetricsLogger$TransitionInfo) $r5;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean contains(com.android.server.wm.WindowContainer)>(r1);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    private android.content.pm.dex.ArtManagerInternal getArtManagerInternal()
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.content.pm.dex.ArtManagerInternal $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        $r1 = r0.<com.android.server.wm.ActivityMetricsLogger: android.content.pm.dex.ArtManagerInternal mArtManagerInternal>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/dex/ArtManagerInternal;");

        $r4 = (android.content.pm.dex.ArtManagerInternal) $r3;

        r0.<com.android.server.wm.ActivityMetricsLogger: android.content.pm.dex.ArtManagerInternal mArtManagerInternal> = $r4;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityMetricsLogger: android.content.pm.dex.ArtManagerInternal mArtManagerInternal>;

        return $r2;
    }

    private static boolean hasActivityToBeDrawn(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.'-$$Lambda$ActivityMetricsLogger$sZFHZi7b6t6yjfx5mx3RtECSlEU' $r1;
        boolean $z0;
        java.util.function.Function r2;

        r0 := @parameter0: com.android.server.wm.Task;

        $r1 = <com.android.server.wm._$$Lambda$ActivityMetricsLogger$sZFHZi7b6t6yjfx5mx3RtECSlEU: com.android.server.wm.'-$$Lambda$ActivityMetricsLogger$sZFHZi7b6t6yjfx5mx3RtECSlEU' INSTANCE>;

        r2 = (java.util.function.Function) $r1;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function)>(r2);

        return $z0;
    }

    public static void lambda$9gqV7SOtv0dBXWMri6Jpu47OdLc(com.android.server.wm.ActivityMetricsLogger, com.android.server.wm.Task, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord r2;

        r0 := @parameter0: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter1: com.android.server.wm.Task;

        r2 := @parameter2: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void checkVisibility(com.android.server.wm.Task,com.android.server.wm.ActivityRecord)>(r1, r2);

        return;
    }

    static java.lang.Boolean lambda$hasActivityToBeDrawn$0(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;
        java.lang.Boolean $r1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mDrawn>;

        if $z1 != 0 goto label1;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        return $r1;
    }

    private void launchObserverNotifyActivityLaunchCancelled(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.LaunchObserverRegistryImpl $r1;
        com.android.server.wm.ActivityRecord $r2;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r3;
        byte[] r4;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r3 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:launchObserverNotifyActivityLaunchCancelled");

        if r3 == null goto label1;

        $r2 = r3.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        r4 = staticinvoke <com.android.server.wm.ActivityMetricsLogger: byte[] convertActivityRecordToProto(com.android.server.wm.ActivityRecord)>($r2);

        goto label2;

     label1:
        r4 = null;

     label2:
        $r1 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        virtualinvoke $r1.<com.android.server.wm.LaunchObserverRegistryImpl: void onActivityLaunchCancelled(byte[])>(r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    private void launchObserverNotifyActivityLaunchFinished(com.android.server.wm.ActivityMetricsLogger$TransitionInfo, long)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        long l0;
        com.android.server.wm.ActivityRecord $r2;
        com.android.server.wm.LaunchObserverRegistryImpl $r3;
        byte[] $r4;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        l0 := @parameter1: long;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:launchObserverNotifyActivityLaunchFinished");

        $r3 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        $r2 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r4 = staticinvoke <com.android.server.wm.ActivityMetricsLogger: byte[] convertActivityRecordToProto(com.android.server.wm.ActivityRecord)>($r2);

        virtualinvoke $r3.<com.android.server.wm.LaunchObserverRegistryImpl: void onActivityLaunchFinished(byte[],long)>($r4, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    private void launchObserverNotifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        int i0, $i1;
        com.android.server.wm.ActivityRecord $r2;
        com.android.server.wm.LaunchObserverRegistryImpl $r3;
        byte[] $r4;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:launchObserverNotifyActivityLaunched");

        $i1 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mTransitionType>;

        i0 = staticinvoke <com.android.server.wm.ActivityMetricsLogger: int convertTransitionTypeToLaunchObserverTemperature(int)>($i1);

        $r3 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        $r2 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r4 = staticinvoke <com.android.server.wm.ActivityMetricsLogger: byte[] convertActivityRecordToProto(com.android.server.wm.ActivityRecord)>($r2);

        virtualinvoke $r3.<com.android.server.wm.LaunchObserverRegistryImpl: void onActivityLaunched(byte[],int)>($r4, i0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    private void launchObserverNotifyIntentFailed()
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.LaunchObserverRegistryImpl $r1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:launchObserverNotifyIntentFailed");

        $r1 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        virtualinvoke $r1.<com.android.server.wm.LaunchObserverRegistryImpl: void onIntentFailed()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    private void launchObserverNotifyIntentStarted(android.content.Intent, long)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.content.Intent r1;
        long l0;
        com.android.server.wm.LaunchObserverRegistryImpl $r2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: android.content.Intent;

        l0 := @parameter1: long;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:launchObserverNotifyIntentStarted");

        $r2 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        virtualinvoke $r2.<com.android.server.wm.LaunchObserverRegistryImpl: void onIntentStarted(android.content.Intent,long)>(r1, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    private void launchObserverNotifyReportFullyDrawn(com.android.server.wm.ActivityRecord, long)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1;
        long l0;
        com.android.server.wm.LaunchObserverRegistryImpl $r2;
        byte[] $r3;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        l0 := @parameter1: long;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "MetricsLogger:launchObserverNotifyReportFullyDrawn");

        $r2 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        $r3 = staticinvoke <com.android.server.wm.ActivityMetricsLogger: byte[] convertActivityRecordToProto(com.android.server.wm.ActivityRecord)>(r1);

        virtualinvoke $r2.<com.android.server.wm.LaunchObserverRegistryImpl: void onReportFullyDrawn(byte[],long)>($r3, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return;
    }

    private void logAppDisplayed(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;
        java.lang.StringBuilder r2;
        int $i0, $i1, $i2, $i3, $i5, $i8;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5, $r7;
        java.lang.String $r6, $r9, $r12;
        long $l6;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        $i0 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int type>;

        if $i0 == 8 goto label1;

        $i8 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int type>;

        if $i8 == 7 goto label1;

        return;

     label1:
        $r3 = newarray (java.lang.Object)[4];

        $i1 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int userId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[0] = $r4;

        $i2 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int activityRecordIdHashCode>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r5;

        $r6 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityShortComponentName>;

        $r3[2] = $r6;

        $i3 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsDrawnDelayMs>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[3] = $r7;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(30009, $r3);

        r2 = r0.<com.android.server.wm.ActivityMetricsLogger: java.lang.StringBuilder mStringBuilder>;

        virtualinvoke r2.<java.lang.StringBuilder: void setLength(int)>(0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Displayed ");

        $r9 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityShortComponentName>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i5 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsDrawnDelayMs>;

        $l6 = (long) $i5;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l6, r2);

        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r12);

        return;
    }

    private void logAppFullyDrawn(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;
        java.lang.StringBuilder r2;
        int $i0, $i1, $i4;
        java.lang.String $r4, $r7;
        long $l2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        $i0 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int type>;

        if $i0 == 8 goto label1;

        $i4 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int type>;

        if $i4 == 7 goto label1;

        return;

     label1:
        r2 = r0.<com.android.server.wm.ActivityMetricsLogger: java.lang.StringBuilder mStringBuilder>;

        virtualinvoke r2.<java.lang.StringBuilder: void setLength(int)>(0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fully drawn ");

        $r4 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityShortComponentName>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i1 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsFullyDrawnDelayMs>;

        $l2 = (long) $i1;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l2, r2);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r7);

        return;
    }

    private void logAppStartMemoryStateCapture(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;
        int i0, i1;
        com.android.server.am.MemoryStatUtil$MemoryStat r2;
        com.android.server.wm.WindowProcessController $r3, $r4;
        android.content.pm.ApplicationInfo $r5;
        java.lang.String $r6, $r7;
        long $l2, $l3, $l4, $l5, $l6;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        $r3 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: com.android.server.wm.WindowProcessController access$1100(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: com.android.server.wm.WindowProcessController access$1100(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        i0 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: int getPid()>();

        $r5 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: android.content.pm.ApplicationInfo access$300(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        i1 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        r2 = staticinvoke <com.android.server.am.MemoryStatUtil: com.android.server.am.MemoryStatUtil$MemoryStat readMemoryStatFromFilesystem(int,int)>(i1, i0);

        if r2 != null goto label2;

        return;

     label2:
        $r6 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$1200(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $r7 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityName>;

        $l6 = r2.<com.android.server.am.MemoryStatUtil$MemoryStat: long pgfault>;

        $l5 = r2.<com.android.server.am.MemoryStatUtil$MemoryStat: long pgmajfault>;

        $l4 = r2.<com.android.server.am.MemoryStatUtil$MemoryStat: long rssInBytes>;

        $l3 = r2.<com.android.server.am.MemoryStatUtil$MemoryStat: long cacheInBytes>;

        $l2 = r2.<com.android.server.am.MemoryStatUtil$MemoryStat: long swapInBytes>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,java.lang.String,java.lang.String,long,long,long,long,long)>(55, i1, $r6, $r7, $l6, $l5, $l4, $l3, $l2);

        return;
    }

    private void logAppTransition(int, int, com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;
        boolean z0;
        java.lang.String r3, $r5, $r8, $r11, $r23, $r25, $r26, $r32, $r40, $r41, $r42;
        android.metrics.LogMaker $r4;
        android.content.pm.ApplicationInfo $r10, $r24, $r39;
        java.lang.Integer $r12, $r14, $r16, $r19, $r27, $r29, $r36, $r37;
        android.content.pm.dex.ArtManagerInternal r34;
        android.content.pm.dex.PackageOptimizationInfo r35;
        com.android.internal.logging.MetricsLogger $r38;
        long $l15;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        $r4 = new android.metrics.LogMaker;

        specialinvoke $r4.<android.metrics.LogMaker: void <init>(int)>(761);

        $r5 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String packageName>;

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>($r5);

        $i2 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int type>;

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>($i2);

        $r8 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityName>;

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(871, $r8);

        $r10 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: android.content.pm.ApplicationInfo access$300(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        z0 = virtualinvoke $r10.<android.content.pm.ApplicationInfo: boolean isInstantApp()>();

        $r11 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$400(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        if $r11 == null goto label1;

        $r32 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$400(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(904, $r32);

     label1:
        r3 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$500(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        if r3 == null goto label2;

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(903, r3);

     label2:
        i22 = (int) z0;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i22);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(905, $r12);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(325, $r14);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(319, $r16);

        $i3 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$600(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>($i3);

        $i4 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$700(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        if $i4 == -1 goto label3;

        $i8 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$700(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(321, $r29);

     label3:
        $i5 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$800(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        if $i5 == -1 goto label4;

        $i7 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$800(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(945, $r27);

     label4:
        $i6 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsDrawnDelayMs>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(322, $r19);

        r34 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: android.content.pm.dex.ArtManagerInternal getArtManagerInternal()>();

        if r34 == null goto label6;

        $r23 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$900(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        if $r23 != null goto label5;

        goto label6;

     label5:
        $r24 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: android.content.pm.ApplicationInfo access$300(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $r25 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$900(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $r26 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityName>;

        r35 = virtualinvoke r34.<android.content.pm.dex.ArtManagerInternal: android.content.pm.dex.PackageOptimizationInfo getPackageOptimizationInfo(android.content.pm.ApplicationInfo,java.lang.String,java.lang.String)>($r24, $r25, $r26);

        goto label7;

     label6:
        r35 = staticinvoke <android.content.pm.dex.PackageOptimizationInfo: android.content.pm.dex.PackageOptimizationInfo createWithNoInfo()>();

     label7:
        $i9 = virtualinvoke r35.<android.content.pm.dex.PackageOptimizationInfo: int getCompilationReason()>();

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1321, $r36);

        $i10 = virtualinvoke r35.<android.content.pm.dex.PackageOptimizationInfo: int getCompilationFilter()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1320, $r37);

        $r38 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        virtualinvoke $r38.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r4);

        $r39 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: android.content.pm.ApplicationInfo access$300(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $i11 = $r39.<android.content.pm.ApplicationInfo: int uid>;

        $r40 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String packageName>;

        $i12 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int type>;

        $i13 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: int convertAppStartTransitionType(int)>($i12);

        $r41 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String launchedActivityName>;

        $r42 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: java.lang.String access$400(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $i14 = i0 * 1000;

        $l15 = (long) $i14;

        $i16 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$600(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $i17 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$700(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $i18 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int access$800(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        $i19 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsDrawnDelayMs>;

        $i20 = virtualinvoke r35.<android.content.pm.dex.PackageOptimizationInfo: int getCompilationReason()>();

        $i21 = virtualinvoke r35.<android.content.pm.dex.PackageOptimizationInfo: int getCompilationFilter()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,java.lang.String,int,java.lang.String,java.lang.String,boolean,long,int,int,int,int,int,java.lang.String,int,int)>(48, $i11, $r40, $i13, $r41, $r42, z0, $l15, $i16, i1, $i17, $i18, $i19, r3, $i20, $i21);

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void logAppStartMemoryStateCapture(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        return;
    }

    private void logAppTransitionCancel(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        int i0, $i1, $i2;
        android.metrics.LogMaker $r2;
        java.lang.String $r3, $r7, $r12, $r14;
        android.content.pm.ActivityInfo $r6, $r10, $r13;
        com.android.internal.logging.MetricsLogger $r9;
        android.content.pm.ApplicationInfo $r11;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r15;
        com.android.server.wm.ActivityRecord r16;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r15 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        i0 = r15.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mTransitionType>;

        r16 = r15.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r2 = new android.metrics.LogMaker;

        specialinvoke $r2.<android.metrics.LogMaker: void <init>(int)>(1144);

        $r3 = r16.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>($r3);

        virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>(i0);

        $r6 = r16.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r7 = $r6.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(871, $r7);

        $r9 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        virtualinvoke $r9.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r2);

        $r10 = r16.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r11 = $r10.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r11.<android.content.pm.ApplicationInfo: int uid>;

        $r12 = r16.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $i2 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: int convertAppStartTransitionType(int)>(i0);

        $r13 = r16.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r14 = $r13.<android.content.pm.ActivityInfo: java.lang.String name>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,java.lang.String,int,java.lang.String)>(49, $i1, $r12, $i2, $r14);

        return;
    }

    private void logAppTransitionFinished(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot $r3;
        boolean $z0;
        android.os.Handler $r4, $r10;
        com.android.server.wm._$$Lambda$ActivityMetricsLogger$fTBXciy3VZJ2vTW_ZJXaKfUj7_I $r5;
        java.lang.Runnable $r6, $r9;
        com.android.server.wm.ActivityRecord $r7;
        android.content.pm.ActivityInfo $r8;
        com.android.server.wm._$$Lambda$ActivityMetricsLogger$MEjrvbJugXgttKs3lnAk7x7tVPc $r11;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        $r3 = new com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        specialinvoke $r3.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: void <init>(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,com.android.server.wm.ActivityMetricsLogger$1)>(r1, null);

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean isInterestingToLoggerAndObserver()>();

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r11 = new com.android.server.wm._$$Lambda$ActivityMetricsLogger$MEjrvbJugXgttKs3lnAk7x7tVPc;

        specialinvoke $r11.<com.android.server.wm._$$Lambda$ActivityMetricsLogger$MEjrvbJugXgttKs3lnAk7x7tVPc: void <init>(com.android.server.wm.ActivityMetricsLogger,com.android.server.wm.ActivityMetricsLogger$TransitionInfo,com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r0, r1, $r3);

        virtualinvoke $r10.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

     label1:
        $r4 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r5 = new com.android.server.wm._$$Lambda$ActivityMetricsLogger$fTBXciy3VZJ2vTW_ZJXaKfUj7_I;

        specialinvoke $r5.<com.android.server.wm._$$Lambda$ActivityMetricsLogger$fTBXciy3VZJ2vTW_ZJXaKfUj7_I: void <init>(com.android.server.wm.ActivityMetricsLogger,com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r0, $r3);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        $r6 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.Runnable mPendingFullyDrawn>;

        if $r6 == null goto label2;

        $r9 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.Runnable mPendingFullyDrawn>;

        interfaceinvoke $r9.<java.lang.Runnable: void run()>();

     label2:
        $r7 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r8 = $r7.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r8.<android.content.pm.ActivityInfo: java.lang.String launchToken> = null;

        return;
    }

    private com.android.server.wm.ActivityMetricsLogger$LaunchingState notifyActivityLaunching(android.content.Intent, com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1, $r8;
        int i0, $i4, $i5, i6;
        long l1;
        com.android.server.wm.ActivityMetricsLogger$LaunchingState $r2, $r3, $r4;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        boolean $z0;
        android.content.Intent r9;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r10, r11, r12;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r9 := @parameter0: android.content.Intent;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        i0 := @parameter2: int;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        r10 = null;

        r11 = null;

        if i0 == -1 goto label4;

        $r5 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        $i4 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i6 = $i4 - 1;

     label1:
        r10 = r11;

        if i6 < 0 goto label4;

        $r6 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        r10 = (com.android.server.wm.ActivityMetricsLogger$TransitionInfo) $r7;

        if r1 == null goto label2;

        $z0 = virtualinvoke r10.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean contains(com.android.server.wm.WindowContainer)>(r1);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        r12 = r11;

        if r11 != null goto label3;

        r12 = r11;

        $r8 = r10.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $i5 = virtualinvoke $r8.<com.android.server.wm.ActivityRecord: int getUid()>();

        if i0 != $i5 goto label3;

        r12 = r10;

     label3:
        i6 = i6 + -1;

        r11 = r12;

        goto label1;

     label4:
        if r10 != null goto label5;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyIntentStarted(android.content.Intent,long)>(r9, l1);

        $r4 = new com.android.server.wm.ActivityMetricsLogger$LaunchingState;

        specialinvoke $r4.<com.android.server.wm.ActivityMetricsLogger$LaunchingState: void <init>()>();

        staticinvoke <com.android.server.wm.ActivityMetricsLogger$LaunchingState: long access$002(com.android.server.wm.ActivityMetricsLogger$LaunchingState,long)>($r4, l1);

        return $r4;

     label5:
        $r2 = r10.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityMetricsLogger$LaunchingState mLaunchingState>;

        staticinvoke <com.android.server.wm.ActivityMetricsLogger$LaunchingState: long access$002(com.android.server.wm.ActivityMetricsLogger$LaunchingState,long)>($r2, l1);

        $r3 = r10.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityMetricsLogger$LaunchingState mLaunchingState>;

        return $r3;
    }

    private void startLaunchTrace(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        com.android.server.wm.ActivityRecord $r5;
        java.lang.String $r6, $r8, $r9;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(64L);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("launching: ");

        $r5 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r6 = $r5.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.String mLaunchTraceName> = $r8;

        $r9 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.String mLaunchTraceName>;

        $l0 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: long mTransitionStartTimeNs>;

        $i1 = (int) $l0;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(64L, $r9, $i1);

        return;
    }

    private void stopLaunchTrace(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        java.lang.String $r2, $r3;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        $r2 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.String mLaunchTraceName>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.String mLaunchTraceName>;

        $l0 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: long mTransitionStartTimeNs>;

        $i1 = (int) $l0;

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(64L, $r3, $i1);

        r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.String mLaunchTraceName> = null;

        return;
    }

    int getLastDrawnDelayMs(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        com.android.server.wm.ActivityRecord r3;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r4;
        int i0;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r3 := @parameter0: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityMetricsLogger: android.util.ArrayMap mLastTransitionInfo>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (com.android.server.wm.ActivityMetricsLogger$TransitionInfo) $r2;

        if r4 == null goto label1;

        i0 = r4.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mWindowsDrawnDelayMs>;

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    public com.android.server.wm.ActivityMetricsLaunchObserverRegistry getLaunchObserverRegistry()
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.LaunchObserverRegistryImpl $r1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        $r1 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.LaunchObserverRegistryImpl mLaunchObserver>;

        return $r1;
    }

    public void lambda$logAppTransitionFinished$1$ActivityMetricsLogger(com.android.server.wm.ActivityMetricsLogger$TransitionInfo, com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        r2 := @parameter1: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        $i1 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mCurrentTransitionDeviceUptime>;

        $i0 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mCurrentTransitionDelayMs>;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void logAppTransition(int,int,com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>($i1, $i0, r2);

        return;
    }

    public void lambda$logAppTransitionFinished$2$ActivityMetricsLogger(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void logAppDisplayed(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        return;
    }

    public void lambda$logAppTransitionReportedDrawn$3$ActivityMetricsLogger(com.android.server.wm.ActivityRecord, boolean, com.android.server.wm.ActivityMetricsLogger$TransitionInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1;
        boolean z0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        r2 := @parameter2: com.android.server.wm.ActivityMetricsLogger$TransitionInfo;

        virtualinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot logAppTransitionReportedDrawn(com.android.server.wm.ActivityRecord,boolean)>(r1, z0);

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.Runnable mPendingFullyDrawn> = null;

        return;
    }

    public void lambda$logAppTransitionReportedDrawn$4$ActivityMetricsLogger(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void logAppFullyDrawn(com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r1);

        return;
    }

    void logAbortedBgActivityStart(android.content.Intent, com.android.server.wm.WindowProcessController, int, java.lang.String, int, boolean, int, int, boolean, boolean)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.WindowProcessController r1;
        int i0, i1, i2, i3, $i7, $i8, $i9, $i10, i23, i24, i25, i26, i27, i28, i29, i30, i31;
        java.lang.String r2, $r21, $r43, $r45;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        long l4, l5, $l6, $l11, $l13, $l15, $l17, $l18, $l19, $l20, $l21, $l22;
        android.metrics.LogMaker $r4;
        java.lang.Integer $r6, $r9, $r11, $r13, $r15, $r17, $r19, $r23, $r25, $r27, $r29, $r31, $r33, $r35;
        byte $b12, $b14, $b16;
        java.lang.Long $r37, $r39, $r41;
        android.content.Intent r47;
        android.content.ComponentName r48;
        com.android.internal.logging.MetricsLogger $r49;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r47 := @parameter0: android.content.Intent;

        r1 := @parameter1: com.android.server.wm.WindowProcessController;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        z1 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = new android.metrics.LogMaker;

        specialinvoke $r4.<android.metrics.LogMaker: void <init>(int)>(1513);

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker setTimestamp(long)>($l6);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1514, $r6);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1515, r2);

        $i7 = staticinvoke <android.app.ActivityManager: int processStateAmToProto(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1516, $r9);

        i23 = (int) z0;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i23);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1517, $r11);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1518, $r13);

        $i8 = staticinvoke <android.app.ActivityManager: int processStateAmToProto(int)>(i3);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1519, $r15);

        i24 = (int) z1;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i24);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1520, $r17);

        i25 = (int) z2;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1527, $r19);

        if r47 == null goto label1;

        $r43 = virtualinvoke r47.<android.content.Intent: java.lang.String getAction()>();

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1528, $r43);

        r48 = virtualinvoke r47.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r48 == null goto label1;

        $r45 = virtualinvoke r48.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1526, $r45);

     label1:
        if r1 == null goto label4;

        $r21 = r1.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1529, $r21);

        $i9 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: int getCurrentProcState()>();

        $i10 = staticinvoke <android.app.ActivityManager: int processStateAmToProto(int)>($i9);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1530, $r23);

        $z3 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasClientActivities()>();

        i26 = (int) $z3;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1531, $r25);

        $z4 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasForegroundServices()>();

        i27 = (int) $z4;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1532, $r27);

        $z5 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasForegroundActivities()>();

        i28 = (int) $z5;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i28);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1533, $r29);

        $z6 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasTopUi()>();

        i29 = (int) $z6;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i29);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1534, $r31);

        $z7 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasOverlayUi()>();

        i30 = (int) $z7;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i30);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1535, $r33);

        $z8 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasPendingUiClean()>();

        i31 = (int) $z8;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i31);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1536, $r35);

        $l11 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: long getInteractionEventTime()>();

        $b12 = $l11 cmp 0L;

        if $b12 == 0 goto label2;

        $l21 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: long getInteractionEventTime()>();

        $l22 = l4 - $l21;

        $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l22);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1537, $r41);

     label2:
        $l13 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: long getFgInteractionTime()>();

        $b14 = $l13 cmp 0L;

        if $b14 == 0 goto label3;

        $l19 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: long getFgInteractionTime()>();

        $l20 = l4 - $l19;

        $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l20);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1538, $r39);

     label3:
        $l15 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: long getWhenUnimportant()>();

        $b16 = $l15 cmp 0L;

        if $b16 == 0 goto label4;

        $l17 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: long getWhenUnimportant()>();

        $l18 = l5 - $l17;

        $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l18);

        virtualinvoke $r4.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1539, $r37);

     label4:
        $r49 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        virtualinvoke $r49.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r4);

        return;
    }

    com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot logAppTransitionReportedDrawn(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1, $r13, $r29, $r32, $r33;
        boolean z0, $z1, $z3, $z4, $z5;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;
        long l0, $l2, $l3, l6;
        int i1, $i4, $i5, i7, i8, i9;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        java.lang.Runnable $r6, $r36;
        java.util.concurrent.TimeUnit $r7;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot $r8;
        android.os.Handler $r9;
        com.android.server.wm._$$Lambda$ActivityMetricsLogger$l0oslVb5YyQhsmr7OXWV2whbXYU $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r14, $r16, $r18, $r21, $r35, r40;
        android.metrics.LogMaker $r17;
        android.content.pm.ActivityInfo $r20, $r30, $r34;
        java.lang.Long $r23;
        java.lang.Integer $r26;
        com.android.internal.logging.MetricsLogger $r28;
        android.content.pm.ApplicationInfo $r31;
        com.android.server.wm._$$Lambda$ActivityMetricsLogger$3JeUkmbe0mtunyS6P4HpkAkfKIY $r37;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.server.wm.ActivityMetricsLogger: android.util.ArrayMap mLastTransitionInfo>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.wm.ActivityMetricsLogger$TransitionInfo) $r5;

        if r2 != null goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean allDrawn()>();

        if $z1 != 0 goto label2;

        $r36 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.Runnable mPendingFullyDrawn>;

        if $r36 != null goto label2;

        $r37 = new com.android.server.wm._$$Lambda$ActivityMetricsLogger$3JeUkmbe0mtunyS6P4HpkAkfKIY;

        specialinvoke $r37.<com.android.server.wm._$$Lambda$ActivityMetricsLogger$3JeUkmbe0mtunyS6P4HpkAkfKIY: void <init>(com.android.server.wm.ActivityMetricsLogger,com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r0, r1, z0, r2);

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.Runnable mPendingFullyDrawn> = $r37;

        return null;

     label2:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $r6 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: java.lang.Runnable mPendingFullyDrawn>;

        if $r6 == null goto label3;

        $i5 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mWindowsDrawnDelayMs>;

        l6 = (long) $i5;

        goto label4;

     label3:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l2 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: long mTransitionStartTimeNs>;

        $l3 = l0 - $l2;

        l6 = virtualinvoke $r7.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3);

     label4:
        $r8 = new com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        $i4 = (int) l6;

        specialinvoke $r8.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: void <init>(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,com.android.server.wm.ActivityRecord,int,com.android.server.wm.ActivityMetricsLogger$1)>(r2, r1, $i4, null);

        $r9 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r10 = new com.android.server.wm._$$Lambda$ActivityMetricsLogger$l0oslVb5YyQhsmr7OXWV2whbXYU;

        specialinvoke $r10.<com.android.server.wm._$$Lambda$ActivityMetricsLogger$l0oslVb5YyQhsmr7OXWV2whbXYU: void <init>(com.android.server.wm.ActivityMetricsLogger,com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot)>(r0, $r8);

        virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        $z3 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean isInterestingToLoggerAndObserver()>();

        if $z3 != 0 goto label5;

        return $r8;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ActivityManager:ReportingFullyDrawn ");

        $r13 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r14 = $r13.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, $r16);

        $r17 = new android.metrics.LogMaker;

        specialinvoke $r17.<android.metrics.LogMaker: void <init>(int)>(1090);

        $r18 = r1.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke $r17.<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>($r18);

        $r20 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r21 = $r20.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r17.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(871, $r21);

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        virtualinvoke $r17.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1091, $r23);

        if z0 == 0 goto label6;

        i7 = 13;

        goto label7;

     label6:
        i7 = 12;

     label7:
        virtualinvoke $r17.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>(i7);

        $z4 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mProcessRunning>;

        i9 = (int) $z4;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        virtualinvoke $r17.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(324, $r26);

        $r28 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        virtualinvoke $r28.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r17);

        $r29 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r30 = $r29.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r31 = $r30.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i1 = $r31.<android.content.pm.ApplicationInfo: int uid>;

        $r32 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        r40 = $r32.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        if z0 == 0 goto label8;

        i8 = 1;

        goto label9;

     label8:
        i8 = 2;

     label9:
        $r33 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r34 = $r33.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r35 = $r34.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z5 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mProcessRunning>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,java.lang.String,int,java.lang.String,boolean,long)>(50, i1, r40, i8, $r35, $z5, l6);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyReportFullyDrawn(com.android.server.wm.ActivityRecord,long)>(r1, l0);

        return $r8;
    }

    void logWindowState()
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        long l0, $l2, $l3, $l4;
        int i1, $i5, i6, i7;
        com.android.server.wm.ActivityStackSupervisor $r1, $r10;
        com.android.server.wm.RootWindowContainer $r2, $r11;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9, $r13;
        java.lang.String[] $r12;
        com.android.internal.logging.MetricsLogger $r14;
        com.android.server.wm.ActivityStack r15, r16;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = $l2 / 1000L;

        i6 = r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState>;

        if i6 == -1 goto label01;

        $r14 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        $r12 = <com.android.server.wm.ActivityMetricsLogger: java.lang.String[] TRON_WINDOW_STATE_VARZ_STRINGS>;

        $r13 = $r12[i6];

        $l3 = r0.<com.android.server.wm.ActivityMetricsLogger: long mLastLogTimeSecs>;

        $l4 = l0 - $l3;

        $i5 = (int) $l4;

        virtualinvoke $r14.<com.android.internal.logging.MetricsLogger: void count(java.lang.String,int)>($r13, $i5);

     label01:
        r0.<com.android.server.wm.ActivityMetricsLogger: long mLastLogTimeSecs> = l0;

        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = -1;

        $r1 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityStackSupervisor mSupervisor>;

        $r2 = $r1.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r15 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r15 != null goto label02;

        return;

     label02:
        $z0 = virtualinvoke r15.<com.android.server.wm.ActivityStack: boolean isActivityTypeAssistant()>();

        if $z0 == 0 goto label03;

        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = 3;

        return;

     label03:
        i1 = virtualinvoke r15.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        r16 = r15;

        i7 = i1;

        if i1 != 2 goto label04;

        $r10 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityStackSupervisor mSupervisor>;

        $r11 = $r10.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r16 = virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack findStackBehind(com.android.server.wm.ActivityStack)>(r15);

        i7 = virtualinvoke r16.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

     label04:
        if i7 == 1 goto label09;

        if i7 == 3 goto label08;

        if i7 == 4 goto label08;

        if i7 == 5 goto label07;

        if i7 == 6 goto label06;

        if i7 != 0 goto label05;

        goto label10;

     label05:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown windowing mode for stack=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" windowingMode=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label06:
        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = 4;

        goto label10;

     label07:
        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = 2;

        goto label10;

     label08:
        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = 1;

        goto label10;

     label09:
        r0.<com.android.server.wm.ActivityMetricsLogger: int mWindowState> = 0;

     label10:
        return;
    }

    void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState, int, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        int i0, $i1;
        com.android.server.wm.ActivityRecord r1, $r11;
        com.android.server.wm.WindowProcessController $r2, r15;
        com.android.server.wm.ActivityStackSupervisor $r3;
        android.content.pm.ActivityInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        java.lang.String $r6;
        com.android.server.wm.ActivityTaskManagerService $r7;
        java.util.ArrayList $r8;
        android.util.ArrayMap $r9;
        boolean $z1, $z2, z3, z4, $z5;
        com.android.server.wm.DisplayContent $r12, $r13;
        com.android.server.wm.ActivityMetricsLogger$LaunchingState r14;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r16, r17;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r14 := @parameter0: com.android.server.wm.ActivityMetricsLogger$LaunchingState;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.ActivityRecord;

        if r1 != null goto label01;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void abort(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String)>(null, "nothing launched");

        return;

     label01:
        $r2 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r2 == null goto label02;

        r15 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        goto label03;

     label02:
        $r3 = r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityStackSupervisor mSupervisor>;

        $r7 = $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = r1.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        $r4 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r5 = $r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        r15 = virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(java.lang.String,int)>($r6, $i1);

     label03:
        z3 = 1;

        if r15 == null goto label04;

        z4 = 1;

        goto label05;

     label04:
        z4 = 0;

     label05:
        if z4 == 0 goto label07;

        $z2 = virtualinvoke r15.<com.android.server.wm.WindowProcessController: boolean hasStartedActivity(com.android.server.wm.ActivityRecord)>(r1);

        if $z2 != 0 goto label06;

        goto label07;

     label06:
        z3 = 0;

        goto label07;

     label07:
        r16 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$LaunchingState: com.android.server.wm.ActivityMetricsLogger$TransitionInfo access$100(com.android.server.wm.ActivityMetricsLogger$LaunchingState)>(r14);

        $z5 = r1.<com.android.server.wm.ActivityRecord: boolean mDrawn>;

        if $z5 == 0 goto label08;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void abort(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String)>(r16, "launched activity already visible");

        return;

     label08:
        if r16 == null goto label09;

        $r11 = r16.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r13 = $r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r12 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        if $r13 != $r12 goto label09;

        virtualinvoke r16.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: void setLatestLaunchedActivity(com.android.server.wm.ActivityRecord)>(r1);

        return;

     label09:
        r17 = staticinvoke <com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityMetricsLogger$TransitionInfo create(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityMetricsLogger$LaunchingState,boolean,boolean,int)>(r1, r14, z4, z3, i0);

        if r17 != null goto label10;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void abort(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String)>(r16, "unrecognized launch");

        return;

     label10:
        $r8 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

        $r9 = r0.<com.android.server.wm.ActivityMetricsLogger: android.util.ArrayMap mLastTransitionInfo>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r17);

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void startLaunchTrace(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r17);

        $z1 = virtualinvoke r17.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean isInterestingToLoggerAndObserver()>();

        if $z1 == 0 goto label11;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$TransitionInfo)>(r17);

        goto label12;

     label11:
        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void launchObserverNotifyIntentFailed()>();

     label12:
        return;
    }

    com.android.server.wm.ActivityMetricsLogger$LaunchingState notifyActivityLaunching(android.content.Intent)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.content.Intent r1;
        com.android.server.wm.ActivityMetricsLogger$LaunchingState $r2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: android.content.Intent;

        $r2 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$LaunchingState notifyActivityLaunching(android.content.Intent,com.android.server.wm.ActivityRecord,int)>(r1, null, -1);

        return $r2;
    }

    com.android.server.wm.ActivityMetricsLogger$LaunchingState notifyActivityLaunching(android.content.Intent, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.content.Intent r1;
        com.android.server.wm.ActivityRecord r2;
        int $i0;
        com.android.server.wm.ActivityMetricsLogger$LaunchingState $r3;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$LaunchingState notifyActivityLaunching(android.content.Intent,com.android.server.wm.ActivityRecord,int)>(r1, r2, $i0);

        return $r3;
    }

    void notifyActivityRemoved(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1;
        android.util.ArrayMap $r2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityMetricsLogger: android.util.ArrayMap mLastTransitionInfo>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    void notifyBindApplication(android.content.pm.ApplicationInfo)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.content.pm.ApplicationInfo r1, $r8;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;
        java.util.ArrayList $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        com.android.server.wm.ActivityRecord $r6;
        android.content.pm.ActivityInfo $r7;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r3 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r4 = r0.<com.android.server.wm.ActivityMetricsLogger: java.util.ArrayList mTransitionInfoList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.ActivityMetricsLogger$TransitionInfo) $r5;

        $r6 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        $r7 = $r6.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r8 = $r7.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r8 != r1 goto label2;

        $i1 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int calculateCurrentDelay()>();

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mBindApplicationDelayMs> = $i1;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        return;
    }

    void notifyStartingWindowDrawn(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        boolean $z0;
        long $l0;
        int $i1;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfo getActiveTransitionInfo(com.android.server.wm.WindowContainer)>(r1);

        if r2 == null goto label2;

        $z0 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mLoggedStartingWindowDrawn>;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mLoggedStartingWindowDrawn> = 1;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $i1 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int calculateDelay(long)>($l0);

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mStartingWindowDelayMs> = $i1;

        return;

     label2:
        return;
    }

    void notifyTransitionStarting(android.util.ArrayMap)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        android.util.ArrayMap r1;
        long l0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;
        int $i1, $i2, $i3, i4;
        java.lang.Object $r3, $r5;
        com.android.server.wm.WindowContainer $r4;
        boolean $z0, $z1;
        java.lang.Integer $r6;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: android.util.ArrayMap;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $i1 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        i4 = $i1 - 1;

     label1:
        if i4 < 0 goto label4;

        $r3 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        $r4 = (com.android.server.wm.WindowContainer) $r3;

        r2 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfo getActiveTransitionInfo(com.android.server.wm.WindowContainer)>($r4);

        if r2 == null goto label3;

        $z0 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mLoggedTransitionStarting>;

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $i2 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int calculateDelay(long)>(l0);

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mCurrentTransitionDelayMs> = $i2;

        $r5 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        $r6 = (java.lang.Integer) $r5;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mReason> = $i3;

        r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mLoggedTransitionStarting> = 1;

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean allDrawn()>();

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void done(boolean,com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String,long)>(0, r2, "notifyTransitionStarting - all windows drawn", l0);

     label3:
        i4 = i4 + -1;

        goto label1;

     label4:
        return;
    }

    void notifyVisibilityChanged(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        com.android.server.wm.ActivityRecord r1, $r8;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r2;
        boolean $z0, $z2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.ActivityTaskManagerService$H $r4;
        com.android.server.wm.'-$$Lambda$ActivityMetricsLogger$9gqV7SOtv0dBXWMri6Jpu47OdLc' $r5;
        com.android.server.wm.Task $r6;
        android.os.Message $r7;
        com.android.internal.util.function.TriConsumer r9;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfo getActiveTransitionInfo(com.android.server.wm.WindowContainer)>(r1);

        if r2 != null goto label1;

        return;

     label1:
        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 == 0 goto label2;

        $z2 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 == 0 goto label3;

     label2:
        virtualinvoke r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: void removePendingDrawActivity(com.android.server.wm.ActivityRecord)>(r1);

     label3:
        $r8 = r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: com.android.server.wm.ActivityRecord mLastLaunchedActivity>;

        if $r8 == r1 goto label4;

        return;

     label4:
        $r3 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r5 = <com.android.server.wm._$$Lambda$ActivityMetricsLogger$9gqV7SOtv0dBXWMri6Jpu47OdLc: com.android.server.wm.'-$$Lambda$ActivityMetricsLogger$9gqV7SOtv0dBXWMri6Jpu47OdLc' INSTANCE>;

        $r6 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r9 = (com.android.internal.util.function.TriConsumer) $r5;

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r0, $r6, r1);

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>($r7);

        return;
    }

    com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot notifyWindowsDrawn(com.android.server.wm.ActivityRecord, long)
    {
        com.android.server.wm.ActivityMetricsLogger r0;
        long l0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfo r1;
        boolean $z0, $z1, $z2;
        int $i1;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot $r2;
        com.android.server.wm.ActivityRecord r3;

        r0 := @this: com.android.server.wm.ActivityMetricsLogger;

        r3 := @parameter0: com.android.server.wm.ActivityRecord;

        l0 := @parameter1: long;

        r1 = specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfo getActiveTransitionInfo(com.android.server.wm.WindowContainer)>(r3);

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean allDrawn()>();

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $i1 = virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int calculateDelay(long)>(l0);

        r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: int mWindowsDrawnDelayMs> = $i1;

        virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: void removePendingDrawActivity(com.android.server.wm.ActivityRecord)>(r3);

        $r2 = new com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot;

        specialinvoke $r2.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: void <init>(com.android.server.wm.ActivityMetricsLogger$TransitionInfo,com.android.server.wm.ActivityMetricsLogger$1)>(r1, null);

        $z1 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean mLoggedTransitionStarting>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfo: boolean allDrawn()>();

        if $z2 == 0 goto label2;

        specialinvoke r0.<com.android.server.wm.ActivityMetricsLogger: void done(boolean,com.android.server.wm.ActivityMetricsLogger$TransitionInfo,java.lang.String,long)>(0, r1, "notifyWindowsDrawn - all windows drawn", l0);

     label2:
        return $r2;

     label3:
        return null;
    }
}
