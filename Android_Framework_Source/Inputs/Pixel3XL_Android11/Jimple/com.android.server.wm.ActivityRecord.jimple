final class com.android.server.wm.ActivityRecord extends com.android.server.wm.WindowToken implements com.android.server.wm.WindowManagerService$AppFreezeListener
{
    static final java.lang.String ACTIVITY_ICON_SUFFIX;
    private static final java.lang.String ATTR_COMPONENTSPECIFIED;
    private static final java.lang.String ATTR_ID;
    private static final java.lang.String ATTR_LAUNCHEDFROMFEATURE;
    private static final java.lang.String ATTR_LAUNCHEDFROMPACKAGE;
    private static final java.lang.String ATTR_LAUNCHEDFROMUID;
    private static final java.lang.String ATTR_RESOLVEDTYPE;
    private static final java.lang.String ATTR_USERID;
    private static final int DESTROY_TIMEOUT;
    static final int FINISH_RESULT_CANCELLED;
    static final int FINISH_RESULT_REMOVED;
    static final int FINISH_RESULT_REQUESTED;
    static final int INVALID_PID;
    private static final int LAUNCH_TICK;
    private static final int MAX_STOPPING_TO_FORCE;
    private static final int PAUSE_TIMEOUT;
    static final int STARTING_WINDOW_NOT_SHOWN;
    static final int STARTING_WINDOW_REMOVED;
    static final int STARTING_WINDOW_SHOWN;
    private static final int STARTING_WINDOW_TYPE_NONE;
    private static final int STARTING_WINDOW_TYPE_SNAPSHOT;
    private static final int STARTING_WINDOW_TYPE_SPLASH_SCREEN;
    private static final int STOP_TIMEOUT;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_ADD_REMOVE;
    private static final java.lang.String TAG_APP;
    private static final java.lang.String TAG_CONFIGURATION;
    private static final java.lang.String TAG_CONTAINERS;
    private static final java.lang.String TAG_FOCUS;
    private static final java.lang.String TAG_INTENT;
    private static final java.lang.String TAG_PAUSE;
    private static final java.lang.String TAG_PERSISTABLEBUNDLE;
    private static final java.lang.String TAG_RESULTS;
    private static final java.lang.String TAG_SAVED_STATE;
    private static final java.lang.String TAG_STATES;
    private static final java.lang.String TAG_SWITCH;
    private static final java.lang.String TAG_TRANSITION;
    private static final java.lang.String TAG_USER_LEAVING;
    private static final java.lang.String TAG_VISIBILITY;
    static final int Z_BOOST_BASE;
    boolean allDrawn;
    com.android.server.wm.WindowProcessController app;
    com.android.server.am.AppTimeTracker appTimeTracker;
    final com.android.server.wm.ActivityRecord$Token appToken;
    final android.os.Binder assistToken;
    android.content.res.CompatibilityInfo compat;
    private final boolean componentSpecified;
    int configChangeFlags;
    long cpuTimeAtResume;
    private long createTime;
    boolean deferRelaunchUntilPaused;
    boolean delayedResume;
    boolean finishing;
    boolean firstWindowDrawn;
    boolean forceNewConfig;
    boolean frozenBeforeDestroy;
    boolean hasBeenLaunched;
    final boolean hasWallpaper;
    private int icon;
    boolean idle;
    boolean immersive;
    boolean inHistory;
    final android.content.pm.ActivityInfo info;
    final android.content.Intent intent;
    private boolean keysPaused;
    private int labelRes;
    long lastLaunchTime;
    long lastVisibleTime;
    int launchCount;
    boolean launchFailed;
    int launchMode;
    long launchTickTime;
    final java.lang.String launchedFromFeatureId;
    final java.lang.String launchedFromPackage;
    final int launchedFromPid;
    final int launchedFromUid;
    int lockTaskLaunchMode;
    private int logo;
    final android.content.ComponentName mActivityComponent;
    private final com.android.server.wm.ActivityRecord$AddStartingWindow mAddStartingWindow;
    com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry;
    boolean mAppStopped;
    final com.android.server.wm.ActivityTaskManagerService mAtmService;
    boolean mClientVisibilityDeferred;
    private boolean mClientVisible;
    private final com.android.server.display.color.ColorDisplayService$ColorTransformController mColorTransformController;
    private com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets;
    private int mConfigurationSeq;
    private boolean mCurrentLaunchCanTurnScreenOn;
    private boolean mDeferHidingClient;
    private final java.lang.Runnable mDestroyTimeoutRunnable;
    boolean mDisablePreviewScreenshots;
    boolean mDrawn;
    boolean mEnteringAnimation;
    private boolean mFreezingScreen;
    java.util.ArrayDeque mFrozenBounds;
    java.util.ArrayDeque mFrozenMergedConfig;
    int mHandoverLaunchDisplayId;
    com.android.server.wm.TaskDisplayArea mHandoverTaskDisplayArea;
    private boolean mHaveState;
    private int[] mHorizontalSizeConfigurations;
    private android.os.Bundle mIcicle;
    private boolean mInheritShownWhenLocked;
    final android.view.InputApplicationHandle mInputApplicationHandle;
    long mInputDispatchingTimeoutNanos;
    boolean mIsExiting;
    private boolean mLastAllDrawn;
    private com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo;
    private boolean mLastContainsDismissKeyguardWindow;
    private boolean mLastContainsShowWhenLockedWindow;
    private boolean mLastContainsTurnScreenOnWindow;
    private boolean mLastDeferHidingClient;
    android.content.Intent mLastNewIntent;
    private com.android.server.wm.Task mLastParent;
    private android.util.MergedConfiguration mLastReportedConfiguration;
    private int mLastReportedDisplayId;
    boolean mLastReportedMultiWindowMode;
    boolean mLastReportedPictureInPictureMode;
    private boolean mLastSurfaceShowing;
    private long mLastTransactionSequence;
    private final java.lang.Runnable mLaunchTickRunnable;
    private com.android.server.wm.Letterbox mLetterbox;
    private int mNumDrawnWindows;
    private int mNumInterestingWindows;
    private boolean mOccludesParent;
    private final java.lang.Runnable mPauseTimeoutRunnable;
    private int mPendingRelaunchCount;
    private android.os.PersistableBundle mPersistentState;
    int mRelaunchReason;
    private android.view.RemoteAnimationDefinition mRemoteAnimationDefinition;
    private boolean mRemovingFromDisplay;
    private final com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults;
    final com.android.server.wm.RootWindowContainer mRootWindowContainer;
    int mRotationAnimationHint;
    com.android.server.wm.ActivityServiceConnectionsHolder mServiceConnectionsHolder;
    private boolean mSetToSleep;
    boolean mShowForAllUsers;
    private boolean mShowWhenLocked;
    private android.graphics.Rect mSizeCompatBounds;
    private float mSizeCompatScale;
    private int[] mSmallestSizeConfigurations;
    final com.android.server.wm.ActivityStackSupervisor mStackSupervisor;
    com.android.server.wm.StartingData mStartingData;
    int mStartingWindowState;
    private com.android.server.wm.ActivityStack$ActivityState mState;
    private final java.lang.Runnable mStopTimeoutRunnable;
    int mTargetSdk;
    private boolean mTaskOverlay;
    private final android.graphics.Rect mTmpBounds;
    private final android.content.res.Configuration mTmpConfig;
    private boolean mTurnScreenOn;
    private boolean mUseTransferredAnimation;
    final int mUserId;
    private int[] mVerticalSizeConfigurations;
    private boolean mVisible;
    boolean mVisibleRequested;
    private boolean mVisibleSetFromTransferredStartingWindow;
    boolean mVoiceInteraction;
    private boolean mWillCloseOrEnterPip;
    java.util.ArrayList newIntents;
    boolean noDisplay;
    private java.lang.CharSequence nonLocalizedLabel;
    boolean nowVisible;
    final java.lang.String packageName;
    long pauseTime;
    android.app.ActivityOptions pendingOptions;
    java.util.HashSet pendingResults;
    boolean pendingVoiceInteractionStart;
    android.app.PictureInPictureParams pictureInPictureArgs;
    boolean preserveWindowOnDeferredRelaunch;
    final java.lang.String processName;
    private boolean reportedDrawn;
    boolean reportedVisible;
    final int requestCode;
    android.content.ComponentName requestedVrComponent;
    final java.lang.String resolvedType;
    com.android.server.wm.ActivityRecord resultTo;
    final java.lang.String resultWho;
    java.util.ArrayList results;
    android.app.ActivityOptions returningOptions;
    final boolean rootVoiceInteraction;
    final java.lang.String shortComponentName;
    boolean startingDisplayed;
    boolean startingMoved;
    com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface;
    com.android.server.wm.WindowState startingWindow;
    final boolean stateNotNeeded;
    boolean stopped;
    boolean supportsEnterPipOnTaskSwitch;
    private com.android.server.wm.Task task;
    final java.lang.String taskAffinity;
    android.app.ActivityManager$TaskDescription taskDescription;
    private int theme;
    long topResumedStateLossTime;
    com.android.server.uri.UriPermissionOwner uriPermissions;
    boolean visibleIgnoringKeyguard;
    android.service.voice.IVoiceInteractionSession voiceSession;
    private int windowFlags;

    void <init>(com.android.server.wm.ActivityTaskManagerService, com.android.server.wm.WindowProcessController, int, int, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.content.pm.ActivityInfo, android.content.res.Configuration, com.android.server.wm.ActivityRecord, java.lang.String, int, boolean, boolean, com.android.server.wm.ActivityStackSupervisor, android.app.ActivityOptions, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r6, r10;
        com.android.server.wm.WindowProcessController r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, $i31, $i32, $i33, i34, i35, $i36, $i37, $i38, $i39, $i40, i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;
        android.content.Intent r2, $r39, $r54, $r81;
        java.lang.String r3, r7, $r34, $r38, $r46, $r49, $r50, $r57, $r63, $r66, $r73, $r75, $r82, $r84, $r88, $r89, r93, r94, $r100, $r106, $r110, $r113, $r115, r118, $r124;
        android.content.pm.ActivityInfo r4, $r32, $r37, $r41, $r42, $r43, $r61, $r64, $r67, $r71, $r80, $r86, $r87, $r90, $r91, $r95, $r97, r109, $r111, $r114, $r116, $r119;
        android.content.res.Configuration r5, $r21;
        com.android.server.wm.ActivityStackSupervisor r8;
        android.app.ActivityOptions r9;
        com.android.server.AttributeCache$Entry r11;
        com.android.server.wm.ActivityRecord$Token $r12, $r30, $r36, $r103;
        com.android.server.wm.WindowManagerService $r13;
        android.os.IBinder $r14, $r29, $r51;
        long $l2;
        android.app.PictureInPictureParams$Builder $r15;
        android.app.PictureInPictureParams $r16;
        com.android.server.wm.WindowState$UpdateReportedVisibilityResults $r17;
        java.util.ArrayDeque $r18, $r19;
        com.android.server.wm._$$Lambda$ActivityRecord$YSVwd546vKWMiMYy7MFzg1qRiio $r20;
        android.graphics.Rect $r22;
        android.os.Binder $r23;
        com.android.server.wm.ActivityRecord$1 $r24;
        com.android.server.wm.ActivityRecord$2 $r25;
        com.android.server.wm.ActivityRecord$3 $r26;
        com.android.server.wm.ActivityRecord$4 $r27;
        com.android.server.wm.ActivityRecord$AddStartingWindow $r28;
        android.content.pm.ApplicationInfo $r31, $r33, $r56, $r58, $r59, $r79, $r96, $r112, $r117, r123;
        android.view.InputApplicationHandle $r35;
        android.content.ComponentName $r40, $r83, $r85, $r105, r125;
        com.android.server.AttributeCache $r44;
        int[] $r45;
        java.lang.CharSequence $r47, $r48, $r60;
        com.android.server.wm.WindowContainer $r52;
        com.android.server.am.AppTimeTracker $r53;
        android.content.pm.ActivityInfo$WindowLayout $r62, $r65, $r72, $r120, r121;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, z12, z13, z14, z15;
        java.lang.StringBuilder $r68;
        android.content.res.TypedArray $r76, $r77, $r78;
        com.android.server.wm.ActivityTaskManagerService r92;
        java.lang.Object $r98;
        com.android.server.display.color.ColorDisplayService$ColorDisplayServiceInternal $r99;
        java.lang.ref.WeakReference $r101;
        com.android.server.display.color.ColorDisplayService$ColorTransformController $r102;
        com.android.server.wm.RootWindowContainer $r104;
        android.util.MergedConfiguration $r107;
        com.android.server.wm.ActivityStack$ActivityState $r108;
        android.app.PendingIntent r126;
        android.window.WindowContainerToken r127;
        com.android.server.wm.TaskDisplayArea r128;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r92 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: com.android.server.wm.WindowProcessController;

        i30 := @parameter2: int;

        i0 := @parameter3: int;

        r93 := @parameter4: java.lang.String;

        r94 := @parameter5: java.lang.String;

        r2 := @parameter6: android.content.Intent;

        r3 := @parameter7: java.lang.String;

        r4 := @parameter8: android.content.pm.ActivityInfo;

        r5 := @parameter9: android.content.res.Configuration;

        r6 := @parameter10: com.android.server.wm.ActivityRecord;

        r7 := @parameter11: java.lang.String;

        i1 := @parameter12: int;

        z8 := @parameter13: boolean;

        z9 := @parameter14: boolean;

        r8 := @parameter15: com.android.server.wm.ActivityStackSupervisor;

        r9 := @parameter16: android.app.ActivityOptions;

        r10 := @parameter17: com.android.server.wm.ActivityRecord;

        $r13 = r92.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r12 = new com.android.server.wm.ActivityRecord$Token;

        specialinvoke $r12.<com.android.server.wm.ActivityRecord$Token: void <init>(android.content.Intent)>(r2);

        $r14 = virtualinvoke $r12.<com.android.server.wm.ActivityRecord$Token: android.os.IBinder asBinder()>();

        specialinvoke r0.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean,com.android.server.wm.DisplayContent,boolean)>($r13, $r14, 2, 1, null, 0);

        r0.<com.android.server.wm.ActivityRecord: int mHandoverLaunchDisplayId> = -1;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.server.wm.ActivityRecord: long createTime> = $l2;

        r0.<com.android.server.wm.ActivityRecord: boolean mHaveState> = 1;

        $r15 = new android.app.PictureInPictureParams$Builder;

        specialinvoke $r15.<android.app.PictureInPictureParams$Builder: void <init>()>();

        $r16 = virtualinvoke $r15.<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()>();

        r0.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs> = $r16;

        r0.<com.android.server.wm.ActivityRecord: int mStartingWindowState> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean mTaskOverlay> = 0;

        r0.<com.android.server.wm.ActivityRecord: int mRelaunchReason> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean mRemovingFromDisplay> = 0;

        $r17 = new com.android.server.wm.WindowState$UpdateReportedVisibilityResults;

        specialinvoke $r17.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults> = $r17;

        r0.<com.android.server.wm.ActivityRecord: boolean mCurrentLaunchCanTurnScreenOn> = 1;

        r0.<com.android.server.wm.ActivityRecord: boolean mLastSurfaceShowing> = 1;

        r0.<com.android.server.wm.ActivityRecord: long mLastTransactionSequence> = -9223372036854775808L;

        r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale> = 1.0F;

        r0.<com.android.server.wm.ActivityRecord: int mRotationAnimationHint> = -1;

        $r18 = new java.util.ArrayDeque;

        specialinvoke $r18.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds> = $r18;

        $r19 = new java.util.ArrayDeque;

        specialinvoke $r19.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig> = $r19;

        $r20 = new com.android.server.wm._$$Lambda$ActivityRecord$YSVwd546vKWMiMYy7MFzg1qRiio;

        specialinvoke $r20.<com.android.server.wm._$$Lambda$ActivityRecord$YSVwd546vKWMiMYy7MFzg1qRiio: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.display.color.ColorDisplayService$ColorTransformController mColorTransformController> = $r20;

        $r21 = new android.content.res.Configuration;

        specialinvoke $r21.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig> = $r21;

        $r22 = new android.graphics.Rect;

        specialinvoke $r22.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpBounds> = $r22;

        $r23 = new android.os.Binder;

        specialinvoke $r23.<android.os.Binder: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: android.os.Binder assistToken> = $r23;

        $r24 = new com.android.server.wm.ActivityRecord$1;

        specialinvoke $r24.<com.android.server.wm.ActivityRecord$1: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mPauseTimeoutRunnable> = $r24;

        $r25 = new com.android.server.wm.ActivityRecord$2;

        specialinvoke $r25.<com.android.server.wm.ActivityRecord$2: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mLaunchTickRunnable> = $r25;

        $r26 = new com.android.server.wm.ActivityRecord$3;

        specialinvoke $r26.<com.android.server.wm.ActivityRecord$3: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mDestroyTimeoutRunnable> = $r26;

        $r27 = new com.android.server.wm.ActivityRecord$4;

        specialinvoke $r27.<com.android.server.wm.ActivityRecord$4: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mStopTimeoutRunnable> = $r27;

        $r28 = new com.android.server.wm.ActivityRecord$AddStartingWindow;

        specialinvoke $r28.<com.android.server.wm.ActivityRecord$AddStartingWindow: void <init>(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord$1)>(r0, null);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AddStartingWindow mAddStartingWindow> = $r28;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService> = r92;

        $r29 = r0.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        $r30 = (com.android.server.wm.ActivityRecord$Token) $r29;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken> = $r30;

        r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info> = r4;

        $r31 = r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r31.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        r0.<com.android.server.wm.ActivityRecord: int mUserId> = $i4;

        $r32 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r33 = $r32.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r34 = $r33.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName> = $r34;

        $r35 = new android.view.InputApplicationHandle;

        $r36 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        specialinvoke $r35.<android.view.InputApplicationHandle: void <init>(android.os.IBinder)>($r36);

        r0.<com.android.server.wm.ActivityRecord: android.view.InputApplicationHandle mInputApplicationHandle> = $r35;

        r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent> = r2;

        $r37 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r38 = $r37.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        if $r38 == null goto label03;

        $r80 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r82 = $r80.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        $r81 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r83 = virtualinvoke $r81.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r84 = virtualinvoke $r83.<android.content.ComponentName: java.lang.String getClassName()>();

        $z7 = virtualinvoke $r82.<java.lang.String: boolean equals(java.lang.Object)>($r84);

        if $z7 == 0 goto label02;

        $r90 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i28 = $r90.<android.content.pm.ActivityInfo: int launchMode>;

        if $i28 == 0 goto label01;

        $r91 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i29 = $r91.<android.content.pm.ActivityInfo: int launchMode>;

        if $i29 != 1 goto label02;

     label01:
        goto label03;

     label02:
        $r85 = new android.content.ComponentName;

        $r86 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r89 = $r86.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r87 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r88 = $r87.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        specialinvoke $r85.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r89, $r88);

        r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent> = $r85;

        goto label04;

     label03:
        $r39 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r40 = virtualinvoke $r39.<android.content.Intent: android.content.ComponentName getComponent()>();

        r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent> = $r40;

     label04:
        $r95 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r96 = $r95.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i31 = $r96.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        r0.<com.android.server.wm.ActivityRecord: int mTargetSdk> = $i31;

        $r97 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i32 = $r97.<android.content.pm.ActivityInfo: int flags>;

        $i33 = $i32 & 1024;

        if $i33 == 0 goto label05;

        z10 = 1;

        goto label06;

     label05:
        z10 = 0;

     label06:
        r0.<com.android.server.wm.ActivityRecord: boolean mShowForAllUsers> = z10;

        $r41 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i5 = $r41.<android.content.pm.ActivityInfo: int screenOrientation>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setOrientation(int)>($i5);

        $r42 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i6 = $r42.<android.content.pm.ActivityInfo: int rotationAnimation>;

        r0.<com.android.server.wm.ActivityRecord: int mRotationAnimationHint> = $i6;

        $i7 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i8 = $i7 & 8388608;

        if $i8 == 0 goto label07;

        z11 = 1;

        goto label08;

     label07:
        z11 = 0;

     label08:
        r0.<com.android.server.wm.ActivityRecord: boolean mShowWhenLocked> = z11;

        $i9 = r4.<android.content.pm.ActivityInfo: int privateFlags>;

        $i10 = $i9 & 1;

        if $i10 == 0 goto label09;

        z12 = 1;

        goto label10;

     label09:
        z12 = 0;

     label10:
        r0.<com.android.server.wm.ActivityRecord: boolean mInheritShownWhenLocked> = z12;

        $i11 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i12 = $i11 & 16777216;

        if $i12 == 0 goto label11;

        z13 = 1;

        goto label12;

     label11:
        z13 = 0;

     label12:
        r0.<com.android.server.wm.ActivityRecord: boolean mTurnScreenOn> = z13;

        $r43 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        i34 = virtualinvoke $r43.<android.content.pm.ActivityInfo: int getThemeResource()>();

        if i34 != 0 goto label15;

        $r79 = r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i27 = $r79.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i27 >= 11 goto label13;

        i34 = 16973829;

        goto label14;

     label13:
        i34 = 16973931;

     label14:
        goto label15;

     label15:
        $r44 = staticinvoke <com.android.server.AttributeCache: com.android.server.AttributeCache instance()>();

        $r46 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $r45 = <com.android.internal.R$styleable: int[] Window>;

        $i13 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        r11 = virtualinvoke $r44.<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(java.lang.String,int,int[],int)>($r46, i34, $r45, $i13);

        if r11 == null goto label16;

        $r76 = r11.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $z3 = staticinvoke <android.content.pm.ActivityInfo: boolean isTranslucentOrFloating(android.content.res.TypedArray)>($r76);

        $z4 = $z3 ^ 1;

        r0.<com.android.server.wm.ActivityRecord: boolean mOccludesParent> = $z4;

        $r77 = r11.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $z5 = virtualinvoke $r77.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        r0.<com.android.server.wm.ActivityRecord: boolean hasWallpaper> = $z5;

        $r78 = r11.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $z6 = virtualinvoke $r78.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(10, 0);

        r0.<com.android.server.wm.ActivityRecord: boolean noDisplay> = $z6;

        goto label17;

     label16:
        r0.<com.android.server.wm.ActivityRecord: boolean hasWallpaper> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean noDisplay> = 0;

     label17:
        if r9 == null goto label18;

        $z2 = virtualinvoke r9.<android.app.ActivityOptions: boolean getLaunchTaskBehind()>();

        r0.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind> = $z2;

        i35 = virtualinvoke r9.<android.app.ActivityOptions: int getRotationAnimationHint()>();

        if i35 < 0 goto label18;

        r0.<com.android.server.wm.ActivityRecord: int mRotationAnimationHint> = i35;

     label18:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisible(boolean)>(0);

        r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested> = 0;

        $r98 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/display/color/ColorDisplayService$ColorDisplayServiceInternal;");

        $r99 = (com.android.server.display.color.ColorDisplayService$ColorDisplayServiceInternal) $r98;

        $r100 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $i36 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r101 = new java.lang.ref.WeakReference;

        $r102 = r0.<com.android.server.wm.ActivityRecord: com.android.server.display.color.ColorDisplayService$ColorTransformController mColorTransformController>;

        specialinvoke $r101.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r102);

        virtualinvoke $r99.<com.android.server.display.color.ColorDisplayService$ColorDisplayServiceInternal: boolean attachColorTransformController(java.lang.String,int,java.lang.ref.WeakReference)>($r100, $i36, $r101);

        $r103 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        staticinvoke <com.android.server.wm.ActivityRecord$Token: void access$200(com.android.server.wm.ActivityRecord$Token,com.android.server.wm.ActivityRecord)>($r103, r0);

        $r104 = r92.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer> = $r104;

        r0.<com.android.server.wm.ActivityRecord: int launchedFromPid> = i30;

        r0.<com.android.server.wm.ActivityRecord: int launchedFromUid> = i0;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage> = r93;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId> = r94;

        $r105 = virtualinvoke r2.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r106 = virtualinvoke $r105.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName> = $r106;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String resolvedType> = r3;

        r0.<com.android.server.wm.ActivityRecord: boolean componentSpecified> = z8;

        r0.<com.android.server.wm.ActivityRecord: boolean rootVoiceInteraction> = z9;

        $r107 = new android.util.MergedConfiguration;

        specialinvoke $r107.<android.util.MergedConfiguration: void <init>(android.content.res.Configuration)>(r5);

        r0.<com.android.server.wm.ActivityRecord: android.util.MergedConfiguration mLastReportedConfiguration> = $r107;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo> = r6;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String resultWho> = r7;

        r0.<com.android.server.wm.ActivityRecord: int requestCode> = i1;

        $r108 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState INITIALIZING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r108, "ActivityRecord ctor");

        r0.<com.android.server.wm.ActivityRecord: boolean launchFailed> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean stopped> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean delayedResume> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean finishing> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean keysPaused> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean inHistory> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean nowVisible> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean mDrawn> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean mClientVisible> = 1;

        r0.<com.android.server.wm.ActivityRecord: boolean idle> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean hasBeenLaunched> = 0;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor> = r8;

        r109 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r110 = r109.<android.content.pm.ActivityInfo: java.lang.String taskAffinity>;

        $r111 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r112 = $r111.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i37 = $r112.<android.content.pm.ApplicationInfo: int uid>;

        $r113 = staticinvoke <com.android.server.wm.ActivityRecord: java.lang.String getTaskAffinityWithUid(java.lang.String,int)>($r110, $i37);

        r109.<android.content.pm.ActivityInfo: java.lang.String taskAffinity> = $r113;

        $r114 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r115 = $r114.<android.content.pm.ActivityInfo: java.lang.String taskAffinity>;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String taskAffinity> = $r115;

        $r116 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r117 = $r116.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i38 = $r117.<android.content.pm.ApplicationInfo: int uid>;

        r118 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i38);

        $r119 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r120 = $r119.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        if $r120 == null goto label20;

        $r61 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r62 = $r61.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $r63 = $r62.<android.content.pm.ActivityInfo$WindowLayout: java.lang.String windowLayoutAffinity>;

        if $r63 == null goto label20;

        $r64 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r65 = $r64.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $r66 = $r65.<android.content.pm.ActivityInfo$WindowLayout: java.lang.String windowLayoutAffinity>;

        $z1 = virtualinvoke $r66.<java.lang.String: boolean startsWith(java.lang.String)>(r118);

        if $z1 != 0 goto label19;

        $r67 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        r121 = $r67.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r118);

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r71 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r72 = $r71.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $r73 = $r72.<android.content.pm.ActivityInfo$WindowLayout: java.lang.String windowLayoutAffinity>;

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        r121.<android.content.pm.ActivityInfo$WindowLayout: java.lang.String windowLayoutAffinity> = $r75;

        goto label20;

     label19:
        goto label20;

     label20:
        $i39 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i40 = $i39 & 16;

        if $i40 == 0 goto label21;

        z14 = 1;

        goto label22;

     label21:
        z14 = 0;

     label22:
        r0.<com.android.server.wm.ActivityRecord: boolean stateNotNeeded> = z14;

        $r47 = r4.<android.content.pm.ActivityInfo: java.lang.CharSequence nonLocalizedLabel>;

        r0.<com.android.server.wm.ActivityRecord: java.lang.CharSequence nonLocalizedLabel> = $r47;

        i41 = r4.<android.content.pm.ActivityInfo: int labelRes>;

        r0.<com.android.server.wm.ActivityRecord: int labelRes> = i41;

        $r48 = r0.<com.android.server.wm.ActivityRecord: java.lang.CharSequence nonLocalizedLabel>;

        if $r48 != null goto label23;

        if i41 != 0 goto label23;

        r123 = r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r60 = r123.<android.content.pm.ApplicationInfo: java.lang.CharSequence nonLocalizedLabel>;

        r0.<com.android.server.wm.ActivityRecord: java.lang.CharSequence nonLocalizedLabel> = $r60;

        $i26 = r123.<android.content.pm.ApplicationInfo: int labelRes>;

        r0.<com.android.server.wm.ActivityRecord: int labelRes> = $i26;

     label23:
        $i42 = virtualinvoke r4.<android.content.pm.ActivityInfo: int getIconResource()>();

        r0.<com.android.server.wm.ActivityRecord: int icon> = $i42;

        $i43 = virtualinvoke r4.<android.content.pm.ActivityInfo: int getLogoResource()>();

        r0.<com.android.server.wm.ActivityRecord: int logo> = $i43;

        $i44 = virtualinvoke r4.<android.content.pm.ActivityInfo: int getThemeResource()>();

        r0.<com.android.server.wm.ActivityRecord: int theme> = $i44;

        $i45 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i46 = $i45 & 512;

        if $i46 == 0 goto label24;

        $i24 = r0.<com.android.server.wm.ActivityRecord: int windowFlags>;

        $i25 = $i24 | 16777216;

        r0.<com.android.server.wm.ActivityRecord: int windowFlags> = $i25;

     label24:
        $i14 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i15 = $i14 & 1;

        if $i15 == 0 goto label26;

        if r1 == null goto label26;

        $r56 = r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i21 = $r56.<android.content.pm.ApplicationInfo: int uid>;

        if $i21 == 1000 goto label25;

        $r58 = r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i23 = $r58.<android.content.pm.ApplicationInfo: int uid>;

        $r59 = r1.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $i22 = $r59.<android.content.pm.ApplicationInfo: int uid>;

        if $i23 != $i22 goto label26;

     label25:
        $r57 = r1.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String processName> = $r57;

        goto label27;

     label26:
        $r124 = r4.<android.content.pm.ActivityInfo: java.lang.String processName>;

        r0.<com.android.server.wm.ActivityRecord: java.lang.String processName> = $r124;

     label27:
        $i47 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i48 = $i47 & 32;

        if $i48 == 0 goto label28;

        $r54 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        virtualinvoke $r54.<android.content.Intent: android.content.Intent addFlags(int)>(8388608);

     label28:
        $i16 = r4.<android.content.pm.ActivityInfo: int launchMode>;

        r0.<com.android.server.wm.ActivityRecord: int launchMode> = $i16;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void setActivityType(boolean,int,android.content.Intent,android.app.ActivityOptions,com.android.server.wm.ActivityRecord)>(z8, i0, r2, r9, r10);

        $i17 = r4.<android.content.pm.ActivityInfo: int flags>;

        $i18 = $i17 & 2048;

        if $i18 == 0 goto label29;

        z15 = 1;

        goto label30;

     label29:
        z15 = 0;

     label30:
        r0.<com.android.server.wm.ActivityRecord: boolean immersive> = z15;

        $r49 = r4.<android.content.pm.ActivityInfo: java.lang.String requestedVrComponent>;

        if $r49 != null goto label31;

        r125 = null;

        goto label32;

     label31:
        $r50 = r4.<android.content.pm.ActivityInfo: java.lang.String requestedVrComponent>;

        r125 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r50);

     label32:
        r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName requestedVrComponent> = r125;

        $i19 = staticinvoke <com.android.server.wm.ActivityRecord: int getLockTaskLaunchMode(android.content.pm.ActivityInfo,android.app.ActivityOptions)>(r4, r9);

        r0.<com.android.server.wm.ActivityRecord: int lockTaskLaunchMode> = $i19;

        if r9 == null goto label36;

        r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions> = r9;

        r126 = virtualinvoke r9.<android.app.ActivityOptions: android.app.PendingIntent getUsageTimeReport()>();

        if r126 == null goto label33;

        $r53 = new com.android.server.am.AppTimeTracker;

        specialinvoke $r53.<com.android.server.am.AppTimeTracker: void <init>(android.app.PendingIntent)>(r126);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker> = $r53;

     label33:
        r127 = virtualinvoke r9.<android.app.ActivityOptions: android.window.WindowContainerToken getLaunchTaskDisplayArea()>();

        if r127 == null goto label34;

        $r51 = virtualinvoke r127.<android.window.WindowContainerToken: android.os.IBinder asBinder()>();

        $r52 = staticinvoke <com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer fromBinder(android.os.IBinder)>($r51);

        r128 = (com.android.server.wm.TaskDisplayArea) $r52;

        goto label35;

     label34:
        r128 = null;

     label35:
        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea mHandoverTaskDisplayArea> = r128;

        $i20 = virtualinvoke r9.<android.app.ActivityOptions: int getLaunchDisplayId()>();

        r0.<com.android.server.wm.ActivityRecord: int mHandoverLaunchDisplayId> = $i20;

     label36:
        return;
    }

    static boolean access$000(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean continueLaunchTicking()>();

        return $z0;
    }

    static int access$400(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <com.android.server.wm.ActivityRecord: int getHorizontalCenterOffset(int,int)>(i0, i1);

        return $i2;
    }

    static void activityResumedLocked(android.os.IBinder)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.DisplayContent $r1, r4;
        com.android.server.wm.UnknownAppVisibilityController $r2;
        android.os.IBinder r3;

        r3 := @parameter0: android.os.IBinder;

        r0 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r3);

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setSavedState(android.os.Bundle)>(null);

        r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        if r4 == null goto label2;

        virtualinvoke r4.<com.android.server.wm.DisplayContent: void handleActivitySizeCompatModeIfNeeded(com.android.server.wm.ActivityRecord)>(r0);

     label2:
        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        virtualinvoke $r2.<com.android.server.wm.UnknownAppVisibilityController: void notifyAppResumedFinished(com.android.server.wm.ActivityRecord)>(r0);

        return;
    }

    private void addNewIntentLocked(com.android.internal.content.ReferrerIntent)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.internal.content.ReferrerIntent r1;
        java.util.ArrayList $r2, $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.internal.content.ReferrerIntent;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents> = $r4;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private boolean allDrawnStatesConsidered()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.WindowState) $r4;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean mightAffectAllDrawn()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean getDrawnStateEvaluated()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 1;
    }

    private boolean allowTaskSnapshot()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.Intent r1, $r4, r7;
        int $i0, i1;
        java.util.ArrayList $r2, r6;
        java.lang.Object $r3;
        boolean $z0, z1;
        android.os.Bundle $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r6 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        if r6 != null goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label8;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (android.content.Intent) $r3;

        if r1 == null goto label7;

        $z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean isMainIntent(android.content.Intent)>(r1);

        if $z0 == 0 goto label3;

        goto label7;

     label3:
        r7 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent mLastNewIntent>;

        if r7 == null goto label4;

        z1 = virtualinvoke r7.<android.content.Intent: boolean filterEquals(android.content.Intent)>(r1);

        goto label5;

     label4:
        $r4 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        z1 = virtualinvoke $r4.<android.content.Intent: boolean filterEquals(android.content.Intent)>(r1);

     label5:
        if z1 == 0 goto label6;

        $r5 = virtualinvoke r1.<android.content.Intent: android.os.Bundle getExtras()>();

        if $r5 == null goto label7;

     label6:
        return 0;

     label7:
        i1 = i1 + -1;

        goto label2;

     label8:
        return 1;
    }

    private void applyAspectRatio(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1, r2, r3;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        com.android.server.wm.ActivityStack r4;
        int i0, i1, $i5, $i6, $i9, $i10, $i11, $i12, $i13, $i14, i17, i18, i19;
        android.content.pm.ActivityInfo $r5, $r6;
        com.android.server.wm.Task $r7;
        boolean $z0, $z1, $z2, z3;
        byte $b4, $b7, $b8, $b15, $b16;
        android.content.res.Configuration $r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        $r5 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        f0 = $r5.<android.content.pm.ActivityInfo: float maxAspectRatio>;

        r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        f1 = $r6.<android.content.pm.ActivityInfo: float minAspectRatio>;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if $r7 == null goto label13;

        if r4 == null goto label13;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        if $z0 == 0 goto label01;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldUseSizeCompatMode()>();

        if $z2 == 0 goto label13;

     label01:
        $b4 = f0 cmpl 0.0F;

        if $b4 != 0 goto label02;

        $b16 = f1 cmpl 0.0F;

        if $b16 == 0 goto label13;

     label02:
        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $z1 = staticinvoke <com.android.server.wm.ActivityRecord: boolean isInVrUiMode(android.content.res.Configuration)>($r8);

        if $z1 == 0 goto label03;

        goto label13;

     label03:
        i0 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        i1 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        $f3 = (float) $i5;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        $f4 = (float) $i6;

        f2 = $f3 / $f4;

        $b7 = f2 cmpl f0;

        if $b7 <= 0 goto label05;

        $b15 = f0 cmpl 0.0F;

        if $b15 == 0 goto label05;

        if i0 >= i1 goto label04;

        $f14 = (float) i0;

        $f15 = $f14 * f0;

        $f16 = $f15 + 0.5F;

        i17 = (int) $f16;

        i18 = i0;

        goto label11;

     label04:
        $f11 = (float) i1;

        $f12 = $f11 * f0;

        $f13 = $f12 + 0.5F;

        i18 = (int) $f13;

        i17 = i1;

        goto label11;

     label05:
        i18 = i0;

        i17 = i1;

        $b8 = f2 cmpg f1;

        if $b8 >= 0 goto label11;

        i19 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getRequestedConfigurationOrientation()>();

        if i19 == 1 goto label08;

        if i19 == 2 goto label07;

        if i0 >= i1 goto label06;

        z3 = 1;

        goto label09;

     label06:
        z3 = 0;

        goto label09;

     label07:
        z3 = 0;

        goto label09;

     label08:
        z3 = 1;

     label09:
        if z3 == 0 goto label10;

        $f8 = (float) i1;

        $f9 = $f8 / f1;

        $f10 = $f9 + 0.5F;

        i18 = (int) $f10;

        i17 = i1;

        goto label11;

     label10:
        $f5 = (float) i0;

        $f6 = $f5 / f1;

        $f7 = $f6 + 0.5F;

        i17 = (int) $f7;

        i18 = i0;

     label11:
        if i0 > i18 goto label12;

        if i1 > i17 goto label12;

        return;

     label12:
        $i14 = r3.<android.graphics.Rect: int left>;

        $i13 = r3.<android.graphics.Rect: int top>;

        $i9 = r2.<android.graphics.Rect: int left>;

        $i12 = $i9 + i18;

        $i10 = r2.<android.graphics.Rect: int top>;

        $i11 = $i10 + i17;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i14, $i13, $i12, $i11);

        return;

     label13:
        return;
    }

    private boolean canLaunchAssistActivity(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1, $r4;
        android.content.ComponentName r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r2 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName mActiveVoiceInteractionServiceComponent>;

        if r2 == null goto label1;

        $r4 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;

     label1:
        return 0;
    }

    static boolean canLaunchDreamActivity(java.lang.String)
    {
        java.lang.String r0, $r5, $r6;
        android.content.ComponentName r1, r8;
        java.lang.Object $r2, $r4;
        com.android.server.wm.ActivityTaskManagerInternal $r3;
        boolean $z0, $z1, $z2, z3;
        android.service.dreams.DreamManagerInternal r7;

        r0 := @parameter0: java.lang.String;

        z3 = 0;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r3 = (com.android.server.wm.ActivityTaskManagerInternal) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerInternal: boolean isDreaming()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/service/dreams/DreamManagerInternal;");

        r7 = (android.service.dreams.DreamManagerInternal) $r4;

        r1 = virtualinvoke r7.<android.service.dreams.DreamManagerInternal: android.content.ComponentName getActiveDreamComponent(boolean)>(0);

        r8 = virtualinvoke r7.<android.service.dreams.DreamManagerInternal: android.content.ComponentName getActiveDreamComponent(boolean)>(1);

        $r5 = staticinvoke <com.android.server.wm.ActivityRecord: java.lang.String getPackageName(android.content.ComponentName)>(r1);

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r0, $r5);

        if $z1 != 0 goto label3;

        $r6 = staticinvoke <com.android.server.wm.ActivityRecord: java.lang.String getPackageName(android.content.ComponentName)>(r8);

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r0, $r6);

        if $z2 == 0 goto label4;

     label3:
        z3 = 1;

     label4:
        return z3;
    }

    private boolean checkEnterPictureInPictureAppOpsState()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        android.app.AppOpsManager $r2;
        android.content.pm.ActivityInfo $r3;
        android.content.pm.ApplicationInfo $r4;
        java.lang.String $r5;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: android.app.AppOpsManager getAppOpsManager()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r4 = $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r4.<android.content.pm.ApplicationInfo: int uid>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $i1 = virtualinvoke $r2.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(67, $i0, $r5);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void cleanUpActivityServices()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityServiceConnectionsHolder r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityServiceConnectionsHolder mServiceConnectionsHolder>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityServiceConnectionsHolder: void disconnectActivityFromServices()>();

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityServiceConnectionsHolder mServiceConnectionsHolder> = null;

        return;
    }

    private void clearThumbnail()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowContainerThumbnail $r1, $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        virtualinvoke $r2.<com.android.server.wm.WindowContainerThumbnail: void destroy()>();

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail> = null;

        return;
    }

    private void computeConfigurationAfterMultiWindowModeChange()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r2;
        android.content.res.Configuration r3, $r4, $r6;
        com.android.server.wm.Task $r5, $r8, $r10, $r11;
        android.app.WindowConfiguration $r7;
        com.android.server.wm.WindowContainer $r9;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r4 = new android.content.res.Configuration;

        specialinvoke $r4.<android.content.res.Configuration: void <init>()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.Task: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        virtualinvoke $r4.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r6);

        $r7 = $r4.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r2 = virtualinvoke $r7.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        r3 = virtualinvoke $r9.<com.android.server.wm.WindowContainer: android.content.res.Configuration getConfiguration()>();

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r10.<com.android.server.wm.Task: void adjustForMinimalTaskDimensions(android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration)>(r2, r2, r3);

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r11.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration)>($r4, r3);

        return;
    }

    private boolean containsTurnScreenOnWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        android.view.WindowManager$LayoutParams $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsTurnScreenOnWindow>;

        return $z1;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i3 = $i0 - 1;

     label2:
        if i3 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $r5 = $r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 2097152;

        if $i2 == 0 goto label3;

        return 1;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        return 0;
    }

    private boolean continueLaunchTicking()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack r1;
        long $l0;
        byte $b1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        java.lang.Runnable $r3;
        com.android.server.wm.ActivityTaskManagerService$H $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $l0 = r0.<com.android.server.wm.ActivityRecord: long launchTickTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label2;

        return 0;

     label2:
        virtualinvoke r1.<com.android.server.wm.ActivityStack: void removeLaunchTickMessages()>();

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mLaunchTickRunnable>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService$H: boolean postDelayed(java.lang.Runnable,long)>($r3, 500L);

        return 1;
    }

    private android.view.SurfaceControl createAnimationBoundsLayer(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        boolean $z0;
        android.view.SurfaceControl$Builder $r3, $r10, $r11, r15;
        android.view.SurfaceControl $r4, $r6, r16;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        java.lang.Object[] $r13;
        com.android.server.wm.ProtoLogGroup $r14;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_ANIM_enabled>;

        if $z0 == 0 goto label1;

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS_ANIM>;

        $r13 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, 1720229827, 0, null, $r13);

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Builder makeAnimationLeash()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl getAnimationLeashParent()>();

        r15 = virtualinvoke $r3.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl getSurfaceControl()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - animation-bounds");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r15.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("ActivityRecord.createAnimationBoundsLayer");

        r16 = virtualinvoke $r11.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>(r16);

        return r16;
    }

    private static java.lang.String createImageFilename(long, int)
    {
        long l0;
        int i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r7;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_activity_icon_");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private boolean createSnapshot(android.app.ActivityManager$TaskSnapshot)
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityManager$TaskSnapshot r1;
        boolean $z0;
        com.android.server.wm.SnapshotStartingData $r2;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.app.ActivityManager$TaskSnapshot;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z0 == 0 goto label2;

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r4 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, -1340540100, 0, null, $r4);

     label2:
        $r2 = new com.android.server.wm.SnapshotStartingData;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r2.<com.android.server.wm.SnapshotStartingData: void <init>(com.android.server.wm.WindowManagerService,android.app.ActivityManager$TaskSnapshot)>($r3, r1);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = $r2;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleAddStartingWindow()>();

        return 1;
    }

    private boolean crossesHorizontalSizeThreshold(int, int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: int[] mHorizontalSizeConfigurations>;

        $z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean crossesSizeThreshold(int[],int,int)>($r1, i0, i1);

        return $z0;
    }

    private static boolean crossesSizeThreshold(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, $i3, i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        return 0;

     label1:
        $i3 = lengthof r0;

        i4 = $i3 - 1;

     label2:
        if i4 < 0 goto label6;

        i2 = r0[i4];

        if i0 >= i2 goto label3;

        if i1 >= i2 goto label4;

     label3:
        if i0 < i2 goto label5;

        if i1 >= i2 goto label5;

     label4:
        return 1;

     label5:
        i4 = i4 + -1;

        goto label2;

     label6:
        return 0;
    }

    private boolean crossesSmallestSizeThreshold(int, int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: int[] mSmallestSizeConfigurations>;

        $z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean crossesSizeThreshold(int[],int,int)>($r1, i0, i1);

        return $z0;
    }

    private boolean crossesVerticalSizeThreshold(int, int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: int[] mVerticalSizeConfigurations>;

        $z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean crossesSizeThreshold(int[],int,int)>($r1, i0, i1);

        return $z0;
    }

    private void destroySurfaces(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, z3;
        java.util.ArrayList $r2;
        com.android.server.wm.WindowList $r3;
        int $i0, i1;
        com.android.server.wm.DisplayContent $r4;
        java.lang.Object $r5;
        com.android.server.wm.WindowState $r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z3 = 0;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WindowState) $r5;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped>;

        $z2 = virtualinvoke $r6.<com.android.server.wm.WindowState: boolean destroySurface(boolean,boolean)>(z0, $z1);

        z3 = z3 | $z2;

        i1 = i1 + -1;

        goto label1;

     label2:
        if z3 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateLetterboxSurface(com.android.server.wm.WindowState)>(null);

     label3:
        return;
    }

    private void finishActivityResults(int, android.content.Intent, com.android.server.uri.NeededUriGrants)
    {
        com.android.server.wm.ActivityRecord r0, r3, $r5, $r7;
        int i0, i1, i2, $i3, $i4;
        android.content.Intent r1;
        com.android.server.uri.NeededUriGrants r2;
        java.lang.String $r4;
        com.android.server.wm.ActivityTaskManagerService $r6;
        com.android.server.uri.UriGrantsManagerInternal $r8;
        com.android.server.uri.UriPermissionOwner $r9;
        android.content.pm.ActivityInfo $r10;
        android.content.pm.ApplicationInfo $r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: com.android.server.uri.NeededUriGrants;

        r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        if r3 == null goto label3;

        i1 = r3.<com.android.server.wm.ActivityRecord: int mUserId>;

        i2 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        if i1 == i2 goto label1;

        if r1 == null goto label1;

        virtualinvoke r1.<android.content.Intent: void prepareToLeaveUser(int)>(i2);

     label1:
        $r10 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r11 = $r10.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r11.<android.content.pm.ApplicationInfo: int uid>;

        if $i4 <= 0 goto label2;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r8 = $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.UriGrantsManagerInternal mUgmInternal>;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        $r9 = virtualinvoke $r7.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner getUriPermissionsLocked()>();

        interfaceinvoke $r8.<com.android.server.uri.UriGrantsManagerInternal: void grantUriPermissionUncheckedFromIntent(com.android.server.uri.NeededUriGrants,com.android.server.uri.UriPermissionOwner)>(r2, $r9);

     label2:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.lang.String resultWho>;

        $i3 = r0.<com.android.server.wm.ActivityRecord: int requestCode>;

        virtualinvoke $r5.<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>(r0, $r4, $i3, i0, r1);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo> = null;

     label3:
        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results> = null;

        r0.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults> = null;

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents> = null;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setSavedState(android.os.Bundle)>(null);

        return;
    }

    static com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)
    {
        android.os.IBinder r0;
        com.android.server.wm.ActivityRecord$Token $r2;
        java.lang.ClassCastException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        com.android.server.wm.ActivityRecord r8;

        r0 := @parameter0: android.os.IBinder;

     label1:
        $r2 = (com.android.server.wm.ActivityRecord$Token) r0;

        r8 = staticinvoke <com.android.server.wm.ActivityRecord$Token: com.android.server.wm.ActivityRecord access$100(com.android.server.wm.ActivityRecord$Token)>($r2);

     label2:
        return r8;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad activity token: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r7, $r3);

        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    private void freezeBounds()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect $r1, $r3;
        com.android.server.wm.Task $r2, $r5, $r9, $r12, $r15;
        java.util.ArrayDeque $r4, $r11, $r16;
        android.content.res.Configuration $r6, $r7, $r8, $r10, $r13, $r14, $r17;
        boolean $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        $r1 = new android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r3 = $r2.<com.android.server.wm.Task: android.graphics.Rect mPreparedFrozenBounds>;

        specialinvoke $r1.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r3);

        virtualinvoke $r4.<java.util.ArrayDeque: boolean offer(java.lang.Object)>($r1);

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r7 = $r5.<com.android.server.wm.Task: android.content.res.Configuration mPreparedFrozenMergedConfig>;

        $r6 = <android.content.res.Configuration: android.content.res.Configuration EMPTY>;

        $z1 = virtualinvoke $r7.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r6);

        if $z1 == 0 goto label1;

        $r16 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        $r14 = new android.content.res.Configuration;

        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r17 = virtualinvoke $r15.<com.android.server.wm.Task: android.content.res.Configuration getConfiguration()>();

        specialinvoke $r14.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r17);

        virtualinvoke $r16.<java.util.ArrayDeque: boolean offer(java.lang.Object)>($r14);

        goto label2;

     label1:
        $r11 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        $r8 = new android.content.res.Configuration;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r10 = $r9.<com.android.server.wm.Task: android.content.res.Configuration mPreparedFrozenMergedConfig>;

        specialinvoke $r8.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r10);

        virtualinvoke $r11.<java.util.ArrayDeque: boolean offer(java.lang.Object)>($r8);

     label2:
        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r13 = $r12.<com.android.server.wm.Task: android.content.res.Configuration mPreparedFrozenMergedConfig>;

        virtualinvoke $r13.<android.content.res.Configuration: void unset()>();

        return;
    }

    private int getAnimationLayer()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowContainer $r1;
        int i0, i1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z0 != 0 goto label1;

        i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getPrefixOrderIndex()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        i0 = virtualinvoke $r1.<com.android.server.wm.WindowContainer: int getPrefixOrderIndex()>();

     label2:
        i1 = i0;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mNeedsZBoost>;

        if $z1 == 0 goto label3;

        i1 = i0 + 800570000;

     label3:
        return i1;
    }

    private int getConfigurationChanges(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, i11, $i12;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.res.Configuration;

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        i0 = virtualinvoke r1.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r2);

        i8 = i0;

        $i1 = i0 & 1024;

        if $i1 == 0 goto label4;

        $i5 = r1.<android.content.res.Configuration: int screenWidthDp>;

        $i4 = r2.<android.content.res.Configuration: int screenWidthDp>;

        $z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean crossesHorizontalSizeThreshold(int,int)>($i5, $i4);

        if $z1 != 0 goto label2;

        $i7 = r1.<android.content.res.Configuration: int screenHeightDp>;

        $i6 = r2.<android.content.res.Configuration: int screenHeightDp>;

        $z2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean crossesVerticalSizeThreshold(int,int)>($i7, $i6);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        i8 = i0;

        if z3 != 0 goto label4;

        i8 = i0 & -1025;

     label4:
        i9 = i8;

        $i10 = i8 & 2048;

        if $i10 == 0 goto label5;

        i9 = i8;

        $i3 = r1.<android.content.res.Configuration: int smallestScreenWidthDp>;

        $i2 = r2.<android.content.res.Configuration: int smallestScreenWidthDp>;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean crossesSmallestSizeThreshold(int,int)>($i3, $i2);

        if $z0 != 0 goto label5;

        i9 = i8 & -2049;

     label5:
        i11 = i9;

        $i12 = 536870912 & i9;

        if $i12 == 0 goto label6;

        i11 = i9 & -536870913;

     label6:
        return i11;
    }

    private static int getHorizontalCenterOffset(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        float $f0, $f1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 - i1;

        $i3 = $i2 + 1;

        $f0 = (float) $i3;

        $f1 = $f0 * 0.5F;

        $i4 = (int) $f1;

        return $i4;
    }

    static int getLockTaskLaunchMode(android.content.pm.ActivityInfo, android.app.ActivityOptions)
    {
        android.content.pm.ActivityInfo r0;
        android.app.ActivityOptions r1;
        android.content.pm.ApplicationInfo $r2;
        boolean $z0, $z1;
        int i0, i1, i2;

        r0 := @parameter0: android.content.pm.ActivityInfo;

        r1 := @parameter1: android.app.ActivityOptions;

        i0 = r0.<android.content.pm.ActivityInfo: int lockTaskLaunchMode>;

        i1 = i0;

        $r2 = r0.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r2.<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>();

        if $z0 == 0 goto label2;

        if i0 == 2 goto label1;

        i1 = i0;

        if i0 != 1 goto label2;

     label1:
        i1 = 0;

     label2:
        i2 = i1;

        if r1 == null goto label3;

        i2 = i1;

        $z1 = virtualinvoke r1.<android.app.ActivityOptions: boolean getLockTaskMode()>();

        if $z1 == 0 goto label3;

        i2 = i1;

        if i1 != 0 goto label3;

        i2 = 3;

     label3:
        return i2;
    }

    private static java.lang.String getPackageName(android.content.ComponentName)
    {
        android.content.ComponentName r0;
        java.lang.String r1;

        r0 := @parameter0: android.content.ComponentName;

        if r0 == null goto label1;

        r1 = virtualinvoke r0.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    private android.content.res.Configuration getProcessGlobalConfiguration()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.WindowProcessController r2;
        android.content.res.Configuration r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<com.android.server.wm.WindowProcessController: android.content.res.Configuration getConfiguration()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r3 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

     label2:
        return r3;
    }

    static com.android.server.wm.ActivityStack getStackLocked(android.os.IBinder)
    {
        com.android.server.wm.ActivityStack $r0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityRecord r2;

        r1 := @parameter0: android.os.IBinder;

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r1);

        if r2 == null goto label1;

        $r0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        return $r0;

     label1:
        return null;
    }

    private int getStartingWindowType(boolean, boolean, boolean, boolean, boolean, android.app.ActivityManager$TaskSnapshot)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, z2, z3, z4, $z5, $z6;
        android.app.ActivityManager$TaskSnapshot r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        z4 := @parameter4: boolean;

        r1 := @parameter5: android.app.ActivityManager$TaskSnapshot;

        if z0 != 0 goto label5;

        if z2 == 0 goto label5;

        if z1 == 0 goto label1;

        if z4 != 0 goto label1;

        goto label5;

     label1:
        if z1 == 0 goto label4;

        if z3 == 0 goto label4;

        $z5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isSnapshotCompatible(android.app.ActivityManager$TaskSnapshot)>(r1);

        if $z5 == 0 goto label2;

        return 1;

     label2:
        $z6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z6 != 0 goto label3;

        return 2;

     label3:
        return 0;

     label4:
        return 0;

     label5:
        return 2;
    }

    static java.lang.String getTaskAffinityWithUid(java.lang.String, int)
    {
        java.lang.String r0, r1, r6;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r6 = r0;

        if r0 == null goto label1;

        r6 = r0;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r6;
    }

    static int getTaskForActivityLocked(android.os.IBinder, boolean)
    {
        boolean z0;
        com.android.server.wm.ActivityRecord r0, $r2;
        com.android.server.wm.WindowContainer $r1;
        int $i0, $i1;
        android.os.IBinder r3;
        com.android.server.wm.Task r4;

        r3 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r0 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r3);

        if r0 == null goto label3;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r1 != null goto label1;

        goto label3;

     label1:
        r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if z0 == 0 goto label2;

        $r2 = virtualinvoke r4.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity(boolean,boolean)>(0, 1);

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int compareTo(com.android.server.wm.WindowContainer)>($r2);

        if $i1 <= 0 goto label2;

        return -1;

     label2:
        $i0 = r4.<com.android.server.wm.Task: int mTaskId>;

        return $i0;

     label3:
        return -1;
    }

    private com.android.server.wm.ActivityRecord getWaitingHistoryRecordLocked()
    {
        com.android.server.wm.ActivityRecord r0, r2, r4;
        com.android.server.wm.ActivityStack r1;
        boolean $z0;
        com.android.server.wm.RootWindowContainer $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean stopped>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r1 != null goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        r4 = r2;

        if r2 != null goto label2;

        r4 = r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

     label2:
        if r4 == null goto label3;

        return r4;

     label3:
        return r0;
    }

    private boolean hasNonDefaultColorWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.'-$$Lambda$ActivityRecord$YY5kCNb4uWg5W_2lbH3ZOqirP1g' $r1;
        boolean $z0;
        com.android.internal.util.ToBooleanFunction r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = <com.android.server.wm._$$Lambda$ActivityRecord$YY5kCNb4uWg5W_2lbH3ZOqirP1g: com.android.server.wm.'-$$Lambda$ActivityRecord$YY5kCNb4uWg5W_2lbH3ZOqirP1g' INSTANCE>;

        r2 = (com.android.internal.util.ToBooleanFunction) $r1;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r2, 1);

        return $z0;
    }

    private static boolean hasResizeChange(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 3456;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isAlwaysFocusable()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.pm.ActivityInfo $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r1.<android.content.pm.ActivityInfo: int flags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isHomeIntent(android.content.Intent)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.Intent r1;
        boolean z0, $z1, $z2, z3;
        java.lang.String $r2, $r3, $r6;
        java.util.Set $r4;
        int $i0;
        android.net.Uri $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.Intent;

        $r2 = "android.intent.action.MAIN";

        $r3 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        z3 = 1;

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.intent.category.HOME");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.intent.category.SECONDARY_HOME");

        if $z2 == 0 goto label2;

     label1:
        $r4 = virtualinvoke r1.<android.content.Intent: java.util.Set getCategories()>();

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i0 != 1 goto label2;

        $r5 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        if $r5 != null goto label2;

        $r6 = virtualinvoke r1.<android.content.Intent: java.lang.String getType()>();

        if $r6 != null goto label2;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    static com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)
    {
        com.android.server.wm.ActivityStack $r0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityRecord r2, r3;

        r1 := @parameter0: android.os.IBinder;

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r1);

        if r2 == null goto label1;

        $r0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        r3 = virtualinvoke $r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord isInTask(com.android.server.wm.ActivityRecord)>(r2);

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    private static boolean isInVrUiMode(android.content.res.Configuration)
    {
        android.content.res.Configuration r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: android.content.res.Configuration;

        $i0 = r0.<android.content.res.Configuration: int uiMode>;

        $i1 = $i0 & 15;

        if $i1 != 7 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static boolean isMainIntent(android.content.Intent)
    {
        android.content.Intent r0;
        boolean z0, $z1, z2;
        java.lang.String $r1, $r2, $r5;
        java.util.Set $r3;
        int $i0;
        android.net.Uri $r4;

        r0 := @parameter0: android.content.Intent;

        $r1 = "android.intent.action.MAIN";

        $r2 = virtualinvoke r0.<android.content.Intent: java.lang.String getAction()>();

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        z2 = 1;

        if z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.content.Intent: java.util.Set getCategories()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i0 != 1 goto label1;

        $r4 = virtualinvoke r0.<android.content.Intent: android.net.Uri getData()>();

        if $r4 != null goto label1;

        $r5 = virtualinvoke r0.<android.content.Intent: java.lang.String getType()>();

        if $r5 != null goto label1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private static boolean isResizeOnlyChange(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & -3457;

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static boolean isResolverActivity(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = class "Lcom/android/internal/app/ResolverActivity;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    static void lambda$applyOptionsLocked$5(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearOptionsLocked(boolean)>(0);

        return;
    }

    static boolean lambda$hasNonDefaultColorWindow$4(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = virtualinvoke $r1.<android.view.WindowManager$LayoutParams: int getColorMode()>();

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void lambda$jAKnTXYErEwplxJ5lQgj44-M9_c(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void prepareActivityHideTransitionAnimationIfOvarlay(int)>(i0);

        return;
    }

    static void lambda$postApplyAnimation$7(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r1.<com.android.server.wm.WindowStateAnimator: void hide(java.lang.String)>("immediately hidden");

        return;
    }

    public static boolean lambda$prAsqx_JQJTqW1jNxmkuU3AV8AU(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean transferStartingWindow(com.android.server.wm.ActivityRecord)>(r1);

        return $z0;
    }

    static void lambda$removeStartingWindow$3(com.android.server.policy.WindowManagerPolicy$StartingSurface)
    {
        java.lang.String r0;
        boolean $z0;
        java.lang.Object[] $r1;
        com.android.server.wm.ProtoLogGroup $r2;
        java.lang.Exception $r3;
        com.android.server.policy.WindowManagerPolicy$StartingSurface r4;

        r4 := @parameter0: com.android.server.policy.WindowManagerPolicy$StartingSurface;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z0 == 0 goto label1;

        r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $r2 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r2, 1742235936, 0, null, $r1);

     label1:
        interfaceinvoke r4.<com.android.server.policy.WindowManagerPolicy$StartingSurface: void remove()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Exception when removing starting window", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void lambda$setVisibility$6(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1, $r2;
        int $i0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i0 = $r1.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i0 != 4 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r2.<com.android.server.wm.WindowStateAnimator: void resetDrawState()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void resetLastContentInsets()>();

     label1:
        return;
    }

    static void lambda$showAllWindowsLocked$8(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean performShowLocked()>();

        return;
    }

    private android.view.animation.Animation loadThumbnailAnimation(android.graphics.GraphicBuffer)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.GraphicBuffer r1;
        android.content.res.Configuration r2;
        com.android.server.wm.DisplayContent $r3, $r5, $r6;
        android.graphics.Rect $r4, r12, r13;
        int $i0, $i1, $i2, $i3;
        com.android.server.wm.Task $r7;
        com.android.server.wm.AppTransition $r8;
        android.view.animation.Animation $r9;
        android.view.DisplayInfo r10;
        com.android.server.wm.WindowState r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.GraphicBuffer;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        r10 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r11 == null goto label1;

        r12 = virtualinvoke r11.<com.android.server.wm.WindowState: android.graphics.Rect getContentFrameLw()>();

        goto label2;

     label1:
        $r4 = new android.graphics.Rect;

        $i1 = r10.<android.view.DisplayInfo: int appWidth>;

        $i0 = r10.<android.view.DisplayInfo: int appHeight>;

        specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        r12 = $r4;

     label2:
        if r11 == null goto label3;

        r13 = virtualinvoke r11.<com.android.server.wm.WindowState: android.graphics.Rect getContentInsets()>();

        goto label4;

     label3:
        r13 = null;

     label4:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        r2 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8 = $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i3 = r2.<android.content.res.Configuration: int uiMode>;

        $i2 = r2.<android.content.res.Configuration: int orientation>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.AppTransition: android.view.animation.Animation createThumbnailAspectScaleAnimationLocked(android.graphics.Rect,android.graphics.Rect,android.graphics.GraphicBuffer,com.android.server.wm.WindowContainer,int,int)>(r12, r13, r1, $r7, $i3, $i2);

        return $r9;
    }

    private boolean mayFreezeScreenLocked(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean isCrashing()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean isNotResponding()>();

        if $z2 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    private boolean occludesParent(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mOccludesParent>;

        return $z1;
    }

    private static void offsetBounds(android.content.res.Configuration, int, int)
    {
        android.content.res.Configuration r0;
        int i0, i1;
        android.app.WindowConfiguration $r1, $r3;
        android.graphics.Rect $r2, $r4;

        r0 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r2 = virtualinvoke $r1.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        virtualinvoke $r2.<android.graphics.Rect: void offset(int,int)>(i0, i1);

        $r3 = r0.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r4 = virtualinvoke $r3.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        virtualinvoke $r4.<android.graphics.Rect: void offset(int,int)>(i0, i1);

        return;
    }

    private boolean onlyVrUiModeChanged(int, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        android.content.res.Configuration r1, r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Configuration;

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        if i0 != 512 goto label1;

        $z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean isInVrUiMode(android.content.res.Configuration)>(r2);

        $z1 = staticinvoke <com.android.server.wm.ActivityRecord: boolean isInVrUiMode(android.content.res.Configuration)>(r1);

        if $z0 == $z1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void postApplyAnimation(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.wm.AppTransition $r1;
        com.android.server.wm.'-$$Lambda$ActivityRecord$TmL40hmGhjc2_QavTI0gwtolvY8' $r2;
        android.util.ArraySet $r3, $r11;
        com.android.server.wm.WindowManagerService $r4, $r6;
        com.android.server.wm.TaskSnapshotController $r5;
        android.os.IBinder $r7;
        com.android.server.wm.WindowManagerInternal$AppTransitionListener $r8;
        java.lang.Throwable $r9;
        com.android.server.wm.DisplayContent r10;
        java.util.function.Consumer r13;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(6);

        if z1 != 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onAnimationFinished(int,com.android.server.wm.AnimationAdapter)>(1, null);

        if z0 == 0 goto label1;

        r0.<com.android.server.wm.ActivityRecord: boolean mEnteringAnimation> = 1;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerInternal$AppTransitionListener mActivityManagerAppTransitionNotifier>;

        $r7 = r0.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerInternal$AppTransitionListener: void onAppTransitionFinishedLocked(android.os.IBinder)>($r7);

     label1:
        if z0 != 0 goto label2;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(2);

        if $z4 != 0 goto label3;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setClientVisible(boolean)>(z0);

     label3:
        r10 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r11 = r10.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $z5 = virtualinvoke $r11.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z5 != 0 goto label4;

        $r3 = r10.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z3 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z3 != 0 goto label4;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r5.<com.android.server.wm.TaskSnapshotController: void notifyAppVisibilityChanged(com.android.server.wm.ActivityRecord,boolean)>(r0, z0);

     label4:
        $z6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z6 != 0 goto label8;

        if z1 != 0 goto label8;

        $r1 = r10.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z2 = virtualinvoke $r1.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z2 != 0 goto label8;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label5:
        $r2 = <com.android.server.wm._$$Lambda$ActivityRecord$TmL40hmGhjc2_QavTI0gwtolvY8: com.android.server.wm.'-$$Lambda$ActivityRecord$TmL40hmGhjc2_QavTI0gwtolvY8' INSTANCE>;

        r13 = (java.util.function.Consumer) $r2;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void forAllWindows(java.util.function.Consumer,boolean)>(r13, 1);

     label6:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label8;

     label7:
        $r9 := @caughtexception;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw $r9;

     label8:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void prepareActivityHideTransitionAnimation(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        com.android.server.wm.DisplayContent r1, $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        r1 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(i0, 0);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(0);

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        return;
    }

    private void prepareActivityHideTransitionAnimationIfOvarlay(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mTaskOverlay>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void prepareActivityHideTransitionAnimation(int)>(i0);

     label1:
        return;
    }

    private void removeAppTokenFromDisplay()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowManagerService $r1, $r3;
        com.android.server.wm.RootWindowContainer $r2, $r4;
        int $i0, $i1;
        com.android.server.wm.ActivityRecord$Token $r5, $r9;
        android.os.IBinder $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r13;
        com.android.server.wm.DisplayContent r14;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        r14 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i0);

        if r14 != null goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAppTokenFromDisplay: Attempted to remove token: ");

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from non-existing displayId=");

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r13);

        return;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void resumeKeyDispatchingLocked()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.ActivityRecord$Token: android.os.IBinder asBinder()>();

        virtualinvoke r14.<com.android.server.wm.DisplayContent: void removeAppToken(android.os.IBinder)>($r6);

        return;
    }

    private void removeDestroyTimeout()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        java.lang.Runnable $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mDestroyTimeoutRunnable>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: void removeCallbacks(java.lang.Runnable)>($r2);

        return;
    }

    private void removePauseTimeout()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        java.lang.Runnable $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mPauseTimeoutRunnable>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: void removeCallbacks(java.lang.Runnable)>($r2);

        return;
    }

    private void removeStopTimeout()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        java.lang.Runnable $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mStopTimeoutRunnable>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: void removeCallbacks(java.lang.Runnable)>($r2);

        return;
    }

    private void resolveFullscreenConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1, r2;
        android.graphics.Rect r3, r4, r5, $r9, $r10, $r11, $r14;
        boolean z0, $z1, $z2, $z3;
        android.app.WindowConfiguration $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3;
        com.android.server.wm.Task $r12;
        android.view.DisplayInfo $r13;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.res.Configuration;

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r6 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r3 = virtualinvoke $r6.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        $r7 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r4 = virtualinvoke $r7.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $r8 = r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r5 = virtualinvoke $r8.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $r9 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r9.<android.graphics.Rect: void setEmpty()>();

        $r10 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpBounds>;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void applyAspectRatio(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r10, r3, r4);

        $r11 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpBounds>;

        $z1 = virtualinvoke $r11.<android.graphics.Rect: boolean isEmpty()>();

        z0 = $z1 ^ 1;

        if z0 == 0 goto label1;

        $r14 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpBounds>;

        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r14);

        $i3 = r3.<android.graphics.Rect: int left>;

        r5.<android.graphics.Rect: int left> = $i3;

     label1:
        $z2 = virtualinvoke r5.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r5.<android.graphics.Rect: boolean equals(java.lang.Object)>(r4);

        if $z3 != 0 goto label2;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r13 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.DisplayInfo getFixedRotationTransformDisplayInfo()>();

        virtualinvoke $r12.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration,android.view.DisplayInfo)>(r2, r1, $r13);

     label2:
        if z0 == 0 goto label3;

        $i0 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r5.<android.graphics.Rect: int width()>();

        $i2 = staticinvoke <com.android.server.wm.ActivityRecord: int getHorizontalCenterOffset(int,int)>($i0, $i1);

        staticinvoke <com.android.server.wm.ActivityRecord: void offsetBounds(android.content.res.Configuration,int,int)>(r2, $i2, 0);

     label3:
        return;
    }

    private void resolveSizeCompatModeConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1, $r8, r20;
        android.graphics.Rect r2, $r12, $r13, $r14, $r15, $r16, $r21, r23, r26, r27, r28, r29, r30;
        boolean z0, $z1, $z2, z3, $z4, z5, z6;
        android.app.WindowConfiguration $r3, $r4, $r5, $r9, $r10, $r11, $r18;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets $r6, $r17, $r24, $r25;
        com.android.server.wm.Task $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, $i22, $i23, i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11;
        byte $b6;
        com.android.server.wm.DisplayContent $r19;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r20 := @parameter0: android.content.res.Configuration;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r3 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r2 = virtualinvoke $r3.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        i15 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getRequestedConfigurationOrientation()>();

        if i15 == 0 goto label01;

        $r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $z2 = virtualinvoke $r19.<com.android.server.wm.DisplayContent: boolean ignoreRotationForApps()>();

        if $z2 != 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        if z3 == 0 goto label03;

        goto label04;

     label03:
        i15 = r20.<android.content.res.Configuration: int orientation>;

     label04:
        $r4 = r20.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i16 = virtualinvoke $r4.<android.app.WindowConfiguration: int getRotation()>();

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean handlesOrientationChangeFromDescendant()>();

        if z0 == 0 goto label05;

        $r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        $z1 = $r17.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: boolean mIsFloating>;

        if $z1 != 0 goto label05;

        $r18 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        virtualinvoke $r18.<android.app.WindowConfiguration: void setRotation(int)>(i16);

        goto label06;

     label05:
        $r5 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i17 = virtualinvoke $r5.<android.app.WindowConfiguration: int getRotation()>();

        if i17 == -1 goto label06;

        goto label07;

     label06:
        i17 = i16;

     label07:
        $r21 = new android.graphics.Rect;

        specialinvoke $r21.<android.graphics.Rect: void <init>()>();

        r23 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpBounds>;

        $r24 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        virtualinvoke $r24.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: void getContainerBounds(android.graphics.Rect,android.graphics.Rect,int,int,boolean,boolean)>($r21, r23, i17, i15, z3, z0);

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r23);

        $r25 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        $z4 = $r25.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: boolean mIsFloating>;

        if $z4 != 0 goto label08;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void applyAspectRatio(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r2, $r21, r23);

     label08:
        z5 = virtualinvoke r2.<android.graphics.Rect: boolean equals(java.lang.Object)>(r23);

        if z5 != 0 goto label09;

        $i14 = $r21.<android.graphics.Rect: int left>;

        r2.<android.graphics.Rect: int left> = $i14;

     label09:
        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        virtualinvoke $r7.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration,com.android.server.wm.ActivityRecord$CompatDisplayInsets)>(r1, r20, $r6);

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $i2 = $r8.<android.content.res.Configuration: int screenLayout>;

        $i1 = r1.<android.content.res.Configuration: int screenWidthDp>;

        $i0 = r1.<android.content.res.Configuration: int screenHeightDp>;

        $i3 = staticinvoke <com.android.server.wm.Task: int computeScreenLayoutOverride(int,int,int)>($i2, $i1, $i0);

        r1.<android.content.res.Configuration: int screenLayout> = $i3;

        $i5 = r1.<android.content.res.Configuration: int screenWidthDp>;

        $i4 = r1.<android.content.res.Configuration: int screenHeightDp>;

        if $i5 != $i4 goto label10;

        $i13 = r20.<android.content.res.Configuration: int orientation>;

        r1.<android.content.res.Configuration: int orientation> = $i13;

     label10:
        $r9 = r20.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r26 = virtualinvoke $r9.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $r10 = r20.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r27 = virtualinvoke $r10.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        $r11 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r28 = virtualinvoke $r11.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        i18 = virtualinvoke r28.<android.graphics.Rect: int width()>();

        i19 = virtualinvoke r28.<android.graphics.Rect: int height()>();

        i20 = virtualinvoke r27.<android.graphics.Rect: int width()>();

        i21 = virtualinvoke r27.<android.graphics.Rect: int height()>();

        if i18 > i20 goto label11;

        if i19 > i21 goto label11;

        f8 = 1.0F;

        goto label12;

     label11:
        $f1 = (float) i20;

        $f0 = (float) i18;

        $f5 = $f1 / $f0;

        $f3 = (float) i21;

        $f2 = (float) i19;

        $f4 = $f3 / $f2;

        f8 = staticinvoke <java.lang.Math: float min(float,float)>($f5, $f4);

     label12:
        r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale> = f8;

        $i22 = r27.<android.graphics.Rect: int top>;

        $i23 = r26.<android.graphics.Rect: int top>;

        i24 = $i22 - $i23;

        $i25 = r28.<android.graphics.Rect: int top>;

        $i26 = r2.<android.graphics.Rect: int top>;

        $i27 = $i25 - $i26;

        if i24 == $i27 goto label13;

        z6 = 1;

        goto label14;

     label13:
        z6 = 0;

     label14:
        $f6 = r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale>;

        $b6 = $f6 cmpl 1.0F;

        if $b6 != 0 goto label16;

        if z6 == 0 goto label15;

        goto label16;

     label15:
        r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds> = null;

        goto label18;

     label16:
        $r12 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        if $r12 != null goto label17;

        $r16 = new android.graphics.Rect;

        specialinvoke $r16.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds> = $r16;

     label17:
        $r13 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        virtualinvoke $r13.<android.graphics.Rect: void set(android.graphics.Rect)>(r28);

        $r14 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        virtualinvoke $r14.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r15 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        $f7 = r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale>;

        virtualinvoke $r15.<android.graphics.Rect: void scale(float)>($f7);

        r29 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        $i7 = r29.<android.graphics.Rect: int bottom>;

        $i8 = $i7 + i24;

        r29.<android.graphics.Rect: int bottom> = $i8;

     label18:
        $f9 = (float) i18;

        $f10 = r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale>;

        $f11 = $f9 * $f10;

        $i28 = (int) $f11;

        i29 = staticinvoke <com.android.server.wm.ActivityRecord: int getHorizontalCenterOffset(int,int)>(i20, $i28);

        if z5 == 0 goto label19;

        i30 = r26.<android.graphics.Rect: int left>;

        goto label20;

     label19:
        i30 = r27.<android.graphics.Rect: int left>;

     label20:
        i31 = i30 + i29;

        i32 = r26.<android.graphics.Rect: int top>;

        if i31 != 0 goto label22;

        if i32 == 0 goto label21;

        goto label22;

     label21:
        goto label24;

     label22:
        r30 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        if r30 == null goto label23;

        virtualinvoke r30.<android.graphics.Rect: void offset(int,int)>(i31, i32);

     label23:
        $i9 = r2.<android.graphics.Rect: int left>;

        $i12 = i31 - $i9;

        $i10 = r2.<android.graphics.Rect: int top>;

        $i11 = i32 - $i10;

        staticinvoke <com.android.server.wm.ActivityRecord: void offsetBounds(android.content.res.Configuration,int,int)>(r1, $i12, $i11);

     label24:
        return;
    }

    static com.android.server.wm.ActivityRecord restoreFromXml(org.xmlpull.v1.XmlPullParser, com.android.server.wm.ActivityStackSupervisor) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int $i0, $i1, $i3, i5, i6, i8, i9, i11;
        java.lang.String $r7, $r14, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r33, r37, r38, r39, r40, r41, r43;
        android.content.res.Configuration $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10;
        org.xmlpull.v1.XmlPullParser r34;
        android.content.Intent r35;
        android.os.PersistableBundle r36;
        long l7;
        com.android.server.wm.ActivityTaskManagerService r45;
        android.content.pm.ActivityInfo r46;
        android.app.ActivityManager$TaskDescription r50;
        java.lang.StringBuilder r51, r52, r54, r56;
        com.android.server.wm.ActivityRecord r53;
        org.xmlpull.v1.XmlPullParserException r55, r57;
        java.lang.Throwable r58, r59;

        r34 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r0 := @parameter1: com.android.server.wm.ActivityStackSupervisor;

        r35 = null;

        r36 = null;

        i5 = 0;

        r37 = null;

        r38 = null;

        r39 = null;

        z10 = 0;

        i6 = 0;

        l7 = -1L;

        i8 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r50 = new android.app.ActivityManager$TaskDescription;

        specialinvoke r50.<android.app.ActivityManager$TaskDescription: void <init>()>();

        $i0 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        i9 = $i0 - 1;

     label01:
        if i9 < 0 goto label10;

        r40 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i9);

        r41 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>(i9);

        $r23 = "id";

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z2 == 0 goto label02;

        l7 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r41);

        goto label09;

     label02:
        $r24 = "launched_from_uid";

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z3 == 0 goto label03;

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r41);

        goto label09;

     label03:
        $r25 = "launched_from_package";

        $z4 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z4 == 0 goto label04;

        r37 = r41;

        goto label09;

     label04:
        $r26 = "launched_from_feature";

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z5 == 0 goto label05;

        r38 = r41;

        goto label09;

     label05:
        $r27 = "resolved_type";

        $z6 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z6 == 0 goto label06;

        r39 = r41;

        goto label09;

     label06:
        $r28 = "component_specified";

        $z7 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z7 == 0 goto label07;

        z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r41);

        goto label09;

     label07:
        $r29 = "user_id";

        $z8 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r40);

        if $z8 == 0 goto label08;

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r41);

        goto label09;

     label08:
        $z9 = virtualinvoke r40.<java.lang.String: boolean startsWith(java.lang.String)>("task_description_");

        if $z9 != 0 goto label09;

        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown ActivityRecord attribute=");

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r33 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", $r33);

        goto label09;

     label09:
        i9 = i9 + -1;

        goto label01;

     label10:
        virtualinvoke r50.<android.app.ActivityManager$TaskDescription: void restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r34);

     label11:
        i11 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i11 == 1 goto label18;

        if i11 != 3 goto label13;

        $i3 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 < i8 goto label12;

        goto label13;

     label12:
        goto label18;

     label13:
        if i11 != 2 goto label17;

        r43 = interfaceinvoke r34.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r17 = "intent";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z0 == 0 goto label14;

        r35 = staticinvoke <android.content.Intent: android.content.Intent restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r34);

        goto label16;

     label14:
        $r18 = "persistable_bundle";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z1 == 0 goto label15;

        r36 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r34);

        goto label16;

     label15:
        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreActivity: unexpected name=");

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r22 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r22);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r34);

     label16:
        goto label11;

     label17:
        goto label11;

     label18:
        if r35 == null goto label20;

        r45 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r46 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,java.lang.String,int,android.app.ProfilerInfo,int,int)>(r35, r39, 0, null, i6, $i1);

        if r46 == null goto label19;

        r53 = new com.android.server.wm.ActivityRecord;

        $r16 = virtualinvoke r45.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getConfiguration()>();

        specialinvoke r53.<com.android.server.wm.ActivityRecord: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.WindowProcessController,int,int,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.pm.ActivityInfo,android.content.res.Configuration,com.android.server.wm.ActivityRecord,java.lang.String,int,boolean,boolean,com.android.server.wm.ActivityStackSupervisor,android.app.ActivityOptions,com.android.server.wm.ActivityRecord)>(r45, null, 0, i5, r37, r38, r35, r39, r46, $r16, null, null, 0, z10, 0, r0, null, null);

        r53.<com.android.server.wm.ActivityRecord: android.os.PersistableBundle mPersistentState> = r36;

        r53.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription> = r50;

        r53.<com.android.server.wm.ActivityRecord: long createTime> = l7;

        return r53;

     label19:
        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreActivity resolver error. Intent=");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resolvedType=");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        r55 = new org.xmlpull.v1.XmlPullParserException;

        $r14 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r14);

        r58 = (java.lang.Throwable) r55;

        throw r58;

     label20:
        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreActivity error intent=");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        r57 = new org.xmlpull.v1.XmlPullParserException;

        $r7 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r57.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r7);

        r59 = (java.lang.Throwable) r57;

        throw r59;
    }

    private void scheduleActivityMovedToDisplay(int, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.ClientLifecycleManager $r2;
        com.android.server.wm.WindowProcessController $r3;
        android.app.IApplicationThread $r4;
        com.android.server.wm.ActivityRecord$Token $r5;
        android.app.servertransaction.MoveToDisplayItem $r6;
        android.os.RemoteException $r7;
        android.content.res.Configuration r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r8 := @parameter1: android.content.res.Configuration;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r6 = staticinvoke <android.app.servertransaction.MoveToDisplayItem: android.app.servertransaction.MoveToDisplayItem obtain(int,android.content.res.Configuration)>(i0, r8);

        virtualinvoke $r2.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ClientTransactionItem)>($r4, $r5, $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void scheduleConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.ClientLifecycleManager $r2;
        com.android.server.wm.WindowProcessController $r3;
        android.app.IApplicationThread $r4;
        com.android.server.wm.ActivityRecord$Token $r5;
        android.app.servertransaction.ActivityConfigurationChangeItem $r6;
        android.os.RemoteException $r7;
        android.content.res.Configuration r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r8 := @parameter0: android.content.res.Configuration;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r6 = staticinvoke <android.app.servertransaction.ActivityConfigurationChangeItem: android.app.servertransaction.ActivityConfigurationChangeItem obtain(android.content.res.Configuration)>(r8);

        virtualinvoke $r2.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ClientTransactionItem)>($r4, $r5, $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setActivityType(boolean, int, android.content.Intent, android.app.ActivityOptions, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.content.Intent r1;
        android.app.ActivityOptions r2;
        int $i0, $i1, $i2, $i3, i4, $i8;
        java.lang.String $r4, $r6, $r8, $r9;
        java.lang.Class $r5;
        android.content.pm.ActivityInfo $r7, $r10, $r11, $r12, $r16;
        byte b7;
        com.android.server.wm.ActivityTaskManagerService $r13;
        com.android.server.wm.RecentTasks $r14;
        android.content.ComponentName $r15;
        android.content.pm.ApplicationInfo $r17;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        i4 := @parameter1: int;

        r1 := @parameter2: android.content.Intent;

        r2 := @parameter3: android.app.ActivityOptions;

        r3 := @parameter4: com.android.server.wm.ActivityRecord;

        if z0 == 0 goto label1;

        $z5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canLaunchHomeActivity(int,com.android.server.wm.ActivityRecord)>(i4, r3);

        if $z5 == 0 goto label3;

     label1:
        $z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean isHomeIntent(android.content.Intent)>(r1);

        if $z1 == 0 goto label3;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isResolverOrDelegateActivity()>();

        if $z4 != 0 goto label3;

        $r10 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i2 = $r10.<android.content.pm.ActivityInfo: int resizeMode>;

        if $i2 == 4 goto label2;

        b7 = 2;

        $r12 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i3 = $r12.<android.content.pm.ActivityInfo: int resizeMode>;

        if $i3 != 1 goto label6;

     label2:
        $r11 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r11.<android.content.pm.ActivityInfo: int resizeMode> = 0;

        b7 = 2;

        goto label6;

     label3:
        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        $r15 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r16 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r17 = $r16.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i8 = $r17.<android.content.pm.ApplicationInfo: int uid>;

        $z6 = virtualinvoke $r14.<com.android.server.wm.RecentTasks: boolean isRecentsComponent(android.content.ComponentName,int)>($r15, $i8);

        if $z6 == 0 goto label4;

        b7 = 3;

        goto label6;

     label4:
        if r2 == null goto label5;

        $i1 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchActivityType()>();

        if $i1 != 4 goto label5;

        $r9 = r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        $z3 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean canLaunchAssistActivity(java.lang.String)>($r9);

        if $z3 == 0 goto label5;

        b7 = 4;

        goto label6;

     label5:
        b7 = 0;

        if r2 == null goto label6;

        b7 = 0;

        $i0 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchActivityType()>();

        if $i0 != 5 goto label6;

        b7 = 0;

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        $z2 = staticinvoke <com.android.server.wm.ActivityRecord: boolean canLaunchDreamActivity(java.lang.String)>($r4);

        if $z2 == 0 goto label6;

        b7 = 0;

        $r5 = class "Landroid/service/dreams/DreamActivity;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r8 = $r7.<android.content.pm.ActivityInfo: java.lang.String name>;

        if $r6 != $r8 goto label6;

        b7 = 5;

     label6:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setActivityType(int)>(b7);

        return;
    }

    private void setLastReportedConfiguration(android.content.res.Configuration, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1, r2;
        android.util.MergedConfiguration $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.content.res.Configuration;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.util.MergedConfiguration mLastReportedConfiguration>;

        virtualinvoke $r3.<android.util.MergedConfiguration: void setConfiguration(android.content.res.Configuration,android.content.res.Configuration)>(r1, r2);

        return;
    }

    private void setOrientation(int, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        boolean z0, $z2;
        com.android.server.wm.ActivityRecord$Token r1;
        android.os.IBinder r2;
        android.content.res.Configuration $r3, $r5;
        android.util.MergedConfiguration $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord$Token: android.os.IBinder asBinder()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setOrientation(int,android.os.IBinder,com.android.server.wm.ConfigurationContainer)>(i0, r2, r0);

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getMergedOverrideConfiguration()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.util.MergedConfiguration mLastReportedConfiguration>;

        $r5 = virtualinvoke $r4.<android.util.MergedConfiguration: android.content.res.Configuration getMergedConfiguration()>();

        $z2 = virtualinvoke $r3.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r5);

        if $z2 != 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean)>(0, 0);

     label3:
        return;
    }

    private boolean shouldBeResumed(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.Task $r2;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldMakeActive(com.android.server.wm.ActivityRecord)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFocusable()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $i0 = virtualinvoke $r2.<com.android.server.wm.Task: int getVisibility(com.android.server.wm.ActivityRecord)>(r1);

        if $i0 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canResumeByCompat()>();

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    private boolean shouldRelaunchLocked(int, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i1, $i2, i3, $i4;
        android.content.res.Configuration r1;
        android.content.pm.ActivityInfo $r2, $r3;
        android.content.pm.ApplicationInfo $r4;
        android.content.ComponentName $r5;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Configuration;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        i1 = virtualinvoke $r2.<android.content.pm.ActivityInfo: int getRealConfigChanged()>();

        z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean onlyVrUiModeChanged(int,android.content.res.Configuration)>(i0, r1);

        i3 = i1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r4 = $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= 26 goto label1;

        i3 = i1;

        $r5 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName requestedVrComponent>;

        if $r5 == null goto label1;

        i3 = i1;

        if z0 == 0 goto label1;

        i3 = i1 | 512;

     label1:
        $i4 = i3 & i0;

        if $i4 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    private boolean shouldStartActivity()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 == 0 goto label2;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r1);

        if $z1 != 0 goto label1;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r2);

        if $z2 == 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    private static java.lang.String startingWindowStateToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown state=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "STARTING_WINDOW_REMOVED";

     label2:
        return "STARTING_WINDOW_SHOWN";

     label3:
        return "STARTING_WINDOW_NOT_SHOWN";
    }

    private boolean supportsResizeableMultiWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1, $r3;
        boolean $z0, $z1, $z2, $z3, z4;
        android.content.pm.ActivityInfo $r2;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiWindow>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z1 != 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r2.<android.content.pm.ActivityInfo: int resizeMode>;

        $z2 = staticinvoke <android.content.pm.ActivityInfo: boolean isResizeableMode(int)>($i0);

        if $z2 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z3 = $r3.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities>;

        if $z3 == 0 goto label2;

     label1:
        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        return z4;
    }

    private boolean transferStartingWindow(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0, $z1, z2;
        android.os.IBinder $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z2 = 1;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 != 0 goto label2;

        $r2 = r1.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean transferStartingWindow(android.os.IBinder)>($r2);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    private void unfreezeBounds()
    {
        com.android.server.wm.ActivityRecord r0;
        java.util.ArrayDeque $r1, $r2, $r4, $r11;
        boolean $z0, $z1;
        com.android.server.wm.WindowList $r5, $r8;
        int $i0, i1;
        com.android.server.wm.WindowManagerService $r6;
        com.android.server.wm.WindowSurfacePlacer $r7;
        java.lang.Object $r9;
        com.android.server.wm.WindowState $r10;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        $z0 = virtualinvoke $r1.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object remove()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        $z1 = virtualinvoke $r4.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r11 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        virtualinvoke $r11.<java.util.ArrayDeque: java.lang.Object remove()>();

     label2:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label3:
        if i1 < 0 goto label4;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r10 = (com.android.server.wm.WindowState) $r9;

        virtualinvoke $r10.<com.android.server.wm.WindowState: void onUnfreezeBounds()>();

        i1 = i1 + -1;

        goto label3;

     label4:
        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r7.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        return;
    }

    private void updateColorTransform()
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl $r1, $r8;
        com.android.server.wm.ActivityRecord$AppSaturationInfo $r2, $r4, $r5;
        android.view.SurfaceControl$Transaction $r3;
        float[] $r6, $r7;
        com.android.server.wm.WindowManagerService $r10;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo>;

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo>;

        $r7 = $r4.<com.android.server.wm.ActivityRecord$AppSaturationInfo: float[] mMatrix>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo>;

        $r6 = $r5.<com.android.server.wm.ActivityRecord$AppSaturationInfo: float[] mTranslation>;

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setColorTransform(android.view.SurfaceControl,float[],float[])>($r8, $r7, $r6);

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

     label1:
        return;
    }

    private void updateSizeCompatMode()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1, r9, r10;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets $r2, $r5;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.WindowContainer $r3;
        int $i0, $i1, $i2, $i3;
        android.content.pm.ActivityInfo $r4;
        com.android.server.wm.DisplayContent $r6;
        android.app.WindowConfiguration $r7, $r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        if $r2 != null goto label4;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldUseSizeCompatMode()>();

        if $z0 != 0 goto label1;

        goto label4;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        r9 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: android.content.res.Configuration getConfiguration()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z1 != 0 goto label2;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isConfigurationCompatible(android.content.res.Configuration)>(r9);

        if $z3 != 0 goto label2;

        return;

     label2:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        r10 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $i0 = r10.<android.content.res.Configuration: int colorMode>;

        r1.<android.content.res.Configuration: int colorMode> = $i0;

        $i1 = r10.<android.content.res.Configuration: int densityDpi>;

        r1.<android.content.res.Configuration: int densityDpi> = $i1;

        $i2 = r10.<android.content.res.Configuration: int smallestScreenWidthDp>;

        r1.<android.content.res.Configuration: int smallestScreenWidthDp> = $i2;

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z2 = virtualinvoke $r4.<android.content.pm.ActivityInfo: boolean isFixedOrientation()>();

        if $z2 == 0 goto label3;

        $r8 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r7 = r10.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i3 = virtualinvoke $r7.<android.app.WindowConfiguration: int getRotation()>();

        virtualinvoke $r8.<android.app.WindowConfiguration: void setRotation(int)>($i3);

     label3:
        $r5 = new com.android.server.wm.ActivityRecord$CompatDisplayInsets;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        specialinvoke $r5.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: void <init>(com.android.server.wm.DisplayContent,com.android.server.wm.WindowContainer)>($r6, r0);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets> = $r5;

        return;

     label4:
        return;
    }

    private void updateTaskDescription(java.lang.CharSequence)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.CharSequence r1;
        com.android.server.wm.Task $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r2.<com.android.server.wm.Task: java.lang.CharSequence lastDescription> = r1;

        return;
    }

    void activityPaused(boolean)
    {
        com.android.server.wm.ActivityRecord r0, $r2, $r3, $r7;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r14;
        com.android.server.wm.ActivityStack$ActivityState $r4, $r5;
        com.android.server.wm.ActivityTaskManagerService $r8, $r9, $r11;
        java.lang.Throwable $r10;
        com.android.server.wm.ActivityStack r12;
        com.android.server.wm.RootWindowContainer $r15;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        if r12 == null goto label7;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removePauseTimeout()>();

        $r2 = r12.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r2 != r0 goto label4;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label1:
        virtualinvoke r12.<com.android.server.wm.ActivityStack: void completePauseLocked(boolean,com.android.server.wm.ActivityRecord)>(1, null);

     label2:
        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return;

     label3:
        $r10 := @caughtexception;

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r11.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r10;

     label4:
        i0 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r1 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        $r3 = r12.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r3 == null goto label5;

        $r7 = r12.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        r14 = $r7.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        goto label6;

     label5:
        r14 = "(none)";

     label6:
        staticinvoke <com.android.server.wm.EventLogTags: void writeWmFailedToPause(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, r14);

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r4);

        if $z1 == 0 goto label7;

        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r5, "activityPausedLocked");

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 == 0 goto label7;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord completeFinishing(java.lang.String)>("activityPausedLocked");

     label7:
        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r15.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void activityStopped(android.os.Bundle, android.os.PersistableBundle, java.lang.CharSequence)
    {
        com.android.server.wm.ActivityRecord r0;
        android.os.PersistableBundle r1;
        java.lang.CharSequence r2;
        com.android.server.wm.ActivityStack$ActivityState $r4, $r5, $r8, $r11, $r12;
        boolean $z0, $z1, $z2, z5;
        com.android.server.wm.RootWindowContainer $r6, $r7;
        com.android.server.wm.Task $r9;
        com.android.server.wm.ActivityTaskManagerService $r10;
        java.lang.StringBuilder $r13;
        java.lang.String $r16;
        android.os.Bundle r17;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r17 := @parameter0: android.os.Bundle;

        r1 := @parameter1: android.os.PersistableBundle;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        if $r5 != $r4 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        if z5 != 0 goto label3;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r11 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESTARTING_PROCESS>;

        if $r12 == $r11 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activity reported stop, but no longer stopping: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r16);

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removeStopTimeout()>();

        return;

     label3:
        if r1 == null goto label4;

        r0.<com.android.server.wm.ActivityRecord: android.os.PersistableBundle mPersistentState> = r1;

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: void notifyTaskPersisterLocked(com.android.server.wm.Task,boolean)>($r9, 0);

     label4:
        if r17 == null goto label5;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setSavedState(android.os.Bundle)>(r17);

        r0.<com.android.server.wm.ActivityRecord: int launchCount> = 0;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void updateTaskDescription(java.lang.CharSequence)>(r2);

     label5:
        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean stopped>;

        if $z0 != 0 goto label9;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removeStopTimeout()>();

        r0.<com.android.server.wm.ActivityRecord: boolean stopped> = 1;

        if z5 == 0 goto label6;

        $r8 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r8, "activityStoppedLocked");

     label6:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void notifyAppStopped()>();

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z1 == 0 goto label7;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearOptionsLocked()>();

        goto label9;

     label7:
        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused>;

        if $z2 == 0 goto label8;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, "stop-config");

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        goto label9;

     label8:
        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: void updatePreviousProcess(com.android.server.wm.ActivityRecord)>(r0);

     label9:
        return;
    }

    void addResultLocked(com.android.server.wm.ActivityRecord, java.lang.String, int, int, android.content.Intent)
    {
        com.android.server.wm.ActivityRecord r0, r7;
        java.lang.String r1;
        int i0, i1;
        android.content.Intent r2;
        com.android.server.wm.ActivityResult $r3;
        java.util.ArrayList $r4, $r5, $r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r7 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.content.Intent;

        $r3 = new com.android.server.wm.ActivityResult;

        specialinvoke $r3.<com.android.server.wm.ActivityResult: void <init>(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>(r7, r1, i0, i1, r2);

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        if $r4 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results> = $r6;

     label1:
        $r5 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return;
    }

    boolean addStartingWindow(java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int, android.os.IBinder, boolean, boolean, boolean, boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1, $r27, $r28, $r29;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        android.content.res.CompatibilityInfo r2;
        java.lang.CharSequence r3;
        android.os.IBinder r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, z12, z13, z14, z15, $z16;
        long l5;
        com.android.server.wm.StartingData $r5;
        com.android.server.wm.WindowManagerService $r6, $r11, $r16, $r33;
        com.android.server.wm.Task $r7, $r8, $r34;
        com.android.server.wm.TaskSnapshotController $r9, $r35;
        com.android.server.wm.SplashScreenStartingData $r10;
        android.content.res.Configuration $r12;
        java.lang.Object[] $r13, $r25, $r30;
        com.android.server.wm.ProtoLogGroup $r14, $r26, $r31;
        com.android.server.AttributeCache $r15;
        int[] $r17;
        android.content.res.TypedArray $r18, $r19, $r20, $r21;
        com.android.server.wm.DisplayContent $r22, $r36;
        com.android.server.wm.WallpaperController $r23;
        com.android.server.wm.WindowState $r24, r39;
        java.lang.Long $r32;
        com.android.server.wm.AppTransition $r37;
        com.android.server.wm.WindowStateAnimator $r38;
        android.app.ActivityManager$TaskSnapshot r40;
        com.android.server.AttributeCache$Entry r41;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.res.CompatibilityInfo;

        r3 := @parameter3: java.lang.CharSequence;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i12 := @parameter7: int;

        r4 := @parameter8: android.os.IBinder;

        z8 := @parameter9: boolean;

        z9 := @parameter10: boolean;

        z10 := @parameter11: boolean;

        z11 := @parameter12: boolean;

        z0 := @parameter13: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean okToDisplay()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r5 == null goto label02;

        return 0;

     label02:
        r39 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r39 == null goto label03;

        $r38 = r39.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z7 = virtualinvoke $r38.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        if $z7 == 0 goto label03;

        return 0;

     label03:
        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i7 = $r7.<com.android.server.wm.Task: int mTaskId>;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i6 = $r8.<com.android.server.wm.Task: int mUserId>;

        r40 = virtualinvoke $r9.<com.android.server.wm.TaskSnapshotController: android.app.ActivityManager$TaskSnapshot getSnapshot(int,int,boolean,boolean)>($i7, $i6, 0, 0);

        i4 = specialinvoke r0.<com.android.server.wm.ActivityRecord: int getStartingWindowType(boolean,boolean,boolean,boolean,boolean,android.app.ActivityManager$TaskSnapshot)>(z8, z9, z10, z11, z0, r40);

        if i4 != 1 goto label05;

        $z5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z5 == 0 goto label04;

        $r33 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r35 = $r33.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        $r34 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i9 = $r34.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r35.<com.android.server.wm.TaskSnapshotController: void removeSnapshotCache(int)>($i9);

        $r36 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r37 = $r36.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i10 = virtualinvoke $r37.<com.android.server.wm.AppTransition: int getTransitFlags()>();

        $i11 = 2 & $i10;

        if $i11 != 0 goto label04;

        return 0;

     label04:
        $z6 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean createSnapshot(android.app.ActivityManager$TaskSnapshot)>(r40);

        return $z6;

     label05:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z2 == 0 goto label06;

        l5 = (long) i0;

        $r31 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r30 = newarray (java.lang.Object)[1];

        $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r30[0] = $r32;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r31, -1782453012, 1, null, $r30);

     label06:
        if i0 == 0 goto label13;

        $r15 = staticinvoke <com.android.server.AttributeCache: com.android.server.AttributeCache instance()>();

        $r17 = <com.android.internal.R$styleable: int[] Window>;

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i8 = $r16.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        r41 = virtualinvoke $r15.<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(java.lang.String,int,int[],int)>(r1, i0, $r17, $i8);

        if r41 != null goto label07;

        return 0;

     label07:
        $r18 = r41.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        z12 = virtualinvoke $r18.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, 0);

        $r19 = r41.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        z13 = virtualinvoke $r19.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        $r20 = r41.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        z14 = virtualinvoke $r20.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        $r21 = r41.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        z15 = virtualinvoke $r21.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(12, 0);

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z4 == 0 goto label08;

        $r26 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r25 = newarray (java.lang.Object)[3];

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z12);

        $r25[0] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z13);

        $r25[1] = $r28;

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z14);

        $r25[2] = $r29;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r26, -1088782910, 0, null, $r25);

        goto label08;

     label08:
        if z12 == 0 goto label09;

        return 0;

     label09:
        if z13 != 0 goto label12;

        if z15 == 0 goto label10;

        goto label12;

     label10:
        if z14 == 0 goto label13;

        $r22 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r23 = $r22.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $r24 = virtualinvoke $r23.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState getWallpaperTarget()>();

        if $r24 != null goto label11;

        i12 = i12 | 1048576;

        goto label13;

     label11:
        return 0;

     label12:
        return 0;

     label13:
        $z16 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean transferStartingWindow(android.os.IBinder)>(r4);

        if $z16 == 0 goto label14;

        return 1;

     label14:
        if i4 == 2 goto label15;

        return 0;

     label15:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z3 == 0 goto label16;

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r13 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, 2018852077, 0, null, $r13);

     label16:
        $r10 = new com.android.server.wm.SplashScreenStartingData;

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getMergedOverrideConfiguration()>();

        specialinvoke $r10.<com.android.server.wm.SplashScreenStartingData: void <init>(com.android.server.wm.WindowManagerService,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.content.res.Configuration)>($r11, r1, i0, r2, r3, i1, i2, i3, i12, $r12);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = $r10;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleAddStartingWindow()>();

        return 1;
    }

    boolean addToFinishingAndWaitForIdle()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState $r1;
        com.android.server.wm.ActivityStackSupervisor $r2, $r5;
        java.util.ArrayList $r3, $r6;
        boolean $z0, $z1;
        com.android.server.wm.RootWindowContainer $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState FINISHING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r1, "addToFinishingAndWaitForIdle");

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r3 = $r2.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6 = $r5.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void resumeKeyDispatchingLocked()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z1 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        return $z1;
    }

    void addToStopping(boolean, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3, z5;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.ActivityStackSupervisor $r1, $r3, $r5, $r6, $r8;
        java.util.ArrayList $r2, $r4, $r9;
        java.lang.String $r7, r10;
        com.android.server.wm.ActivityStack r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r10 := @parameter2: java.lang.String;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r2 = $r1.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        $z2 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r0);

        if $z2 != 0 goto label1;

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r7 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmAddToStopping(int,int,java.lang.String,java.lang.String)>($i2, $i3, $r7, r10);

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r9 = $r8.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label1:
        r11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = $r3.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        z5 = 1;

        if i0 > 3 goto label3;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRootOfTask()>();

        if $z3 == 0 goto label2;

        $i1 = virtualinvoke r11.<com.android.server.wm.ActivityStack: int getChildCount()>();

        if $i1 > 1 goto label2;

        goto label3;

     label2:
        z5 = 0;

        goto label3;

     label3:
        if z0 != 0 goto label5;

        if z5 == 0 goto label4;

        goto label5;

     label4:
        virtualinvoke r11.<com.android.server.wm.ActivityStack: void checkReadyForSleep()>();

        goto label7;

     label5:
        if z1 != 0 goto label6;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdle()>();

        goto label7;

     label6:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdleTimeout(com.android.server.wm.ActivityRecord)>(r0);

     label7:
        return;
    }

    void addWindow(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, $r6;
        com.android.server.wm.WindowList $r2, $r4;
        int $i0, i1;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Object $r5;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        specialinvoke r0.<com.android.server.wm.WindowToken: void addWindow(com.android.server.wm.WindowState)>(r1);

        z1 = 0;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WindowState) $r5;

        $z0 = virtualinvoke $r6.<com.android.server.wm.WindowState: boolean setReplacementWindowIfNeeded(com.android.server.wm.WindowState)>(r1);

        z1 = z1 | $z0;

        i1 = i1 + -1;

        goto label1;

     label2:
        if z1 == 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>(r0);

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void checkKeyguardFlagsChanged()>();

        return;
    }

    boolean allowMoveToFront()
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityOptions r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.app.ActivityOptions: boolean getAvoidMoveToFront()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    boolean applyAnimation(android.view.WindowManager$LayoutParams, int, boolean, boolean, java.util.ArrayList)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.WindowManager$LayoutParams r1;
        int i0;
        boolean z0, z1, $z2, $z3;
        java.util.ArrayList r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: java.util.ArrayList;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mUseTransferredAnimation>;

        if $z2 == 0 goto label1;

        return 0;

     label1:
        $z3 = specialinvoke r0.<com.android.server.wm.WindowToken: boolean applyAnimation(android.view.WindowManager$LayoutParams,int,boolean,boolean,java.util.ArrayList)>(r1, i0, z0, z1, r2);

        return $z3;
    }

    void applyFixedRotationTransform(android.view.DisplayInfo, com.android.server.wm.DisplayFrames, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.DisplayInfo r1;
        com.android.server.wm.DisplayFrames r2;
        android.content.res.Configuration r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.DisplayInfo;

        r2 := @parameter1: com.android.server.wm.DisplayFrames;

        r3 := @parameter2: android.content.res.Configuration;

        specialinvoke r0.<com.android.server.wm.WindowToken: void applyFixedRotationTransform(android.view.DisplayInfo,com.android.server.wm.DisplayFrames,android.content.res.Configuration)>(r1, r2, r3);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean)>(0, 0);

        return;
    }

    void applyOptionsLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;
        android.content.Intent $r1;
        android.app.ActivityOptions $r2, r4;
        com.android.server.wm.'-$$Lambda$ActivityRecord$QP-eHsXODaflS0pyRnr8fdoF6BU' $r3;
        com.android.server.wm.Task r5;
        java.util.function.Consumer r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r4 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<android.app.ActivityOptions: int getAnimationType()>();

        if $i0 == 5 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void applyOptionsLocked(android.app.ActivityOptions,android.content.Intent)>($r2, $r1);

        r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r5 != null goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearOptionsLocked(boolean)>(0);

        goto label2;

     label1:
        $r3 = <com.android.server.wm._$$Lambda$ActivityRecord$QP_eHsXODaflS0pyRnr8fdoF6BU: com.android.server.wm.'-$$Lambda$ActivityRecord$QP-eHsXODaflS0pyRnr8fdoF6BU' INSTANCE>;

        r6 = (java.util.function.Consumer) $r3;

        virtualinvoke r5.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r6);

     label2:
        return;
    }

    void applyOptionsLocked(android.app.ActivityOptions, android.content.Intent)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;
        com.android.server.wm.AppTransition $r1, $r3, $r4, $r9, $r12, $r16, $r19, r33, r35;
        android.view.RemoteAnimationAdapter $r2;
        android.graphics.Rect $r5, $r6, $r7, $r8, $r14, $r15, $r17, $r18;
        android.os.IRemoteCallback $r10, $r11, $r13, $r21, $r22, r34, r37;
        java.lang.String $r20, $r26;
        java.lang.StringBuilder $r23;
        android.app.ActivityOptions r27;
        android.content.Intent r28;
        com.android.server.wm.DisplayContent r29;
        boolean z0, z1, z2;
        android.view.AppTransitionAnimationSpec[] r31;
        android.view.IAppTransitionAnimationSpecsFuture r32;
        android.graphics.GraphicBuffer r36, r38;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r27 := @parameter0: android.app.ActivityOptions;

        r28 := @parameter1: android.content.Intent;

        i0 = virtualinvoke r27.<android.app.ActivityOptions: int getAnimationType()>();

        r29 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        z0 = 1;

        tableswitch(i0)
        {
            case -1: goto label17;
            case 0: goto label17;
            case 1: goto label16;
            case 2: goto label15;
            case 3: goto label12;
            case 4: goto label12;
            case 5: goto label01;
            case 6: goto label01;
            case 7: goto label01;
            case 8: goto label05;
            case 9: goto label05;
            case 10: goto label01;
            case 11: goto label04;
            case 12: goto label03;
            case 13: goto label02;
            default: goto label01;
        };

     label01:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("applyOptionsLocked: Unknown animationType=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r26);

        goto label17;

     label02:
        $r1 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r2 = virtualinvoke r27.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter getRemoteAnimationAdapter()>();

        virtualinvoke $r1.<com.android.server.wm.AppTransition: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter)>($r2);

        goto label17;

     label03:
        $r3 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r3.<com.android.server.wm.AppTransition: void overridePendingAppTransitionStartCrossProfileApps()>();

        goto label17;

     label04:
        $r4 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i5 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i6 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i7 = virtualinvoke r27.<android.app.ActivityOptions: int getWidth()>();

        $i8 = virtualinvoke r27.<android.app.ActivityOptions: int getHeight()>();

        virtualinvoke $r4.<com.android.server.wm.AppTransition: void overridePendingAppTransitionClipReveal(int,int,int,int)>($i5, $i6, $i7, $i8);

        $r5 = virtualinvoke r28.<android.content.Intent: android.graphics.Rect getSourceBounds()>();

        if $r5 != null goto label17;

        $r6 = new android.graphics.Rect;

        $i9 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i10 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i11 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i12 = virtualinvoke r27.<android.app.ActivityOptions: int getWidth()>();

        $i13 = $i11 + $i12;

        $i14 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i15 = virtualinvoke r27.<android.app.ActivityOptions: int getHeight()>();

        $i16 = $i14 + $i15;

        specialinvoke $r6.<android.graphics.Rect: void <init>(int,int,int,int)>($i9, $i10, $i13, $i16);

        virtualinvoke r28.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>($r6);

        goto label17;

     label05:
        r31 = virtualinvoke r27.<android.app.ActivityOptions: android.view.AppTransitionAnimationSpec[] getAnimSpecs()>();

        r32 = virtualinvoke r27.<android.app.ActivityOptions: android.view.IAppTransitionAnimationSpecsFuture getSpecsFuture()>();

        if r32 == null goto label08;

        r33 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        r34 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()>();

        if i0 != 8 goto label06;

        goto label07;

     label06:
        z0 = 0;

     label07:
        virtualinvoke r33.<com.android.server.wm.AppTransition: void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture,android.os.IRemoteCallback,boolean)>(r32, r34, z0);

        goto label17;

     label08:
        if i0 != 9 goto label09;

        if r31 == null goto label09;

        $r9 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r10 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()>();

        $r11 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationFinishedListener()>();

        virtualinvoke $r9.<com.android.server.wm.AppTransition: void overridePendingAppTransitionMultiThumb(android.view.AppTransitionAnimationSpec[],android.os.IRemoteCallback,android.os.IRemoteCallback,boolean)>(r31, $r10, $r11, 0);

        goto label17;

     label09:
        r35 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        r36 = virtualinvoke r27.<android.app.ActivityOptions: android.graphics.GraphicBuffer getThumbnail()>();

        i1 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        i2 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        i3 = virtualinvoke r27.<android.app.ActivityOptions: int getWidth()>();

        i4 = virtualinvoke r27.<android.app.ActivityOptions: int getHeight()>();

        r37 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()>();

        if i0 != 8 goto label10;

        z1 = 1;

        goto label11;

     label10:
        z1 = 0;

     label11:
        virtualinvoke r35.<com.android.server.wm.AppTransition: void overridePendingAppTransitionAspectScaledThumb(android.graphics.GraphicBuffer,int,int,int,int,android.os.IRemoteCallback,boolean)>(r36, i1, i2, i3, i4, r37, z1);

        $r7 = virtualinvoke r28.<android.content.Intent: android.graphics.Rect getSourceBounds()>();

        if $r7 != null goto label17;

        $r8 = new android.graphics.Rect;

        $i17 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i18 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i19 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i20 = virtualinvoke r27.<android.app.ActivityOptions: int getWidth()>();

        $i21 = $i19 + $i20;

        $i22 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i23 = virtualinvoke r27.<android.app.ActivityOptions: int getHeight()>();

        $i24 = $i22 + $i23;

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>($i17, $i18, $i21, $i24);

        virtualinvoke r28.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>($r8);

        goto label17;

     label12:
        if i0 != 3 goto label13;

        z2 = 1;

        goto label14;

     label13:
        z2 = 0;

     label14:
        r38 = virtualinvoke r27.<android.app.ActivityOptions: android.graphics.GraphicBuffer getThumbnail()>();

        $r12 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i25 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i26 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $r13 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()>();

        virtualinvoke $r12.<com.android.server.wm.AppTransition: void overridePendingAppTransitionThumb(android.graphics.GraphicBuffer,int,int,android.os.IRemoteCallback,boolean)>(r38, $i25, $i26, $r13, z2);

        $r14 = virtualinvoke r28.<android.content.Intent: android.graphics.Rect getSourceBounds()>();

        if $r14 != null goto label17;

        if r38 == null goto label17;

        $r15 = new android.graphics.Rect;

        $i27 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i28 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i29 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i30 = virtualinvoke r38.<android.graphics.GraphicBuffer: int getWidth()>();

        $i31 = $i29 + $i30;

        $i32 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i33 = virtualinvoke r38.<android.graphics.GraphicBuffer: int getHeight()>();

        $i34 = $i32 + $i33;

        specialinvoke $r15.<android.graphics.Rect: void <init>(int,int,int,int)>($i27, $i28, $i31, $i34);

        virtualinvoke r28.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>($r15);

        goto label17;

     label15:
        $r16 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i35 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i36 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i37 = virtualinvoke r27.<android.app.ActivityOptions: int getWidth()>();

        $i38 = virtualinvoke r27.<android.app.ActivityOptions: int getHeight()>();

        virtualinvoke $r16.<com.android.server.wm.AppTransition: void overridePendingAppTransitionScaleUp(int,int,int,int)>($i35, $i36, $i37, $i38);

        $r17 = virtualinvoke r28.<android.content.Intent: android.graphics.Rect getSourceBounds()>();

        if $r17 != null goto label17;

        $r18 = new android.graphics.Rect;

        $i39 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i40 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i41 = virtualinvoke r27.<android.app.ActivityOptions: int getStartX()>();

        $i42 = virtualinvoke r27.<android.app.ActivityOptions: int getWidth()>();

        $i43 = $i41 + $i42;

        $i44 = virtualinvoke r27.<android.app.ActivityOptions: int getStartY()>();

        $i45 = virtualinvoke r27.<android.app.ActivityOptions: int getHeight()>();

        $i46 = $i44 + $i45;

        specialinvoke $r18.<android.graphics.Rect: void <init>(int,int,int,int)>($i39, $i40, $i43, $i46);

        virtualinvoke r28.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>($r18);

        goto label17;

     label16:
        $r19 = r29.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r20 = virtualinvoke r27.<android.app.ActivityOptions: java.lang.String getPackageName()>();

        $i47 = virtualinvoke r27.<android.app.ActivityOptions: int getCustomEnterResId()>();

        $i48 = virtualinvoke r27.<android.app.ActivityOptions: int getCustomExitResId()>();

        $r21 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationStartedListener()>();

        $r22 = virtualinvoke r27.<android.app.ActivityOptions: android.os.IRemoteCallback getAnimationFinishedListener()>();

        virtualinvoke $r19.<com.android.server.wm.AppTransition: void overridePendingAppTransition(java.lang.String,int,int,android.os.IRemoteCallback,android.os.IRemoteCallback)>($r20, $i47, $i48, $r21, $r22);

        goto label17;

     label17:
        return;
    }

    com.android.server.wm.ActivityRecord asActivityRecord()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        return r0;
    }

    void attachCrossProfileAppsThumbnailAnimation()
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        boolean $z0;
        com.android.server.wm.Task $r2, $r9;
        com.android.server.wm.WindowManagerService $r3, $r7;
        int $i0, $i1, $i2, $i3, i4;
        com.android.server.wm.DisplayContent $r4, $r10;
        com.android.server.wm.AppTransition $r5, $r11;
        com.android.server.wm.WindowContainerThumbnail $r6, $r13;
        java.util.function.Supplier $r8;
        android.graphics.Point $r12;
        com.android.server.wm.WindowState r14;
        android.graphics.Rect r15;
        android.graphics.GraphicBuffer r16;
        android.view.animation.Animation r17;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(2);

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void clearThumbnail()>();

        r14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r14 != null goto label2;

        return;

     label2:
        r15 = virtualinvoke r14.<com.android.server.wm.WindowState: android.graphics.Rect getRelativeFrameLw()>();

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i1 = $r2.<com.android.server.wm.Task: int mUserId>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i0 = $r3.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        if $i1 != $i0 goto label3;

        i4 = 17302298;

        goto label4;

     label3:
        i4 = 17302381;

     label4:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        r16 = virtualinvoke $r5.<com.android.server.wm.AppTransition: android.graphics.GraphicBuffer createCrossProfileAppsThumbnail(int,android.graphics.Rect)>(i4, r15);

        if r16 != null goto label5;

        return;

     label5:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r6 = new com.android.server.wm.WindowContainerThumbnail;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mSurfaceFactory>;

        $r9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        specialinvoke $r6.<com.android.server.wm.WindowContainerThumbnail: void <init>(java.util.function.Supplier,android.view.SurfaceControl$Transaction,com.android.server.wm.WindowContainer,android.graphics.GraphicBuffer)>($r8, r1, $r9, r16);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail> = $r6;

        $r10 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r11 = $r10.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        r17 = virtualinvoke $r11.<com.android.server.wm.AppTransition: android.view.animation.Animation createCrossProfileAppsThumbnailAnimationLocked(android.graphics.Rect)>(r15);

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        $r12 = new android.graphics.Point;

        $i3 = r15.<android.graphics.Rect: int left>;

        $i2 = r15.<android.graphics.Rect: int top>;

        specialinvoke $r12.<android.graphics.Point: void <init>(int,int)>($i3, $i2);

        virtualinvoke $r13.<com.android.server.wm.WindowContainerThumbnail: void startAnimation(android.view.SurfaceControl$Transaction,android.view.animation.Animation,android.graphics.Point)>(r1, r17, $r12);

        return;
    }

    void attachThumbnailAnimation()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.GraphicBuffer r1;
        boolean $z0, $z1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.Task $r3, $r12;
        com.android.server.wm.AppTransition $r4;
        com.android.server.wm.WindowContainer $r5, $r9;
        com.android.server.wm.WindowContainerThumbnail $r6, $r10;
        com.android.server.wm.WindowManagerService $r7;
        java.util.function.Supplier $r8;
        android.view.animation.Animation $r11;
        java.lang.Object[] $r13;
        com.android.server.wm.ProtoLogGroup $r14;
        java.lang.String r15;
        android.view.SurfaceControl$Transaction r16;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r1 = virtualinvoke $r4.<com.android.server.wm.AppTransition: android.graphics.GraphicBuffer getAppTransitionThumbnailHeader(com.android.server.wm.WindowContainer)>($r3);

        if r1 != null goto label3;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z1 == 0 goto label2;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r15;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, 1528528509, 0, null, $r13);

     label2:
        return;

     label3:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void clearThumbnail()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getAnimatingContainer()>();

        r16 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r6 = new com.android.server.wm.WindowContainerThumbnail;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mSurfaceFactory>;

        $r9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getAnimatingContainer()>();

        specialinvoke $r6.<com.android.server.wm.WindowContainerThumbnail: void <init>(java.util.function.Supplier,android.view.SurfaceControl$Transaction,com.android.server.wm.WindowContainer,android.graphics.GraphicBuffer)>($r8, r16, $r9, r1);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail> = $r6;

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        $r11 = specialinvoke r0.<com.android.server.wm.ActivityRecord: android.view.animation.Animation loadThumbnailAnimation(android.graphics.GraphicBuffer)>(r1);

        virtualinvoke $r10.<com.android.server.wm.WindowContainerThumbnail: void startAnimation(android.view.SurfaceControl$Transaction,android.view.animation.Animation)>(r16, $r11);

        return;
    }

    boolean attachedToProcess()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;
        com.android.server.wm.WindowProcessController $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.WindowProcessController: boolean hasThread()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean canBeLaunchedOnDisplay(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1, $i2;
        com.android.server.wm.ActivityTaskManagerService $r1;
        android.content.pm.ActivityInfo $r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i2 = r0.<com.android.server.wm.ActivityRecord: int launchedFromPid>;

        $i1 = r0.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: boolean canPlaceEntityOnDisplay(int,int,int,android.content.pm.ActivityInfo)>(i0, $i2, $i1, $r2);

        return $z0;
    }

    boolean canBeTopRunning()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean okToShowLocked()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean canCreateRemoteAnimationTarget()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        return 1;
    }

    boolean canLaunchHomeActivity(int, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        int i0, i1;
        com.android.server.wm.RecentTasks r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.ActivityTaskManagerService $r4;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        i1 = staticinvoke <android.os.Process: int myUid()>();

        z2 = 1;

        if i0 == i1 goto label5;

        if i0 != 0 goto label1;

        goto label5;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        r2 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<com.android.server.wm.RecentTasks: boolean isCallerRecents(int)>(i0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isResolverOrDelegateActivity()>();

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;

     label5:
        return 1;
    }

    boolean canReceiveKeys()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1;
        android.app.WindowConfiguration $r2, $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.app.WindowConfiguration getWindowConfiguration()>();

        $z0 = virtualinvoke $r2.<android.app.WindowConfiguration: boolean canReceiveKeys()>();

        if $z0 == 0 goto label2;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z1 = virtualinvoke $r3.<android.app.WindowConfiguration: boolean canReceiveKeys()>();

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean canResumeByCompat()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean updateTopResumingActivityInProcessIfNeeded(com.android.server.wm.ActivityRecord)>(r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    boolean canShowWhenLocked()
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        com.android.server.wm.Task $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        z7 = 1;

        if z0 != 0 goto label2;

        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean mShowWhenLocked>;

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean containsShowWhenLockedWindow()>();

        if $z6 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mInheritShownWhenLocked>;

        if $z1 == 0 goto label6;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r1 = virtualinvoke $r2.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivityBelow(com.android.server.wm.ActivityRecord)>(r0);

        if r1 == null goto label4;

        $z2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z2 != 0 goto label4;

        $z3 = r1.<com.android.server.wm.ActivityRecord: boolean mShowWhenLocked>;

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean containsShowWhenLockedWindow()>();

        if $z4 == 0 goto label4;

     label3:
        goto label5;

     label4:
        z7 = 0;

     label5:
        return z7;

     label6:
        return 0;
    }

    boolean canShowWindows()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(2);

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasNonDefaultColorWindow()>();

        if $z2 != 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean canTurnScreenOn()
    {
        com.android.server.wm.ActivityRecord r0, $r2;
        com.android.server.wm.ActivityStack r1;
        boolean $z1, z2, z3, z4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean getTurnScreenOnFlag()>();

        if z2 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 == null goto label4;

        $r2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r2 != r0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean checkKeyguardVisibility(com.android.server.wm.ActivityRecord,boolean,boolean)>(r0, 1, z3);

        if $z1 == 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        z4 = 0;

     label5:
        return z4;
    }

    void cancelAnimation()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.WindowToken: void cancelAnimation()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void clearThumbnail()>();

        return;
    }

    void cancelInitializing()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;
        com.android.server.wm.ActivityStack$ActivityState $r1;
        boolean $z0, $z1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.UnknownAppVisibilityController $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mStartingWindowState>;

        if $i0 != 1 goto label1;

        r0.<com.android.server.wm.ActivityRecord: int mStartingWindowState> = 2;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

     label1:
        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState INITIALIZING>;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldBeVisible(boolean,boolean)>(1, 1);

        if $z1 != 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        virtualinvoke $r3.<com.android.server.wm.UnknownAppVisibilityController: void appRemovedOrHidden(com.android.server.wm.ActivityRecord)>(r0);

     label2:
        return;
    }

    void checkAppWindowsReadyToShow()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String r1;
        long l0, l1;
        com.android.server.wm.DisplayContent $r2;
        android.util.ArraySet $r3;
        int $i2, $i3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Long $r6, $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mLastAllDrawn>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityRecord: boolean mLastAllDrawn> = z0;

        if z0 != 0 goto label2;

        return;

     label2:
        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void showAllWindowsLocked()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreen(boolean,boolean)>(0, 1);

        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z5 == 0 goto label3;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        l0 = (long) $i2;

        $i3 = r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows>;

        l1 = (long) $i3;

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r1;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4[2] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 806891543, 20, null, $r4);

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setAppLayoutChanges(int,java.lang.String)>(4, "checkAppWindowsReadyToShow: freezingScreen");

        goto label5;

     label4:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setAppLayoutChanges(int,java.lang.String)>(8, "checkAppWindowsReadyToShow");

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = $r2.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z3 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z3 != 0 goto label5;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canShowWindows()>();

        if $z4 == 0 goto label5;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void showAllWindowsLocked()>();

     label5:
        return;
    }

    boolean checkEnterPictureInPictureState(java.lang.String, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1, $i2;
        boolean $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z11, z12, z13, z14, z15, z16, z17;
        com.android.server.wm.ActivityTaskManagerService $r1, $r2, $r3;
        com.android.server.wm.ActivityStack$ActivityState $r4;
        int[] $r5;
        java.lang.String r6;
        com.android.server.wm.TaskDisplayArea r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r6 := @parameter0: java.lang.String;

        z8 := @parameter1: boolean;

        z9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean supportsPictureInPicture()>();

        if z9 != 0 goto label01;

        return 0;

     label01:
        $z2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean checkEnterPictureInPictureAppOpsState()>();

        if $z2 != 0 goto label02;

        return 0;

     label02:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z3 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: boolean shouldDisableNonVrUiLocked()>();

        if $z3 == 0 goto label03;

        return 0;

     label03:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        z11 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: boolean isKeyguardLocked()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $i1 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: int getLockTaskModeState()>();

        if $i1 == 0 goto label04;

        z12 = 1;

        goto label05;

     label04:
        z12 = 0;

     label05:
        r7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r7 == null goto label06;

        $z7 = virtualinvoke r7.<com.android.server.wm.TaskDisplayArea: boolean hasPinnedTask()>();

        if $z7 == 0 goto label06;

        z13 = 1;

        goto label07;

     label06:
        z13 = 0;

     label07:
        if z11 != 0 goto label08;

        if z12 != 0 goto label08;

        z14 = 1;

        goto label09;

     label08:
        z14 = 0;

     label09:
        if z8 == 0 goto label10;

        if z13 == 0 goto label10;

        return 0;

     label10:
        $r5 = <com.android.server.wm.ActivityRecord$5: int[] $SwitchMap$com$android$server$wm$ActivityStack$ActivityState>;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $i2 = virtualinvoke $r4.<com.android.server.wm.ActivityStack$ActivityState: int ordinal()>();

        i0 = $r5[$i2];

        if i0 == 1 goto label16;

        if i0 == 2 goto label14;

        if i0 == 3 goto label14;

        if i0 == 4 goto label11;

        goto label13;

     label11:
        $z6 = r0.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch>;

        if $z6 == 0 goto label13;

        z15 = 0;

        if z14 == 0 goto label12;

        z15 = 0;

        if z13 != 0 goto label12;

        z15 = 1;

     label12:
        return z15;

     label13:
        return 0;

     label14:
        z16 = 0;

        if z14 == 0 goto label15;

        z16 = 0;

        if z13 != 0 goto label15;

        z16 = 0;

        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch>;

        if $z5 == 0 goto label15;

        z16 = 1;

     label15:
        return z16;

     label16:
        z17 = 0;

        if z12 != 0 goto label18;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch>;

        if $z4 != 0 goto label17;

        z17 = 0;

        if z8 != 0 goto label18;

     label17:
        z17 = 1;

     label18:
        return z17;
    }

    void checkKeyguardFlagsChanged()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.DisplayContent $r2;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean containsDismissKeyguardWindow()>();

        z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean containsShowWhenLockedWindow()>();

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsDismissKeyguardWindow>;

        if z0 != $z2 goto label1;

        $z3 = r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsShowWhenLockedWindow>;

        if z1 == $z3 goto label2;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i0 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void notifyKeyguardFlagsChanged(java.lang.Runnable,int)>(null, $i0);

     label2:
        r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsDismissKeyguardWindow> = z0;

        r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsShowWhenLockedWindow> = z1;

        $z4 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean containsTurnScreenOnWindow()>();

        r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsTurnScreenOnWindow> = $z4;

        return;
    }

    void cleanUp(boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3;
        java.util.Iterator r1;
        com.android.server.wm.Task $r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        java.lang.Object $r4, $r6;
        java.lang.ref.WeakReference $r5;
        com.android.server.wm.ActivityTaskManagerService $r7;
        com.android.server.am.PendingIntentController $r8;
        com.android.server.wm.ActivityStack$ActivityState $r9;
        java.util.HashSet r10;
        com.android.server.am.PendingIntentRecord r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r2.<com.android.server.wm.Task: void cleanUpActivityReferences(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean frozenBeforeDestroy> = 0;

        if z1 == 0 goto label1;

        $r9 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r9, "cleanUp");

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app> = null;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void cleanupActivity(com.android.server.wm.ActivityRecord)>(r0);

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 == 0 goto label5;

        r10 = r0.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults>;

        if r10 == null goto label5;

        r1 = virtualinvoke r10.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.ref.WeakReference) $r4;

        $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r11 = (com.android.server.am.PendingIntentRecord) $r6;

        if r11 == null goto label3;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r8 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.PendingIntentController mPendingIntentController>;

        virtualinvoke $r8.<com.android.server.am.PendingIntentController: void cancelIntentSender(com.android.server.am.PendingIntentRecord,boolean)>(r11, 0);

     label3:
        goto label2;

     label4:
        r0.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults> = null;

     label5:
        if z0 == 0 goto label6;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void cleanUpActivityServices()>();

     label6:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeTimeouts()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearRelaunching()>();

        return;
    }

    void clearAllDrawn()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: boolean allDrawn> = 0;

        return;
    }

    void clearAnimatingFlags()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z1 = 0;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z0 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean clearAnimatingFlags()>();

        z1 = z1 | $z0;

        i1 = i1 + -1;

        goto label1;

     label2:
        if z1 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void requestUpdateWallpaperIfNeeded()>();

     label3:
        return;
    }

    void clearOptionsLocked()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearOptionsLocked(boolean)>(1);

        return;
    }

    void clearOptionsLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;
        android.app.ActivityOptions r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r1 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.app.ActivityOptions: void abort()>();

     label1:
        r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions> = null;

        return;
    }

    void clearRelaunching()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount>;

        if $i0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void unfreezeBounds()>();

        r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount> = 0;

        return;
    }

    void clearSizeCompatMode()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale> = 1.0F;

        r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds> = null;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets> = null;

        $r1 = <android.content.res.Configuration: android.content.res.Configuration EMPTY>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>($r1);

        return;
    }

    void clearVoiceSessionLocked()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: android.service.voice.IVoiceInteractionSession voiceSession> = null;

        r0.<com.android.server.wm.ActivityRecord: boolean pendingVoiceInteractionStart> = 0;

        return;
    }

    void clearWillReplaceWindows()
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1698815688, 0, null, $r6);

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        virtualinvoke $r5.<com.android.server.wm.WindowState: void clearWillReplaceWindow()>();

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    void commitVisibility(boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, z2, z3, $z4, $z6, $z7, $z8;
        int i0, i1;
        com.android.server.wm.WindowList $r1, $r14;
        com.android.server.wm.InputMonitor $r3, $r4;
        com.android.server.wm.WindowManagerService $r5, $r6, r18;
        com.android.server.wm.WindowSurfacePlacer $r7;
        java.lang.Object[] $r8;
        com.android.server.wm.ProtoLogGroup $r9;
        java.lang.Boolean $r10, $r11;
        com.android.server.wm.WindowState $r12, $r13, $r16, r17;
        java.lang.Object $r15;
        com.android.server.wm._$$Lambda$2KrtdmjrY7Nagc4IRqzCk9gDuQU $r19;
        java.lang.String r20;
        com.android.server.wm.DisplayContent r21;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow> = 0;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if z0 != $z4 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r16 = (com.android.server.wm.WindowState) $r15;

        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(2);

        virtualinvoke $r16.<com.android.server.wm.WindowState: void onAppVisibilityChanged(boolean,boolean)>(z0, $z7);

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisible(boolean)>(z0);

        r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested> = z0;

        if z0 != 0 goto label4;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreen(boolean,boolean)>(1, 1);

        goto label6;

     label4:
        r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if r17 == null goto label5;

        $z6 = virtualinvoke r17.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z6 != 0 goto label5;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        virtualinvoke $r12.<com.android.server.wm.WindowState: void clearPolicyVisibilityFlag(int)>(1);

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        $r13.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim> = 0;

     label5:
        r18 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r18);

        $r19 = new com.android.server.wm._$$Lambda$2KrtdmjrY7Nagc4IRqzCk9gDuQU;

        specialinvoke $r19.<com.android.server.wm._$$Lambda$2KrtdmjrY7Nagc4IRqzCk9gDuQU: void <init>(com.android.server.wm.WindowManagerService)>(r18);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void forAllWindows(java.util.function.Consumer,boolean)>($r19, 1);

     label6:
        $z8 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z8 == 0 goto label7;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        z3 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = r20;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r8[2] = $r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, -1521427940, 60, null, $r8);

     label7:
        r21 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = virtualinvoke r21.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r3.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        if z1 == 0 goto label8;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r7.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label8:
        $r4 = virtualinvoke r21.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r4.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

        r0.<com.android.server.wm.ActivityRecord: boolean mUseTransferredAnimation> = 0;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void postApplyAnimation(boolean)>(z0);

        return;
    }

    com.android.server.wm.ActivityRecord completeFinishing(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0, r14, r16, r17;
        com.android.server.wm.ActivityStack r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, z14, z15;
        java.lang.StringBuilder $r2;
        com.android.server.wm.ActivityStack$ActivityState $r3, $r6, $r7, $r8, $r12;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r13;
        com.android.server.wm.ActivityStackSupervisor $r9;
        com.android.server.wm.KeyguardController $r10;
        com.android.server.wm.DisplayContent $r11;
        com.android.server.wm.TaskDisplayArea $r15;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r13 := @parameter0: java.lang.String;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label16;

        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r6);

        if $z2 != 0 goto label16;

        $r7 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r7);

        if $z3 == 0 goto label01;

        return r0;

     label01:
        z11 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if z11 != 0 goto label03;

        $r12 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $z10 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r12);

        if $z10 == 0 goto label02;

        goto label03;

     label02:
        z12 = 0;

        goto label04;

     label03:
        z12 = 1;

     label04:
        if z12 == 0 goto label07;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        r14 = r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if r14 == null goto label05;

        $z9 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        if $z9 != 0 goto label05;

        z13 = 1;

        goto label06;

     label05:
        z13 = 0;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $z7 = virtualinvoke $r10.<com.android.server.wm.KeyguardController: boolean isKeyguardLocked()>();

        if $z7 == 0 goto label06;

        z13 = 0;

        $z8 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean topActivityOccludesKeyguard()>();

        if $z8 == 0 goto label06;

        z13 = 1;

     label06:
        if z13 == 0 goto label07;

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r11.<com.android.server.wm.DisplayContent: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(null, 0, 0, 1);

     label07:
        z14 = 0;

        $r15 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r16 = virtualinvoke $r15.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(1);

        if r16 == null goto label09;

        $z5 = r16.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z5 == 0 goto label08;

        $z6 = r16.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z6 != 0 goto label09;

     label08:
        z15 = 1;

        goto label10;

     label09:
        z15 = 0;

     label10:
        if z12 == 0 goto label11;

        if z15 == 0 goto label11;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void addToStopping(boolean,boolean,java.lang.String)>(0, 0, "completeFinishing");

        $r8 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r8, "completeFinishing");

        goto label13;

     label11:
        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean addToFinishingAndWaitForIdle()>();

        if $z4 == 0 goto label12;

        goto label13;

     label12:
        z14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyIfPossible(java.lang.String)>(r13);

     label13:
        if z14 == 0 goto label14;

        r17 = null;

        goto label15;

     label14:
        r17 = r0;

     label15:
        return r17;

     label16:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activity must be finishing and not resumed to complete, r=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", finishing=");

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state=");

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    void completeResumeLocked()
    {
        com.android.server.wm.ActivityRecord r0, $r10;
        boolean z0, $z1, $z3, $z4, $z5;
        com.android.server.wm.ActivityStackSupervisor $r1, $r2, $r3, $r5, $r7, $r9, $r14;
        java.util.ArrayList $r4, r15, r16;
        com.android.server.wm.WindowProcessController $r6, $r11;
        long $l0;
        com.android.server.wm.Task $r8;
        int $i1, $i2, $i3;
        java.lang.Object $r12;
        android.content.Intent $r13;
        com.android.server.wm.ActivityStack r17;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(1);

        if z0 != 0 goto label1;

        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r14.<com.android.server.wm.ActivityStackSupervisor: boolean mAppVisibilitiesChangedSinceLastPause> = 1;

     label1:
        r0.<com.android.server.wm.ActivityRecord: boolean idle> = 0;

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results> = null;

        r15 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        if r15 == null goto label2;

        $i1 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label2;

        r16 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        $i2 = virtualinvoke r16.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        $r12 = virtualinvoke r16.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r13 = (android.content.Intent) $r12;

        r0.<com.android.server.wm.ActivityRecord: android.content.Intent mLastNewIntent> = $r13;

     label2:
        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents> = null;

        r0.<com.android.server.wm.ActivityRecord: boolean stopped> = 0;

        $z5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z5 == 0 goto label3;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r10 = virtualinvoke $r8.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getBottomMostActivity()>();

        $r11 = $r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: void updateHomeProcess(com.android.server.wm.WindowProcessController)>($r11);

     label3:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z1 == 0 goto label4;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord)>(r0);

     label4:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdleTimeout(com.android.server.wm.ActivityRecord)>(r0);

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: boolean reportResumedActivityLocked(com.android.server.wm.ActivityRecord)>(r0);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void resumeKeyDispatchingLocked()>();

        r17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = $r3.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z3 == 0 goto label5;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $l0 = virtualinvoke $r6.<com.android.server.wm.WindowProcessController: long getCpuTime()>();

        r0.<com.android.server.wm.ActivityRecord: long cpuTimeAtResume> = $l0;

        goto label6;

     label5:
        r0.<com.android.server.wm.ActivityRecord: long cpuTimeAtResume> = 0L;

     label6:
        r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions returningOptions> = null;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canTurnScreenOn()>();

        if $z4 == 0 goto label7;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: void wakeUp(java.lang.String)>("turnScreenOnFlag");

        goto label8;

     label7:
        virtualinvoke r17.<com.android.server.wm.ActivityStack: void checkReadyForSleep()>();

     label8:
        return;
    }

    boolean containsDismissKeyguardWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        android.view.WindowManager$LayoutParams $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsDismissKeyguardWindow>;

        return $z1;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i3 = $i0 - 1;

     label2:
        if i3 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $r5 = $r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 4194304;

        if $i2 == 0 goto label3;

        return 1;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        return 0;
    }

    boolean containsShowWhenLockedWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        android.view.WindowManager$LayoutParams $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mLastContainsShowWhenLockedWindow>;

        return $z1;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i3 = $i0 - 1;

     label2:
        if i3 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $r5 = $r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 524288;

        if $i2 == 0 goto label3;

        return 1;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        return 0;
    }

    android.view.RemoteAnimationTarget createRemoteAnimationTarget(com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord r1;
        int i0, i1, i2;
        android.view.SurfaceControl r2, r22;
        boolean z0, $z1;
        android.graphics.Rect r3, r5, $r7, $r8, $r18, r24;
        android.graphics.Point r4;
        android.app.WindowConfiguration r6;
        com.android.server.wm.Task $r9, $r15, r21;
        com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper $r10, $r12, $r13, $r14, $r16, $r19;
        com.android.server.wm.WindowStateAnimator $r11;
        android.view.RemoteAnimationTarget $r17;
        com.android.server.wm.WindowState r20;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord;

        r20 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        r21 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r22 = null;

        if r21 == null goto label3;

        if r20 != null goto label1;

        goto label3;

     label1:
        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        virtualinvoke r20.<com.android.server.wm.WindowState: void getContentInsets(android.graphics.Rect)>($r7);

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect getLetterboxInsets()>();

        staticinvoke <com.android.server.wm.utils.InsetUtils: void addInsets(android.graphics.Rect,android.graphics.Rect)>($r7, $r8);

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        i0 = $r9.<com.android.server.wm.Task: int mTaskId>;

        i1 = virtualinvoke r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: int getMode()>();

        $r10 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper mAdapter>;

        r2 = $r10.<com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper: android.view.SurfaceControl mCapturedLeash>;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean fillsParent()>();

        $r11 = r20.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r3 = $r11.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect>;

        i2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getPrefixOrderIndex()>();

        $r12 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper mAdapter>;

        r4 = $r12.<com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper: android.graphics.Point mPosition>;

        $r13 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper mAdapter>;

        r5 = $r13.<com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper: android.graphics.Rect mLocalBounds>;

        $r14 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper mAdapter>;

        r24 = $r14.<com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper: android.graphics.Rect mStackBounds>;

        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r6 = virtualinvoke $r15.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $r16 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper mThumbnailAdapter>;

        if $r16 == null goto label2;

        $r19 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper mThumbnailAdapter>;

        r22 = $r19.<com.android.server.wm.RemoteAnimationController$RemoteAnimationAdapterWrapper: android.view.SurfaceControl mCapturedLeash>;

     label2:
        $r17 = new android.view.RemoteAnimationTarget;

        $z1 = z0 ^ 1;

        $r18 = r1.<com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord: android.graphics.Rect mStartBounds>;

        specialinvoke $r17.<android.view.RemoteAnimationTarget: void <init>(int,int,android.view.SurfaceControl,boolean,android.graphics.Rect,android.graphics.Rect,int,android.graphics.Point,android.graphics.Rect,android.graphics.Rect,android.app.WindowConfiguration,boolean,android.view.SurfaceControl,android.graphics.Rect)>(i0, i1, r2, $z1, r3, $r7, i2, r4, r5, r24, r6, 0, r22, $r18);

        return $r17;

     label3:
        return null;
    }

    boolean currentLaunchCanTurnScreenOn()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mCurrentLaunchCanTurnScreenOn>;

        return $z0;
    }

    final void deliverNewIntentLocked(int, android.content.Intent, com.android.server.uri.NeededUriGrants, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.IApplicationThread r1;
        com.android.server.wm.ActivityRecord$Token r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r7;
        com.android.server.uri.UriGrantsManagerInternal $r4;
        com.android.server.uri.UriPermissionOwner $r5;
        com.android.internal.content.ReferrerIntent $r6;
        boolean $z2, $z4, z5, z6, $z7, z8;
        com.android.server.wm.WindowProcessController $r8;
        com.android.server.wm.ActivityStack$ActivityState $r9, $r10, $r12, $r13, $r28, $r29;
        android.app.servertransaction.NewIntentItem $r11;
        android.os.RemoteException $r14;
        java.lang.StringBuilder $r15, $r20;
        java.lang.String $r18, $r23, r26;
        java.lang.NullPointerException $r19;
        int i2;
        android.content.Intent r24;
        com.android.server.uri.NeededUriGrants r25;
        java.util.ArrayList r30;
        com.android.server.wm.ClientLifecycleManager r31;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i2 := @parameter0: int;

        r24 := @parameter1: android.content.Intent;

        r25 := @parameter2: com.android.server.uri.NeededUriGrants;

        r26 := @parameter3: java.lang.String;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.UriGrantsManagerInternal mUgmInternal>;

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner getUriPermissionsLocked()>();

        interfaceinvoke $r4.<com.android.server.uri.UriGrantsManagerInternal: void grantUriPermissionUncheckedFromIntent(com.android.server.uri.NeededUriGrants,com.android.server.uri.UriPermissionOwner)>(r25, $r5);

        $r6 = new com.android.internal.content.ReferrerIntent;

        specialinvoke $r6.<com.android.internal.content.ReferrerIntent: void <init>(android.content.Intent,java.lang.String)>(r24, r26);

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isTopRunningActivity()>();

        if $z2 == 0 goto label01;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isSleeping()>();

        if $z4 == 0 goto label01;

        z5 = 1;

        goto label02;

     label01:
        z5 = 0;

     label02:
        $r28 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r29 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if $r28 == $r29 goto label03;

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r12 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        if $r13 == $r12 goto label03;

        z6 = 1;

        if z5 == 0 goto label12;

     label03:
        z6 = 1;

        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z7 == 0 goto label12;

     label04:
        r30 = new java.util.ArrayList;

        specialinvoke r30.<java.util.ArrayList: void <init>(int)>(1);

        virtualinvoke r30.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r31 = virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        r1 = virtualinvoke $r8.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r9 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if $r10 != $r9 goto label06;

     label05:
        z8 = 1;

        goto label07;

     label06:
        z8 = 0;

     label07:
        $r11 = staticinvoke <android.app.servertransaction.NewIntentItem: android.app.servertransaction.NewIntentItem obtain(java.util.List,boolean)>(r30, z8);

        virtualinvoke r31.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ClientTransactionItem)>(r1, r2, $r11);

     label08:
        z6 = 0;

     label09:
        goto label12;

     label10:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown sending new intent to ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r23, $r19);

        z6 = 1;

        goto label12;

     label11:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown sending new intent to ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r18, $r14);

        z6 = 1;

        goto label09;

     label12:
        if z6 == 0 goto label13;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void addNewIntentLocked(com.android.internal.content.ReferrerIntent)>($r6);

     label13:
        return;

        catch android.os.RemoteException from label04 to label05 with label11;
        catch java.lang.NullPointerException from label04 to label05 with label10;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch java.lang.NullPointerException from label07 to label08 with label10;
    }

    boolean destroyIfPossible(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0, r3;
        java.lang.String r1, $r10;
        com.android.server.wm.ActivityStack r2, $r13;
        boolean z0, $z5, z6;
        com.android.server.wm.ActivityStack$ActivityState $r4;
        com.android.server.wm.ActivityStackSupervisor $r5;
        java.util.ArrayList $r6;
        java.lang.StringBuilder $r7;
        com.android.server.wm.RootWindowContainer $r11, $r12;
        int $i0;
        com.android.server.wm.TaskDisplayArea r14;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.String;

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState FINISHING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r4, "destroyIfPossible");

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6 = $r5.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        r14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r3 = virtualinvoke r14.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r3 != null goto label1;

        $z5 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean isFocusedStackOnDisplay()>();

        if $z5 == 0 goto label1;

        $r13 = virtualinvoke r14.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getOrCreateRootHomeTask()>();

        if $r13 == null goto label1;

        z6 = 1;

        goto label2;

     label1:
        z6 = 0;

     label2:
        if z6 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean addToFinishingAndWaitForIdle()>();

        return 0;

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void makeFinishingLocked()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("finish-imm:");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, $r10);

        if r3 != null goto label4;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        virtualinvoke $r12.<com.android.server.wm.RootWindowContainer: boolean ensureVisibilityAndConfig(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r3, $i0, 0, 1);

     label4:
        if z0 == 0 goto label5;

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label5:
        return z0;
    }

    boolean destroyImmediately(boolean, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1, $r5, $r10, $r25;
        com.android.server.wm.ActivityStack$ActivityState $r2, $r3, $r6, $r11, $r12;
        boolean $z2, $z3, $z4, $z6, $z7, z8, z9, $z10, z11, $z12;
        int $i0, $i1, $i2, $i3;
        com.android.server.wm.Task $r4;
        java.lang.StringBuilder $r7, $r22;
        com.android.server.wm.ActivityTaskManagerService $r13, $r19, $r26;
        java.lang.Runnable $r14;
        com.android.server.wm.ActivityTaskManagerService$H $r15;
        com.android.server.wm.WindowProcessController $r16, $r17, $r18, $r20, $r28;
        java.lang.Exception $r21;
        com.android.server.wm.ClientLifecycleManager $r27;
        android.app.IApplicationThread $r29;
        com.android.server.wm.ActivityRecord$Token $r30;
        android.app.servertransaction.DestroyActivityItem $r31;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z8 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYING>;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r3, $r2);

        if $z2 == 0 goto label01;

        return 0;

     label01:
        $i0 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i2 = $r4.<com.android.server.wm.Task: int mTaskId>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmDestroyActivity(int,int,int,java.lang.String,java.lang.String)>($i0, $i1, $i2, $r5, r1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void cleanUp(boolean,boolean)>(0, 0);

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z3 == 0 goto label09;

        if z8 == 0 goto label02;

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r16.<com.android.server.wm.WindowProcessController: void removeActivity(com.android.server.wm.ActivityRecord)>(r0);

        $r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $z6 = virtualinvoke $r17.<com.android.server.wm.WindowProcessController: boolean hasActivities()>();

        if $z6 != 0 goto label02;

        $r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r18 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r19.<com.android.server.wm.ActivityTaskManagerService: void clearHeavyWeightProcessIfEquals(com.android.server.wm.WindowProcessController)>($r18);

        $r20 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r20.<com.android.server.wm.WindowProcessController: void updateProcessInfo(boolean,boolean,boolean,boolean)>(1, 0, 1, 0);

     label02:
        z9 = 0;

     label03:
        $r26 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r27 = virtualinvoke $r26.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r28 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r29 = virtualinvoke $r28.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r30 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $z10 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        $i3 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        $r31 = staticinvoke <android.app.servertransaction.DestroyActivityItem: android.app.servertransaction.DestroyActivityItem obtain(boolean,int)>($z10, $i3);

        virtualinvoke $r27.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ActivityLifecycleItem)>($r29, $r30, $r31);

     label04:
        z11 = 0;

        goto label06;

     label05:
        $r21 := @caughtexception;

        z11 = 0;

        $z7 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z7 == 0 goto label06;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceptionInScheduleDestroy");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeFromHistory(java.lang.String)>($r25);

        z11 = 1;

        z9 = 1;

     label06:
        r0.<com.android.server.wm.ActivityRecord: boolean nowVisible> = 0;

        $z12 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z12 == 0 goto label07;

        if z9 != 0 goto label07;

        $r12 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r12, "destroyActivityLocked. finishing and not skipping destroy");

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r15 = $r13.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r14 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mDestroyTimeoutRunnable>;

        virtualinvoke $r15.<com.android.server.wm.ActivityTaskManagerService$H: boolean postDelayed(java.lang.Runnable,long)>($r14, 10000L);

        goto label08;

     label07:
        $r11 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r11, "destroyActivityLocked. not finishing or skipping destroy");

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app> = null;

     label08:
        goto label11;

     label09:
        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z4 == 0 goto label10;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hadNoApp");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeFromHistory(java.lang.String)>($r10);

        z11 = 1;

        goto label11;

     label10:
        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r6, "destroyActivityLocked. not finishing and had no app");

        z11 = 0;

     label11:
        r0.<com.android.server.wm.ActivityRecord: int configChangeFlags> = 0;

        return z11;

        catch java.lang.Exception from label03 to label04 with label05;
    }

    void destroySurfaces()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void destroySurfaces(boolean)>(0);

        return;
    }

    void destroyed(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, r9;
        com.android.server.wm.RootWindowContainer $r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r9 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removeDestroyTimeout()>();

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYING>;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r2, $r1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isInStackLocked()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void cleanUp(boolean,boolean)>(1, 0);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeFromHistory(java.lang.String)>(r9);

     label1:
        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reported destroyed for activity that is not destroying: r=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    void detachChildren()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        com.android.server.wm.WindowStateAnimator $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $r5 = $r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: void detachChildren()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.ActivityRecord r0, $r32, $r33;
        java.io.PrintWriter r1;
        java.lang.String r2, $r4, $r5, $r6, $r7, $r10, $r12, $r14, $r16, $r17, $r18, $r22, $r26, $r34, $r37, $r38, $r53, $r63, $r64, $r70, $r72, $r79, $r87, $r93, $r99, $r105, $r110, $r116, $r121, $r132, $r138, $r144, $r147, $r149, $r152, $r154, $r156, $r158, $r160, $r167, $r169, $r175, $r181, $r187, $r190, $r191, $r192, $r193, $r196, $r197, $r200, $r209, r213, r227, $r235;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66;
        long l0, $l16, l38, l41;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, $i39, $i40;
        com.android.server.wm.WindowProcessController $r8;
        android.content.Intent $r9, r220;
        com.android.server.wm.Task $r11;
        android.content.ComponentName $r13, $r39, $r133;
        android.content.res.CompatibilityInfo $r15;
        java.lang.StringBuilder $r19, $r23, $r40, $r56, $r66, $r73, $r84, $r88, $r94, $r100, $r106, $r112, $r117, $r126, $r129, $r141, $r161, $r170, $r176, $r182, $r233;
        android.content.res.Configuration $r27, $r28, $r29, $r30, $r31, $r179, $r185;
        byte $b8, $b15, $b17, $b18, $b21, $b22;
        android.os.Bundle $r35;
        com.android.server.wm.ActivityStack$ActivityState $r36;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Rect $r61, $r122, $r173;
        android.content.pm.ActivityInfo $r65, $r69, $r80, $r81, $r82, $r83, $r91, $r97, $r103, $r189, r198;
        com.android.server.wm.ActivityServiceConnectionsHolder $r111, $r240;
        java.util.ArrayDeque $r123, $r124, $r236;
        com.android.server.policy.WindowManagerPolicy$StartingSurface $r125, $r232;
        android.app.ActivityOptions $r134, $r221;
        java.util.ArrayList $r135, $r136, $r146, $r214, r219;
        java.lang.Object $r137, $r140, $r145;
        java.util.HashSet $r139, r215;
        android.app.ActivityManager$TaskDescription $r148, $r150, $r151, $r153, $r155, $r157, $r159, $r162, $r166, $r168, r207, $r208, $r210;
        android.graphics.Bitmap $r163, $r211;
        android.content.pm.ApplicationInfo $r188, r199;
        java.lang.String[] $r194, $r195;
        android.util.MergedConfiguration r202;
        java.util.Iterator r216;
        java.lang.ref.WeakReference r217;
        com.android.server.am.PendingIntentRecord r218;
        com.android.server.am.AppTimeTracker r222;
        com.android.server.uri.UriPermissionOwner r223;
        com.android.server.wm.StartingData $r228, $r229;
        com.android.server.wm.WindowState $r230, $r231;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("packageName=");

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" processName=");

        $r5 = r0.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("launchedFromUid=");

        $i1 = r0.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" launchedFromPackage=");

        $r6 = r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" launchedFromFeature=");

        $r7 = r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" userId=");

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("app=");

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        $r9 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r10 = virtualinvoke $r9.<android.content.Intent: java.lang.String toInsecureString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("rootOfTask=");

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRootOfTask()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" task=");

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("taskAffinity=");

        $r12 = r0.<com.android.server.wm.ActivityRecord: java.lang.String taskAffinity>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mActivityComponent=");

        $r13 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r14 = virtualinvoke $r13.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        r198 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        if r198 == null goto label02;

        $r188 = r198.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r188 == null goto label02;

        $r189 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        r199 = $r189.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("baseDir=");

        $r190 = r199.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r190);

        $r192 = r199.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        $r191 = r199.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        $z53 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r192, $r191);

        if $z53 != 0 goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("resDir=");

        $r197 = r199.<android.content.pm.ApplicationInfo: java.lang.String publicSourceDir>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r197);

     label01:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("dataDir=");

        $r193 = r199.<android.content.pm.ApplicationInfo: java.lang.String dataDir>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r193);

        $r194 = r199.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        if $r194 == null goto label02;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("splitDir=");

        $r195 = r199.<android.content.pm.ApplicationInfo: java.lang.String[] splitSourceDirs>;

        $r196 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r195);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r196);

     label02:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("stateNotNeeded=");

        $z54 = r0.<com.android.server.wm.ActivityRecord: boolean stateNotNeeded>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z54);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" componentSpecified=");

        $z55 = r0.<com.android.server.wm.ActivityRecord: boolean componentSpecified>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z55);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mActivityType=");

        $i36 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        $r200 = staticinvoke <android.app.WindowConfiguration: java.lang.String activityTypeToString(int)>($i36);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r200);

        $z56 = r0.<com.android.server.wm.ActivityRecord: boolean rootVoiceInteraction>;

        if $z56 == 0 goto label03;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("rootVoiceInteraction=");

        $z52 = r0.<com.android.server.wm.ActivityRecord: boolean rootVoiceInteraction>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z52);

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("compat=");

        $r15 = r0.<com.android.server.wm.ActivityRecord: android.content.res.CompatibilityInfo compat>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" labelRes=0x");

        $i3 = r0.<com.android.server.wm.ActivityRecord: int labelRes>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" icon=0x");

        $i4 = r0.<com.android.server.wm.ActivityRecord: int icon>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" theme=0x");

        $i5 = r0.<com.android.server.wm.ActivityRecord: int theme>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastReportedConfigurations:");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        r202 = r0.<com.android.server.wm.ActivityRecord: android.util.MergedConfiguration mLastReportedConfiguration>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r202.<android.util.MergedConfiguration: void dump(java.io.PrintWriter,java.lang.String)>(r1, $r26);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("CurrentConfiguration=");

        $r27 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r27);

        $r28 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $r29 = <android.content.res.Configuration: android.content.res.Configuration EMPTY>;

        $z2 = virtualinvoke $r28.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r29);

        if $z2 != 0 goto label04;

        $r182 = new java.lang.StringBuilder;

        specialinvoke $r182.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RequestedOverrideConfiguration=");

        $r185 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r185);

        $r187 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r187);

     label04:
        $r30 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r31 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $z3 = virtualinvoke $r30.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r31);

        if $z3 != 0 goto label05;

        $r176 = new java.lang.StringBuilder;

        specialinvoke $r176.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ResolvedOverrideConfiguration=");

        $r179 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r179);

        $r181 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r181);

     label05:
        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean matchParentBounds()>();

        if $z4 != 0 goto label06;

        $r170 = new java.lang.StringBuilder;

        specialinvoke $r170.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bounds=");

        $r173 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect getBounds()>();

        virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r173);

        $r175 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r175);

     label06:
        $r32 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        if $r32 != null goto label07;

        $r169 = r0.<com.android.server.wm.ActivityRecord: java.lang.String resultWho>;

        if $r169 == null goto label08;

     label07:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("resultTo=");

        $r33 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r33);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" resultWho=");

        $r34 = r0.<com.android.server.wm.ActivityRecord: java.lang.String resultWho>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r34);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" resultCode=");

        $i6 = r0.<com.android.server.wm.ActivityRecord: int requestCode>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i6);

     label08:
        r207 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        if r207 == null goto label12;

        $r147 = virtualinvoke r207.<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()>();

        if $r147 != null goto label09;

        $r166 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r167 = virtualinvoke $r166.<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>();

        if $r167 != null goto label09;

        $r168 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $i35 = virtualinvoke $r168.<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>();

        if $i35 == 0 goto label12;

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("taskDescription:");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" label=\"");

        $r208 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r209 = virtualinvoke $r208.<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r209);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\"");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" icon=");

        $r210 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r211 = virtualinvoke $r210.<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getInMemoryIcon()>();

        if $r211 == null goto label10;

        $r161 = new java.lang.StringBuilder;

        specialinvoke $r161.<java.lang.StringBuilder: void <init>()>();

        $r162 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r163 = virtualinvoke $r162.<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getInMemoryIcon()>();

        $i34 = virtualinvoke $r163.<android.graphics.Bitmap: int getByteCount()>();

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        r213 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        r213 = "null";

     label11:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r213);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" iconResource=");

        $r148 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r149 = virtualinvoke $r148.<android.app.ActivityManager$TaskDescription: java.lang.String getIconResourcePackage()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r149);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("/");

        $r150 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $i29 = virtualinvoke $r150.<android.app.ActivityManager$TaskDescription: int getIconResource()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i29);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" iconFilename=");

        $r151 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r152 = virtualinvoke $r151.<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r152);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" primaryColor=");

        $r153 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $i30 = virtualinvoke $r153.<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>();

        $r154 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i30);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r154);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  backgroundColor=");

        $r155 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $i31 = virtualinvoke $r155.<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>();

        $r156 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i31);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r156);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" statusBarColor=");

        $r157 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $i32 = virtualinvoke $r157.<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>();

        $r158 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r158);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" navigationBarColor=");

        $r159 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $i33 = virtualinvoke $r159.<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>();

        $r160 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i33);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r160);

     label12:
        $r214 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        if $r214 == null goto label13;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("results=");

        $r146 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r146);

     label13:
        r215 = r0.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults>;

        if r215 == null goto label19;

        $i28 = virtualinvoke r215.<java.util.HashSet: int size()>();

        if $i28 <= 0 goto label19;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Pending Results:");

        $r139 = r0.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults>;

        r216 = virtualinvoke $r139.<java.util.HashSet: java.util.Iterator iterator()>();

     label14:
        $z51 = interfaceinvoke r216.<java.util.Iterator: boolean hasNext()>();

        if $z51 == 0 goto label19;

        $r140 = interfaceinvoke r216.<java.util.Iterator: java.lang.Object next()>();

        r217 = (java.lang.ref.WeakReference) $r140;

        if r217 == null goto label15;

        $r145 = virtualinvoke r217.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r218 = (com.android.server.am.PendingIntentRecord) $r145;

        goto label16;

     label15:
        r218 = null;

     label16:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  - ");

        if r218 != null goto label17;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("null");

        goto label18;

     label17:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r218);

        $r141 = new java.lang.StringBuilder;

        specialinvoke $r141.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r144 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r218.<com.android.server.am.PendingIntentRecord: void dump(java.io.PrintWriter,java.lang.String)>(r1, $r144);

     label18:
        goto label14;

     label19:
        r219 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        if r219 == null goto label23;

        $i26 = virtualinvoke r219.<java.util.ArrayList: int size()>();

        if $i26 <= 0 goto label23;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Pending New Intents:");

        i37 = 0;

     label20:
        $r135 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        $i27 = virtualinvoke $r135.<java.util.ArrayList: int size()>();

        if i37 >= $i27 goto label23;

        $r136 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        $r137 = virtualinvoke $r136.<java.util.ArrayList: java.lang.Object get(int)>(i37);

        r220 = (android.content.Intent) $r137;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  - ");

        if r220 != null goto label21;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("null");

        goto label22;

     label21:
        $r138 = virtualinvoke r220.<android.content.Intent: java.lang.String toShortString(boolean,boolean,boolean,boolean)>(0, 1, 0, 0);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r138);

     label22:
        i37 = i37 + 1;

        goto label20;

     label23:
        $r221 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if $r221 == null goto label24;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("pendingOptions=");

        $r134 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r134);

     label24:
        r222 = r0.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

        if r222 == null goto label25;

        virtualinvoke r222.<com.android.server.am.AppTimeTracker: void dumpWithHeader(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, 0);

     label25:
        r223 = r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner uriPermissions>;

        if r223 == null goto label26;

        virtualinvoke r223.<com.android.server.uri.UriPermissionOwner: void dump(java.io.PrintWriter,java.lang.String)>(r1, r2);

     label26:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("launchFailed=");

        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean launchFailed>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" launchCount=");

        $i7 = r0.<com.android.server.wm.ActivityRecord: int launchCount>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" lastLaunchTime=");

        l38 = r0.<com.android.server.wm.ActivityRecord: long lastLaunchTime>;

        $b8 = l38 cmp 0L;

        if $b8 != 0 goto label27;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("0");

        goto label28;

     label27:
        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>(l38, l0, r1);

     label28:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mHaveState=");

        $z6 = r0.<com.android.server.wm.ActivityRecord: boolean mHaveState>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mIcicle=");

        $r35 = r0.<com.android.server.wm.ActivityRecord: android.os.Bundle mIcicle>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r35);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("state=");

        $r36 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r36);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" stopped=");

        $z7 = r0.<com.android.server.wm.ActivityRecord: boolean stopped>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" delayedResume=");

        $z8 = r0.<com.android.server.wm.ActivityRecord: boolean delayedResume>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" finishing=");

        $z9 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("keysPaused=");

        $z10 = r0.<com.android.server.wm.ActivityRecord: boolean keysPaused>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" inHistory=");

        $z11 = r0.<com.android.server.wm.ActivityRecord: boolean inHistory>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" setToSleep=");

        $z12 = r0.<com.android.server.wm.ActivityRecord: boolean mSetToSleep>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" idle=");

        $z13 = r0.<com.android.server.wm.ActivityRecord: boolean idle>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mStartingWindowState=");

        $i9 = r0.<com.android.server.wm.ActivityRecord: int mStartingWindowState>;

        $r37 = staticinvoke <com.android.server.wm.ActivityRecord: java.lang.String startingWindowStateToString(int)>($i9);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("occludesParent=");

        $z14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z14);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" noDisplay=");

        $z15 = r0.<com.android.server.wm.ActivityRecord: boolean noDisplay>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" immersive=");

        $z16 = r0.<com.android.server.wm.ActivityRecord: boolean immersive>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" launchMode=");

        $i10 = r0.<com.android.server.wm.ActivityRecord: int launchMode>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("frozenBeforeDestroy=");

        $z17 = r0.<com.android.server.wm.ActivityRecord: boolean frozenBeforeDestroy>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" forceNewConfig=");

        $z18 = r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z18);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mActivityType=");

        $i11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        $r38 = staticinvoke <android.app.WindowConfiguration: java.lang.String activityTypeToString(int)>($i11);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        $r39 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName requestedVrComponent>;

        if $r39 == null goto label29;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("requestedVrComponent=");

        $r133 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName requestedVrComponent>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r133);

     label29:
        specialinvoke r0.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        $z19 = r0.<com.android.server.wm.ActivityRecord: boolean mVoiceInteraction>;

        if $z19 == 0 goto label30;

        $r129 = new java.lang.StringBuilder;

        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mVoiceInteraction=true");

        $r132 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r132);

     label30:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mOccludesParent=");

        $z20 = r0.<com.android.server.wm.ActivityRecord: boolean mOccludesParent>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mOrientation=");

        $i12 = r0.<com.android.server.wm.ActivityRecord: int mOrientation>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i12);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mVisibleRequested=");

        $z21 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z21);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mVisible=");

        $z22 = r0.<com.android.server.wm.ActivityRecord: boolean mVisible>;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z22);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mClientVisible=");

        $z23 = r0.<com.android.server.wm.ActivityRecord: boolean mClientVisible>;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z23);

        $z24 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        if $z24 == 0 goto label31;

        $r126 = new java.lang.StringBuilder;

        specialinvoke $r126.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDeferHidingClient=");

        $z50 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z50);

        r227 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label32;

     label31:
        r227 = "";

     label32:
        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r227);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reportedDrawn=");

        $z25 = r0.<com.android.server.wm.ActivityRecord: boolean reportedDrawn>;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z25);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reportedVisible=");

        $z26 = r0.<com.android.server.wm.ActivityRecord: boolean reportedVisible>;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z26);

        $r53 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r53);

        $z27 = r0.<com.android.server.wm.ActivityRecord: boolean paused>;

        if $z27 == 0 goto label33;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("paused=");

        $z49 = r0.<com.android.server.wm.ActivityRecord: boolean paused>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z49);

     label33:
        $z28 = r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped>;

        if $z28 == 0 goto label34;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mAppStopped=");

        $z48 = r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z48);

     label34:
        $i13 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        if $i13 != 0 goto label35;

        $i25 = r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows>;

        if $i25 != 0 goto label35;

        $z46 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z46 != 0 goto label35;

        $z47 = r0.<com.android.server.wm.ActivityRecord: boolean mLastAllDrawn>;

        if $z47 == 0 goto label36;

     label35:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mNumInterestingWindows=");

        $i39 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i39);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mNumDrawnWindows=");

        $i40 = r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i40);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" allDrawn=");

        $z57 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z57);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" lastAllDrawn=");

        $z58 = r0.<com.android.server.wm.ActivityRecord: boolean mLastAllDrawn>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z58);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(")");

     label36:
        $r228 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r228 != null goto label37;

        $z44 = r0.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn>;

        if $z44 != 0 goto label37;

        $z45 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z45 == 0 goto label38;

     label37:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("startingData=");

        $r229 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r229);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" firstWindowDrawn=");

        $z59 = r0.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z59);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mIsExiting=");

        $z60 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z60);

     label38:
        $r230 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r230 != null goto label39;

        $r125 = r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        if $r125 != null goto label39;

        $z41 = r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed>;

        if $z41 != 0 goto label39;

        $z42 = r0.<com.android.server.wm.ActivityRecord: boolean startingMoved>;

        if $z42 != 0 goto label39;

        $z43 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow>;

        if $z43 == 0 goto label40;

     label39:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("startingWindow=");

        $r231 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r231);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" startingSurface=");

        $r232 = r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r232);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" startingDisplayed=");

        $z61 = r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z61);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" startingMoved=");

        $z62 = r0.<com.android.server.wm.ActivityRecord: boolean startingMoved>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z62);

        $r233 = new java.lang.StringBuilder;

        specialinvoke $r233.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mHiddenSetFromTransferredStartingWindow=");

        $z63 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow>;

        virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z63);

        $r235 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r235);

     label40:
        $r236 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        $z64 = virtualinvoke $r236.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z64 != 0 goto label41;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mFrozenBounds=");

        $r123 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r123);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mFrozenMergedConfig=");

        $r124 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r124);

     label41:
        $i14 = r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount>;

        if $i14 == 0 goto label42;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPendingRelaunchCount=");

        $i24 = r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i24);

     label42:
        $f0 = r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale>;

        $b15 = $f0 cmpl 1.0F;

        if $b15 != 0 goto label43;

        $r122 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        if $r122 == null goto label44;

     label43:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSizeCompatScale=");

        $f1 = r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale>;

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSizeCompatBounds=");

        $r61 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r61);

        $r63 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r63);

     label44:
        $z65 = r0.<com.android.server.wm.ActivityRecord: boolean mRemovingFromDisplay>;

        if $z65 == 0 goto label45;

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRemovingFromDisplay=");

        $z40 = r0.<com.android.server.wm.ActivityRecord: boolean mRemovingFromDisplay>;

        virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z40);

        $r121 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r121);

     label45:
        $l16 = r0.<com.android.server.wm.ActivityRecord: long lastVisibleTime>;

        $b17 = $l16 cmp 0L;

        if $b17 != 0 goto label46;

        $z39 = r0.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z39 == 0 goto label49;

     label46:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("nowVisible=");

        $z29 = r0.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z29);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" lastVisibleTime=");

        l41 = r0.<com.android.server.wm.ActivityRecord: long lastVisibleTime>;

        $b18 = l41 cmp 0L;

        if $b18 != 0 goto label47;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("0");

        goto label48;

     label47:
        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>(l41, l0, r1);

     label48:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label49:
        $z66 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        if $z66 == 0 goto label50;

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDeferHidingClient=");

        $z38 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z38);

        $r116 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r116);

     label50:
        $z30 = r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused>;

        if $z30 != 0 goto label51;

        $i23 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        if $i23 == 0 goto label52;

     label51:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("deferRelaunchUntilPaused=");

        $z31 = r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z31);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" configChangeFlags=");

        $i19 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        $r64 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i19);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r64);

     label52:
        $r240 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityServiceConnectionsHolder mServiceConnectionsHolder>;

        if $r240 == null goto label53;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("connections=");

        $r111 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityServiceConnectionsHolder mServiceConnectionsHolder>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r111);

     label53:
        $r65 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        if $r65 == null goto label57;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resizeMode=");

        $r69 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i20 = $r69.<android.content.pm.ActivityInfo: int resizeMode>;

        $r70 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String resizeModeToString(int)>($i20);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastReportedMultiWindowMode=");

        $z32 = r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedMultiWindowMode>;

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z32);

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLastReportedPictureInPictureMode=");

        $z33 = r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedPictureInPictureMode>;

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z33);

        $r79 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r79);

        $r80 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z34 = virtualinvoke $r80.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        if $z34 == 0 goto label54;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportsPictureInPicture=");

        $r103 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z36 = virtualinvoke $r103.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z36);

        $r105 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r105);

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportsEnterPipOnTaskSwitch: ");

        $z37 = r0.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch>;

        virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z37);

        $r110 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r110);

     label54:
        $r81 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f2 = $r81.<android.content.pm.ActivityInfo: float maxAspectRatio>;

        $b21 = $f2 cmpl 0.0F;

        if $b21 == 0 goto label55;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxAspectRatio=");

        $r97 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f5 = $r97.<android.content.pm.ActivityInfo: float maxAspectRatio>;

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        $r99 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r99);

     label55:
        $r82 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f3 = $r82.<android.content.pm.ActivityInfo: float minAspectRatio>;

        $b22 = $f3 cmpl 0.0F;

        if $b22 == 0 goto label56;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minAspectRatio=");

        $r91 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f4 = $r91.<android.content.pm.ActivityInfo: float minAspectRatio>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r93 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r93);

     label56:
        $r83 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z35 = $r83.<android.content.pm.ActivityInfo: boolean supportsSizeChanges>;

        if $z35 == 0 goto label57;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("supportsSizeChanges=true");

        $r87 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r87);

     label57:
        return;
    }

    void dumpDebug(android.util.proto.ProtoOutputStream, int)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        com.android.server.wm.WindowContainerThumbnail $r2, $r9;
        java.util.ArrayDeque $r3;
        com.android.server.wm.ActivityStack$ActivityState $r4;
        java.lang.String $r5;
        com.android.server.wm.WindowProcessController $r6;
        java.lang.Object $r7;
        android.graphics.Rect $r8;
        com.android.server.wm.WindowState r10;
        java.util.Iterator r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void writeNameToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1138166333441L);

        specialinvoke r0.<com.android.server.wm.WindowToken: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268034L, i0);

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mLastSurfaceShowing>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, $z0);

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isWaitingForTransitionStart()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z1);

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(2);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z2);

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        if $r2 == null goto label1;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        virtualinvoke $r9.<com.android.server.wm.WindowContainerThumbnail: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268038L);

     label1:
        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean fillsParent()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, $z3);

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366152L, $z4);

        $z5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        $z6 = $z5 ^ 1;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366174L, $z6);

        $z7 = r0.<com.android.server.wm.ActivityRecord: boolean mVisible>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366168L, $z7);

        $z8 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366153L, $z8);

        $z9 = r0.<com.android.server.wm.ActivityRecord: boolean mClientVisible>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366154L, $z9);

        $z10 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366155L, $z10);

        $z11 = r0.<com.android.server.wm.ActivityRecord: boolean reportedDrawn>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366156L, $z11);

        $z12 = r0.<com.android.server.wm.ActivityRecord: boolean reportedVisible>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366157L, $z12);

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464270L, $i1);

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464271L, $i2);

        $z13 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366160L, $z13);

        $z14 = r0.<com.android.server.wm.ActivityRecord: boolean mLastAllDrawn>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366161L, $z14);

        r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if r10 == null goto label2;

        virtualinvoke r10.<com.android.server.wm.WindowState: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268051L);

     label2:
        $z15 = r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366164L, $z15);

        $z16 = r0.<com.android.server.wm.ActivityRecord: boolean startingMoved>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366345L, $z16);

        $z17 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366166L, $z17);

        $r3 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        r11 = virtualinvoke $r3.<java.util.ArrayDeque: java.util.Iterator iterator()>();

     label3:
        $z20 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label4;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.graphics.Rect) $r7;

        virtualinvoke $r8.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 2246267895831L);

        goto label3;

     label4:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268058L);

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityStack$ActivityState: java.lang.String toString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333467L, $r5);

        $z18 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRootOfTask()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366172L, $z18);

        $z19 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z19 == 0 goto label5;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i3 = virtualinvoke $r6.<com.android.server.wm.WindowProcessController: int getPid()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464285L, $i3);

     label5:
        return;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long, int)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.proto.ProtoOutputStream r1;
        int i0;
        boolean $z0;
        long l1, l2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        i0 := @parameter2: int;

        if i0 != 2 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void dumpDebug(android.util.proto.ProtoOutputStream,int)>(r1, i0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;
    }

    boolean ensureActivityConfiguration(int, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean,boolean)>(i0, z0, 0);

        return $z1;
    }

    boolean ensureActivityConfiguration(int, boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, z15, z16, z17;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.content.res.Configuration r1, $r4, $r5, $r6, $r7, $r8, $r17, $r18;
        com.android.server.wm.ActivityStack $r2;
        android.util.MergedConfiguration $r3;
        android.content.pm.ActivityInfo $r9;
        com.android.server.wm.ActivityStack$ActivityState $r10, $r11, $r13, $r14, $r15, $r16, $r19, $r20;
        com.android.server.wm.Task $r12;
        byte b8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i7 := @parameter0: int;

        z15 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $z1 = $r2.<com.android.server.wm.ActivityStack: boolean mConfigWillChange>;

        if $z1 == 0 goto label01;

        return 1;

     label01:
        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 == 0 goto label02;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreenLocked(boolean)>(0);

        return 1;

     label02:
        if z0 != 0 goto label04;

        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r13 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        if $r14 == $r13 goto label03;

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r15 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        if $r16 == $r15 goto label03;

        $z14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldBeVisible()>();

        if $z14 != 0 goto label04;

     label03:
        return 1;

     label04:
        i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mLastReportedDisplayId>;

        if $i2 == i0 goto label05;

        z16 = 1;

        goto label06;

     label05:
        z16 = 0;

     label06:
        if z16 == 0 goto label07;

        r0.<com.android.server.wm.ActivityRecord: int mLastReportedDisplayId> = i0;

     label07:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void updateSizeCompatMode()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.util.MergedConfiguration mLastReportedConfiguration>;

        $r5 = virtualinvoke $r3.<android.util.MergedConfiguration: android.content.res.Configuration getMergedConfiguration()>();

        virtualinvoke $r4.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r5);

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $r7 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

        $z3 = virtualinvoke $r6.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r7);

        if $z3 == 0 goto label08;

        $z13 = r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig>;

        if $z13 != 0 goto label08;

        if z16 != 0 goto label08;

        return 1;

     label08:
        $r17 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

        i1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: int getConfigurationChanges(android.content.res.Configuration)>($r17);

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getMergedOverrideConfiguration()>();

        $r18 = specialinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getProcessGlobalConfiguration()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void setLastReportedConfiguration(android.content.res.Configuration,android.content.res.Configuration)>($r18, r1);

        $r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r20 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState INITIALIZING>;

        if $r19 != $r20 goto label09;

        return 1;

     label09:
        if i1 != 0 goto label12;

        $z12 = r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig>;

        if $z12 != 0 goto label12;

        if z16 == 0 goto label10;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleActivityMovedToDisplay(int,android.content.res.Configuration)>(i0, r1);

        goto label11;

     label10:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleConfigurationChanged(android.content.res.Configuration)>(r1);

     label11:
        return 1;

     label12:
        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z4 != 0 goto label13;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreenLocked(boolean)>(0);

        r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig> = 0;

        return 1;

     label13:
        $r8 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

        $z5 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldRelaunchLocked(int,android.content.res.Configuration)>(i1, $r8);

        if $z5 != 0 goto label17;

        $z11 = r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig>;

        if $z11 == 0 goto label14;

        goto label17;

     label14:
        if z16 == 0 goto label15;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleActivityMovedToDisplay(int,android.content.res.Configuration)>(i0, r1);

        goto label16;

     label15:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleConfigurationChanged(android.content.res.Configuration)>(r1);

     label16:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreenLocked(boolean)>(0);

        return 1;

     label17:
        $i3 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        $i4 = $i3 | i1;

        r0.<com.android.server.wm.ActivityRecord: int configChangeFlags> = $i4;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreenLocked(int)>(i7);

        r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig> = 0;

        $z6 = staticinvoke <com.android.server.wm.ActivityRecord: boolean isResizeOnlyChange(int)>(i1);

        z17 = z15 & $z6;

        $r9 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i5 = virtualinvoke $r9.<android.content.pm.ActivityInfo: int getRealConfigChanged()>();

        $i6 = $i5 & i1;

        $z7 = staticinvoke <com.android.server.wm.ActivityRecord: boolean hasResizeChange(int)>($i6);

        if $z7 == 0 goto label20;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $z10 = virtualinvoke $r12.<com.android.server.wm.Task: boolean isDragResizing()>();

        if $z10 == 0 goto label18;

        b8 = 2;

        goto label19;

     label18:
        b8 = 1;

     label19:
        r0.<com.android.server.wm.ActivityRecord: int mRelaunchReason> = b8;

        goto label21;

     label20:
        r0.<com.android.server.wm.ActivityRecord: int mRelaunchReason> = 0;

     label21:
        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z8 != 0 goto label22;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, "config");

        goto label24;

     label22:
        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r10 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        if $r11 != $r10 goto label23;

        r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused> = 1;

        r0.<com.android.server.wm.ActivityRecord: boolean preserveWindowOnDeferredRelaunch> = z17;

        return 1;

     label23:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void relaunchActivityLocked(boolean)>(z17);

     label24:
        return 0;
    }

    boolean fillsParent()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean occludesParent(boolean)>(1);

        return $z0;
    }

    com.android.server.wm.WindowState findMainWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow(boolean)>(1);

        return $r1;
    }

    com.android.server.wm.WindowState findMainWindow(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        com.android.server.wm.WindowState r1, r6, r7;
        int i0, $i1, i2;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;
        android.view.WindowManager$LayoutParams $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r6 = null;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i1 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label5;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r1 = (com.android.server.wm.WindowState) $r4;

        $r5 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if i0 == 1 goto label2;

        r7 = r6;

        if z0 == 0 goto label3;

        r7 = r6;

        if i0 != 3 goto label3;

     label2:
        $z1 = r1.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z1 == 0 goto label4;

        r7 = r1;

     label3:
        i2 = i2 + -1;

        r6 = r7;

        goto label1;

     label4:
        return r1;

     label5:
        return r6;
    }

    int finishIfPossible(int, android.content.Intent, com.android.server.uri.NeededUriGrants, java.lang.String, boolean)
    {
        com.android.server.wm.ActivityRecord r0, $r8, $r19, $r34, $r40, r57, $r58;
        com.android.server.uri.NeededUriGrants r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, z11, z12, z13, z14, z15, $z16;
        com.android.server.wm.ActivityStack r2, $r33;
        com.android.server.wm.Task r3;
        int i1, i2, $i3, $i4, i7, i8;
        java.lang.String r4, $r44, $r48, r53;
        com.android.server.wm.ActivityStack$ActivityState $r5, $r6, $r7, $r13;
        com.android.server.wm.ActivityTaskManagerService $r9, $r14, $r16, $r20, $r24, $r27, $r30, $r50, $r56, $r61;
        com.android.server.wm.'-$$Lambda$ActivityRecord$jAKnTXYErEwplxJ5lQgj44-M9_c' $r10;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r11;
        java.lang.Integer $r12;
        com.android.server.wm.DisplayContent $r15, $r22;
        com.android.server.wm.WindowManagerService $r17, $r25, $r28;
        com.android.server.wm.TaskSnapshotController $r18, $r26, $r29;
        com.android.server.wm.LockTaskController $r21;
        com.android.server.wm.Task[] $r23;
        com.android.server.wm.TaskChangeNotificationController $r31;
        android.app.ActivityManager$RunningTaskInfo $r32;
        android.content.Intent $r36, $r37, r52;
        com.android.server.wm.RootWindowContainer $r39;
        java.lang.Throwable $r49, $r51, r62;
        byte b9, b10;
        android.util.ArraySet r59;
        com.android.internal.util.function.pooled.PooledConsumer r60;
        java.lang.StringBuilder r63, r64;
        java.util.function.BiConsumer r65;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i7 := @parameter0: int;

        r52 := @parameter1: android.content.Intent;

        r1 := @parameter2: com.android.server.uri.NeededUriGrants;

        r53 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z1 == 0 goto label01;

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate finish request for r=");

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r48 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r48);

        return 0;

     label01:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isInStackLocked()>();

        if $z2 != 0 goto label02;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finish request when not in stack for r=");

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r44 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r44);

        return 0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        z11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r5);

        if z11 != 0 goto label03;

        $r40 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r40 != null goto label04;

     label03:
        $z3 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean isFocusedStackOnDisplay()>();

        if $z3 == 0 goto label04;

        z12 = 1;

        goto label05;

     label04:
        z12 = 0;

     label05:
        if z12 == 0 goto label06;

        $r39 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z10 = virtualinvoke $r39.<com.android.server.wm.RootWindowContainer: boolean isTopDisplayFocusedStack(com.android.server.wm.ActivityStack)>(r2);

        if $z10 == 0 goto label06;

        z13 = 1;

        goto label07;

     label06:
        z13 = 0;

     label07:
        $r56 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r56.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label08:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void makeFinishingLocked()>();

        r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        i8 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        i2 = r3.<com.android.server.wm.Task: int mTaskId>;

        r4 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

     label09:
        staticinvoke <com.android.server.wm.EventLogTags: void writeWmFinishActivity(int,int,int,java.lang.String,java.lang.String)>(i8, i1, i2, r4, r53);

        r57 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivityAbove(com.android.server.wm.ActivityRecord)>(r0);

     label10:
        if r57 == null goto label12;

     label11:
        $r36 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i3 = virtualinvoke $r36.<android.content.Intent: int getFlags()>();

        $i4 = $i3 & 524288;

        if $i4 == 0 goto label12;

        $r37 = r57.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        virtualinvoke $r37.<android.content.Intent: android.content.Intent addFlags(int)>(524288);

     label12:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void pauseKeyDispatchingLocked()>();

     label13:
        if z12 == 0 goto label15;

     label14:
        $r33 = (com.android.server.wm.ActivityStack) r3;

        $r34 = virtualinvoke $r33.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(1);

        if $r34 != null goto label15;

        virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityStack adjustFocusToNextFocusableTask(java.lang.String,boolean,boolean)>("finish-top", 0, z13);

     label15:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void finishActivityResults(int,android.content.Intent,com.android.server.uri.NeededUriGrants)>(i7, r52, r1);

        $r58 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivityBelow(com.android.server.wm.ActivityRecord)>(r0);

        if $r58 != null goto label17;

        $z9 = virtualinvoke r3.<com.android.server.wm.Task: boolean isClearingToReuseTask()>();

        if $z9 != 0 goto label17;

     label16:
        z14 = 1;

        goto label18;

     label17:
        z14 = 0;

     label18:
        if z14 == 0 goto label19;

        b9 = 9;

        goto label20;

     label19:
        b9 = 7;

     label20:
        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r6);

        if $z4 == 0 goto label30;

     label21:
        if z14 == 0 goto label23;

     label22:
        $r30 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r31 = virtualinvoke $r30.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r32 = virtualinvoke r3.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        virtualinvoke $r31.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskRemovalStarted(android.app.ActivityManager$RunningTaskInfo)>($r32);

     label23:
        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r15.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(b9, 0);

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r17 = $r16.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r18 = $r17.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        if $r18 == null goto label24;

        $r23 = newarray (com.android.server.wm.Task)[1];

        $r23[0] = r3;

        r59 = staticinvoke <com.google.android.collect.Sets: android.util.ArraySet newArraySet(java.lang.Object[])>($r23);

        $r24 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r25 = $r24.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r26 = $r25.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r26.<com.android.server.wm.TaskSnapshotController: void snapshotTasks(android.util.ArraySet)>(r59);

        $r27 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r28 = $r27.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r29 = $r28.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r29.<com.android.server.wm.TaskSnapshotController: void addSkipClosingAppSnapshotTasks(android.util.ArraySet)>(r59);

     label24:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(0);

        $r19 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r19 != null goto label25;

        virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean startPausingLocked(boolean,boolean,com.android.server.wm.ActivityRecord)>(0, 0, null);

     label25:
        if z14 == 0 goto label39;

     label26:
        $r20 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r21.<com.android.server.wm.LockTaskController: void clearLockedTask(com.android.server.wm.Task)>(r3);

     label27:
        if z12 == 0 goto label39;

     label28:
        r0.<com.android.server.wm.ActivityRecord: boolean mNeedsZBoost> = 1;

        $r22 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r22.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(0);

     label29:
        goto label39;

     label30:
        $r7 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $z5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r7);

        if $z5 != 0 goto label39;

        $z6 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z6 == 0 goto label31;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void prepareActivityHideTransitionAnimation(int)>(b9);

     label31:
        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord completeFinishing(java.lang.String)>("finishIfPossible");

        if $r8 != null goto label33;

     label32:
        z15 = 1;

        goto label34;

     label33:
        z15 = 0;

     label34:
        if z0 == 0 goto label36;

     label35:
        $r13 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r13);

        if $z7 == 0 goto label36;

        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: void updateOomAdj()>();

     label36:
        $z16 = virtualinvoke r3.<com.android.server.wm.Task: boolean onlyHasTaskOverlayActivities(boolean)>(0);

        if $z16 == 0 goto label37;

        $r10 = <com.android.server.wm._$$Lambda$ActivityRecord$jAKnTXYErEwplxJ5lQgj44_M9_c: com.android.server.wm.'-$$Lambda$ActivityRecord$jAKnTXYErEwplxJ5lQgj44-M9_c' INSTANCE>;

        $r11 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b9);

        r65 = (java.util.function.BiConsumer) $r10;

        r60 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r65, $r11, $r12);

        virtualinvoke r3.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r60);

        interfaceinvoke r60.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

     label37:
        b10 = 1;

        if z15 == 0 goto label38;

        b10 = 2;

     label38:
        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return b10;

     label39:
        $r61 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r61.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return 1;

     label40:
        $r49 := @caughtexception;

        r62 = $r49;

        goto label42;

     label41:
        $r51 := @caughtexception;

        r62 = $r51;

     label42:
        $r50 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r50.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw r62;

        catch java.lang.Throwable from label08 to label09 with label41;
        catch java.lang.Throwable from label09 to label10 with label40;
        catch java.lang.Throwable from label11 to label12 with label40;
        catch java.lang.Throwable from label12 to label13 with label40;
        catch java.lang.Throwable from label14 to label15 with label40;
        catch java.lang.Throwable from label15 to label16 with label40;
        catch java.lang.Throwable from label20 to label21 with label40;
        catch java.lang.Throwable from label22 to label23 with label40;
        catch java.lang.Throwable from label23 to label24 with label40;
        catch java.lang.Throwable from label24 to label25 with label40;
        catch java.lang.Throwable from label26 to label27 with label40;
        catch java.lang.Throwable from label28 to label29 with label40;
        catch java.lang.Throwable from label30 to label31 with label40;
        catch java.lang.Throwable from label31 to label32 with label40;
        catch java.lang.Throwable from label35 to label36 with label40;
        catch java.lang.Throwable from label36 to label37 with label40;
    }

    int finishIfPossible(java.lang.String, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1;
        boolean z0;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int finishIfPossible(int,android.content.Intent,com.android.server.uri.NeededUriGrants,java.lang.String,boolean)>(0, null, null, r1, z0);

        return $i0;
    }

    boolean finishIfSameAffinity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r3 = r1.<com.android.server.wm.ActivityRecord: java.lang.String taskAffinity>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.String taskAffinity>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("request-affinity", 1);

        return 0;
    }

    void finishIfSubActivity(com.android.server.wm.ActivityRecord, java.lang.String, int)
    {
        com.android.server.wm.ActivityRecord r0, r1, $r3;
        java.lang.String r2, $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        if $r3 != r1 goto label2;

        $i1 = r0.<com.android.server.wm.ActivityRecord: int requestCode>;

        if $i1 != i0 goto label2;

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.lang.String resultWho>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, r2);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("request-sub", 0);

        return;

     label2:
        return;
    }

    void finishLaunchTickingLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: long launchTickTime> = 0L;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityStack: void removeLaunchTickMessages()>();

        return;
    }

    void finishRelaunching()
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void unfreezeBounds()>();

        i0 = r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount>;

        if i0 <= 0 goto label1;

        $i1 = i0 - 1;

        r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount> = $i1;

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void checkKeyguardFlagsChanged()>();

     label2:
        return;
    }

    void forAllActivities(java.util.function.Consumer, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        java.util.function.Consumer r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.util.function.Consumer;

        z0 := @parameter1: boolean;

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>(r0);

        return;
    }

    boolean forAllActivities(java.util.function.Function, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        java.util.function.Function r1;
        boolean z0, $z1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.util.function.Function;

        z0 := @parameter1: boolean;

        $r2 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r0);

        $r3 = (java.lang.Boolean) $r2;

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    boolean forAllWindows(com.android.internal.util.ToBooleanFunction, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.internal.util.ToBooleanFunction r1, r3;
        boolean z0, $z1, $z2, $z3;
        com.android.server.wm.'-$$Lambda$zuO3rEvETpKsuJLTTdIHB2ijeho' $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z1 == 0 goto label1;

        $r2 = <com.android.server.wm._$$Lambda$zuO3rEvETpKsuJLTTdIHB2ijeho: com.android.server.wm.'-$$Lambda$zuO3rEvETpKsuJLTTdIHB2ijeho' INSTANCE>;

        r3 = (com.android.internal.util.ToBooleanFunction) $r2;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean forAllWindowsUnchecked(com.android.internal.util.ToBooleanFunction,boolean)>(r3, 1);

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean forAllWindowsUnchecked(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        return $z2;
    }

    boolean forAllWindowsUnchecked(com.android.internal.util.ToBooleanFunction, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.internal.util.ToBooleanFunction r1;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.wm.WindowToken: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        return $z1;
    }

    com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate, boolean, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1, r3;
        boolean z0, $z1;
        java.util.function.Predicate r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r2 := @parameter0: java.util.function.Predicate;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.wm.ActivityRecord;

        $z1 = interfaceinvoke r2.<java.util.function.Predicate: boolean test(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        r3 = r0;

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    android.graphics.Rect getAnimationBounds(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        com.android.server.wm.ActivityStack $r1, $r2;
        android.graphics.Rect $r3, r5;
        com.android.server.wm.Task r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityStack: android.graphics.Rect getBounds()>();

        return $r3;

     label1:
        r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r4 == null goto label2;

        r5 = virtualinvoke r4.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        goto label3;

     label2:
        r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect getBounds()>();

     label3:
        return r5;
    }

    void getAnimationFrames(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1, r2, r3, r4;
        com.android.server.wm.WindowState r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Rect;

        r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r5 != null goto label1;

        return;

     label1:
        virtualinvoke r5.<com.android.server.wm.WindowState: void getAnimationFrames(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, r2, r3, r4);

        return;
    }

    public android.view.SurfaceControl getAnimationLeashParent()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        android.view.SurfaceControl $r1, $r2, $r4;
        com.android.server.wm.ActivityStack $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: android.view.SurfaceControl getSurfaceControl()>();

        return $r4;

     label1:
        $z1 = <com.android.server.wm.WindowManagerService: boolean sHierarchicalAnimations>;

        if $z1 == 0 goto label2;

        $r2 = specialinvoke r0.<com.android.server.wm.WindowToken: android.view.SurfaceControl getAnimationLeashParent()>();

        return $r2;

     label2:
        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl getAppAnimationLayer()>();

        return $r1;
    }

    void getAnimationPosition(android.graphics.Point)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Point r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Point;

        virtualinvoke r1.<android.graphics.Point: void set(int,int)>(0, 0);

        return;
    }

    android.view.SurfaceControl getAppAnimationLayer()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        byte b0;
        android.view.SurfaceControl $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z0 == 0 goto label1;

        b0 = 2;

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean needsZBoost()>();

        if $z1 == 0 goto label2;

        b0 = 1;

        goto label3;

     label2:
        b0 = 0;

     label3:
        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl getAppAnimationLayer(int)>(b0);

        return $r1;
    }

    public android.graphics.Rect getBounds()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.wm.WindowToken: android.graphics.Rect getBounds()>();

        return $r2;
    }

    com.android.server.wm.DisplayContent getDisplay()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.DisplayContent r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    volatile com.android.server.wm.DisplayArea getDisplayArea()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.TaskDisplayArea $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        return $r1;
    }

    com.android.server.wm.TaskDisplayArea getDisplayArea()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.DisplayArea $r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowToken: com.android.server.wm.DisplayArea getDisplayArea()>();

        $r2 = (com.android.server.wm.TaskDisplayArea) $r1;

        return $r2;
    }

    int getDisplayId()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack r1;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke r1.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        return $i0;
    }

    com.android.server.wm.WindowState getHighestAnimLayerWindow(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, r5, r6, r7;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;
        boolean $z0;
        int i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r5 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r5);

        r6 = null;

     label1:
        if i0 < 0 goto label4;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.WindowState) $r4;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z0 == 0 goto label2;

        r7 = r6;

        goto label3;

     label2:
        r7 = r6;

        if r6 != null goto label3;

        r7 = r1;

     label3:
        i0 = i0 + -1;

        r6 = r7;

        goto label1;

     label4:
        return r6;
    }

    com.android.server.wm.WindowState getImeTargetBelowWindow(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, $r6, $r7;
        int i0, $i1;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.wm.'-$$Lambda$xoKZ5D123tFlyp3WJRk5AFtrB8A' $r5;
        java.util.function.Predicate r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r1);

        if i0 <= 0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i1 = i0 - 1;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i1);

        $r6 = (com.android.server.wm.WindowState) $r4;

        $r5 = <com.android.server.wm._$$Lambda$xoKZ5D123tFlyp3WJRk5AFtrB8A: com.android.server.wm.'-$$Lambda$xoKZ5D123tFlyp3WJRk5AFtrB8A' INSTANCE>;

        r8 = (java.util.function.Predicate) $r5;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>(r8);

        return $r7;

     label1:
        return null;
    }

    void getLetterboxInnerBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1, $r3;
        com.android.server.wm.Letterbox r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<com.android.server.wm.Letterbox: android.graphics.Rect getInnerFrame()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        goto label2;

     label1:
        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

     label2:
        return;
    }

    android.graphics.Rect getLetterboxInsets()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Letterbox r1;
        android.graphics.Rect $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.Letterbox: android.graphics.Rect getInsets()>();

        return $r3;

     label1:
        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        return $r2;
    }

    android.app.ActivityOptions getOptionsForTargetActivityLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityOptions r1, r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.app.ActivityOptions: android.app.ActivityOptions forTargetActivity()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    int getOrientation(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1, $i2;
        com.android.server.wm.DisplayContent $r1, $r3;
        android.util.ArraySet $r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        if i0 != 3 goto label1;

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mOrientation>;

        return $i2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = $r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z1 != 0 goto label2;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = $r3.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z2 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        $i1 = r0.<com.android.server.wm.ActivityRecord: int mOrientation>;

        return $i1;

     label3:
        return -2;
    }

    android.os.PersistableBundle getPersistentSavedState()
    {
        com.android.server.wm.ActivityRecord r0;
        android.os.PersistableBundle $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.os.PersistableBundle mPersistentState>;

        return $r1;
    }

    int getPid()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController r1;
        int i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: int getPid()>();

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    long getProtoFieldId()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        return 1146756268038L;
    }

    android.view.RemoteAnimationDefinition getRemoteAnimationDefinition()
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.RemoteAnimationDefinition $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.view.RemoteAnimationDefinition mRemoteAnimationDefinition>;

        return $r1;
    }

    int getRequestedOrientation()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mOrientation>;

        return $i0;
    }

    com.android.server.wm.ActivityStack getRootTask()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task $r1, r2;
        com.android.server.wm.ActivityStack r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        r3 = (com.android.server.wm.ActivityStack) $r1;

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    int getRootTaskId()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1;
        int i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<com.android.server.wm.Task: int getRootTaskId()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    android.os.Bundle getSavedState()
    {
        com.android.server.wm.ActivityRecord r0;
        android.os.Bundle $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.os.Bundle mIcicle>;

        return $r1;
    }

    float getSizeCompatScale()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        float f0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasSizeCompatBounds()>();

        if $z0 == 0 goto label1;

        f0 = r0.<com.android.server.wm.ActivityRecord: float mSizeCompatScale>;

        goto label2;

     label1:
        f0 = specialinvoke r0.<com.android.server.wm.WindowToken: float getSizeCompatScale()>();

     label2:
        return f0;
    }

    com.android.server.wm.ActivityStack getStack()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityStack r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    com.android.server.wm.ActivityStack$ActivityState getState()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        return $r1;
    }

    com.android.server.wm.Task getTask()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        return $r1;
    }

    com.android.server.wm.WindowContainerThumbnail getThumbnail()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowContainerThumbnail $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        return $r1;
    }

    com.android.server.wm.WindowState getTopFullscreenOpaqueWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        android.view.WindowManager$LayoutParams $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.WindowState) $r4;

        if r1 == null goto label2;

        $r5 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z0 = virtualinvoke $r5.<android.view.WindowManager$LayoutParams: boolean isFullscreen()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isFullyTransparent()>();

        if $z1 != 0 goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    public int getTransit()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mTransit>;

        return $i0;
    }

    int getTransitFlags()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mTransitFlags>;

        return $i0;
    }

    boolean getTurnScreenOnFlag()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mTurnScreenOn>;

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean containsTurnScreenOnWindow()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    int getUid()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.pm.ActivityInfo $r1;
        android.content.pm.ApplicationInfo $r2;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r2 = $r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r2.<android.content.pm.ApplicationInfo: int uid>;

        return $i0;
    }

    com.android.server.uri.UriPermissionOwner getUriPermissionsLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.uri.UriPermissionOwner $r1, $r2, $r3;
        com.android.server.wm.ActivityTaskManagerService $r4;
        com.android.server.uri.UriGrantsManagerInternal $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner uriPermissions>;

        if $r1 != null goto label1;

        $r3 = new com.android.server.uri.UriPermissionOwner;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.UriGrantsManagerInternal mUgmInternal>;

        specialinvoke $r3.<com.android.server.uri.UriPermissionOwner: void <init>(com.android.server.uri.UriGrantsManagerInternal,java.lang.Object)>($r5, r0);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner uriPermissions> = $r3;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner uriPermissions>;

        return $r2;
    }

    void handleAlreadyVisible()
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityOptions $r2, $r5;
        com.android.server.wm.WindowProcessController $r3;
        android.app.IApplicationThread $r4;
        com.android.server.wm.ActivityRecord$Token $r6;
        android.os.Bundle $r7;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreenLocked(boolean)>(0);

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions returningOptions>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions returningOptions>;

        $r7 = virtualinvoke $r5.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

        interfaceinvoke $r4.<android.app.IApplicationThread: void scheduleOnNewActivityOptions(android.os.IBinder,android.os.Bundle)>($r6, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    boolean handleCompleteDeferredRemoval()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeIfPossible()>();

     label1:
        $z1 = specialinvoke r0.<com.android.server.wm.WindowToken: boolean handleCompleteDeferredRemoval()>();

        return $z1;
    }

    boolean hasActivity()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        return 1;
    }

    boolean hasProcess()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean hasSavedState()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mHaveState>;

        return $z0;
    }

    boolean hasSizeCompatBounds()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mSizeCompatBounds>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean hasStartingWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        com.android.server.wm.StartingData $r1;
        com.android.server.wm.WindowList $r2;
        int $i0, $i1, i2;
        com.android.server.wm.WindowContainer $r3;
        com.android.server.wm.WindowState $r4;
        android.view.WindowManager$LayoutParams $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed>;

        if $z0 != 0 goto label5;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r1 == null goto label1;

        goto label5;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label4;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $r5 = $r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 3 goto label3;

        return 1;

     label3:
        i2 = i2 + -1;

        goto label2;

     label4:
        return 0;

     label5:
        return 1;
    }

    boolean hasWindowsAlive()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z0 = $r4.<com.android.server.wm.WindowState: boolean mAppDied>;

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    boolean inSizeCompatMode()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1, r13;
        int i0, i1, i2, i3, $i4, $i5, $i8, $i9, $i11, $i12;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets $r2;
        boolean $z0, $z1;
        android.content.res.Configuration $r3, $r6, r12;
        android.app.WindowConfiguration $r4, $r7;
        com.android.server.wm.WindowContainer $r5;
        android.content.pm.ActivityInfo $r8, $r9, $r10, $r11;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        byte $b6, $b7, $b10, $b13;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        if $r2 == null goto label10;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldUseSizeCompatMode()>();

        if $z0 == 0 goto label10;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFixedRotationTransforming()>();

        if $z1 == 0 goto label01;

        goto label10;

     label01:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $r4 = $r3.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r1 = virtualinvoke $r4.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        if r1 != null goto label02;

        return 0;

     label02:
        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        r12 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: android.content.res.Configuration getConfiguration()>();

        $i4 = r12.<android.content.res.Configuration: int densityDpi>;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $i5 = $r6.<android.content.res.Configuration: int densityDpi>;

        if $i4 == $i5 goto label03;

        return 1;

     label03:
        $r7 = r12.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r13 = virtualinvoke $r7.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        i2 = virtualinvoke r13.<android.graphics.Rect: int width()>();

        i3 = virtualinvoke r13.<android.graphics.Rect: int height()>();

        if i2 != i0 goto label04;

        if i3 != i1 goto label04;

        return 0;

     label04:
        if i2 <= i0 goto label05;

        if i3 <= i1 goto label05;

        return 1;

     label05:
        if i2 < i0 goto label09;

        if i3 >= i1 goto label06;

        goto label09;

     label06:
        $r8 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f0 = $r8.<android.content.pm.ActivityInfo: float maxAspectRatio>;

        $b6 = $f0 cmpl 0.0F;

        if $b6 <= 0 goto label07;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        $f7 = (float) $i11;

        $f8 = $f7 + 0.5F;

        $i12 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        $f9 = (float) $i12;

        $f11 = $f8 / $f9;

        $r11 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f10 = $r11.<android.content.pm.ActivityInfo: float maxAspectRatio>;

        $b13 = $f11 cmpl $f10;

        if $b13 < 0 goto label07;

        return 0;

     label07:
        $r9 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f1 = $r9.<android.content.pm.ActivityInfo: float minAspectRatio>;

        $b7 = $f1 cmpl 0.0F;

        if $b7 <= 0 goto label08;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i3);

        $f2 = (float) $i8;

        $f3 = $f2 + 0.5F;

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i3);

        $f4 = (float) $i9;

        $f6 = $f3 / $f4;

        $r10 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $f5 = $r10.<android.content.pm.ActivityInfo: float minAspectRatio>;

        $b10 = $f6 cmpg $f5;

        if $b10 > 0 goto label08;

        return 0;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 0;
    }

    boolean isClientVisible()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mClientVisible>;

        return $z0;
    }

    boolean isClosingOrEnteringPip()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z0 == 0 goto label1;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z2 == 0 goto label2;

     label1:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mWillCloseOrEnterPip>;

        if $z1 == 0 goto label3;

     label2:
        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        return z3;
    }

    boolean isConfigurationCompatible(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.res.Configuration;

        i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getRequestedOrientation()>();

        $z0 = staticinvoke <android.content.pm.ActivityInfo: boolean isFixedOrientationPortrait(int)>(i0);

        if $z0 == 0 goto label1;

        $i2 = r1.<android.content.res.Configuration: int orientation>;

        if $i2 == 1 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <android.content.pm.ActivityInfo: boolean isFixedOrientationLandscape(int)>(i0);

        if $z1 == 0 goto label2;

        $i1 = r1.<android.content.res.Configuration: int orientation>;

        if $i1 == 2 goto label2;

        return 0;

     label2:
        return 1;
    }

    final boolean isDestroyable()
    {
        com.android.server.wm.ActivityRecord r0, $r3;
        com.android.server.wm.ActivityStack r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.wm.ActivityStack$ActivityState $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z1 != 0 goto label1;

        goto label5;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r2);

        if $z2 != 0 goto label4;

        if r1 == null goto label4;

        $r3 = r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if r0 == $r3 goto label4;

        $z3 = r0.<com.android.server.wm.ActivityRecord: boolean mHaveState>;

        if $z3 == 0 goto label4;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean stopped>;

        if $z4 != 0 goto label2;

        goto label4;

     label2:
        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z5 == 0 goto label3;

        return 0;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        return 0;
    }

    protected boolean isFirstChildWindowGreaterThanSecond(com.android.server.wm.WindowState, com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, r2;
        int i0, i1;
        android.view.WindowManager$LayoutParams $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: com.android.server.wm.WindowState;

        $r3 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        $r4 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i1 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if i0 != 1 goto label1;

        if i1 == 1 goto label1;

        return 0;

     label1:
        if i0 == 1 goto label2;

        if i1 != 1 goto label2;

        return 1;

     label2:
        if i0 != 3 goto label3;

        if i1 == 3 goto label3;

        return 1;

     label3:
        if i0 == 3 goto label4;

        if i1 != 3 goto label4;

        return 0;

     label4:
        return 1;
    }

    boolean isFocusable()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowToken: boolean isFocusable()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canReceiveKeys()>();

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAlwaysFocusable()>();

        if $z2 == 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean isFreezingScreen()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        return $z0;
    }

    boolean isInHistory()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean inHistory>;

        return $z0;
    }

    boolean isInStackLocked()
    {
        com.android.server.wm.ActivityRecord r0, $r2;
        com.android.server.wm.ActivityStack r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord isInTask(com.android.server.wm.ActivityRecord)>(r0);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isInterestingToUserLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r2, $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z1 != 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        if $r2 == $r1 goto label2;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if $r4 != $r3 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    boolean isLastWindow(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1;
        int i0;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;
        boolean z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        z1 = 0;

        if i0 != 1 goto label1;

        z1 = 0;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(0);

        if $r4 != r1 goto label1;

        z1 = 1;

     label1:
        return z1;
    }

    boolean isLetterboxOverlappingWith(android.graphics.Rect)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1;
        com.android.server.wm.Letterbox r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.Letterbox: boolean isOverlappingWith(android.graphics.Rect)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isNoHistory()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.Intent $r1;
        int $i0, $i1, $i2, $i3;
        android.content.pm.ActivityInfo $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i0 = virtualinvoke $r1.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 1073741824;

        if $i1 != 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i2 = $r2.<android.content.pm.ActivityInfo: int flags>;

        $i3 = $i2 & 128;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isNonResizableOrForcedResizable(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1, $i2;
        android.content.pm.ActivityInfo $r1, $r2, $r3;
        boolean $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        if i0 != 2 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z1 = virtualinvoke $r3.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        z2 = 0;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i1 = $r1.<android.content.pm.ActivityInfo: int resizeMode>;

        if $i1 == 2 goto label2;

        z2 = 0;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i2 = $r2.<android.content.pm.ActivityInfo: int resizeMode>;

        if $i2 == 1 goto label2;

        z2 = 1;

     label2:
        return z2;
    }

    boolean isPersistable()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.Intent r1;
        android.content.pm.ActivityInfo $r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r2.<android.content.pm.ActivityInfo: int persistableMode>;

        if $i0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i3 = $r3.<android.content.pm.ActivityInfo: int persistableMode>;

        if $i3 != 2 goto label2;

     label1:
        r1 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        if r1 == null goto label3;

        $i1 = virtualinvoke r1.<android.content.Intent: int getFlags()>();

        $i2 = $i1 & 8388608;

        if $i2 != 0 goto label2;

        goto label3;

     label2:
        z0 = 0;

        goto label4;

     label3:
        z0 = 1;

     label4:
        return z0;
    }

    boolean isProcessRunning()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController r1, r8;
        boolean $z0, z1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.content.pm.ActivityInfo $r3;
        android.content.pm.ApplicationInfo $r4;
        int $i0;
        java.lang.String $r5;
        com.android.internal.app.ProcessMap $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        r8 = r1;

        if r1 != null goto label1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r6 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.ProcessMap mProcessNames>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r4 = $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r4.<android.content.pm.ApplicationInfo: int uid>;

        $r7 = virtualinvoke $r6.<com.android.internal.app.ProcessMap: java.lang.Object get(java.lang.String,int)>($r5, $i0);

        r8 = (com.android.server.wm.WindowProcessController) $r7;

     label1:
        if r8 == null goto label2;

        $z0 = virtualinvoke r8.<com.android.server.wm.WindowProcessController: boolean hasThread()>();

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    boolean isRelaunching()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount>;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isResizeable()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        boolean $z0, $z1, $z2, z3;
        android.content.pm.ActivityInfo $r2, $r3;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities>;

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r2.<android.content.pm.ActivityInfo: int resizeMode>;

        $z1 = staticinvoke <android.content.pm.ActivityInfo: boolean isResizeableMode(int)>($i0);

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z2 = virtualinvoke $r3.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    boolean isResolverOrChildActivity()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        java.lang.String $r2, $r3, $r8;
        java.lang.Class $r4, $r5, $r9;
        java.lang.ClassLoader $r6;
        android.content.ComponentName $r7;
        java.lang.ClassNotFoundException $r10;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r3 = "android";

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r5 = class "Lcom/android/internal/app/ResolverActivity;";

        $r4 = class "Ljava/lang/Object;";

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r8 = virtualinvoke $r7.<android.content.ComponentName: java.lang.String getClassName()>();

        $r9 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r8);

        z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

     label2:
        return z0;

     label3:
        $r10 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    boolean isResolverOrDelegateActivity()
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.ComponentName $r1, $r5, $r6;
        java.lang.String $r2;
        boolean $z0, $z1, z2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.ActivityStackSupervisor $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r2 = virtualinvoke $r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean isResolverActivity(java.lang.String)>($r2);

        if $z0 != 0 goto label2;

        $r5 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6 = virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: android.content.ComponentName getSystemChooserActivity()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    boolean isResumedActivityOnDisplay()
    {
        com.android.server.wm.ActivityRecord r0, r2;
        com.android.server.wm.DisplayContent r1;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r3;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label5;

        $r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        r2 = virtualinvoke $r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getFocusedActivity()>();

        if r2 == null goto label4;

        if r2 != r0 goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        return 0;
    }

    boolean isRootOfTask()
    {
        com.android.server.wm.ActivityRecord r0, $r2;
        com.android.server.wm.Task r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity(boolean)>(1);

        if r0 != $r2 goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    final boolean isSleeping()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 == null goto label1;

        z0 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        goto label2;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        z0 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: boolean isSleepingLocked()>();

     label2:
        return z0;
    }

    boolean isSnapshotCompatible(android.app.ActivityManager$TaskSnapshot)
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityManager$TaskSnapshot r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.Task $r3;
        android.app.WindowConfiguration $r4;
        int $i0, i1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.app.ActivityManager$TaskSnapshot;

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        i1 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: int rotationForActivityInDifferentOrientation(com.android.server.wm.ActivityRecord)>(r0);

        if i1 == -1 goto label2;

        goto label3;

     label2:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        i1 = virtualinvoke $r4.<android.app.WindowConfiguration: int getRotation()>();

     label3:
        $i0 = virtualinvoke r1.<android.app.ActivityManager$TaskSnapshot: int getRotation()>();

        if $i0 != i1 goto label4;

        z0 = 1;

     label4:
        return z0;
    }

    boolean isState(com.android.server.wm.ActivityStack$ActivityState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r1 != $r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isState(com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState r1, r2, r3;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        r2 := @parameter1: com.android.server.wm.ActivityStack$ActivityState;

        r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r1 == r3 goto label2;

        if r2 != r3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isState(com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState r1, r2, r3, r4;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        r2 := @parameter1: com.android.server.wm.ActivityStack$ActivityState;

        r3 := @parameter2: com.android.server.wm.ActivityStack$ActivityState;

        r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r1 == r4 goto label2;

        if r2 == r4 goto label2;

        if r3 != r4 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isState(com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState r1, r2, r3, r4, r5;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        r2 := @parameter1: com.android.server.wm.ActivityStack$ActivityState;

        r3 := @parameter2: com.android.server.wm.ActivityStack$ActivityState;

        r4 := @parameter3: com.android.server.wm.ActivityStack$ActivityState;

        r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r1 == r5 goto label2;

        if r2 == r5 goto label2;

        if r3 == r5 goto label2;

        if r4 != r5 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isState(com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState r1, r2, r3, r4, r5, r6;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        r2 := @parameter1: com.android.server.wm.ActivityStack$ActivityState;

        r3 := @parameter2: com.android.server.wm.ActivityStack$ActivityState;

        r4 := @parameter3: com.android.server.wm.ActivityStack$ActivityState;

        r5 := @parameter4: com.android.server.wm.ActivityStack$ActivityState;

        r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r1 == r6 goto label2;

        if r2 == r6 goto label2;

        if r3 == r6 goto label2;

        if r4 == r6 goto label2;

        if r5 != r6 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isState(com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState, com.android.server.wm.ActivityStack$ActivityState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState r1, r2, r3, r4, r5, r6, r7;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        r2 := @parameter1: com.android.server.wm.ActivityStack$ActivityState;

        r3 := @parameter2: com.android.server.wm.ActivityStack$ActivityState;

        r4 := @parameter3: com.android.server.wm.ActivityStack$ActivityState;

        r5 := @parameter4: com.android.server.wm.ActivityStack$ActivityState;

        r6 := @parameter5: com.android.server.wm.ActivityStack$ActivityState;

        r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r1 == r7 goto label2;

        if r2 == r7 goto label2;

        if r3 == r7 goto label2;

        if r4 == r7 goto label2;

        if r5 == r7 goto label2;

        if r6 != r7 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isSurfaceShowing()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mLastSurfaceShowing>;

        return $z0;
    }

    boolean isTaskOverlay()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mTaskOverlay>;

        return $z0;
    }

    boolean isTopRunningActivity()
    {
        com.android.server.wm.ActivityRecord r0, $r2;
        com.android.server.wm.RootWindowContainer $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r2 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isUid(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        android.content.pm.ActivityInfo $r1;
        android.content.pm.ApplicationInfo $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r2 = $r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r2.<android.content.pm.ApplicationInfo: int uid>;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isVisible()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisible>;

        return $z0;
    }

    boolean isWaitingForTransitionStart()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.AppTransition $r2;
        boolean $z0, $z1, $z2, $z3, z4;
        android.util.ArraySet $r3, $r4, $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 == null goto label2;

        $r2 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z0 == 0 goto label2;

        $r3 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z1 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r4 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $z2 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z2 != 0 goto label1;

        $r5 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers>;

        $z3 = virtualinvoke $r5.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z3 == 0 goto label2;

     label1:
        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        return z4;
    }

    public boolean keyDispatchingTimedOut(java.lang.String, int)
    {
        com.android.server.wm.ActivityRecord r0, r2;
        int i0, $i3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowProcessController r3, $r9, $r15;
        boolean z0, $z1, z2, z3;
        com.android.server.wm.ActivityTaskManagerService $r4, $r5, $r7;
        android.app.ActivityManagerInternal $r6, $r14;
        long $l1;
        byte $b2;
        android.content.pm.ActivityInfo $r8;
        java.lang.String $r10, $r12, r17;
        android.content.pm.ApplicationInfo $r11;
        java.lang.Object $r13;
        java.lang.Throwable $r16;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r17 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r1 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord getWaitingHistoryRecordLocked()>();

        r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

     label02:
        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

     label03:
        z2 = 1;

        if z0 == 0 goto label07;

     label04:
        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i3 = virtualinvoke $r15.<com.android.server.wm.WindowProcessController: int getPid()>();

        if $i3 == i0 goto label07;

     label05:
        if i0 != -1 goto label06;

        goto label07;

     label06:
        z3 = 0;

        goto label08;

     label07:
        z3 = 1;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if z3 == 0 goto label10;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r14 = $r7.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r13 = r3.<com.android.server.wm.WindowProcessController: java.lang.Object mOwner>;

        $r12 = r2.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        $r8 = r2.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r11 = $r8.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r10 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $z1 = virtualinvoke $r14.<android.app.ActivityManagerInternal: boolean inputDispatchingTimedOut(java.lang.Object,java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.Object,boolean,java.lang.String)>($r13, $r12, $r11, $r10, $r9, 0, r17);

        return $z1;

     label10:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $l1 = virtualinvoke $r6.<android.app.ActivityManagerInternal: long inputDispatchingTimedOut(int,boolean,java.lang.String)>(i0, 0, r17);

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label11;

        goto label12;

     label11:
        z2 = 0;

     label12:
        return z2;

     label13:
        $r16 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public android.view.SurfaceControl$Builder lambda$layoutLetterbox$2$ActivityRecord()
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Builder $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Builder makeChildSurface(com.android.server.wm.WindowContainer)>(null);

        return $r1;
    }

    public void lambda$new$0$ActivityRecord(float[], float[])
    {
        com.android.server.wm.ActivityRecord r0;
        float[] r1, r8;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityRecord$AppSaturationInfo r3, $r5, $r6;
        com.android.server.wm.WindowManagerService $r4;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r8 := @parameter0: float[];

        r1 := @parameter1: float[];

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        r2 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo>;

        if $r5 != null goto label2;

        r3 = new com.android.server.wm.ActivityRecord$AppSaturationInfo;

        specialinvoke r3.<com.android.server.wm.ActivityRecord$AppSaturationInfo: void <init>(com.android.server.wm.ActivityRecord$1)>(null);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo> = r3;

     label2:
        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AppSaturationInfo mLastAppSaturationInfo>;

        virtualinvoke $r6.<com.android.server.wm.ActivityRecord$AppSaturationInfo: void setSaturation(float[],float[])>(r8, r1);

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void updateColorTransform()>();

        exitmonitor r2;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lambda$new$1$ActivityRecord(float[], float[])
    {
        com.android.server.wm.ActivityRecord r0;
        float[] r1, r2;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.wm._$$Lambda$ActivityRecord$HCzV5lDTWOurUvy4cOGaHiRsYqY $r4;
        com.android.server.wm.WindowManagerService$H $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r4 = new com.android.server.wm._$$Lambda$ActivityRecord$HCzV5lDTWOurUvy4cOGaHiRsYqY;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$ActivityRecord$HCzV5lDTWOurUvy4cOGaHiRsYqY: void <init>(com.android.server.wm.ActivityRecord,float[],float[])>(r0, r1, r2);

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public void lambda$restartProcessIfVisible$9$ActivityRecord()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityTaskManagerService $r2, $r4;
        boolean $z0;
        com.android.server.wm.WindowProcessController $r3, r8;
        int $i0, $i1;
        java.lang.String $r5;
        android.app.ActivityManagerInternal $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r1 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z0 == 0 goto label5;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowProcessController: int getReportedProcState()>();

        if $i0 > 6 goto label3;

     label2:
        goto label5;

     label3:
        r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r6 = $r4.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r5 = r8.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        $i1 = r8.<com.android.server.wm.WindowProcessController: int mUid>;

        virtualinvoke $r6.<android.app.ActivityManagerInternal: void killProcess(java.lang.String,int,java.lang.String)>($r5, $i1, "resetConfig");

        return;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void layoutLetterbox(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, r12;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z7, z8;
        com.android.server.wm.Letterbox $r2, $r7, $r15, r18;
        android.graphics.Point $r3, $r17;
        com.android.server.wm.ActivityStack $r4;
        com.android.server.wm.WindowContainer $r5;
        com.android.server.wm.Task $r6;
        com.android.server.wm._$$Lambda$ActivityRecord$lyqdJlA4QOn1CXj7zglxNJxDy9o $r8;
        com.android.server.wm.WindowManagerService $r9;
        java.util.function.Supplier $r10;
        com.android.server.wm.WindowStateAnimator $r11;
        android.graphics.Rect r14, $r16;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r12 := @parameter0: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r1 == null goto label12;

        if r12 == null goto label01;

        if r1 == r12 goto label01;

        goto label12;

     label01:
        z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if z0 != 0 goto label03;

        $r11 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z5 = $r11.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred>;

        if $z5 != 0 goto label03;

        $z6 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z6 == 0 goto label02;

        goto label03;

     label02:
        z7 = 0;

        goto label04;

     label03:
        z7 = 1;

     label04:
        z8 = 0;

        if z7 == 0 goto label05;

        z8 = 0;

        $z3 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isLetterboxedAppWindow()>();

        if $z3 == 0 goto label05;

        z8 = 0;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean fillsParent()>();

        if $z4 == 0 goto label05;

        z8 = 1;

     label05:
        if z8 == 0 goto label10;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if $r2 != null goto label06;

        $r7 = new com.android.server.wm.Letterbox;

        $r8 = new com.android.server.wm._$$Lambda$ActivityRecord$lyqdJlA4QOn1CXj7zglxNJxDy9o;

        specialinvoke $r8.<com.android.server.wm._$$Lambda$ActivityRecord$lyqdJlA4QOn1CXj7zglxNJxDy9o: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        specialinvoke $r7.<com.android.server.wm.Letterbox: void <init>(java.util.function.Supplier,java.util.function.Supplier)>($r8, $r10);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox> = $r7;

        virtualinvoke $r7.<com.android.server.wm.Letterbox: void attachInput(com.android.server.wm.WindowState)>(r1);

     label06:
        $r3 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Point mTmpPoint>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void getPosition(android.graphics.Point)>($r3);

        r14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect getFixedRotationTransformDisplayBounds()>();

        if r14 == null goto label07;

        goto label09;

     label07:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        if $z2 == 0 goto label08;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r14 = virtualinvoke $r6.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        goto label09;

     label08:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getParent()>();

        r14 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

     label09:
        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        $r16 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $r17 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Point mTmpPoint>;

        virtualinvoke $r15.<com.android.server.wm.Letterbox: void layout(android.graphics.Rect,android.graphics.Rect,android.graphics.Point)>(r14, $r16, $r17);

        goto label11;

     label10:
        r18 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r18 == null goto label11;

        virtualinvoke r18.<com.android.server.wm.Letterbox: void hide()>();

        goto label11;

     label11:
        return;

     label12:
        return;
    }

    boolean letterboxNotIntersectsOrFullyContains(android.graphics.Rect)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1;
        com.android.server.wm.Letterbox r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<com.android.server.wm.Letterbox: boolean notIntersectsOrFullyContains(android.graphics.Rect)>(r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    void logStartActivity(int, com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.wm.Task r1;
        android.content.Intent $r2, $r8, $r10, $r12;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5, $r6, $r13;
        java.lang.String $r7, $r9, $r11, r15;
        android.net.Uri r14;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.Task;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        r14 = virtualinvoke $r2.<android.content.Intent: android.net.Uri getData()>();

        if r14 == null goto label1;

        r15 = virtualinvoke r14.<android.net.Uri: java.lang.String toSafeString()>();

        goto label2;

     label1:
        r15 = null;

     label2:
        $r3 = newarray (java.lang.Object)[8];

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[0] = $r4;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r5;

        $i3 = r1.<com.android.server.wm.Task: int mTaskId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[2] = $r6;

        $r7 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        $r3[3] = $r7;

        $r8 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r9 = virtualinvoke $r8.<android.content.Intent: java.lang.String getAction()>();

        $r3[4] = $r9;

        $r10 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r11 = virtualinvoke $r10.<android.content.Intent: java.lang.String getType()>();

        $r3[5] = $r11;

        $r3[6] = r15;

        $r12 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i4 = virtualinvoke $r12.<android.content.Intent: int getFlags()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[7] = $r13;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(i0, $r3);

        return;
    }

    boolean makeActiveIfNeeded(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r32;
        boolean $z0, $z1, $z2, $z4, $z5;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r10;
        com.android.server.wm.ActivityTaskManagerService $r2, $r11;
        com.android.server.wm.ClientLifecycleManager $r3, $r12;
        com.android.server.wm.WindowProcessController $r4, $r13;
        android.app.IApplicationThread $r5, $r14;
        com.android.server.wm.ActivityRecord$Token $r6, $r15;
        android.app.servertransaction.StartActivityItem $r7;
        com.android.server.wm.ActivityStackSupervisor $r8;
        java.util.ArrayList $r9;
        int $i0;
        android.app.servertransaction.PauseActivityItem $r16;
        com.android.server.wm.ActivityStack $r17;
        java.lang.Exception $r18, $r25;
        java.lang.StringBuilder $r19, $r26;
        android.content.Intent $r21, $r28;
        android.content.ComponentName $r22, $r29;
        java.lang.String $r24, $r31;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r32 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldResumeActivity(com.android.server.wm.ActivityRecord)>(r32);

        if $z0 == 0 goto label01;

        $r17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $z5 = virtualinvoke $r17.<com.android.server.wm.ActivityStack: boolean resumeTopActivityUncheckedLocked(com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r32, null);

        return $z5;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldPauseActivity(com.android.server.wm.ActivityRecord)>(r32);

        if $z1 == 0 goto label06;

        $r10 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r10, "makeActiveIfNeeded");

     label02:
        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        $r16 = staticinvoke <android.app.servertransaction.PauseActivityItem: android.app.servertransaction.PauseActivityItem obtain(boolean,boolean,int,boolean)>($z4, 0, $i0, 0);

        virtualinvoke $r12.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ActivityLifecycleItem)>($r14, $r15, $r16);

     label03:
        goto label05;

     label04:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown sending pause: ");

        $r21 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r22 = virtualinvoke $r21.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r24, $r18);

     label05:
        goto label11;

     label06:
        $z2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldStartActivity()>();

        if $z2 == 0 goto label11;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STARTED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r1, "makeActiveIfNeeded");

     label07:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r7 = staticinvoke <android.app.servertransaction.StartActivityItem: android.app.servertransaction.StartActivityItem obtain()>();

        virtualinvoke $r3.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ActivityLifecycleItem)>($r5, $r6, $r7);

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown sending start: ");

        $r28 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r29 = virtualinvoke $r28.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r31, $r25);

     label10:
        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r9 = $r8.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r9.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label11:
        return 0;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    void makeFinishingLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityRecord: boolean finishing> = 1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean stopped>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearOptionsLocked()>();

     label2:
        return;
    }

    void makeInvisible()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, $z4, z5;
        com.android.server.wm.ActivityStack $r3;
        com.android.server.wm.ActivityStackSupervisor $r4;
        com.android.server.wm.ActivityStack$ActivityState $r5, $r6, $r7, $r8, $r17;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r10;
        android.content.Intent $r12;
        android.content.ComponentName $r13;
        java.lang.String $r15;
        int[] $r16;
        int $i1, $i2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z1 != 0 goto label01;

        return;

     label01:
        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean checkEnterPictureInPictureState(java.lang.String,boolean)>("makeInvisible", 1);

     label02:
        if z0 == 0 goto label05;

     label03:
        $r8 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STARTED>;

        $r7 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r8, $r7, $r6, $r5);

        if $z4 != 0 goto label05;

     label04:
        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setDeferHidingClient(boolean)>(z5);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(0);

        $r16 = <com.android.server.wm.ActivityRecord$5: int[] $SwitchMap$com$android$server$wm$ActivityStack$ActivityState>;

        $r17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState getState()>();

        $i1 = virtualinvoke $r17.<com.android.server.wm.ActivityStack$ActivityState: int ordinal()>();

        $i2 = $r16[$i1];

        tableswitch($i2)
        {
            case 1: goto label10;
            case 2: goto label13;
            case 3: goto label13;
            case 4: goto label08;
            case 5: goto label08;
            case 6: goto label13;
            case 7: goto label13;
            default: goto label07;
        };

     label07:
        goto label14;

     label08:
        r0.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch> = 0;

     label09:
        goto label14;

     label10:
        if z5 == 0 goto label13;

     label11:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z2 = $r4.<com.android.server.wm.ActivityStackSupervisor: boolean mUserLeaving>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStack: boolean startPausingLocked(boolean,boolean,com.android.server.wm.ActivityRecord)>($z2, 0, null);

     label12:
        goto label14;

     label13:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void addToStopping(boolean,boolean,java.lang.String)>(1, z0, "makeInvisible");

     label14:
        goto label16;

     label15:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown making hidden: ");

        $r12 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r13 = virtualinvoke $r12.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r15, $r9);

     label16:
        return;

        catch java.lang.Exception from label01 to label02 with label15;
        catch java.lang.Exception from label03 to label04 with label15;
        catch java.lang.Exception from label06 to label07 with label15;
        catch java.lang.Exception from label08 to label09 with label15;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    void makeVisibleIfNeeded(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.ActivityRecord r0, $r3, r16;
        boolean z0;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r2;
        com.android.server.wm.WindowProcessController $r4;
        com.android.server.wm.ActivityStackSupervisor $r5;
        java.util.ArrayList $r6, $r8;
        android.app.ActivityOptions $r7;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r10;
        android.content.Intent $r12;
        android.content.ComponentName $r13;
        java.lang.String $r15;
        com.android.server.wm.ActivityStack r17;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r16 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if $r2 == $r1 goto label12;

        if r0 != r16 goto label01;

        goto label12;

     label01:
        r17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

     label02:
        $r3 = r17.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting>;

        if $r3 == null goto label03;

        $r7 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions returningOptions>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateOptionsLocked(android.app.ActivityOptions)>($r7);

        $r8 = r17.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label03:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(1);

        r0.<com.android.server.wm.ActivityRecord: boolean mSetToSleep> = 0;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r4.<com.android.server.wm.WindowProcessController: void postPendingUiCleanMsg(boolean)>(1);

     label04:
        if z0 == 0 goto label07;

     label05:
        r0.<com.android.server.wm.ActivityRecord: boolean mClientVisibilityDeferred> = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean makeActiveIfNeeded(com.android.server.wm.ActivityRecord)>(r16);

     label06:
        goto label08;

     label07:
        r0.<com.android.server.wm.ActivityRecord: boolean mClientVisibilityDeferred> = 1;

     label08:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6 = $r5.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown making visible: ");

        $r12 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r13 = virtualinvoke $r12.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r15, $r9);

     label11:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void handleAlreadyVisible()>();

        return;

     label12:
        return;

        catch java.lang.Exception from label02 to label03 with label10;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label06 with label10;
        catch java.lang.Exception from label07 to label08 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public boolean matchParentBounds()
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1, $r3;
        com.android.server.wm.WindowContainer r2;
        boolean $z1, z2, z3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect getResolvedOverrideBounds()>();

        z2 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if z2 == 0 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        z3 = 1;

        if r2 == null goto label3;

        $r3 = virtualinvoke r2.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        $z1 = virtualinvoke $r3.<android.graphics.Rect: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean mayFreezeScreenLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean mayFreezeScreenLocked(com.android.server.wm.WindowProcessController)>($r1);

        return $z0;
    }

    boolean moveFocusableActivityToTop(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0, $r3, $r6, $r9;
        com.android.server.wm.ActivityStack r1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.RootWindowContainer $r2, $r5;
        com.android.server.wm.Task $r4, $r15;
        com.android.server.wm.ActivityTaskManagerService $r7;
        com.android.server.wm.DisplayContent $r8;
        com.android.server.wm.ActivityStack$ActivityState $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r17, r18;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r18 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFocusable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveActivityStackToFront: invalid task or stack: activity=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" task=");

        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r17);

        return 0;

     label2:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getTopResumedActivity()>();

        if $r3 != r0 goto label3;

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r9 = $r8.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if $r9 != r0 goto label3;

        $r10 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r10);

        $z2 = $z1 ^ 1;

        return $z2;

     label3:
        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke r1.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String,com.android.server.wm.Task)>(r18, $r4);

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getTopResumedActivity()>();

        if $r6 != r0 goto label4;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void setResumedActivityUncheckLocked(com.android.server.wm.ActivityRecord,java.lang.String)>(r0, r18);

     label4:
        return 1;
    }

    boolean needsZBoost()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mNeedsZBoost>;

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.wm.WindowToken: boolean needsZBoost()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    void notifyAppResumed(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        com.android.server.wm.WindowContainer $r1;
        java.lang.Object[] $r2;
        com.android.server.wm.ProtoLogGroup $r3;
        java.lang.Boolean $r4;
        java.lang.StringBuilder $r5;
        com.android.server.wm.ActivityRecord$Token $r7;
        java.lang.String $r9, r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r1 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to notify resumed of non-existing app token: ");

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        return;

     label1:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z1 == 0 goto label2;

        r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r3 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2[0] = $r4;

        $r2[1] = r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r3, 1364498663, 3, null, $r2);

     label2:
        r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped> = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setCurrentLaunchCanTurnScreenOn(boolean)>(1);

        if z0 != 0 goto label3;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void destroySurfaces(boolean)>(1);

     label3:
        return;
    }

    void notifyAppStopped()
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.wm.DisplayContent $r2;
        android.content.ComponentName $r3;
        com.android.server.wm.PinnedStackController $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 1903353011, 0, null, $r5);

     label1:
        r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped> = 1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r4 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        virtualinvoke $r4.<com.android.server.wm.PinnedStackController: void onActivityHidden(android.content.ComponentName)>($r3);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void destroySurfaces()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

        return;
    }

    void notifyUnknownVisibilityLaunchedForKeyguardTransition()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.ActivityStackSupervisor $r1;
        com.android.server.wm.KeyguardController $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.UnknownAppVisibilityController $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean noDisplay>;

        if $z0 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $z1 = virtualinvoke $r2.<com.android.server.wm.KeyguardController: boolean isKeyguardLocked()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        virtualinvoke $r4.<com.android.server.wm.UnknownAppVisibilityController: void notifyLaunched(com.android.server.wm.ActivityRecord)>(r0);

        return;

     label2:
        return;
    }

    boolean occludesParent()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean occludesParent(boolean)>(0);

        return $z0;
    }

    public boolean okToShowLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, $z3, z4;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.pm.ActivityInfo $r1, $r5;
        com.android.server.wm.ActivityStackSupervisor $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        android.app.ActivityManagerInternal $r4;
        android.content.pm.ApplicationInfo $r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        z0 = staticinvoke <android.os.storage.StorageManager: boolean isUserKeyUnlocked(int)>($i0);

        z4 = 0;

        if z0 != 0 goto label1;

        $r5 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r6 = $r5.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z3 = virtualinvoke $r6.<android.content.pm.ApplicationInfo: boolean isEncryptionAware()>();

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i1 = $r1.<android.content.pm.ActivityInfo: int flags>;

        $i2 = $i1 & 1024;

        if $i2 != 0 goto label3;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i3 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: boolean isCurrentProfileLocked(int)>($i3);

        if $z1 == 0 goto label2;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i4 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $z2 = virtualinvoke $r4.<android.app.ActivityManagerInternal: boolean isUserRunning(int,int)>($i4, 0);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        goto label4;

     label3:
        z4 = 1;

     label4:
        return z4;
    }

    protected void onAnimationFinished(int, com.android.server.wm.AnimationAdapter)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        com.android.server.wm.AnimationAdapter r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        com.android.server.wm.WindowList $r3;
        com.android.server.wm.'-$$Lambda$01bPtngJg5AqEoOWfW3rWfV7MH4' $r4;
        com.android.server.wm.DisplayContent $r5, $r17;
        android.os.IBinder $r6;
        com.android.server.wm.AppTransition $r7;
        com.android.server.wm.ActivityStackSupervisor $r8, $r12, $r13, $r14;
        java.util.ArrayList $r9, $r15, r19;
        com.android.server.wm.RootWindowContainer $r10, $r11;
        com.android.server.wm.WindowContainerThumbnail $r16, $r18;
        java.util.function.Consumer r20;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.AnimationAdapter;

        specialinvoke r0.<com.android.server.wm.WindowToken: void onAnimationFinished(int,com.android.server.wm.AnimationAdapter)>(i0, r1);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "AR#onAnimationFinished");

        r0.<com.android.server.wm.ActivityRecord: int mTransit> = -1;

        z6 = 0;

        r0.<com.android.server.wm.ActivityRecord: int mTransitFlags> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean mNeedsAnimationBoundsLayer> = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setAppLayoutChanges(int,java.lang.String)>(12, "ActivityRecord");

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void clearThumbnail()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z0 != 0 goto label1;

        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z5 == 0 goto label2;

     label1:
        z6 = 1;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setClientVisible(boolean)>(z6);

        $r17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r17.<com.android.server.wm.DisplayContent: void computeImeTargetIfNeeded(com.android.server.wm.ActivityRecord)>(r0);

        $r18 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        if $r18 == null goto label3;

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        virtualinvoke $r16.<com.android.server.wm.WindowContainerThumbnail: void destroy()>();

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail> = null;

     label3:
        r19 = new java.util.ArrayList;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        specialinvoke r19.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = <com.android.server.wm._$$Lambda$01bPtngJg5AqEoOWfW3rWfV7MH4: com.android.server.wm.'-$$Lambda$01bPtngJg5AqEoOWfW3rWfV7MH4' INSTANCE>;

        r20 = (java.util.function.Consumer) $r4;

        virtualinvoke r19.<java.util.ArrayList: void forEach(java.util.function.Consumer)>(r20);

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r7 = $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r6 = r0.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        virtualinvoke $r7.<com.android.server.wm.AppTransition: void notifyAppTransitionFinishedLocked(android.os.IBinder)>($r6);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleAnimation()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r9 = $r8.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        $z1 = virtualinvoke $r9.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r15 = $r14.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        $z4 = virtualinvoke $r15.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label6;

     label4:
        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z2 = virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: boolean allResumedActivitiesIdle()>();

        if $z2 == 0 goto label5;

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r13.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdle()>();

        goto label6;

     label5:
        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z3 = virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: boolean allResumedActivitiesVisible()>();

        if $z3 == 0 goto label6;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r12.<com.android.server.wm.ActivityStackSupervisor: void scheduleProcessStoppingAndFinishingActivities()>();

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;
    }

    public void onAnimationLeashCreated(android.view.SurfaceControl$Transaction, android.view.SurfaceControl)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2;
        int $i0;
        com.android.server.wm.DisplayContent $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        $i0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: int getAnimationLayer()>();

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>(r2, $i0);

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void assignStackOrdering()>();

        return;
    }

    public void onAnimationLeashLost(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl $r1, $r2;
        android.view.SurfaceControl$Transaction r4;
        com.android.server.wm.AnimatingActivityRegistry r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r4 := @parameter0: android.view.SurfaceControl$Transaction;

        specialinvoke r0.<com.android.server.wm.WindowToken: void onAnimationLeashLost(android.view.SurfaceControl$Transaction)>(r4);

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer>;

        virtualinvoke r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction remove(android.view.SurfaceControl)>($r2);

        r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer> = null;

     label1:
        r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry>;

        if r5 == null goto label2;

        virtualinvoke r5.<com.android.server.wm.AnimatingActivityRegistry: void notifyFinished(com.android.server.wm.ActivityRecord)>(r0);

     label2:
        return;
    }

    public void onAppFreezeTimeout()
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force clearing freeze: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreen(boolean,boolean)>(1, 1);

        return;
    }

    void onCancelFixedRotationTransform(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.WindowContainer $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowContainer getLastOrientationSource()>();

        if r0 != $r2 goto label2;

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getRequestedConfigurationOrientation()>();

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreen(int)>(i0);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean)>(0, 0);

        return;

     label2:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z1, $z2, z3, z4;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets $r1, r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, i12;
        android.app.WindowConfiguration $r2, $r3, $r4, $r8, $r10, $r11, $r13;
        android.content.res.Configuration $r5, $r7, r14, r16, $r17, $r18;
        com.android.server.wm.WindowContainer $r6, $r9, $r12;
        com.android.server.wm.DisplayContent r19;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r14 := @parameter0: android.content.res.Configuration;

        r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        if r15 == null goto label04;

        r16 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $r2 = r16.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i2 = virtualinvoke $r2.<android.app.WindowConfiguration: int getRotation()>();

        if $i2 == -1 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        i9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getRequestedConfigurationOrientation()>();

        if i9 == 0 goto label03;

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getConfiguration()>();

        $i4 = $r5.<android.content.res.Configuration: int orientation>;

        if i9 == $i4 goto label03;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowContainer: android.content.res.Configuration getConfiguration()>();

        $i5 = $r7.<android.content.res.Configuration: int orientation>;

        if i9 != $i5 goto label03;

        $r8 = r16.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i6 = virtualinvoke $r8.<android.app.WindowConfiguration: int getRotation()>();

        $r9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        $r10 = virtualinvoke $r9.<com.android.server.wm.WindowContainer: android.app.WindowConfiguration getWindowConfiguration()>();

        $i7 = virtualinvoke $r10.<android.app.WindowConfiguration: int getRotation()>();

        if $i6 == $i7 goto label03;

        $r11 = r16.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        $r13 = virtualinvoke $r12.<com.android.server.wm.WindowContainer: android.app.WindowConfiguration getWindowConfiguration()>();

        $i8 = virtualinvoke $r13.<android.app.WindowConfiguration: int getRotation()>();

        virtualinvoke $r11.<android.app.WindowConfiguration: void setRotation(int)>($i8);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>(r16);

        return;

     label03:
        if z3 == 0 goto label04;

        if i9 != 0 goto label04;

        $r3 = r16.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i3 = virtualinvoke $r3.<android.app.WindowConfiguration: int getRotation()>();

        if $i3 == -1 goto label04;

        $r4 = r16.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        virtualinvoke $r4.<android.app.WindowConfiguration: void setRotation(int)>(-1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>(r16);

        return;

     label04:
        specialinvoke r0.<com.android.server.wm.WindowToken: void onConfigurationChanged(android.content.res.Configuration)>(r14);

        $r17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getMergedOverrideConfiguration()>();

        $i10 = $r17.<android.content.res.Configuration: int seq>;

        $r18 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $i11 = $r18.<android.content.res.Configuration: int seq>;

        if $i10 == $i11 goto label05;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onMergedOverrideConfigurationChanged()>();

     label05:
        r19 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        if r19 != null goto label06;

        return;

     label06:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z1 == 0 goto label07;

        virtualinvoke r19.<com.android.server.wm.DisplayContent: void handleActivitySizeCompatModeIfNeeded(com.android.server.wm.ActivityRecord)>(r0);

        goto label11;

     label07:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        if $r1 == null goto label11;

        i12 = virtualinvoke r19.<com.android.server.wm.DisplayContent: int getCurrentOverrideConfigurationChanges()>();

        $z2 = staticinvoke <com.android.server.wm.ActivityRecord: boolean hasResizeChange(int)>(i12);

        if $z2 == 0 goto label08;

        $i1 = i12 & 536872064;

        if $i1 == 536872064 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        if z4 != 0 goto label10;

        $i0 = i12 & 4096;

        if $i0 == 0 goto label11;

     label10:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void restartProcessIfVisible()>();

     label11:
        return;
    }

    void onDisplayChanged(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.ActivityRecord r0, $r5, $r7;
        com.android.server.wm.DisplayContent r1, $r2, $r6, $r8, $r11, $r12, r13;
        android.util.ArraySet $r3, $r4, $r9;
        boolean $z0;
        int $i0, $i1;
        com.android.server.wm.AppTransition $r10;
        com.android.server.wm.Letterbox r14;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r13 := @parameter0: com.android.server.wm.DisplayContent;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        specialinvoke r0.<com.android.server.wm.WindowToken: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r13);

        if r1 == null goto label5;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        if r1 != $r2 goto label1;

        goto label5;

     label1:
        $r3 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z0 = virtualinvoke $r3.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r9 = $r8.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r10 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i1 = virtualinvoke $r10.<com.android.server.wm.AppTransition: int getAppTransition()>();

        virtualinvoke $r11.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>($i1, 1);

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r12.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

     label2:
        $r4 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke $r4.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        $r5 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if $r5 != r0 goto label3;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean setFocusedApp(com.android.server.wm.ActivityRecord)>(null);

        $r7 = virtualinvoke r13.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord getTopMostActivity()>();

        if $r7 != r0 goto label3;

        virtualinvoke r13.<com.android.server.wm.DisplayContent: boolean setFocusedApp(com.android.server.wm.ActivityRecord)>(r0);

     label3:
        r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r14 == null goto label4;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $i0 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r14.<com.android.server.wm.Letterbox: void onMovedToDisplay(int)>($i0);

     label4:
        return;

     label5:
        return;
    }

    void onFirstWindowDrawn(com.android.server.wm.WindowState, com.android.server.wm.WindowStateAnimator)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, $r2;
        boolean $z0;
        com.android.server.wm.WindowToken $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        com.android.server.wm.WindowStateAnimator r6;
        java.lang.String r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r6 := @parameter1: com.android.server.wm.WindowStateAnimator;

        r0.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn> = 1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeDeadWindows()>();

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r2 == null goto label2;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z0 == 0 goto label1;

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 1677260366, 0, null, $r4);

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowState: void cancelAnimation()>();

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

        return;
    }

    public void onLeashAnimationStarting(android.view.SurfaceControl$Transaction, android.view.SurfaceControl)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2, $r8, $r10, $r12, $r15;
        boolean $z0, $z1, $z2;
        android.graphics.Rect $r3, $r7, $r14, $r17;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.AppTransitionController $r5;
        int $i0, $i1;
        com.android.server.wm.Task $r6, $r18;
        com.android.server.wm.AnimatingActivityRegistry r19;
        com.android.server.wm.ActivityStack r20;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry>;

        if r19 == null goto label1;

        virtualinvoke r19.<com.android.server.wm.AnimatingActivityRegistry: void notifyStarting(com.android.server.wm.ActivityRecord)>(r0);

     label1:
        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mNeedsAnimationBoundsLayer>;

        if $z0 == 0 goto label6;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpRect>;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransitionController mAppTransitionController>;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getTransit()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.AppTransitionController: boolean isTransitWithinTask(int,com.android.server.wm.Task)>($i0, $r6);

        if $z1 == 0 goto label2;

        $r18 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r17 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpRect>;

        virtualinvoke $r18.<com.android.server.wm.Task: void getBounds(android.graphics.Rect)>($r17);

        goto label4;

     label2:
        r20 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        if r20 != null goto label3;

        return;

     label3:
        $r7 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpRect>;

        virtualinvoke r20.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>($r7);

     label4:
        $r8 = specialinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl createAnimationBoundsLayer(android.view.SurfaceControl$Transaction)>(r1);

        r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer> = $r8;

        $z2 = <com.android.server.wm.WindowManagerService: boolean sHierarchicalAnimations>;

        if $z2 != 0 goto label5;

        $r15 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer>;

        $r14 = r0.<com.android.server.wm.ActivityRecord: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,android.graphics.Rect)>($r15, $r14);

     label5:
        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>(r2, 0);

        $r10 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer>;

        $i1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: int getAnimationLayer()>();

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>($r10, $i1);

        $r12 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mAnimationBoundsLayer>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>(r2, $r12);

     label6:
        return;
    }

    void onParentChanged(com.android.server.wm.ConfigurationContainer, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.ActivityRecord r0, $r2;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        com.android.server.wm.Task $r1, $r5, r16, r17, $r18, r19;
        com.android.server.wm.ActivityStack$ActivityState $r3;
        com.android.server.wm.ActivityStack $r4, $r6, r20;
        java.util.ArrayList $r7;
        com.android.server.wm.DisplayContent $r8, $r9;
        android.util.ArraySet $r10;
        android.service.voice.IVoiceInteractionSession $r11;
        long $l0, $l1;
        com.android.server.wm.ActivityTaskManagerService $r12, $r13;
        com.android.server.wm.ConfigurationContainer r14, r15;
        com.android.server.wm.AnimatingActivityRegistry r21, r22;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r14 := @parameter0: com.android.server.wm.ConfigurationContainer;

        r15 := @parameter1: com.android.server.wm.ConfigurationContainer;

        if r15 == null goto label01;

        r16 = (com.android.server.wm.Task) r15;

        goto label02;

     label01:
        r16 = null;

     label02:
        if r14 == null goto label03;

        r17 = (com.android.server.wm.Task) r14;

        goto label04;

     label03:
        r17 = null;

     label04:
        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task> = r17;

        specialinvoke r0.<com.android.server.wm.WindowToken: void onParentChanged(com.android.server.wm.ConfigurationContainer,com.android.server.wm.ConfigurationContainer)>(r14, r15);

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isPersistable()>();

        z5 = 0;

        if z0 == 0 goto label06;

        if r16 == null goto label05;

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService: void notifyTaskPersisterLocked(com.android.server.wm.Task,boolean)>(r16, 0);

     label05:
        if r17 == null goto label06;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService: void notifyTaskPersisterLocked(com.android.server.wm.Task,boolean)>(r17, 0);

     label06:
        if r15 != null goto label08;

        if r14 == null goto label08;

        $r11 = r17.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r11 == null goto label07;

        z5 = 1;

     label07:
        r0.<com.android.server.wm.ActivityRecord: boolean mVoiceInteraction> = z5;

        $l0 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: long getInputDispatchingTimeoutLocked(com.android.server.wm.ActivityRecord)>(r0);

        $l1 = $l0 * 1000000L;

        r0.<com.android.server.wm.ActivityRecord: long mInputDispatchingTimeoutNanos> = $l1;

        virtualinvoke r17.<com.android.server.wm.Task: android.graphics.Rect updateOverrideConfigurationFromLaunchBounds()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void updateSizeCompatMode()>();

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedMultiWindowMode> = $z3;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedPictureInPictureMode> = $z4;

     label08:
        $r18 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if $r18 != null goto label09;

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r8 == null goto label10;

        $r9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r10 = $r9.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke $r10.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        goto label10;

     label09:
        r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task mLastParent>;

        if r19 == null goto label10;

        $r4 = virtualinvoke r19.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r4 == null goto label10;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r7 = $r6.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        virtualinvoke $r7.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label10:
        r20 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        r21 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry>;

        if r21 == null goto label11;

        virtualinvoke r21.<com.android.server.wm.AnimatingActivityRegistry: void notifyFinished(com.android.server.wm.ActivityRecord)>(r0);

     label11:
        if r20 == null goto label12;

        r22 = virtualinvoke r20.<com.android.server.wm.ActivityStack: com.android.server.wm.AnimatingActivityRegistry getAnimatingActivityRegistry()>();

        goto label13;

     label12:
        r22 = null;

     label13:
        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry> = r22;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task mLastParent> = $r1;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void updateColorTransform()>();

        if r16 == null goto label14;

        virtualinvoke r16.<com.android.server.wm.Task: void cleanUpActivityReferences(com.android.server.wm.ActivityRecord)>(r0);

     label14:
        if r17 == null goto label15;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r3);

        if $z2 == 0 goto label15;

        virtualinvoke r17.<com.android.server.wm.Task: void setResumedActivity(com.android.server.wm.ActivityRecord,java.lang.String)>(r0, "onParentChanged");

     label15:
        if r20 == null goto label16;

        $r2 = virtualinvoke r20.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r2 != r0 goto label16;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn>;

        if $z1 == 0 goto label16;

        virtualinvoke r20.<com.android.server.wm.ActivityStack: void setHasBeenVisible(boolean)>(1);

     label16:
        return;
    }

    void onRemovedFromDisplay()
    {
        com.android.server.wm.ActivityRecord r0, $r51;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z12, $z13, z17, $z18;
        long l0;
        com.android.server.wm.DisplayContent $r1, $r3, $r9, $r11, $r14, $r27, $r39, r50;
        android.util.ArraySet $r2, $r10, $r40;
        com.android.server.wm.UnknownAppVisibilityController $r4;
        com.android.server.wm.WindowManagerService $r5, $r17, $r19;
        com.android.server.wm.TaskSnapshotController $r6;
        com.android.server.wm.ActivityStackSupervisor $r7;
        com.android.server.wm.ActivityMetricsLogger $r8;
        com.android.server.wm.AppTransition $r12;
        com.android.server.wm.StartingData $r13;
        android.content.ComponentName $r15;
        com.android.server.wm.PinnedStackController $r16;
        com.android.server.wm.EmbeddedWindowController $r18;
        int $i1;
        java.lang.Object[] $r20, $r25, $r31, $r35, $r41;
        com.android.server.wm.ProtoLogGroup $r21, $r26, $r32, $r36, $r42;
        java.lang.Long $r22;
        java.util.ArrayList $r23, $r24;
        android.os.IBinder $r28;
        java.util.List $r29;
        java.lang.String $r30, r43, r44, r45, r46, r47, r49, r52;
        java.lang.Boolean $r33, $r37, $r38;
        com.android.server.wm.AnimationAdapter $r34;
        com.android.server.wm.ActivityStack r48;
        com.android.server.wm.Letterbox r53;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mRemovingFromDisplay>;

        if $z1 == 0 goto label01;

        return;

     label01:
        r0.<com.android.server.wm.ActivityRecord: boolean mRemovingFromDisplay> = 1;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z2 == 0 goto label02;

        r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r42 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r41 = newarray (java.lang.Object)[1];

        $r41[0] = r43;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r42, -1352076759, 0, null, $r41);

     label02:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void commitVisibility(boolean,boolean)>(0, 1);

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = $r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        virtualinvoke $r4.<com.android.server.wm.UnknownAppVisibilityController: void appRemovedOrHidden(com.android.server.wm.ActivityRecord)>(r0);

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r6.<com.android.server.wm.TaskSnapshotController: void onAppRemoved(com.android.server.wm.ActivityRecord)>(r0);

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()>();

        virtualinvoke $r8.<com.android.server.wm.ActivityMetricsLogger: void notifyActivityRemoved(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean waitingToShow> = 0;

        z17 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(7);

        $r9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r10 = $r9.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $z4 = virtualinvoke $r10.<android.util.ArraySet: boolean contains(java.lang.Object)>(r0);

        if $z4 == 0 goto label03;

        z17 = 1;

        goto label04;

     label03:
        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r12 = $r11.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z5 = virtualinvoke $r12.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z5 == 0 goto label04;

        $r39 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r40 = $r39.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke $r40.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        z17 = 1;

     label04:
        $z18 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z18 == 0 goto label05;

        r44 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r34 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.AnimationAdapter getAnimation()>();

        r45 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r34);

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        $r36 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r35 = newarray (java.lang.Object)[4];

        $r35[0] = r44;

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z17);

        $r35[1] = $r37;

        $r35[2] = r45;

        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r35[3] = $r38;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r36, 1653210583, 204, null, $r35);

     label05:
        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z6 == 0 goto label06;

        r46 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r30 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(4);

        r47 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r30);

        $r32 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r31 = newarray (java.lang.Object)[3];

        $r31[0] = r46;

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z17);

        $r31[1] = $r33;

        $r31[2] = r47;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r32, -1539974875, 12, null, $r31);

     label06:
        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r13 == null goto label07;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

     label07:
        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z7 == 0 goto label08;

        $r27 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r29 = $r27.<com.android.server.wm.DisplayContent: java.util.List mNoAnimationNotifyOnTransitionFinished>;

        $r28 = r0.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        interfaceinvoke $r29.<java.util.List: boolean add(java.lang.Object)>($r28);

     label08:
        r48 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        if z17 == 0 goto label11;

        $z12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isEmpty()>();

        if $z12 != 0 goto label11;

        $z13 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z13 == 0 goto label09;

        r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r26 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = r49;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r26, -2109936758, 0, null, $r25);

     label09:
        if r48 == null goto label10;

        $r24 = r48.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        virtualinvoke $r24.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label10:
        r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting> = 1;

        goto label13;

     label11:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void cancelAnimation()>();

        if r48 == null goto label12;

        $r23 = r48.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        virtualinvoke $r23.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label12:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeIfPossible()>();

     label13:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreen(boolean,boolean)>(1, 1);

        r50 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r51 = r50.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if $r51 != r0 goto label15;

        $z8 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z8 == 0 goto label14;

        r52 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $i1 = virtualinvoke r50.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        l0 = (long) $i1;

        $r21 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r20 = newarray (java.lang.Object)[2];

        $r20[0] = r52;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r20[1] = $r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r21, -771177730, 4, null, $r20);

     label14:
        virtualinvoke r50.<com.android.server.wm.DisplayContent: boolean setFocusedApp(com.android.server.wm.ActivityRecord)>(null);

        $r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r19.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

     label15:
        r53 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r53 == null goto label16;

        virtualinvoke r53.<com.android.server.wm.Letterbox: void destroy()>();

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox> = null;

     label16:
        if z17 != 0 goto label17;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

     label17:
        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r16 = $r14.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        $r15 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        virtualinvoke $r16.<com.android.server.wm.PinnedStackController: void onActivityHidden(android.content.ComponentName)>($r15);

        $r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r18 = $r17.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

        virtualinvoke $r18.<com.android.server.wm.EmbeddedWindowController: void onActivityRemoved(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean mRemovingFromDisplay> = 0;

        return;
    }

    void onStartingWindowDrawn()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.Task: void setHasBeenVisible(boolean)>(1);

     label1:
        return;
    }

    void onWindowReplacementTimeout()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void onWindowReplacementTimeout()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void onWindowsDrawn(boolean, long)
    {
        com.android.server.wm.ActivityRecord r0, $r6;
        boolean z0, z1;
        long l0, $l1, $l2;
        com.android.server.wm.ActivityStackSupervisor $r1, $r3, $r4;
        com.android.server.wm.ActivityMetricsLogger $r2;
        com.android.server.wm.TaskDisplayArea $r5;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r7;
        int i3, i4;
        com.android.server.wm.Task r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        r0.<com.android.server.wm.ActivityRecord: boolean mDrawn> = z0;

        if z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()>();

        r7 = virtualinvoke $r2.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot notifyWindowsDrawn(com.android.server.wm.ActivityRecord,long)>(r0, l0);

        if r7 == null goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        i3 = -1;

        if z1 == 0 goto label4;

        i4 = r7.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsDrawnDelayMs>;

        goto label5;

     label4:
        i4 = -1;

     label5:
        if z1 == 0 goto label6;

        i3 = virtualinvoke r7.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int getLaunchState()>();

     label6:
        if z1 != 0 goto label7;

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r6 = virtualinvoke $r5.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r0 != $r6 goto label8;

     label7:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $l1 = (long) i4;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void reportActivityLaunchedLocked(boolean,com.android.server.wm.ActivityRecord,long,int)>(0, r0, $l1, i3);

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $l2 = (long) i4;

        virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord,long)>(r0, $l2);

     label8:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void finishLaunchTickingLocked()>();

        r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r8 == null goto label9;

        virtualinvoke r8.<com.android.server.wm.Task: void setHasBeenVisible(boolean)>(1);

     label9:
        return;
    }

    void onWindowsGone()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: boolean nowVisible> = 0;

        return;
    }

    void onWindowsVisible()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStackSupervisor $r1;
        boolean $z0;
        long $l0;
        com.android.server.wm.ActivityTaskManagerService $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord)>(r0);

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.ActivityRecord: boolean nowVisible> = 1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.wm.ActivityRecord: long lastVisibleTime> = $l0;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: void scheduleAppGcsLocked()>();

     label1:
        return;
    }

    void pauseKeyDispatchingLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        com.android.server.wm.DisplayContent $r1, $r2;
        com.android.server.wm.InputMonitor $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean keysPaused>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.ActivityRecord: boolean keysPaused> = 1;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r3.<com.android.server.wm.InputMonitor: void pauseDispatchingLw(com.android.server.wm.WindowToken)>(r0);

     label1:
        return;
    }

    void postWindowRemoveStartingWindowCleanup(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState $r1, r11;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, $i1;
        com.android.server.policy.WindowManagerPolicy$StartingSurface $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object[] $r5, $r7, $r9;
        com.android.server.wm.ProtoLogGroup $r6, $r8, $r10;
        java.lang.String r12, r13;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r11 := @parameter0: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r1 != r11 goto label2;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z4 == 0 goto label1;

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 1853793312, 0, null, $r9);

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

        goto label6;

     label2:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        if $i0 != 0 goto label4;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z2 == 0 goto label3;

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r7 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 1671994402, 0, null, $r7);

     label3:
        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = null;

        $z3 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow>;

        if $z3 == 0 goto label6;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisible(boolean)>(0);

        goto label6;

     label4:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i1 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        if $i1 != 1 goto label6;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        if $r4 == null goto label6;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z0 != 0 goto label6;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z1 == 0 goto label5;

        r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r13;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -1715268616, 0, null, $r5);

     label5:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

     label6:
        return;
    }

    void prepareSurfaces()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, $z3, z4;
        com.android.server.wm.WindowContainerThumbnail $r1, $r10;
        android.view.SurfaceControl$Transaction $r2, $r3, $r6;
        android.view.SurfaceControl $r4, $r7, $r9;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z0 != 0 goto label2;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimatingExcluding(int,int)>(2, 2);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        $r9 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        if $r9 == null goto label5;

        if z4 == 0 goto label4;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mLastSurfaceShowing>;

        if $z2 != 0 goto label4;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        $r7 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r6.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>($r7);

        goto label5;

     label4:
        if z4 != 0 goto label5;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mLastSurfaceShowing>;

        if $z1 == 0 goto label5;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction hide(android.view.SurfaceControl)>($r4);

     label5:
        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        if $r10 == null goto label6;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainerThumbnail mThumbnail>;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r1.<com.android.server.wm.WindowContainerThumbnail: void setShowing(android.view.SurfaceControl$Transaction,boolean)>($r2, z4);

     label6:
        r0.<com.android.server.wm.ActivityRecord: boolean mLastSurfaceShowing> = z4;

        specialinvoke r0.<com.android.server.wm.WindowToken: void prepareSurfaces()>();

        return;
    }

    void registerRemoteAnimations(android.view.RemoteAnimationDefinition)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.RemoteAnimationDefinition r1;
        com.android.server.wm._$$Lambda$ju_KnYxEFekr6LzoWamCeaO5FHQ $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.RemoteAnimationDefinition;

        r0.<com.android.server.wm.ActivityRecord: android.view.RemoteAnimationDefinition mRemoteAnimationDefinition> = r1;

        if r1 == null goto label1;

        $r2 = new com.android.server.wm._$$Lambda$ju_KnYxEFekr6LzoWamCeaO5FHQ;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$ju_KnYxEFekr6LzoWamCeaO5FHQ: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        virtualinvoke r1.<android.view.RemoteAnimationDefinition: void linkToDeath(android.os.IBinder$DeathRecipient)>($r2);

     label1:
        return;
    }

    void relaunchActivityLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.android.server.wm.ActivityTaskManagerService $r1, $r9, $r12;
        com.android.server.wm.Task $r2, $r16;
        java.lang.String $r3, $r17;
        android.content.res.Configuration $r4, $r5;
        com.android.server.wm.WindowProcessController $r6;
        android.app.IApplicationThread $r7;
        com.android.server.wm.ActivityRecord$Token $r8;
        com.android.server.wm.ClientLifecycleManager $r10;
        com.android.server.wm.ActivityStack$ActivityState $r11;
        com.android.server.wm.AppWarnings $r13;
        com.android.server.wm.DisplayContent $r14, $r15;
        android.os.RemoteException $r18;
        java.util.ArrayList r19, r20;
        android.util.MergedConfiguration r21;
        android.app.servertransaction.ActivityRelaunchItem r22;
        android.app.servertransaction.ActivityLifecycleItem r23;
        android.app.servertransaction.ClientTransaction r24;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z2 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mSuppressResizeConfigChanges>;

        if $z2 == 0 goto label01;

        if z0 == 0 goto label01;

        r0.<com.android.server.wm.ActivityRecord: int configChangeFlags> = 0;

        return;

     label01:
        z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldBeResumed(com.android.server.wm.ActivityRecord)>(null);

        r19 = null;

        r20 = null;

        if z1 == 0 goto label02;

        r19 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        r20 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

     label02:
        if z1 == 0 goto label03;

        $i4 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i6 = $r16.<com.android.server.wm.Task: int mTaskId>;

        $r17 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmRelaunchResumeActivity(int,int,int,java.lang.String)>($i4, $i5, $i6, $r17);

        goto label04;

     label03:
        $i1 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i3 = $r2.<com.android.server.wm.Task: int mTaskId>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmRelaunchActivity(int,int,int,java.lang.String)>($i1, $i2, $i3, $r3);

     label04:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreenLocked(int)>(0);

     label05:
        r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig> = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startRelaunching()>();

        i0 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        r21 = new android.util.MergedConfiguration;

        $r4 = specialinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getProcessGlobalConfiguration()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getMergedOverrideConfiguration()>();

        specialinvoke r21.<android.util.MergedConfiguration: void <init>(android.content.res.Configuration,android.content.res.Configuration)>($r4, $r5);

        r22 = staticinvoke <android.app.servertransaction.ActivityRelaunchItem: android.app.servertransaction.ActivityRelaunchItem obtain(java.util.List,java.util.List,int,android.util.MergedConfiguration,boolean)>(r19, r20, i0, r21, z0);

     label06:
        if z1 == 0 goto label09;

     label07:
        $r14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        $r15 = $r14.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        $z3 = virtualinvoke $r15.<com.android.server.wm.DisplayContent: boolean isNextTransitionForward()>();

        r23 = staticinvoke <android.app.servertransaction.ResumeActivityItem: android.app.servertransaction.ResumeActivityItem obtain(boolean)>($z3);

     label08:
        goto label10;

     label09:
        r23 = staticinvoke <android.app.servertransaction.PauseActivityItem: android.app.servertransaction.PauseActivityItem obtain()>();

     label10:
        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r24 = staticinvoke <android.app.servertransaction.ClientTransaction: android.app.servertransaction.ClientTransaction obtain(android.app.IApplicationThread,android.os.IBinder)>($r7, $r8);

        virtualinvoke r24.<android.app.servertransaction.ClientTransaction: void addCallback(android.app.servertransaction.ClientTransactionItem)>(r22);

        virtualinvoke r24.<android.app.servertransaction.ClientTransaction: void setLifecycleStateRequest(android.app.servertransaction.ActivityLifecycleItem)>(r23);

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        virtualinvoke $r10.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>(r24);

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

     label13:
        if z1 == 0 goto label14;

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results> = null;

        r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents> = null;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings getAppWarningsLocked()>();

        virtualinvoke $r13.<com.android.server.wm.AppWarnings: void onResumeActivity(com.android.server.wm.ActivityRecord)>(r0);

        goto label15;

     label14:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removePauseTimeout()>();

        $r11 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r11, "relaunchActivityLocked");

     label15:
        r0.<com.android.server.wm.ActivityRecord: int configChangeFlags> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean preserveWindowOnDeferredRelaunch> = 0;

        return;

        catch android.os.RemoteException from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label12;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    volatile void removeChild(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm.WindowState $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        $r2 = (com.android.server.wm.WindowState) r1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeChild(com.android.server.wm.WindowState)>($r2);

        return;
    }

    void removeChild(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowList $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowToken: void removeChild(com.android.server.wm.WindowContainer)>(r1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void checkKeyguardFlagsChanged()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateLetterboxSurface(com.android.server.wm.WindowState)>(r1);

        return;
    }

    void removeDeadWindows()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1;
        java.lang.String r2;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label4;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.WindowState) $r5;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mAppDied>;

        if $z0 == 0 goto label3;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z1 == 0 goto label2;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, 1515161239, 0, null, $r6);

     label2:
        r1.<com.android.server.wm.WindowState: boolean mDestroying> = 1;

        virtualinvoke r1.<com.android.server.wm.WindowState: void removeIfPossible()>();

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return;
    }

    void removeFromHistory(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1;
        com.android.server.wm.ActivityStack$ActivityState $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void finishActivityResults(int,android.content.Intent,com.android.server.uri.NeededUriGrants)>(0, null, null);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void makeFinishingLocked()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void takeFromHistory()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeTimeouts()>();

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r2, "removeFromHistory");

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app> = null;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removeAppTokenFromDisplay()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void cleanUpActivityServices()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeUriPermissionsLocked()>();

        return;
    }

    void removeIfPossible()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting> = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeAllWindowsIfPossible()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeImmediately()>();

        return;
    }

    void removeImmediately()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onRemovedFromDisplay()>();

        specialinvoke r0.<com.android.server.wm.WindowToken: void removeImmediately()>();

        return;
    }

    void removeLaunchTickRunnable()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        java.lang.Runnable $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mLaunchTickRunnable>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: void removeCallbacks(java.lang.Runnable)>($r2);

        return;
    }

    void removeReplacedWindowIfNeeded(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, $r5;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        $z0 = virtualinvoke $r5.<com.android.server.wm.WindowState: boolean removeReplacedWindowIfNeeded(com.android.server.wm.WindowState)>(r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    void removeResultsLocked(com.android.server.wm.ActivityRecord, java.lang.String, int)
    {
        com.android.server.wm.ActivityRecord r0, r1, $r5;
        java.lang.String r2, $r6, $r7;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r3, $r8, r10;
        java.lang.Object $r4;
        boolean $z0;
        com.android.server.wm.ActivityResult r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r10 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        if r10 == null goto label7;

        $i1 = virtualinvoke r10.<java.util.ArrayList: int size()>();

        i3 = $i1 - 1;

     label1:
        if i3 < 0 goto label7;

        $r3 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r11 = (com.android.server.wm.ActivityResult) $r4;

        $r5 = r11.<com.android.server.wm.ActivityResult: com.android.server.wm.ActivityRecord mFrom>;

        if $r5 == r1 goto label2;

        goto label6;

     label2:
        $r6 = r11.<com.android.server.wm.ActivityResult: java.lang.String mResultWho>;

        if $r6 != null goto label3;

        if r2 == null goto label4;

        goto label6;

     label3:
        $r7 = r11.<com.android.server.wm.ActivityResult: java.lang.String mResultWho>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label4;

        goto label6;

     label4:
        $i2 = r11.<com.android.server.wm.ActivityResult: int mRequestCode>;

        if $i2 == i0 goto label5;

        goto label6;

     label5:
        $r8 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        virtualinvoke $r8.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

     label6:
        i3 = i3 + -1;

        goto label1;

     label7:
        return;
    }

    void removeStartingWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.policy.WindowManagerPolicy$StartingSurface r1, $r13;
        java.lang.String r2, r3, r4, $r14, r22, r23, r24;
        com.android.server.wm.WindowState $r5, $r12;
        com.android.server.wm.StartingData $r6, $r19;
        boolean $z0, $z1, $z3, $z4;
        java.lang.Object[] $r7, $r15, $r17, $r20;
        com.android.server.wm.ProtoLogGroup $r8, $r16, $r18, $r21;
        com.android.server.wm.WindowManagerService $r9;
        com.android.server.wm._$$Lambda$ActivityRecord$tt99EJHW_Nk5qgU9galJBIm5wXg $r10;
        android.os.Handler $r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r5 != null goto label3;

        $r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r19 == null goto label2;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z4 == 0 goto label1;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r21 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r21, -2127842445, 0, null, $r20);

     label1:
        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = null;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r6 == null goto label7;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = null;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface> = null;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow> = null;

        r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed> = 0;

        if r1 != null goto label5;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z3 == 0 goto label4;

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r17 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, 45285419, 0, null, $r17);

     label4:
        return;

     label5:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z1 == 0 goto label6;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        $r14 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r15 = newarray (java.lang.Object)[4];

        $r15[0] = r2;

        $r15[1] = r23;

        $r15[2] = r3;

        $r15[3] = r4;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, -1128015008, 0, null, $r15);

     label6:
        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r9.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r10 = new com.android.server.wm._$$Lambda$ActivityRecord$tt99EJHW_Nk5qgU9galJBIm5wXg;

        specialinvoke $r10.<com.android.server.wm._$$Lambda$ActivityRecord$tt99EJHW_Nk5qgU9galJBIm5wXg: void <init>(com.android.server.policy.WindowManagerPolicy$StartingSurface)>(r1);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        return;

     label7:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z0 == 0 goto label8;

        r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r24;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 146871307, 0, null, $r7);

     label8:
        return;
    }

    void removeTimeouts()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStackSupervisor $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: void removeIdleTimeoutForActivity(com.android.server.wm.ActivityRecord)>(r0);

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removePauseTimeout()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removeStopTimeout()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void removeDestroyTimeout()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void finishLaunchTickingLocked()>();

        return;
    }

    void removeUriPermissionsLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.uri.UriPermissionOwner r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner uriPermissions>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.uri.UriPermissionOwner: void removeUriPermissions()>();

        r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner uriPermissions> = null;

     label1:
        return;
    }

    void reparent(com.android.server.wm.Task, int, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i3;
        long l1, l2;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.Task $r3, $r12, r22;
        java.lang.StringBuilder $r4, $r17;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r11, $r21, r23, r25;
        boolean $z0;
        java.lang.Object[] $r13;
        com.android.server.wm.ProtoLogGroup $r14;
        java.lang.Long $r15, $r16;
        com.android.server.wm.ActivityRecord$Token $r19;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r22 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        r23 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r2 != null goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reparent: Attempted to reparent non-existing app token: ");

        $r19 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r21);

        return;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if $r3 == r22 goto label3;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label2;

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i3 = $r12.<com.android.server.wm.Task: int mTaskId>;

        l1 = (long) $i3;

        l2 = (long) i0;

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r25;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r13[2] = $r16;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, -303497363, 20, null, $r13);

        goto label2;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void reparent(com.android.server.wm.WindowContainer,int)>(r22, i0);

        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": task=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already the parent of r=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    protected void reparentSurfaceControl(android.view.SurfaceControl$Transaction, android.view.SurfaceControl)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2, $r4;
        com.android.server.wm.SurfaceAnimator $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.SurfaceAnimator mSurfaceAnimator>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.SurfaceAnimator: boolean hasLeash()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>($r4, r2);

     label1:
        return;
    }

    void reportDescendantOrientationChangeIfNeeded()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0;
        boolean $z0;
        com.android.server.wm.ActivityRecord$Token r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getRequestedOrientation()>();

        if $i0 != -2 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean mayFreezeScreenLocked()>();

        if $z0 == 0 goto label2;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        goto label3;

     label2:
        r1 = null;

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean onDescendantOrientationChanged(android.os.IBinder,com.android.server.wm.ConfigurationContainer)>(r1, r0);

        return;
    }

    void reportFullyDrawnLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;
        com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot r1;
        com.android.server.wm.ActivityStackSupervisor $r2, $r4;
        com.android.server.wm.ActivityMetricsLogger $r3;
        int $i0, $i2;
        long $l1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()>();

        r1 = virtualinvoke $r3.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot logAppTransitionReportedDrawn(com.android.server.wm.ActivityRecord,boolean)>(r0, z0);

        if r1 == null goto label1;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i0 = r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int windowsFullyDrawnDelayMs>;

        $l1 = (long) $i0;

        $i2 = virtualinvoke r1.<com.android.server.wm.ActivityMetricsLogger$TransitionInfoSnapshot: int getLaunchState()>();

        virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: void reportActivityLaunchedLocked(boolean,com.android.server.wm.ActivityRecord,long,int)>(0, r0, $l1, $i2);

     label1:
        return;
    }

    void requestUpdateWallpaperIfNeeded()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void requestUpdateWallpaperIfNeeded()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void resolveOverrideConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1, r2, $r5, $r6, r7, $r8;
        int i0, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets $r3;
        com.android.server.wm.Task $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<com.android.server.wm.WindowToken: void resolveOverrideConfiguration(android.content.res.Configuration)>(r1);

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        r7 = r1;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFixedRotationTransforming()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

        virtualinvoke $r5.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r1);

        $r6 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

        virtualinvoke $r6.<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>(r2);

        r7 = r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration mTmpConfig>;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$CompatDisplayInsets mCompatDisplayInsets>;

        if $r3 == null goto label2;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void resolveSizeCompatModeConfiguration(android.content.res.Configuration)>(r7);

        goto label4;

     label2:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        if $z1 == 0 goto label3;

        r2.<android.content.res.Configuration: int orientation> = 0;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean matchParentBounds()>();

        if $z2 != 0 goto label4;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r4.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration)>(r2, r7);

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.wm.ActivityRecord: void resolveFullscreenConfiguration(android.content.res.Configuration)>(r7);

     label4:
        $i2 = r0.<com.android.server.wm.ActivityRecord: int mConfigurationSeq>;

        i0 = $i2 + 1;

        r0.<com.android.server.wm.ActivityRecord: int mConfigurationSeq> = i0;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 1);

        r0.<com.android.server.wm.ActivityRecord: int mConfigurationSeq> = $i3;

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $i4 = r0.<com.android.server.wm.ActivityRecord: int mConfigurationSeq>;

        $r8.<android.content.res.Configuration: int seq> = $i4;

        return;
    }

    void restartProcessIfVisible()
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.StringBuilder $r2, $r19;
        java.lang.String $r5, $r22;
        boolean $z0, $z1, $z2, $z4;
        com.android.server.wm.ActivityStack$ActivityState $r6;
        com.android.server.wm.ActivityTaskManagerService $r7, $r11;
        com.android.server.wm._$$Lambda$ActivityRecord$ViqYcVmlHd9KpKtfJCaj_CATqDE $r8;
        com.android.server.wm.ActivityTaskManagerService$H $r9;
        com.android.server.wm.WindowContainer $r10;
        com.android.server.wm.ClientLifecycleManager $r12;
        com.android.server.wm.WindowProcessController $r13;
        android.app.IApplicationThread $r14;
        com.android.server.wm.ActivityRecord$Token $r15;
        android.app.servertransaction.StopActivityItem $r16;
        com.android.server.wm.ActivityStackSupervisor $r17;
        android.os.RemoteException $r18;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request to restart process of ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r5);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearSizeCompatMode()>();

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void updateSizeCompatMode()>();

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESTARTING_PROCESS>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r6, "restartActivityProcess");

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z2 == 0 goto label8;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean mHaveState>;

        if $z4 == 0 goto label3;

        goto label8;

     label3:
        $r10 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r10 == null goto label4;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreen()>();

     label4:
        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r16 = staticinvoke <android.app.servertransaction.StopActivityItem: android.app.servertransaction.StopActivityItem obtain(int)>(0);

        virtualinvoke $r12.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ActivityLifecycleItem)>($r14, $r15, $r16);

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown during restart ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r22, $r18);

     label7:
        $r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r17.<com.android.server.wm.ActivityStackSupervisor: void scheduleRestartTimeout(com.android.server.wm.ActivityRecord)>(r0);

        return;

     label8:
        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r9 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r8 = new com.android.server.wm._$$Lambda$ActivityRecord$ViqYcVmlHd9KpKtfJCaj_CATqDE;

        specialinvoke $r8.<com.android.server.wm._$$Lambda$ActivityRecord$ViqYcVmlHd9KpKtfJCaj_CATqDE: void <init>(com.android.server.wm.ActivityRecord)>(r0);

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r8);

        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void resumeKeyDispatchingLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        com.android.server.wm.DisplayContent $r1, $r2;
        com.android.server.wm.InputMonitor $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean keysPaused>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.ActivityRecord: boolean keysPaused> = 0;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r3.<com.android.server.wm.InputMonitor: void resumeDispatchingLw(com.android.server.wm.WindowToken)>(r0);

     label1:
        return;
    }

    boolean safelyDestroy(java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isDestroyable()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, r1);

        return $z1;

     label1:
        return 0;
    }

    void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.wm.ActivityRecord r0;
        org.xmlpull.v1.XmlSerializer r1;
        long $l0;
        java.lang.String $r2, $r4, $r6, $r8, r20, r21, r22;
        int $i1, $i2;
        boolean $z0, $z1;
        android.content.Intent $r11;
        android.os.PersistableBundle $r13, $r15;
        android.app.ActivityManager$TaskDescription r23;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $l0 = r0.<com.android.server.wm.ActivityRecord: long createTime>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "id", $r2);

        $i1 = r0.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "launched_from_uid", $r4);

        r20 = r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        if r20 == null goto label1;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "launched_from_package", r20);

     label1:
        r21 = r0.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        if r21 == null goto label2;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "launched_from_feature", r21);

     label2:
        r22 = r0.<com.android.server.wm.ActivityRecord: java.lang.String resolvedType>;

        if r22 == null goto label3;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "resolved_type", r22);

     label3:
        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean componentSpecified>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "component_specified", $r6);

        $i2 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "user_id", $r8);

        r23 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        if r23 == null goto label4;

        virtualinvoke r23.<android.app.ActivityManager$TaskDescription: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

     label4:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "intent");

        $r11 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        virtualinvoke $r11.<android.content.Intent: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "intent");

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isPersistable()>();

        if $z1 == 0 goto label5;

        $r13 = r0.<com.android.server.wm.ActivityRecord: android.os.PersistableBundle mPersistentState>;

        if $r13 == null goto label5;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "persistable_bundle");

        $r15 = r0.<com.android.server.wm.ActivityRecord: android.os.PersistableBundle mPersistentState>;

        virtualinvoke $r15.<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "persistable_bundle");

     label5:
        return;
    }

    void scheduleAddStartingWindow()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowManagerService $r1, $r4;
        com.android.server.wm.ActivityRecord$AddStartingWindow $r2, $r5;
        android.os.Handler $r3, $r6;
        boolean $z0, $z1;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r1.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AddStartingWindow mAddStartingWindow>;

        $z0 = virtualinvoke $r3.<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>($r2);

        if $z0 != 0 goto label2;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z1 == 0 goto label1;

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r7 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 1417601133, 0, null, $r7);

     label1:
        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r4.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$AddStartingWindow mAddStartingWindow>;

        virtualinvoke $r6.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r5);

     label2:
        return;
    }

    void schedulePauseTimeout()
    {
        com.android.server.wm.ActivityRecord r0;
        long $l0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        java.lang.Runnable $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.wm.ActivityRecord: long pauseTime> = $l0;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mPauseTimeoutRunnable>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: boolean postDelayed(java.lang.Runnable,long)>($r2, 500L);

        return;
    }

    boolean scheduleTopResumedActivityChanged(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.ClientLifecycleManager $r3;
        com.android.server.wm.WindowProcessController $r4;
        android.app.IApplicationThread $r5;
        com.android.server.wm.ActivityRecord$Token $r6;
        android.app.servertransaction.TopResumedActivityChangeItem $r7;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r7 = staticinvoke <android.app.servertransaction.TopResumedActivityChangeItem: android.app.servertransaction.TopResumedActivityChangeItem obtain(boolean)>(z0);

        virtualinvoke $r3.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ClientTransactionItem)>($r5, $r6, $r7);

     label2:
        return 1;

     label3:
        $r8 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void sendResult(int, java.lang.String, int, int, android.content.Intent, com.android.server.uri.NeededUriGrants)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i1, i2;
        java.lang.String r1, $r17;
        android.content.Intent r2;
        com.android.server.wm.ActivityStack$ActivityState $r3;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r4, $r10;
        com.android.server.wm.ClientLifecycleManager $r5;
        com.android.server.wm.WindowProcessController $r6;
        android.app.IApplicationThread $r7;
        com.android.server.wm.ActivityRecord$Token $r8;
        android.app.servertransaction.ActivityResultItem $r9;
        com.android.server.uri.UriGrantsManagerInternal $r11;
        com.android.server.uri.UriPermissionOwner $r12;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r14;
        com.android.server.uri.NeededUriGrants r18;
        java.util.ArrayList r19;
        android.app.ResultInfo r20;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: android.content.Intent;

        r18 := @parameter5: com.android.server.uri.NeededUriGrants;

        if i0 <= 0 goto label1;

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r11 = $r10.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.UriGrantsManagerInternal mUgmInternal>;

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner getUriPermissionsLocked()>();

        interfaceinvoke $r11.<com.android.server.uri.UriGrantsManagerInternal: void grantUriPermissionUncheckedFromIntent(com.android.server.uri.NeededUriGrants,com.android.server.uri.UriPermissionOwner)>(r18, $r12);

     label1:
        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r3);

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 == 0 goto label5;

     label2:
        r19 = new java.util.ArrayList;

        specialinvoke r19.<java.util.ArrayList: void <init>()>();

        r20 = new android.app.ResultInfo;

        specialinvoke r20.<android.app.ResultInfo: void <init>(java.lang.String,int,int,android.content.Intent)>(r1, i1, i2, r2);

        virtualinvoke r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r20);

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r9 = staticinvoke <android.app.servertransaction.ActivityResultItem: android.app.servertransaction.ActivityResultItem obtain(java.util.List)>(r19);

        virtualinvoke $r5.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ClientTransactionItem)>($r7, $r8, $r9);

     label3:
        return;

     label4:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown sending result to ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r17, $r13);

     label5:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>(null, r1, i1, i2, r2);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    void setAppLayoutChanges(int, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1, $i2;
        com.android.server.wm.WindowList $r1;
        boolean $z0;
        java.lang.String r2;
        com.android.server.wm.DisplayContent r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i1 = r3.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i2 = $i1 | i0;

        r3.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i2;

     label1:
        return;
    }

    void setAppTimeTracker(com.android.server.am.AppTimeTracker)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.am.AppTimeTracker r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.am.AppTimeTracker;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker> = r1;

        return;
    }

    void setClientVisible(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.String r1, r2, $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Boolean $r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mClientVisible>;

        if $z1 == z0 goto label3;

        if z0 != 0 goto label1;

        $z3 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        if $z3 == 0 goto label1;

        goto label3;

     label1:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z2 == 0 goto label2;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r3 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r1;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r4[1] = $r6;

        $r4[2] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, -2006946193, 12, null, $r4);

     label2:
        r0.<com.android.server.wm.ActivityRecord: boolean mClientVisible> = z0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void sendAppVisibilityToClients()>();

        return;

     label3:
        return;
    }

    void setCurrentLaunchCanTurnScreenOn(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mCurrentLaunchCanTurnScreenOn> = z0;

        return;
    }

    void setDeferHidingClient(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient> = z0;

        if z0 != 0 goto label2;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z2 != 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(0);

     label2:
        return;
    }

    void setDisablePreviewScreenshots(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mDisablePreviewScreenshots> = z0;

        return;
    }

    void setInheritShowWhenLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mInheritShownWhenLocked> = z0;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        return;
    }

    void setLastReportedConfiguration(android.util.MergedConfiguration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.MergedConfiguration r1;
        android.content.res.Configuration $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.util.MergedConfiguration;

        $r2 = virtualinvoke r1.<android.util.MergedConfiguration: android.content.res.Configuration getGlobalConfiguration()>();

        $r3 = virtualinvoke r1.<android.util.MergedConfiguration: android.content.res.Configuration getOverrideConfiguration()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void setLastReportedConfiguration(android.content.res.Configuration,android.content.res.Configuration)>($r2, $r3);

        return;
    }

    void setLastReportedGlobalConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.res.Configuration r1;
        android.util.MergedConfiguration $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.util.MergedConfiguration mLastReportedConfiguration>;

        virtualinvoke $r2.<android.util.MergedConfiguration: void setGlobalConfiguration(android.content.res.Configuration)>(r1);

        return;
    }

    protected void setLayer(android.view.SurfaceControl$Transaction, int)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        int i0;
        com.android.server.wm.SurfaceAnimator $r2;
        boolean $z0;
        android.view.SurfaceControl $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.SurfaceAnimator mSurfaceAnimator>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.SurfaceAnimator: boolean hasLeash()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>($r3, i0);

     label1:
        return;
    }

    void setMainWindowOpaque(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.WindowState r1;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;
        com.android.server.wm.WindowStateAnimator $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int format>;

        z1 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i0);

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z2 = z1 ^ 1;

        $z3 = z0 & $z2;

        virtualinvoke $r3.<com.android.server.wm.WindowStateAnimator: void setOpaqueLocked(boolean)>($z3);

        return;
    }

    boolean setOccludesParent(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, z2;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.WindowSurfacePlacer $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.Task $r4;
        com.android.server.wm.ActivityStack $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mOccludesParent>;

        if z0 == $z1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        r0.<com.android.server.wm.ActivityRecord: boolean mOccludesParent> = z0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setMainWindowOpaque(boolean)>(z0);

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r2.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

        if z2 == 0 goto label3;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if $r4 == null goto label3;

        if z0 != 0 goto label3;

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        virtualinvoke $r5.<com.android.server.wm.ActivityStack: void convertActivityToTranslucent(com.android.server.wm.ActivityRecord)>(r0);

     label3:
        if z2 != 0 goto label4;

        if z0 != 0 goto label5;

     label4:
        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

     label5:
        return z2;
    }

    void setPictureInPictureParams(android.app.PictureInPictureParams)
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.PictureInPictureParams r1, $r2;
        com.android.server.wm.Task $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.app.PictureInPictureParams;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        virtualinvoke $r2.<android.app.PictureInPictureParams: void copyOnlySet(android.app.PictureInPictureParams)>(r1);

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        virtualinvoke $r4.<com.android.server.wm.Task: void onPictureInPictureParamsChanged()>();

        return;
    }

    void setProcess(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityRecord r0, r4;
        com.android.server.wm.WindowProcessController r1;
        com.android.server.wm.Task $r2, r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app> = r1;

        r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

        goto label2;

     label1:
        r4 = null;

     label2:
        if r4 != r0 goto label3;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r2.<com.android.server.wm.Task: void setRootProcess(com.android.server.wm.WindowProcessController)>(r1);

     label3:
        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void addActivityIfNeeded(com.android.server.wm.ActivityRecord)>(r0);

        return;
    }

    protected void setRelativeLayer(android.view.SurfaceControl$Transaction, android.view.SurfaceControl, int)
    {
        com.android.server.wm.ActivityRecord r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2, $r4;
        int i0;
        com.android.server.wm.SurfaceAnimator $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.SurfaceAnimator mSurfaceAnimator>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.SurfaceAnimator: boolean hasLeash()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setRelativeLayer(android.view.SurfaceControl,android.view.SurfaceControl,int)>($r4, r2, i0);

     label1:
        return;
    }

    void setRequestedOrientation(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.TaskChangeNotificationController $r2;
        com.android.server.wm.Task $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean mayFreezeScreenLocked()>();

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void setOrientation(int,boolean)>(i0, $z0);

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i1 = $r3.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r2.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityRequestedOrientationChanged(int,int)>($i1, i0);

        return;
    }

    void setSavedState(android.os.Bundle)
    {
        com.android.server.wm.ActivityRecord r0;
        android.os.Bundle r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.os.Bundle;

        r0.<com.android.server.wm.ActivityRecord: android.os.Bundle mIcicle> = r1;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.wm.ActivityRecord: boolean mHaveState> = z0;

        return;
    }

    void setShowWhenLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mShowWhenLocked> = z0;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        return;
    }

    void setSizeConfigurations(int[], int[], int[])
    {
        com.android.server.wm.ActivityRecord r0;
        int[] r1, r2, r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        r0.<com.android.server.wm.ActivityRecord: int[] mHorizontalSizeConfigurations> = r1;

        r0.<com.android.server.wm.ActivityRecord: int[] mVerticalSizeConfigurations> = r2;

        r0.<com.android.server.wm.ActivityRecord: int[] mSmallestSizeConfigurations> = r3;

        return;
    }

    void setSleeping(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mSetToSleep> = z0;

        return;
    }

    void setState(com.android.server.wm.ActivityStack$ActivityState, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1, $r19;
        com.android.server.wm.Task r2;
        com.android.server.wm.ActivityStack$ActivityState $r3, $r4, $r5, $r6, $r7, r20, $r22;
        com.android.server.wm.ActivityTaskManagerService $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0;
        com.android.server.wm.WindowContainer $r14;
        java.lang.StringBuilder $r15;
        com.android.server.wm.ActivityRecord$Token $r17;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r20 := @parameter0: com.android.server.wm.ActivityStack$ActivityState;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        if r20 != $r3 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState> = r20;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.server.wm.Task: void onActivityStateChanged(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>(r0, r20, r1);

     label2:
        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        if r20 != $r4 goto label4;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isSleeping()>();

        if $z0 != 0 goto label4;

        $r14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r14 != null goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to notify stopping on non-existing app token: ");

        $r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r19);

        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void detachChildren()>();

     label4:
        $r22 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if r20 != $r22 goto label5;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService: void updateBatteryStats(com.android.server.wm.ActivityRecord,boolean)>(r0, 1);

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService: void updateActivityUsageStats(com.android.server.wm.ActivityRecord,int)>(r0, 1);

        goto label8;

     label5:
        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        if r20 != $r5 goto label6;

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: void updateBatteryStats(com.android.server.wm.ActivityRecord,boolean)>(r0, 0);

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r11.<com.android.server.wm.ActivityTaskManagerService: void updateActivityUsageStats(com.android.server.wm.ActivityRecord,int)>(r0, 2);

        goto label8;

     label6:
        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        if r20 != $r6 goto label7;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void updateActivityUsageStats(com.android.server.wm.ActivityRecord,int)>(r0, 23);

        goto label8;

     label7:
        $r7 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        if r20 != $r7 goto label8;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: void updateActivityUsageStats(com.android.server.wm.ActivityRecord,int)>(r0, 24);

     label8:
        return;
    }

    void setTaskDescription(android.app.ActivityManager$TaskDescription)
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityManager$TaskDescription r1;
        android.graphics.Bitmap r2;
        java.lang.String $r3, r10, r11;
        com.android.server.wm.Task $r4, $r6, $r12;
        int $i0, $i2;
        long $l1;
        java.io.File $r5, $r7;
        com.android.server.wm.ActivityTaskManagerService $r8;
        com.android.server.wm.RecentTasks $r9;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.app.ActivityManager$TaskDescription;

        $r3 = virtualinvoke r1.<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()>();

        if $r3 != null goto label1;

        r2 = virtualinvoke r1.<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>();

        if r2 == null goto label1;

        $l1 = r0.<com.android.server.wm.ActivityRecord: long createTime>;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i0 = $r4.<com.android.server.wm.Task: int mTaskId>;

        r10 = staticinvoke <com.android.server.wm.ActivityRecord: java.lang.String createImageFilename(long,int)>($l1, $i0);

        $r5 = new java.io.File;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $i2 = $r6.<com.android.server.wm.Task: int mUserId>;

        $r7 = staticinvoke <com.android.server.wm.TaskPersister: java.io.File getUserImagesDir(int)>($i2);

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, r10);

        r11 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        virtualinvoke $r9.<com.android.server.wm.RecentTasks: void saveImage(android.graphics.Bitmap,java.lang.String)>(r2, r11);

        virtualinvoke r1.<android.app.ActivityManager$TaskDescription: void setIconFilename(java.lang.String)>(r11);

     label1:
        r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription> = r1;

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke $r12.<com.android.server.wm.Task: void updateTaskDescription()>();

        return;
    }

    void setTaskForReuse(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.Task;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task> = r1;

        return;
    }

    void setTaskOverlay(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mTaskOverlay> = z0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setAlwaysOnTop(boolean)>(z0);

        return;
    }

    void setTaskToAffiliateWith(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1, $r2;
        int i0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.Task;

        i0 = r0.<com.android.server.wm.ActivityRecord: int launchMode>;

        if i0 == 3 goto label1;

        if i0 == 2 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r2.<com.android.server.wm.Task: void setTaskToAffiliateWith(com.android.server.wm.Task)>(r1);

     label1:
        return;
    }

    void setTurnScreenOn(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mTurnScreenOn> = z0;

        return;
    }

    void setVisibility(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.ActivityStackSupervisor $r4, $r6;
        com.android.server.wm.ActivityMetricsLogger $r5;
        java.lang.StringBuilder $r7;
        com.android.server.wm.ActivityRecord$Token $r9;
        java.lang.String $r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r2 != null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set visibility of non-existing app token: ");

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r11);

        return;

     label1:
        if z0 == 0 goto label2;

        r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient> = 0;

     label2:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mDeferHidingClient>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisibility(boolean,boolean)>(z0, $z1);

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: void addWindowLayoutReasons(int)>(2);

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()>();

        virtualinvoke $r5.<com.android.server.wm.ActivityMetricsLogger: void notifyVisibilityChanged(com.android.server.wm.ActivityRecord)>(r0);

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6.<com.android.server.wm.ActivityStackSupervisor: boolean mAppVisibilitiesChangedSinceLastPause> = 1;

        return;
    }

    void setVisibility(boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0, r28;
        boolean z0, z1, z2, z3, $z4, $z7, $z8, $z9, $z11, $z14, $z15, $z16, $z18, $z19, $z20, $z21, $z22;
        java.lang.String r1, $r16, r23, r24, r26, r29;
        com.android.server.wm.DisplayContent $r2, $r6, r25;
        android.util.ArraySet $r3, $r4, $r5, $r7, $r10, $r14;
        int $i0;
        java.lang.Object[] $r8, $r11, $r17;
        com.android.server.wm.ProtoLogGroup $r9, $r12, $r18;
        com.android.server.wm.'-$$Lambda$ActivityRecord$XnMxHSlbhK9x7qGQcZpHSkPOQvQ' $r13;
        com.android.server.wm.ActivityRecord$Token $r15;
        java.lang.Boolean $r19, $r20, $r21;
        com.android.server.wm.AppTransition r22;
        com.android.server.wm.WindowState r27;
        java.util.function.Consumer r30;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        r22 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        if z0 != 0 goto label02;

        $z18 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z18 != 0 goto label02;

        if z1 != 0 goto label01;

        $z19 = r0.<com.android.server.wm.ActivityRecord: boolean mLastDeferHidingClient>;

        if $z19 == 0 goto label01;

        r0.<com.android.server.wm.ActivityRecord: boolean mLastDeferHidingClient> = z1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setClientVisible(boolean)>(0);

     label01:
        return;

     label02:
        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z4 == 0 goto label03;

        $r15 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        z3 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        $r16 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(6);

        r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r17 = newarray (java.lang.Object)[6];

        $r17[0] = r23;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r17[1] = $r19;

        $r17[2] = r1;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r17[3] = $r20;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r17[4] = $r21;

        $r17[5] = r24;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, -374767836, 972, null, $r17);

     label03:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onChildVisibilityRequested(boolean)>(z0);

        r25 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = r25.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r3.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        $r4 = r25.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke $r4.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean waitingToShow> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested> = z0;

        r0.<com.android.server.wm.ActivityRecord: boolean mLastDeferHidingClient> = z1;

        if z0 != 0 goto label04;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void removeDeadWindows()>();

        goto label10;

     label04:
        $z7 = virtualinvoke r22.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z7 != 0 goto label05;

        $z16 = virtualinvoke r22.<com.android.server.wm.AppTransition: boolean isReady()>();

        if $z16 == 0 goto label05;

        $r14 = r25.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r14.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

     label05:
        r0.<com.android.server.wm.ActivityRecord: boolean startingMoved> = 0;

        $z20 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z20 == 0 goto label07;

        $z15 = r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped>;

        if $z15 == 0 goto label06;

        goto label07;

     label06:
        goto label08;

     label07:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearAllDrawn()>();

        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z8 != 0 goto label08;

        r0.<com.android.server.wm.ActivityRecord: boolean waitingToShow> = 1;

        $z14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z14 != 0 goto label08;

        $r13 = <com.android.server.wm._$$Lambda$ActivityRecord$XnMxHSlbhK9x7qGQcZpHSkPOQvQ: com.android.server.wm.'-$$Lambda$ActivityRecord$XnMxHSlbhK9x7qGQcZpHSkPOQvQ' INSTANCE>;

        r30 = (java.util.function.Consumer) $r13;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void forAllWindows(java.util.function.Consumer,boolean)>(r30, 1);

        goto label08;

     label08:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setClientVisible(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void requestUpdateWallpaperIfNeeded()>();

        $z21 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z21 == 0 goto label09;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r26;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 1224184681, 0, null, $r11);

     label09:
        r0.<com.android.server.wm.ActivityRecord: boolean mAppStopped> = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void transferStartingWindowFromHiddenAboveTokenIfNeeded()>();

     label10:
        $z22 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean okToAnimate(boolean)>(1);

        if $z22 == 0 goto label15;

        $z9 = virtualinvoke r22.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z9 == 0 goto label15;

        if z0 == 0 goto label11;

        $r10 = r25.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r10.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean mEnteringAnimation> = 1;

        goto label12;

     label11:
        $r5 = r25.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean mEnteringAnimation> = 0;

     label12:
        $i0 = virtualinvoke r22.<com.android.server.wm.AppTransition: int getAppTransition()>();

        if $i0 != 16 goto label14;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        r27 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState findFocusedWindow()>();

        if r27 == null goto label14;

        r28 = r27.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r28 == null goto label14;

        $z11 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z11 == 0 goto label13;

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r28);

        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r29;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, -1847087163, 0, null, $r8);

     label13:
        $r7 = r25.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r28);

     label14:
        return;

     label15:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void commitVisibility(boolean,boolean)>(z0, 1);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

        return;
    }

    void setVisible(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mVisible>;

        if z0 == $z1 goto label1;

        r0.<com.android.server.wm.ActivityRecord: boolean mVisible> = z0;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleAnimation()>();

     label1:
        return;
    }

    void setVoiceSessionLocked(android.service.voice.IVoiceInteractionSession)
    {
        com.android.server.wm.ActivityRecord r0;
        android.service.voice.IVoiceInteractionSession r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.service.voice.IVoiceInteractionSession;

        r0.<com.android.server.wm.ActivityRecord: android.service.voice.IVoiceInteractionSession voiceSession> = r1;

        r0.<com.android.server.wm.ActivityRecord: boolean pendingVoiceInteractionStart> = 0;

        return;
    }

    void setWillCloseOrEnterPip(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.ActivityRecord: boolean mWillCloseOrEnterPip> = z0;

        return;
    }

    void setWillReplaceChildWindows()
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1471946192, 0, null, $r6);

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        virtualinvoke $r5.<com.android.server.wm.WindowState: void setWillReplaceChildWindows()>();

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    void setWillReplaceWindows(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        java.lang.String r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z1 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1878839956, 0, null, $r6);

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        virtualinvoke $r5.<com.android.server.wm.WindowState: void setWillReplaceWindow(boolean)>(z0);

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    boolean shouldAnimate()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean shouldAnimate()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    boolean shouldApplyAnimation(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z2, $z3, $z4, z5, z6;
        com.android.server.wm.'-$$Lambda$zuO3rEvETpKsuJLTTdIHB2ijeho' $r1;
        com.android.internal.util.ToBooleanFunction r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z5 := @parameter0: boolean;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if z0 != z5 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z2 != 0 goto label1;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z4 != 0 goto label3;

     label1:
        if z5 == 0 goto label2;

        $r1 = <com.android.server.wm._$$Lambda$zuO3rEvETpKsuJLTTdIHB2ijeho: com.android.server.wm.'-$$Lambda$zuO3rEvETpKsuJLTTdIHB2ijeho' INSTANCE>;

        r2 = (com.android.internal.util.ToBooleanFunction) $r1;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r2, 1);

        if $z3 == 0 goto label2;

        goto label3;

     label2:
        z6 = 0;

        goto label4;

     label3:
        z6 = 1;

     label4:
        return z6;
    }

    boolean shouldBeVisible()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean checkBehindFullscreenActivity(com.android.server.wm.ActivityRecord,java.util.function.Consumer)>(r0, null);

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldBeVisible(boolean,boolean)>($z0, 0);

        return $z1;
    }

    boolean shouldBeVisible(boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0, $r3;
        com.android.server.wm.ActivityStack r1;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, z14, z15, z16, z17, z18, z19, $z20;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.TaskDisplayArea $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z12 := @parameter0: boolean;

        z13 := @parameter1: boolean;

        if z12 == 0 goto label01;

        $z11 = r0.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind>;

        if $z11 == 0 goto label02;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean okToShowLocked()>();

        if $z1 == 0 goto label02;

        z14 = 1;

        goto label03;

     label02:
        z14 = 0;

     label03:
        r0.<com.android.server.wm.ActivityRecord: boolean visibleIgnoringKeyguard> = z14;

        if z13 == 0 goto label04;

        return z14;

     label04:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label05;

        return 0;

     label05:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z2 == 0 goto label06;

        $z10 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean isForceHidden()>();

        if $z10 == 0 goto label06;

        return 0;

     label06:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        $z3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean isSleeping()>();

        if $z3 == 0 goto label10;

        $z6 = r0.<com.android.server.wm.ActivityRecord: boolean mSetToSleep>;

        if $z6 == 0 goto label08;

        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canTurnScreenOn()>();

        if $z7 != 0 goto label08;

        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canShowWhenLocked()>();

        if $z8 != 0 goto label08;

        $z9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean containsDismissKeyguardWindow()>();

        if $z9 == 0 goto label07;

        goto label08;

     label07:
        z15 = 0;

        goto label09;

     label08:
        z15 = 1;

     label09:
        if z15 != 0 goto label10;

        return 0;

     label10:
        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r0 != $r3 goto label11;

        z16 = 1;

        goto label12;

     label11:
        z16 = 0;

     label12:
        $z4 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean isAttached()>();

        if $z4 == 0 goto label13;

        $r4 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z5 = virtualinvoke $r4.<com.android.server.wm.TaskDisplayArea: boolean isTopNotPinnedStack(com.android.server.wm.ActivityStack)>(r1);

        if $z5 == 0 goto label13;

        z17 = 1;

        goto label14;

     label13:
        z17 = 0;

     label14:
        z18 = r0.<com.android.server.wm.ActivityRecord: boolean visibleIgnoringKeyguard>;

        if z16 == 0 goto label15;

        if z17 == 0 goto label15;

        z19 = 1;

        goto label16;

     label15:
        z19 = 0;

     label16:
        $z20 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean checkKeyguardVisibility(com.android.server.wm.ActivityRecord,boolean,boolean)>(r0, z18, z19);

        return $z20;
    }

    public boolean shouldDeferAnimationFinish(java.lang.Runnable)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.Runnable r1;
        com.android.server.wm.AnimatingActivityRegistry r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.AnimatingActivityRegistry: boolean notifyAboutToFinish(com.android.server.wm.ActivityRecord,java.lang.Runnable)>(r0, r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean shouldFreezeBounds()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.Task r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.Task: boolean isDragResizing()>();

        return $z1;

     label2:
        return 0;
    }

    boolean shouldMakeActive(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1, $r8, $r13;
        boolean z0, $z1, $z2, $z3, z4;
        com.android.server.wm.ActivityStack$ActivityState $r2, $r3, $r4, $r5, $r6;
        com.android.server.wm.ActivityStack $r7;
        com.android.server.wm.ActivityStackSupervisor $r9;
        com.android.server.wm.Task $r10, $r12;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STARTED>;

        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r6, $r5, $r4, $r3, $r2);

        z4 = 0;

        if z0 == 0 goto label7;

        $r7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r8 = $r7.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting>;

        if $r8 == null goto label1;

        goto label7;

     label1:
        if r0 != r1 goto label2;

        return 0;

     label2:
        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z1 = virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: boolean readyToResume()>();

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind>;

        if $z2 == 0 goto label4;

        return 0;

     label4:
        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $z3 = virtualinvoke $r10.<com.android.server.wm.Task: boolean hasChild(com.android.server.wm.WindowContainer)>(r0);

        if $z3 == 0 goto label6;

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r13 != r0 goto label5;

        z4 = 1;

     label5:
        return z4;

     label6:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Activity not found in its task");

        throw $r11;

     label7:
        return 0;
    }

    boolean shouldPauseActivity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.ActivityStack$ActivityState $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldMakeActive(com.android.server.wm.ActivityRecord)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFocusable()>();

        if $z1 != 0 goto label1;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r3, $r2);

        if $z2 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        if $r4 != null goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    boolean shouldResumeActivity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0, $z1, z2;
        com.android.server.wm.ActivityStack$ActivityState $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldBeResumed(com.android.server.wm.ActivityRecord)>(r1);

        if $z0 == 0 goto label1;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r2);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean shouldUpdateConfigForDisplayChanged()
    {
        com.android.server.wm.ActivityRecord r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mLastReportedDisplayId>;

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        if $i0 == $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean shouldUseAppThemeSnapshot()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z2, z3;
        com.android.server.wm.'-$$Lambda$hmyT1cPAXSdeDiybNy20a-X2vVI' $r1;
        com.android.internal.util.ToBooleanFunction r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 = r0.<com.android.server.wm.ActivityRecord: boolean mDisablePreviewScreenshots>;

        z3 = 1;

        if z0 != 0 goto label2;

        $r1 = <com.android.server.wm._$$Lambda$hmyT1cPAXSdeDiybNy20a_X2vVI: com.android.server.wm.'-$$Lambda$hmyT1cPAXSdeDiybNy20a-X2vVI' INSTANCE>;

        r2 = (com.android.internal.util.ToBooleanFunction) $r1;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r2, 1);

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    boolean shouldUseSizeCompatMode()
    {
        com.android.server.wm.ActivityRecord r0, r7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        android.content.pm.ActivityInfo $r1, $r2, $r4;
        com.android.server.wm.ActivityTaskManagerService $r3;
        android.app.WindowConfiguration $r5;
        com.android.server.wm.Task r6;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        z0 = $r1.<android.content.pm.ActivityInfo: boolean supportsSizeChanges>;

        z8 = 0;

        if z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.app.WindowConfiguration getWindowConfiguration()>();

        $z7 = virtualinvoke $r5.<android.app.WindowConfiguration: boolean hasWindowDecorCaption()>();

        if $z7 == 0 goto label5;

     label2:
        r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r6 == null goto label3;

        r7 = virtualinvoke r6.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

        goto label4;

     label3:
        r7 = null;

     label4:
        if r7 == null goto label5;

        if r7 == r0 goto label5;

        $z6 = virtualinvoke r7.<com.android.server.wm.ActivityRecord: boolean shouldUseSizeCompatMode()>();

        if $z6 != 0 goto label5;

        return 0;

     label5:
        $z9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isResizeable()>();

        if $z9 != 0 goto label7;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z2 = virtualinvoke $r2.<android.content.pm.ActivityInfo: boolean isFixedOrientation()>();

        if $z2 != 0 goto label6;

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z5 = virtualinvoke $r4.<android.content.pm.ActivityInfo: boolean hasFixedAspectRatio()>();

        if $z5 == 0 goto label7;

     label6:
        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeStandard()>();

        if $z3 == 0 goto label7;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z4 = $r3.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities>;

        if $z4 != 0 goto label7;

        z8 = 1;

        goto label7;

     label7:
        return z8;
    }

    void showAllWindowsLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.'-$$Lambda$ActivityRecord$HtdWUNDfMjR5UE8GQF_gBD7WtdU' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = <com.android.server.wm._$$Lambda$ActivityRecord$HtdWUNDfMjR5UE8GQF_gBD7WtdU: com.android.server.wm.'-$$Lambda$ActivityRecord$HtdWUNDfMjR5UE8GQF_gBD7WtdU' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void forAllWindows(java.util.function.Consumer,boolean)>(r2, 0);

        return;
    }

    void showStartingWindow(com.android.server.wm.ActivityRecord, boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0, r10;
        boolean z0, z1, z2, z3, $z4, z5, $z6;
        android.content.res.CompatibilityInfo r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.CharSequence r2;
        android.content.pm.ActivityInfo $r3;
        android.content.pm.ApplicationInfo $r4;
        com.android.server.wm.ActivityTaskManagerService $r5;
        com.android.server.wm.ActivityStack$ActivityState $r6, $r7, $r8, $r9;
        android.app.ActivityOptions r11;
        java.lang.String r12;
        com.android.server.wm.ActivityRecord$Token r13;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r10 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean mTaskOverlay>;

        if $z4 == 0 goto label1;

        return;

     label1:
        r11 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if r11 == null goto label2;

        $i9 = virtualinvoke r11.<android.app.ActivityOptions: int getAnimationType()>();

        if $i9 != 5 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r4 = $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r1 = virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>($r4);

        r12 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        i0 = r0.<com.android.server.wm.ActivityRecord: int theme>;

        r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.CharSequence nonLocalizedLabel>;

        i1 = r0.<com.android.server.wm.ActivityRecord: int labelRes>;

        i2 = r0.<com.android.server.wm.ActivityRecord: int icon>;

        i3 = r0.<com.android.server.wm.ActivityRecord: int logo>;

        i4 = r0.<com.android.server.wm.ActivityRecord: int windowFlags>;

        if r10 == null goto label3;

        r13 = r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        goto label4;

     label3:
        r13 = null;

     label4:
        z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isProcessRunning()>();

        z3 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean allowTaskSnapshot()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $i5 = virtualinvoke $r6.<com.android.server.wm.ActivityStack$ActivityState: int ordinal()>();

        $r7 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STARTED>;

        $i6 = virtualinvoke $r7.<com.android.server.wm.ActivityStack$ActivityState: int ordinal()>();

        if $i5 < $i6 goto label5;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState mState>;

        $i7 = virtualinvoke $r8.<com.android.server.wm.ActivityStack$ActivityState: int ordinal()>();

        $r9 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        $i8 = virtualinvoke $r9.<com.android.server.wm.ActivityStack$ActivityState: int ordinal()>();

        if $i7 > $i8 goto label5;

        z5 = 1;

        goto label6;

     label5:
        z5 = 0;

     label6:
        $z6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean addStartingWindow(java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.os.IBinder,boolean,boolean,boolean,boolean,boolean)>(r12, i0, r1, r2, i1, i2, i3, i4, r13, z0, z1, z2, z3, z5);

        if $z6 == 0 goto label7;

        r0.<com.android.server.wm.ActivityRecord: int mStartingWindowState> = 1;

        goto label7;

     label7:
        return;
    }

    boolean showToCurrentUser()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;
        int $i0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mShowForAllUsers>;

        if $z0 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean isCurrentProfile(int)>($i0);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    void startFreezingScreen()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreen(int)>(-1);

        return;
    }

    void startFreezingScreen(int)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, z2, $z3, $z4, $z5, z7;
        java.lang.String r1, r24;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;
        com.android.server.wm.WindowManagerService $r6, $r7, $r9, $r10, $r12, r25;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.DisplayContent $r8, $r14;
        com.android.server.wm.WindowManagerService$H $r11, $r13;
        com.android.server.wm.DisplayRotation $r15;
        com.android.server.wm.ActivityRecord$Token $r16;
        java.lang.RuntimeException $r17;
        java.lang.Throwable $r18;
        java.lang.Object[] $r19;
        com.android.server.wm.ProtoLogGroup $r20;
        java.lang.Boolean $r21, $r22, $r23;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i3 := @parameter0: int;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label1;

        $r16 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        z1 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        z2 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18);

        $r20 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r19 = newarray (java.lang.Object)[5];

        $r19[0] = r24;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r19[1] = $r21;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r19[2] = $r22;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r19[3] = $r23;

        $r19[4] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r20, 1746778201, 252, null, $r19);

     label1:
        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z4 != 0 goto label2;

        return;

     label2:
        if i3 == -1 goto label3;

        z7 = 1;

        goto label4;

     label3:
        z7 = 0;

     label4:
        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        if $z5 != 0 goto label6;

        r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen> = 1;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService: void registerAppFreezeListener(com.android.server.wm.WindowManagerService$AppFreezeListener)>(r0);

        r25 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i0 = r25.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        $i1 = $i0 + 1;

        r25.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen> = $i1;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i2 = $r7.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        if $i2 != 1 goto label6;

        if z7 == 0 goto label5;

        $r14 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r15.<com.android.server.wm.DisplayRotation: void cancelSeamlessRotation()>();

     label5:
        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService: void startFreezingDisplay(int,int,com.android.server.wm.DisplayContent,int)>(0, 0, $r8, i3);

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r11.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(17);

        $r12 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r13 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(17, 2000L);

     label6:
        if z7 == 0 goto label7;

        return;

     label7:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i4 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i5 = 0;

     label8:
        if i5 >= i4 goto label9;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        $r5 = (com.android.server.wm.WindowState) $r4;

        virtualinvoke $r5.<com.android.server.wm.WindowState: void onStartFreezingScreen()>();

        i5 = i5 + 1;

        goto label8;

     label9:
        return;
    }

    void startFreezingScreenLocked(int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        com.android.server.wm.WindowProcessController $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreenLocked(com.android.server.wm.WindowProcessController,int)>($r1, i0);

        return;
    }

    void startFreezingScreenLocked(com.android.server.wm.WindowProcessController, int)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.ActivityRecord$Token $r2, $r7;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, r12;
        com.android.server.wm.WindowProcessController r10;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r10 := @parameter0: com.android.server.wm.WindowProcessController;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean mayFreezeScreenLocked(com.android.server.wm.WindowProcessController)>(r10);

        if $z0 == 0 goto label4;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r1 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to freeze screen with non-existing app token: ");

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        return;

     label1:
        $i1 = -536870913 & i0;

        if $i1 != 0 goto label3;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean okToDisplay()>();

        if $z1 == 0 goto label3;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z2 == 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 1836306327, 0, null, $r3);

     label2:
        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreen()>();

     label4:
        return;
    }

    void startLaunchTickingLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = <android.os.Build: boolean IS_USER>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $l0 = r0.<com.android.server.wm.ActivityRecord: long launchTickTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.wm.ActivityRecord: long launchTickTime> = $l2;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean continueLaunchTicking()>();

     label2:
        return;
    }

    void startRelaunching()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean shouldFreezeBounds()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void freezeBounds()>();

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void detachChildren()>();

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.ActivityRecord: int mPendingRelaunchCount> = $i1;

        return;
    }

    void stopFreezingScreen(boolean, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6;
        int i0, $i1, $i2, i3;
        com.android.server.wm.WindowList $r1, $r9;
        com.android.server.wm.WindowManagerService $r2, $r3, $r4, $r5, r17;
        com.android.server.wm.WindowSurfacePlacer $r6;
        java.lang.Object[] $r7, $r12;
        com.android.server.wm.ProtoLogGroup $r8, $r13;
        java.lang.Object $r10;
        com.android.server.wm.WindowState $r11;
        java.lang.Boolean $r14;
        java.lang.String r15, r16;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        if $z2 != 0 goto label1;

        return;

     label1:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label2;

        r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r15;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r12[1] = $r14;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, 539077569, 12, null, $r12);

     label2:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        z6 = 0;

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r11 = (com.android.server.wm.WindowState) $r10;

        $z5 = virtualinvoke $r11.<com.android.server.wm.WindowState: boolean onStopFreezingScreen()>();

        z6 = z6 | $z5;

        i3 = i3 + 1;

        goto label3;

     label4:
        if z1 != 0 goto label5;

        if z6 == 0 goto label7;

     label5:
        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z4 == 0 goto label6;

        r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r16;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -251259736, 0, null, $r7);

     label6:
        r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen> = 0;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void unregisterAppFreezeListener(com.android.server.wm.WindowManagerService$AppFreezeListener)>(r0);

        r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i1 = r17.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        $i2 = $i1 - 1;

        r17.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen> = $i2;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r3.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = r0;

     label7:
        if z0 == 0 goto label9;

        if z6 == 0 goto label8;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r6.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label8:
        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

     label9:
        return;
    }

    void stopFreezingScreenLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, z1, z2, $z3, $z4;
        java.lang.String r1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.ActivityRecord$Token $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Boolean $r6, $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean frozenBeforeDestroy>;

        if $z4 == 0 goto label4;

     label1:
        r0.<com.android.server.wm.ActivityRecord: boolean frozenBeforeDestroy> = 0;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r2 != null goto label2;

        return;

     label2:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label3;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFreezingScreen()>();

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r1;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r4[2] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 466506262, 60, null, $r4);

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void stopFreezingScreen(boolean,boolean)>(1, z0);

     label4:
        return;
    }

    void stopIfPossible()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z3, $z4, $z5, $z7;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r13;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r9;
        com.android.server.wm.ClientLifecycleManager $r4;
        com.android.server.wm.WindowProcessController $r5;
        android.app.IApplicationThread $r6;
        com.android.server.wm.ActivityRecord$Token $r7;
        android.app.servertransaction.StopActivityItem $r8;
        java.lang.Runnable $r10;
        com.android.server.wm.ActivityTaskManagerService$H $r11;
        java.lang.Exception $r12;
        com.android.server.wm.ActivityStack r14;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r14 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isNoHistory()>();

        if $z0 == 0 goto label1;

        $z3 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r14.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        if $z4 != 0 goto label1;

        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("stop-no-history", 0);

        if $i3 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void resumeKeyDispatchingLocked()>();

        return;

     label1:
        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z7 != 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void resumeKeyDispatchingLocked()>();

     label3:
        r0.<com.android.server.wm.ActivityRecord: boolean stopped> = 0;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r1, "stopIfPossible");

        $i0 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r2 = r0.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmStopActivity(int,int,java.lang.String)>($i0, $i1, $r2);

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $i2 = r0.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        $r8 = staticinvoke <android.app.servertransaction.StopActivityItem: android.app.servertransaction.StopActivityItem obtain(int)>($i2);

        virtualinvoke $r4.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ActivityLifecycleItem)>($r6, $r7, $r8);

        $z1 = virtualinvoke r14.<com.android.server.wm.ActivityStack: boolean shouldSleepOrShutDownActivities()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setSleeping(boolean)>(1);

     label4:
        $r9 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r11 = $r9.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r10 = r0.<com.android.server.wm.ActivityRecord: java.lang.Runnable mStopTimeoutRunnable>;

        virtualinvoke $r11.<com.android.server.wm.ActivityTaskManagerService$H: boolean postDelayed(java.lang.Runnable,long)>($r10, 11000L);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Exception thrown during pause", $r12);

        r0.<com.android.server.wm.ActivityRecord: boolean stopped> = 1;

        $r13 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r13, "stopIfPossible");

        $z5 = r0.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused>;

        if $z5 == 0 goto label7;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, "stop-except");

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    boolean supportsFreeform()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean supportsResizeableMultiWindow()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean supportsPictureInPicture()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        boolean $z0, $z1, $z2, z3;
        android.content.pm.ActivityInfo $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isActivityTypeStandardOrUndefined()>();

        if $z1 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z2 = virtualinvoke $r2.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    public boolean supportsSplitScreenWindowingMode()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.ActivityTaskManagerService $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowToken: boolean supportsSplitScreenWindowingMode()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z1 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsSplitScreenMultiWindow>;

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean supportsResizeableMultiWindow()>();

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    void takeFromHistory()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.Task $r1;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean inHistory>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.wm.ActivityRecord: boolean inHistory> = 0;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if $r1 == null goto label1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z1 != 0 goto label1;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task> = null;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearOptionsLocked()>();

     label2:
        return;
    }

    android.app.ActivityOptions takeOptionsLocked(boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0;
        android.app.ActivityOptions r1;
        android.view.RemoteAnimationAdapter $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if z0 == 0 goto label1;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.app.ActivityOptions: android.view.RemoteAnimationAdapter getRemoteAnimationAdapter()>();

        if $r2 != null goto label2;

     label1:
        r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions> = null;

     label2:
        return r1;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1;
        java.lang.String $r3, $r6, $r13, $r15, $r16, $r18, $r25, r27, r28;
        java.lang.StringBuilder $r4, $r17;
        int $i0, $i1, i2;
        android.content.Intent $r11;
        android.content.ComponentName $r12;
        com.android.server.wm.Task r26;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r3 = r0.<com.android.server.wm.ActivityRecord: java.lang.String stringName>;

        if $r3 == null goto label6;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = r0.<com.android.server.wm.ActivityRecord: java.lang.String stringName>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" t");

        r26 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r26 != null goto label1;

        i2 = -1;

        goto label2;

     label1:
        i2 = r26.<com.android.server.wm.Task: int mTaskId>;

     label2:
        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if z0 == 0 goto label3;

        r27 = " f}";

        goto label4;

     label3:
        r27 = "";

     label4:
        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        r28 = "";

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z1 == 0 goto label5;

        r28 = " isExiting";

     label5:
        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r25 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ActivityRecord{");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u");

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r11 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r12 = virtualinvoke $r11.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r13 = virtualinvoke $r12.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.ActivityRecord: java.lang.String stringName> = $r15;

        $r16 = r0.<com.android.server.wm.ActivityRecord: java.lang.String stringName>;

        return $r16;
    }

    boolean transferStartingWindow(android.os.IBinder)
    {
        com.android.server.wm.ActivityRecord r0, r22;
        java.lang.String r1, r24, r25, r26, r27, r29, r30;
        long l0;
        com.android.server.wm.DisplayContent $r2, $r8, $r12, $r17;
        com.android.server.wm.StartingData $r3, $r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r5, $r15, $r18;
        com.android.server.wm.ProtoLogGroup $r6, $r16, $r19;
        com.android.server.policy.WindowManagerPolicy$StartingSurface $r7, $r10;
        com.android.server.wm.WindowManagerService $r11, $r13;
        com.android.server.wm.WindowSurfacePlacer $r14;
        java.lang.Throwable $r20;
        android.os.IBinder r21;
        com.android.server.wm.WindowState r23;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r21 := @parameter0: android.os.IBinder;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        r22 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r21);

        if r22 != null goto label01;

        return 0;

     label01:
        r23 = r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if r23 == null goto label12;

        $r7 = r22.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        if $r7 == null goto label12;

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8.<com.android.server.wm.DisplayContent: boolean mSkipAppTransitionAnimation> = 1;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z1 == 0 goto label02;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r23);

        r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r19 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r18 = newarray (java.lang.Object)[3];

        $r18[0] = r1;

        $r18[1] = r24;

        $r18[2] = r25;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r19, -1938204785, 0, null, $r18);

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $z2 = virtualinvoke r22.<com.android.server.wm.ActivityRecord: boolean hasFixedRotationTransform()>();

        if $z2 == 0 goto label04;

        $r17 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r17.<com.android.server.wm.DisplayContent: boolean handleTopActivityLaunchingInDifferentOrientation(com.android.server.wm.ActivityRecord,boolean)>(r0, 0);

     label04:
        $r9 = r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = $r9;

        $r10 = r22.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface>;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface> = $r10;

        $z3 = r22.<com.android.server.wm.ActivityRecord: boolean startingDisplayed>;

        r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed> = $z3;

        r22.<com.android.server.wm.ActivityRecord: boolean startingDisplayed> = 0;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow> = r23;

        $z4 = r22.<com.android.server.wm.ActivityRecord: boolean reportedVisible>;

        r0.<com.android.server.wm.ActivityRecord: boolean reportedVisible> = $z4;

        r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = null;

        r22.<com.android.server.wm.ActivityRecord: com.android.server.policy.WindowManagerPolicy$StartingSurface startingSurface> = null;

        r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow> = null;

        r22.<com.android.server.wm.ActivityRecord: boolean startingMoved> = 1;

        r23.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken> = r0;

        r23.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord> = r0;

        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z5 == 0 goto label05;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r23);

        r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = r26;

        $r15[1] = r27;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, -1499134947, 0, null, $r15);

     label05:
        virtualinvoke r22.<com.android.server.wm.ActivityRecord: void removeChild(com.android.server.wm.WindowState)>(r23);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void addWindow(com.android.server.wm.WindowState)>(r23);

        $z6 = r22.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z6 == 0 goto label06;

        r0.<com.android.server.wm.ActivityRecord: boolean allDrawn> = 1;

     label06:
        $z7 = r22.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn>;

        if $z7 == 0 goto label07;

        r0.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn> = 1;

     label07:
        $z8 = virtualinvoke r22.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z8 == 0 goto label08;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setVisible(boolean)>(1);

        r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested> = 1;

        r0.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow> = 1;

     label08:
        $z9 = r22.<com.android.server.wm.ActivityRecord: boolean mClientVisible>;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setClientVisible(boolean)>($z9);

        $z10 = virtualinvoke r22.<com.android.server.wm.ActivityRecord: boolean isAnimating()>();

        if $z10 == 0 goto label09;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void transferAnimation(com.android.server.wm.WindowContainer)>(r22);

        r0.<com.android.server.wm.ActivityRecord: boolean mUseTransferredAnimation> = 1;

     label09:
        virtualinvoke r22.<com.android.server.wm.ActivityRecord: void postWindowRemoveStartingWindowCleanup(com.android.server.wm.WindowState)>(r23);

        r22.<com.android.server.wm.ActivityRecord: boolean mVisibleSetFromTransferredStartingWindow> = 0;

        $r11 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r11.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 1);

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r12.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r13 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r14.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label11:
        $r20 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r20;

     label12:
        $r3 = r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        if $r3 == null goto label14;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z0 == 0 goto label13;

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r29;

        $r5[1] = r30;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -443173857, 0, null, $r5);

     label13:
        $r4 = r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData>;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = $r4;

        r22.<com.android.server.wm.ActivityRecord: com.android.server.wm.StartingData mStartingData> = null;

        r22.<com.android.server.wm.ActivityRecord: boolean startingMoved> = 1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void scheduleAddStartingWindow()>();

        return 1;

     label14:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    void transferStartingWindowFromHiddenAboveTokenIfNeeded()
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.internal.util.function.pooled.PooledFunction r1;
        com.android.server.wm.'-$$Lambda$ActivityRecord$prAsqx_JQJTqW1jNxmkuU3AV8AU' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        com.android.server.wm.Task $r4;
        java.util.function.BiFunction r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r2 = <com.android.server.wm._$$Lambda$ActivityRecord$prAsqx_JQJTqW1jNxmkuU3AV8AU: com.android.server.wm.'-$$Lambda$ActivityRecord$prAsqx_JQJTqW1jNxmkuU3AV8AU' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r5 = (java.util.function.BiFunction) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(java.util.function.BiFunction,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r5, r0, $r3);

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        virtualinvoke $r4.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

        return;
    }

    void unregisterRemoteAnimations()
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityRecord: android.view.RemoteAnimationDefinition mRemoteAnimationDefinition> = null;

        return;
    }

    void updateAllDrawn()
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.DisplayContent $r1, $r6;
        com.android.server.wm.WindowManagerService $r2;
        android.os.IBinder $r3;
        com.android.server.wm.WindowManagerService$H $r4;
        android.os.Message $r5;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z0 != 0 goto label2;

        i0 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        if i0 <= 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean allDrawnStatesConsidered()>();

        if $z1 == 0 goto label2;

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows>;

        if $i1 < i0 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z2 != 0 goto label2;

        r0.<com.android.server.wm.ActivityRecord: boolean allDrawn> = 1;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        if $r1 == null goto label1;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r6.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label1:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(32, $r3);

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    void updateApplicationInfo(android.content.pm.ApplicationInfo)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.pm.ApplicationInfo r1;
        android.content.pm.ActivityInfo $r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = r1;

        return;
    }

    boolean updateDrawnWindowStates(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, $r6, $r45, $r49;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, $z19;
        com.android.server.wm.WindowManagerService $r2, $r44;
        int $i0, $i4, $i5, $i6, $i8, $i9, $i12;
        long $l1, $l2, $l13;
        byte $b3, b14;
        com.android.server.wm.ProtoLogGroup $r3, $r7;
        com.android.server.wm.ActivityStackSupervisor $r4;
        com.android.server.wm.ActivityMetricsLogger $r5;
        java.lang.StringBuilder $r8, $r20, $r28;
        java.lang.String $r19, $r27, $r35, $r43;
        com.android.server.wm.WindowSurfaceController $r30;
        com.android.server.wm.WindowStateAnimator r46;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: com.android.server.wm.WindowState;

        virtualinvoke r1.<com.android.server.wm.WindowState: void setDrawnStateEvaluated(boolean)>(1);

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z1 == 0 goto label1;

        $z17 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        if $z17 != 0 goto label1;

        return 0;

     label1:
        $l2 = r0.<com.android.server.wm.ActivityRecord: long mLastTransactionSequence>;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i0 = $r2.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        $l1 = (long) $i0;

        $b3 = $l2 cmp $l1;

        if $b3 == 0 goto label4;

        $r44 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $i12 = $r44.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        $l13 = (long) $i12;

        r0.<com.android.server.wm.ActivityRecord: long mLastTransactionSequence> = $l13;

        r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows> = 0;

        r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed> = 0;

        $r45 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow(boolean)>(0);

        if $r45 == null goto label2;

        b14 = 1;

        goto label3;

     label2:
        b14 = 0;

     label3:
        r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows> = b14;

     label4:
        r46 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z18 = 0;

        $z19 = r0.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z19 != 0 goto label9;

        z18 = 0;

        $z2 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean mightAffectAllDrawn()>();

        if $z2 == 0 goto label9;

        $r3 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $z3 = virtualinvoke $r3.<com.android.server.wm.ProtoLogGroup: boolean isLogToLogcat()>();

        if $z3 == 0 goto label5;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Eval win ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": isDrawn=");

        $z10 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isAnimationSet=");

        $z11 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r27 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("ActivityTaskManager", $r27);

        $z12 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z12 != 0 goto label5;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not displayed: s=");

        $r30 = r46.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pv=");

        $z13 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDrawState=");

        $r35 = virtualinvoke r46.<com.android.server.wm.WindowStateAnimator: java.lang.String drawStateToString()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ph=");

        $z14 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" th=");

        $z15 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" a=");

        $z16 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z16);

        $r43 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("ActivityTaskManager", $r43);

     label5:
        $r49 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if r1 == $r49 goto label8;

        z18 = 0;

        $z5 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isInteresting()>();

        if $z5 == 0 goto label9;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow(boolean)>(0);

        if $r6 == r1 goto label6;

        $i8 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        $i9 = $i8 + 1;

        r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows> = $i9;

     label6:
        z18 = 0;

        $z6 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z6 == 0 goto label9;

        $i4 = r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows>;

        $i5 = $i4 + 1;

        r0.<com.android.server.wm.ActivityRecord: int mNumDrawnWindows> = $i5;

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $z7 = virtualinvoke $r7.<com.android.server.wm.ProtoLogGroup: boolean isLogToLogcat()>();

        if $z7 == 0 goto label7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tokenMayBeDrawn: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" w=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numInteresting=");

        $i6 = r0.<com.android.server.wm.ActivityRecord: int mNumInterestingWindows>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" freezingScreen=");

        $z8 = r0.<com.android.server.wm.ActivityRecord: boolean mFreezingScreen>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mAppFreezing=");

        $z9 = r1.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r19 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("ActivityTaskManager", $r19);

     label7:
        z18 = 1;

        goto label9;

     label8:
        z18 = 0;

        $z4 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z4 == 0 goto label9;

        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()>();

        virtualinvoke $r5.<com.android.server.wm.ActivityMetricsLogger: void notifyStartingWindowDrawn(com.android.server.wm.ActivityRecord)>(r0);

        r0.<com.android.server.wm.ActivityRecord: boolean startingDisplayed> = 1;

        z18 = 0;

     label9:
        return z18;
    }

    void updateLetterboxSurface(com.android.server.wm.WindowState)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowState r1, r4;
        boolean $z0;
        com.android.server.wm.Letterbox $r2, r5;
        android.view.SurfaceControl$Transaction $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r4 := @parameter0: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r1 == r4 goto label1;

        if r4 == null goto label1;

        if r1 == null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void layoutLetterbox(com.android.server.wm.WindowState)>(r4);

        r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        if r5 == null goto label2;

        $z0 = virtualinvoke r5.<com.android.server.wm.Letterbox: boolean needsApplySurfaceChanges()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Letterbox mLetterbox>;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r2.<com.android.server.wm.Letterbox: void applySurfaceChanges(android.view.SurfaceControl$Transaction)>($r3);

     label2:
        return;
    }

    void updateMultiWindowMode()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean z0, $z1, $z2, $z4;
        com.android.server.wm.ActivityStack $r1;
        com.android.server.wm.ActivityStack$ActivityState $r2, $r3, r5;
        com.android.server.wm.Task r4;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r4 == null goto label4;

        $r1 = virtualinvoke r4.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r1 == null goto label4;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 != 0 goto label1;

        goto label4;

     label1:
        z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedMultiWindowMode>;

        if z0 == $z2 goto label3;

        if z0 != 0 goto label2;

        $z4 = r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedPictureInPictureMode>;

        if $z4 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updatePictureInPictureMode(android.graphics.Rect,boolean)>(null, 0);

        goto label3;

     label2:
        r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedMultiWindowMode> = z0;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void computeConfigurationAfterMultiWindowModeChange()>();

        r5 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState getState()>();

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        if r5 == $r2 goto label3;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        if r5 == $r3 goto label3;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean,boolean)>(0, 1, 1);

     label3:
        return;

     label4:
        return;
    }

    void updateOptionsLocked(android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityRecord r0;
        android.app.ActivityOptions r1, r2;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.app.ActivityOptions;

        if r1 == null goto label2;

        r2 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.app.ActivityOptions: void abort()>();

     label1:
        r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions pendingOptions> = r1;

     label2:
        return;
    }

    void updatePictureInPictureMode(android.graphics.Rect, boolean)
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1;
        boolean z0, $z1, $z2, $z4, z5, $z6;
        com.android.server.wm.Task r2;
        com.android.server.wm.ActivityStack $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task task>;

        if r2 == null goto label7;

        $r3 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r3 == null goto label7;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 != 0 goto label1;

        goto label7;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z2 == 0 goto label2;

        if r1 == null goto label2;

        z5 = 1;

        goto label3;

     label2:
        z5 = 0;

     label3:
        $z6 = r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedPictureInPictureMode>;

        if z5 != $z6 goto label4;

        if z0 == 0 goto label6;

     label4:
        r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedPictureInPictureMode> = z5;

        r0.<com.android.server.wm.ActivityRecord: boolean mLastReportedMultiWindowMode> = z5;

        if r1 == null goto label5;

        $z4 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        specialinvoke r0.<com.android.server.wm.ActivityRecord: void computeConfigurationAfterMultiWindowModeChange()>();

     label5:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean,boolean)>(0, 1, 1);

     label6:
        return;

     label7:
        return;
    }

    void updateReportedVisibilityLocked()
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, i2, i3, i4, i5;
        boolean z0, $z1, $z2, z4, z5, z6, z7, z8, $z9;
        com.android.server.wm.ActivityRecord$Token $r1;
        com.android.server.wm.WindowList $r2, $r8;
        com.android.server.wm.WindowState$UpdateReportedVisibilityResults $r3, $r4, $r5, $r6, $r7, $r10;
        long $l1;
        java.lang.Object $r9;
        com.android.server.wm.WindowState $r11;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        i2 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults>;

        virtualinvoke $r3.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: void reset()>();

        i3 = 0;

     label02:
        if i3 >= i2 goto label03;

        $r8 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowList mChildren>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r11 = (com.android.server.wm.WindowState) $r9;

        $r10 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults>;

        virtualinvoke $r11.<com.android.server.wm.WindowState: void updateReportedVisibility(com.android.server.wm.WindowState$UpdateReportedVisibilityResults)>($r10);

        i3 = i3 + 1;

        goto label02;

     label03:
        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults>;

        i0 = $r4.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numInteresting>;

        $r5 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults>;

        i4 = $r5.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numVisible>;

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults>;

        i5 = $r6.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numDrawn>;

        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState$UpdateReportedVisibilityResults mReportedVisibilityResults>;

        z0 = $r7.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: boolean nowGone>;

        if i0 <= 0 goto label04;

        if i5 < i0 goto label04;

        z4 = 1;

        goto label05;

     label04:
        z4 = 0;

     label05:
        z5 = 0;

        if i0 <= 0 goto label06;

        z5 = 0;

        if i4 < i0 goto label06;

        z5 = 0;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z2 == 0 goto label06;

        z5 = 1;

     label06:
        z6 = z5;

        z7 = z4;

        if z0 != 0 goto label08;

        z8 = z4;

        if z4 != 0 goto label07;

        z8 = r0.<com.android.server.wm.ActivityRecord: boolean reportedDrawn>;

     label07:
        z6 = z5;

        z7 = z8;

        if z5 != 0 goto label08;

        z6 = r0.<com.android.server.wm.ActivityRecord: boolean reportedVisible>;

        z7 = z8;

     label08:
        $z9 = r0.<com.android.server.wm.ActivityRecord: boolean reportedDrawn>;

        if z7 == $z9 goto label09;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onWindowsDrawn(boolean,long)>(z7, $l1);

        r0.<com.android.server.wm.ActivityRecord: boolean reportedDrawn> = z7;

     label09:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean reportedVisible>;

        if z6 == $z1 goto label11;

        r0.<com.android.server.wm.ActivityRecord: boolean reportedVisible> = z6;

        if z6 == 0 goto label10;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onWindowsVisible()>();

        goto label11;

     label10:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void onWindowsGone()>();

     label11:
        return;
    }

    boolean windowsAreFocusable()
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean windowsAreFocusable(boolean)>(0);

        return $z0;
    }

    boolean windowsAreFocusable(boolean)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        int i0, $i1;
        com.android.server.wm.DisplayContent $r2;
        boolean $z1, z2, $z3, z4;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.util.HashMap $r5;
        java.lang.Integer $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wm.ActivityRecord;

        z2 := @parameter0: boolean;

        if z2 != 0 goto label1;

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mTargetSdk>;

        if $i1 >= 29 goto label1;

        i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getPid()>();

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r5 = $r4.<com.android.server.wm.RootWindowContainer: java.util.HashMap mTopFocusedAppByProcess>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r1 = (com.android.server.wm.ActivityRecord) $r7;

        if r1 == null goto label1;

        if r1 == r0 goto label1;

        return 0;

     label1:
        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canReceiveKeys()>();

        if $z3 != 0 goto label2;

        z4 = 0;

        $z1 = specialinvoke r0.<com.android.server.wm.ActivityRecord: boolean isAlwaysFocusable()>();

        if $z1 == 0 goto label3;

     label2:
        z4 = 0;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        if $r2 == null goto label3;

        z4 = 1;

     label3:
        return z4;
    }

    void writeIdentifierToProto(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.proto.ProtoOutputStream r1;
        int $i0, $i1;
        android.content.Intent $r2;
        android.content.ComponentName $r3;
        java.lang.String $r4;
        long l2, l3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l2 := @parameter1: long;

        l3 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l2);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i0);

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r3 = virtualinvoke $r2.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r4 = virtualinvoke $r3.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, $r4);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l3);

        return;
    }

    void writeNameToProto(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.proto.ProtoOutputStream r1;
        long l0;
        com.android.server.wm.ActivityRecord$Token r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.wm.ActivityRecord;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l0 := @parameter1: long;

        r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord$Token: java.lang.String getName()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(l0, $r3);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.ActivityRecord: int Z_BOOST_BASE> = 800570000;

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_VISIBILITY> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_USER_LEAVING> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_TRANSITION> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_SWITCH> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_STATES> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_SAVED_STATE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_RESULTS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_PERSISTABLEBUNDLE> = "persistable_bundle";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_PAUSE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_INTENT> = "intent";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_FOCUS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_CONTAINERS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_CONFIGURATION> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_APP> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG_ADD_REMOVE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.ActivityRecord: int STOP_TIMEOUT> = 11000;

        <com.android.server.wm.ActivityRecord: int STARTING_WINDOW_TYPE_SPLASH_SCREEN> = 2;

        <com.android.server.wm.ActivityRecord: int STARTING_WINDOW_TYPE_SNAPSHOT> = 1;

        <com.android.server.wm.ActivityRecord: int STARTING_WINDOW_TYPE_NONE> = 0;

        <com.android.server.wm.ActivityRecord: int STARTING_WINDOW_SHOWN> = 1;

        <com.android.server.wm.ActivityRecord: int STARTING_WINDOW_REMOVED> = 2;

        <com.android.server.wm.ActivityRecord: int STARTING_WINDOW_NOT_SHOWN> = 0;

        <com.android.server.wm.ActivityRecord: int PAUSE_TIMEOUT> = 500;

        <com.android.server.wm.ActivityRecord: int MAX_STOPPING_TO_FORCE> = 3;

        <com.android.server.wm.ActivityRecord: int LAUNCH_TICK> = 500;

        <com.android.server.wm.ActivityRecord: int INVALID_PID> = -1;

        <com.android.server.wm.ActivityRecord: int FINISH_RESULT_REQUESTED> = 1;

        <com.android.server.wm.ActivityRecord: int FINISH_RESULT_REMOVED> = 2;

        <com.android.server.wm.ActivityRecord: int FINISH_RESULT_CANCELLED> = 0;

        <com.android.server.wm.ActivityRecord: int DESTROY_TIMEOUT> = 10000;

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_USERID> = "user_id";

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_RESOLVEDTYPE> = "resolved_type";

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_LAUNCHEDFROMUID> = "launched_from_uid";

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_LAUNCHEDFROMPACKAGE> = "launched_from_package";

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_LAUNCHEDFROMFEATURE> = "launched_from_feature";

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_ID> = "id";

        <com.android.server.wm.ActivityRecord: java.lang.String ATTR_COMPONENTSPECIFIED> = "component_specified";

        <com.android.server.wm.ActivityRecord: java.lang.String ACTIVITY_ICON_SUFFIX> = "_activity_icon_";

        return;
    }
}
