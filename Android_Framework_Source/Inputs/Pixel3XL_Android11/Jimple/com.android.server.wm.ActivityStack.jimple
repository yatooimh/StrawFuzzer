class com.android.server.wm.ActivityStack extends com.android.server.wm.Task
{
    private static final boolean SHOW_APP_STARTING_PREVIEW;
    static final int STACK_VISIBILITY_INVISIBLE;
    static final int STACK_VISIBILITY_VISIBLE;
    static final int STACK_VISIBILITY_VISIBLE_BEHIND_TRANSLUCENT;
    private static final java.lang.String TAG;
    static final java.lang.String TAG_ADD_REMOVE;
    private static final java.lang.String TAG_APP;
    static final java.lang.String TAG_CLEANUP;
    private static final java.lang.String TAG_PAUSE;
    private static final java.lang.String TAG_RELEASE;
    private static final java.lang.String TAG_RESULTS;
    private static final java.lang.String TAG_STACK;
    private static final java.lang.String TAG_STATES;
    private static final java.lang.String TAG_SWITCH;
    static final java.lang.String TAG_TASKS;
    private static final java.lang.String TAG_TRANSITION;
    private static final java.lang.String TAG_USER_LEAVING;
    static final java.lang.String TAG_VISIBILITY;
    private static final long TRANSLUCENT_CONVERSION_TIMEOUT;
    private static final int TRANSLUCENT_TIMEOUT_MSG;
    private static final com.android.server.wm.ResetTargetTaskHelper sResetTargetTaskHelper;
    private final com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry;
    private boolean mBoundsAnimating;
    private boolean mBoundsAnimatingRequested;
    private android.graphics.Rect mBoundsAnimationSourceHintBounds;
    private android.graphics.Rect mBoundsAnimationTarget;
    private final com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper mCheckBehindFullscreenActivityHelper;
    boolean mConfigWillChange;
    int mCurrentUser;
    private final com.android.server.wm.EnsureActivitiesVisibleHelper mEnsureActivitiesVisibleHelper;
    private final com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper mEnsureVisibleActivitiesConfigHelper;
    private final android.os.Handler mHandler;
    boolean mInResumeTopActivity;
    android.graphics.Rect mPreAnimationBounds;
    private final com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp mRemoveHistoryRecordsForApp;
    private android.graphics.Rect mTmpRect;
    private android.graphics.Rect mTmpRect2;
    private boolean mTopActivityOccludesKeyguard;
    private com.android.server.wm.ActivityRecord mTopDismissingKeyguardActivity;
    com.android.server.wm.ActivityRecord mTranslucentActivityWaiting;
    java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent;

    static void <clinit>()
    {
        com.android.server.wm.ResetTargetTaskHelper $r0;

        <com.android.server.wm.ActivityStack: int TRANSLUCENT_TIMEOUT_MSG> = 101;

        <com.android.server.wm.ActivityStack: long TRANSLUCENT_CONVERSION_TIMEOUT> = 2000L;

        <com.android.server.wm.ActivityStack: java.lang.String TAG_VISIBILITY> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_USER_LEAVING> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_TRANSITION> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_TASKS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_SWITCH> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_STATES> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_STACK> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_RESULTS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_RELEASE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_PAUSE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_CLEANUP> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_APP> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG_ADD_REMOVE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStack: int STACK_VISIBILITY_VISIBLE_BEHIND_TRANSLUCENT> = 1;

        <com.android.server.wm.ActivityStack: int STACK_VISIBILITY_VISIBLE> = 0;

        <com.android.server.wm.ActivityStack: int STACK_VISIBILITY_INVISIBLE> = 2;

        <com.android.server.wm.ActivityStack: boolean SHOW_APP_STARTING_PREVIEW> = 1;

        $r0 = new com.android.server.wm.ResetTargetTaskHelper;

        specialinvoke $r0.<com.android.server.wm.ResetTargetTaskHelper: void <init>()>();

        <com.android.server.wm.ActivityStack: com.android.server.wm.ResetTargetTaskHelper sResetTargetTaskHelper> = $r0;

        return;
    }

    void <init>(com.android.server.wm.ActivityTaskManagerService, int, int, android.content.pm.ActivityInfo, android.content.Intent, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityTaskManagerService r1;
        int i0, i1;
        android.content.pm.ActivityInfo r2;
        android.content.Intent r3;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.pm.ActivityInfo;

        r3 := @parameter4: android.content.Intent;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityStack: void <init>(com.android.server.wm.ActivityTaskManagerService,int,android.content.pm.ActivityInfo,android.content.Intent,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,android.app.ActivityManager$TaskDescription,com.android.server.wm.ActivityStack)>(r1, i0, r2, r3, null, null, null, null);

        r0.<com.android.server.wm.ActivityStack: boolean mCreatedByOrganizer> = z0;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void setActivityType(int)>(i1);

        return;
    }

    void <init>(com.android.server.wm.ActivityTaskManagerService, int, android.content.Intent, android.content.Intent, java.lang.String, java.lang.String, android.content.ComponentName, android.content.ComponentName, boolean, boolean, boolean, int, int, java.lang.String, long, boolean, android.app.ActivityManager$TaskDescription, int, int, int, int, int, java.lang.String, java.lang.String, int, boolean, boolean, boolean, int, int, android.content.pm.ActivityInfo, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStack r0, r15;
        com.android.server.wm.ActivityTaskManagerService r1, $r30;
        int i0, i1, i2, i4, i5, i6, i7, i8, i9, i10, i11, $i12;
        android.content.Intent r2, r3;
        java.lang.String r4, r5, r8, r10, r11;
        android.content.ComponentName r6, r7;
        boolean z0, z1, z2, z3, z4, z5, z6;
        long l3;
        android.app.ActivityManager$TaskDescription r9;
        android.content.pm.ActivityInfo r12;
        android.service.voice.IVoiceInteractionSession r13;
        com.android.internal.app.IVoiceInteractor r14;
        java.util.ArrayList $r16;
        android.graphics.Rect $r17, $r18, $r19, $r20, $r21;
        com.android.server.wm.AnimatingActivityRegistry $r22;
        com.android.server.wm.EnsureActivitiesVisibleHelper $r23;
        com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper $r24;
        com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper $r25;
        com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp $r26;
        com.android.server.wm.ActivityStack$ActivityStackHandler $r27;
        com.android.server.wm.ActivityStackSupervisor $r28;
        android.os.Looper $r29;
        android.app.ActivityManagerInternal $r31;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.Intent;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.content.ComponentName;

        r7 := @parameter7: android.content.ComponentName;

        z0 := @parameter8: boolean;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        i1 := @parameter11: int;

        i2 := @parameter12: int;

        r8 := @parameter13: java.lang.String;

        l3 := @parameter14: long;

        z3 := @parameter15: boolean;

        r9 := @parameter16: android.app.ActivityManager$TaskDescription;

        i4 := @parameter17: int;

        i5 := @parameter18: int;

        i6 := @parameter19: int;

        i7 := @parameter20: int;

        i8 := @parameter21: int;

        r10 := @parameter22: java.lang.String;

        r11 := @parameter23: java.lang.String;

        i9 := @parameter24: int;

        z4 := @parameter25: boolean;

        z5 := @parameter26: boolean;

        z6 := @parameter27: boolean;

        i10 := @parameter28: int;

        i11 := @parameter29: int;

        r12 := @parameter30: android.content.pm.ActivityInfo;

        r13 := @parameter31: android.service.voice.IVoiceInteractionSession;

        r14 := @parameter32: com.android.internal.app.IVoiceInteractor;

        r15 := @parameter33: com.android.server.wm.ActivityStack;

        specialinvoke r0.<com.android.server.wm.Task: void <init>(com.android.server.wm.ActivityTaskManagerService,int,android.content.Intent,android.content.Intent,java.lang.String,java.lang.String,android.content.ComponentName,android.content.ComponentName,boolean,boolean,boolean,int,int,java.lang.String,long,boolean,android.app.ActivityManager$TaskDescription,int,int,int,int,int,java.lang.String,java.lang.String,int,boolean,boolean,boolean,int,int,android.content.pm.ActivityInfo,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,com.android.server.wm.ActivityStack)>(r1, i0, r2, r3, r4, r5, r6, r7, z0, z1, z2, i1, i2, r8, l3, z3, r9, i4, i5, i6, i7, i8, r10, r11, i9, z4, z5, z6, i10, i11, r12, r13, r14, r15);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting> = null;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent> = $r16;

        r0.<com.android.server.wm.ActivityStack: boolean mInResumeTopActivity> = 0;

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect> = $r17;

        $r18 = new android.graphics.Rect;

        specialinvoke $r18.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect2> = $r18;

        r0.<com.android.server.wm.ActivityStack: boolean mBoundsAnimating> = 0;

        r0.<com.android.server.wm.ActivityStack: boolean mBoundsAnimatingRequested> = 0;

        $r19 = new android.graphics.Rect;

        specialinvoke $r19.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mBoundsAnimationTarget> = $r19;

        $r20 = new android.graphics.Rect;

        specialinvoke $r20.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mBoundsAnimationSourceHintBounds> = $r20;

        $r21 = new android.graphics.Rect;

        specialinvoke $r21.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mPreAnimationBounds> = $r21;

        $r22 = new com.android.server.wm.AnimatingActivityRegistry;

        specialinvoke $r22.<com.android.server.wm.AnimatingActivityRegistry: void <init>()>();

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry> = $r22;

        $r23 = new com.android.server.wm.EnsureActivitiesVisibleHelper;

        specialinvoke $r23.<com.android.server.wm.EnsureActivitiesVisibleHelper: void <init>(com.android.server.wm.ActivityStack)>(r0);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.EnsureActivitiesVisibleHelper mEnsureActivitiesVisibleHelper> = $r23;

        $r24 = new com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper;

        specialinvoke $r24.<com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper: void <init>(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityStack$1)>(r0, null);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper mEnsureVisibleActivitiesConfigHelper> = $r24;

        $r25 = new com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper;

        specialinvoke $r25.<com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper: void <init>(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityStack$1)>(r0, null);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper mCheckBehindFullscreenActivityHelper> = $r25;

        $r26 = new com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp;

        specialinvoke $r26.<com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp: void <init>(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityStack$1)>(r0, null);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp mRemoveHistoryRecordsForApp> = $r26;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmStackCreated(int)>(i0);

        $r27 = new com.android.server.wm.ActivityStack$ActivityStackHandler;

        $r28 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r29 = $r28.<com.android.server.wm.ActivityStackSupervisor: android.os.Looper mLooper>;

        specialinvoke $r27.<com.android.server.wm.ActivityStack$ActivityStackHandler: void <init>(com.android.server.wm.ActivityStack,android.os.Looper)>(r0, $r29);

        r0.<com.android.server.wm.ActivityStack: android.os.Handler mHandler> = $r27;

        $r30 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r31 = $r30.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i12 = virtualinvoke $r31.<android.app.ActivityManagerInternal: int getCurrentUserId()>();

        r0.<com.android.server.wm.ActivityStack: int mCurrentUser> = $i12;

        return;
    }

    void <init>(com.android.server.wm.ActivityTaskManagerService, int, android.content.pm.ActivityInfo, android.content.Intent, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, android.app.ActivityManager$TaskDescription, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStack r0, r6;
        com.android.server.wm.ActivityTaskManagerService r1;
        int i0, i1, $i3, $i4, $i5;
        android.content.pm.ActivityInfo r2;
        android.content.Intent r3;
        android.service.voice.IVoiceInteractionSession r4;
        com.android.internal.app.IVoiceInteractor r5;
        long l2;
        android.content.pm.ApplicationInfo $r7, $r9;
        android.app.ActivityManager$TaskDescription $r8, r11;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.ActivityInfo;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: android.service.voice.IVoiceInteractionSession;

        r5 := @parameter5: com.android.internal.app.IVoiceInteractor;

        r11 := @parameter6: android.app.ActivityManager$TaskDescription;

        r6 := @parameter7: com.android.server.wm.ActivityStack;

        $r7 = r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        if r11 == null goto label1;

        goto label2;

     label1:
        $r8 = new android.app.ActivityManager$TaskDescription;

        specialinvoke $r8.<android.app.ActivityManager$TaskDescription: void <init>()>();

        r11 = $r8;

     label2:
        $r9 = r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r9.<android.content.pm.ApplicationInfo: int uid>;

        $r10 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $i5 = r2.<android.content.pm.ActivityInfo: int resizeMode>;

        $z0 = virtualinvoke r2.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        specialinvoke r0.<com.android.server.wm.ActivityStack: void <init>(com.android.server.wm.ActivityTaskManagerService,int,android.content.Intent,android.content.Intent,java.lang.String,java.lang.String,android.content.ComponentName,android.content.ComponentName,boolean,boolean,boolean,int,int,java.lang.String,long,boolean,android.app.ActivityManager$TaskDescription,int,int,int,int,int,java.lang.String,java.lang.String,int,boolean,boolean,boolean,int,int,android.content.pm.ActivityInfo,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,com.android.server.wm.ActivityStack)>(r1, i0, r3, null, null, null, null, null, 0, 0, 0, i1, 0, null, l2, 1, r11, i0, -1, -1, 0, $i4, $r10, null, $i5, $z0, 0, 0, -1, -1, r2, r4, r5, r6);

        return;
    }

    private void addChild(com.android.server.wm.WindowContainer, int, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.WindowContainer r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void addChild(com.android.server.wm.WindowContainer,java.util.Comparator)>(r1, null);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r1, z0);

        return;
    }

    private boolean canEnterPipOnTaskSwitch(com.android.server.wm.ActivityRecord, com.android.server.wm.Task, com.android.server.wm.ActivityRecord, android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0, r5;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord r2, r4;
        android.app.ActivityOptions r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r4 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.Task;

        r2 := @parameter2: com.android.server.wm.ActivityRecord;

        r3 := @parameter3: android.app.ActivityOptions;

        if r3 == null goto label1;

        $z2 = virtualinvoke r3.<android.app.ActivityOptions: boolean disallowEnterPictureInPictureWhileLaunching()>();

        if $z2 == 0 goto label1;

        return 0;

     label1:
        if r4 == null goto label6;

        $z0 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z0 == 0 goto label2;

        goto label6;

     label2:
        if r1 == null goto label3;

        r5 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        goto label4;

     label3:
        r5 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

     label4:
        if r5 == null goto label5;

        $z1 = virtualinvoke r5.<com.android.server.wm.ActivityStack: boolean isActivityTypeAssistant()>();

        if $z1 == 0 goto label5;

        return 0;

     label5:
        return 1;

     label6:
        return 0;
    }

    private void clearLaunchTime(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityStackSupervisor $r2, $r4, $r5;
        java.util.ArrayList $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r3 = $r2.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: void removeIdleTimeoutForActivity(com.android.server.wm.ActivityRecord)>(r1);

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdleTimeout(com.android.server.wm.ActivityRecord)>(r1);

     label1:
        return;
    }

    private boolean containsActivityFromStack(java.util.List)
    {
        com.android.server.wm.ActivityStack r0, $r3;
        boolean $z0;
        java.lang.Object $r1;
        com.android.server.wm.ActivityRecord $r2;
        java.util.List r4;
        java.util.Iterator r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r4 := @parameter0: java.util.List;

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (com.android.server.wm.ActivityRecord) $r1;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if $r3 != r0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean dumpActivities(java.io.FileDescriptor, java.io.PrintWriter, boolean, boolean, java.lang.String, boolean, java.lang.Runnable)
    {
        com.android.server.wm.ActivityStack r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        boolean z0, z1, z2, $z3, $z4;
        java.lang.String r3;
        java.lang.Runnable r4;
        java.util.concurrent.atomic.AtomicBoolean $r7, $r8;
        com.android.server.wm._$$Lambda$ActivityStack$cPyR7M9kc55JjHdL0Ddj_0AjyyM $r9;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        z2 := @parameter5: boolean;

        r4 := @parameter6: java.lang.Runnable;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean hasChild()>();

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $r7 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r9 = new com.android.server.wm._$$Lambda$ActivityStack$cPyR7M9kc55JjHdL0Ddj_0AjyyM;

        specialinvoke $r9.<com.android.server.wm._$$Lambda$ActivityStack$cPyR7M9kc55JjHdL0Ddj_0AjyyM: void <init>(com.android.server.wm.ActivityStack,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean,boolean,java.io.PrintWriter,java.lang.Runnable,java.lang.String,java.io.FileDescriptor,boolean,boolean)>(r0, $r8, $r7, z2, r2, r4, r3, r1, z0, z1);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>($r9, 1);

        $z4 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z4;
    }

    private static boolean finishIfVoiceActivity(com.android.server.wm.ActivityRecord, android.os.IBinder)
    {
        com.android.server.wm.ActivityRecord r0;
        android.service.voice.IVoiceInteractionSession $r1, $r2;
        android.os.IBinder $r3, r9;
        com.android.server.wm.WindowProcessController $r4;
        android.app.IApplicationThread $r5;
        com.android.server.wm.ActivityRecord$Token $r6;
        com.android.server.wm.ActivityTaskManagerService $r7;
        android.os.RemoteException $r8;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r9 := @parameter1: android.os.IBinder;

        $r1 = r0.<com.android.server.wm.ActivityRecord: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r1 == null goto label6;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.service.voice.IVoiceInteractionSession voiceSession>;

        $r3 = interfaceinvoke $r2.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        if $r3 == r9 goto label1;

        goto label6;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void clearVoiceSessionLocked()>();

     label2:
        $r4 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r6 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        interfaceinvoke $r5.<android.app.IApplicationThread: void scheduleLocalVoiceInteractionStarted(android.os.IBinder,com.android.internal.app.IVoiceInteractor)>($r6, null);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        $r7 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void finishRunningVoiceLocked()>();

        return 1;

     label6:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private static void finishIfVoiceTask(com.android.server.wm.Task, android.os.IBinder)
    {
        com.android.server.wm.Task r0;
        android.service.voice.IVoiceInteractionSession $r1, $r4;
        com.android.server.wm.'-$$Lambda$ActivityStack$N2PfGF62p6Y1TYGt9lvFtsW9LmQ' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        android.os.IBinder $r5, r7;
        com.android.internal.util.function.pooled.PooledFunction r8;
        com.android.server.wm._$$Lambda$ActivityStack$yzAO42tBf0f3jSXeSXepQs0h6aU r9;
        java.util.function.BiFunction r10;

        r0 := @parameter0: com.android.server.wm.Task;

        r7 := @parameter1: android.os.IBinder;

        $r1 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        $r5 = interfaceinvoke $r4.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        if $r5 != r7 goto label1;

        r9 = new com.android.server.wm._$$Lambda$ActivityStack$yzAO42tBf0f3jSXeSXepQs0h6aU;

        specialinvoke r9.<com.android.server.wm._$$Lambda$ActivityStack$yzAO42tBf0f3jSXeSXepQs0h6aU: void <init>(com.android.server.wm.Task)>(r0);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r9);

        goto label2;

     label1:
        $r2 = <com.android.server.wm._$$Lambda$ActivityStack$N2PfGF62p6Y1TYGt9lvFtsW9LmQ: com.android.server.wm.'-$$Lambda$ActivityStack$N2PfGF62p6Y1TYGt9lvFtsW9LmQ' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r10 = (java.util.function.BiFunction) $r2;

        r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(java.util.function.BiFunction,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r10, $r3, r7);

        virtualinvoke r0.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function)>(r8);

        interfaceinvoke r8.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

     label2:
        return;
    }

    private com.android.server.wm.ActivityRecord getOccludingActivityAbove(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, r3, r4;
        com.android.server.wm.'-$$Lambda$ActivityStack$T_y9UP0di1Q8raanL-FeXPC0_1I' $r2;
        java.util.function.Predicate r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r3 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = <com.android.server.wm._$$Lambda$ActivityStack$T_y9UP0di1Q8raanL_FeXPC0_1I: com.android.server.wm.'-$$Lambda$ActivityStack$T_y9UP0di1Q8raanL-FeXPC0_1I' INSTANCE>;

        r5 = (java.util.function.Predicate) $r2;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate,boolean,com.android.server.wm.ActivityRecord)>(r5, 1, r3);

        if r1 == r3 goto label1;

        r4 = r1;

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    private android.graphics.Rect getRawBounds()
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = specialinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        return $r1;
    }

    private boolean inFrontOfStandardStack()
    {
        com.android.server.wm.ActivityStack r0, $r3;
        com.android.server.wm.TaskDisplayArea r1;
        int i0, $i1;
        com.android.server.wm.WindowContainer $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int getIndexOf(com.android.server.wm.ActivityStack)>(r0);

        if i0 != 0 goto label2;

        return 0;

     label2:
        $i1 = i0 - 1;

        $r2 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.WindowContainer getChildAt(int)>($i1);

        $r3 = (com.android.server.wm.ActivityStack) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: boolean isActivityTypeStandard()>();

        return $z0;
    }

    private boolean isTaskSwitch(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, r2;
        com.android.server.wm.Task $r3, $r4;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        if r2 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r4 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r3 == $r4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean lambda$N2PfGF62p6Y1TYGt9lvFtsW9LmQ(com.android.server.wm.ActivityRecord, android.os.IBinder)
    {
        com.android.server.wm.ActivityRecord r0;
        android.os.IBinder r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.os.IBinder;

        $z0 = staticinvoke <com.android.server.wm.ActivityStack: boolean finishIfVoiceActivity(com.android.server.wm.ActivityRecord,android.os.IBinder)>(r0, r1);

        return $z0;
    }

    public static void lambda$QjNtYzBoevRHPhQzwu5fh58MK0E(com.android.server.wm.Task, android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <com.android.server.wm.ActivityStack: void processTaskResizeBounds(com.android.server.wm.Task,android.graphics.Rect)>(r0, r1);

        return;
    }

    public static void lambda$VIuWlCdKwIo4qqRlevMLniedZ7o(com.android.server.wm.Task, android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <com.android.server.wm.ActivityStack: void setTaskBounds(com.android.server.wm.Task,android.graphics.Rect)>(r0, r1);

        return;
    }

    public static void lambda$YAQEcQUrLqR06xiJJApMvOPIxhg(com.android.server.wm.Task, android.os.IBinder)
    {
        com.android.server.wm.Task r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.os.IBinder;

        staticinvoke <com.android.server.wm.ActivityStack: void finishIfVoiceTask(com.android.server.wm.Task,android.os.IBinder)>(r0, r1);

        return;
    }

    static void lambda$awakeFromSleepingLocked$2(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setSleeping(boolean)>(0);

        return;
    }

    static void lambda$finishAllActivitiesImmediately$5(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("finishAllActivitiesImmediatelyLocked: finishing ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", $r5);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyIfPossible(java.lang.String)>("finishAllActivitiesImmediately");

        return;
    }

    static void lambda$finishIfVoiceTask$4(com.android.server.wm.Task, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r2;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("finish-voice", 0);

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: void updateOomAdj()>();

        return;
    }

    static void lambda$getDumpActivitiesLocked$12(com.android.server.am.ActivityManagerService$ItemMatcher, java.util.ArrayList, com.android.server.wm.ActivityRecord)
    {
        com.android.server.am.ActivityManagerService$ItemMatcher r0;
        java.util.ArrayList r1;
        com.android.server.wm.ActivityRecord r2;
        android.content.Intent $r3;
        android.content.ComponentName $r4;
        boolean $z0;

        r0 := @parameter0: com.android.server.am.ActivityManagerService$ItemMatcher;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: com.android.server.wm.ActivityRecord;

        $r3 = r2.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r4 = virtualinvoke $r3.<android.content.Intent: android.content.ComponentName getComponent()>();

        $z0 = virtualinvoke r0.<com.android.server.am.ActivityManagerService$ItemMatcher: boolean match(java.lang.Object,android.content.ComponentName)>(r2, $r4);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label1:
        return;
    }

    static boolean lambda$getOccludingActivityAbove$8(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        return $z0;
    }

    static void lambda$goToSleep$3(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.ActivityStack$ActivityState $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STARTED>;

        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        $r1 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r6, $r5, $r4, $r3, $r2, $r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void setSleeping(boolean)>(1);

     label1:
        return;
    }

    static boolean lambda$navigateUpTo$6(android.content.ComponentName, com.android.server.wm.ActivityRecord)
    {
        android.content.ComponentName r0;
        com.android.server.wm.ActivityRecord r1;
        android.content.pm.ActivityInfo $r2, $r5;
        java.lang.String $r3, $r4, $r6, $r7;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $r2 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r3 = $r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r4 = virtualinvoke r0.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r7 = virtualinvoke r0.<android.content.ComponentName: java.lang.String getClassName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    static java.lang.Boolean lambda$navigateUpTo$7(com.android.server.wm.ActivityRecord, int[], android.content.Intent[], com.android.server.uri.NeededUriGrants[], com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r4;
        int[] r1;
        android.content.Intent[] r2;
        com.android.server.uri.NeededUriGrants[] r3;
        com.android.server.uri.NeededUriGrants $r5;
        android.content.Intent $r6;
        int $i0;
        java.lang.Boolean $r7, $r8;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: int[];

        r2 := @parameter2: android.content.Intent[];

        r3 := @parameter3: com.android.server.uri.NeededUriGrants[];

        r4 := @parameter4: com.android.server.wm.ActivityRecord;

        if r4 != r0 goto label1;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r8;

     label1:
        $i0 = r1[0];

        $r6 = r2[0];

        $r5 = r3[0];

        virtualinvoke r4.<com.android.server.wm.ActivityRecord: int finishIfPossible(int,android.content.Intent,com.android.server.uri.NeededUriGrants,java.lang.String,boolean)>($i0, $r6, $r5, "navigate-up", 1);

        r1[0] = 0;

        r2[0] = null;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r7;
    }

    public static void lambda$xHrv17CG5tAkxdutHyfCFt4-Iec(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: java.lang.String;

        staticinvoke <com.android.server.wm.ActivityStack: void restartPackage(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord,java.lang.String)>(r0, r1, r2);

        return;
    }

    private static void processTaskResizeBounds(com.android.server.wm.Task, android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r1);

        return;
    }

    private static void restartPackage(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        java.lang.String r2, $r4;
        android.content.pm.ActivityInfo $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r4 = $r3.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.ActivityRecord: boolean forceNewConfig> = 1;

        if r1 == null goto label1;

        if r0 != r1 goto label1;

        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void startFreezingScreenLocked(int)>(256);

     label1:
        return;
    }

    private boolean resumeNextFocusableActivityWhenStackIsEmpty(com.android.server.wm.ActivityRecord, android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0, r3;
        com.android.server.wm.ActivityRecord r1;
        android.app.ActivityOptions r2;
        boolean $z0, $z1, $z2;
        com.android.server.wm.RootWindowContainer $r4, $r6;
        com.android.server.wm.TaskDisplayArea $r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: android.app.ActivityOptions;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        if $z0 != 0 goto label1;

        r3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack adjustFocusToNextFocusableTask(java.lang.String)>("noMoreActivities");

        if r3 == null goto label1;

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z2 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r3, r1, null);

        return $z2;

     label1:
        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r2);

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z1 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: boolean resumeHomeActivity(com.android.server.wm.ActivityRecord,java.lang.String,com.android.server.wm.TaskDisplayArea)>(r1, "noMoreActivities", $r5);

        return $z1;
    }

    private boolean resumeTopActivityInnerLocked(com.android.server.wm.ActivityRecord, android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0, r2, $r57;
        com.android.server.wm.ActivityRecord r1, $r7, $r15, $r40, $r43, $r44, $r53, $r54, $r55, $r61, r80, $r83, r87, r88, $r89, r98;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        com.android.server.wm.ActivityTaskManagerService $r3, $r21, $r29, $r31, $r35, $r63, $r65, $r84, r90, $r92;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, z45, z46, $z47, z48, z49, z50, $z51, z52, z53, z54, z55, $z56, z57, z58, $z59, z60;
        com.android.server.wm.RootWindowContainer $r4, $r8, $r11, $r42, $r62;
        com.android.server.wm.ActivityStackSupervisor $r5, $r6, $r9, $r14, $r16, $r18, $r20, $r41, $r45, $r49, $r106;
        java.util.ArrayList $r10, $r17, $r19, $r37, $r46, $r50, r101, r102;
        android.content.pm.ActivityInfo $r12;
        android.content.pm.ApplicationInfo $r13;
        com.android.server.wm.ActivityStack$ActivityState $r22, $r56, $r64, $r69, r99;
        com.android.server.wm.WindowProcessController $r23, $r24, $r32, $r33, $r58;
        android.app.IApplicationThread $r25;
        com.android.server.wm.ActivityRecord$Token $r26;
        com.android.server.wm.Task $r27, $r47, $r48, $r51, $r52;
        java.lang.String $r28, $r60, $r68, $r72, $r73, $r77, r91, $r94;
        com.android.server.wm.AppWarnings $r30;
        android.app.servertransaction.ResumeActivityItem $r34;
        com.android.server.wm.ClientLifecycleManager $r36;
        android.app.servertransaction.NewIntentItem $r38;
        android.app.servertransaction.ActivityResultItem $r39;
        java.lang.StringBuilder $r59, $r67, $r71, $r76;
        java.lang.Exception $r66, $r75, $r78, $r79;
        java.lang.Throwable $r70;
        android.os.RemoteException $r74;
        android.app.ActivityOptions r81;
        com.android.server.wm.TaskDisplayArea r82;
        android.app.ActivityManagerInternal $r85;
        android.content.pm.IPackageManager $r93;
        com.android.server.wm.DisplayContent r97;
        android.app.servertransaction.ClientTransaction r100;

        r0 := @this: com.android.server.wm.ActivityStack;

        r80 := @parameter0: com.android.server.wm.ActivityRecord;

        r81 := @parameter1: android.app.ActivityOptions;

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: boolean isBooting()>();

        if $z0 != 0 goto label01;

        $r65 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z42 = virtualinvoke $r65.<com.android.server.wm.ActivityTaskManagerService: boolean isBooted()>();

        if $z42 != 0 goto label01;

        return 0;

     label01:
        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(1);

        if r1 == null goto label02;

        z45 = 1;

        goto label03;

     label02:
        z45 = 0;

     label03:
        if z45 == 0 goto label04;

        $z41 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAttached()>();

        if $z41 != 0 goto label04;

        return 0;

     label04:
        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void cancelInitializingActivities()>();

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        z46 = $r5.<com.android.server.wm.ActivityStackSupervisor: boolean mUserLeaving>;

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6.<com.android.server.wm.ActivityStackSupervisor: boolean mUserLeaving> = 0;

        if z45 != 0 goto label05;

        $z40 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean resumeNextFocusableActivityWhenStackIsEmpty(com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r80, r81);

        return $z40;

     label05:
        r1.<com.android.server.wm.ActivityRecord: boolean delayedResume> = 0;

        r82 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r7 != r1 goto label06;

        $r64 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z38 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r64);

        if $z38 == 0 goto label06;

        $z39 = virtualinvoke r82.<com.android.server.wm.TaskDisplayArea: boolean allResumedActivitiesComplete()>();

        if $z39 == 0 goto label06;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void executeAppTransition(android.app.ActivityOptions)>(r81);

        return 0;

     label06:
        $z47 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canResumeByCompat()>();

        if $z47 != 0 goto label07;

        return 0;

     label07:
        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z1 = virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: boolean allPausedActivitiesComplete()>();

        if $z1 != 0 goto label08;

        return 0;

     label08:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepOrShutDownActivities()>();

        if $z2 == 0 goto label16;

        $r61 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity>;

        if $r61 != r1 goto label16;

        $r62 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z31 = virtualinvoke $r62.<com.android.server.wm.RootWindowContainer: boolean allPausedActivitiesComplete()>();

        if $z31 == 0 goto label16;

        z48 = 1;

        $r63 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z32 = $r63.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        if $z32 != 0 goto label15;

        $z33 = r0.<com.android.server.wm.ActivityStack: boolean mTopActivityOccludesKeyguard>;

        if $z33 != 0 goto label09;

        $z37 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canShowWhenLocked()>();

        if $z37 == 0 goto label09;

        z49 = 1;

        goto label10;

     label09:
        z49 = 0;

     label10:
        $r83 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTopDismissingKeyguardActivity>;

        if $r83 == r1 goto label11;

        $z36 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean containsDismissKeyguardWindow()>();

        if $z36 == 0 goto label11;

        z50 = 1;

        goto label12;

     label11:
        z50 = 0;

     label12:
        if z49 != 0 goto label14;

        if z50 == 0 goto label13;

        goto label14;

     label13:
        z48 = 1;

        $z34 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean currentLaunchCanTurnScreenOn()>();

        if $z34 == 0 goto label15;

        z48 = 1;

        $z35 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canTurnScreenOn()>();

        if $z35 == 0 goto label15;

        z48 = 0;

        goto label15;

     label14:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        z48 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

     label15:
        if z48 == 0 goto label16;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void executeAppTransition(android.app.ActivityOptions)>(r81);

        return 0;

     label16:
        $r84 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r85 = $r84.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i6 = r1.<com.android.server.wm.ActivityRecord: int mUserId>;

        $z51 = virtualinvoke $r85.<android.app.ActivityManagerInternal: boolean hasStartedUserState(int)>($i6);

        if $z51 != 0 goto label17;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping resume of top activity ");

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": user ");

        $i5 = r1.<com.android.server.wm.ActivityRecord: int mUserId>;

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is stopped");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r60);

        return 0;

     label17:
        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r10 = $r9.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r10.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setSleeping(boolean)>(0);

        $r11 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z3 = virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: boolean allPausedActivitiesComplete()>();

        if $z3 != 0 goto label18;

        return 0;

     label18:
        $r14 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r12 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r13 = $r12.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r13.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke $r14.<com.android.server.wm.ActivityStackSupervisor: void setLaunchSource(int)>($i1);

        r2 = virtualinvoke r82.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getLastFocusedStack()>();

        r87 = null;

        if r2 == null goto label19;

        r87 = null;

        if r2 == r0 goto label19;

        r88 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        r87 = r88;

        if z46 == 0 goto label19;

        r87 = r88;

        $z29 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inMultiWindowMode()>();

        if $z29 == 0 goto label19;

        r87 = r88;

        $z30 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(r1);

        if $z30 == 0 goto label19;

        r87 = r88;

        z52 = 0;

        goto label20;

     label19:
        z52 = z46;

     label20:
        z53 = virtualinvoke r82.<com.android.server.wm.TaskDisplayArea: boolean pauseBackStacks(boolean,com.android.server.wm.ActivityRecord)>(z52, r1);

        $r89 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r89 == null goto label21;

        $z28 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean startPausingLocked(boolean,boolean,com.android.server.wm.ActivityRecord)>(z52, 0, r1);

        z54 = z53 | $z28;

        goto label22;

     label21:
        z54 = z53;

     label22:
        if z54 == 0 goto label30;

        $z26 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z26 == 0 goto label23;

        $r58 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r58.<com.android.server.wm.WindowProcessController: void updateProcessInfo(boolean,boolean,boolean,boolean)>(0, 1, 0, 0);

        goto label28;

     label23:
        $z27 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isProcessRunning()>();

        if $z27 != 0 goto label28;

        $r57 = virtualinvoke r82.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r0 != $r57 goto label24;

        z55 = 1;

        goto label25;

     label24:
        z55 = 0;

     label25:
        r90 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        if z55 == 0 goto label26;

        r91 = "pre-top-activity";

        goto label27;

     label26:
        r91 = "pre-activity";

     label27:
        virtualinvoke r90.<com.android.server.wm.ActivityTaskManagerService: void startProcessAsync(com.android.server.wm.ActivityRecord,boolean,boolean,java.lang.String)>(r1, 0, z55, r91);

     label28:
        if r87 == null goto label29;

        virtualinvoke r87.<com.android.server.wm.ActivityRecord: void setWillCloseOrEnterPip(boolean)>(1);

     label29:
        return 1;

     label30:
        $r15 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r15 != r1 goto label31;

        $r56 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z24 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r56);

        if $z24 == 0 goto label31;

        $z25 = virtualinvoke r82.<com.android.server.wm.TaskDisplayArea: boolean allResumedActivitiesComplete()>();

        if $z25 == 0 goto label31;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void executeAppTransition(android.app.ActivityOptions)>(r81);

        return 1;

     label31:
        $z56 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        if $z56 == 0 goto label32;

        $r53 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity>;

        if $r53 == null goto label32;

        $r54 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity>;

        $z23 = $r54.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z23 != 0 goto label32;

        $r55 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity>;

        virtualinvoke $r55.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("resume-no-history", 0);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity> = null;

     label32:
        if r80 == null goto label33;

        if r80 == r1 goto label33;

        $z21 = r1.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z21 == 0 goto label33;

        $z22 = r80.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z22 == 0 goto label33;

        virtualinvoke r80.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(0);

     label33:
        $r92 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r93 = virtualinvoke $r92.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.IPackageManager getPackageManager()>();

        $r94 = r1.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $i7 = r1.<com.android.server.wm.ActivityRecord: int mUserId>;

        interfaceinvoke $r93.<android.content.pm.IPackageManager: void setPackageStoppedState(java.lang.String,boolean,int)>($r94, 0, $i7);

     label34:
        goto label37;

     label35:
        $r70 := @caughtexception;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed trying to unstop package ");

        $r72 = r1.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r70);

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r73);

        goto label37;

     label36:
        $r74 := @caughtexception;

     label37:
        r97 = r82.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        if r80 == null goto label47;

        $z17 = r80.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z17 == 0 goto label42;

        $r49 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r50 = $r49.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        $z20 = virtualinvoke $r50.<java.util.ArrayList: boolean contains(java.lang.Object)>(r80);

        if $z20 == 0 goto label38;

        z57 = 0;

        virtualinvoke r97.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(0, 0);

        goto label41;

     label38:
        $r51 = virtualinvoke r80.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r52 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r51 != $r52 goto label39;

        i8 = 7;

        goto label40;

     label39:
        i8 = 9;

     label40:
        virtualinvoke r97.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(i8, 0);

        z57 = 1;

     label41:
        virtualinvoke r80.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(0);

        goto label50;

     label42:
        $r45 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r46 = $r45.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        $z18 = virtualinvoke $r46.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z18 == 0 goto label43;

        virtualinvoke r97.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(0, 0);

        z57 = 0;

        goto label50;

     label43:
        $r47 = virtualinvoke r80.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r48 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r47 != $r48 goto label44;

        i9 = 6;

        goto label46;

     label44:
        $z19 = r1.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind>;

        if $z19 == 0 goto label45;

        i9 = 16;

        goto label46;

     label45:
        i9 = 8;

     label46:
        virtualinvoke r97.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(i9, 0);

        goto label49;

     label47:
        $r16 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r17 = $r16.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        $z4 = virtualinvoke $r17.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z4 == 0 goto label48;

        virtualinvoke r97.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(0, 0);

        z57 = 0;

        goto label50;

     label48:
        virtualinvoke r97.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(6, 0);

     label49:
        z57 = 1;

     label50:
        if z57 == 0 goto label51;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void applyOptionsLocked()>();

        goto label52;

     label51:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void clearOptionsLocked()>();

     label52:
        $r18 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r19 = $r18.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r19.<java.util.ArrayList: void clear()>();

        $z5 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z5 == 0 goto label88;

        if r2 == null goto label54;

        $z15 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean inMultiWindowMode()>();

        if $z15 != 0 goto label53;

        $r43 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity>;

        if $r43 == null goto label54;

        $r44 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity>;

        $z16 = virtualinvoke $r44.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        if $z16 != 0 goto label54;

     label53:
        z58 = 1;

        goto label55;

     label54:
        z58 = 0;

     label55:
        $z59 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z59 == 0 goto label56;

        $z14 = r1.<com.android.server.wm.ActivityRecord: boolean stopped>;

        if $z14 != 0 goto label56;

        if z58 == 0 goto label57;

     label56:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(1);

     label57:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void startLaunchTickingLocked()>();

        if r2 != null goto label58;

        r98 = null;

        goto label59;

     label58:
        r98 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

     label59:
        r99 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState getState()>();

        $r21 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r21.<com.android.server.wm.ActivityTaskManagerService: void updateCpuStats()>();

        $r22 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r22, "resumeTopActivityInnerLocked");

        $r23 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r23.<com.android.server.wm.WindowProcessController: void updateProcessInfo(boolean,boolean,boolean,boolean)>(0, 1, 1, 1);

        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(r1);

        if $z7 == 0 goto label60;

        $r42 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        $z13 = virtualinvoke $r42.<com.android.server.wm.RootWindowContainer: boolean ensureVisibilityAndConfig(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r1, $i4, 1, 0);

        z60 = $z13 ^ 1;

        goto label61;

     label60:
        z60 = 1;

     label61:
        if z60 == 0 goto label66;

        $r40 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r40 == r1 goto label62;

        $r41 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r41.<com.android.server.wm.ActivityStackSupervisor: void scheduleResumeTopActivities()>();

     label62:
        $z11 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z11 == 0 goto label64;

        $z12 = r1.<com.android.server.wm.ActivityRecord: boolean stopped>;

        if $z12 == 0 goto label63;

        goto label64;

     label63:
        goto label65;

     label64:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(1);

     label65:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void completeResumeLocked()>();

        return 1;

     label66:
        $r24 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r25 = virtualinvoke $r24.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r26 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r100 = staticinvoke <android.app.servertransaction.ClientTransaction: android.app.servertransaction.ClientTransaction obtain(android.app.IApplicationThread,android.os.IBinder)>($r25, $r26);

        r101 = r1.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

     label67:
        if r101 == null goto label73;

     label68:
        i10 = virtualinvoke r101.<java.util.ArrayList: int size()>();

        $z10 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z10 != 0 goto label73;

     label69:
        if i10 <= 0 goto label73;

     label70:
        $r39 = staticinvoke <android.app.servertransaction.ActivityResultItem: android.app.servertransaction.ActivityResultItem obtain(java.util.List)>(r101);

        virtualinvoke r100.<android.app.servertransaction.ClientTransaction: void addCallback(android.app.servertransaction.ClientTransactionItem)>($r39);

     label71:
        goto label73;

     label72:
        $r79 := @caughtexception;

        goto label83;

     label73:
        r102 = r1.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

     label74:
        if r102 == null goto label76;

     label75:
        $r37 = r1.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

        $r38 = staticinvoke <android.app.servertransaction.NewIntentItem: android.app.servertransaction.NewIntentItem obtain(java.util.List,boolean)>($r37, 1);

        virtualinvoke r100.<android.app.servertransaction.ClientTransaction: void addCallback(android.app.servertransaction.ClientTransactionItem)>($r38);

     label76:
        $z8 = r1.<com.android.server.wm.ActivityRecord: boolean stopped>;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void notifyAppResumed(boolean)>($z8);

        i11 = r1.<com.android.server.wm.ActivityRecord: int mUserId>;

        i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r27 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        i12 = $r27.<com.android.server.wm.Task: int mTaskId>;

     label77:
        $r28 = r1.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmResumeActivity(int,int,int,java.lang.String)>(i11, i0, i12, $r28);

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setSleeping(boolean)>(0);

        $r29 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r30 = virtualinvoke $r29.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings getAppWarningsLocked()>();

        virtualinvoke $r30.<com.android.server.wm.AppWarnings: void onResumeActivity(com.android.server.wm.ActivityRecord)>(r1);

        $r32 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r31 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $i2 = $r31.<com.android.server.wm.ActivityTaskManagerService: int mTopProcessState>;

        virtualinvoke $r32.<com.android.server.wm.WindowProcessController: void setPendingUiCleanAndForceProcessStateUpTo(int)>($i2);

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void clearOptionsLocked()>();

        $r33 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i3 = virtualinvoke $r33.<com.android.server.wm.WindowProcessController: int getReportedProcState()>();

        $z9 = virtualinvoke r97.<com.android.server.wm.DisplayContent: boolean isNextTransitionForward()>();

        $r34 = staticinvoke <android.app.servertransaction.ResumeActivityItem: android.app.servertransaction.ResumeActivityItem obtain(int,boolean)>($i3, $z9);

        virtualinvoke r100.<android.app.servertransaction.ClientTransaction: void setLifecycleStateRequest(android.app.servertransaction.ActivityLifecycleItem)>($r34);

        $r35 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r36 = virtualinvoke $r35.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        virtualinvoke $r36.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>(r100);

     label78:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void completeResumeLocked()>();

     label79:
        goto label91;

     label80:
        $r75 := @caughtexception;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown during resume of ");

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r77, $r75);

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("resume-exception", 1);

        return 1;

     label81:
        $r66 := @caughtexception;

        goto label83;

     label82:
        $r78 := @caughtexception;

     label83:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>(r99, "resumeTopActivityInnerLocked");

        if r98 == null goto label84;

        $r69 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        virtualinvoke r98.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r69, "resumeTopActivityInnerLocked");

     label84:
        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restarting because process died: ");

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r68);

        $z43 = r1.<com.android.server.wm.ActivityRecord: boolean hasBeenLaunched>;

        if $z43 != 0 goto label85;

        r1.<com.android.server.wm.ActivityRecord: boolean hasBeenLaunched> = 1;

        goto label87;

     label85:
        if r2 == null goto label87;

        $z44 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean isTopStackInDisplayArea()>();

        if $z44 == 0 goto label86;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void showStartingWindow(com.android.server.wm.ActivityRecord,boolean,boolean)>(null, 0, 0);

        goto label87;

     label86:
        goto label87;

     label87:
        $r106 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r106.<com.android.server.wm.ActivityStackSupervisor: void startSpecificActivity(com.android.server.wm.ActivityRecord,boolean,boolean)>(r1, 1, 0);

        return 1;

     label88:
        $z6 = r1.<com.android.server.wm.ActivityRecord: boolean hasBeenLaunched>;

        if $z6 != 0 goto label89;

        r1.<com.android.server.wm.ActivityRecord: boolean hasBeenLaunched> = 1;

        goto label90;

     label89:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void showStartingWindow(com.android.server.wm.ActivityRecord,boolean,boolean)>(null, 0, 0);

     label90:
        $r20 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r20.<com.android.server.wm.ActivityStackSupervisor: void startSpecificActivity(com.android.server.wm.ActivityRecord,boolean,boolean)>(r1, 1, 1);

     label91:
        return 1;

        catch android.os.RemoteException from label33 to label34 with label36;
        catch java.lang.IllegalArgumentException from label33 to label34 with label35;
        catch java.lang.Exception from label66 to label67 with label82;
        catch java.lang.Exception from label68 to label69 with label72;
        catch java.lang.Exception from label70 to label71 with label72;
        catch java.lang.Exception from label73 to label74 with label82;
        catch java.lang.Exception from label75 to label76 with label72;
        catch java.lang.Exception from label76 to label77 with label82;
        catch java.lang.Exception from label77 to label78 with label81;
        catch java.lang.Exception from label78 to label79 with label80;
    }

    private int setBounds(android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1, r2;
        int i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = staticinvoke <com.android.server.wm.ActivityStack: boolean equivalentBounds(android.graphics.Rect,android.graphics.Rect)>(r1, r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inMultiWindowMode()>();

        if $z1 != 0 goto label2;

        r2 = null;

        goto label2;

     label2:
        i0 = specialinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r2);

        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateSurfaceBounds()>();

        return i0;
    }

    private void setTaskBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$ActivityStack$VIuWlCdKwIo4qqRlevMLniedZ7o' $r1;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r2;
        android.graphics.Rect r3;
        com.android.internal.util.function.pooled.PooledConsumer r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r3 := @parameter0: android.graphics.Rect;

        $r1 = <com.android.server.wm._$$Lambda$ActivityStack$VIuWlCdKwIo4qqRlevMLniedZ7o: com.android.server.wm.'-$$Lambda$ActivityStack$VIuWlCdKwIo4qqRlevMLniedZ7o' INSTANCE>;

        $r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        r5 = (java.util.function.BiConsumer) $r1;

        r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r5, $r2, r3);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r4, 1);

        interfaceinvoke r4.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    private static void setTaskBounds(com.android.server.wm.Task, android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        boolean $z0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r1 = null;

     label2:
        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r1);

        return;
    }

    private void setWindowingModeInSurfaceTransaction(int, boolean)
    {
        com.android.server.wm.ActivityStack r0, $r21, $r22;
        boolean z0, z1, $z3, $z4, $z6, $z7, $z8, $z9, $z10, z11;
        com.android.server.wm.TaskDisplayArea r1;
        int i0, $i2, $i3, i5, i6, i7;
        com.android.server.wm.ActivityRecord r2;
        android.graphics.Rect $r3, $r11, $r12, $r13, $r39, $r40;
        com.android.server.wm.ActivityTaskManagerService $r4, $r14, $r19, $r23, $r27, $r33, $r37;
        com.android.server.wm.RootWindowContainer $r5, $r6;
        com.android.server.wm.DisplayContent $r7, $r9, $r30;
        com.android.server.wm.PinnedStackController $r8, $r10, $r31;
        com.android.server.wm.ActivityStackSupervisor $r15;
        java.util.ArrayList $r16;
        android.content.pm.ActivityInfo $r17;
        android.content.pm.ApplicationInfo $r18;
        com.android.server.wm.TaskChangeNotificationController $r20, $r24, $r28;
        android.content.res.Configuration $r25;
        android.app.WindowConfiguration $r26;
        java.lang.Throwable $r29, $r32;
        com.android.server.wm.Task r34;
        com.android.server.wm.WindowContainer r35;
        java.lang.String r36;
        java.lang.IllegalArgumentException r38;

        r0 := @this: com.android.server.wm.ActivityStack;

        i5 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r1 != null goto label01;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", "taskDisplayArea is null, bail early");

        return;

     label01:
        i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStack: int getRequestedOverrideWindowingMode()>();

        r34 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.Task getTopMostTask()>();

        if z0 != 0 goto label02;

        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getActivityType()>();

        $z9 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: boolean isValidWindowingMode(int,com.android.server.wm.ActivityRecord,com.android.server.wm.Task,int)>(i5, null, r34, $i3);

        if $z9 != 0 goto label02;

        i5 = 0;

        goto label02;

     label02:
        z1 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: boolean isSplitScreenModeActivated()>();

        if z0 == 0 goto label03;

        if z1 == 0 goto label03;

        if i5 != 1 goto label03;

        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isActivityTypeStandardOrUndefined()>();

        if $z8 == 0 goto label03;

        $r27 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r28 = virtualinvoke $r27.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r28.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityDismissingDockedStack()>();

        virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: void onSplitScreenModeDismissed(com.android.server.wm.ActivityStack)>(r0);

     label03:
        if i0 != i5 goto label04;

        $r25 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $r26 = $r25.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        virtualinvoke $r26.<android.app.WindowConfiguration: void setWindowingMode(int)>(i5);

        return;

     label04:
        r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        i6 = i5;

        if i5 != 0 goto label06;

        r35 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getParent()>();

        if r35 == null goto label05;

        i6 = virtualinvoke r35.<com.android.server.wm.ConfigurationContainer: int getWindowingMode()>();

        goto label06;

     label05:
        i6 = 1;

     label06:
        if i0 != 2 goto label07;

        $r23 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r24 = virtualinvoke $r23.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r24.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityUnpinned()>();

     label07:
        if i6 != 2 goto label08;

        $r21 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootPinnedTask()>();

        if $r21 == null goto label08;

        $r22 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootPinnedTask()>();

        virtualinvoke $r22.<com.android.server.wm.ActivityStack: void dismissPip()>();

     label08:
        if i6 == 1 goto label09;

        if r2 == null goto label09;

        $z6 = r2.<com.android.server.wm.ActivityRecord: boolean noDisplay>;

        if $z6 != 0 goto label09;

        $z7 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isNonResizableOrForcedResizable(int)>(i6);

        if $z7 == 0 goto label09;

        $r17 = r2.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r18 = $r17.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r36 = $r18.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r19 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i2 = r34.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r20.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityForcedResizable(int,int,java.lang.String)>($i2, 1, r36);

     label09:
        $r37 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r37.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

        if r2 == null goto label11;

     label10:
        $r15 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r16 = $r15.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label11:
        specialinvoke r0.<com.android.server.wm.Task: void setWindowingMode(int)>(i5);

        i7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

     label12:
        if z0 == 0 goto label13;

        $r14 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return;

     label13:
        if i7 != 3 goto label15;

        if z1 != 0 goto label14;

        goto label15;

     label14:
        r38 = new java.lang.IllegalArgumentException;

        specialinvoke r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Setting primary split-screen windowing mode while there is already one isn\'t currently supported");

        throw r38;

     label15:
        $r3 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect2>;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

     label16:
        if i7 == 1 goto label20;

     label17:
        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean matchParentBounds()>();

        if $z4 == 0 goto label19;

        $r13 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect2>;

        virtualinvoke $r13.<android.graphics.Rect: void setEmpty()>();

     label18:
        goto label20;

     label19:
        $r12 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect2>;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void getRawBounds(android.graphics.Rect)>($r12);

     label20:
        $r39 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        $r40 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect2>;

        $z10 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r39, $r40);

        if $z10 != 0 goto label21;

        $r11 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect2>;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void resize(android.graphics.Rect,boolean,boolean)>($r11, 0, 1);

     label21:
        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 1);

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        if i0 != 2 goto label22;

        if i7 != 1 goto label22;

        z11 = 1;

        goto label23;

     label22:
        z11 = 0;

     label23:
        if z11 == 0 goto label27;

        if r2 == null goto label27;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isForceHidden()>();

        if $z3 != 0 goto label27;

        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent mDisplayContent>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        virtualinvoke $r8.<com.android.server.wm.PinnedStackController: void setPipWindowingModeChanging(boolean)>(1);

     label24:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void reportDescendantOrientationChangeIfNeeded()>();

     label25:
        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent mDisplayContent>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        virtualinvoke $r10.<com.android.server.wm.PinnedStackController: void setPipWindowingModeChanging(boolean)>(0);

        goto label27;

     label26:
        $r29 := @caughtexception;

        $r30 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent mDisplayContent>;

        $r31 = virtualinvoke $r30.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        virtualinvoke $r31.<com.android.server.wm.PinnedStackController: void setPipWindowingModeChanging(boolean)>(0);

        throw $r29;

     label27:
        return;

     label28:
        $r32 := @caughtexception;

        $r33 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r33.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r32;

        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    private void updateSurfaceBounds()
    {
        com.android.server.wm.ActivityStack r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void updateSurfaceSize(android.view.SurfaceControl$Transaction)>($r1);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void updateSurfacePosition()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void scheduleAnimation()>();

        return;
    }

    private void updateTransitLocked(int, android.app.ActivityOptions, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        int i0;
        android.app.ActivityOptions r1;
        boolean z0, $z1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.ActivityStack$ActivityState $r3;
        com.android.server.wm.DisplayContent $r4, $r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.ActivityOptions;

        z0 := @parameter2: boolean;

        if r1 == null goto label2;

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r2 == null goto label1;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r3);

        if $z1 != 0 goto label1;

        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void updateOptionsLocked(android.app.ActivityOptions)>(r1);

        goto label2;

     label1:
        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r1);

     label2:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(i0, 0, 0, z0);

        return;
    }

    void addChild(com.android.server.wm.WindowContainer, boolean, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.Task r1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.WindowContainer r8;
        int i0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r8 := @parameter0: com.android.server.wm.WindowContainer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isSingleTaskInstance()>();

        if $z2 == 0 goto label02;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean hasChild()>();

        if $z3 != 0 goto label01;

        goto label02;

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only have one child on stack=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label02:
        r1 = virtualinvoke r8.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r1 == null goto label06;

     label03:
        virtualinvoke r1.<com.android.server.wm.Task: void setForceShowForAllUsers(boolean)>(z1);

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

        goto label11;

     label06:
        if z0 == 0 goto label07;

        i0 = 2147483647;

        goto label08;

     label07:
        i0 = 0;

     label08:
        specialinvoke r0.<com.android.server.wm.ActivityStack: void addChild(com.android.server.wm.WindowContainer,int,boolean)>(r8, i0, z0);

     label09:
        if r1 == null goto label10;

        virtualinvoke r1.<com.android.server.wm.Task: void setForceShowForAllUsers(boolean)>(0);

     label10:
        return;

     label11:
        if r1 == null goto label12;

        virtualinvoke r1.<com.android.server.wm.Task: void setForceShowForAllUsers(boolean)>(0);

     label12:
        throw $r7;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
    }

    void awakeFromSleepingLocked()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$ActivityStack$otuVDI2NtFYAidkSFyWS-mrD_fI' $r1;
        com.android.server.wm.ActivityRecord $r2, $r3;
        java.util.function.Consumer r4;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = <com.android.server.wm._$$Lambda$ActivityStack$otuVDI2NtFYAidkSFyWS_mrD_fI: com.android.server.wm.'-$$Lambda$ActivityStack$otuVDI2NtFYAidkSFyWS-mrD_fI' INSTANCE>;

        r4 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>(r4);

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r2 == null goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", "awakeFromSleepingLocked: previously pausing activity didn\'t pause");

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        virtualinvoke $r3.<com.android.server.wm.ActivityRecord: void activityPaused(boolean)>(1);

     label1:
        return;
    }

    boolean canShowWithInsecureKeyguard()
    {
        com.android.server.wm.ActivityStack r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;
        android.view.Display $r6;
        com.android.server.wm.DisplayContent r7;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        if r7 == null goto label3;

        $r6 = r7.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $i1 = virtualinvoke $r6.<android.view.Display: int getFlags()>();

        $i2 = $i1 & 32;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stack is not attached to any display, stackId=");

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    void cancelInitializingActivities()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$_-mEZ6EASUAbbjgZj87dfvxRN64' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = <com.android.server.wm._$$Lambda$__mEZ6EASUAbbjgZj87dfvxRN64: com.android.server.wm.'-$$Lambda$_-mEZ6EASUAbbjgZj87dfvxRN64' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean checkBehindFullscreenActivity(com.android.server.wm.ActivityRecord,java.util.function.Consumer)>(null, r2);

        return;
    }

    boolean checkBehindFullscreenActivity(com.android.server.wm.ActivityRecord, java.util.function.Consumer)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        java.util.function.Consumer r2;
        com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: java.util.function.Consumer;

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper mCheckBehindFullscreenActivityHelper>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityStack$CheckBehindFullscreenActivityHelper: boolean process(com.android.server.wm.ActivityRecord,java.util.function.Consumer)>(r1, r2);

        return $z0;
    }

    boolean checkKeyguardVisibility(com.android.server.wm.ActivityRecord, boolean, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, $r12;
        int i0, i1;
        boolean z0, z1, z2, z3, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, z14, z15, z16;
        com.android.server.wm.ActivityStackSupervisor $r2, $r4, $r6, $r8, $r10;
        com.android.server.wm.KeyguardController $r3, $r5, $r7, $r9, $r11;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z12 := @parameter1: boolean;

        z13 := @parameter2: boolean;

        i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        i1 = i0;

        if i0 != -1 goto label01;

        i1 = 0;

     label01:
        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        z0 = virtualinvoke $r3.<com.android.server.wm.KeyguardController: boolean isKeyguardOrAodShowing(int)>(i1);

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        z1 = virtualinvoke $r5.<com.android.server.wm.KeyguardController: boolean isKeyguardLocked()>();

        z2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canShowWhenLocked()>();

        z3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean containsDismissKeyguardWindow()>();

        if z12 == 0 goto label06;

        if z3 == 0 goto label02;

        $r12 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTopDismissingKeyguardActivity>;

        if $r12 != null goto label02;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTopDismissingKeyguardActivity> = r1;

     label02:
        if z13 == 0 goto label03;

        $z10 = r0.<com.android.server.wm.ActivityStack: boolean mTopActivityOccludesKeyguard>;

        $z11 = $z10 | z2;

        r0.<com.android.server.wm.ActivityStack: boolean mTopActivityOccludesKeyguard> = $z11;

     label03:
        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean canShowWithInsecureKeyguard()>();

        if $z8 == 0 goto label04;

        $r10 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r11 = virtualinvoke $r10.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $z9 = virtualinvoke $r11.<com.android.server.wm.KeyguardController: boolean canDismissKeyguard()>();

        if $z9 == 0 goto label04;

        z14 = 1;

        goto label05;

     label04:
        z14 = 0;

     label05:
        if z14 == 0 goto label06;

        return 1;

     label06:
        if z0 == 0 goto label09;

        if z12 == 0 goto label07;

        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $z7 = virtualinvoke $r9.<com.android.server.wm.KeyguardController: boolean canShowActivityWhileKeyguardShowing(com.android.server.wm.ActivityRecord,boolean)>(r1, z3);

        if $z7 == 0 goto label07;

        z15 = 1;

        goto label08;

     label07:
        z15 = 0;

     label08:
        return z15;

     label09:
        if z1 == 0 goto label11;

        z16 = 0;

        if z12 == 0 goto label10;

        z16 = 0;

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $z6 = virtualinvoke $r7.<com.android.server.wm.KeyguardController: boolean canShowWhileOccluded(boolean,boolean)>(z3, z2);

        if $z6 == 0 goto label10;

        z16 = 1;

     label10:
        return z16;

     label11:
        return z12;
    }

    void checkReadyForSleep()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0, $z1;
        com.android.server.wm.ActivityStackSupervisor $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean goToSleepIfPossible(boolean)>(0);

        if $z1 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: void checkReadyForSleepLocked(boolean)>(1);

     label1:
        return;
    }

    void checkTranslucentActivityWaiting(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, $r2, $r4;
        java.util.ArrayList $r3;
        android.os.Handler $r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting>;

        if $r2 == r1 goto label2;

        $r3 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting>;

        if $r4 == null goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void notifyActivityDrawnLocked(com.android.server.wm.ActivityRecord)>(null);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting> = null;

     label1:
        $r5 = r0.<com.android.server.wm.ActivityStack: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(101);

     label2:
        return;
    }

    void completePauseLocked(boolean, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0, r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.android.server.wm.ActivityRecord r1, r26, r27, r28;
        long l0, $l1, $l3, $l4;
        com.android.server.wm.ActivityTaskManagerService $r3, $r9, $r18;
        com.android.server.wm.TaskChangeNotificationController $r4;
        com.android.server.wm.ActivityStackSupervisor $r5, $r31;
        com.android.server.wm.TaskDisplayArea $r6, $r7;
        byte $b2, $b5;
        com.android.server.wm.WindowProcessController $r8;
        android.content.pm.ActivityInfo $r10, $r11;
        android.content.pm.ApplicationInfo $r12;
        int $i6;
        com.android.server.wm.'-$$Lambda$1636dquQO0UvkFayOGf_gceB4iw' $r13;
        android.app.ActivityManagerInternal $r14;
        java.lang.String $r15;
        java.lang.Integer $r16;
        java.lang.Long $r17;
        com.android.server.wm.ActivityTaskManagerService$H $r19;
        com.android.server.wm.RootWindowContainer $r20, $r21, $r22, $r30;
        com.android.server.wm.ActivityStack$ActivityState $r23, $r24, $r25;
        com.android.internal.util.function.pooled.PooledRunnable r29;
        com.android.internal.util.function.QuadConsumer r32;

        r0 := @this: com.android.server.wm.ActivityStack;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r26 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        r27 = r26;

        if r26 == null goto label08;

        virtualinvoke r26.<com.android.server.wm.ActivityRecord: void setWillCloseOrEnterPip(boolean)>(0);

        $r23 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        z1 = virtualinvoke r26.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r23);

        $r24 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        virtualinvoke r26.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r24, "completePausedLocked");

        $z5 = r26.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z5 == 0 goto label01;

        r27 = virtualinvoke r26.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord completeFinishing(java.lang.String)>("completePausedLocked");

        goto label06;

     label01:
        $z6 = virtualinvoke r26.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z6 == 0 goto label05;

        $z7 = r26.<com.android.server.wm.ActivityRecord: boolean deferRelaunchUntilPaused>;

        if $z7 == 0 goto label02;

        $z10 = r26.<com.android.server.wm.ActivityRecord: boolean preserveWindowOnDeferredRelaunch>;

        virtualinvoke r26.<com.android.server.wm.ActivityRecord: void relaunchActivityLocked(boolean)>($z10);

        r27 = r26;

        goto label06;

     label02:
        if z1 == 0 goto label03;

        $r25 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        virtualinvoke r26.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r25, "completePausedLocked");

        r27 = r26;

        goto label06;

     label03:
        $z8 = r26.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z8 == 0 goto label04;

        r27 = r26;

        $z9 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepOrShutDownActivities()>();

        if $z9 == 0 goto label06;

     label04:
        virtualinvoke r26.<com.android.server.wm.ActivityRecord: void setDeferHidingClient(boolean)>(0);

        virtualinvoke r26.<com.android.server.wm.ActivityRecord: void addToStopping(boolean,boolean,java.lang.String)>(1, 0, "completePauseLocked");

        r27 = r26;

        goto label06;

     label05:
        r27 = null;

     label06:
        if r27 == null goto label07;

        virtualinvoke r27.<com.android.server.wm.ActivityRecord: void stopFreezingScreenLocked(boolean)>(1);

     label07:
        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity> = null;

     label08:
        if z0 == 0 goto label12;

        $r20 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r20.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r2 == null goto label09;

        $z4 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean shouldSleepOrShutDownActivities()>();

        if $z4 != 0 goto label09;

        $r22 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r22.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r2, r27, null);

        goto label12;

     label09:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void checkReadyForSleep()>();

        r28 = null;

        if r2 == null goto label10;

        r28 = virtualinvoke r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label10:
        if r28 == null goto label11;

        if r27 == null goto label12;

        if r28 == r27 goto label12;

     label11:
        $r21 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r21.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label12:
        if r27 == null goto label14;

        virtualinvoke r27.<com.android.server.wm.ActivityRecord: void resumeKeyDispatchingLocked()>();

        $z3 = virtualinvoke r27.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z3 == 0 goto label13;

        $l1 = r27.<com.android.server.wm.ActivityRecord: long cpuTimeAtResume>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label13;

        $r8 = r27.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $l3 = virtualinvoke $r8.<com.android.server.wm.WindowProcessController: long getCpuTime()>();

        $l4 = r27.<com.android.server.wm.ActivityRecord: long cpuTimeAtResume>;

        l0 = $l3 - $l4;

        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label13;

        $r13 = <com.android.server.wm._$$Lambda$1636dquQO0UvkFayOGf_gceB4iw: com.android.server.wm.'-$$Lambda$1636dquQO0UvkFayOGf_gceB4iw' INSTANCE>;

        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r14 = $r9.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r10 = r27.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r15 = $r10.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r11 = r27.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r12 = $r11.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i6 = $r12.<android.content.pm.ApplicationInfo: int uid>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r32 = (com.android.internal.util.function.QuadConsumer) $r13;

        r29 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledRunnable obtainRunnable(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r32, $r14, $r15, $r16, $r17);

        $r18 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r19 = $r18.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r19.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>(r29);

     label13:
        r27.<com.android.server.wm.ActivityRecord: long cpuTimeAtResume> = 0L;

     label14:
        $r30 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r30.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(r1, 0, 0);

        $r31 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z11 = $r31.<com.android.server.wm.ActivityStackSupervisor: boolean mAppVisibilitiesChangedSinceLastPause>;

        if $z11 != 0 goto label15;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if $r6 == null goto label16;

        $r7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z2 = virtualinvoke $r7.<com.android.server.wm.TaskDisplayArea: boolean hasPinnedTask()>();

        if $z2 == 0 goto label16;

     label15:
        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r4.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskStackChanged()>();

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r5.<com.android.server.wm.ActivityStackSupervisor: boolean mAppVisibilitiesChangedSinceLastPause> = 0;

     label16:
        return;
    }

    void convertActivityToTranslucent(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        java.util.ArrayList $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting> = r1;

        $r2 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r3 = r0.<com.android.server.wm.ActivityStack: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(101, 2000L);

        return;
    }

    void dismissPip()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1, $r2;
        int $i0;
        com.android.server.wm._$$Lambda$ActivityStack$LjyVE_3sNqUH_OTaM4xg9Y47Tow $r3;
        com.android.server.wm.WindowManagerService $r4;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isActivityTypeStandardOrUndefined()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if $i0 != 2 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = new com.android.server.wm._$$Lambda$ActivityStack$LjyVE_3sNqUH_OTaM4xg9Y47Tow;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$ActivityStack$LjyVE_3sNqUH_OTaM4xg9Y47Tow: void <init>(com.android.server.wm.ActivityStack)>(r0);

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void inSurfaceTransaction(java.lang.Runnable)>($r3);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t exit pinned mode if it\'s not pinned already.");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You can\'t move tasks from non-standard stacks.");

        throw $r1;
    }

    void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r10, $r21, r24;
        boolean z0, $z1;
        com.android.server.wm.WindowToken r3;
        java.util.ArrayList $r5, $r14, $r15;
        com.android.server.wm.AnimatingActivityRegistry $r6;
        java.lang.StringBuilder $r7, $r11, $r17;
        int $i0, i1;
        java.lang.Object $r16;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.Task: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        $r5 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exiting application tokens:");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r24 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        $i0 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r15 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wm.WindowToken) $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exiting App #");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r21);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r3.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r24, z0);

        i1 = i1 + -1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label3:
        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry>;

        virtualinvoke $r6.<com.android.server.wm.AnimatingActivityRegistry: void dump(java.io.PrintWriter,java.lang.String,java.lang.String)>(r1, "AnimatingApps:", r2);

        return;
    }

    boolean dump(java.io.FileDescriptor, java.io.PrintWriter, boolean, boolean, java.lang.String, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12;
        java.lang.String r3;
        com.android.server.wm._$$Lambda$ActivityStack$_Pdy4bcIQznd9vOyPJW9xGcoMlI $r4, r9;
        com.android.server.wm.ActivityRecord $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        z2 := @parameter5: boolean;

        $r4 = new com.android.server.wm._$$Lambda$ActivityStack$_Pdy4bcIQznd9vOyPJW9xGcoMlI;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$ActivityStack$_Pdy4bcIQznd9vOyPJW9xGcoMlI: void <init>(com.android.server.wm.ActivityStack,boolean,java.io.PrintWriter)>(r0, z2, r2);

        r9 = $r4;

        if r3 != null goto label1;

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

        r9 = null;

        z11 = 1;

        goto label2;

     label1:
        z11 = 0;

     label2:
        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        $z3 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean printThisActivity(java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String,boolean,java.lang.String,java.lang.Runnable)>(r2, $r5, r3, 0, "    mPausingActivity: ", null);

        $z4 = z11 | $z3;

        $r6 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        $z5 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean printThisActivity(java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String,boolean,java.lang.String,java.lang.Runnable)>(r2, $r6, r3, 0, "    mResumedActivity: ", null);

        z12 = $z4 | $z5;

        if z0 == 0 goto label3;

        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity>;

        $z8 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean printThisActivity(java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String,boolean,java.lang.String,java.lang.Runnable)>(r2, $r7, r3, 0, "    mLastPausedActivity: ", null);

        $z9 = z12 | $z8;

        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity>;

        $z10 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean printThisActivity(java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String,boolean,java.lang.String,java.lang.Runnable)>(r2, $r8, r3, 0, "    mLastNoHistoryActivity: ", null);

        z12 = $z9 | $z10;

        goto label3;

     label3:
        $z6 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean dumpActivities(java.io.FileDescriptor,java.io.PrintWriter,boolean,boolean,java.lang.String,boolean,java.lang.Runnable)>(r1, r2, z0, z1, r3, 0, r9);

        $z7 = $z6 | z12;

        return $z7;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long, int)
    {
        com.android.server.wm.ActivityStack r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.wm.ActivityRecord $r2, $r15;
        android.content.ComponentName $r3, $r4, $r11, $r13;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Rect $r5, $r6, $r10;
        android.view.SurfaceControl $r7, $r8, $r9;
        java.lang.String $r12, $r14;
        long l10, l11;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l10 := @parameter1: long;

        i0 := @parameter2: int;

        if i0 != 2 goto label1;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isVisible()>();

        if $z3 != 0 goto label1;

        return;

     label1:
        l11 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l10);

        specialinvoke r0.<com.android.server.wm.Task: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268033L, i0);

        $i1 = r0.<com.android.server.wm.ActivityStack: int mTaskId>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        $i2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464271L, $i2);

        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464272L, $i3);

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r2 == null goto label2;

        $r15 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        virtualinvoke $r15.<com.android.server.wm.ActivityRecord: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268044L);

     label2:
        $r3 = r0.<com.android.server.wm.ActivityStack: android.content.ComponentName realActivity>;

        if $r3 == null goto label3;

        $r13 = r0.<com.android.server.wm.ActivityStack: android.content.ComponentName realActivity>;

        $r14 = virtualinvoke $r13.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333453L, $r14);

     label3:
        $r4 = r0.<com.android.server.wm.ActivityStack: android.content.ComponentName origActivity>;

        if $r4 == null goto label4;

        $r11 = r0.<com.android.server.wm.ActivityStack: android.content.ComponentName origActivity>;

        $r12 = virtualinvoke $r11.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333454L, $r12);

     label4:
        $i4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getActivityType()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464273L, $i4);

        $i5 = r0.<com.android.server.wm.ActivityStack: int mResizeMode>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464274L, $i5);

        $i6 = r0.<com.android.server.wm.ActivityStack: int mMinWidth>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464275L, $i6);

        $i7 = r0.<com.android.server.wm.ActivityStack: int mMinHeight>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464276L, $i7);

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean matchParentBounds()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z0);

        $r5 = specialinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getRawBounds()>();

        virtualinvoke $r5.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268037L);

        $r6 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mLastNonFullscreenBounds>;

        if $r6 == null goto label5;

        $r10 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mLastNonFullscreenBounds>;

        virtualinvoke $r10.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268054L);

     label5:
        $z1 = r0.<com.android.server.wm.ActivityStack: boolean mBoundsAnimating>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366170L, $z1);

        $r7 = r0.<com.android.server.wm.ActivityStack: android.view.SurfaceControl mSurfaceControl>;

        if $r7 == null goto label6;

        $r8 = r0.<com.android.server.wm.ActivityStack: android.view.SurfaceControl mSurfaceControl>;

        $i8 = virtualinvoke $r8.<android.view.SurfaceControl: int getWidth()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464264L, $i8);

        $r9 = r0.<com.android.server.wm.ActivityStack: android.view.SurfaceControl mSurfaceControl>;

        $i9 = virtualinvoke $r9.<android.view.SurfaceControl: int getHeight()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464265L, $i9);

     label6:
        $z2 = r0.<com.android.server.wm.ActivityStack: boolean mCreatedByOrganizer>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366172L, $z2);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l11);

        return;
    }

    void ensureActivitiesVisible(com.android.server.wm.ActivityRecord, int, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r1, i0, z0, 1);

        return;
    }

    void ensureActivitiesVisible(com.android.server.wm.ActivityRecord, int, boolean, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        int i0;
        boolean z0, z1, $z2;
        com.android.server.wm.ActivityStackSupervisor $r1, $r6, $r8;
        com.android.server.wm.EnsureActivitiesVisibleHelper $r2;
        com.android.server.wm.ActivityRecord $r3, r7;
        java.util.ArrayList $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r7 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r0.<com.android.server.wm.ActivityStack: boolean mTopActivityOccludesKeyguard> = 0;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTopDismissingKeyguardActivity> = null;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: void beginActivityVisibilityUpdate()>();

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.EnsureActivitiesVisibleHelper mEnsureActivitiesVisibleHelper>;

        virtualinvoke $r2.<com.android.server.wm.EnsureActivitiesVisibleHelper: void process(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r7, i0, z0, z1);

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        $z2 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void notifyActivityDrawnLocked(com.android.server.wm.ActivityRecord)>(null);

     label2:
        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r8.<com.android.server.wm.ActivityStackSupervisor: void endActivityVisibilityUpdate()>();

        return;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor: void endActivityVisibilityUpdate()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void ensureVisibleActivitiesConfiguration(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        boolean z0;
        com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper mEnsureVisibleActivitiesConfigHelper>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStack$EnsureVisibleActivitiesConfigHelper: void process(com.android.server.wm.ActivityRecord,boolean)>(r1, z0);

        return;
    }

    void executeAppTransition(android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0;
        android.app.ActivityOptions r1;
        com.android.server.wm.DisplayContent $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.app.ActivityOptions;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r1);

        return;
    }

    void finishAllActivitiesImmediately()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0;
        com.android.server.wm.'-$$Lambda$ActivityStack$hKETY0oafWLCgZ_DmvLF3dkTO7I' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean hasChild()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void removeIfPossible()>();

        return;

     label1:
        $r1 = <com.android.server.wm._$$Lambda$ActivityStack$hKETY0oafWLCgZ_DmvLF3dkTO7I: com.android.server.wm.'-$$Lambda$ActivityStack$hKETY0oafWLCgZ_DmvLF3dkTO7I' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>(r2);

        return;
    }

    final com.android.server.wm.Task finishTopCrashedActivityLocked(com.android.server.wm.WindowProcessController, java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        java.lang.String r1, $r8, $r10, $r21, $r23, $r33, $r35;
        com.android.server.wm.ActivityRecord r2, r37;
        com.android.server.wm.WindowProcessController $r3, $r25, $r26, $r28, r36;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r17, $r29;
        android.content.Intent $r6, $r19, $r31;
        android.content.ComponentName $r7, $r20, $r32;
        com.android.server.wm.DisplayContent $r11, $r12;
        com.android.server.wm.ActivityStack$ActivityState $r13, $r14, $r15, $r16;
        com.android.server.wm.ActivityTaskManagerService $r24, $r27;
        com.android.server.wm.Task r40;

        r0 := @this: com.android.server.wm.ActivityStack;

        r36 := @parameter0: com.android.server.wm.WindowProcessController;

        r1 := @parameter1: java.lang.String;

        r37 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r37 == null goto label5;

        $r3 = r37.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r3 == r36 goto label1;

        goto label5;

     label1:
        $z0 = virtualinvoke r37.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z0 == 0 goto label2;

        $r27 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r28 = $r27.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHomeProcess>;

        if $r28 != r36 goto label2;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Not force finishing home activity ");

        $r31 = r37.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r32 = virtualinvoke $r31.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r33 = virtualinvoke $r32.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r35);

        return null;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Force finishing activity ");

        $r6 = r37.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r7 = virtualinvoke $r6.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r8 = virtualinvoke $r7.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r10);

        r40 = virtualinvoke r37.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r12 = $r11.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r12.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(26, 0);

        virtualinvoke r37.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>(r1, 0);

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getActivityBelow(com.android.server.wm.ActivityRecord)>(r37);

        if r2 == null goto label4;

        $r16 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STARTED>;

        $r15 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $r14 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $r13 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r16, $r15, $r14, $r13);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z2 == 0 goto label3;

        $r24 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r26 = $r24.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHomeProcess>;

        $r25 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r26 == $r25 goto label4;

     label3:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Force finishing activity ");

        $r19 = r2.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r20 = virtualinvoke $r19.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r21 = virtualinvoke $r20.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r23);

        virtualinvoke r2.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>(r1, 0);

     label4:
        return r40;

     label5:
        return null;
    }

    void finishVoiceTask(android.service.voice.IVoiceInteractionSession)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$ActivityStack$YAQEcQUrLqR06xiJJApMvOPIxhg' $r1;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r2;
        android.os.IBinder $r3;
        android.service.voice.IVoiceInteractionSession r4;
        com.android.internal.util.function.pooled.PooledConsumer r5;
        java.util.function.BiConsumer r6;

        r0 := @this: com.android.server.wm.ActivityStack;

        r4 := @parameter0: android.service.voice.IVoiceInteractionSession;

        $r1 = <com.android.server.wm._$$Lambda$ActivityStack$YAQEcQUrLqR06xiJJApMvOPIxhg: com.android.server.wm.'-$$Lambda$ActivityStack$YAQEcQUrLqR06xiJJApMvOPIxhg' INSTANCE>;

        $r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        $r3 = interfaceinvoke r4.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        r6 = (java.util.function.BiConsumer) $r1;

        r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r2, $r3);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r5, 1);

        interfaceinvoke r5.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    com.android.server.wm.AnimatingActivityRegistry getAnimatingActivityRegistry()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.AnimatingActivityRegistry $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.AnimatingActivityRegistry mAnimatingActivityRegistry>;

        return $r1;
    }

    public void getBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    void getDimBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>(r1);

        return;
    }

    com.android.server.wm.DisplayContent getDisplay()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        return $r1;
    }

    public android.view.DisplayInfo getDisplayInfo()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.DisplayContent $r1;
        android.view.DisplayInfo $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent mDisplayContent>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        return $r2;
    }

    java.util.ArrayList getDumpActivitiesLocked(java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        java.util.ArrayList $r3;
        java.lang.String $r4, $r5, r10;
        boolean $z0, $z1;
        com.android.server.am.ActivityManagerService$ItemMatcher $r6;
        com.android.server.wm._$$Lambda$ActivityStack$8pKo1VcC8tEMtASOC4mb69R7s0E $r7;
        com.android.server.wm._$$Lambda$hD1GQddqK6sJaBtwVBGHwmleilc $r9;
        com.android.server.wm.ActivityRecord r11;

        r0 := @this: com.android.server.wm.ActivityStack;

        r10 := @parameter0: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = "all";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label1;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r9 = new com.android.server.wm._$$Lambda$hD1GQddqK6sJaBtwVBGHwmleilc;

        specialinvoke $r9.<com.android.server.wm._$$Lambda$hD1GQddqK6sJaBtwVBGHwmleilc: void <init>(java.util.ArrayList)>($r3);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>($r9);

        goto label4;

     label1:
        $r5 = "top";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label3;

        r11 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopMostActivity()>();

        if r11 == null goto label2;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

     label2:
        goto label4;

     label3:
        $r6 = new com.android.server.am.ActivityManagerService$ItemMatcher;

        specialinvoke $r6.<com.android.server.am.ActivityManagerService$ItemMatcher: void <init>()>();

        virtualinvoke $r6.<com.android.server.am.ActivityManagerService$ItemMatcher: void build(java.lang.String)>(r10);

        $r7 = new com.android.server.wm._$$Lambda$ActivityStack$8pKo1VcC8tEMtASOC4mb69R7s0E;

        specialinvoke $r7.<com.android.server.wm._$$Lambda$ActivityStack$8pKo1VcC8tEMtASOC4mb69R7s0E: void <init>(com.android.server.am.ActivityManagerService$ItemMatcher,java.util.ArrayList)>($r6, $r3);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>($r7);

     label4:
        return $r3;
    }

    void getFinalAnimationBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mBoundsAnimationTarget>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    void getFinalAnimationSourceHintBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mBoundsAnimationSourceHintBounds>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    void getRawBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = specialinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getRawBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    void getRelativePosition(android.graphics.Point)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Point r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Point;

        specialinvoke r0.<com.android.server.wm.Task: void getRelativePosition(android.graphics.Point)>(r1);

        i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getTaskOutset()>();

        $i1 = r1.<android.graphics.Point: int x>;

        $i2 = $i1 - i0;

        r1.<android.graphics.Point: int x> = $i2;

        $i3 = r1.<android.graphics.Point: int y>;

        $i4 = $i3 - i0;

        r1.<android.graphics.Point: int y> = $i4;

        return;
    }

    com.android.server.wm.ActivityRecord getTopDismissingKeyguardActivity()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTopDismissingKeyguardActivity>;

        return $r1;
    }

    void goToSleep()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$ActivityStack$9PL_ngUi3yQHsGKntQ-ttGrlRa0' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = <com.android.server.wm._$$Lambda$ActivityStack$9PL_ngUi3yQHsGKntQ_ttGrlRa0: com.android.server.wm.'-$$Lambda$ActivityStack$9PL_ngUi3yQHsGKntQ-ttGrlRa0' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>(r2);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        return;
    }

    boolean goToSleepIfPossible(boolean)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, $z1, z3, z4;
        com.android.server.wm.ActivityRecord $r1, $r2;
        com.android.server.wm.ActivityStackSupervisor $r3, $r5;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.wm.ActivityStack;

        z0 := @parameter0: boolean;

        z3 = 1;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r1 == null goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean startPausingLocked(boolean,boolean,com.android.server.wm.ActivityRecord)>(0, 1, null);

        z3 = 0;

        goto label2;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r2 == null goto label2;

        z3 = 0;

     label2:
        z4 = z3;

        if z0 != 0 goto label3;

        z4 = z3;

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = $r3.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        $z1 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean containsActivityFromStack(java.util.List)>($r4);

        if $z1 == 0 goto label3;

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdle()>();

        z4 = 0;

     label3:
        if z4 == 0 goto label4;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void goToSleep()>();

     label4:
        return z4;
    }

    boolean handleAppDied(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.WindowProcessController r1, $r4, $r6;
        com.android.server.wm.ActivityRecord $r2, $r3, $r5, $r7;
        com.android.server.wm.ActivityStackSupervisor $r8;
        com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp $r9;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        $r6 = $r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r6 != r1 goto label1;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity> = null;

     label1:
        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity>;

        if $r7 == null goto label2;

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity>;

        $r4 = $r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r4 != r1 goto label2;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity> = null;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity> = null;

     label2:
        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r8.<com.android.server.wm.ActivityStackSupervisor: void removeHistoryRecords(com.android.server.wm.WindowProcessController)>(r1);

        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp mRemoveHistoryRecordsForApp>;

        $z0 = virtualinvoke $r9.<com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp: boolean process(com.android.server.wm.WindowProcessController)>(r1);

        return $z0;
    }

    boolean handleCompleteDeferredRemoval()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAnimating(int)>(5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<com.android.server.wm.Task: boolean handleCompleteDeferredRemoval()>();

        return $z1;
    }

    public boolean isCompatible(int, int)
    {
        com.android.server.wm.ActivityStack r0;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1;

        if i1 != 0 goto label1;

        i2 = 1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.wm.Task: boolean isCompatible(int,int)>(i0, i2);

        return $z0;
    }

    boolean isFocusedStackOnDisplay()
    {
        com.android.server.wm.ActivityStack r0, $r2;
        com.android.server.wm.DisplayContent r1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r0 != $r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isForceScaled()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = r0.<com.android.server.wm.ActivityStack: boolean mBoundsAnimating>;

        return $z0;
    }

    final boolean isHomeOrRecentsStack()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isActivityTypeRecents()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    final boolean isOnHomeDisplay()
    {
        com.android.server.wm.ActivityStack r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isSingleTaskInstance()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.DisplayContent r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isTopSplitScreenStack()
    {
        com.android.server.wm.ActivityStack r0, $r2;
        boolean $z0, z1;
        com.android.server.wm.TaskDisplayArea $r1;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inSplitScreenWindowingMode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getTopStackInWindowingMode(int)>($i0);

        if r0 != $r2 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isTopStackInDisplayArea()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.TaskDisplayArea r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: boolean isTopStack(com.android.server.wm.ActivityStack)>(r0);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void lambda$dismissPip$13$ActivityStack()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.TaskDisplayArea $r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.ActivityTaskManagerService $r4;
        android.content.ComponentName $r5;
        android.content.Context $r6;
        int $i0;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.Task getBottomMostTask()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(0);

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: void positionStackAtTop(com.android.server.wm.ActivityStack,boolean)>(r0, 0);

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void scheduleUpdatePictureInPictureModeIfNeeded(com.android.server.wm.Task,com.android.server.wm.ActivityStack)>(r1, r0);

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r6 = $r4.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $i0 = r1.<com.android.server.wm.Task: int effectiveUid>;

        $r5 = r1.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        $r7 = virtualinvoke $r5.<android.content.ComponentName: java.lang.String flattenToString()>();

        staticinvoke <com.android.internal.os.logging.MetricsLoggerWrapper: void logPictureInPictureFullScreen(android.content.Context,int,java.lang.String)>($r6, $i0, $r7);

        return;
    }

    public void lambda$dump$9$ActivityStack(boolean, java.io.PrintWriter)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, $z1;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r12, $r16;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r9, $r11, $r15, $r20;
        android.graphics.Rect $r18;

        r0 := @this: com.android.server.wm.ActivityStack;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.io.PrintWriter;

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Stack #");

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": type=");

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getActivityType()>();

        $r6 = staticinvoke <android.app.WindowConfiguration: java.lang.String activityTypeToString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mode=");

        $i2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        $r9 = staticinvoke <android.app.WindowConfiguration: java.lang.String windowingModeToString(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isSleeping=");

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBounds=");

        $r18 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        return;
    }

    public void lambda$dumpActivities$10$ActivityStack(java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.atomic.AtomicBoolean, boolean, java.io.PrintWriter, java.lang.Runnable, com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0;
        java.util.concurrent.atomic.AtomicBoolean r1, r2;
        boolean z0, $z1;
        java.io.PrintWriter r3;
        java.lang.Runnable r4;
        com.android.server.wm.Task r5;
        android.graphics.Rect $r6, $r7, $r8;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.io.PrintWriter;

        r4 := @parameter4: java.lang.Runnable;

        r5 := @parameter5: com.android.server.wm.Task;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $z1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label3;

        if z0 == 0 goto label1;

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>("");

     label1:
        if r4 == null goto label2;

        interfaceinvoke r4.<java.lang.Runnable: void run()>();

     label2:
        virtualinvoke r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label3:
        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("* ");

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.Object)>(r5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("  mBounds=");

        $r7 = virtualinvoke r5.<com.android.server.wm.Task: android.graphics.Rect getRequestedOverrideBounds()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.Object)>($r7);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("  mMinWidth=");

        $i0 = r5.<com.android.server.wm.Task: int mMinWidth>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mMinHeight=");

        $i1 = r5.<com.android.server.wm.Task: int mMinHeight>;

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>($i1);

        $r8 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mLastNonFullscreenBounds>;

        if $r8 == null goto label4;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("  mLastNonFullscreenBounds=");

        $r6 = r5.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.Object)>($r6);

     label4:
        virtualinvoke r5.<com.android.server.wm.Task: void dump(java.io.PrintWriter,java.lang.String)>(r3, "      ");

        return;
    }

    public void lambda$dumpActivities$11$ActivityStack(java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.atomic.AtomicBoolean, boolean, java.io.PrintWriter, java.lang.Runnable, java.lang.String, java.io.FileDescriptor, boolean, boolean, com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, z1, z2, $z3;
        java.io.PrintWriter r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        java.io.FileDescriptor r4;
        com.android.server.wm.Task r5;
        com.android.server.wm._$$Lambda$ActivityStack$7nG0_OCCWus2ZIfG8Vb_S9yyjaw $r6, r13;
        java.util.ArrayList $r7;
        com.android.server.wm._$$Lambda$hD1GQddqK6sJaBtwVBGHwmleilc $r9;
        java.util.concurrent.atomic.AtomicBoolean r10, r11;

        r0 := @this: com.android.server.wm.ActivityStack;

        r10 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;

        r11 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.io.PrintWriter;

        r2 := @parameter4: java.lang.Runnable;

        r3 := @parameter5: java.lang.String;

        r4 := @parameter6: java.io.FileDescriptor;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        r5 := @parameter9: com.android.server.wm.Task;

        $r6 = new com.android.server.wm._$$Lambda$ActivityStack$7nG0_OCCWus2ZIfG8Vb_S9yyjaw;

        specialinvoke $r6.<com.android.server.wm._$$Lambda$ActivityStack$7nG0_OCCWus2ZIfG8Vb_S9yyjaw: void <init>(com.android.server.wm.ActivityStack,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean,boolean,java.io.PrintWriter,java.lang.Runnable,com.android.server.wm.Task)>(r0, r10, r11, z0, r1, r2, r5);

        r13 = $r6;

        if r3 != null goto label1;

        interfaceinvoke $r6.<java.lang.Runnable: void run()>();

        r13 = null;

     label1:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r9 = new com.android.server.wm._$$Lambda$hD1GQddqK6sJaBtwVBGHwmleilc;

        specialinvoke $r9.<com.android.server.wm._$$Lambda$hD1GQddqK6sJaBtwVBGHwmleilc: void <init>(java.util.ArrayList)>($r7);

        virtualinvoke r5.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer,boolean)>($r9, 0);

        $z3 = z1 ^ 1;

        staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean dumpHistoryList(java.io.FileDescriptor,java.io.PrintWriter,java.util.List,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String,boolean,java.lang.Runnable,com.android.server.wm.Task)>(r4, r1, $r7, "    ", "Hist", 1, $z3, z2, r3, 0, r13, r5);

        return;
    }

    public void lambda$setWindowingMode$0$ActivityStack(int, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityStack: void setWindowingModeInSurfaceTransaction(int,boolean)>(i0, z0);

        return;
    }

    public void lambda$switchUser$1$ActivityStack(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.Task r1;
        boolean $z0;
        com.android.server.wm.WindowList $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.Task;

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean showToCurrentUser()>();

        if $z0 == 0 goto label1;

        if r1 == r0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowList mChildren>;

        virtualinvoke $r2.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowList mChildren>;

        virtualinvoke $r3.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    void minimalResumeActivityLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityStack$ActivityState $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r2, "minimalResumeActivityLocked");

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void completeResumeLocked()>();

        return;
    }

    boolean moveTaskToBack(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0, r30;
        com.android.server.wm.ActivityRecord r1, r25, r29;
        boolean z0, $z1, $z2, $z4, z6, $z7;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r18;
        com.android.server.wm.ActivityTaskManagerService $r6, $r15, $r17, $r21;
        com.android.server.wm.LockTaskController $r7;
        com.android.server.wm.TaskDisplayArea $r8;
        com.android.server.wm.ActivityStack$ActivityState $r9;
        com.android.server.wm.RootWindowContainer $r10, $r31;
        com.android.server.wm.DisplayContent $r11, $r12, $r13, $r27, $r28;
        int $i1, $i2;
        com.android.server.wm.ActivityStackSupervisor $r14;
        android.app.IActivityController $r16, $r19;
        android.os.RemoteException $r20;
        com.android.server.Watchdog $r22;
        com.android.server.wm.Task r23;

        r0 := @this: com.android.server.wm.ActivityStack;

        r23 := @parameter0: com.android.server.wm.Task;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTaskToBack: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r5);

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        $z1 = virtualinvoke $r7.<com.android.server.wm.LockTaskController: boolean canMoveTaskToBack(com.android.server.wm.Task)>(r23);

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isTopStackInDisplayArea()>();

        if $z2 == 0 goto label07;

        $r15 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r16 = $r15.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController>;

        if $r16 == null goto label07;

        $i2 = r23.<com.android.server.wm.Task: int mTaskId>;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(android.os.IBinder,int)>(null, $i2);

        r25 = r1;

        if r1 != null goto label02;

        r25 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(android.os.IBinder,int)>(null, -1);

     label02:
        if r25 == null goto label07;

        z6 = 1;

     label03:
        $r17 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r19 = $r17.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController>;

        $r18 = r25.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        z0 = interfaceinvoke $r19.<android.app.IActivityController: boolean activityResuming(java.lang.String)>($r18);

     label04:
        z6 = z0;

        goto label06;

     label05:
        $r20 := @caughtexception;

        $r21 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r21.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController> = null;

        $r22 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r22.<com.android.server.Watchdog: void setActivityController(android.app.IActivityController)>(null);

     label06:
        if z6 != 0 goto label07;

        return 0;

     label07:
        $r27 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r28 = $r27.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r28.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(11, 0);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void moveToBack(java.lang.String,com.android.server.wm.Task)>("moveTaskToBackLocked", r23);

        $z7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        if $z7 == 0 goto label08;

        $r14 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r14.<com.android.server.wm.ActivityStackSupervisor: void removeStack(com.android.server.wm.ActivityStack)>(r0);

        return 1;

     label08:
        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r29 = virtualinvoke $r8.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord topRunningActivity()>();

        r30 = virtualinvoke r29.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if r30 == null goto label09;

        if r30 == r0 goto label09;

        $r9 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z4 = virtualinvoke r29.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r9);

        if $z4 == 0 goto label09;

        $r10 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $i1 = $r11.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: boolean ensureVisibilityAndConfig(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(null, $i1, 0, 0);

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r13 = $r12.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r13.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        goto label10;

     label09:
        $r31 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r31.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label10:
        return 1;

        catch android.os.RemoteException from label03 to label04 with label05;
    }

    final void moveTaskToFront(com.android.server.wm.Task, boolean, android.app.ActivityOptions, com.android.server.am.AppTimeTracker, java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.Task r1;
        boolean z0;
        android.app.ActivityOptions r2;
        com.android.server.am.AppTimeTracker r3;
        java.lang.String r4;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.app.ActivityOptions;

        r3 := @parameter3: com.android.server.am.AppTimeTracker;

        r4 := @parameter4: java.lang.String;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void moveTaskToFront(com.android.server.wm.Task,boolean,android.app.ActivityOptions,com.android.server.am.AppTimeTracker,boolean,java.lang.String)>(r1, z0, r2, r3, 0, r4);

        return;
    }

    final void moveTaskToFront(com.android.server.wm.Task, boolean, android.app.ActivityOptions, com.android.server.am.AppTimeTracker, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityStack r0, r25;
        boolean z0, z1, $z2, $z3, $z7, $z8, $z9;
        android.app.ActivityOptions r1;
        java.lang.String r2;
        com.android.server.wm.TaskDisplayArea $r3;
        com.android.server.wm.DisplayContent $r4, $r5, $r12, $r14, $r15, $r21;
        com.android.server.wm.ActivityStackSupervisor $r6, $r16;
        com.android.server.wm.RecentTasks $r7;
        com.android.server.wm.Task $r8, r23;
        int $i0, $i1;
        com.android.server.wm.ActivityTaskManagerService $r9;
        com.android.server.wm.TaskChangeNotificationController $r10;
        android.app.ActivityManager$RunningTaskInfo $r11;
        com.android.server.wm.RootWindowContainer $r13;
        java.util.ArrayList $r17;
        com.android.server.wm.'-$$Lambda$Q7nS26dC0McEbKsdlJZMFVXDNKY' $r18;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r19;
        java.lang.Throwable $r20, $r22, r30;
        com.android.server.am.AppTimeTracker r24;
        com.android.server.wm.ActivityRecord r26, r28, r29;
        com.android.internal.util.function.pooled.PooledConsumer r27;
        java.util.function.BiConsumer r31;

        r0 := @this: com.android.server.wm.ActivityStack;

        r23 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.app.ActivityOptions;

        r24 := @parameter3: com.android.server.am.AppTimeTracker;

        z1 := @parameter4: boolean;

        r2 := @parameter5: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r25 = virtualinvoke $r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getTopStack()>();

        if r25 == null goto label01;

        r26 = virtualinvoke r25.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        goto label02;

     label01:
        r26 = null;

     label02:
        if r23 == r0 goto label06;

        $z7 = virtualinvoke r23.<com.android.server.wm.Task: boolean isDescendantOf(com.android.server.wm.WindowContainer)>(r0);

        if $z7 != 0 goto label06;

        if z0 == 0 goto label03;

        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r1);

        goto label05;

     label03:
        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isSingleTaskInstance()>();

        if $z8 == 0 goto label04;

        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateTransitLocked(int,android.app.ActivityOptions,boolean)>(28, r1, 1);

        goto label05;

     label04:
        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateTransitLocked(int,android.app.ActivityOptions,boolean)>(10, r1, 0);

     label05:
        return;

     label06:
        if r24 == null goto label07;

        $r18 = <com.android.server.wm._$$Lambda$Q7nS26dC0McEbKsdlJZMFVXDNKY: com.android.server.wm.'-$$Lambda$Q7nS26dC0McEbKsdlJZMFVXDNKY' INSTANCE>;

        $r19 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r31 = (java.util.function.BiConsumer) $r18;

        r27 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r31, $r19, r24);

        virtualinvoke r23.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r27);

        interfaceinvoke r27.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

     label07:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void deferUpdateImeTarget()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAtTop(com.android.server.wm.Task)>(r23);

        r28 = virtualinvoke r23.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

     label08:
        if r28 == null goto label29;

     label09:
        $z2 = virtualinvoke r28.<com.android.server.wm.ActivityRecord: boolean okToShowLocked()>();

        if $z2 != 0 goto label11;

     label10:
        goto label29;

     label11:
        r29 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label12:
        if r29 == null goto label15;

     label13:
        virtualinvoke r29.<com.android.server.wm.ActivityRecord: boolean moveFocusableActivityToTop(java.lang.String)>(r2);

     label14:
        goto label15;

     label15:
        if z0 == 0 goto label21;

     label16:
        $r14 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r15 = $r14.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r15.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(0, 0);

     label17:
        if r29 == null goto label19;

     label18:
        $r16 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r17 = $r16.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

     label19:
        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r1);

     label20:
        goto label24;

     label21:
        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isSingleTaskInstance()>();

        if $z3 == 0 goto label23;

        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateTransitLocked(int,android.app.ActivityOptions,boolean)>(28, r1, 1);

     label22:
        goto label24;

     label23:
        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateTransitLocked(int,android.app.ActivityOptions,boolean)>(10, r1, 0);

     label24:
        $z9 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean canEnterPipOnTaskSwitch(com.android.server.wm.ActivityRecord,com.android.server.wm.Task,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r26, r23, null, r1);

        if $z9 == 0 goto label25;

        r26.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch> = 1;

     label25:
        if z1 != 0 goto label27;

     label26:
        $r13 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r13.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label27:
        $i1 = r23.<com.android.server.wm.Task: int mUserId>;

        $i0 = r23.<com.android.server.wm.Task: int mTaskId>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmTaskToFront(int,int)>($i1, $i0);

        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r11 = virtualinvoke r23.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        virtualinvoke $r10.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskMovedToFront(android.app.TaskInfo)>($r11);

     label28:
        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r12.<com.android.server.wm.DisplayContent: void continueUpdateImeTarget()>();

        return;

     label29:
        if r28 == null goto label31;

     label30:
        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r7 = $r6.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        $r8 = virtualinvoke r28.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke $r7.<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>($r8);

     label31:
        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r1);

     label32:
        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void continueUpdateImeTarget()>();

        return;

     label33:
        $r20 := @caughtexception;

        r30 = $r20;

        goto label35;

     label34:
        $r22 := @caughtexception;

        r30 = $r22;

     label35:
        $r21 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r21.<com.android.server.wm.DisplayContent: void continueUpdateImeTarget()>();

        throw r30;

        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.Throwable from label09 to label10 with label34;
        catch java.lang.Throwable from label11 to label12 with label34;
        catch java.lang.Throwable from label13 to label14 with label33;
        catch java.lang.Throwable from label16 to label17 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label19 to label20 with label33;
        catch java.lang.Throwable from label21 to label22 with label33;
        catch java.lang.Throwable from label23 to label24 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
    }

    void moveToBack(java.lang.String, com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0, $r4, $r5;
        java.lang.String r1;
        com.android.server.wm.Task r2, r7;
        com.android.server.wm.TaskDisplayArea r3;
        boolean $z0, $z1;
        com.android.server.wm.WindowContainer r6;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAttached()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z1 = r0.<com.android.server.wm.ActivityStack: boolean mCreatedByOrganizer>;

        if $z1 != 0 goto label7;

        r6 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getParent()>();

        if r6 == null goto label2;

        r7 = virtualinvoke r6.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        goto label3;

     label2:
        r7 = null;

     label3:
        if r7 == null goto label4;

        $r5 = (com.android.server.wm.ActivityStack) r7;

        virtualinvoke $r5.<com.android.server.wm.ActivityStack: void moveToBack(java.lang.String,com.android.server.wm.Task)>(r1, r0);

        goto label5;

     label4:
        virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: void positionStackAtBottom(com.android.server.wm.ActivityStack,java.lang.String)>(r0, r1);

     label5:
        if r2 == null goto label6;

        if r2 == r0 goto label6;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAtBottom(com.android.server.wm.Task)>(r2);

     label6:
        return;

     label7:
        if r2 == null goto label9;

        if r2 != r0 goto label8;

        goto label9;

     label8:
        $r4 = (com.android.server.wm.ActivityStack) r2;

        virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: void positionTaskBehindHome(com.android.server.wm.ActivityStack)>($r4);

        return;

     label9:
        return;
    }

    void moveToFront(java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String,com.android.server.wm.Task)>(r1, null);

        return;
    }

    void moveToFront(java.lang.String, com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0, r13, r14;
        com.android.server.wm.Task r1, r17;
        com.android.server.wm.TaskDisplayArea r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.WindowContainer $r3;
        java.lang.StringBuilder $r4, $r8;
        java.lang.String $r7, $r11, r12;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAttached()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inSplitScreenSecondaryWindowingMode()>();

        if $z1 == 0 goto label2;

        r13 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getTopStackInWindowingMode(int)>(1);

        if r13 == null goto label2;

        r14 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootSplitScreenPrimaryTask()>();

        if r14 == null goto label2;

        $i0 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getIndexOf(com.android.server.wm.ActivityStack)>(r13);

        $i1 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getIndexOf(com.android.server.wm.ActivityStack)>(r14);

        if $i0 <= $i1 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" splitScreenToTop");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r14.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>($r11);

     label2:
        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        if $z3 != 0 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean returnsToHomeStack()>();

        if $z2 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returnToHome");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: void moveHomeStackToFront(java.lang.String)>($r7);

     label3:
        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isRootTask()>();

        if $z4 == 0 goto label4;

        virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: void positionStackAtTop(com.android.server.wm.ActivityStack,boolean,java.lang.String)>(r0, 0, r12);

     label4:
        r17 = r1;

        if r1 != null goto label5;

        r17 = r0;

     label5:
        $r3 = virtualinvoke r17.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        virtualinvoke $r3.<com.android.server.wm.WindowContainer: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(2147483647, r17, 1);

        return;
    }

    void moveToFrontAndResumeStateIfNeeded(com.android.server.wm.ActivityRecord, boolean, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, $r6;
        boolean z0, z1, z2;
        java.lang.String r2;
        com.android.server.wm.ActivityStack$ActivityState r3, $r4, $r8;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.ActivityTaskManagerService $r7;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r2 := @parameter4: java.lang.String;

        if z0 != 0 goto label1;

        return;

     label1:
        r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState getState()>();

        if z1 == 0 goto label2;

        $r8 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r8, "moveToFrontAndResumeStateIfNeeded");

     label2:
        if z2 == 0 goto label3;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity> = r1;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void schedulePauseTimeout()>();

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>(r2);

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if r3 != $r4 goto label4;

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getTopResumedActivity()>();

        if r1 != $r6 goto label4;

        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void setResumedActivityUncheckLocked(com.android.server.wm.ActivityRecord,java.lang.String)>(r1, r2);

     label4:
        return;
    }

    boolean navigateUpTo(com.android.server.wm.ActivityRecord, android.content.Intent, com.android.server.uri.NeededUriGrants, int, android.content.Intent, com.android.server.uri.NeededUriGrants)
    {
        com.android.server.wm.ActivityStack r0;
        android.content.Intent r1, r35, r47;
        com.android.server.uri.NeededUriGrants r2, r34;
        com.android.server.wm.Task r3;
        boolean z0, $z1, $z2, z4, z5;
        long l0;
        int i1, $i2, i4, i5, i6, i7, i8, i9;
        com.android.server.wm.ActivityRecord $r4, r33, r36, r38, r41;
        android.content.pm.ActivityInfo $r5, $r7, r50;
        android.content.pm.ApplicationInfo $r6;
        com.android.server.wm.ActivityTaskManagerService $r8, $r30, $r39;
        com.android.server.wm.ActivityStartController $r9;
        com.android.server.wm.ActivityStarter $r10, $r13, $r14, $r16, $r17, $r18, $r20, $r22, $r23, $r24, r51;
        com.android.server.wm.WindowProcessController $r11;
        android.app.IApplicationThread $r12;
        com.android.server.wm.ActivityRecord$Token $r15, $r25;
        java.lang.String $r19, $r21, $r26, $r54;
        com.android.server.wm._$$Lambda$ActivityStack$_IK_uXO8DHXrtZjnUxBWphzZW1c $r27;
        android.os.RemoteException $r28, $r29, $r32;
        com.android.server.Watchdog $r31;
        android.content.ComponentName r37, r49;
        android.app.IActivityController r40;
        int[] r43;
        android.content.Intent[] r44;
        com.android.server.wm._$$Lambda$ActivityStack$CKd7k7tgVFSnLDkfvKWVskFRr48 $r45;
        com.android.server.uri.NeededUriGrants[] $r46;
        android.content.pm.IPackageManager r48;

        r0 := @this: com.android.server.wm.ActivityStack;

        r33 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.content.Intent;

        r34 := @parameter2: com.android.server.uri.NeededUriGrants;

        i4 := @parameter3: int;

        r35 := @parameter4: android.content.Intent;

        r2 := @parameter5: com.android.server.uri.NeededUriGrants;

        $z1 = virtualinvoke r33.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        r3 = virtualinvoke r33.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $z2 = virtualinvoke r33.<com.android.server.wm.ActivityRecord: boolean isDescendantOf(com.android.server.wm.WindowContainer)>(r0);

        if $z2 != 0 goto label02;

        return 0;

     label02:
        r36 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivityBelow(com.android.server.wm.ActivityRecord)>(r33);

        r37 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r4 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getBottomMostActivity()>();

        if $r4 == r33 goto label03;

        if r37 == null goto label03;

        $r27 = new com.android.server.wm._$$Lambda$ActivityStack$_IK_uXO8DHXrtZjnUxBWphzZW1c;

        specialinvoke $r27.<com.android.server.wm._$$Lambda$ActivityStack$_IK_uXO8DHXrtZjnUxBWphzZW1c: void <init>(android.content.ComponentName)>(r37);

        r38 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate,com.android.server.wm.WindowContainer,boolean,boolean)>($r27, r33, 0, 1);

        if r38 == null goto label03;

        z4 = 1;

        r36 = r38;

        goto label04;

     label03:
        z4 = 0;

     label04:
        $r39 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r40 = $r39.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController>;

        if r40 == null goto label09;

        $r25 = r33.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r41 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(android.os.IBinder,int)>($r25, -1);

        if r41 == null goto label09;

        z5 = 1;

     label05:
        $r26 = r41.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        z0 = interfaceinvoke r40.<android.app.IActivityController: boolean activityResuming(java.lang.String)>($r26);

     label06:
        z5 = z0;

        goto label08;

     label07:
        $r29 := @caughtexception;

        $r30 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r30.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController> = null;

        $r31 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r31.<com.android.server.Watchdog: void setActivityController(android.app.IActivityController)>(null);

     label08:
        if z5 != 0 goto label09;

        return 0;

     label09:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r43 = newarray (int)[1];

        r43[0] = i4;

        r44 = newarray (android.content.Intent)[1];

        r44[0] = r35;

        $r45 = new com.android.server.wm._$$Lambda$ActivityStack$CKd7k7tgVFSnLDkfvKWVskFRr48;

        $r46 = newarray (com.android.server.uri.NeededUriGrants)[1];

        $r46[0] = r2;

        specialinvoke $r45.<com.android.server.wm._$$Lambda$ActivityStack$CKd7k7tgVFSnLDkfvKWVskFRr48: void <init>(com.android.server.wm.ActivityRecord,int[],android.content.Intent[],com.android.server.uri.NeededUriGrants[])>(r36, r43, r44, $r46);

        virtualinvoke r3.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function,com.android.server.wm.WindowContainer,boolean,boolean)>($r45, r33, 1, 1);

        i5 = r43[0];

        r47 = r44[0];

        if r36 == null goto label22;

        if z4 == 0 goto label22;

        $r5 = r33.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r6 = $r5.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i6 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        $r7 = r36.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        i7 = $r7.<android.content.pm.ActivityInfo: int launchMode>;

        i1 = virtualinvoke r1.<android.content.Intent: int getFlags()>();

        if i7 == 3 goto label21;

        if i7 == 2 goto label21;

        if i7 == 1 goto label21;

        $i2 = i1 & 67108864;

        if $i2 == 0 goto label10;

        goto label21;

     label10:
        r48 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r49 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        i8 = r33.<com.android.server.wm.ActivityRecord: int mUserId>;

     label11:
        r50 = interfaceinvoke r48.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(r49, 1024, i8);

        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r1, "navigateUpTo");

        $r11 = r33.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r13 = virtualinvoke $r10.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCaller(android.app.IApplicationThread)>($r12);

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityInfo(android.content.pm.ActivityInfo)>(r50);

        $r15 = r36.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r16 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultTo(android.os.IBinder)>($r15);

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPid(int)>(-1);

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingUid(int)>(i6);

        $r19 = r33.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $r20 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>($r19);

        $r21 = r36.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        $r22 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRealCallingPid(int)>(-1);

        r51 = virtualinvoke $r23.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRealCallingUid(int)>(i6);

     label12:
        z4 = 1;

     label13:
        $r24 = virtualinvoke r51.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setComponentSpecified(boolean)>(1);

        i9 = virtualinvoke $r24.<com.android.server.wm.ActivityStarter: int execute()>();

     label14:
        if i9 != 0 goto label15;

        goto label16;

     label15:
        z4 = 0;

     label16:
        goto label20;

     label17:
        $r32 := @caughtexception;

        goto label19;

     label18:
        $r28 := @caughtexception;

     label19:
        z4 = 0;

     label20:
        virtualinvoke r36.<com.android.server.wm.ActivityRecord: int finishIfPossible(int,android.content.Intent,com.android.server.uri.NeededUriGrants,java.lang.String,boolean)>(i5, r47, r2, "navigate-top", 1);

        goto label22;

     label21:
        $r54 = r33.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke r36.<com.android.server.wm.ActivityRecord: void deliverNewIntentLocked(int,android.content.Intent,com.android.server.uri.NeededUriGrants,java.lang.String)>(i6, r1, r34, $r54);

        goto label22;

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z4;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label10 to label11 with label18;
        catch android.os.RemoteException from label11 to label12 with label17;
        catch android.os.RemoteException from label13 to label14 with label17;
    }

    void notifyActivityDrawnLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord$Token r1, r12;
        java.util.ArrayList $r2, $r5, $r6;
        android.os.Handler $r3;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.WindowProcessController $r4;
        android.os.RemoteException $r7;
        com.android.server.wm.ActivityRecord r8, r9;
        com.android.server.wm.WindowManagerService r10;
        android.app.IApplicationThread r11;

        r0 := @this: com.android.server.wm.ActivityStack;

        r8 := @parameter0: com.android.server.wm.ActivityRecord;

        if r8 == null goto label1;

        $r5 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r8);

        if $z1 == 0 goto label7;

        $r6 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        $z2 = virtualinvoke $r6.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 == 0 goto label7;

     label1:
        r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting>;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mTranslucentActivityWaiting> = null;

        $r2 = r0.<com.android.server.wm.ActivityStack: java.util.ArrayList mUndrawnActivitiesBelowTopTranslucent>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r3 = r0.<com.android.server.wm.ActivityStack: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(101);

        if r9 == null goto label7;

        r10 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowManagerService mWmService>;

        r1 = r9.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        z3 = 0;

        virtualinvoke r10.<com.android.server.wm.WindowManagerService: void setWindowOpaqueLocked(android.os.IBinder,boolean)>(r1, 0);

        $z0 = virtualinvoke r9.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z0 == 0 goto label7;

     label2:
        $r4 = r9.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        r11 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        r12 = r9.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

     label3:
        if r8 == null goto label4;

        z3 = 1;

     label4:
        interfaceinvoke r11.<android.app.IApplicationThread: void scheduleTranslucentConversionComplete(android.os.IBinder,boolean)>(r12, z3);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void onChildPositionChanged(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, $z1, z2;
        com.android.server.wm.WindowList $r1;
        com.android.server.wm.WindowContainer $r2, r6;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.ActivityTaskManagerService $r4;
        com.android.server.wm.TaskOrganizerController $r5;
        com.android.server.wm.Task r7;

        r0 := @this: com.android.server.wm.ActivityStack;

        r6 := @parameter0: com.android.server.wm.WindowContainer;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isOrganized()>();

        z2 = 0;

        if z0 == 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r5.<com.android.server.wm.TaskOrganizerController: void dispatchTaskInfoChanged(com.android.server.wm.Task,boolean)>(r0, 0);

     label1:
        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowList mChildren>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.WindowList: boolean contains(java.lang.Object)>(r6);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getTopChild()>();

        if $r2 != r6 goto label3;

        z2 = 1;

     label3:
        r7 = virtualinvoke r6.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r7 == null goto label4;

        virtualinvoke r7.<com.android.server.wm.Task: void updateTaskMovement(boolean)>(z2);

     label4:
        if z2 == 0 goto label5;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void layoutAndAssignWindowLayersIfNeeded()>();

     label5:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityStack r0;
        android.content.res.Configuration r1;
        boolean z0, $z2, $z3, $z4, z5, z6, z7, $z8;
        int i0, i1, i2, $i3, $i4, i6;
        android.graphics.Rect r2, $r6, $r10;
        com.android.server.wm.TaskDisplayArea r3;
        com.android.server.wm.DisplayContent r4, $r9;
        android.app.WindowConfiguration $r5, $r7, $r8;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.content.res.Configuration;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isRootTask()>();

        if $z2 != 0 goto label01;

        specialinvoke r0.<com.android.server.wm.Task: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        return;

     label01:
        i6 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAlwaysOnTop()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.app.WindowConfiguration getWindowConfiguration()>();

        i0 = virtualinvoke $r5.<android.app.WindowConfiguration: int getRotation()>();

        r2 = r0.<com.android.server.wm.ActivityStack: android.graphics.Rect mTmpRect>;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>(r2);

        specialinvoke r0.<com.android.server.wm.Task: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        r3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r3 != null goto label02;

        return;

     label02:
        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if i6 == $i3 goto label03;

        virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: void onStackWindowingModeChanged(com.android.server.wm.ActivityStack)>(r0);

     label03:
        r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        if r4 != null goto label04;

        return;

     label04:
        $i4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if i6 == $i4 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        i1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getRequestedOverrideWindowingMode()>();

        if i1 == 2 goto label10;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean matchParentBounds()>();

        if $z4 != 0 goto label10;

        $r7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.app.WindowConfiguration getWindowConfiguration()>();

        i2 = virtualinvoke $r7.<android.app.WindowConfiguration: int getRotation()>();

        if i0 == i2 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        if z6 == 0 goto label09;

        $r9 = r4.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        $r8 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r10 = virtualinvoke $r8.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        virtualinvoke $r9.<com.android.server.wm.DisplayContent: void rotateBounds(android.graphics.Rect,int,int,android.graphics.Rect)>($r10, i0, i2, r2);

        z7 = 1;

        goto label11;

     label09:
        z7 = 0;

        goto label11;

     label10:
        z7 = 0;

     label11:
        if z5 == 0 goto label12;

        virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: void onStackWindowingModeChanged(com.android.server.wm.ActivityStack)>(r0);

     label12:
        if z7 == 0 goto label14;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inSplitScreenWindowingMode()>();

        if $z3 == 0 goto label13;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: int setBounds(android.graphics.Rect)>(r2);

        goto label14;

     label13:
        if i1 == 2 goto label14;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r2);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void resize(android.graphics.Rect,boolean,boolean)>($r6, 1, 1);

     label14:
        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAlwaysOnTop()>();

        if z0 == $z8 goto label15;

        virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: void positionStackAtTop(com.android.server.wm.ActivityStack,boolean)>(r0, 0);

     label15:
        return;
    }

    void onDisplayChanged(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.DisplayContent r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        specialinvoke r0.<com.android.server.wm.Task: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r1);

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isRootTask()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateSurfaceBounds()>();

     label1:
        return;
    }

    void onParentChanged(com.android.server.wm.ConfigurationContainer, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ConfigurationContainer r1, r2;
        boolean $z0;
        com.android.server.wm.WindowContainer $r3, $r4;
        com.android.server.wm.DisplayContent r6;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ConfigurationContainer;

        r2 := @parameter1: com.android.server.wm.ConfigurationContainer;

        r6 = null;

        if r1 == null goto label1;

        $r4 = (com.android.server.wm.WindowContainer) r1;

        virtualinvoke $r4.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label1;

     label1:
        if r2 == null goto label2;

        $r3 = (com.android.server.wm.WindowContainer) r2;

        r6 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label2;

     label2:
        specialinvoke r0.<com.android.server.wm.Task: void onParentChanged(com.android.server.wm.ConfigurationContainer,com.android.server.wm.ConfigurationContainer)>(r1, r2);

        if r6 == null goto label3;

        $z0 = virtualinvoke r6.<com.android.server.wm.DisplayContent: boolean isRemoving()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void postReparent()>();

     label3:
        return;
    }

    void positionChildAt(com.android.server.wm.Task, int)
    {
        com.android.server.wm.ActivityStack r0, $r2, $r9, $r13, $r26;
        int i0, $i1, $i3;
        com.android.server.wm.ActivityRecord r1, $r14, $r18, r29;
        java.lang.StringBuilder $r3, $r16;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, $r22;
        com.android.server.wm.ActivityStack$ActivityState $r15;
        android.content.Intent $r23;
        android.service.voice.IVoiceInteractionSession $r24, $r31;
        com.android.server.wm.TaskDisplayArea $r25;
        android.os.RemoteException $r27;
        com.android.server.wm.Task r28;
        boolean z2, z3, z4;
        com.android.server.wm.DisplayContent $r30;
        com.android.server.wm.RootWindowContainer $r34;

        r0 := @this: com.android.server.wm.ActivityStack;

        r28 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r28.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r2 != r0 goto label13;

        virtualinvoke r28.<com.android.server.wm.Task: void updateOverrideConfigurationForStack(com.android.server.wm.ActivityStack)>(r0);

        r29 = virtualinvoke r28.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivityLocked()>();

        $r13 = virtualinvoke r28.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        r1 = $r13.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if r29 != r1 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getChildCount()>();

        if i0 < $i1 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        z4 = 1;

        if z3 != 0 goto label06;

        $r25 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r26 = virtualinvoke $r25.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getNextFocusableStack(com.android.server.wm.ActivityStack,boolean)>(r0, 1);

        if $r26 != null goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r28, z4);

        virtualinvoke r28.<com.android.server.wm.Task: void updateTaskMovement(boolean)>(z3);

        $r30 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r30.<com.android.server.wm.DisplayContent: void layoutAndAssignWindowLayersIfNeeded()>();

        $r31 = r28.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r31 == null goto label10;

     label07:
        $r24 = r28.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        $r23 = r28.<com.android.server.wm.Task: android.content.Intent intent>;

        $i3 = r28.<com.android.server.wm.Task: int mTaskId>;

        interfaceinvoke $r24.<android.service.voice.IVoiceInteractionSession: void taskStarted(android.content.Intent,int)>($r23, $i3);

     label08:
        goto label10;

     label09:
        $r27 := @caughtexception;

     label10:
        if z2 == 0 goto label12;

        $r14 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r14 == null goto label11;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mResumedActivity was already set when moving mResumedActivity from other stack to this stack mResumedActivity=");

        $r18 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" other mResumedActivity=");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("ActivityTaskManager", $r22);

     label11:
        $r15 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        virtualinvoke r29.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r15, "positionChildAt");

     label12:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        $r34 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r34.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        return;

     label13:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AS.positionChildAt: task=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a child of stack=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" current parent=");

        $r9 = virtualinvoke r28.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch android.os.RemoteException from label07 to label08 with label09;
    }

    void positionChildAtBottom(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0, $r3, $r4;
        com.android.server.wm.Task r1;
        com.android.server.wm.TaskDisplayArea $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.Task;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r3 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r4 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getNextFocusableStack(com.android.server.wm.ActivityStack,boolean)>($r3, 1);

        if $r4 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAtBottom(com.android.server.wm.Task,boolean)>(r1, z0);

        virtualinvoke r1.<com.android.server.wm.Task: void updateTaskMovement(boolean)>(1);

        return;
    }

    void positionChildAtBottom(com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.Task r1;
        boolean z0;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(-2147483648, r1, z0);

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void layoutAndAssignWindowLayersIfNeeded()>();

        return;
    }

    void positionChildAtTop(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.Task;

        if r1 != null goto label1;

        return;

     label1:
        if r1 != r0 goto label2;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>("positionChildAtTop");

        return;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(2147483647, r1, 1);

        virtualinvoke r1.<com.android.server.wm.Task: void updateTaskMovement(boolean)>(1);

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void layoutAndAssignWindowLayersIfNeeded()>();

        return;
    }

    void postReparent()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.RootWindowContainer $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityStack;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStack adjustFocusToNextFocusableTask(java.lang.String,boolean,boolean)>("reparent", 1, 1);

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        return;
    }

    void prepareFreezingTaskBounds()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$x6Ib5GIrsWZg48HsPUVGxKBQJS4' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = <com.android.server.wm._$$Lambda$x6Ib5GIrsWZg48HsPUVGxKBQJS4: com.android.server.wm.'-$$Lambda$x6Ib5GIrsWZg48HsPUVGxKBQJS4' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r2, 1);

        return;
    }

    void removeLaunchTickMessages()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.'-$$Lambda$B16jdo1lKUkQ4B7iWXwPKs2MAdg' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        $r1 = <com.android.server.wm._$$Lambda$B16jdo1lKUkQ4B7iWXwPKs2MAdg: com.android.server.wm.'-$$Lambda$B16jdo1lKUkQ4B7iWXwPKs2MAdg' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>(r2);

        return;
    }

    void reparent(com.android.server.wm.TaskDisplayArea, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.TaskDisplayArea r1;
        boolean z0;
        int i0;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.TaskDisplayArea;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        i0 = 2147483647;

        goto label2;

     label1:
        i0 = -2147483648;

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void reparent(com.android.server.wm.WindowContainer,int)>(r1, i0);

        return;
    }

    com.android.server.wm.ActivityRecord resetTaskIfNeeded(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, r6, r8, r9;
        android.app.ActivityOptions r2;
        android.content.pm.ActivityInfo $r3;
        int $i0, $i1;
        com.android.server.wm.ResetTargetTaskHelper $r4;
        com.android.server.wm.WindowList $r5;
        boolean $z0, z1;
        com.android.server.wm.Task r7;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r6 := @parameter1: com.android.server.wm.ActivityRecord;

        $r3 = r6.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r3.<android.content.pm.ActivityInfo: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r7 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r4 = <com.android.server.wm.ActivityStack: com.android.server.wm.ResetTargetTaskHelper sResetTargetTaskHelper>;

        r2 = virtualinvoke $r4.<com.android.server.wm.ResetTargetTaskHelper: android.app.ActivityOptions process(com.android.server.wm.Task,boolean)>(r7, z1);

        r8 = r1;

        $r5 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowList mChildren>;

        $z0 = virtualinvoke $r5.<com.android.server.wm.WindowList: boolean contains(java.lang.Object)>(r7);

        if $z0 == 0 goto label3;

        r9 = virtualinvoke r7.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        r8 = r1;

        if r9 == null goto label3;

        r8 = r9;

     label3:
        if r2 == null goto label4;

        virtualinvoke r8.<com.android.server.wm.ActivityRecord: void updateOptionsLocked(android.app.ActivityOptions)>(r2);

     label4:
        return r8;
    }

    void resize(android.graphics.Rect, boolean, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, z1, $z2;
        int $i0;
        java.lang.String $r5;
        com.android.server.wm.ActivityTaskManagerService $r6, $r9, $r14;
        com.android.server.wm.'-$$Lambda$ActivityStack$QjNtYzBoevRHPhQzwu5fh58MK0E' $r7;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r8;
        com.android.server.wm.ActivityRecord $r10;
        com.android.server.wm.DisplayContent $r11;
        com.android.server.wm.WindowManagerService $r12;
        java.lang.Throwable $r13;
        android.graphics.Rect r15;
        com.android.internal.util.function.pooled.PooledConsumer r16;
        java.lang.StringBuilder r18;
        java.util.function.BiConsumer r19;

        r0 := @this: com.android.server.wm.ActivityStack;

        r15 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stack.resize_");

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, $r5);

        $r6 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label1:
        $r7 = <com.android.server.wm._$$Lambda$ActivityStack$QjNtYzBoevRHPhQzwu5fh58MK0E: com.android.server.wm.'-$$Lambda$ActivityStack$QjNtYzBoevRHPhQzwu5fh58MK0E' INSTANCE>;

        $r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        r19 = (java.util.function.BiConsumer) $r7;

        r16 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r19, $r8, r15);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllTasks(java.util.function.Consumer,boolean)>(r16, 1);

        interfaceinvoke r16.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $z2 = r0.<com.android.server.wm.ActivityStack: boolean mBoundsAnimating>;

        if $z2 == 0 goto label2;

        specialinvoke r0.<com.android.server.wm.ActivityStack: void updateSurfaceBounds()>();

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r11.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r12 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r12.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

     label2:
        if z1 != 0 goto label4;

     label3:
        $r10 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void ensureVisibleActivitiesConfiguration(com.android.server.wm.ActivityRecord,boolean)>($r10, z0);

     label4:
        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label5:
        $r13 := @caughtexception;

        $r14 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    com.android.server.wm.ActivityRecord restartPackage(java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.'-$$Lambda$ActivityStack$xHrv17CG5tAkxdutHyfCFt4-Iec' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.String r4;
        com.android.internal.util.function.pooled.PooledConsumer r5;
        com.android.internal.util.function.TriConsumer r6;

        r0 := @this: com.android.server.wm.ActivityStack;

        r4 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        $r2 = <com.android.server.wm._$$Lambda$ActivityStack$xHrv17CG5tAkxdutHyfCFt4_Iec: com.android.server.wm.'-$$Lambda$ActivityStack$xHrv17CG5tAkxdutHyfCFt4-Iec' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r6 = (com.android.internal.util.function.TriConsumer) $r2;

        r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.TriConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r6, $r3, r1, r4);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>(r5);

        interfaceinvoke r5.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return r1;
    }

    boolean resumeTopActivityUncheckedLocked(com.android.server.wm.ActivityRecord, android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0;
        android.app.ActivityOptions r1;
        boolean z0, $z1, $z2;
        java.lang.Throwable $r2;
        com.android.server.wm.ActivityRecord r3, r4;

        r0 := @this: com.android.server.wm.ActivityStack;

        r3 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.app.ActivityOptions;

        $z1 = r0.<com.android.server.wm.ActivityStack: boolean mInResumeTopActivity>;

        if $z1 == 0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.wm.ActivityStack: boolean mInResumeTopActivity> = 1;

        z0 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean resumeTopActivityInnerLocked(com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r3, r1);

        r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(1);

     label2:
        if r4 == null goto label4;

     label3:
        $z2 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: boolean canTurnScreenOn()>();

        if $z2 != 0 goto label5;

     label4:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void checkReadyForSleep()>();

     label5:
        r0.<com.android.server.wm.ActivityStack: boolean mInResumeTopActivity> = 0;

        return z0;

     label6:
        $r2 := @caughtexception;

        r0.<com.android.server.wm.ActivityStack: boolean mInResumeTopActivity> = 0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    com.android.server.wm.Task reuseOrCreateTask(android.content.pm.ActivityInfo, android.content.Intent, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, boolean, com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0, $r8;
        android.content.pm.ActivityInfo r1;
        android.service.voice.IVoiceInteractionSession r2;
        com.android.internal.app.IVoiceInteractor r3;
        com.android.server.wm.ActivityRecord r4, r5;
        android.app.ActivityOptions r6;
        int i0, $i1, $i2, $i3, $i4, $i6, i7, i8;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6;
        com.android.server.wm.ActivityStackSupervisor $r7, $r11, $r13, $r17;
        com.android.server.wm.ActivityTaskManagerService $r9, $r10;
        com.android.server.wm.KeyguardController $r12;
        com.android.server.wm.LaunchParamsController $r14;
        android.content.pm.ActivityInfo$WindowLayout $r15;
        android.graphics.Rect $r16;
        android.content.Intent r18;
        com.android.server.wm.Task r19;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.content.pm.ActivityInfo;

        r18 := @parameter1: android.content.Intent;

        r2 := @parameter2: android.service.voice.IVoiceInteractionSession;

        r3 := @parameter3: com.android.internal.app.IVoiceInteractor;

        z4 := @parameter4: boolean;

        r4 := @parameter5: com.android.server.wm.ActivityRecord;

        r5 := @parameter6: com.android.server.wm.ActivityRecord;

        r6 := @parameter7: android.app.ActivityOptions;

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        $i2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getActivityType()>();

        $z0 = staticinvoke <com.android.server.wm.DisplayContent: boolean alwaysCreateStack(int,int)>($i1, $i2);

        if $z0 == 0 goto label1;

        r19 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.Task reuseAsLeafTask(android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,android.content.Intent,android.content.pm.ActivityInfo,com.android.server.wm.ActivityRecord)>(r2, r3, r18, r1, r4);

        goto label6;

     label1:
        if r4 == null goto label2;

        $r17 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i6 = r4.<com.android.server.wm.ActivityRecord: int mUserId>;

        i7 = virtualinvoke $r17.<com.android.server.wm.ActivityStackSupervisor: int getNextTaskIdForUser(int)>($i6);

        goto label3;

     label2:
        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        i7 = virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: int getNextTaskIdForUser()>();

     label3:
        $r8 = new com.android.server.wm.ActivityStack;

        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        specialinvoke $r8.<com.android.server.wm.ActivityStack: void <init>(com.android.server.wm.ActivityTaskManagerService,int,android.content.pm.ActivityInfo,android.content.Intent,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,android.app.ActivityManager$TaskDescription,com.android.server.wm.ActivityStack)>($r9, i7, r1, r18, r2, r3, null, r0);

        r19 = $r8;

        $i3 = r1.<android.content.pm.ActivityInfo: int flags>;

        $i4 = $i3 & 1024;

        if $i4 == 0 goto label4;

        z5 = 1;

        goto label5;

     label4:
        z5 = 0;

     label5:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void addChild(com.android.server.wm.WindowContainer,boolean,boolean)>($r8, z4, z5);

     label6:
        i0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        i8 = i0;

        if i0 != -1 goto label7;

        i8 = 0;

     label7:
        $r10 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r11 = $r10.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        z6 = virtualinvoke $r12.<com.android.server.wm.KeyguardController: boolean isKeyguardOrAodShowing(int)>(i8);

        $r13 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsController getLaunchParamsController()>();

        $r15 = r1.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $z1 = virtualinvoke $r14.<com.android.server.wm.LaunchParamsController: boolean layoutTask(com.android.server.wm.Task,android.content.pm.ActivityInfo$WindowLayout,com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r19, $r15, r4, r5, r6);

        if $z1 != 0 goto label8;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean matchParentBounds()>();

        if $z2 != 0 goto label8;

        $z3 = virtualinvoke r19.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z3 == 0 goto label8;

        if z6 != 0 goto label8;

        $r16 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        virtualinvoke r19.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>($r16);

     label8:
        return r19;
    }

    com.android.server.wm.Task reuseOrCreateTask(android.content.pm.ActivityInfo, android.content.Intent, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        android.content.pm.ActivityInfo r1;
        android.content.Intent r2;
        boolean z0;
        com.android.server.wm.Task $r3;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.content.pm.ActivityInfo;

        r2 := @parameter1: android.content.Intent;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.Task reuseOrCreateTask(android.content.pm.ActivityInfo,android.content.Intent,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,boolean,com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r1, r2, null, null, z0, null, null, null);

        return $r3;
    }

    public void setAlwaysOnTop(boolean)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, $z1;
        com.android.server.wm.TaskDisplayArea $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isAlwaysOnTop()>();

        if $z1 != z0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.Task: void setAlwaysOnTop(boolean)>(z0);

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: void positionStackAtTop(com.android.server.wm.ActivityStack,boolean)>(r0, 0);

        return;
    }

    public int setBounds(android.graphics.Rect)
    {
        com.android.server.wm.ActivityStack r0;
        android.graphics.Rect r1, $r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isRootTask()>();

        if $z0 != 0 goto label1;

        $i1 = specialinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r1);

        return $i1;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        $i0 = specialinvoke r0.<com.android.server.wm.ActivityStack: int setBounds(android.graphics.Rect,android.graphics.Rect)>($r2, r1);

        return $i0;
    }

    void setPictureInPictureActions(java.util.List)
    {
        com.android.server.wm.ActivityStack r0;
        java.util.List r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        boolean $z0, $z1;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.PinnedStackController $r5;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r3.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        virtualinvoke $r5.<com.android.server.wm.PinnedStackController: void setActions(java.util.List)>(r1);

        return;
    }

    void setPictureInPictureAspectRatio(float)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.PinnedStackController r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        boolean $z0, $z1, $z2;
        com.android.server.wm.DisplayContent $r4, $r5;
        float $f0, f1;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityStack;

        f1 := @parameter0: float;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r3.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r4 != null goto label2;

        return;

     label2:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        if $z1 != 0 goto label3;

        return;

     label3:
        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        r1 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        $f0 = virtualinvoke r1.<com.android.server.wm.PinnedStackController: float getAspectRatio()>();

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>(f1, $f0);

        if $i0 != 0 goto label4;

        return;

     label4:
        $z2 = virtualinvoke r1.<com.android.server.wm.PinnedStackController: boolean isValidPictureInPictureAspectRatio(float)>(f1);

        if $z2 == 0 goto label5;

        goto label6;

     label5:
        f1 = -1.0F;

     label6:
        virtualinvoke r1.<com.android.server.wm.PinnedStackController: void setAspectRatio(float)>(f1);

        return;
    }

    public void setWindowingMode(int)
    {
        com.android.server.wm.ActivityStack r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.ActivityStack: java.lang.String stringName> = null;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isRootTask()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.wm.Task: void setWindowingMode(int)>(i0);

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void setWindowingMode(int,boolean)>(i0, 0);

        return;
    }

    void setWindowingMode(int, boolean)
    {
        com.android.server.wm.ActivityStack r0;
        int i0;
        boolean z0;
        com.android.server.wm._$$Lambda$ActivityStack$1naDAoUMprftj_K2aF4LqsZgbmk $r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.ActivityStack;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowManagerService mWmService>;

        $r1 = new com.android.server.wm._$$Lambda$ActivityStack$1naDAoUMprftj_K2aF4LqsZgbmk;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$ActivityStack$1naDAoUMprftj_K2aF4LqsZgbmk: void <init>(com.android.server.wm.ActivityStack,int,boolean)>(r0, i0, z0);

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void inSurfaceTransaction(java.lang.Runnable)>($r1);

        return;
    }

    boolean shouldIgnoreInput()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.ActivityTaskManagerService $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inSplitScreenPrimaryWindowingMode()>();

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isFocusable()>();

        if $z4 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z1 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mHasLeanbackFeature>;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isFocusedStackOnDisplay()>();

        if $z3 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    boolean shouldResizeStackWithLaunchBounds()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        return $z0;
    }

    boolean shouldSleepActivities()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.DisplayContent r1;
        boolean $z0, $z1, z2;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.KeyguardController $r4;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isFocusedStackOnDisplay()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $z1 = virtualinvoke $r4.<com.android.server.wm.KeyguardController: boolean isKeyguardGoingAway()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        if r1 == null goto label2;

        z2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isSleeping()>();

        goto label3;

     label2:
        $r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        z2 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: boolean isSleepingLocked()>();

     label3:
        return z2;
    }

    boolean shouldSleepOrShutDownActivities()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0, $z1, z2;
        com.android.server.wm.ActivityTaskManagerService $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        if $z0 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z1 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    boolean shouldUpRecreateTaskLocked(com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.Task r2, $r3, $r5, r17;
        int $i0;
        java.lang.String $r4, $r6, $r9, $r10, $r14, r15, r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.Intent $r7, $r8;
        java.lang.StringBuilder $r11;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r15 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getUid()>();

        r16 = staticinvoke <com.android.server.wm.ActivityRecord: java.lang.String getTaskAffinityWithUid(java.lang.String,int)>(r15, $i0);

        if r1 == null goto label5;

        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r4 = $r3.<com.android.server.wm.Task: java.lang.String affinity>;

        if $r4 == null goto label5;

        $r5 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r6 = $r5.<com.android.server.wm.Task: java.lang.String affinity>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r16);

        if $z0 != 0 goto label1;

        goto label5;

     label1:
        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isRootOfTask()>();

        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r2.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

        if $r7 == null goto label4;

        $r8 = virtualinvoke r2.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

        $z2 = virtualinvoke $r8.<android.content.Intent: boolean isDocument()>();

        if $z2 == 0 goto label4;

        $z3 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean inFrontOfStandardStack()>();

        if $z3 != 0 goto label2;

        return 1;

     label2:
        r17 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.Task getTaskBelow(com.android.server.wm.Task)>(r2);

        if r17 != null goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shouldUpRecreateTask: task not in history for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r14);

        return 0;

     label3:
        $r10 = r2.<com.android.server.wm.Task: java.lang.String affinity>;

        $r9 = r17.<com.android.server.wm.Task: java.lang.String affinity>;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 != 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        return 1;
    }

    void startActivityLocked(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, boolean, boolean, android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1, r2, $r11, $r17, r24, r25;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z8, $z9, $z10, z11, z12, $z13, $z14, z15, z17, $z18, $z19;
        com.android.server.wm.Task r3, $r6, r19, r20;
        com.android.server.wm.DisplayContent $r4, $r7, $r8, $r12, r21;
        android.content.Intent $r5, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wm.ActivityStackSupervisor $r13, $r16, $r22;
        java.util.ArrayList $r14, $r23;
        com.android.server.wm.WindowList $r15;
        android.app.ActivityOptions r18;
        byte b8;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r18 := @parameter4: android.app.ActivityOptions;

        r19 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if r18 == null goto label02;

        $z10 = virtualinvoke r18.<android.app.ActivityOptions: boolean getAvoidMoveToFront()>();

        if $z10 != 0 goto label01;

        goto label02;

     label01:
        z11 = 0;

        goto label03;

     label02:
        z11 = 1;

     label03:
        if r19 == r0 goto label05;

        $z9 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean hasChild(com.android.server.wm.WindowContainer)>(r19);

        if $z9 == 0 goto label04;

        goto label05;

     label04:
        z12 = 0;

        goto label06;

     label05:
        z12 = 1;

     label06:
        $z13 = r1.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind>;

        if $z13 != 0 goto label08;

        if z11 == 0 goto label08;

        if z12 == 0 goto label07;

        if z0 == 0 goto label08;

     label07:
        virtualinvoke r0.<com.android.server.wm.ActivityStack: void positionChildAtTop(com.android.server.wm.Task)>(r19);

     label08:
        if z0 != 0 goto label09;

        if z12 == 0 goto label09;

        $r17 = specialinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getOccludingActivityAbove(com.android.server.wm.ActivityRecord)>(r1);

        if $r17 == null goto label09;

        virtualinvoke r19.<com.android.server.wm.Task: void positionChildAtTop(com.android.server.wm.ActivityRecord)>(r1);

        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r18);

        return;

     label09:
        r20 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if r20 != null goto label10;

        $r15 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowList mChildren>;

        $i5 = virtualinvoke $r15.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(null);

        $i6 = virtualinvoke r0.<com.android.server.wm.ActivityStack: int getChildCount()>();

        $i7 = $i6 - 1;

        if $i5 == $i7 goto label10;

        $r16 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r16.<com.android.server.wm.ActivityStackSupervisor: boolean mUserLeaving> = 0;

     label10:
        virtualinvoke r20.<com.android.server.wm.Task: void positionChildAtTop(com.android.server.wm.ActivityRecord)>(r1);

        $z14 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean isHomeOrRecentsStack()>();

        if $z14 == 0 goto label12;

        $z8 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean hasActivity()>();

        if $z8 == 0 goto label11;

        goto label12;

     label11:
        goto label27;

     label12:
        if z11 == 0 goto label27;

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        r21 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        $r5 = r1.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i0 = virtualinvoke $r5.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 65536;

        if $i1 == 0 goto label13;

        virtualinvoke r21.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(0, z1);

        $r13 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r14 = $r13.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        goto label18;

     label13:
        b8 = 6;

        z15 = z1;

        if z0 == 0 goto label17;

        $z4 = r1.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind>;

        if $z4 == 0 goto label14;

        b8 = 16;

        z15 = z1;

        goto label17;

     label14:
        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $z5 = virtualinvoke $r12.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z5 == 0 goto label15;

        b8 = 28;

        z15 = 0;

        goto label17;

     label15:
        $z6 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean canEnterPipOnTaskSwitch(com.android.server.wm.ActivityRecord,com.android.server.wm.Task,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r2, null, r1, r18);

        if $z6 == 0 goto label16;

        r2.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch> = 1;

     label16:
        b8 = 8;

        z15 = z1;

     label17:
        virtualinvoke r21.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(b8, z15);

        $r22 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r23 = $r22.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r23.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

     label18:
        if z0 == 0 goto label21;

        z17 = 1;

        $r9 = r1.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i3 = virtualinvoke $r9.<android.content.Intent: int getFlags()>();

        $i4 = $i3 & 2097152;

        if $i4 == 0 goto label22;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord resetTaskIfNeeded(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord)>(r1, r1);

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningNonDelayedActivityLocked(com.android.server.wm.ActivityRecord)>(null);

        if $r11 != r1 goto label19;

        z17 = 1;

        goto label20;

     label19:
        z17 = 0;

     label20:
        goto label22;

     label21:
        z17 = 1;

        if r18 == null goto label22;

        z17 = 1;

        $i2 = virtualinvoke r18.<android.app.ActivityOptions: int getAnimationType()>();

        if $i2 != 5 goto label22;

        z17 = 0;

     label22:
        $z18 = r1.<com.android.server.wm.ActivityRecord: boolean mLaunchTaskBehind>;

        if $z18 == 0 goto label23;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        $r7 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r8 = $r7.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r8.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        goto label26;

     label23:
        if z17 == 0 goto label26;

        r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r24 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topActivityWithStartingWindow()>();

        r25 = r24;

        if r24 == null goto label25;

        $r6 = virtualinvoke r24.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r6 == r3 goto label24;

        r25 = null;

        goto label25;

     label24:
        r25 = r24;

        $z3 = r24.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z3 == 0 goto label25;

        r25 = null;

     label25:
        $z19 = specialinvoke r0.<com.android.server.wm.ActivityStack: boolean isTaskSwitch(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord)>(r1, r2);

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void showStartingWindow(com.android.server.wm.ActivityRecord,boolean,boolean)>(r25, z0, $z19);

     label26:
        goto label28;

     label27:
        staticinvoke <android.app.ActivityOptions: void abort(android.app.ActivityOptions)>(r18);

     label28:
        return;
    }

    final boolean startPausingLocked(boolean, boolean, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStack r0;
        boolean z0, z1, $z3, $z5, $z6, $z7, $z9, z10, z11, $z12;
        com.android.server.wm.ActivityRecord r1, r2, $r4, $r24, $r27, r33, $r36;
        int i0, $i1, $i2, $i3, i8;
        java.lang.String r3, $r13, $r30;
        com.android.server.wm.ActivityStack$ActivityState $r5, $r28;
        com.android.server.wm.Task $r6;
        com.android.server.wm.ActivityTaskManagerService $r7, $r9, $r14;
        com.android.server.wm.RootWindowContainer $r8, $r21;
        com.android.server.wm.ActivityStackSupervisor $r10;
        com.android.server.wm.ClientLifecycleManager $r15;
        com.android.server.wm.WindowProcessController $r16;
        android.app.IApplicationThread $r17;
        com.android.server.wm.ActivityRecord$Token $r18;
        android.app.servertransaction.PauseActivityItem $r19;
        android.content.pm.ActivityInfo $r20;
        java.lang.StringBuilder $r22, r34;
        java.lang.Exception $r31;

        r0 := @this: com.android.server.wm.ActivityStack;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.wm.ActivityRecord;

        $r4 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r4 == null goto label01;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to pause when pause is already pending for ");

        $r24 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state=");

        $r27 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        $r28 = virtualinvoke $r27.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack$ActivityState getState()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ActivityTaskManager", $r30);

        $z9 = virtualinvoke r0.<com.android.server.wm.ActivityStack: boolean shouldSleepActivities()>();

        if $z9 != 0 goto label01;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void completePauseLocked(boolean,com.android.server.wm.ActivityRecord)>(0, r1);

     label01:
        r2 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if r2 != null goto label03;

        if r1 != null goto label02;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ActivityTaskManager", "Trying to pause when nothing is resumed");

        $r21 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r21.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label02:
        return 0;

     label03:
        if r2 != r1 goto label04;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ActivityTaskManager", "Trying to pause activity that is in process of being resumed");

        return 0;

     label04:
        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity> = r2;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity> = r2;

        $z3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isNoHistory()>();

        if $z3 == 0 goto label05;

        r33 = r2;

        goto label06;

     label05:
        r33 = null;

     label06:
        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity> = r33;

        $r5 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r5, "startPausingLocked");

        $r6 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke $r6.<com.android.server.wm.Task: void touchActiveTime()>();

        specialinvoke r0.<com.android.server.wm.ActivityStack: void clearLaunchTime(com.android.server.wm.ActivityRecord)>(r2);

        $r7 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void updateCpuStats()>();

        z10 = 0;

        if r1 == null goto label09;

        z10 = 0;

        $r20 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i2 = $r20.<android.content.pm.ActivityInfo: int flags>;

        $i3 = $i2 & 16384;

        if $i3 == 0 goto label09;

        if r2 == null goto label07;

        $z7 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean checkEnterPictureInPictureState(java.lang.String,boolean)>("shouldResumeWhilePausing", z0);

        if $z7 == 0 goto label07;

        z11 = 1;

        goto label08;

     label07:
        z11 = 0;

     label08:
        z10 = 0;

        if z11 != 0 goto label09;

        z10 = 1;

     label09:
        $z12 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z12 == 0 goto label14;

     label10:
        i0 = r2.<com.android.server.wm.ActivityRecord: int mUserId>;

        i8 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        r3 = r2.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userLeaving=");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmPauseActivity(int,int,java.lang.String,java.lang.String)>(i0, i8, r3, $r13);

        $r14 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        $r16 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r17 = virtualinvoke $r16.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r18 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $z6 = r2.<com.android.server.wm.ActivityRecord: boolean finishing>;

        $i1 = r2.<com.android.server.wm.ActivityRecord: int configChangeFlags>;

        $r19 = staticinvoke <android.app.servertransaction.PauseActivityItem: android.app.servertransaction.PauseActivityItem obtain(boolean,boolean,int,boolean)>($z6, z0, $i1, z10);

        virtualinvoke $r15.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.IApplicationThread,android.os.IBinder,android.app.servertransaction.ActivityLifecycleItem)>($r17, $r18, $r19);

     label11:
        goto label13;

     label12:
        $r31 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Exception thrown during pause", $r31);

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity> = null;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity> = null;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity> = null;

     label13:
        goto label15;

     label14:
        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity> = null;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastPausedActivity> = null;

        r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mLastNoHistoryActivity> = null;

     label15:
        if z1 != 0 goto label16;

        $r9 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z5 = virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: boolean isSleepingOrShuttingDownLocked()>();

        if $z5 != 0 goto label16;

        $r10 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r10.<com.android.server.wm.ActivityStackSupervisor: void acquireLaunchWakelock()>();

     label16:
        $r36 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r36 == null goto label19;

        if z1 != 0 goto label17;

        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void pauseKeyDispatchingLocked()>();

     label17:
        if z10 == 0 goto label18;

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void completePauseLocked(boolean,com.android.server.wm.ActivityRecord)>(0, r1);

        return 0;

     label18:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void schedulePauseTimeout()>();

        return 1;

     label19:
        if r1 != null goto label20;

        $r8 = r0.<com.android.server.wm.ActivityStack: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label20:
        return 0;

        catch java.lang.Exception from label10 to label11 with label12;
    }

    void switchUser(int)
    {
        com.android.server.wm.ActivityStack r0;
        int i0, $i1;
        com.android.server.wm._$$Lambda$ActivityStack$IgDSmNkXKPhrRAsbKK_pAI4OIKo $r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.ActivityStack: int mCurrentUser>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityStack: int mCurrentUser> = i0;

        specialinvoke r0.<com.android.server.wm.Task: void switchUser(int)>(i0);

        $r1 = new com.android.server.wm._$$Lambda$ActivityStack$IgDSmNkXKPhrRAsbKK_pAI4OIKo;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$ActivityStack$IgDSmNkXKPhrRAsbKK_pAI4OIKo: void <init>(com.android.server.wm.ActivityStack)>(r0);

        virtualinvoke r0.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>($r1, 1);

        return;
    }

    boolean topActivityOccludesKeyguard()
    {
        com.android.server.wm.ActivityStack r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStack;

        $z0 = r0.<com.android.server.wm.ActivityStack: boolean mTopActivityOccludesKeyguard>;

        return $z0;
    }

    void unhandledBackLocked()
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.ActivityStack;

        r1 = virtualinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopMostActivity()>();

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("unhandled-back", 1);

     label1:
        return;
    }

    boolean willActivityBeVisible(android.os.IBinder)
    {
        com.android.server.wm.ActivityStack r0;
        com.android.server.wm.ActivityRecord $r2, r8;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.wm.ActivityStack;

        r7 := @parameter0: android.os.IBinder;

        r8 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r7);

        if r8 != null goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getOccludingActivityAbove(com.android.server.wm.ActivityRecord)>(r8);

        if $r2 == null goto label2;

        return 0;

     label2:
        $z0 = r8.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("willActivityBeVisible: Returning false, would have returned true for r=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

     label3:
        $z1 = r8.<com.android.server.wm.ActivityRecord: boolean finishing>;

        $z2 = $z1 ^ 1;

        return $z2;
    }
}
