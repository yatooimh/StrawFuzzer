public class com.android.server.wm.ActivityStackSupervisor extends java.lang.Object implements com.android.server.wm.RecentTasks$Callbacks
{
    private static final android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION;
    private static final int ACTIVITY_RESTRICTION_APPOP;
    private static final int ACTIVITY_RESTRICTION_NONE;
    private static final int ACTIVITY_RESTRICTION_PERMISSION;
    static final boolean DEFER_RESUME;
    private static final int IDLE_NOW_MSG;
    private static final int IDLE_TIMEOUT;
    private static final int IDLE_TIMEOUT_MSG;
    private static final int LAUNCH_TASK_BEHIND_COMPLETE;
    private static final int LAUNCH_TIMEOUT;
    private static final int LAUNCH_TIMEOUT_MSG;
    private static final int MAX_TASK_IDS_PER_USER;
    static final boolean ON_TOP;
    static final boolean PRESERVE_WINDOWS;
    private static final int PROCESS_STOPPING_AND_FINISHING_MSG;
    static final boolean REMOVE_FROM_RECENTS;
    private static final int REPORT_HOME_CHANGED_MSG;
    private static final int REPORT_MULTI_WINDOW_MODE_CHANGED_MSG;
    private static final int REPORT_PIP_MODE_CHANGED_MSG;
    private static final int RESTART_ACTIVITY_PROCESS_TIMEOUT_MSG;
    private static final int RESUME_TOP_ACTIVITY_MSG;
    private static final int SLEEP_TIMEOUT;
    private static final int SLEEP_TIMEOUT_MSG;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_IDLE;
    private static final java.lang.String TAG_PAUSE;
    private static final java.lang.String TAG_RECENTS;
    private static final java.lang.String TAG_STACK;
    private static final java.lang.String TAG_SWITCH;
    static final java.lang.String TAG_TASKS;
    private static final int TOP_RESUMED_STATE_LOSS_TIMEOUT;
    private static final int TOP_RESUMED_STATE_LOSS_TIMEOUT_MSG;
    private static final boolean VALIDATE_WAKE_LOCK_CALLER;
    private com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger;
    private android.app.AppOpsManager mAppOpsManager;
    boolean mAppVisibilitiesChangedSinceLastPause;
    private final android.util.SparseIntArray mCurTaskIdForUser;
    private int mDeferResumeCount;
    private boolean mDockedStackResizing;
    final java.util.ArrayList mFinishingActivities;
    android.os.PowerManager$WakeLock mGoingToSleepWakeLock;
    private final com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler;
    private boolean mInitialized;
    private com.android.server.wm.KeyguardController mKeyguardController;
    private com.android.server.wm.LaunchParamsController mLaunchParamsController;
    com.android.server.wm.LaunchParamsPersister mLaunchParamsPersister;
    android.os.PowerManager$WakeLock mLaunchingActivityWakeLock;
    final android.os.Looper mLooper;
    private final java.util.ArrayList mMultiWindowModeChangedActivities;
    final java.util.ArrayList mNoAnimActivities;
    com.android.server.wm.PersisterQueue mPersisterQueue;
    private final java.util.ArrayList mPipModeChangedActivities;
    private android.graphics.Rect mPipModeChangedTargetStackBounds;
    private android.os.PowerManager mPowerManager;
    com.android.server.wm.RecentTasks mRecentTasks;
    com.android.server.wm.RootWindowContainer mRootWindowContainer;
    private com.android.server.wm.RunningTasks mRunningTasks;
    final com.android.server.wm.ActivityTaskManagerService mService;
    final java.util.ArrayList mStartingUsers;
    final java.util.ArrayList mStoppingActivities;
    private android.content.ComponentName mSystemChooserActivity;
    private com.android.server.wm.ActivityRecord mTopResumedActivity;
    private boolean mTopResumedActivityWaitingForPrev;
    boolean mUserLeaving;
    private int mVisibilityTransactionDepth;
    final java.util.ArrayList mWaitingActivityLaunched;
    private final java.util.ArrayList mWaitingForActivityVisible;
    private com.android.server.wm.WindowManagerService mWindowManager;

    static void <clinit>()
    {
        android.util.ArrayMap $r1, $r3, $r5;

        <com.android.server.wm.ActivityStackSupervisor: boolean VALIDATE_WAKE_LOCK_CALLER> = 0;

        <com.android.server.wm.ActivityStackSupervisor: int TOP_RESUMED_STATE_LOSS_TIMEOUT_MSG> = 217;

        <com.android.server.wm.ActivityStackSupervisor: int TOP_RESUMED_STATE_LOSS_TIMEOUT> = 500;

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG_TASKS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG_SWITCH> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG_STACK> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG_RECENTS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG_PAUSE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG_IDLE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.ActivityStackSupervisor: int SLEEP_TIMEOUT_MSG> = 203;

        <com.android.server.wm.ActivityStackSupervisor: int SLEEP_TIMEOUT> = 5000;

        <com.android.server.wm.ActivityStackSupervisor: int RESUME_TOP_ACTIVITY_MSG> = 202;

        <com.android.server.wm.ActivityStackSupervisor: int RESTART_ACTIVITY_PROCESS_TIMEOUT_MSG> = 213;

        <com.android.server.wm.ActivityStackSupervisor: int REPORT_PIP_MODE_CHANGED_MSG> = 215;

        <com.android.server.wm.ActivityStackSupervisor: int REPORT_MULTI_WINDOW_MODE_CHANGED_MSG> = 214;

        <com.android.server.wm.ActivityStackSupervisor: int REPORT_HOME_CHANGED_MSG> = 216;

        <com.android.server.wm.ActivityStackSupervisor: boolean REMOVE_FROM_RECENTS> = 1;

        <com.android.server.wm.ActivityStackSupervisor: int PROCESS_STOPPING_AND_FINISHING_MSG> = 205;

        <com.android.server.wm.ActivityStackSupervisor: boolean PRESERVE_WINDOWS> = 1;

        <com.android.server.wm.ActivityStackSupervisor: boolean ON_TOP> = 1;

        <com.android.server.wm.ActivityStackSupervisor: int MAX_TASK_IDS_PER_USER> = 100000;

        <com.android.server.wm.ActivityStackSupervisor: int LAUNCH_TIMEOUT_MSG> = 204;

        <com.android.server.wm.ActivityStackSupervisor: int LAUNCH_TIMEOUT> = 10000;

        <com.android.server.wm.ActivityStackSupervisor: int LAUNCH_TASK_BEHIND_COMPLETE> = 212;

        <com.android.server.wm.ActivityStackSupervisor: int IDLE_TIMEOUT_MSG> = 200;

        <com.android.server.wm.ActivityStackSupervisor: int IDLE_TIMEOUT> = 10000;

        <com.android.server.wm.ActivityStackSupervisor: int IDLE_NOW_MSG> = 201;

        <com.android.server.wm.ActivityStackSupervisor: boolean DEFER_RESUME> = 1;

        <com.android.server.wm.ActivityStackSupervisor: int ACTIVITY_RESTRICTION_PERMISSION> = 1;

        <com.android.server.wm.ActivityStackSupervisor: int ACTIVITY_RESTRICTION_NONE> = 0;

        <com.android.server.wm.ActivityStackSupervisor: int ACTIVITY_RESTRICTION_APPOP> = 2;

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        <com.android.server.wm.ActivityStackSupervisor: android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION> = $r1;

        virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.media.action.IMAGE_CAPTURE", "android.permission.CAMERA");

        $r3 = <com.android.server.wm.ActivityStackSupervisor: android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.media.action.VIDEO_CAPTURE", "android.permission.CAMERA");

        $r5 = <com.android.server.wm.ActivityStackSupervisor: android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION>;

        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.intent.action.CALL", "android.permission.CALL_PHONE");

        return;
    }

    public void <init>(com.android.server.wm.ActivityTaskManagerService, android.os.Looper)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityTaskManagerService r1;
        android.os.Looper r2;
        android.util.SparseIntArray $r3;
        java.util.ArrayList $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r12;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.SparseIntArray;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>(int)>(20);

        r0.<com.android.server.wm.ActivityStackSupervisor: android.util.SparseIntArray mCurTaskIdForUser> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mMultiWindowModeChangedActivities> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mPipModeChangedActivities> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStartingUsers> = $r11;

        r0.<com.android.server.wm.ActivityStackSupervisor: boolean mUserLeaving> = 0;

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService> = r1;

        r0.<com.android.server.wm.ActivityStackSupervisor: android.os.Looper mLooper> = r2;

        $r12 = new com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler;

        specialinvoke $r12.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void <init>(com.android.server.wm.ActivityStackSupervisor,android.os.Looper)>(r0, r2);

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler> = $r12;

        return;
    }

    static java.util.ArrayList access$000(com.android.server.wm.ActivityStackSupervisor)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mMultiWindowModeChangedActivities>;

        return $r1;
    }

    static java.util.ArrayList access$100(com.android.server.wm.ActivityStackSupervisor)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mPipModeChangedActivities>;

        return $r1;
    }

    static android.graphics.Rect access$200(com.android.server.wm.ActivityStackSupervisor)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.graphics.Rect mPipModeChangedTargetStackBounds>;

        return $r1;
    }

    static void access$300(com.android.server.wm.ActivityStackSupervisor, com.android.server.wm.ActivityRecord, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        boolean z0;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void processStoppingAndFinishingActivities(com.android.server.wm.ActivityRecord,boolean,java.lang.String)>(r1, z0, r2);

        return;
    }

    static void access$400(com.android.server.wm.ActivityStackSupervisor, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void handleLaunchTaskBehindCompleteLocked(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    static com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler access$500(com.android.server.wm.ActivityStackSupervisor)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        return $r1;
    }

    private void addToMultiWindowModeChangedList(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mMultiWindowModeChangedActivities>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void addToPipModeChangedList(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;
        java.util.ArrayList $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mPipModeChangedActivities>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mMultiWindowModeChangedActivities>;

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private boolean checkFinishBootingLocked()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, $z1, z2;
        com.android.server.wm.ActivityTaskManagerService $r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        z0 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: boolean isBooting()>();

        z2 = 0;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: void setBooting(boolean)>(0);

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: boolean isBooted()>();

        if $z1 != 0 goto label1;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: void setBooted(boolean)>(1);

        z2 = 1;

     label1:
        if z0 != 0 goto label2;

        if z2 == 0 goto label3;

     label2:
        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: void postFinishBooting(boolean,boolean)>(z0, z2);

     label3:
        return z0;
    }

    static boolean dumpHistoryList(java.io.FileDescriptor, java.io.PrintWriter, java.util.List, java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String, boolean, java.lang.Runnable, com.android.server.wm.Task)
    {
        java.io.FileDescriptor r0;
        java.io.PrintWriter r1;
        java.util.List r2;
        java.lang.String r3, r4, r5, $r14, $r19, $r21, $r23, $r26, $r30, r38, r43, r48, r50;
        boolean z0, z1, z2, $z3, $z4, $z5, z6, z7, z8;
        com.android.server.wm.ActivityRecord r6;
        java.lang.Object $r7;
        com.android.server.wm.Task $r8, r35, r37, r46, r47;
        com.android.server.wm.WindowProcessController $r9, $r15, $r16;
        android.app.IApplicationThread $r10;
        android.os.ParcelFileDescriptor $r11;
        com.android.server.wm.ActivityRecord$Token $r12;
        android.content.Intent $r13, $r17, $r18;
        java.lang.StringBuilder $r20, $r22, $r25, $r29;
        android.os.RemoteException $r24, $r27;
        java.lang.Throwable $r28, $r31, $r32, $r33, r53, r54;
        java.lang.Runnable r34, r36, r42, r45;
        int i0, i1;
        java.lang.String[] r39;
        com.android.internal.os.TransferPipe r51;

        r0 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        r5 := @parameter8: java.lang.String;

        z6 := @parameter9: boolean;

        r34 := @parameter10: java.lang.Runnable;

        r35 := @parameter11: com.android.server.wm.Task;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        z7 = 0;

        i1 = i0 + -1;

        r36 = r34;

        r37 = r35;

        r38 = null;

        r39 = null;

     label01:
        if i1 < 0 goto label34;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r6 = (com.android.server.wm.ActivityRecord) $r7;

        if r5 == null goto label02;

        $r23 = r6.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z5 != 0 goto label02;

        r42 = r36;

        goto label33;

     label02:
        r43 = r38;

        if r38 != null goto label03;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        r43 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        r39 = newarray (java.lang.String)[0];

     label03:
        z7 = 1;

        z8 = 0;

        if z1 != 0 goto label05;

        if z0 != 0 goto label04;

        z8 = 0;

        $z4 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: boolean isInHistory()>();

        if $z4 != 0 goto label05;

     label04:
        z8 = 1;

     label05:
        if z6 == 0 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        z6 = 0;

        goto label06;

     label06:
        r45 = r36;

        if r36 == null goto label07;

        interfaceinvoke r36.<java.lang.Runnable: void run()>();

        r45 = null;

     label07:
        r46 = r37;

        $r8 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if r37 == $r8 goto label11;

        r47 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        if z8 == 0 goto label08;

        r48 = "* ";

        goto label09;

     label08:
        r48 = "  ";

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r48);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r47);

        if z8 == 0 goto label10;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r47.<com.android.server.wm.Task: void dump(java.io.PrintWriter,java.lang.String)>(r1, $r21);

        r46 = r47;

        goto label11;

     label10:
        r46 = r47;

        if z0 == 0 goto label11;

        r46 = r47;

        $r17 = r47.<com.android.server.wm.Task: android.content.Intent intent>;

        if $r17 == null goto label11;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r18 = r47.<com.android.server.wm.Task: android.content.Intent intent>;

        $r19 = virtualinvoke $r18.<android.content.Intent: java.lang.String toInsecureString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        r46 = r47;

     label11:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        if z8 == 0 goto label12;

        r50 = "  * ";

        goto label13;

     label12:
        r50 = "    ";

     label13:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r50);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r6);

        if z8 == 0 goto label14;

        virtualinvoke r6.<com.android.server.wm.ActivityRecord: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r43, 1);

        goto label15;

     label14:
        if z0 == 0 goto label15;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r43);

        $r13 = r6.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r14 = virtualinvoke $r13.<android.content.Intent: java.lang.String toInsecureString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        $r15 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r15 == null goto label15;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r43);

        $r16 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r16);

     label15:
        if z2 == 0 goto label32;

        $z3 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z3 == 0 goto label32;

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

     label16:
        r51 = new com.android.internal.os.TransferPipe;

        specialinvoke r51.<com.android.internal.os.TransferPipe: void <init>()>();

     label17:
        $r9 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r11 = virtualinvoke r51.<com.android.internal.os.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()>();

        $r12 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        interfaceinvoke $r10.<android.app.IApplicationThread: void dumpActivity(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>($r11, $r12, r43, r39);

     label18:
        virtualinvoke r51.<com.android.internal.os.TransferPipe: void go(java.io.FileDescriptor,long)>(r0, 2000L);

     label19:
        virtualinvoke r51.<com.android.internal.os.TransferPipe: void kill()>();

     label20:
        goto label31;

     label21:
        $r31 := @caughtexception;

        r53 = $r31;

        goto label23;

     label22:
        $r33 := @caughtexception;

        r53 = $r33;

     label23:
        virtualinvoke r51.<com.android.internal.os.TransferPipe: void kill()>();

     label24:
        throw r53;

     label25:
        $r24 := @caughtexception;

        goto label28;

     label26:
        $r28 := @caughtexception;

        r54 = $r28;

        goto label30;

     label27:
        $r27 := @caughtexception;

     label28:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got a RemoteException while dumping the activity");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        goto label31;

     label29:
        $r32 := @caughtexception;

        r54 = $r32;

     label30:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure while dumping the activity: ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

     label31:
        z6 = 1;

        r42 = r45;

        r37 = r46;

        r38 = r43;

        goto label33;

     label32:
        r42 = r45;

        r38 = r43;

        r37 = r46;

     label33:
        i1 = i1 + -1;

        r36 = r42;

        goto label01;

     label34:
        return z7;

        catch java.io.IOException from label16 to label17 with label29;
        catch android.os.RemoteException from label16 to label17 with label27;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.io.IOException from label19 to label20 with label26;
        catch android.os.RemoteException from label19 to label20 with label25;
        catch java.io.IOException from label23 to label24 with label26;
        catch android.os.RemoteException from label23 to label24 with label25;
        catch java.io.IOException from label24 to label25 with label26;
        catch android.os.RemoteException from label24 to label25 with label25;
    }

    private int getActionRestrictionForCallingPackage(java.lang.String, java.lang.String, java.lang.String, int, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.lang.String r1, r2, $r15, r16, r17;
        int i0, $i1, $i2, $i3, i5, i6;
        android.content.pm.PackageInfo r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        com.android.server.wm.ActivityTaskManagerService $r6;
        android.content.Context $r7;
        android.content.pm.PackageManager $r8;
        java.lang.String[] $r9;
        boolean $z0;
        android.app.AppOpsManager $r10;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r16 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i5 := @parameter3: int;

        i0 := @parameter4: int;

        if r16 != null goto label1;

        return 0;

     label1:
        $r4 = <com.android.server.wm.ActivityStackSupervisor: android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (java.lang.String) $r5;

        if r17 != null goto label2;

        return 0;

     label2:
        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r7 = $r6.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r3 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String,int,int)>(r1, 4096, $i1);

     label3:
        $r9 = r3.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r9, r17);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $i2 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>(r17, i5, i0);

        if $i2 != -1 goto label5;

        return 1;

     label5:
        i6 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>(r17);

        if i6 != -1 goto label6;

        return 0;

     label6:
        $r10 = specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: android.app.AppOpsManager getAppOpsManager()>();

        $i3 = virtualinvoke $r10.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(i6, i0, r1, r2, "");

        if $i3 == 0 goto label7;

        return 2;

     label7:
        return 0;

     label8:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find package info for ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r15);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label8;
    }

    private android.app.AppOpsManager getAppOpsManager()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.app.AppOpsManager $r1, $r2, $r6;
        com.android.server.wm.ActivityTaskManagerService $r3;
        android.content.Context $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.app.AppOpsManager mAppOpsManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r6 = (android.app.AppOpsManager) $r5;

        r0.<com.android.server.wm.ActivityStackSupervisor: android.app.AppOpsManager mAppOpsManager> = $r6;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.app.AppOpsManager mAppOpsManager>;

        return $r2;
    }

    private int getComponentRestrictionForCallingPackage(android.content.pm.ActivityInfo, java.lang.String, java.lang.String, int, int, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.content.pm.ActivityInfo r1;
        java.lang.String r2, r3, $r4, $r5, $r8;
        int i0, $i1, $i2, $i3, i4, i5;
        boolean z0, $z1;
        android.app.AppOpsManager $r6;
        android.content.pm.ApplicationInfo $r7;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: android.content.pm.ActivityInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        if z0 != 0 goto label1;

        $r8 = r1.<android.content.pm.ActivityInfo: java.lang.String permission>;

        $r7 = r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        $z1 = r1.<android.content.pm.ActivityInfo: boolean exported>;

        $i3 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkComponentPermission(java.lang.String,int,int,int,boolean)>($r8, i4, i0, $i2, $z1);

        if $i3 != -1 goto label1;

        return 1;

     label1:
        $r4 = r1.<android.content.pm.ActivityInfo: java.lang.String permission>;

        if $r4 != null goto label2;

        return 0;

     label2:
        $r5 = r1.<android.content.pm.ActivityInfo: java.lang.String permission>;

        i5 = staticinvoke <android.app.AppOpsManager: int permissionToOpCode(java.lang.String)>($r5);

        if i5 != -1 goto label3;

        return 0;

     label3:
        $r6 = specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: android.app.AppOpsManager getAppOpsManager()>();

        $i1 = virtualinvoke $r6.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(i5, i0, r2, r3, "");

        if $i1 == 0 goto label4;

        if z0 != 0 goto label4;

        return 2;

     label4:
        return 0;
    }

    private void handleForcedResizableTaskIfNeeded(com.android.server.wm.Task, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        int i0, $i1, $i2;
        com.android.server.wm.ActivityRecord r2;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.TaskChangeNotificationController $r4;
        android.content.pm.ActivityInfo $r5;
        android.content.pm.ApplicationInfo $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r2 == null goto label2;

        $z0 = r2.<com.android.server.wm.ActivityRecord: boolean noDisplay>;

        if $z0 != 0 goto label2;

        $i1 = virtualinvoke r1.<com.android.server.wm.Task: int getWindowingMode()>();

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isNonResizableOrForcedResizable(int)>($i1);

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i2 = r1.<com.android.server.wm.Task: int mTaskId>;

        $r5 = r2.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r6 = $r5.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r7 = $r6.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        virtualinvoke $r4.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityForcedResizable(int,int,java.lang.String)>($i2, i0, $r7);

        return;

     label2:
        return;
    }

    private void handleLaunchTaskBehindCompleteLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.RecentTasks $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.TaskChangeNotificationController $r4;
        com.android.server.wm.Task $r5, r7;
        com.android.server.wm.ActivityRecord r6, r8;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r6 := @parameter0: com.android.server.wm.ActivityRecord;

        r7 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r1 = virtualinvoke r7.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        virtualinvoke $r2.<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>(r7);

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r4.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskStackChanged()>();

        virtualinvoke r1.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        r8 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r8 == null goto label1;

        $r5 = virtualinvoke r8.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke $r5.<com.android.server.wm.Task: void touchActiveTime()>();

     label1:
        return;
    }

    public static void lambda$BFgD0ahFSDg4CqQNytqWrPRgFII(com.android.server.wm.ActivityStackSupervisor, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void addToMultiWindowModeChangedList(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    public static void lambda$GTQdt2-hJbSgeh3nbBxR-rvVTqw(com.android.server.wm.ActivityStackSupervisor, com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter1: com.android.server.wm.Task;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void processRemoveTask(com.android.server.wm.Task)>(r1);

        return;
    }

    public static void lambda$mLKHIIzkTAK9QSlSxia8-84y15M(com.android.server.wm.ActivityStackSupervisor, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @parameter0: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void addToPipModeChangedList(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    private void logIfTransactionTooLarge(android.content.Intent, android.os.Bundle)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.content.Intent r1;
        android.os.Bundle r2, r11;
        int $i0, i3, i4;
        java.lang.StringBuilder $r3;
        java.lang.String $r10;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: android.content.Intent;

        r11 := @parameter1: android.os.Bundle;

        i3 = 0;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.content.Intent: android.os.Bundle getExtras()>();

        i3 = 0;

        if r2 == null goto label1;

        i3 = virtualinvoke r2.<android.os.Bundle: int getSize()>();

     label1:
        if r11 != null goto label2;

        i4 = 0;

        goto label3;

     label2:
        i4 = virtualinvoke r11.<android.os.Bundle: int getSize()>();

     label3:
        $i0 = i3 + i4;

        if $i0 <= 200000 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction too large, intent: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", extras size: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", icicle size: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r10);

     label4:
        return;
    }

    private void moveHomeStackToFrontIfNeeded(int, com.android.server.wm.TaskDisplayArea, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, $i1, $i2;
        com.android.server.wm.TaskDisplayArea r1;
        java.lang.String r2;
        com.android.server.wm.ActivityStack r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.TaskDisplayArea;

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getFocusedStack()>();

        $i1 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int getWindowingMode()>();

        if $i1 != 1 goto label1;

        $i2 = i0 & 1;

        if $i2 != 0 goto label2;

     label1:
        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<com.android.server.wm.ActivityStack: boolean isActivityTypeRecents()>();

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: void moveHomeStackToFront(java.lang.String)>(r2);

     label3:
        return;
    }

    private static int nextTaskIdForUser(int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = i4 + 1;

        i5 = i1;

        $i2 = i0 + 1;

        $i3 = $i2 * 100000;

        if i1 != $i3 goto label1;

        i5 = i1 - 100000;

     label1:
        return i5;
    }

    static boolean printThisActivity(java.io.PrintWriter, com.android.server.wm.ActivityRecord, java.lang.String, boolean, java.lang.String, java.lang.Runnable)
    {
        java.io.PrintWriter r0;
        com.android.server.wm.ActivityRecord r1;
        java.lang.String r2, r3, $r5;
        boolean z0, $z1;
        java.lang.Runnable r4;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.Runnable;

        if r1 == null goto label4;

        if r2 == null goto label1;

        $r5 = r1.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

     label1:
        if z0 == 0 goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

     label2:
        if r4 == null goto label3;

        interfaceinvoke r4.<java.lang.Runnable: void run()>();

     label3:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>(r1);

        return 1;

     label4:
        return 0;
    }

    private void processRemoveTask(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeTask(com.android.server.wm.Task,boolean,boolean,java.lang.String)>(r1, 1, 1, "remove-stack");

        return;
    }

    private void processStoppingAndFinishingActivities(com.android.server.wm.ActivityRecord, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, $z1, $z3, $z4, $z6, $z8, $z9;
        java.lang.String r1, $r12;
        com.android.server.wm.ActivityRecord r2, r21, r24, r26;
        java.util.ArrayList $r3, $r4, $r5, $r6, $r7, $r14, $r16, $r18, r22, r23;
        int $i0, i1, i2, i3, i4, i5;
        java.lang.Object $r8, $r13, $r15;
        java.lang.StringBuilder $r9;
        com.android.server.wm.ActivityStack$ActivityState $r19;
        com.android.server.wm.ActivityTaskManagerService $r20;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r21 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r22 = null;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label01:
        if i1 < 0 goto label06;

        $r14 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.ActivityRecord) $r15;

        $z6 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isAnimating(int,int)>(3, 9);

        if $z6 == 0 goto label02;

        r23 = r22;

        $r20 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z9 = $r20.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        if $z9 == 0 goto label05;

     label02:
        if z0 != 0 goto label03;

        $r19 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $z8 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r19);

        if $z8 == 0 goto label03;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeIdleTimeoutForActivity(com.android.server.wm.ActivityRecord)>(r21);

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void scheduleIdleTimeout(com.android.server.wm.ActivityRecord)>(r21);

        r23 = r22;

        goto label05;

     label03:
        r23 = r22;

        if r22 != null goto label04;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r23 = $r18;

     label04:
        virtualinvoke r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r16 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r16.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

     label05:
        i1 = i1 + -1;

        r22 = r23;

        goto label01;

     label06:
        if r22 != null goto label07;

        i2 = 0;

        goto label08;

     label07:
        i2 = virtualinvoke r22.<java.util.ArrayList: int size()>();

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label12;

        $r13 = virtualinvoke r22.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r24 = (com.android.server.wm.ActivityRecord) $r13;

        $z3 = virtualinvoke r24.<com.android.server.wm.ActivityRecord: boolean isInHistory()>();

        if $z3 == 0 goto label11;

        $z4 = r24.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z4 == 0 goto label10;

        virtualinvoke r24.<com.android.server.wm.ActivityRecord: boolean destroyIfPossible(java.lang.String)>(r1);

        goto label11;

     label10:
        virtualinvoke r24.<com.android.server.wm.ActivityRecord: void stopIfPossible()>();

     label11:
        i3 = i3 + 1;

        goto label09;

     label12:
        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        i4 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i4 != 0 goto label13;

        return;

     label13:
        $r5 = new java.util.ArrayList;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        $r7 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

        i5 = 0;

     label14:
        if i5 >= i4 goto label16;

        $r8 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r26 = (com.android.server.wm.ActivityRecord) $r8;

        $z1 = virtualinvoke r26.<com.android.server.wm.ActivityRecord: boolean isInHistory()>();

        if $z1 == 0 goto label15;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("finish-");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r26.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, $r12);

     label15:
        i5 = i5 + 1;

        goto label14;

     label16:
        return;
    }

    private void removeHistoryRecords(java.util.ArrayList, com.android.server.wm.WindowProcessController, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.util.ArrayList r1;
        com.android.server.wm.WindowProcessController r2, $r4;
        java.lang.Object $r3;
        java.lang.String r6;
        int i0;
        com.android.server.wm.ActivityRecord r7;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: com.android.server.wm.WindowProcessController;

        r6 := @parameter2: java.lang.String;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

     label1:
        if i0 <= 0 goto label3;

        i0 = i0 + -1;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.wm.ActivityRecord) $r3;

        $r4 = r7.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r4 != r2 goto label2;

        virtualinvoke r1.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        virtualinvoke r7.<com.android.server.wm.ActivityRecord: void removeTimeouts()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private void removePinnedStackInSurfaceTransaction(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.RootWindowContainer $r2, $r5, $r6;
        com.android.server.wm.ActivityTaskManagerService $r3, $r7, $r9;
        com.android.server.wm.TaskDisplayArea $r4;
        java.lang.Throwable $r8;
        com.android.server.wm.ActivityStack r10;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r10 := @parameter0: com.android.server.wm.ActivityStack;

        virtualinvoke r10.<com.android.server.wm.ActivityStack: void cancelAnimation()>();

        virtualinvoke r10.<com.android.server.wm.ActivityStack: boolean setForceHidden(int,boolean)>(1, 1);

        virtualinvoke r10.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 1);

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void activityIdleInternal(com.android.server.wm.ActivityRecord,boolean,boolean,android.content.res.Configuration)>(null, 0, 1, null);

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label1:
        virtualinvoke r10.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(0);

        virtualinvoke r10.<com.android.server.wm.ActivityStack: int setBounds(android.graphics.Rect)>(null);

        $r4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke $r4.<com.android.server.wm.TaskDisplayArea: void positionTaskBehindHome(com.android.server.wm.ActivityStack)>(r10);

        virtualinvoke r10.<com.android.server.wm.ActivityStack: boolean setForceHidden(int,boolean)>(1, 0);

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 1);

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label2:
        $r7 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void removeStackInSurfaceTransaction(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStack r1;
        com.android.internal.util.function.pooled.PooledConsumer r2;
        int $i0;
        com.android.server.wm.'-$$Lambda$ActivityStackSupervisor$GTQdt2-hJbSgeh3nbBxR-rvVTqw' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        $i0 = virtualinvoke r1.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if $i0 != 2 goto label1;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removePinnedStackInSurfaceTransaction(com.android.server.wm.ActivityStack)>(r1);

        goto label2;

     label1:
        $r3 = <com.android.server.wm._$$Lambda$ActivityStackSupervisor$GTQdt2_hJbSgeh3nbBxR_rvVTqw: com.android.server.wm.'-$$Lambda$ActivityStackSupervisor$GTQdt2-hJbSgeh3nbBxR-rvVTqw' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        r5 = (java.util.function.BiConsumer) $r3;

        r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r5, r0, $r4);

        virtualinvoke r1.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r2, 1);

        interfaceinvoke r2.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

     label2:
        return;
    }

    private void scheduleTopResumedActivityStateIfNeeded()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityRecord mTopResumedActivity>;

        if r1 == null goto label1;

        $z0 = r0.<com.android.server.wm.ActivityStackSupervisor: boolean mTopResumedActivityWaitingForPrev>;

        if $z0 != 0 goto label1;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean scheduleTopResumedActivityChanged(boolean)>(1);

     label1:
        return;
    }

    private void scheduleTopResumedStateLossTimeout(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        android.os.Message r2;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r3, $r4;
        long $l0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        r2 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: android.os.Message obtainMessage(int)>(217);

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r1.<com.android.server.wm.ActivityRecord: long topResumedStateLossTime> = $l0;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, 500L);

        return;
    }

    private void scheduleUpdatePictureInPictureModeIfNeeded(com.android.server.wm.Task, android.graphics.Rect)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        android.graphics.Rect r2;
        com.android.internal.util.function.pooled.PooledConsumer r3;
        com.android.server.wm.'-$$Lambda$ActivityStackSupervisor$mLKHIIzkTAK9QSlSxia8-84y15M' $r4;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r5;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r6, $r7;
        boolean $z0;
        java.util.function.BiConsumer r8;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 := @parameter1: android.graphics.Rect;

        $r4 = <com.android.server.wm._$$Lambda$ActivityStackSupervisor$mLKHIIzkTAK9QSlSxia8_84y15M: com.android.server.wm.'-$$Lambda$ActivityStackSupervisor$mLKHIIzkTAK9QSlSxia8-84y15M' INSTANCE>;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r8 = (java.util.function.BiConsumer) $r4;

        r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r8, r0, $r5);

        virtualinvoke r1.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r3);

        interfaceinvoke r3.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: android.graphics.Rect mPipModeChangedTargetStackBounds> = r2;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $z0 = virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean hasMessages(int)>(215);

        if $z0 != 0 goto label1;

        $r7 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessage(int)>(215);

     label1:
        return;
    }

    void acquireLaunchWakelock()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.os.PowerManager$WakeLock $r1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void acquire()>();

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean hasMessages(int)>(204);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessageDelayed(int,long)>(204, 10000L);

     label1:
        return;
    }

    void activityIdleInternal(com.android.server.wm.ActivityRecord, boolean, boolean, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, z1, $z4, $z5, $z6, z7, $z8, $z9;
        android.content.res.Configuration r1;
        java.util.ArrayList $r2, $r3, $r4, $r18;
        int $i0, i1;
        com.android.server.wm.ActivityTaskManagerService $r5, $r12, $r14, $r20;
        android.app.ActivityManagerInternal $r6;
        java.lang.Object $r7;
        android.os.PowerManager$WakeLock $r8, $r11;
        com.android.server.wm.RootWindowContainer $r9, $r15, $r17;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r10, $r13;
        com.android.server.wm.ActivityRecord r16;
        com.android.server.wm.ActivityTaskManagerService$H $r21;
        com.android.server.wm._$$Lambda$ActivityStackSupervisor$iNb1_M_lYtbDycAXODgbDkmI9ww $r22;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r16 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: android.content.res.Configuration;

        z7 = 0;

        if r16 == null goto label06;

        $r13 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r13.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int,java.lang.Object)>(200, r16);

        virtualinvoke r16.<com.android.server.wm.ActivityRecord: void finishLaunchTickingLocked()>();

        if z0 == 0 goto label01;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void reportActivityLaunchedLocked(boolean,com.android.server.wm.ActivityRecord,long,int)>(z0, r16, -1L, -1);

     label01:
        if r1 == null goto label02;

        virtualinvoke r16.<com.android.server.wm.ActivityRecord: void setLastReportedGlobalConfiguration(android.content.res.Configuration)>(r1);

     label02:
        r16.<com.android.server.wm.ActivityRecord: boolean idle> = 1;

        $r14 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z5 = virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: boolean isBooting()>();

        if $z5 == 0 goto label03;

        $r15 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z6 = virtualinvoke $r15.<com.android.server.wm.RootWindowContainer: boolean allResumedActivitiesIdle()>();

        if $z6 != 0 goto label04;

     label03:
        z7 = 0;

        if z0 == 0 goto label05;

     label04:
        z7 = specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean checkFinishBootingLocked()>();

     label05:
        r16.<com.android.server.wm.ActivityRecord: int mRelaunchReason> = 0;

     label06:
        $r17 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z8 = virtualinvoke $r17.<com.android.server.wm.RootWindowContainer: boolean allResumedActivitiesIdle()>();

        if $z8 == 0 goto label09;

        if r16 == null goto label07;

        $r12 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService: void scheduleAppGcsLocked()>();

     label07:
        $r8 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock>;

        $z4 = virtualinvoke $r8.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z4 == 0 goto label08;

        $r10 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r10.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int)>(204);

        $r11 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void release()>();

     label08:
        $r9 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

     label09:
        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void processStoppingAndFinishingActivities(com.android.server.wm.ActivityRecord,boolean,java.lang.String)>(r16, z1, "idle");

        $r18 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStartingUsers>;

        $z9 = virtualinvoke $r18.<java.util.ArrayList: boolean isEmpty()>();

        if $z9 != 0 goto label11;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStartingUsers>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStartingUsers>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

        if z7 != 0 goto label11;

        i1 = 0;

     label10:
        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label11;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r7 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        virtualinvoke $r6.<android.app.ActivityManagerInternal: void finishUserSwitch(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label10;

     label11:
        $r20 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r21 = $r20.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r22 = new com.android.server.wm._$$Lambda$ActivityStackSupervisor$iNb1_M_lYtbDycAXODgbDkmI9ww;

        specialinvoke $r22.<com.android.server.wm._$$Lambda$ActivityStackSupervisor$iNb1_M_lYtbDycAXODgbDkmI9ww: void <init>(com.android.server.wm.ActivityStackSupervisor)>(r0);

        virtualinvoke $r21.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r22);

        return;
    }

    void activityRelaunchedLocked(android.os.IBinder)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStack $r1, $r2;
        boolean $z0;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r3 := @parameter0: android.os.IBinder;

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

        if r4 == null goto label1;

        virtualinvoke r4.<com.android.server.wm.ActivityRecord: void finishRelaunching()>();

        $r1 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $z0 = virtualinvoke $r1.<com.android.server.wm.ActivityStack: boolean shouldSleepOrShutDownActivities()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r2.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

     label1:
        return;
    }

    void beginActivityVisibilityUpdate()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $i0 = r0.<com.android.server.wm.ActivityStackSupervisor: int mVisibilityTransactionDepth>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.ActivityStackSupervisor: int mVisibilityTransactionDepth> = $i1;

        return;
    }

    void beginDeferResume()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $i0 = r0.<com.android.server.wm.ActivityStackSupervisor: int mDeferResumeCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.ActivityStackSupervisor: int mDeferResumeCount> = $i1;

        return;
    }

    boolean canPlaceEntityOnDisplay(int, int, int, android.content.pm.ActivityInfo)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, i1, i2;
        android.content.pm.ActivityInfo r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.content.pm.ActivityInfo;

        if i0 != 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z0 = $r2.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiDisplay>;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean isCallerAllowedToLaunchOnDisplay(int,int,int,android.content.pm.ActivityInfo)>(i1, i2, i0, r1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    boolean canUseActivityOptionsLaunchBounds(android.app.ActivityOptions)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.app.ActivityOptions r1;
        android.graphics.Rect $r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r4;
        boolean $z0, $z1, z2;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: android.app.ActivityOptions;

        z2 = 0;

        if r1 == null goto label5;

        $r2 = virtualinvoke r1.<android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()>();

        if $r2 != null goto label1;

        goto label5;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z0 = $r3.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r1.<android.app.ActivityOptions: int getLaunchWindowingMode()>();

        if $i0 == 2 goto label3;

     label2:
        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z1 = $r4.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement>;

        if $z1 == 0 goto label4;

     label3:
        z2 = 1;

     label4:
        return z2;

     label5:
        return 0;
    }

    void checkReadyForSleepLocked(boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.ActivityTaskManagerService $r1, $r5, $r6;
        com.android.server.wm.RootWindowContainer $r2, $r3;
        android.os.PowerManager$WakeLock $r4, $r8;
        com.android.server.wm.WindowManagerGlobalLock $r7;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: boolean isSleepingOrShuttingDownLocked()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z2 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: boolean putStacksToSleep(boolean,boolean)>(z0, 0);

        if $z2 != 0 goto label2;

        return;

     label2:
        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void sendPowerHintForLaunchEndIfNeeded()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeSleepTimeouts()>();

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock>;

        $z3 = virtualinvoke $r4.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z3 == 0 goto label3;

        $r8 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock>;

        virtualinvoke $r8.<android.os.PowerManager$WakeLock: void release()>();

     label3:
        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z4 = $r5.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        if $z4 == 0 goto label4;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r7 = $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r7.<java.lang.Object: void notifyAll()>();

     label4:
        return;
    }

    boolean checkStartAnyActivityPermission(android.content.Intent, android.content.pm.ActivityInfo, java.lang.String, int, int, int, java.lang.String, java.lang.String, boolean, boolean, com.android.server.wm.WindowProcessController, com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, i1, i2, i3, $i5, $i8, i9;
        java.lang.String r1, r2, $r8, $r11, $r21, $r23, $r27, $r36, $r40, $r53, $r62, $r63, $r65, $r68, $r78, $r80, $r81, $r83, r88, r92;
        boolean z0, z1, $z2, $z3, z4;
        com.android.server.wm.WindowProcessController r3;
        com.android.server.wm.ActivityRecord r4;
        com.android.server.wm.ActivityStack r5;
        com.android.server.wm.ActivityTaskManagerService $r6, $r84;
        com.android.server.wm.RecentTasks $r7, $r85;
        java.lang.StringBuilder $r9, $r25, $r38, $r51, $r66;
        android.util.ArrayMap $r20, $r77;
        java.lang.Object $r22, $r79;
        android.content.pm.ApplicationInfo $r49;
        android.content.Intent r86;
        android.content.pm.ActivityInfo r87;
        java.lang.SecurityException $r95;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r86 := @parameter0: android.content.Intent;

        r87 := @parameter1: android.content.pm.ActivityInfo;

        r88 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r1 := @parameter6: java.lang.String;

        r2 := @parameter7: java.lang.String;

        z0 := @parameter8: boolean;

        z1 := @parameter9: boolean;

        r3 := @parameter10: com.android.server.wm.WindowProcessController;

        r4 := @parameter11: com.android.server.wm.ActivityRecord;

        r5 := @parameter12: com.android.server.wm.ActivityStack;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        if $r7 == null goto label01;

        $r84 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r85 = virtualinvoke $r84.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        $z3 = virtualinvoke $r85.<com.android.server.wm.RecentTasks: boolean isCallerRecents(int)>(i2);

        if $z3 == 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        $i8 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>("android.permission.START_ANY_ACTIVITY", i1, i2);

        if $i8 == 0 goto label12;

        if z4 == 0 goto label03;

        if z1 == 0 goto label03;

        goto label12;

     label03:
        i9 = specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: int getComponentRestrictionForCallingPackage(android.content.pm.ActivityInfo,java.lang.String,java.lang.String,int,int,boolean)>(r87, r1, r2, i1, i2, z0);

        $r8 = virtualinvoke r86.<android.content.Intent: java.lang.String getAction()>();

        i3 = specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: int getActionRestrictionForCallingPackage(java.lang.String,java.lang.String,java.lang.String,int,int)>($r8, r1, r2, i1, i2);

        if i9 == 1 goto label07;

        if i3 != 1 goto label04;

        goto label07;

     label04:
        if i3 != 2 goto label05;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Appop Denial: starting ");

        $r68 = virtualinvoke r86.<android.content.Intent: java.lang.String toString()>();

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (pid=");

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") requires ");

        $r77 = <com.android.server.wm.ActivityStackSupervisor: android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION>;

        $r78 = virtualinvoke r86.<android.content.Intent: java.lang.String getAction()>();

        $r79 = virtualinvoke $r77.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r78);

        $r80 = (java.lang.String) $r79;

        $r81 = staticinvoke <android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>($r80);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r83);

        return 0;

     label05:
        if i9 != 2 goto label06;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Appop Denial: starting ");

        $r53 = virtualinvoke r86.<android.content.Intent: java.lang.String toString()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (pid=");

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") requires appop ");

        $r62 = r87.<android.content.pm.ActivityInfo: java.lang.String permission>;

        $r63 = staticinvoke <android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>($r62);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r65);

        return 0;

     label06:
        return 1;

     label07:
        if r4 == null goto label08;

        virtualinvoke r4.<com.android.server.wm.ActivityRecord: void sendResult(int,java.lang.String,int,int,android.content.Intent,com.android.server.uri.NeededUriGrants)>(-1, r88, i0, 0, null, null);

     label08:
        if i3 == 1 goto label10;

        $z2 = r87.<android.content.pm.ActivityInfo: boolean exported>;

        if $z2 != 0 goto label09;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: starting ");

        $r40 = virtualinvoke r86.<android.content.Intent: java.lang.String toString()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (pid=");

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not exported from uid ");

        $r49 = r87.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r49.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        r92 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label09:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: starting ");

        $r27 = virtualinvoke r86.<android.content.Intent: java.lang.String toString()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (pid=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") requires ");

        $r36 = r87.<android.content.pm.ActivityInfo: java.lang.String permission>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        r92 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: starting ");

        $r11 = virtualinvoke r86.<android.content.Intent: java.lang.String toString()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (pid=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") with revoked permission ");

        $r20 = <com.android.server.wm.ActivityStackSupervisor: android.util.ArrayMap ACTION_TO_RUNTIME_PERMISSION>;

        $r21 = virtualinvoke r86.<android.content.Intent: java.lang.String getAction()>();

        $r22 = virtualinvoke $r20.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.lang.String) $r22;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        r92 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", r92);

        $r95 = new java.lang.SecurityException;

        specialinvoke $r95.<java.lang.SecurityException: void <init>(java.lang.String)>(r92);

        throw $r95;

     label12:
        return 1;
    }

    void cleanUpRemovedTaskLocked(com.android.server.wm.Task, boolean, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, z1, $z4, $z5, $z6;
        java.lang.String r1, $r29;
        android.util.ArrayMap r3;
        android.content.Intent $r4, $r10, r39;
        com.android.server.wm.ActivityTaskManagerService $r5, $r11, $r14, $r16, $r19, $r23;
        int $i0, $i1, $i2, $i3, $i4, i6, i7;
        com.android.server.wm.'-$$Lambda$z5j5fiv3cZuY5AODkt3H3rhKimk' $r6;
        android.app.ActivityManagerInternal $r7, $r17;
        java.lang.Integer $r8;
        com.android.server.wm.ActivityTaskManagerService$H $r12, $r20;
        com.android.internal.app.ProcessMap $r15;
        com.android.server.wm.'-$$Lambda$j9nJq2XXOKyN4f0dfDaTjqmQRvg' $r18;
        java.lang.Object $r21, $r22;
        com.android.server.wm.WindowProcessController $r24, r36;
        android.util.ArraySet $r25;
        com.android.server.wm.RecentTasks $r30;
        com.android.server.wm.Task r31;
        android.content.ComponentName r32;
        android.os.Message r34, r37;
        android.util.SparseArray r35;
        java.lang.StringBuilder r38;
        java.util.ArrayList r40;
        com.android.internal.util.function.QuadConsumer r41;
        java.util.function.BiConsumer r42;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r31 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z1 == 0 goto label01;

        $r30 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        virtualinvoke $r30.<com.android.server.wm.RecentTasks: void remove(com.android.server.wm.Task)>(r31);

     label01:
        $r4 = virtualinvoke r31.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

        r32 = virtualinvoke $r4.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r32 != null goto label02;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No component for base intent of task: ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r29 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r29);

        return;

     label02:
        $r6 = <com.android.server.wm._$$Lambda$z5j5fiv3cZuY5AODkt3H3rhKimk: com.android.server.wm.'-$$Lambda$z5j5fiv3cZuY5AODkt3H3rhKimk' INSTANCE>;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r7 = $r5.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i0 = r31.<com.android.server.wm.Task: int mUserId>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r39 = new android.content.Intent;

        $r10 = virtualinvoke r31.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

        specialinvoke r39.<android.content.Intent: void <init>(android.content.Intent)>($r10);

        r41 = (com.android.internal.util.function.QuadConsumer) $r6;

        r34 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r41, $r7, $r8, r32, r39);

        $r11 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r12 = $r11.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r34);

        if z0 != 0 goto label03;

        return;

     label03:
        r1 = virtualinvoke r32.<android.content.ComponentName: java.lang.String getPackageName()>();

        r40 = new java.util.ArrayList;

        specialinvoke r40.<java.util.ArrayList: void <init>()>();

        $r14 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r15 = $r14.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.ProcessMap mProcessNames>;

        r3 = virtualinvoke $r15.<com.android.internal.app.ProcessMap: android.util.ArrayMap getMap()>();

        i6 = 0;

     label04:
        $i1 = virtualinvoke r3.<android.util.ArrayMap: int size()>();

        if i6 >= $i1 goto label13;

        $r21 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        r35 = (android.util.SparseArray) $r21;

        i7 = 0;

     label05:
        $i2 = virtualinvoke r35.<android.util.SparseArray: int size()>();

        if i7 >= $i2 goto label12;

        $r22 = virtualinvoke r35.<android.util.SparseArray: java.lang.Object valueAt(int)>(i7);

        r36 = (com.android.server.wm.WindowProcessController) $r22;

        $i4 = r36.<com.android.server.wm.WindowProcessController: int mUserId>;

        $i3 = r31.<com.android.server.wm.Task: int mUserId>;

        if $i4 == $i3 goto label06;

        goto label11;

     label06:
        $r23 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r24 = $r23.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHomeProcess>;

        if r36 != $r24 goto label07;

        goto label11;

     label07:
        $r25 = r36.<com.android.server.wm.WindowProcessController: android.util.ArraySet mPkgList>;

        $z4 = virtualinvoke $r25.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z4 != 0 goto label08;

        goto label11;

     label08:
        $z5 = virtualinvoke r36.<com.android.server.wm.WindowProcessController: boolean shouldKillProcessForRemovedTask(com.android.server.wm.Task)>(r31);

        if $z5 != 0 goto label09;

        return;

     label09:
        $z6 = virtualinvoke r36.<com.android.server.wm.WindowProcessController: boolean hasForegroundServices()>();

        if $z6 == 0 goto label10;

        return;

     label10:
        virtualinvoke r40.<java.util.ArrayList: boolean add(java.lang.Object)>(r36);

     label11:
        i7 = i7 + 1;

        goto label05;

     label12:
        i6 = i6 + 1;

        goto label04;

     label13:
        $r18 = <com.android.server.wm._$$Lambda$j9nJq2XXOKyN4f0dfDaTjqmQRvg: com.android.server.wm.'-$$Lambda$j9nJq2XXOKyN4f0dfDaTjqmQRvg' INSTANCE>;

        $r16 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r17 = $r16.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        r42 = (java.util.function.BiConsumer) $r18;

        r37 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r42, $r17, r40);

        $r19 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r20 = $r19.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r20.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r37);

        return;
    }

    void cleanupActivity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord,long)>(r1, -1L);

        return;
    }

    void comeOutOfSleepIfNeededLocked()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeSleepTimeouts()>();

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        return;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r11, $r18, $r23, $r30, $r35;
        com.android.server.wm.RootWindowContainer $r3, $r15, $r25;
        com.android.server.wm.KeyguardController $r4;
        com.android.server.wm.ActivityTaskManagerService $r5;
        com.android.server.wm.LockTaskController $r6;
        java.lang.StringBuilder $r7, $r12, $r19, $r27, $r32;
        android.util.SparseIntArray $r9, $r16;
        int $i0, $i1, $i2, i3;
        java.util.ArrayList $r24, $r31, $r36;
        boolean $z0, $z1;
        com.android.server.wm.RecentTasks $r26;
        java.lang.Object $r37;
        com.android.server.wm.ActivityStackSupervisor$WaitInfo $r38;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ActivityStackSupervisor state:");

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, 1);

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        virtualinvoke $r4.<com.android.server.wm.KeyguardController: void dump(java.io.PrintWriter,java.lang.String)>(r1, r2);

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r6.<com.android.server.wm.LockTaskController: void dump(java.io.PrintWriter,java.lang.String)>(r1, r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurTaskIdForUser=");

        $r9 = r0.<com.android.server.wm.ActivityStackSupervisor: android.util.SparseIntArray mCurTaskIdForUser>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mUserStackInFront=");

        $r15 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r16 = $r15.<com.android.server.wm.RootWindowContainer: android.util.SparseIntArray mUserStackInFront>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mVisibilityTransactionDepth=");

        $i0 = r0.<com.android.server.wm.ActivityStackSupervisor: int mVisibilityTransactionDepth>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        $z0 = virtualinvoke $r24.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWaitingForActivityVisible=");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        i3 = 0;

     label1:
        $r31 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        $i2 = virtualinvoke $r31.<java.util.ArrayList: int size()>();

        if i3 >= $i2 goto label2;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r35);

        $r36 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        $r37 = virtualinvoke $r36.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r38 = (com.android.server.wm.ActivityStackSupervisor$WaitInfo) $r37;

        virtualinvoke $r38.<com.android.server.wm.ActivityStackSupervisor$WaitInfo: void dump(java.io.PrintWriter,java.lang.String)>(r1, r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("isHomeRecentsComponent=");

        $r26 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        $r25 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i1 = $r25.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        $z1 = virtualinvoke $r26.<com.android.server.wm.RecentTasks: boolean isRecentsComponentHomeActivity(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    void endActivityVisibilityUpdate()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, $i1;
        com.android.server.wm.KeyguardController $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $i1 = r0.<com.android.server.wm.ActivityStackSupervisor: int mVisibilityTransactionDepth>;

        i0 = $i1 - 1;

        r0.<com.android.server.wm.ActivityStackSupervisor: int mVisibilityTransactionDepth> = i0;

        if i0 != 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        virtualinvoke $r1.<com.android.server.wm.KeyguardController: void visibilitiesUpdated()>();

     label1:
        return;
    }

    void endDeferResume()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $i0 = r0.<com.android.server.wm.ActivityStackSupervisor: int mDeferResumeCount>;

        $i1 = $i0 - 1;

        r0.<com.android.server.wm.ActivityStackSupervisor: int mDeferResumeCount> = $i1;

        return;
    }

    void findTaskToMoveToFront(com.android.server.wm.Task, int, android.app.ActivityOptions, java.lang.String, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        int i0, $i1;
        boolean z0, $z2, $z3, $z4, z6;
        java.lang.String r2, $r16, r18;
        android.graphics.Rect r3;
        java.lang.StringBuilder $r4, $r12;
        com.android.server.wm.RootWindowContainer $r7, $r10;
        com.android.server.wm.TaskDisplayArea $r8, $r9, $r11;
        android.app.ActivityOptions r17;
        com.android.server.wm.ActivityStack r19, r22, r23;
        com.android.server.am.AppTimeTracker r24;
        com.android.server.wm.ActivityRecord r25;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        r17 := @parameter2: android.app.ActivityOptions;

        r18 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r19 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r19 != null goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTaskToMoveToFront: can\'t move task=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to front. Stack is null");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r16);

        return;

     label01:
        $i1 = i0 & 2;

        if $i1 != 0 goto label02;

        r0.<com.android.server.wm.ActivityStackSupervisor: boolean mUserLeaving> = 1;

     label02:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" findTaskToMoveToFront");

        r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        z6 = 0;

        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z2 == 0 goto label06;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean canUseActivityOptionsLaunchBounds(android.app.ActivityOptions)>(r17);

        if $z3 == 0 goto label06;

        r3 = virtualinvoke r17.<android.app.ActivityOptions: android.graphics.Rect getLaunchBounds()>();

        virtualinvoke r1.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r3);

        $r10 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r22 = virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getLaunchStack(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,boolean)>(null, r17, r1, 1);

        if r22 == r19 goto label03;

        $r11 = virtualinvoke r22.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void moveHomeStackToFrontIfNeeded(int,com.android.server.wm.TaskDisplayArea,java.lang.String)>(i0, $r11, r2);

        virtualinvoke r1.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,boolean,int,boolean,boolean,java.lang.String)>(r22, 1, 1, 0, 1, r2);

        r23 = r22;

        z6 = 1;

        goto label04;

     label03:
        r23 = r19;

     label04:
        $z4 = virtualinvoke r22.<com.android.server.wm.ActivityStack: boolean shouldResizeStackWithLaunchBounds()>();

        if $z4 == 0 goto label05;

        virtualinvoke r22.<com.android.server.wm.ActivityStack: void resize(android.graphics.Rect,boolean,boolean)>(r3, 0, 0);

        goto label07;

     label05:
        virtualinvoke r1.<com.android.server.wm.Task: void resize(boolean,boolean)>(0, 0);

        goto label07;

     label06:
        z6 = 0;

        r23 = r19;

     label07:
        r24 = null;

        if z6 != 0 goto label08;

        $r9 = virtualinvoke r23.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void moveHomeStackToFrontIfNeeded(int,com.android.server.wm.TaskDisplayArea,java.lang.String)>(i0, $r9, r2);

     label08:
        r25 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r25 != null goto label09;

        goto label10;

     label09:
        r24 = r25.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

     label10:
        virtualinvoke r23.<com.android.server.wm.ActivityStack: void moveTaskToFront(com.android.server.wm.Task,boolean,android.app.ActivityOptions,com.android.server.am.AppTimeTracker,java.lang.String)>(r1, 0, r17, r24, r2);

        $r7 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void handleNonResizableTaskIfNeeded(com.android.server.wm.Task,int,com.android.server.wm.TaskDisplayArea,com.android.server.wm.ActivityStack,boolean)>(r1, 0, $r8, r23, z0);

        return;
    }

    public com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityMetricsLogger $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger>;

        return $r1;
    }

    public com.android.server.wm.KeyguardController getKeyguardController()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.KeyguardController $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController mKeyguardController>;

        return $r1;
    }

    com.android.server.wm.LaunchParamsController getLaunchParamsController()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.LaunchParamsController $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsController mLaunchParamsController>;

        return $r1;
    }

    int getNextTaskIdForUser()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.RootWindowContainer $r1;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i0 = $r1.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        $i1 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: int getNextTaskIdForUser(int)>($i0);

        return $i1;
    }

    int getNextTaskIdForUser(int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, i1, $i2, i3;
        android.util.SparseIntArray $r1, $r6;
        com.android.server.wm.RecentTasks $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.Task $r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.util.SparseIntArray mCurTaskIdForUser>;

        $i2 = 100000 * i0;

        i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, $i2);

        i3 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: int nextTaskIdForUser(int,int)>(i1, i0);

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.RecentTasks: boolean containsTaskId(int,int)>(i3, i0);

        if $z0 != 0 goto label3;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i3, 1);

        if $r5 == null goto label2;

        goto label3;

     label2:
        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: android.util.SparseIntArray mCurTaskIdForUser>;

        virtualinvoke $r6.<android.util.SparseIntArray: void put(int,int)>(i0, i3);

        return i3;

     label3:
        i3 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: int nextTaskIdForUser(int,int)>(i3, i0);

        if i3 == i1 goto label4;

        goto label1;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot get an available task id. Reached limit of 100000 running tasks per user.");

        throw $r3;
    }

    com.android.server.wm.ActivityStack getReparentTargetStack(com.android.server.wm.Task, com.android.server.wm.ActivityStack, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        com.android.server.wm.ActivityStack r2, r39, r44;
        int i0, $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r3, $r12, $r18, $r26, $r33;
        java.lang.String $r9, $r16, $r24, $r32, $r38;
        com.android.server.wm.TaskDisplayArea $r10;
        com.android.server.wm.ActivityTaskManagerService $r11, $r17, $r25;
        java.lang.IllegalArgumentException $r15, $r23, $r31;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        r39 := @parameter1: com.android.server.wm.ActivityStack;

        z0 := @parameter2: boolean;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        i0 = r39.<com.android.server.wm.ActivityStack: int mTaskId>;

        z1 = virtualinvoke r39.<com.android.server.wm.ActivityStack: boolean inMultiWindowMode()>();

        if r2 == null goto label1;

        $i5 = r2.<com.android.server.wm.ActivityStack: int mTaskId>;

        if $i5 != i0 goto label1;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not reparent to same stack, task=");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already in stackId=");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r38);

        return r2;

     label1:
        if z1 == 0 goto label3;

        $r25 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z5 = $r25.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiWindow>;

        if $z5 == 0 goto label2;

        goto label3;

     label2:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device doesn\'t support multi-window, can not reparent task=");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to stack=");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r31 = new java.lang.IllegalArgumentException;

        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label3:
        $i1 = virtualinvoke r39.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        if $i1 == 0 goto label5;

        $r17 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z4 = $r17.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiDisplay>;

        if $z4 == 0 goto label4;

        goto label5;

     label4:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device doesn\'t support multi-display, can not reparent task=");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to stackId=");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label5:
        $i2 = virtualinvoke r39.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if $i2 != 5 goto label7;

        $r11 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z3 = $r11.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement>;

        if $z3 == 0 goto label6;

        goto label7;

     label6:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device doesn\'t support freeform, can not reparent task=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label7:
        r44 = r39;

        if z1 == 0 goto label9;

        r44 = r39;

        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z2 != 0 goto label9;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not move unresizeable task=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to multi-window stack=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Moving to a fullscreen stack instead.");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r9);

        if r2 == null goto label8;

        return r2;

     label8:
        $r10 = virtualinvoke r39.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $i4 = virtualinvoke r39.<com.android.server.wm.ActivityStack: int getActivityType()>();

        r44 = virtualinvoke $r10.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack createStack(int,int,boolean)>(1, $i4, z0);

     label9:
        return r44;
    }

    com.android.server.wm.RunningTasks getRunningTasks()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.RunningTasks $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RunningTasks mRunningTasks>;

        return $r1;
    }

    android.content.ComponentName getSystemChooserActivity()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.content.ComponentName $r1, $r2, $r7;
        com.android.server.wm.ActivityTaskManagerService $r3;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.content.ComponentName mSystemChooserActivity>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(17039839);

        $r7 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r6);

        r0.<com.android.server.wm.ActivityStackSupervisor: android.content.ComponentName mSystemChooserActivity> = $r7;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.content.ComponentName mSystemChooserActivity>;

        return $r2;
    }

    android.content.pm.UserInfo getUserInfo(int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0;
        long l1;
        com.android.server.wm.ActivityTaskManagerService $r1;
        android.content.Context $r2;
        android.os.UserManager $r3;
        java.lang.Throwable $r4;
        android.content.pm.UserInfo r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r2);

        r5 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r5;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void goingToSleepLocked()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.os.PowerManager$WakeLock $r1, $r2, $r3, $r4;
        boolean $z0, $z1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r5;
        com.android.server.wm.RootWindowContainer $r6;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void scheduleSleepTimeout()>();

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock>;

        $z1 = virtualinvoke $r3.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int)>(204);

     label1:
        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: void applySleepTokens(boolean)>(0);

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void checkReadyForSleepLocked(boolean)>(1);

        return;
    }

    void handleNonResizableTaskIfNeeded(com.android.server.wm.Task, int, com.android.server.wm.TaskDisplayArea, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        int i0;
        com.android.server.wm.TaskDisplayArea r2;
        com.android.server.wm.ActivityStack r3;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.server.wm.TaskDisplayArea;

        r3 := @parameter3: com.android.server.wm.ActivityStack;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void handleNonResizableTaskIfNeeded(com.android.server.wm.Task,int,com.android.server.wm.TaskDisplayArea,com.android.server.wm.ActivityStack,boolean)>(r1, i0, r2, r3, 0);

        return;
    }

    void handleNonResizableTaskIfNeeded(com.android.server.wm.Task, int, com.android.server.wm.TaskDisplayArea, com.android.server.wm.ActivityStack, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z7, z8, $z9, z10;
        com.android.server.wm.ActivityTaskManagerService $r2, $r13, $r16;
        com.android.server.wm.TaskChangeNotificationController $r3, $r14, $r17;
        com.android.server.wm.ActivityStack $r4, r21;
        com.android.server.wm.DisplayContent $r5, r22, $r23;
        int $i0, $i1, $i3, $i4, $i5, i6;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r12;
        android.app.ActivityManager$RunningTaskInfo $r15, $r18;
        com.android.server.wm.TaskDisplayArea $r19, r20, r25;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        i6 := @parameter1: int;

        r20 := @parameter2: com.android.server.wm.TaskDisplayArea;

        r21 := @parameter3: com.android.server.wm.ActivityStack;

        z0 := @parameter4: boolean;

        if r20 == null goto label01;

        $i5 = virtualinvoke r20.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        if $i5 == 0 goto label01;

        z7 = 1;

        goto label02;

     label01:
        z7 = 0;

     label02:
        if r21 == null goto label03;

        $r19 = virtualinvoke r21.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z6 = virtualinvoke $r19.<com.android.server.wm.TaskDisplayArea: boolean isSplitScreenModeActivated()>();

        if $z6 == 0 goto label03;

        z8 = 1;

        goto label04;

     label03:
        z8 = 0;

     label04:
        if z8 != 0 goto label05;

        if i6 == 3 goto label05;

        if z7 == 0 goto label06;

     label05:
        $z9 = virtualinvoke r1.<com.android.server.wm.Task: boolean isActivityTypeStandardOrUndefined()>();

        if $z9 != 0 goto label07;

     label06:
        return;

     label07:
        if z7 == 0 goto label14;

        $i0 = virtualinvoke r1.<com.android.server.wm.Task: int getDisplayId()>();

        $z4 = virtualinvoke r1.<com.android.server.wm.Task: boolean canBeLaunchedOnDisplay(int)>($i0);

        if $z4 == 0 goto label13;

        r22 = r20.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        if r22 == null goto label08;

        $z5 = virtualinvoke r22.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z5 == 0 goto label08;

        z10 = 1;

        goto label09;

     label08:
        z10 = 0;

     label09:
        $r23 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r22 == $r23 goto label11;

        if z10 == 0 goto label10;

        $r16 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r18 = virtualinvoke r1.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        $i4 = r22.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r17.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityLaunchOnSecondaryDisplayRerouted(android.app.TaskInfo,int)>($r18, $i4);

        return;

     label10:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to put ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on display ");

        $i1 = r22.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r12);

        $r13 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r15 = virtualinvoke r1.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        $i3 = r22.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r14.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityLaunchOnSecondaryDisplayFailed(android.app.TaskInfo,int)>($r15, $i3);

        goto label12;

     label11:
        if z0 != 0 goto label12;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void handleForcedResizableTaskIfNeeded(com.android.server.wm.Task,int)>(r1, 2);

     label12:
        return;

     label13:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Task resolved to incompatible display");

        throw $r6;

     label14:
        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean supportsSplitScreenWindowingMode()>();

        if $z2 == 0 goto label16;

        if z0 == 0 goto label15;

        goto label16;

     label15:
        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void handleForcedResizableTaskIfNeeded(com.android.server.wm.Task,int)>(r1, 1);

        return;

     label16:
        r25 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z3 = virtualinvoke r25.<com.android.server.wm.TaskDisplayArea: boolean isSplitScreenModeActivated()>();

        if $z3 == 0 goto label17;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r3.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityDismissingDockedStack()>();

        $r4 = (com.android.server.wm.ActivityStack) r1;

        virtualinvoke r25.<com.android.server.wm.TaskDisplayArea: void onSplitScreenModeDismissed(com.android.server.wm.ActivityStack)>($r4);

        $r5 = r25.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(null, 0, 1, 1);

     label17:
        return;
    }

    void handleTopResumedStateReleased(boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, $z1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int)>(217);

        $z1 = r0.<com.android.server.wm.ActivityStackSupervisor: boolean mTopResumedActivityWaitingForPrev>;

        if $z1 != 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityStackSupervisor: boolean mTopResumedActivityWaitingForPrev> = 0;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void scheduleTopResumedActivityStateIfNeeded()>();

        return;
    }

    boolean inActivityVisibilityUpdate()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $i0 = r0.<com.android.server.wm.ActivityStackSupervisor: int mVisibilityTransactionDepth>;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void initPowerManagement()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.os.PowerManager$WakeLock $r4, r7;
        android.os.PowerManager $r5, r6;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        r6 = (android.os.PowerManager) $r3;

        r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager mPowerManager> = r6;

        $r4 = virtualinvoke r6.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ActivityManager-Sleep");

        r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mGoingToSleepWakeLock> = $r4;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager mPowerManager>;

        r7 = virtualinvoke $r5.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*launch*");

        r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock> = r7;

        virtualinvoke r7.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        return;
    }

    public void initialize()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean $z0;
        com.android.server.wm.RunningTasks $r1;
        com.android.server.wm.ActivityMetricsLogger $r2;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r3;
        android.os.Looper $r4;
        com.android.server.wm.KeyguardController $r5;
        com.android.server.wm.ActivityTaskManagerService $r6, $r10;
        com.android.server.wm.PersisterQueue $r7;
        com.android.server.wm.LaunchParamsPersister $r8;
        com.android.server.wm.LaunchParamsController $r9;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $z0 = r0.<com.android.server.wm.ActivityStackSupervisor: boolean mInitialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityStackSupervisor: boolean mInitialized> = 1;

        $r1 = new com.android.server.wm.RunningTasks;

        specialinvoke $r1.<com.android.server.wm.RunningTasks: void <init>()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void setRunningTasks(com.android.server.wm.RunningTasks)>($r1);

        $r2 = new com.android.server.wm.ActivityMetricsLogger;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: android.os.Looper getLooper()>();

        specialinvoke $r2.<com.android.server.wm.ActivityMetricsLogger: void <init>(com.android.server.wm.ActivityStackSupervisor,android.os.Looper)>(r0, $r4);

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger> = $r2;

        $r5 = new com.android.server.wm.KeyguardController;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        specialinvoke $r5.<com.android.server.wm.KeyguardController: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.ActivityStackSupervisor)>($r6, r0);

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController mKeyguardController> = $r5;

        $r7 = new com.android.server.wm.PersisterQueue;

        specialinvoke $r7.<com.android.server.wm.PersisterQueue: void <init>()>();

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.PersisterQueue mPersisterQueue> = $r7;

        $r8 = new com.android.server.wm.LaunchParamsPersister;

        specialinvoke $r8.<com.android.server.wm.LaunchParamsPersister: void <init>(com.android.server.wm.PersisterQueue,com.android.server.wm.ActivityStackSupervisor)>($r7, r0);

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsPersister mLaunchParamsPersister> = $r8;

        $r9 = new com.android.server.wm.LaunchParamsController;

        $r10 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        specialinvoke $r9.<com.android.server.wm.LaunchParamsController: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.LaunchParamsPersister)>($r10, $r8);

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsController mLaunchParamsController> = $r9;

        virtualinvoke $r9.<com.android.server.wm.LaunchParamsController: void registerDefaultModifiers(com.android.server.wm.ActivityStackSupervisor)>(r0);

        return;
    }

    boolean isCallerAllowedToLaunchOnDisplay(int, int, int, android.content.pm.ActivityInfo)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, i1, $i3, $i4, $i6, $i7, $i8, i9, i10;
        android.content.pm.ActivityInfo r1;
        com.android.server.wm.DisplayContent r2;
        boolean z0, $z1, $z2;
        com.android.server.wm.RootWindowContainer $r3;
        android.view.Display $r4, $r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i9 := @parameter2: int;

        r1 := @parameter3: android.content.pm.ActivityInfo;

        if i0 != -1 goto label1;

        if i1 != -1 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i9);

        if r2 == null goto label9;

        $z1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isRemoved()>();

        if $z1 == 0 goto label2;

        goto label9;

     label2:
        $i3 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>("android.permission.INTERNAL_SYSTEM_WINDOW", i0, i1);

        if $i3 != 0 goto label3;

        return 1;

     label3:
        z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isUidPresent(int)>(i1);

        $r4 = r2.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        i10 = virtualinvoke $r4.<android.view.Display: int getOwnerUid()>();

        $r5 = r2.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $i4 = virtualinvoke $r5.<android.view.Display: int getType()>();

        if $i4 != 5 goto label5;

        if i10 == 1000 goto label5;

        $i6 = r1.<android.content.pm.ActivityInfo: int flags>;

        $i7 = $i6 & -2147483648;

        if $i7 != 0 goto label4;

        return 0;

     label4:
        $i8 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>("android.permission.ACTIVITY_EMBEDDING", i0, i1);

        if $i8 != -1 goto label5;

        if z0 != 0 goto label5;

        return 0;

     label5:
        $z2 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isPrivate()>();

        if $z2 != 0 goto label6;

        return 1;

     label6:
        if i10 != i1 goto label7;

        return 1;

     label7:
        if z0 == 0 goto label8;

        return 1;

     label8:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Launch on display check: denied");

        return 0;

     label9:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Launch on display check: display not found");

        return 0;
    }

    boolean isCallerAllowedToLaunchOnTaskDisplayArea(int, int, com.android.server.wm.TaskDisplayArea, android.content.pm.ActivityInfo)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, i1, i2;
        com.android.server.wm.TaskDisplayArea r1;
        android.content.pm.ActivityInfo r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.TaskDisplayArea;

        r2 := @parameter3: android.content.pm.ActivityInfo;

        if r1 == null goto label1;

        i2 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        goto label2;

     label1:
        i2 = 0;

     label2:
        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean isCallerAllowedToLaunchOnDisplay(int,int,int,android.content.pm.ActivityInfo)>(i0, i1, i2, r2);

        return $z0;
    }

    boolean isCurrentProfileLocked(int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, $i1;
        com.android.server.wm.RootWindowContainer $r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.app.ActivityManagerInternal $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i1 = $r1.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        if i0 != $i1 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $z0 = virtualinvoke $r3.<android.app.ActivityManagerInternal: boolean isCurrentProfile(int)>(i0);

        return $z0;
    }

    public void lambda$activityIdleInternal$0$ActivityStackSupervisor()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        android.app.ActivityManagerInternal $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void trimApplications()>();

        return;
    }

    public void lambda$removeStack$1$ActivityStackSupervisor(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStack r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeStackInSurfaceTransaction(com.android.server.wm.ActivityStack)>(r1);

        return;
    }

    void logStackState()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityMetricsLogger $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger>;

        virtualinvoke $r1.<com.android.server.wm.ActivityMetricsLogger: void logWindowState()>();

        return;
    }

    void moveRecentsStackToFront(java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.lang.String r1;
        com.android.server.wm.ActivityStack r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.TaskDisplayArea $r4;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r2 = virtualinvoke $r4.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStack(int,int)>(0, 3);

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>(r1);

     label1:
        return;
    }

    public void onRecentTaskAdded(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        virtualinvoke r1.<com.android.server.wm.Task: void touchActiveTime()>();

        return;
    }

    public void onRecentTaskRemoved(com.android.server.wm.Task, boolean, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        boolean z0, z1;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $i0 = r1.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean removeTaskById(int,boolean,boolean,java.lang.String)>($i0, z1, 0, "recent-task-trimmed");

     label1:
        virtualinvoke r1.<com.android.server.wm.Task: void removedFromRecents()>();

        return;
    }

    void onSystemReady()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.LaunchParamsPersister $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsPersister mLaunchParamsPersister>;

        virtualinvoke $r1.<com.android.server.wm.LaunchParamsPersister: void onSystemReady()>();

        return;
    }

    void onUserUnlocked(int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0;
        com.android.server.wm.PersisterQueue $r1;
        com.android.server.wm.LaunchParamsPersister $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.PersisterQueue mPersisterQueue>;

        virtualinvoke $r1.<com.android.server.wm.PersisterQueue: void startPersisting()>();

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsPersister mLaunchParamsPersister>;

        virtualinvoke $r2.<com.android.server.wm.LaunchParamsPersister: void onUnlockUser(int)>(i0);

        return;
    }

    boolean readyToResume()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $i0 = r0.<com.android.server.wm.ActivityStackSupervisor: int mDeferResumeCount>;

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean realStartActivityLocked(com.android.server.wm.ActivityRecord, com.android.server.wm.WindowProcessController, boolean, boolean) throws android.os.RemoteException
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.WindowProcessController r1, $r24, $r57, $r58, $r66, $r68, $r73, $r77;
        com.android.server.wm.ActivityStack r2, $r14;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z8, z9, z10, z11, z12, z13, $z14, $z15;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, i14, i15, i16, $i17, $i18, i21, i22, i23, i24, $i25;
        android.app.servertransaction.ClientTransaction r3;
        com.android.server.wm.DisplayContent r4, $r47;
        android.content.Intent r5, $r32, $r43, $r48, $r85;
        android.content.pm.ActivityInfo r6, $r18, $r37, $r78, $r80, $r104, $r119;
        android.content.res.Configuration r7, r8, $r41, $r42;
        java.lang.String r9, $r28, $r29, $r34, $r63, $r64, $r75, $r87, $r90;
        com.android.internal.app.IVoiceInteractor r10;
        android.os.PersistableBundle r11;
        android.app.ProfilerInfo r12;
        com.android.server.wm.RootWindowContainer $r13, $r56, $r82, $r120;
        android.content.pm.ApplicationInfo $r19, $r38, $r54, $r62, $r79, $r81, r105;
        com.android.server.wm.ActivityTaskManagerService $r30, $r35, $r39, $r52, $r59, $r61, $r65, $r67, $r72, $r107, $r117, $r118;
        android.content.pm.PackageManagerInternal $r31;
        android.content.ComponentName $r33, $r86;
        com.android.server.wm.AppWarnings $r36;
        android.content.res.CompatibilityInfo $r40, r113;
        android.os.Bundle $r44, r114;
        android.app.IApplicationThread $r45;
        com.android.server.wm.ActivityRecord$Token $r46;
        android.os.Binder $r49;
        android.view.DisplayAdjustments$FixedRotationAdjustments $r50;
        android.app.servertransaction.LaunchActivityItem $r51;
        com.android.server.wm.ClientLifecycleManager $r53;
        com.android.server.wm.ActivityStack$ActivityState $r55;
        com.android.server.wm.ActivityStartController $r60;
        com.android.server.wm.ActivityRecord $r76, r101;
        android.os.RemoteException $r83, $r93, $r97, $r98, $r99, $r100, r111, r121;
        java.lang.Throwable $r91, $r92, $r94, $r95, $r96, r103;
        com.android.server.wm.Task r102;
        java.lang.StringBuilder r106, r116, r122;
        long $l19, $l20;
        com.android.server.wm.LockTaskController r108;
        java.util.ArrayList r109, r110;
        android.util.MergedConfiguration r112;
        android.app.servertransaction.ActivityLifecycleItem r115;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r101 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.WindowProcessController;

        z8 := @parameter2: boolean;

        z9 := @parameter3: boolean;

        $r13 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z1 = virtualinvoke $r13.<com.android.server.wm.RootWindowContainer: boolean allPausedActivitiesComplete()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        r102 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r2 = virtualinvoke r102.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void beginDeferResume()>();

     label02:
        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void startFreezingScreenLocked(com.android.server.wm.WindowProcessController,int)>(r1, 0);

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void startLaunchTickingLocked()>();

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void setProcess(com.android.server.wm.WindowProcessController)>(r1);

     label03:
        if z8 == 0 goto label07;

     label04:
        z0 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: boolean canResumeByCompat()>();

     label05:
        if z0 != 0 goto label07;

        z8 = 0;

        goto label07;

     label06:
        $r91 := @caughtexception;

        r103 = $r91;

        goto label69;

     label07:
        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void notifyUnknownVisibilityLaunchedForKeyguardTransition()>();

     label08:
        if z9 == 0 goto label12;

     label09:
        $r82 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i11 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        virtualinvoke $r82.<com.android.server.wm.RootWindowContainer: boolean ensureVisibilityAndConfig(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r101, $i11, 0, 1);

     label10:
        goto label12;

     label11:
        $r95 := @caughtexception;

        r103 = $r95;

        goto label69;

     label12:
        $r14 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        z10 = virtualinvoke $r14.<com.android.server.wm.ActivityStack: boolean checkKeyguardVisibility(com.android.server.wm.ActivityRecord,boolean,boolean)>(r101, 1, 1);

     label13:
        if z10 == 0 goto label15;

     label14:
        $z6 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: boolean allowMoveToFront()>();

        if $z6 == 0 goto label15;

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void setVisibility(boolean)>(1);

     label15:
        $r104 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        r105 = $r104.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

     label16:
        if r105 == null goto label19;

     label17:
        $r80 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r81 = $r80.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i14 = $r81.<android.content.pm.ApplicationInfo: int uid>;

     label18:
        goto label20;

     label19:
        i14 = -1;

     label20:
        i15 = r101.<com.android.server.wm.ActivityRecord: int mUserId>;

        i0 = r1.<com.android.server.wm.WindowProcessController: int mUserId>;

     label21:
        if i15 != i0 goto label24;

     label22:
        $r78 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r79 = $r78.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i16 = $r79.<android.content.pm.ApplicationInfo: int uid>;

     label23:
        if i16 == i14 goto label25;

     label24:
        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ID for activity changing for ");

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r101);

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appInfo.uid=");

        $r18 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r19 = $r18.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r19.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info.ai.uid=");

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" old=");

        $r24 = r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new=");

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r28 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ActivityTaskManager", $r28);

     label25:
        $i17 = r101.<com.android.server.wm.ActivityRecord: int launchCount>;

        $i18 = $i17 + 1;

        r101.<com.android.server.wm.ActivityRecord: int launchCount> = $i18;

        $l19 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r101.<com.android.server.wm.ActivityRecord: long lastLaunchTime> = $l19;

        $l20 = r101.<com.android.server.wm.ActivityRecord: long lastLaunchTime>;

        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void setLastActivityLaunchTime(long)>($l20);

        $r107 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        r108 = virtualinvoke $r107.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        i21 = r102.<com.android.server.wm.Task: int mLockTaskAuth>;

     label26:
        if i21 == 2 goto label29;

     label27:
        $i9 = r102.<com.android.server.wm.Task: int mLockTaskAuth>;

        if $i9 == 4 goto label29;

        $i10 = r102.<com.android.server.wm.Task: int mLockTaskAuth>;

        if $i10 != 3 goto label30;

        i22 = virtualinvoke r108.<com.android.server.wm.LockTaskController: int getLockTaskModeState()>();

     label28:
        if i22 != 1 goto label30;

     label29:
        virtualinvoke r108.<com.android.server.wm.LockTaskController: void startLockTaskMode(com.android.server.wm.Task,boolean,int)>(r102, 0, 0);

     label30:
        z11 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: boolean hasThread()>();

     label31:
        if z11 == 0 goto label59;

        r109 = null;

        r110 = null;

        if z8 == 0 goto label35;

     label32:
        r109 = r101.<com.android.server.wm.ActivityRecord: java.util.ArrayList results>;

        r110 = r101.<com.android.server.wm.ActivityRecord: java.util.ArrayList newIntents>;

     label33:
        goto label35;

     label34:
        $r93 := @caughtexception;

        r111 = $r93;

        goto label62;

     label35:
        $i3 = r101.<com.android.server.wm.ActivityRecord: int mUserId>;

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r101);

        $i5 = r102.<com.android.server.wm.Task: int mTaskId>;

        $r29 = r101.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmRestartActivity(int,int,int,java.lang.String)>($i3, $i4, $i5, $r29);

        z12 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

     label36:
        if z12 == 0 goto label38;

     label37:
        $r76 = virtualinvoke r102.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getBottomMostActivity()>();

        $r77 = $r76.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void updateHomeProcess(com.android.server.wm.WindowProcessController)>($r77);

     label38:
        $r30 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r31 = virtualinvoke $r30.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.PackageManagerInternal getPackageManagerInternalLocked()>();

        $r32 = r101.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r33 = virtualinvoke $r32.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r34 = virtualinvoke $r33.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r31.<android.content.pm.PackageManagerInternal: void notifyPackageUse(java.lang.String,int)>($r34, 0);

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void setSleeping(boolean)>(0);

        r101.<com.android.server.wm.ActivityRecord: boolean forceNewConfig> = 0;

        $r35 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r36 = virtualinvoke $r35.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings getAppWarningsLocked()>();

        virtualinvoke $r36.<com.android.server.wm.AppWarnings: void onStartActivity(com.android.server.wm.ActivityRecord)>(r101);

        $r39 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r37 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r38 = $r37.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r40 = virtualinvoke $r39.<com.android.server.wm.ActivityTaskManagerService: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>($r38);

        r101.<com.android.server.wm.ActivityRecord: android.content.res.CompatibilityInfo compat> = $r40;

        r112 = new android.util.MergedConfiguration;

        $r41 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: android.content.res.Configuration getConfiguration()>();

        $r42 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: android.content.res.Configuration getMergedOverrideConfiguration()>();

        specialinvoke r112.<android.util.MergedConfiguration: void <init>(android.content.res.Configuration,android.content.res.Configuration)>($r41, $r42);

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void setLastReportedConfiguration(android.util.MergedConfiguration)>(r112);

        $r43 = r101.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r44 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: android.os.Bundle getSavedState()>();

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void logIfTransactionTooLarge(android.content.Intent,android.os.Bundle)>($r43, $r44);

     label39:
        $r45 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r46 = r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r3 = staticinvoke <android.app.servertransaction.ClientTransaction: android.app.servertransaction.ClientTransaction obtain(android.app.IApplicationThread,android.os.IBinder)>($r45, $r46);

        $r47 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        r4 = $r47.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        r5 = new android.content.Intent;

     label40:
        $r48 = r101.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        specialinvoke r5.<android.content.Intent: void <init>(android.content.Intent)>($r48);

        i23 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r101);

        r6 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        r7 = virtualinvoke r112.<android.util.MergedConfiguration: android.content.res.Configuration getGlobalConfiguration()>();

        r8 = virtualinvoke r112.<android.util.MergedConfiguration: android.content.res.Configuration getOverrideConfiguration()>();

        r113 = r101.<com.android.server.wm.ActivityRecord: android.content.res.CompatibilityInfo compat>;

     label41:
        r9 = r101.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

     label42:
        r10 = r102.<com.android.server.wm.Task: com.android.internal.app.IVoiceInteractor voiceInteractor>;

        i24 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: int getReportedProcState()>();

        r114 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: android.os.Bundle getSavedState()>();

        r11 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: android.os.PersistableBundle getPersistentSavedState()>();

        z13 = virtualinvoke r4.<com.android.server.wm.DisplayContent: boolean isNextTransitionForward()>();

        r12 = virtualinvoke r1.<com.android.server.wm.WindowProcessController: android.app.ProfilerInfo createProfilerInfoIfNeeded()>();

     label43:
        $r49 = r101.<com.android.server.wm.ActivityRecord: android.os.Binder assistToken>;

        $r50 = virtualinvoke r101.<com.android.server.wm.ActivityRecord: android.view.DisplayAdjustments$FixedRotationAdjustments createFixedRotationAdjustmentsIfNeeded()>();

        $r51 = staticinvoke <android.app.servertransaction.LaunchActivityItem: android.app.servertransaction.LaunchActivityItem obtain(android.content.Intent,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.lang.String,com.android.internal.app.IVoiceInteractor,int,android.os.Bundle,android.os.PersistableBundle,java.util.List,java.util.List,boolean,android.app.ProfilerInfo,android.os.IBinder,android.view.DisplayAdjustments$FixedRotationAdjustments)>(r5, i23, r6, r7, r8, r113, r9, r10, i24, r114, r11, r109, r110, z13, r12, $r49, $r50);

        virtualinvoke r3.<android.app.servertransaction.ClientTransaction: void addCallback(android.app.servertransaction.ClientTransactionItem)>($r51);

     label44:
        if z8 == 0 goto label47;

     label45:
        $z5 = virtualinvoke r4.<com.android.server.wm.DisplayContent: boolean isNextTransitionForward()>();

        r115 = staticinvoke <android.app.servertransaction.ResumeActivityItem: android.app.servertransaction.ResumeActivityItem obtain(boolean)>($z5);

     label46:
        goto label48;

     label47:
        r115 = staticinvoke <android.app.servertransaction.PauseActivityItem: android.app.servertransaction.PauseActivityItem obtain()>();

     label48:
        virtualinvoke r3.<android.app.servertransaction.ClientTransaction: void setLifecycleStateRequest(android.app.servertransaction.ActivityLifecycleItem)>(r115);

        $r52 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r53 = virtualinvoke $r52.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        virtualinvoke $r53.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>(r3);

        $r54 = r1.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $i6 = $r54.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i7 = $i6 & 2;

        if $i7 == 0 goto label50;

        $r61 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $z3 = $r61.<com.android.server.wm.ActivityTaskManagerService: boolean mHasHeavyWeightFeature>;

        if $z3 == 0 goto label50;

        $r64 = r1.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        $r62 = r1.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $r63 = $r62.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z4 = virtualinvoke $r64.<java.lang.String: boolean equals(java.lang.Object)>($r63);

        if $z4 == 0 goto label50;

        $r65 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r66 = $r65.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess>;

        if $r66 == null goto label49;

        $r67 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r68 = $r67.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess>;

        if $r68 == r1 goto label49;

        r116 = new java.lang.StringBuilder;

        specialinvoke r116.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting new heavy weight process ");

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when already running ");

        $r72 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r73 = $r72.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess>;

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r73);

        $r75 = virtualinvoke r116.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r75);

     label49:
        $r117 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r117.<com.android.server.wm.ActivityTaskManagerService: void setHeavyWeightProcess(com.android.server.wm.ActivityRecord)>(r101);

     label50:
        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void endDeferResume()>();

        r101.<com.android.server.wm.ActivityRecord: boolean launchFailed> = 0;

        if z8 == 0 goto label51;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean readyToResume()>();

        if $z2 == 0 goto label51;

        virtualinvoke r2.<com.android.server.wm.ActivityStack: void minimalResumeActivityLocked(com.android.server.wm.ActivityRecord)>(r101);

        goto label52;

     label51:
        $r55 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: void setState(com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>($r55, "realStartActivityLocked");

        $r56 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r56.<com.android.server.wm.RootWindowContainer: void executeAppTransitionForAllDisplay()>();

     label52:
        $r118 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $i25 = $r118.<com.android.server.wm.ActivityTaskManagerService: int mTopProcessState>;

        $r119 = r101.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void onStartActivity(int,android.content.pm.ActivityInfo)>($i25, $r119);

        $r120 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z14 = virtualinvoke $r120.<com.android.server.wm.RootWindowContainer: boolean isTopDisplayFocusedStack(com.android.server.wm.ActivityStack)>(r2);

        if $z14 == 0 goto label53;

        $r59 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r60 = virtualinvoke $r59.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        virtualinvoke $r60.<com.android.server.wm.ActivityStartController: void startSetupActivity()>();

     label53:
        $r57 = r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r57 == null goto label54;

        $r58 = r101.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r58.<com.android.server.wm.WindowProcessController: void updateServiceConnectionActivities()>();

     label54:
        return 1;

     label55:
        $r83 := @caughtexception;

        r111 = $r83;

        goto label57;

     label56:
        $r97 := @caughtexception;

        r111 = $r97;

     label57:
        goto label62;

     label58:
        $r99 := @caughtexception;

        r111 = $r99;

        goto label62;

     label59:
        r121 = new android.os.RemoteException;

        specialinvoke r121.<android.os.RemoteException: void <init>()>();

        throw r121;

     label60:
        $r98 := @caughtexception;

        r111 = $r98;

        goto label62;

     label61:
        $r100 := @caughtexception;

        r111 = $r100;

     label62:
        $z15 = r101.<com.android.server.wm.ActivityRecord: boolean launchFailed>;

        if $z15 == 0 goto label64;

        r122 = new java.lang.StringBuilder;

        specialinvoke r122.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Second failure launching ");

        $r85 = r101.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r86 = virtualinvoke $r85.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r87 = virtualinvoke $r86.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", giving up");

        $r90 = virtualinvoke r122.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r90, r111);

        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void appDied(java.lang.String)>("2nd-crash");

        virtualinvoke r101.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("2nd-crash", 0);

     label63:
        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void endDeferResume()>();

        return 0;

     label64:
        r101.<com.android.server.wm.ActivityRecord: boolean launchFailed> = 1;

        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void removeActivity(com.android.server.wm.ActivityRecord)>(r101);

     label65:
        throw r111;

     label66:
        $r96 := @caughtexception;

        r103 = $r96;

        goto label69;

     label67:
        $r92 := @caughtexception;

        r103 = $r92;

        goto label69;

     label68:
        $r94 := @caughtexception;

        r103 = $r94;

     label69:
        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void endDeferResume()>();

        throw r103;

        catch java.lang.Throwable from label02 to label03 with label68;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label67;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label67;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.lang.Throwable from label15 to label16 with label67;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.Throwable from label20 to label21 with label67;
        catch java.lang.Throwable from label22 to label23 with label11;
        catch java.lang.Throwable from label24 to label25 with label67;
        catch java.lang.Throwable from label25 to label26 with label67;
        catch java.lang.Throwable from label27 to label28 with label11;
        catch java.lang.Throwable from label29 to label30 with label67;
        catch android.os.RemoteException from label30 to label31 with label61;
        catch java.lang.Throwable from label30 to label31 with label67;
        catch android.os.RemoteException from label32 to label33 with label34;
        catch java.lang.Throwable from label32 to label33 with label11;
        catch android.os.RemoteException from label35 to label36 with label61;
        catch java.lang.Throwable from label35 to label36 with label67;
        catch android.os.RemoteException from label37 to label38 with label34;
        catch java.lang.Throwable from label37 to label38 with label11;
        catch android.os.RemoteException from label38 to label39 with label61;
        catch java.lang.Throwable from label38 to label39 with label67;
        catch android.os.RemoteException from label39 to label40 with label61;
        catch java.lang.Throwable from label39 to label40 with label67;
        catch android.os.RemoteException from label40 to label41 with label58;
        catch java.lang.Throwable from label40 to label41 with label67;
        catch android.os.RemoteException from label41 to label42 with label56;
        catch java.lang.Throwable from label41 to label42 with label67;
        catch android.os.RemoteException from label42 to label43 with label55;
        catch java.lang.Throwable from label42 to label43 with label67;
        catch android.os.RemoteException from label43 to label44 with label60;
        catch java.lang.Throwable from label43 to label44 with label66;
        catch android.os.RemoteException from label45 to label46 with label60;
        catch java.lang.Throwable from label45 to label46 with label66;
        catch android.os.RemoteException from label47 to label48 with label60;
        catch java.lang.Throwable from label47 to label48 with label66;
        catch android.os.RemoteException from label48 to label49 with label60;
        catch java.lang.Throwable from label48 to label49 with label66;
        catch android.os.RemoteException from label49 to label50 with label60;
        catch java.lang.Throwable from label49 to label50 with label66;
        catch android.os.RemoteException from label59 to label60 with label60;
        catch java.lang.Throwable from label59 to label60 with label66;
        catch java.lang.Throwable from label62 to label63 with label66;
        catch java.lang.Throwable from label64 to label65 with label66;
        catch java.lang.Throwable from label65 to label66 with label66;
    }

    void removeHistoryRecords(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.WindowProcessController r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeHistoryRecords(java.util.ArrayList,com.android.server.wm.WindowProcessController,java.lang.String)>($r2, r1, "mStoppingActivities");

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeHistoryRecords(java.util.ArrayList,com.android.server.wm.WindowProcessController,java.lang.String)>($r3, r1, "mFinishingActivities");

        return;
    }

    void removeIdleTimeoutForActivity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int,java.lang.Object)>(200, r1);

        return;
    }

    void removeRestartTimeouts(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int,java.lang.Object)>(213, r1);

        return;
    }

    void removeSleepTimeouts()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int)>(203);

        return;
    }

    void removeStack(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm._$$Lambda$ActivityStackSupervisor$UyRHhEK51F9dKhfp0wUGjTncdyo $r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.WindowManagerService mWindowManager>;

        $r2 = new com.android.server.wm._$$Lambda$ActivityStackSupervisor$UyRHhEK51F9dKhfp0wUGjTncdyo;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$ActivityStackSupervisor$UyRHhEK51F9dKhfp0wUGjTncdyo: void <init>(com.android.server.wm.ActivityStackSupervisor,com.android.server.wm.ActivityStack)>(r0, r1);

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void inSurfaceTransaction(java.lang.Runnable)>($r2);

        return;
    }

    void removeTask(com.android.server.wm.Task, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.ActivityTaskManagerService $r2, $r4, $r6;
        com.android.server.wm.LockTaskController $r3;
        com.android.server.wm.TaskChangeNotificationController $r5;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r8 := @parameter3: java.lang.String;

        $z2 = r1.<com.android.server.wm.Task: boolean mInRemoveTask>;

        if $z2 == 0 goto label1;

        return;

     label1:
        r1.<com.android.server.wm.Task: boolean mInRemoveTask> = 1;

     label2:
        virtualinvoke r1.<com.android.server.wm.Task: void performClearTask(java.lang.String)>(r8);

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void cleanUpRemovedTaskLocked(com.android.server.wm.Task,boolean,boolean)>(r1, z0, z1);

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r3.<com.android.server.wm.LockTaskController: void clearLockedTask(com.android.server.wm.Task)>(r1);

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r5.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskStackChanged()>();

        $z3 = r1.<com.android.server.wm.Task: boolean isPersistable>;

        if $z3 == 0 goto label3;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: void notifyTaskPersisterLocked(com.android.server.wm.Task,boolean)>(null, 1);

     label3:
        r1.<com.android.server.wm.Task: boolean mInRemoveTask> = 0;

        return;

     label4:
        $r7 := @caughtexception;

        r1.<com.android.server.wm.Task: boolean mInRemoveTask> = 0;

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    boolean removeTaskById(int, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0;
        boolean z0, z1;
        com.android.server.wm.Task r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r7 := @parameter3: java.lang.String;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 1);

        if r1 == null goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeTask(com.android.server.wm.Task,boolean,boolean,java.lang.String)>(r1, z0, z1, r7);

        return 1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request to remove task ignored for non-existent task ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

        return 0;
    }

    void reportActivityLaunchedLocked(boolean, com.android.server.wm.ActivityRecord, long, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, z1;
        com.android.server.wm.ActivityRecord r1;
        long l0;
        int i1, $i2, i3;
        android.app.WaitResult r2;
        java.util.ArrayList $r3, $r6;
        com.android.server.wm.ActivityTaskManagerService $r4;
        com.android.server.wm.WindowManagerGlobalLock $r5;
        java.lang.Object $r7;
        android.content.ComponentName $r8, $r9;
        android.content.pm.ActivityInfo $r10, $r11;
        java.lang.String $r12, $r13;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        z1 = 0;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label4;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        r2 = (android.app.WaitResult) $r7;

        $r8 = r2.<android.app.WaitResult: android.content.ComponentName who>;

        if $r8 != null goto label3;

        z1 = 1;

        r2.<android.app.WaitResult: boolean timeout> = z0;

        if r1 == null goto label2;

        $r9 = new android.content.ComponentName;

        $r10 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r13 = $r10.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r11 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r12 = $r11.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r9.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r13, $r12);

        r2.<android.app.WaitResult: android.content.ComponentName who> = $r9;

     label2:
        r2.<android.app.WaitResult: long totalTime> = l0;

        r2.<android.app.WaitResult: int launchState> = i1;

     label3:
        i3 = i3 + -1;

        goto label1;

     label4:
        if z1 == 0 goto label5;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r5 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

     label5:
        return;
    }

    boolean reportResumedActivityLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        java.util.ArrayList $r2;
        com.android.server.wm.ActivityStack $r3;
        com.android.server.wm.TaskDisplayArea $r4;
        boolean $z1;
        com.android.server.wm.RootWindowContainer $r5, $r6;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $z1 = virtualinvoke $r4.<com.android.server.wm.TaskDisplayArea: boolean allResumedActivitiesComplete()>();

        if $z1 == 0 goto label1;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: void executeAppTransitionForAllDisplay()>();

        return 1;

     label1:
        return 0;
    }

    void reportWaitingActivityLaunchedIfNeeded(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        int i0, $i1, i2;
        android.app.WaitResult r2;
        java.util.ArrayList $r3, $r4, $r7;
        boolean $z1, z2;
        com.android.server.wm.ActivityTaskManagerService $r5;
        com.android.server.wm.WindowManagerGlobalLock $r6;
        java.lang.Object $r8;
        android.content.ComponentName $r9, $r10;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        if i0 == 3 goto label2;

        if i0 == 2 goto label2;

        return;

     label2:
        z2 = 0;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label3:
        if i2 < 0 goto label5;

        $r7 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingActivityLaunched>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(i2);

        r2 = (android.app.WaitResult) $r8;

        $r9 = r2.<android.app.WaitResult: android.content.ComponentName who>;

        if $r9 != null goto label4;

        r2.<android.app.WaitResult: int result> = i0;

        z2 = 1;

        if i0 != 3 goto label4;

        $r10 = r1.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        r2.<android.app.WaitResult: android.content.ComponentName who> = $r10;

        z2 = 1;

     label4:
        i2 = i2 + -1;

        goto label3;

     label5:
        if z2 == 0 goto label6;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

     label6:
        return;
    }

    android.content.pm.ActivityInfo resolveActivity(android.content.Intent, android.content.pm.ResolveInfo, int, android.app.ProfilerInfo)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r1, $r14, $r18;
        android.content.pm.ApplicationInfo $r3;
        java.lang.String $r4, $r5, $r7, r28, $r29;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r8, $r9, $r13, $r15, $r17;
        com.android.server.wm.'-$$Lambda$8ew6SY_v_7ex9pwFGDswbkGWuXc' $r10;
        android.app.ActivityManagerInternal $r11;
        java.lang.Integer $r12;
        com.android.server.wm.ActivityTaskManagerService$H $r16;
        java.lang.Throwable $r19, $r20;
        android.content.Intent r21;
        android.content.pm.ResolveInfo r22;
        android.app.ProfilerInfo r23;
        android.content.pm.ActivityInfo r24;
        android.os.Message r25;
        android.content.ComponentName r30;
        com.android.internal.util.function.QuintConsumer r31;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r21 := @parameter0: android.content.Intent;

        r22 := @parameter1: android.content.pm.ResolveInfo;

        i0 := @parameter2: int;

        r23 := @parameter3: android.app.ProfilerInfo;

        if r22 == null goto label01;

        r24 = r22.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        goto label02;

     label01:
        r24 = null;

     label02:
        if r24 == null goto label14;

        r30 = new android.content.ComponentName;

        $r3 = r24.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = $r3.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r4 = r24.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke r30.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r5, $r4);

        virtualinvoke r21.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r30);

        $r7 = r24.<android.content.pm.ActivityInfo: java.lang.String processName>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("system");

        if $z0 != 0 goto label13;

        $i1 = i0 & 14;

        if $i1 != 0 goto label03;

        if r23 == null goto label13;

     label03:
        $r8 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r8.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r10 = <com.android.server.wm._$$Lambda$8ew6SY_v_7ex9pwFGDswbkGWuXc: com.android.server.wm.'-$$Lambda$8ew6SY_v_7ex9pwFGDswbkGWuXc' INSTANCE>;

        $r9 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r11 = $r9.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r14 = $r13.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        r31 = (com.android.internal.util.function.QuintConsumer) $r10;

        r25 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuintConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r31, $r11, r24, $r12, r23, $r14);

        $r15 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r16 = $r15.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r16.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r25);

     label05:
        $r17 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r18 = $r17.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r18.<java.lang.Object: void wait()>();

     label06:
        goto label08;

     label07:
        $r20 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        goto label13;

     label10:
        $r19 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r19;

     label13:
        r28 = virtualinvoke r21.<android.content.Intent: java.lang.String getLaunchToken()>();

        $r29 = r24.<android.content.pm.ActivityInfo: java.lang.String launchToken>;

        if $r29 != null goto label14;

        if r28 == null goto label14;

        r24.<android.content.pm.ActivityInfo: java.lang.String launchToken> = r28;

     label14:
        return r24;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    android.content.pm.ActivityInfo resolveActivity(android.content.Intent, java.lang.String, int, android.app.ProfilerInfo, int, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, i2;
        android.app.ProfilerInfo r3;
        android.content.pm.ResolveInfo $r4;
        android.content.pm.ActivityInfo $r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.app.ProfilerInfo;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int,int)>(r1, r2, i1, 0, i2);

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,android.content.pm.ResolveInfo,int,android.app.ProfilerInfo)>(r1, $r4, i0, r3);

        return $r5;
    }

    android.content.pm.ResolveInfo resolveIntent(android.content.Intent, java.lang.String, int, int, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.lang.String r1;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, i9, i10, $i12, $i13;
        long l3;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.content.pm.PackageManagerInternal $r3;
        java.lang.Throwable $r4, $r5, $r6, r10;
        android.content.Intent r7;
        byte b11;
        android.content.pm.ResolveInfo r8;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r7 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i9 := @parameter3: int;

        i1 := @parameter4: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "resolveIntent");

     label02:
        $i4 = i9 | 65536;

        i10 = $i4 | 1024;

     label03:
        $z0 = virtualinvoke r7.<android.content.Intent: boolean isWebIntent()>();

        if $z0 != 0 goto label06;

        $i7 = virtualinvoke r7.<android.content.Intent: int getFlags()>();

        $i8 = $i7 & 2048;

        if $i8 == 0 goto label05;

     label04:
        goto label06;

     label05:
        goto label07;

     label06:
        i10 = i10 | 8388608;

     label07:
        b11 = 0;

     label08:
        $z1 = virtualinvoke r7.<android.content.Intent: boolean isWebIntent()>();

        if $z1 == 0 goto label12;

     label09:
        b11 = 0;

     label10:
        $i5 = virtualinvoke r7.<android.content.Intent: int getFlags()>();

        $i6 = $i5 & 1024;

        if $i6 == 0 goto label12;

     label11:
        b11 = 0 | 1;

     label12:
        $i12 = virtualinvoke r7.<android.content.Intent: int getFlags()>();

        $i13 = $i12 & 512;

        if $i13 == 0 goto label14;

     label13:
        b11 = b11 | 2;

        goto label14;

     label14:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label15:
        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.PackageManagerInternal getPackageManagerInternalLocked()>();

        r8 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int,int,boolean,int)>(r7, r1, i10, b11, i0, 1, i1);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return r8;

     label18:
        $r6 := @caughtexception;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label20:
        throw $r6;

     label21:
        $r4 := @caughtexception;

        r10 = $r4;

        goto label23;

     label22:
        $r5 := @caughtexception;

        r10 = $r5;

     label23:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw r10;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
    }

    boolean restoreRecentTaskLocked(com.android.server.wm.Task, android.app.ActivityOptions, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        boolean z0;
        com.android.server.wm.WindowContainer r2;
        com.android.server.wm.RootWindowContainer $r3;
        android.app.ActivityOptions r4;
        com.android.server.wm.ActivityStack r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        r4 := @parameter1: android.app.ActivityOptions;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r5 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getLaunchStack(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,boolean)>(null, r4, r1, z0);

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if r2 == r5 goto label3;

        if r1 != r5 goto label1;

        goto label3;

     label1:
        if r2 == null goto label2;

        virtualinvoke r1.<com.android.server.wm.Task: void reparent(com.android.server.wm.ActivityStack,int,boolean,java.lang.String)>(r5, 2147483647, 1, "restoreRecentTaskLocked");

        return 1;

     label2:
        virtualinvoke r5.<com.android.server.wm.ActivityStack: void addChild(com.android.server.wm.WindowContainer,boolean,boolean)>(r1, z0, 1);

        return 1;

     label3:
        return 1;
    }

    final void scheduleIdle()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessage(int)>(201);

        return;
    }

    void scheduleIdleTimeout(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1, $r2;
        com.android.server.wm.ActivityRecord r3;
        android.os.Message r4;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r3 := @parameter0: com.android.server.wm.ActivityRecord;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        r4 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: android.os.Message obtainMessage(int,java.lang.Object)>(200, r3);

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendMessageDelayed(android.os.Message,long)>(r4, 10000L);

        return;
    }

    void scheduleLaunchTaskBehindComplete(android.os.IBinder)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: android.os.Message obtainMessage(int,java.lang.Object)>(212, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void scheduleProcessStoppingAndFinishingActivities()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean hasMessages(int)>(205);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessage(int)>(205);

     label1:
        return;
    }

    final void scheduleRestartTimeout(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeRestartTimeouts(com.android.server.wm.ActivityRecord)>(r1);

        r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $r3 = virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: android.os.Message obtainMessage(int,java.lang.Object)>(213, r1);

        virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendMessageDelayed(android.os.Message,long)>($r3, 2000L);

        return;
    }

    final void scheduleResumeTopActivities()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean hasMessages(int)>(202);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessage(int)>(202);

     label1:
        return;
    }

    final void scheduleSleepTimeout()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void removeSleepTimeouts()>();

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessageDelayed(int,long)>(203, 5000L);

        return;
    }

    void scheduleUpdateMultiWindowMode(com.android.server.wm.Task)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        com.android.internal.util.function.pooled.PooledConsumer r2;
        com.android.server.wm.'-$$Lambda$ActivityStackSupervisor$BFgD0ahFSDg4CqQNytqWrPRgFII' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r5, $r6;
        boolean $z0;
        java.util.function.BiConsumer r7;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        $r3 = <com.android.server.wm._$$Lambda$ActivityStackSupervisor$BFgD0ahFSDg4CqQNytqWrPRgFII: com.android.server.wm.'-$$Lambda$ActivityStackSupervisor$BFgD0ahFSDg4CqQNytqWrPRgFII' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r7 = (java.util.function.BiConsumer) $r3;

        r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r7, r0, $r4);

        virtualinvoke r1.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r2);

        interfaceinvoke r2.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $z0 = virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean hasMessages(int)>(214);

        if $z0 != 0 goto label1;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessage(int)>(214);

     label1:
        return;
    }

    void scheduleUpdatePictureInPictureModeIfNeeded(com.android.server.wm.Task, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityStack r2, r3;
        boolean $z0, $z1;
        android.graphics.Rect $r4;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 := @parameter1: com.android.server.wm.ActivityStack;

        r3 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r2 == null goto label2;

        if r2 == r3 goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void scheduleUpdatePictureInPictureModeIfNeeded(com.android.server.wm.Task,android.graphics.Rect)>(r1, $r4);

        return;

     label2:
        return;
    }

    void setLaunchSource(int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0;
        android.os.WorkSource $r1;
        android.os.PowerManager$WakeLock $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager$WakeLock mLaunchingActivityWakeLock>;

        $r1 = new android.os.WorkSource;

        specialinvoke $r1.<android.os.WorkSource: void <init>(int)>(i0);

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r1);

        return;
    }

    void setNextTaskIdForUser(int, int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, i1, $i2;
        android.util.SparseIntArray $r1, $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: android.util.SparseIntArray mCurTaskIdForUser>;

        $i2 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i1, -1);

        if i0 <= $i2 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.util.SparseIntArray mCurTaskIdForUser>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i1, i0);

     label1:
        return;
    }

    void setRecentTasks(com.android.server.wm.RecentTasks)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.RecentTasks r1, r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.RecentTasks;

        r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.RecentTasks: void unregisterCallback(com.android.server.wm.RecentTasks$Callbacks)>(r0);

     label1:
        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks> = r1;

        virtualinvoke r1.<com.android.server.wm.RecentTasks: void registerCallback(com.android.server.wm.RecentTasks$Callbacks)>(r0);

        return;
    }

    void setRunningTasks(com.android.server.wm.RunningTasks)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.RunningTasks r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.RunningTasks;

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RunningTasks mRunningTasks> = r1;

        return;
    }

    void setSplitScreenResizing(boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.ActivityStackSupervisor: boolean mDockedStackResizing>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.ActivityStackSupervisor: boolean mDockedStackResizing> = z0;

        $r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.WindowManagerService mWindowManager>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void setDockedStackResizing(boolean)>(z0);

        return;
    }

    void setWindowManager(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.KeyguardController $r2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.WindowManagerService mWindowManager> = r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        virtualinvoke $r2.<com.android.server.wm.KeyguardController: void setWindowManager(com.android.server.wm.WindowManagerService)>(r1);

        return;
    }

    boolean shutdownLocked(int)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0;
        long l1, l2, l3, $l4, $l5;
        com.android.server.wm.RootWindowContainer $r2;
        boolean $z1, z2;
        byte $b6;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.WindowManagerGlobalLock $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void goingToSleepLocked()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = (long) i0;

     label1:
        z2 = 0;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: boolean putStacksToSleep(boolean,boolean)>(1, 1);

        if $z1 != 0 goto label7;

        $l4 = l1 + l2;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l3 = $l4 - $l5;

        $b6 = l3 cmp 0L;

        if $b6 <= 0 goto label6;

     label2:
        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r4.<java.lang.Object: void wait(long)>(l3);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        goto label1;

     label6:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Activity manager shutdown timed out");

        z2 = 1;

     label7:
        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void checkReadyForSleepLocked(boolean)>(0);

        return z2;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    int startActivityFromRecents(int, int, int, com.android.server.wm.SafeActivityOptions)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9;
        com.android.server.wm.Task r1;
        boolean z0, $z1, $z2;
        android.content.Intent r2, $r23;
        java.lang.StringBuilder $r3, r53;
        java.lang.IllegalArgumentException $r7, r52;
        java.lang.String $r8, $r15, r49, r50;
        com.android.server.wm.ActivityTaskManagerService $r9, $r16, $r19, $r20, $r26, $r30, r47, $r54;
        com.android.server.wm.RootWindowContainer $r10, $r22, $r31;
        com.android.server.wm.WindowManagerService $r11;
        android.app.ActivityManagerInternal $r17;
        com.android.server.wm.ActivityRecord $r21, $r28, r45;
        com.android.server.wm.ActivityMetricsLogger $r24, $r25, $r40;
        com.android.server.wm.ActivityStartController $r27, r51;
        com.android.server.wm.ActivityStack $r29;
        com.android.server.wm.TaskDisplayArea $r32;
        com.android.server.wm.RecentTasks $r33, $r34;
        java.lang.Throwable $r35, $r36, $r37, $r38, $r39, $r41, r44, r48;
        com.android.server.wm.SafeActivityOptions r42;
        android.app.ActivityOptions r43;
        com.android.server.wm.ActivityMetricsLogger$LaunchingState r46;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        r42 := @parameter3: com.android.server.wm.SafeActivityOptions;

        if r42 == null goto label01;

        r43 = virtualinvoke r42.<com.android.server.wm.SafeActivityOptions: android.app.ActivityOptions getOptions(com.android.server.wm.ActivityStackSupervisor)>(r0);

        goto label02;

     label01:
        r43 = null;

     label02:
        if r43 == null goto label04;

        i4 = virtualinvoke r43.<android.app.ActivityOptions: int getLaunchActivityType()>();

        i5 = virtualinvoke r43.<android.app.ActivityOptions: int getLaunchWindowingMode()>();

        $z1 = virtualinvoke r43.<android.app.ActivityOptions: boolean freezeRecentTasksReordering()>();

        if $z1 == 0 goto label03;

        $r33 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        $z2 = virtualinvoke $r33.<com.android.server.wm.RecentTasks: boolean isCallerRecents(int)>(i0);

        if $z2 == 0 goto label03;

        $r34 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        virtualinvoke $r34.<com.android.server.wm.RecentTasks: void setFreezeTaskListReordering()>();

        goto label03;

     label03:
        goto label05;

     label04:
        i4 = 0;

        i5 = 0;

     label05:
        if i4 == 2 goto label31;

        if i4 == 3 goto label31;

        $r9 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label06:
        $r10 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int,android.app.ActivityOptions,boolean)>(i3, 2, r43, 1);

     label07:
        if r1 == null goto label27;

        if i5 == 3 goto label11;

     label08:
        $r31 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r32 = virtualinvoke $r31.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke $r32.<com.android.server.wm.TaskDisplayArea: void moveHomeStackToFront(java.lang.String)>("startActivityFromRecents");

     label09:
        goto label11;

     label10:
        $r37 := @caughtexception;

        r44 = $r37;

        goto label30;

     label11:
        $r16 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r17 = $r16.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i1 = r1.<com.android.server.wm.Task: int mUserId>;

        z0 = virtualinvoke $r17.<android.app.ActivityManagerInternal: boolean shouldConfirmCredentials(int)>($i1);

     label12:
        if z0 != 0 goto label23;

     label13:
        $r21 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

        if $r21 == null goto label23;

        r45 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        $r22 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r22.<com.android.server.wm.RootWindowContainer: void sendPowerHintForLaunchStartIfNeeded(boolean,com.android.server.wm.ActivityRecord)>(1, r45);

        $r24 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger>;

        $r23 = r1.<com.android.server.wm.Task: android.content.Intent intent>;

        r46 = virtualinvoke $r24.<com.android.server.wm.ActivityMetricsLogger: com.android.server.wm.ActivityMetricsLogger$LaunchingState notifyActivityLaunching(android.content.Intent)>($r23);

     label14:
        r47 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        i6 = r1.<com.android.server.wm.Task: int mTaskId>;

     label15:
        virtualinvoke r47.<com.android.server.wm.ActivityTaskManagerService: void moveTaskToFrontLocked(android.app.IApplicationThread,java.lang.String,int,int,com.android.server.wm.SafeActivityOptions)>(null, null, i6, 0, r42);

        virtualinvoke r45.<com.android.server.wm.ActivityRecord: void applyOptionsLocked()>();

     label16:
        $r25 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger>;

        virtualinvoke $r25.<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>(r46, 2, r45);

     label17:
        $r26 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r27 = virtualinvoke $r26.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r28 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        $r29 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r27.<com.android.server.wm.ActivityStartController: void postStartActivityProcessingForLastStarter(com.android.server.wm.ActivityRecord,int,com.android.server.wm.ActivityStack)>($r28, 2, $r29);

     label18:
        $r30 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r30.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return 2;

     label19:
        $r41 := @caughtexception;

        r48 = $r41;

        goto label21;

     label20:
        $r39 := @caughtexception;

        r48 = $r39;

     label21:
        $r40 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger mActivityMetricsLogger>;

        virtualinvoke $r40.<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>(r46, 2, r45);

     label22:
        throw r48;

     label23:
        r49 = r1.<com.android.server.wm.Task: java.lang.String mCallingPackage>;

        r50 = r1.<com.android.server.wm.Task: java.lang.String mCallingFeatureId>;

        r2 = r1.<com.android.server.wm.Task: android.content.Intent intent>;

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(1048576);

        i7 = r1.<com.android.server.wm.Task: int mUserId>;

        $r19 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        r51 = virtualinvoke $r19.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        i8 = r1.<com.android.server.wm.Task: int mCallingUid>;

     label24:
        i9 = virtualinvoke r51.<com.android.server.wm.ActivityStartController: int startActivityInPackage(int,int,int,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,com.android.server.wm.SafeActivityOptions,int,com.android.server.wm.Task,java.lang.String,boolean,com.android.server.am.PendingIntentRecord,boolean)>(i8, i2, i0, r49, r50, r2, null, null, null, 0, 0, r42, i7, r1, "startActivityFromRecents", 0, null, 0);

     label25:
        $r20 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r20.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return i9;

     label26:
        $r35 := @caughtexception;

        r44 = $r35;

        goto label30;

     label27:
        $r11 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.WindowManagerService mWindowManager>;

        virtualinvoke $r11.<com.android.server.wm.WindowManagerService: void executeAppTransition()>();

        r52 = new java.lang.IllegalArgumentException;

        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startActivityFromRecents: Task ");

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r15 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r52.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r52;

     label28:
        $r38 := @caughtexception;

        r44 = $r38;

        goto label30;

     label29:
        $r36 := @caughtexception;

        r44 = $r36;

     label30:
        $r54 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r54.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw r44;

     label31:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startActivityFromRecents: Task ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can\'t be launch in the home/recents stack.");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label17 to label18 with label10;
        catch java.lang.Throwable from label21 to label22 with label10;
        catch java.lang.Throwable from label22 to label23 with label10;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label27 to label28 with label28;
    }

    void startSpecificActivity(com.android.server.wm.ActivityRecord, boolean, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        boolean z0, $z2, $z3, z5, z6, z7;
        android.content.pm.ActivityInfo $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0;
        java.lang.String $r4, $r11, $r13, r18;
        com.android.server.wm.ActivityTaskManagerService $r5, r17;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7;
        android.content.Intent $r9;
        android.content.ComponentName $r10;
        com.android.server.wm.WindowProcessController r14;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z5 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = r1.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        $r2 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r3 = $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        r14 = virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(java.lang.String,int)>($r4, $i0);

        z6 = 0;

        if r14 == null goto label4;

        z6 = 0;

        $z3 = virtualinvoke r14.<com.android.server.wm.WindowProcessController: boolean hasThread()>();

        if $z3 == 0 goto label4;

     label1:
        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: boolean realStartActivityLocked(com.android.server.wm.ActivityRecord,com.android.server.wm.WindowProcessController,boolean,boolean)>(r1, r14, z5, z0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception when starting activity ");

        $r9 = r1.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r10 = virtualinvoke $r9.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r11 = virtualinvoke $r10.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r13, $r6);

        z6 = 1;

     label4:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void notifyUnknownVisibilityLaunchedForKeyguardTransition()>();

        if z5 == 0 goto label5;

        $z2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isTopRunningActivity()>();

        if $z2 == 0 goto label5;

        z7 = 1;

        goto label6;

     label5:
        z7 = 0;

     label6:
        r17 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        if z7 == 0 goto label7;

        r18 = "top-activity";

        goto label8;

     label7:
        r18 = "activity";

     label8:
        virtualinvoke r17.<com.android.server.wm.ActivityTaskManagerService: void startProcessAsync(com.android.server.wm.ActivityRecord,boolean,boolean,java.lang.String)>(r1, z6, z7, r18);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityMetricsLogger $r2;
        int $i0;
        long $l1;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityMetricsLogger getActivityMetricsLogger()>();

        $i0 = virtualinvoke $r2.<com.android.server.wm.ActivityMetricsLogger: int getLastDrawnDelayMs(com.android.server.wm.ActivityRecord)>(r1);

        $l1 = (long) $i0;

        virtualinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord,long)>(r1, $l1);

        return;
    }

    void stopWaitingForActivityVisible(com.android.server.wm.ActivityRecord, long)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1;
        long l0;
        com.android.server.wm.ActivityStackSupervisor$WaitInfo r2;
        android.app.WaitResult r3;
        java.util.ArrayList $r4, $r7, $r11;
        int $i1, i2;
        com.android.server.wm.ActivityTaskManagerService $r5;
        com.android.server.wm.WindowManagerGlobalLock $r6;
        java.lang.Object $r8;
        android.content.ComponentName $r9, $r10;
        boolean $z0, z2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        l0 := @parameter1: long;

        z2 = 0;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label3;

        $r7 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.ActivityStackSupervisor$WaitInfo) $r8;

        $r9 = r1.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor$WaitInfo: boolean matches(android.content.ComponentName)>($r9);

        if $z0 == 0 goto label2;

        r3 = virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor$WaitInfo: android.app.WaitResult getResult()>();

        z2 = 1;

        r3.<android.app.WaitResult: boolean timeout> = 0;

        $r10 = virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor$WaitInfo: android.content.ComponentName getComponent()>();

        r3.<android.app.WaitResult: android.content.ComponentName who> = $r10;

        r3.<android.app.WaitResult: long totalTime> = l0;

        $r11 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        if z2 == 0 goto label4;

        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

     label4:
        return;
    }

    void updateHomeProcess(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.WindowProcessController r1, $r3;
        com.android.server.wm.ActivityTaskManagerService $r2, $r5;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r4, $r6;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        if r1 == null goto label2;

        $r2 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHomeProcess>;

        if $r3 == r1 goto label2;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        $z0 = virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean hasMessages(int)>(216);

        if $z0 != 0 goto label1;

        $r6 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: boolean sendEmptyMessage(int)>(216);

     label1:
        $r5 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHomeProcess> = r1;

     label2:
        return;
    }

    void updatePictureInPictureMode(com.android.server.wm.Task, android.graphics.Rect, boolean)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.Task r1;
        android.graphics.Rect r2;
        boolean z0;
        com.android.internal.util.function.pooled.PooledConsumer r3;
        com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler $r4;
        com.android.server.wm.'-$$Lambda$oZvG727evJMxIwK1im7QJjcltfo' $r5;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r6;
        java.lang.Boolean $r7;
        com.android.server.wm.ActivityStack $r8;
        com.android.internal.util.function.TriConsumer r9;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        $r4 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler mHandler>;

        virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor$ActivityStackSupervisorHandler: void removeMessages(int)>(215);

        $r5 = <com.android.server.wm._$$Lambda$oZvG727evJMxIwK1im7QJjcltfo: com.android.server.wm.'-$$Lambda$oZvG727evJMxIwK1im7QJjcltfo' INSTANCE>;

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r9 = (com.android.internal.util.function.TriConsumer) $r5;

        r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.TriConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r9, $r6, r2, $r7);

        $r8 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r8.<com.android.server.wm.ActivityStack: int setBounds(android.graphics.Rect)>(r2);

        virtualinvoke r1.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r3);

        interfaceinvoke r3.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    void updateTopResumedActivityIfNeeded()
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        com.android.server.wm.ActivityRecord r1, $r4, $r5;
        com.android.server.wm.ActivityStack r2;
        com.android.server.wm.RootWindowContainer $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityRecord mTopResumedActivity>;

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r2 == null goto label5;

        $r4 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r4 != r1 goto label1;

        goto label5;

     label1:
        if r1 == null goto label2;

        $z1 = r0.<com.android.server.wm.ActivityStackSupervisor: boolean mTopResumedActivityWaitingForPrev>;

        if $z1 != 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if z2 == 0 goto label4;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean scheduleTopResumedActivityChanged(boolean)>(0);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void scheduleTopResumedStateLossTimeout(com.android.server.wm.ActivityRecord)>(r1);

        r0.<com.android.server.wm.ActivityStackSupervisor: boolean mTopResumedActivityWaitingForPrev> = 1;

     label4:
        $r5 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityRecord mTopResumedActivity> = $r5;

        specialinvoke r0.<com.android.server.wm.ActivityStackSupervisor: void scheduleTopResumedActivityStateIfNeeded()>();

        return;

     label5:
        return;
    }

    void waitActivityVisible(android.content.ComponentName, android.app.WaitResult)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        android.app.WaitResult r1;
        com.android.server.wm.ActivityStackSupervisor$WaitInfo $r2;
        java.util.ArrayList $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r4 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.app.WaitResult;

        $r2 = new com.android.server.wm.ActivityStackSupervisor$WaitInfo;

        specialinvoke $r2.<com.android.server.wm.ActivityStackSupervisor$WaitInfo: void <init>(android.content.ComponentName,android.app.WaitResult)>(r4, r1);

        $r3 = r0.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mWaitingForActivityVisible>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return;
    }

    void wakeUp(java.lang.String)
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        java.lang.String r1, $r7;
        android.os.PowerManager r2;
        long l0;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.wm.ActivityStackSupervisor;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.wm.ActivityStackSupervisor: android.os.PowerManager mPowerManager>;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.server.am:TURN_ON:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>(l0, 2, $r7);

        return;
    }
}
