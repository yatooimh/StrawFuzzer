public class com.android.server.wm.ActivityTaskManagerService extends android.app.IActivityTaskManager$Stub
{
    static final long ACTIVITY_BG_START_GRACE_PERIOD_MS;
    static final boolean ANIMATE;
    private static final long APP_SWITCH_DELAY_TIME;
    public static final java.lang.String DUMP_ACTIVITIES_CMD;
    public static final java.lang.String DUMP_ACTIVITIES_SHORT_CMD;
    public static final java.lang.String DUMP_CONTAINERS_CMD;
    public static final java.lang.String DUMP_LASTANR_CMD;
    public static final java.lang.String DUMP_LASTANR_TRACES_CMD;
    public static final java.lang.String DUMP_RECENTS_CMD;
    public static final java.lang.String DUMP_RECENTS_SHORT_CMD;
    public static final java.lang.String DUMP_STARTER_CMD;
    static final int INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT_MS;
    public static final int KEY_DISPATCHING_TIMEOUT_MS;
    static final int LAYOUT_REASON_CONFIG_CHANGED;
    static final int LAYOUT_REASON_VISIBILITY_CHANGED;
    private static final int PENDING_ASSIST_EXTRAS_LONG_TIMEOUT;
    private static final int PENDING_ASSIST_EXTRAS_TIMEOUT;
    private static final int PENDING_AUTOFILL_ASSIST_STRUCTURE_TIMEOUT;
    public static final int RELAUNCH_REASON_FREE_RESIZE;
    public static final int RELAUNCH_REASON_NONE;
    public static final int RELAUNCH_REASON_WINDOWING_MODE_RESIZE;
    private static final long START_AS_CALLER_TOKEN_EXPIRED_TIMEOUT;
    private static final long START_AS_CALLER_TOKEN_TIMEOUT;
    private static final long START_AS_CALLER_TOKEN_TIMEOUT_IMPL;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_CONFIGURATION;
    private static final java.lang.String TAG_FOCUS;
    private static final java.lang.String TAG_IMMERSIVE;
    private static final java.lang.String TAG_LOCKTASK;
    static final java.lang.String TAG_STACK;
    static final java.lang.String TAG_SWITCH;
    private static final java.lang.String TAG_VISIBILITY;
    final int GL_ES_VERSION;
    private final com.android.server.wm.MirrorActiveUids mActiveUids;
    android.content.ComponentName mActiveVoiceInteractionServiceComponent;
    private com.android.server.wm.ActivityStartController mActivityStartController;
    final android.util.SparseArray mAllowAppSwitchUids;
    android.app.ActivityManagerInternal mAmInternal;
    private android.app.AppOpsManager mAppOpsManager;
    private long mAppSwitchesAllowedTime;
    com.android.server.wm.AppWarnings mAppWarnings;
    private com.android.internal.app.AssistUtils mAssistUtils;
    private final java.util.Map mCompanionAppUidsMap;
    com.android.server.wm.CompatModePackages mCompatModePackages;
    private int mConfigurationSeq;
    android.content.Context mContext;
    android.app.IActivityController mController;
    boolean mControllerIsAMonkey;
    com.android.server.am.AppTimeTracker mCurAppTimeTracker;
    private int mDeviceOwnerUid;
    private boolean mDidAppSwitch;
    private boolean mDreaming;
    final java.util.ArrayList mExpiredStartAsCallerTokens;
    final int mFactoryTest;
    private com.android.server.wm.ActivityTaskManagerService$FontScaleSettingObserver mFontScaleSettingObserver;
    boolean mForceResizableActivities;
    final com.android.server.wm.WindowManagerGlobalLock mGlobalLock;
    final java.lang.Object mGlobalLockWithoutBoost;
    com.android.server.wm.ActivityTaskManagerService$H mH;
    boolean mHasHeavyWeightFeature;
    boolean mHasLeanbackFeature;
    com.android.server.wm.WindowProcessController mHeavyWeightProcess;
    com.android.server.wm.WindowProcessController mHomeProcess;
    com.android.server.firewall.IntentFirewall mIntentFirewall;
    final com.android.server.wm.ActivityTaskManagerInternal mInternal;
    com.android.server.wm.KeyguardController mKeyguardController;
    private boolean mKeyguardShown;
    java.lang.String mLastANRState;
    com.android.server.wm.ActivityRecord mLastResumedActivity;
    private long mLastStopAppSwitchesTime;
    private int mLayoutReasons;
    private final com.android.server.wm.ClientLifecycleManager mLifecycleManager;
    private com.android.server.wm.LockTaskController mLockTaskController;
    private final java.util.ArrayList mPendingAssistExtras;
    com.android.server.am.PendingIntentController mPendingIntentController;
    private final android.util.SparseArray mPendingTempWhitelist;
    private com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal;
    private android.content.pm.PackageManagerInternal mPmInternal;
    android.os.PowerManagerInternal mPowerManagerInternal;
    com.android.server.wm.WindowProcessController mPreviousProcess;
    long mPreviousProcessVisibleTime;
    final com.android.server.wm.WindowProcessControllerMap mProcessMap;
    final com.android.internal.app.ProcessMap mProcessNames;
    java.lang.String mProfileApp;
    com.android.server.wm.WindowProcessController mProfileProc;
    android.app.ProfilerInfo mProfilerInfo;
    private com.android.server.wm.RecentTasks mRecentTasks;
    com.android.server.wm.RootWindowContainer mRootWindowContainer;
    android.service.voice.IVoiceInteractionSession mRunningVoice;
    final java.util.List mScreenObservers;
    private boolean mShowDialogs;
    boolean mShuttingDown;
    boolean mSizeCompatFreeform;
    private boolean mSleeping;
    com.android.server.wm.ActivityStackSupervisor mStackSupervisor;
    final java.util.HashMap mStartActivitySources;
    final java.lang.StringBuilder mStringBuilder;
    private java.lang.String[] mSupportedSystemLocales;
    boolean mSupportsFreeformWindowManagement;
    boolean mSupportsMultiDisplay;
    boolean mSupportsMultiWindow;
    boolean mSupportsPictureInPicture;
    boolean mSupportsSplitScreenMultiWindow;
    boolean mSuppressResizeConfigChanges;
    private android.content.ComponentName mSysUiServiceComponent;
    final android.app.ActivityThread mSystemThread;
    private com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController;
    com.android.server.wm.TaskOrganizerController mTaskOrganizerController;
    private android.content.res.Configuration mTempConfig;
    private int mThumbnailHeight;
    private int mThumbnailWidth;
    final com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult mTmpUpdateConfigurationResult;
    java.lang.String mTopAction;
    android.content.ComponentName mTopComponent;
    java.lang.String mTopData;
    int mTopProcessState;
    private com.android.server.wm.ActivityRecord mTracedResumedActivity;
    com.android.server.uri.UriGrantsManagerInternal mUgmInternal;
    final android.content.Context mUiContext;
    com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler;
    private final android.os.UpdateLock mUpdateLock;
    private final java.lang.Runnable mUpdateOomAdjRunnable;
    private android.app.usage.UsageStatsManagerInternal mUsageStatsInternal;
    private com.android.server.pm.UserManagerService mUserManager;
    private int mViSessionId;
    android.os.PowerManager$WakeLock mVoiceWakeLock;
    int mVr2dDisplayId;
    com.android.server.wm.VrController mVrController;
    com.android.server.wm.WindowManagerService mWindowManager;
    com.android.server.wm.WindowOrganizerController mWindowOrganizerController;

    public void <init>(android.content.Context)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock $r2;
        com.android.server.wm.MirrorActiveUids $r3;
        android.util.SparseArray $r4, $r15;
        com.android.internal.app.ProcessMap $r5;
        com.android.server.wm.WindowProcessControllerMap $r6;
        java.util.HashMap $r7;
        java.util.ArrayList $r8, $r9, $r16;
        android.util.ArrayMap $r10;
        com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult $r11;
        android.content.res.Configuration $r12;
        java.lang.StringBuilder $r13;
        android.os.UpdateLock $r14;
        com.android.server.wm.ActivityTaskManagerService$1 $r17;
        int $i0, $i1;
        android.app.ContextImpl $r18;
        com.android.server.wm.ClientLifecycleManager $r19;
        com.android.server.wm.ActivityTaskManagerService$LocalService $r20;
        com.android.server.wm.WindowOrganizerController $r21;
        com.android.server.wm.TaskOrganizerController $r22;
        android.content.Context r23;
        android.app.ActivityThread r24;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r23 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.IActivityTaskManager$Stub: void <init>()>();

        $r2 = new com.android.server.wm.WindowManagerGlobalLock;

        specialinvoke $r2.<com.android.server.wm.WindowManagerGlobalLock: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock> = $r2;

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.Object mGlobalLockWithoutBoost> = $r2;

        $r3 = new com.android.server.wm.MirrorActiveUids;

        specialinvoke $r3.<com.android.server.wm.MirrorActiveUids: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.MirrorActiveUids mActiveUids> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.util.SparseArray mPendingTempWhitelist> = $r4;

        $r5 = new com.android.internal.app.ProcessMap;

        specialinvoke $r5.<com.android.internal.app.ProcessMap: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.ProcessMap mProcessNames> = $r5;

        $r6 = new com.android.server.wm.WindowProcessControllerMap;

        specialinvoke $r6.<com.android.server.wm.WindowProcessControllerMap: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap> = $r6;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess> = null;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mKeyguardShown> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mViSessionId> = 1000;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: java.util.HashMap mStartActivitySources> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mExpiredStartAsCallerTokens> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mPendingAssistExtras> = $r9;

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: java.util.Map mCompanionAppUidsMap> = $r10;

        $r11 = new com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult;

        specialinvoke $r11.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult mTmpUpdateConfigurationResult> = $r11;

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String[] mSupportedSystemLocales> = null;

        $r12 = new android.content.res.Configuration;

        specialinvoke $r12.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig> = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>(256);

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.StringBuilder mStringBuilder> = $r13;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController> = null;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mControllerIsAMonkey> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mTopAction> = "android.intent.action.MAIN";

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mProfileApp> = null;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mProfileProc> = null;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ProfilerInfo mProfilerInfo> = null;

        $r14 = new android.os.UpdateLock;

        specialinvoke $r14.<android.os.UpdateLock: void <init>(java.lang.String)>("immersive");

        r0.<com.android.server.wm.ActivityTaskManagerService: android.os.UpdateLock mUpdateLock> = $r14;

        $r15 = new android.util.SparseArray;

        specialinvoke $r15.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.util.SparseArray mAllowAppSwitchUids> = $r15;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: java.util.List mScreenObservers> = $r16;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mVr2dDisplayId> = -1;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mDreaming> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mTopProcessState> = 2;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShowDialogs> = 1;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mDeviceOwnerUid> = -1;

        $r17 = new com.android.server.wm.ActivityTaskManagerService$1;

        specialinvoke $r17.<com.android.server.wm.ActivityTaskManagerService$1: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.Runnable mUpdateOomAdjRunnable> = $r17;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext> = r23;

        $i0 = staticinvoke <android.os.FactoryTest: int getMode()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: int mFactoryTest> = $i0;

        r24 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityThread mSystemThread> = r24;

        $r18 = virtualinvoke r24.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mUiContext> = $r18;

        $r19 = new com.android.server.wm.ClientLifecycleManager;

        specialinvoke $r19.<com.android.server.wm.ClientLifecycleManager: void <init>()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager mLifecycleManager> = $r19;

        $r20 = new com.android.server.wm.ActivityTaskManagerService$LocalService;

        specialinvoke $r20.<com.android.server.wm.ActivityTaskManagerService$LocalService: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerInternal mInternal> = $r20;

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.opengles.version", 0);

        r0.<com.android.server.wm.ActivityTaskManagerService: int GL_ES_VERSION> = $i1;

        $r21 = new com.android.server.wm.WindowOrganizerController;

        specialinvoke $r21.<com.android.server.wm.WindowOrganizerController: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowOrganizerController mWindowOrganizerController> = $r21;

        $r22 = $r21.<com.android.server.wm.WindowOrganizerController: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController> = $r22;

        return;
    }

    static void access$000(com.android.server.wm.ActivityTaskManagerService, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateFontScaleIfNeeded(int)>(i0);

        return;
    }

    static void access$100(com.android.server.wm.ActivityTaskManagerService, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.content.res.Configuration;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateShouldShowDialogsLocked(android.content.res.Configuration)>(r1);

        return;
    }

    static boolean access$1000(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShowDialogs>;

        return $z0;
    }

    static boolean access$1100(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping>;

        return $z0;
    }

    static com.android.server.uri.NeededUriGrants access$1200(com.android.server.wm.ActivityTaskManagerService, android.content.Intent, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.Intent r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.uri.NeededUriGrants $r3;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: com.android.server.wm.ActivityRecord;

        $r3 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.NeededUriGrants collectGrants(android.content.Intent,com.android.server.wm.ActivityRecord)>(r1, r2);

        return $r3;
    }

    static void access$1300(com.android.server.wm.ActivityTaskManagerService, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>(r1);

        return;
    }

    static void access$1400(com.android.server.wm.ActivityTaskManagerService, android.util.proto.ProtoOutputStream, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.util.proto.ProtoOutputStream r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.util.proto.ProtoOutputStream;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void writeSleepStateToProto(android.util.proto.ProtoOutputStream,int,boolean)>(r1, i0, z0);

        return;
    }

    static com.android.server.wm.MirrorActiveUids access$1500(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.MirrorActiveUids $r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.MirrorActiveUids mActiveUids>;

        return $r1;
    }

    static android.util.SparseArray access$1600(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.util.SparseArray mPendingTempWhitelist>;

        return $r1;
    }

    static com.android.server.wm.RecentTasks access$1700(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.RecentTasks $r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        return $r1;
    }

    static boolean access$1800(com.android.server.wm.ActivityTaskManagerService, android.content.res.Configuration, com.android.server.wm.ActivityRecord, boolean, boolean, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;
        com.android.server.wm.ActivityRecord r2;
        boolean z0, z1, z2, $z3;
        int i0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.content.res.Configuration;

        r2 := @parameter2: com.android.server.wm.ActivityRecord;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        z2 := @parameter6: boolean;

        $z3 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,boolean,int,boolean)>(r1, r2, z0, z1, i0, z2);

        return $z3;
    }

    static android.app.ActivityManager$TaskSnapshot access$1900(com.android.server.wm.ActivityTaskManagerService, int, boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        boolean z0, z1;
        android.app.ActivityManager$TaskSnapshot $r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean,boolean)>(i0, z0, z1);

        return $r1;
    }

    static void access$200(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void start()>();

        return;
    }

    static java.util.Map access$2000(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.Map mCompanionAppUidsMap>;

        return $r1;
    }

    static void access$300(com.android.server.wm.ActivityTaskManagerService, com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void pendingAssistExtrasTimedOut(com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras)>(r1);

        return;
    }

    static void access$400(com.android.server.wm.ActivityTaskManagerService, android.os.IBinder, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;
        android.service.voice.IVoiceInteractionSession r2;
        com.android.internal.app.IVoiceInteractor r3;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.service.voice.IVoiceInteractionSession;

        r3 := @parameter3: com.android.internal.app.IVoiceInteractor;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void onLocalVoiceInteractionStartedLocked(android.os.IBinder,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor)>(r1, r2, r3);

        return;
    }

    static com.android.server.wm.TaskChangeNotificationController access$500(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.TaskChangeNotificationController $r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        return $r1;
    }

    static int access$600(com.android.server.wm.ActivityTaskManagerService, android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, r5, r7;
        android.content.Intent r4;
        android.os.IBinder r6;
        int i0, i1, i2, $i3;
        android.app.ProfilerInfo r8;
        android.os.Bundle r9;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.app.IApplicationThread;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.content.Intent;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.IBinder;

        r7 := @parameter7: java.lang.String;

        i0 := @parameter8: int;

        i1 := @parameter9: int;

        r8 := @parameter10: android.app.ProfilerInfo;

        r9 := @parameter11: android.os.Bundle;

        i2 := @parameter12: int;

        z0 := @parameter13: boolean;

        $i3 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int,boolean)>(r1, r2, r3, r4, r5, r6, r7, i0, i1, r8, r9, i2, z0);

        return $i3;
    }

    static void access$700(com.android.server.wm.ActivityTaskManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static boolean access$800(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mDreaming>;

        return $z0;
    }

    static boolean access$802(com.android.server.wm.ActivityTaskManagerService, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mDreaming> = z0;

        return z0;
    }

    static void access$900(com.android.server.wm.ActivityTaskManagerService, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateEventDispatchingLocked(boolean)>(z0);

        return;
    }

    private void applyUpdateVrModeLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        android.content.ComponentName $r3;
        int $i0, $i1, $i3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r11;
        com.android.server.wm.RootWindowContainer $r12;
        com.android.server.wm.ActivityTaskManagerService$H $r13;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$nuSrfdXdOXcutw3SV8Ualpreu30 $r14;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r3 = r1.<com.android.server.wm.ActivityRecord: android.content.ComponentName requestedVrComponent>;

        if $r3 == null goto label1;

        $i0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        if $i0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Moving ");

        $r6 = r1.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from display ");

        $i1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getDisplayId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to main display for VR");

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r11);

        $r12 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getRootTaskId()>();

        virtualinvoke $r12.<com.android.server.wm.RootWindowContainer: void moveStackToDisplay(int,int,boolean)>($i3, 0, 1);

     label1:
        $r13 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r14 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$nuSrfdXdOXcutw3SV8Ualpreu30;

        specialinvoke $r14.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$nuSrfdXdOXcutw3SV8Ualpreu30: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.ActivityRecord)>(r0, r1);

        virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r14);

        return;
    }

    private void buildAssistBundleLocked(com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras r1;
        android.os.Bundle r2, $r5, $r6;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras;

        r2 := @parameter1: android.os.Bundle;

        if r2 == null goto label1;

        $r6 = r1.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        virtualinvoke $r6.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("android.intent.extra.ASSIST_CONTEXT", r2);

     label1:
        $r3 = r1.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: java.lang.String hint>;

        if $r3 == null goto label2;

        $r5 = r1.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        $r4 = r1.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: java.lang.String hint>;

        virtualinvoke $r5.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>($r4, 1);

     label2:
        return;
    }

    private void cancelHeavyWeightProcessNotification(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.INotificationManager r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r3 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        if r3 != null goto label1;

        return;

     label1:
        interfaceinvoke r3.<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>("android", "android", null, 11, i0);

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Error canceling notification for service", $r2);

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean checkAllowAppSwitchUid(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        android.util.ArrayMap r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3, $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.util.SparseArray mAllowAppSwitchUids>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r1 = (android.util.ArrayMap) $r3;

        if r1 == null goto label3;

        $i2 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        i4 = $i2 - 1;

     label1:
        if i4 < 0 goto label3;

        $r4 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        $r5 = (java.lang.Integer) $r4;

        $i3 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i3 != i0 goto label2;

        return 1;

     label2:
        i4 = i4 + -1;

        goto label1;

     label3:
        return 0;
    }

    private static int checkCallingPermission(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        $i3 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>(r0, $i0, $i2);

        return $i3;
    }

    public static int checkComponentPermission(java.lang.String, int, int, int, boolean)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i3 = staticinvoke <com.android.server.am.ActivityManagerService: int checkComponentPermission(java.lang.String,int,int,int,boolean)>(r0, i0, i1, i2, z0);

        return $i3;
    }

    static int checkPermission(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1, $i2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        return -1;

     label1:
        $i2 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkComponentPermission(java.lang.String,int,int,int,boolean)>(r0, i0, i1, -1, 1);

        return $i2;
    }

    private com.android.server.uri.NeededUriGrants collectGrants(android.content.Intent, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.Intent r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.uri.UriGrantsManagerInternal $r3;
        int $i0, $i1;
        java.lang.String $r4;
        com.android.server.uri.NeededUriGrants $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        if r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.UriGrantsManagerInternal mUgmInternal>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r2.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $i1 = r2.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r5 = interfaceinvoke $r3.<com.android.server.uri.UriGrantsManagerInternal: com.android.server.uri.NeededUriGrants checkGrantUriPermissionFromIntent(android.content.Intent,int,java.lang.String,int)>(r1, $i0, $r4, $i1);

        return $r5;

     label1:
        return null;
    }

    private java.lang.String constructResumedTraceName(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("focused app: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void dumpActivity(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, com.android.server.wm.ActivityRecord, java.lang.String[], boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.PrintWriter r1;
        com.android.server.wm.ActivityRecord r2;
        java.lang.String[] r3;
        boolean z0, $z1;
        java.lang.String r4, $r7, $r8, $r16, $r20, r22;
        com.android.server.wm.WindowManagerGlobalLock r5;
        java.lang.StringBuilder $r6, $r15, $r19;
        int $i0, $i1;
        android.os.ParcelFileDescriptor $r9;
        com.android.server.wm.ActivityRecord$Token $r10;
        com.android.server.wm.WindowProcessController $r11, $r12;
        java.lang.Throwable $r13, $r17, $r18, $r21;
        android.os.RemoteException $r14;
        java.io.FileDescriptor r23;
        android.app.IApplicationThread r25;
        com.android.internal.os.TransferPipe r26;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r22 := @parameter0: java.lang.String;

        r23 := @parameter1: java.io.FileDescriptor;

        r1 := @parameter2: java.io.PrintWriter;

        r2 := @parameter3: com.android.server.wm.ActivityRecord;

        r3 := @parameter4: java.lang.String[];

        z0 := @parameter5: boolean;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r5;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r22);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("ACTIVITY ");

        $r7 = r2.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" pid=");

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z1 == 0 goto label03;

        $r11 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i1 = virtualinvoke $r11.<com.android.server.wm.WindowProcessController: int getPid()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i1);

        $r12 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        r25 = virtualinvoke $r12.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

     label02:
        goto label05;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("(not running)");

     label04:
        r25 = null;

     label05:
        if z0 == 0 goto label07;

     label06:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r4, 1);

     label07:
        exitmonitor r5;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r25 == null goto label21;

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

     label09:
        r26 = new com.android.internal.os.TransferPipe;

        specialinvoke r26.<com.android.internal.os.TransferPipe: void <init>()>();

     label10:
        $r9 = virtualinvoke r26.<com.android.internal.os.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()>();

        $r10 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        interfaceinvoke r25.<android.app.IApplicationThread: void dumpActivity(android.os.ParcelFileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>($r9, $r10, r4, r3);

        virtualinvoke r26.<com.android.internal.os.TransferPipe: void go(java.io.FileDescriptor)>(r23);

     label11:
        virtualinvoke r26.<com.android.internal.os.TransferPipe: void close()>();

     label12:
        goto label21;

     label13:
        $r17 := @caughtexception;

     label14:
        virtualinvoke r26.<com.android.internal.os.TransferPipe: void close()>();

     label15:
        goto label18;

     label16:
        $r21 := @caughtexception;

     label17:
        virtualinvoke $r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

     label18:
        throw $r17;

     label19:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got a RemoteException while dumping the activity");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        goto label21;

     label20:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure while dumping the activity: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

     label21:
        return;

     label22:
        $r13 := @caughtexception;

     label23:
        exitmonitor r5;

     label24:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.io.IOException from label09 to label10 with label20;
        catch android.os.RemoteException from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.io.IOException from label11 to label12 with label20;
        catch android.os.RemoteException from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label20;
        catch android.os.RemoteException from label17 to label18 with label19;
        catch java.io.IOException from label18 to label19 with label20;
        catch android.os.RemoteException from label18 to label19 with label19;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void enforceCallerIsDream(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        boolean z0;
        java.lang.Throwable $r1;
        java.lang.String r2;
        java.lang.SecurityException r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r2 := @parameter0: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        z0 = staticinvoke <com.android.server.wm.ActivityRecord: boolean canLaunchDreamActivity(java.lang.String)>(r2);

     label2:
        if z0 == 0 goto label3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        r3 = new java.lang.SecurityException;

        specialinvoke r3.<java.lang.SecurityException: void <init>(java.lang.String)>("The dream activity can be started only when the device is dreaming and only by the active dream package.");

        throw r3;

     label4:
        $r1 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    private void enforceCallerIsRecentsOrHasPermission(java.lang.String, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r2;
        com.android.server.wm.RecentTasks $r3;
        int $i0;
        boolean $z0;
        android.app.ActivityManagerInternal $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke $r3.<com.android.server.wm.RecentTasks: boolean isCallerRecents(int)>($i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r4.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    private void enforceNotIsolatedCaller(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, $r7;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.os.UserHandle: boolean isIsolated(int)>($i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Isolated process not allowed to call ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int, android.content.Intent, java.lang.String, android.app.IAssistDataReceiver, android.os.Bundle, android.os.IBinder, boolean, boolean, int, android.os.Bundle, long, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i3, $i4, $i5, $i6, $i7;
        java.lang.String r1, $r6, $r14, $r18, $r23, $r26, $r30;
        android.app.IAssistDataReceiver r2;
        android.os.Bundle r3, r36, r46;
        boolean z0, z1, $z2, $z3, $z4;
        long l2;
        com.android.server.wm.WindowManagerGlobalLock r4;
        android.app.ActivityManagerInternal $r5;
        com.android.server.wm.WindowProcessController $r7, $r8;
        android.app.IApplicationThread $r9;
        com.android.server.wm.ActivityRecord$Token $r10;
        java.util.ArrayList $r11;
        android.os.RemoteException $r27, $r32;
        java.lang.Throwable $r31, $r33, r52;
        android.content.Intent r34;
        android.os.IBinder r35;
        com.android.server.wm.ActivityStack r37;
        com.android.server.wm.ActivityRecord r38, r40, r42, r43;
        java.lang.StringBuilder r39, r41, r44, r45, r51;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras r47;
        com.android.server.wm.ActivityTaskManagerService$UiHandler r48;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r34 := @parameter1: android.content.Intent;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.app.IAssistDataReceiver;

        r3 := @parameter4: android.os.Bundle;

        r35 := @parameter5: android.os.IBinder;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        i1 := @parameter8: int;

        r36 := @parameter9: android.os.Bundle;

        l2 := @parameter10: long;

        i3 := @parameter11: int;

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r5.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.GET_TOP_ACTIVITY_INFO", "enqueueAssistContext()");

        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r37 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label02:
        if r37 == null goto label05;

     label03:
        r38 = virtualinvoke r37.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

     label04:
        goto label06;

     label05:
        r38 = null;

     label06:
        if r38 != null goto label09;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "getAssistContextExtras failed: no top activity");

        exitmonitor r4;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label09:
        $z2 = virtualinvoke r38.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z2 != 0 goto label11;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAssistContextExtras failed: no process for ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r26 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r26);

        exitmonitor r4;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label11:
        if z0 == 0 goto label17;

        if r35 == null goto label16;

     label12:
        r40 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r35);

     label13:
        if r38 == r40 goto label16;

     label14:
        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enqueueAssistContext failed: caller ");

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not current top ");

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r23 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r23);

        exitmonitor r4;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label16:
        r42 = r38;

        goto label24;

     label17:
        r43 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r35);

     label18:
        if r43 != null goto label21;

     label19:
        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enqueueAssistContext failed: activity for token=");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" couldn\'t be found");

        $r18 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r18);

        exitmonitor r4;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label21:
        $z3 = virtualinvoke r43.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z3 != 0 goto label23;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enqueueAssistContext failed: no process for ");

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r14 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r14);

        exitmonitor r4;

     label22:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label23:
        r42 = r43;

     label24:
        r46 = new android.os.Bundle;

        specialinvoke r46.<android.os.Bundle: void <init>()>();

     label25:
        if r36 == null goto label27;

     label26:
        virtualinvoke r46.<android.os.Bundle: void putAll(android.os.Bundle)>(r36);

     label27:
        $r6 = r42.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke r46.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.ASSIST_PACKAGE", $r6);

        $r7 = r42.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i4 = $r7.<com.android.server.wm.WindowProcessController: int mUid>;

        virtualinvoke r46.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.ASSIST_UID", $i4);

        r47 = new com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras;

        specialinvoke r47.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.ActivityRecord,android.os.Bundle,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,int)>(r0, r42, r46, r34, r1, r2, r3, i1);

        $z4 = virtualinvoke r42.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        r47.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: boolean isHome> = $z4;

     label28:
        if z1 == 0 goto label30;

     label29:
        $i6 = r0.<com.android.server.wm.ActivityTaskManagerService: int mViSessionId>;

        $i7 = $i6 + 1;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mViSessionId> = $i7;

     label30:
        $r8 = r42.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r10 = r42.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $i5 = r0.<com.android.server.wm.ActivityTaskManagerService: int mViSessionId>;

        interfaceinvoke $r9.<android.app.IApplicationThread: void requestAssistContextExtras(android.os.IBinder,android.os.IBinder,int,int,int)>($r10, r47, i0, $i5, i3);

        $r11 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mPendingAssistExtras>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r47);

        r48 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

     label31:
        virtualinvoke r48.<com.android.server.wm.ActivityTaskManagerService$UiHandler: boolean postDelayed(java.lang.Runnable,long)>(r47, l2);

     label32:
        exitmonitor r4;

     label33:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r47;

     label34:
        $r32 := @caughtexception;

        goto label36;

     label35:
        $r27 := @caughtexception;

     label36:
        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAssistContextExtras failed: crash calling ");

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r30 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r30);

        exitmonitor r4;

     label37:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label38:
        $r33 := @caughtexception;

        r52 = $r33;

     label39:
        exitmonitor r4;

     label40:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r52;

     label41:
        $r31 := @caughtexception;

        r52 = $r31;

        goto label39;

        catch java.lang.Throwable from label01 to label02 with label38;
        catch java.lang.Throwable from label03 to label04 with label38;
        catch java.lang.Throwable from label07 to label08 with label38;
        catch java.lang.Throwable from label09 to label10 with label38;
        catch java.lang.Throwable from label12 to label13 with label38;
        catch java.lang.Throwable from label14 to label15 with label38;
        catch java.lang.Throwable from label17 to label18 with label38;
        catch java.lang.Throwable from label19 to label20 with label38;
        catch java.lang.Throwable from label21 to label22 with label38;
        catch java.lang.Throwable from label24 to label25 with label38;
        catch java.lang.Throwable from label26 to label27 with label38;
        catch java.lang.Throwable from label27 to label28 with label38;
        catch java.lang.Throwable from label29 to label30 with label38;
        catch android.os.RemoteException from label30 to label31 with label35;
        catch java.lang.Throwable from label30 to label31 with label38;
        catch android.os.RemoteException from label31 to label32 with label34;
        catch java.lang.Throwable from label31 to label32 with label41;
        catch java.lang.Throwable from label32 to label33 with label41;
        catch java.lang.Throwable from label36 to label37 with label41;
        catch java.lang.Throwable from label39 to label40 with label41;
    }

    private com.android.server.wm.ActivityRecord ensureValidPictureInPictureActivityParamsLocked(java.lang.String, android.os.IBinder, android.app.PictureInPictureParams)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, $r7, $r13, $r18, $r29, $r33;
        com.android.server.wm.ActivityRecord r2;
        float f0, f1, $f2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r8, $r14, $r25;
        java.lang.IllegalStateException $r6, $r12, $r17;
        int $i0;
        com.android.server.wm.WindowManagerService $r19;
        com.android.server.wm.DisplayContent $r20;
        android.content.Context $r21, $r23;
        android.content.res.Resources $r22, $r24;
        java.lang.IllegalArgumentException $r28;
        java.lang.Object[] $r30;
        java.lang.Float $r31, $r32;
        android.os.IBinder r34;
        android.app.PictureInPictureParams r35;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        r34 := @parameter1: android.os.IBinder;

        r35 := @parameter2: android.app.PictureInPictureParams;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z0 == 0 goto label5;

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r34);

        if r2 == null goto label4;

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean supportsPictureInPicture()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r35.<android.app.PictureInPictureParams: boolean hasSetAspectRatio()>();

        if $z2 == 0 goto label2;

        $r19 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r20 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        $f2 = virtualinvoke r35.<android.app.PictureInPictureParams: float getAspectRatio()>();

        $z3 = virtualinvoke $r19.<com.android.server.wm.WindowManagerService: boolean isValidPictureInPictureAspectRatio(com.android.server.wm.DisplayContent,float)>($r20, $f2);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r21 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r22 = virtualinvoke $r21.<android.content.Context: android.content.res.Resources getResources()>();

        f0 = virtualinvoke $r22.<android.content.res.Resources: float getFloat(int)>(17105072);

        $r23 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r24 = virtualinvoke $r23.<android.content.Context: android.content.res.Resources getResources()>();

        f1 = virtualinvoke $r24.<android.content.res.Resources: float getFloat(int)>(17105071);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Aspect ratio is too extreme (must be between %f and %f).");

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = newarray (java.lang.Object)[2];

        $r31 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r30[0] = $r31;

        $r32 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r30[1] = $r32;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r29, $r30);

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label2:
        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int getMaxNumPictureInPictureActions(android.os.IBinder)>(r34);

        virtualinvoke r35.<android.app.PictureInPictureParams: void truncateActions(int)>($i0);

        return r2;

     label3:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Current activity does not support picture-in-picture.");

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Can\'t find activity for token=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Device doesn\'t support picture-in-picture mode.");

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void expireStartAsCallerTokenMsg(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap $r2;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.HashMap mStartActivitySources>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mExpiredStartAsCallerTokens>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void forgetStartAsCallerTokenMsg(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mExpiredStartAsCallerTokens>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private com.android.server.wm.ActivityRecord getCallingRecordLocked(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord $r1, r3;
        android.os.IBinder r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r2 := @parameter0: android.os.IBinder;

        r3 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r2);

        if r3 != null goto label1;

        return null;

     label1:
        $r1 = r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        return $r1;
    }

    static long getInputDispatchingTimeoutLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;
        com.android.server.wm.WindowProcessController $r1;
        long $l0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $l0 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: long getInputDispatchingTimeoutLocked(com.android.server.wm.WindowProcessController)>($r1);

        return $l0;

     label2:
        return 5000L;
    }

    private static long getInputDispatchingTimeoutLocked(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.WindowProcessController r0;
        long l0;

        r0 := @parameter0: com.android.server.wm.WindowProcessController;

        if r0 == null goto label1;

        l0 = virtualinvoke r0.<com.android.server.wm.WindowProcessController: long getInputDispatchingTimeout()>();

        goto label2;

     label1:
        l0 = 5000L;

     label2:
        return l0;
    }

    private android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int, boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        boolean z0, z1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        android.app.ActivityManager$TaskSnapshot $r3;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        com.android.server.wm.Task r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r9 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 1);

     label2:
        if r9 != null goto label5;

     label3:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getTaskSnapshot: taskId=");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r7 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r7);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r3 = virtualinvoke r9.<com.android.server.wm.Task: android.app.ActivityManager$TaskSnapshot getSnapshot(boolean,boolean)>(z0, z1);

        return $r3;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private boolean isSameApp(int, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1, $i2;
        boolean z0;
        android.content.pm.IPackageManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        if i0 == 0 goto label4;

        if i0 == 1000 goto label4;

        if r3 != null goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $i2 = interfaceinvoke $r1.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r3, 268435456, $i1);

        z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i0, $i2);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        goto label4;

     label4:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void lambda$3DTHgCAeEd5OOF7ACeXoCk8mmrQ(com.android.server.wm.ActivityTaskManagerService, android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void expireStartAsCallerTokenMsg(android.os.IBinder)>(r1);

        return;
    }

    public static void lambda$7ieG0s-7Zp4H2bLiWdOgB6MqhcI(com.android.server.wm.ActivityTaskManagerService, android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void forgetStartAsCallerTokenMsg(android.os.IBinder)>(r1);

        return;
    }

    public static void lambda$U6g1UdnOPnEF9wX1OTm9nKVXY5k(com.android.server.wm.ActivityTaskManagerService, java.util.Locale)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.util.Locale r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: java.util.Locale;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void sendLocaleToMountDaemonMsg(java.util.Locale)>(r1);

        return;
    }

    static boolean lambda$resizeDockedStack$5(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean inSplitScreenSecondaryWindowingMode()>();

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    public static void lambda$w70cT1_hTWQQAYctmXaA0BeZuBc(com.android.server.wm.ActivityTaskManagerService, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void cancelHeavyWeightProcessNotification(int)>(i0);

        return;
    }

    public static void lambda$x3j1aVkumtfulORwKd6dHysJyE0(com.android.server.wm.ActivityTaskManagerService, com.android.server.wm.WindowProcessController, android.content.Intent, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowProcessController r1;
        android.content.Intent r2;
        int i0;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter1: com.android.server.wm.WindowProcessController;

        r2 := @parameter2: android.content.Intent;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void postHeavyWeightProcessNotification(com.android.server.wm.WindowProcessController,android.content.Intent,int)>(r1, r2, i0);

        return;
    }

    public static void lambda$yP9TbBmrgQ4lrgcxb-8oL1pBAs4(com.android.server.wm.ActivityTaskManagerService, int, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        android.content.res.Configuration r1;

        r0 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.res.Configuration;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void sendPutConfigurationForUserMsg(int,android.content.res.Configuration)>(i0, r1);

        return;
    }

    private void logPictureInPictureArgs(android.app.PictureInPictureParams)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.PictureInPictureParams r1;
        boolean $z0, $z1;
        android.metrics.LogMaker $r3;
        float $f0;
        java.lang.Float $r4;
        android.content.Context $r6;
        java.util.List $r7;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.PictureInPictureParams;

        $z0 = virtualinvoke r1.<android.app.PictureInPictureParams: boolean hasSetActions()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke r1.<android.app.PictureInPictureParams: java.util.List getActions()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r6, "tron_varz_picture_in_picture_actions_count", $i0);

     label1:
        $z1 = virtualinvoke r1.<android.app.PictureInPictureParams: boolean hasSetAspectRatio()>();

        if $z1 == 0 goto label2;

        $r3 = new android.metrics.LogMaker;

        specialinvoke $r3.<android.metrics.LogMaker: void <init>(int)>(824);

        $f0 = virtualinvoke r1.<android.app.PictureInPictureParams: float getAspectRatio()>();

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r3.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(825, $r4);

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.metrics.LogMaker)>($r3);

     label2:
        return;
    }

    private void onLocalVoiceInteractionStartedLocked(android.os.IBinder, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.service.voice.IVoiceInteractionSession r1;
        com.android.internal.app.IVoiceInteractor r2;
        com.android.server.wm.ActivityRecord r3;
        long l0;
        com.android.server.wm.WindowProcessController $r4;
        android.app.IApplicationThread $r5;
        android.content.pm.ActivityInfo $r6;
        android.content.pm.ApplicationInfo $r7;
        int $i1;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        android.os.IBinder r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r10 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.service.voice.IVoiceInteractionSession;

        r2 := @parameter2: com.android.internal.app.IVoiceInteractor;

        r3 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r10);

        if r3 != null goto label01;

        return;

     label01:
        virtualinvoke r3.<com.android.server.wm.ActivityRecord: void setVoiceSessionLocked(android.service.voice.IVoiceInteractionSession)>(r1);

     label02:
        $r4 = r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        interfaceinvoke $r5.<android.app.IApplicationThread: void scheduleLocalVoiceInteractionStarted(android.os.IBinder,com.android.internal.app.IVoiceInteractor)>(r10, r2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r3.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r7 = $r6.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startRunningVoiceLocked(android.service.voice.IVoiceInteractionSession,int)>(r1, $i1);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label05:
        goto label10;

     label06:
        $r8 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r8;

     label09:
        $r9 := @caughtexception;

        virtualinvoke r3.<com.android.server.wm.ActivityRecord: void clearVoiceSessionLocked()>();

     label10:
        return;

        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch android.os.RemoteException from label04 to label05 with label09;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch android.os.RemoteException from label08 to label09 with label09;
    }

    private void pendingAssistExtrasTimedOut(com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IAssistDataReceiver r1, $r5;
        java.util.ArrayList $r2;
        android.os.Bundle $r3, $r4;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras r8;
        com.android.server.wm.WindowManagerGlobalLock r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras;

        r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mPendingAssistExtras>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r8);

        r1 = r8.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.IAssistDataReceiver receiver>;

        exitmonitor r9;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r1 == null goto label6;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        $r4 = r8.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle receiverExtras>;

        virtualinvoke $r3.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("receiverExtras", $r4);

     label3:
        $r5 = r8.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.IAssistDataReceiver receiver>;

        interfaceinvoke $r5.<android.app.IAssistDataReceiver: void onHandleAssistData(android.os.Bundle)>($r3);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r9;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void postHeavyWeightProcessNotification(com.android.server.wm.WindowProcessController, android.content.Intent, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.Intent r1;
        int i0, $i1;
        android.app.INotificationManager r2;
        android.content.pm.ApplicationInfo $r3, $r8;
        java.lang.String $r4, $r11, r28;
        android.content.Context $r5, $r7, $r16, $r19, r27, r31;
        java.lang.Object[] $r6;
        android.content.pm.PackageManager $r9;
        java.lang.CharSequence $r10, $r20;
        android.app.Notification$Builder $r12, $r13, $r14, $r15, $r17, $r18, $r22, r29, r30;
        android.app.PendingIntent $r21;
        java.lang.RuntimeException $r23;
        android.content.pm.PackageManager$NameNotFoundException $r24;
        android.os.RemoteException $r25;
        com.android.server.wm.WindowProcessController r26;
        android.os.UserHandle r32;
        android.app.Notification r33;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r26 := @parameter0: com.android.server.wm.WindowProcessController;

        r1 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        if r26 != null goto label01;

        return;

     label01:
        r2 = staticinvoke <android.app.NotificationManager: android.app.INotificationManager getService()>();

        if r2 != null goto label02;

        return;

     label02:
        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = r26.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $r4 = $r3.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        r27 = virtualinvoke $r5.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>($r4, 0);

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r27.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r9 = virtualinvoke r27.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r10 = virtualinvoke $r8.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>($r9);

        $r6[0] = $r10;

        r28 = virtualinvoke $r7.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040277, $r6);

        r29 = new android.app.Notification$Builder;

        $r11 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String HEAVY_WEIGHT_APP>;

        specialinvoke r29.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>(r27, $r11);

        $r12 = virtualinvoke r29.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17303547);

        $r13 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r14 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r15 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r28);

        $r16 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r16.<android.content.Context: int getColor(int)>(17170460);

        $r17 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i1);

        $r18 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r28);

        $r19 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r20 = virtualinvoke $r19.<android.content.Context: java.lang.CharSequence getText(int)>(17040278);

        r30 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r20);

        r31 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        r32 = new android.os.UserHandle;

        specialinvoke r32.<android.os.UserHandle: void <init>(int)>(i0);

        $r21 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r31, 0, r1, 268435456, null, r32);

        $r22 = virtualinvoke r30.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r21);

        r33 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification build()>();

     label03:
        interfaceinvoke r2.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>("android", "android", null, 11, r33, i0);

     label04:
        goto label08;

     label05:
        $r25 := @caughtexception;

        goto label08;

     label06:
        $r23 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Error showing notification for heavy-weight app", $r23);

     label08:
        goto label10;

     label09:
        $r24 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Unable to create context for heavy notification", $r24);

     label10:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label09;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label09;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label09;
    }

    public static java.lang.String relaunchReasonToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return null;

     label1:
        return "free_resize";

     label2:
        return "window_resize";
    }

    private void sendLocaleToMountDaemonMsg(java.util.Locale)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.storage.IStorageManager r1;
        java.lang.StringBuilder r2;
        android.os.IBinder $r3;
        java.lang.String $r5, $r8, $r9;
        android.os.RemoteException $r10;
        java.util.Locale r11;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r11 := @parameter0: java.util.Locale;

     label1:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r1 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r3);

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Storing locale ");

        $r5 = virtualinvoke r11.<java.util.Locale: java.lang.String toLanguageTag()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for decryption UI");

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", $r8);

        $r9 = virtualinvoke r11.<java.util.Locale: java.lang.String toLanguageTag()>();

        interfaceinvoke r1.<android.os.storage.IStorageManager: void setField(java.lang.String,java.lang.String)>("SystemLocale", $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Error storing locale for decryption UI", $r10);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void sendPutConfigurationForUserMsg(int, android.content.res.Configuration)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        android.content.res.Configuration r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Configuration;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putConfigurationForUser(android.content.ContentResolver,android.content.res.Configuration,int)>($r3, r1, i0);

        return;
    }

    private boolean setTaskWindowingModeSplitScreen(int, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1, $i3, i5, i6;
        boolean z0, $z2, $z3, $z4, z5, z6;
        java.lang.StringBuilder $r1, $r7, $r13, $r17;
        java.lang.IllegalArgumentException $r4, $r11;
        java.lang.String $r5, $r12, $r16, $r20;
        com.android.server.wm.RootWindowContainer $r6;
        com.android.server.wm.Task r22;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        z5 := @parameter2: boolean;

        $z2 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>(i0);

        if $z2 == 0 goto label7;

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isInLockTaskMode()>();

        if z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskWindowingModeSplitScreen: Is in lock task mode=");

        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int getLockTaskModeState()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r20);

        return 0;

     label1:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r22 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i5, 0);

        if r22 != null goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskWindowingModeSplitScreenPrimary: No task for id=");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r16);

        return 0;

     label2:
        $z3 = virtualinvoke r22.<com.android.server.wm.Task: boolean isActivityTypeStandardOrUndefined()>();

        if $z3 == 0 goto label6;

        $z4 = virtualinvoke r22.<com.android.server.wm.Task: boolean supportsSplitScreenWindowingMode()>();

        if $z4 != 0 goto label3;

        return 0;

     label3:
        i6 = virtualinvoke r22.<com.android.server.wm.Task: int getWindowingMode()>();

        if i6 != i0 goto label4;

        return 1;

     label4:
        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void moveTaskToSplitScreenPrimaryTask(com.android.server.wm.Task,boolean)>(r22, z5);

        z6 = 0;

        $i1 = virtualinvoke r22.<com.android.server.wm.Task: int getWindowingMode()>();

        if i6 == $i1 goto label5;

        z6 = 1;

     label5:
        return z6;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskWindowingMode: Attempt to move non-standard task ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to split-screen windowing mode");

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label7:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling setTaskWindowingModeSplitScreen with nonsplit-screen mode: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void start()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityTaskManagerInternal $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerInternal mInternal>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;", $r1);

        return;
    }

    private int startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, r5, r7;
        android.content.Intent r4;
        android.os.IBinder r6;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        android.app.ProfilerInfo r8;
        android.os.Bundle r9;
        boolean z0;
        com.android.server.wm.ActivityStartController $r10, $r11;
        com.android.server.wm.ActivityStarter $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.IBinder;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        r8 := @parameter9: android.app.ProfilerInfo;

        r9 := @parameter10: android.os.Bundle;

        i5 := @parameter11: int;

        z0 := @parameter12: boolean;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r2);

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("startActivityAsUser");

        $r10 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = virtualinvoke $r10.<com.android.server.wm.ActivityStartController: int checkTargetUser(int,boolean,int,int,java.lang.String)>(i5, z0, $i2, $i3, "startActivityAsUser");

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r4, "startActivityAsUser");

        $r13 = virtualinvoke $r12.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCaller(android.app.IApplicationThread)>(r1);

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r5);

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultTo(android.os.IBinder)>(r6);

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultWho(java.lang.String)>(r7);

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRequestCode(int)>(i0);

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setStartFlags(int)>(i1);

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setProfilerInfo(android.app.ProfilerInfo)>(r8);

        $r22 = virtualinvoke $r21.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r9);

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i6);

        $i4 = virtualinvoke $r23.<com.android.server.wm.ActivityStarter: int execute()>();

        return $i4;
    }

    private void startLockTaskModeLocked(com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.ActivityStack r1;
        int i0, $i2;
        long l1;
        com.android.server.wm.RootWindowContainer $r2, $r6;
        java.lang.IllegalArgumentException $r3;
        com.android.server.wm.Task $r4, r9;
        int[] $r5;
        com.android.server.wm.LockTaskController $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        if r9 == null goto label6;

        $i2 = r9.<com.android.server.wm.Task: int mLockTaskAuth>;

        if $i2 != 0 goto label1;

        goto label6;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r1 == null goto label5;

        $r4 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.Task getTopMostTask()>();

        if r9 != $r4 goto label5;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r5 = newarray (int)[1];

        $r5[0] = 2;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: void removeStacksInWindowingModes(int[])>($r5);

        $r7 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r7.<com.android.server.wm.LockTaskController: void startLockTaskMode(com.android.server.wm.Task,boolean,int)>(r9, z0, i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid task, not in foreground");

        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void startRunningVoiceLocked(android.service.voice.IVoiceInteractionSession, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.service.voice.IVoiceInteractionSession r1, r2, $r5;
        android.os.WorkSource $r3;
        android.os.PowerManager$WakeLock $r4, $r6;
        android.os.IBinder $r7, $r8;
        int i1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.service.voice.IVoiceInteractionSession;

        i1 := @parameter1: int;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", "<<<  startRunningVoiceLocked()");

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManager$WakeLock mVoiceWakeLock>;

        $r3 = new android.os.WorkSource;

        specialinvoke $r3.<android.os.WorkSource: void <init>(int)>(i1);

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r3);

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        if r2 == null goto label1;

        $r7 = interfaceinvoke r2.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        $r8 = interfaceinvoke r1.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        if $r7 == $r8 goto label4;

     label1:
        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        if $r5 == null goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice> = r1;

        if z0 != 0 goto label4;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManager$WakeLock mVoiceWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void acquire()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateSleepIfNeededLocked()>();

     label4:
        return;
    }

    private void startTimeTrackingFocusedActivityLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.am.AppTimeTracker r2;
        com.android.server.wm.RootWindowContainer $r3;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getTopResumedActivity()>();

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping>;

        if $z0 != 0 goto label1;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker>;

        if r2 == null goto label1;

        if r1 == null goto label1;

        $r4 = r1.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke r2.<com.android.server.am.AppTimeTracker: void start(java.lang.String)>($r4);

     label1:
        return;
    }

    private void stopLockTaskModeInternal(com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.LockTaskController $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.Task r7;
        android.telecom.TelecomManager r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r2.<com.android.server.wm.LockTaskController: void stopLockTaskMode(com.android.server.wm.Task,boolean,int)>(r7, z0, i0);

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        r8 = (android.telecom.TelecomManager) $r4;

     label04:
        if r8 == null goto label06;

     label05:
        virtualinvoke r8.<android.telecom.TelecomManager: void showInCallScreen(boolean)>(0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label10:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private boolean updateConfigurationLocked(android.content.res.Configuration, com.android.server.wm.ActivityRecord, boolean, boolean, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;
        com.android.server.wm.ActivityRecord r2;
        boolean z0, z1, z2, $z3;
        int i0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        z2 := @parameter5: boolean;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,boolean,int,boolean,com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)>(r1, r2, z0, z1, i0, z2, null);

        return $z3;
    }

    private void updateEventDispatchingLocked(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerService r1;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z1 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        if z1 == 0 goto label1;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        if $z0 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        virtualinvoke r1.<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)>(z2);

        return;
    }

    private void updateFontScaleIfNeeded(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        float f0, $f1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.content.res.Configuration $r4, r7;
        byte $b1;
        com.android.server.wm.WindowManagerService $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        f0 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r3, "font_scale", 1.0F, i0);

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

        $f1 = $r4.<android.content.res.Configuration: float fontScale>;

        $b1 = $f1 cmpl f0;

        if $b1 != 0 goto label3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        r7 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration(int)>(0);

        r7.<android.content.res.Configuration: float fontScale> = f0;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updatePersistentConfiguration(android.content.res.Configuration,int)>(r7, i0);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void updateResumedAppTrace(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1, r2;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mTracedResumedActivity>;

        if r2 == null goto label1;

        $r5 = r2.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $r6 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String constructResumedTraceName(java.lang.String)>($r5);

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(32L, $r6, 0);

     label1:
        if r1 == null goto label2;

        $r3 = r1.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $r4 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String constructResumedTraceName(java.lang.String)>($r3);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(32L, $r4, 0);

     label2:
        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mTracedResumedActivity> = r1;

        return;
    }

    private void updateShouldShowDialogsLocked(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;
        boolean $z0, z1, z2, z3;
        int $i0, $i1, i2, $i3;
        android.content.Context $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        i2 = r1.<android.content.res.Configuration: int keyboard>;

        z1 = 0;

        if i2 != 1 goto label2;

        $i0 = r1.<android.content.res.Configuration: int touchscreen>;

        if $i0 != 1 goto label2;

        $i1 = r1.<android.content.res.Configuration: int navigation>;

        if $i1 == 1 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "hide_error_dialogs", 0);

        if $i3 == 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        z3 = 0;

     label5:
        if z2 == 0 goto label6;

        $z0 = staticinvoke <android.app.ActivityTaskManager: boolean currentUiModeSupportsErrorDialogs(android.content.res.Configuration)>(r1);

        if $z0 == 0 goto label6;

        if z3 != 0 goto label6;

        z1 = 1;

        goto label6;

     label6:
        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShowDialogs> = z1;

        return;
    }

    private void writeSleepStateToProto(android.util.proto.ProtoOutputStream, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, $i2;
        boolean z0, $z1, $z2, $z3;
        long l1;
        java.util.Iterator r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        com.android.server.wm.ActivityTaskManagerInternal$SleepToken $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        l1 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268059L);

        $i2 = staticinvoke <android.os.PowerManagerInternal: int wakefulnessToProtoEnum(int)>(i0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169921L, $i2);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r4 = $r3.<com.android.server.wm.RootWindowContainer: java.util.ArrayList mSleepTokens>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.wm.ActivityTaskManagerInternal$SleepToken) $r5;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(2237677961218L, $r7);

        goto label1;

     label2:
        $z2 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, $z2);

        $z3 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z3);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, z0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l1);

        return;
    }

    com.android.server.wm.ActivityTaskManagerInternal$SleepToken acquireSleepToken(java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        com.android.server.wm.ActivityTaskManagerInternal$SleepToken r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r5 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerInternal$SleepToken createSleepToken(java.lang.String,int)>(r4, i0);

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateSleepIfNeededLocked()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final void activityDestroyed(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "activityDestroyed");

     label02:
        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r4);

     label03:
        if r5 == null goto label05;

     label04:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void destroyed(java.lang.String)>("activityDestroyed");

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r2 := @caughtexception;

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        throw $r2;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public final void activityIdle(android.os.IBinder, android.content.res.Configuration, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;
        boolean z0, $z1;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.WindowProcessController $r4;
        java.lang.Throwable $r5, $r6;
        android.os.IBinder r7;
        com.android.server.wm.ActivityRecord r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.content.res.Configuration;

        z0 := @parameter2: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "activityIdle");

        r8 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r7);

     label03:
        if r8 != null goto label06;

     label04:
        exitmonitor r2;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void activityIdleInternal(com.android.server.wm.ActivityRecord,boolean,boolean,android.content.res.Configuration)>(r8, 0, 0, r1);

     label07:
        if z0 == 0 goto label09;

     label08:
        $z1 = virtualinvoke r8.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z1 == 0 goto label09;

        $r4 = r8.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        virtualinvoke $r4.<com.android.server.wm.WindowProcessController: void clearProfilerIfNeeded()>();

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label15:
        $r6 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public final void activityPaused(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "activityPaused");

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r3);

     label2:
        if r4 == null goto label4;

     label3:
        virtualinvoke r4.<com.android.server.wm.ActivityRecord: void activityPaused(boolean)>(0);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void activityRelaunched(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityStackSupervisor $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void activityRelaunchedLocked(android.os.IBinder)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final void activityResumed(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        staticinvoke <com.android.server.wm.ActivityRecord: void activityResumedLocked(android.os.IBinder)>(r3);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final void activityStopped(android.os.IBinder, android.os.Bundle, android.os.PersistableBundle, java.lang.CharSequence)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.Bundle r1;
        android.os.PersistableBundle r2;
        java.lang.CharSequence r3;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r4;
        com.android.server.wm.ActivityRecord r5;
        android.app.ActivityManagerInternal $r6, $r8;
        com.android.server.wm.ActivityStackSupervisor $r7;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ActivityStack$ActivityState $r9;
        com.android.server.wm.WindowProcessController $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.Throwable $r13;
        android.os.IBinder r14;
        int i1;
        java.lang.String r15;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r14 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.os.PersistableBundle;

        r3 := @parameter3: java.lang.CharSequence;

        if r1 == null goto label02;

        $z2 = virtualinvoke r1.<android.os.Bundle: boolean hasFileDescriptors()>();

        if $z2 != 0 goto label01;

        goto label02;

     label01:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File descriptors passed in Bundle");

        throw $r12;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        i1 = 0;

        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "activityStopped");

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r14);

     label04:
        r15 = null;

        if r5 == null goto label09;

        r15 = null;

        i1 = 0;

     label05:
        $z0 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z0 == 0 goto label08;

     label06:
        r15 = null;

        i1 = 0;

     label07:
        $r9 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESTARTING_PROCESS>;

        $z1 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r9);

        if $z1 == 0 goto label08;

        $r10 = r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        r15 = $r10.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        $r11 = r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        i1 = $r11.<com.android.server.wm.WindowProcessController: int mUid>;

     label08:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void activityStopped(android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>(r1, r2, r3);

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        exitmonitor r4;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r15 == null goto label11;

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: void removeRestartTimeouts(com.android.server.wm.ActivityRecord)>(r5);

        $r8 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r8.<android.app.ActivityManagerInternal: void killProcess(java.lang.String,int,java.lang.String)>(r15, i1, "restartActivityProcess");

     label11:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r6.<android.app.ActivityManagerInternal: void trimApplications()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r4;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public final void activityTopResumedStateLost()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityStackSupervisor $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void handleTopResumedStateReleased(boolean)>(0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int addAppTask(android.os.IBinder, android.content.Intent, android.app.ActivityManager$TaskDescription, android.graphics.Bitmap) throws android.os.RemoteException
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityRecord r2;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, i19;
        boolean z0;
        java.lang.String $r5, $r9, $r18, $r24;
        android.content.pm.ApplicationInfo $r20, $r43;
        com.android.server.wm.TaskDisplayArea $r25;
        com.android.server.wm.RecentTasks $r26;
        java.lang.Throwable $r28, $r29, $r30, $r31, $r32, $r33, r53, r56;
        android.os.IBinder r34;
        android.content.Intent r35, r39;
        android.app.ActivityManager$TaskDescription r36, r46;
        android.graphics.Bitmap r37;
        android.content.ComponentName r38;
        android.graphics.Rect r40;
        android.content.pm.IPackageManager $r41;
        android.content.pm.ActivityInfo r42;
        com.android.server.wm.ActivityStack r44, r45;
        java.lang.SecurityException r47;
        java.lang.StringBuilder r48, r50, r52, r55;
        java.lang.IllegalArgumentException r49, r51, r54;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r34 := @parameter0: android.os.IBinder;

        r35 := @parameter1: android.content.Intent;

        r36 := @parameter2: android.app.ActivityManager$TaskDescription;

        r37 := @parameter3: android.graphics.Bitmap;

        i16 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r34);

     label03:
        if r2 == null goto label28;

     label04:
        r38 = virtualinvoke r35.<android.content.Intent: android.content.ComponentName getComponent()>();

     label05:
        if r38 == null goto label25;

     label06:
        $i2 = virtualinvoke r37.<android.graphics.Bitmap: int getWidth()>();

        $i3 = r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailWidth>;

        if $i2 != $i3 goto label24;

        $i8 = virtualinvoke r37.<android.graphics.Bitmap: int getHeight()>();

        $i9 = r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailHeight>;

        if $i8 != $i9 goto label23;

        r39 = virtualinvoke r35.<android.content.Intent: android.content.Intent getSelector()>();

     label07:
        if r39 == null goto label09;

     label08:
        virtualinvoke r35.<android.content.Intent: void setSelector(android.content.Intent)>(null);

     label09:
        r40 = virtualinvoke r35.<android.content.Intent: android.graphics.Rect getSourceBounds()>();

     label10:
        if r40 == null goto label12;

     label11:
        virtualinvoke r35.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(null);

     label12:
        i1 = virtualinvoke r35.<android.content.Intent: int getFlags()>();

     label13:
        $i10 = i1 & 524288;

        if $i10 == 0 goto label15;

     label14:
        $i14 = virtualinvoke r35.<android.content.Intent: int getFlags()>();

        $i15 = $i14 & 8192;

        if $i15 != 0 goto label15;

        virtualinvoke r35.<android.content.Intent: android.content.Intent addFlags(int)>(8192);

     label15:
        $r41 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i17 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i16);

        r42 = interfaceinvoke $r41.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(r38, 1024, $i17);

        $r43 = r42.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i18 = $r43.<android.content.pm.ApplicationInfo: int uid>;

        if $i18 != i16 goto label22;

        r44 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r25 = virtualinvoke r44.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $i12 = virtualinvoke r44.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        $i13 = virtualinvoke r44.<com.android.server.wm.ActivityStack: int getActivityType()>();

        r45 = virtualinvoke $r25.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack createStack(int,int,boolean,android.content.pm.ActivityInfo,android.content.Intent,boolean)>($i12, $i13, 0, r42, r35, 0);

        $r26 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        z0 = virtualinvoke $r26.<com.android.server.wm.RecentTasks: boolean addToBottom(com.android.server.wm.Task)>(r45);

     label16:
        if z0 != 0 goto label19;

     label17:
        virtualinvoke r44.<com.android.server.wm.ActivityStack: void removeChild(com.android.server.wm.WindowContainer,java.lang.String)>(r45, "addAppTask");

        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return -1;

     label19:
        r46 = virtualinvoke r45.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

     label20:
        virtualinvoke r46.<android.app.ActivityManager$TaskDescription: void copyFrom(android.app.ActivityManager$TaskDescription)>(r36);

        i19 = r45.<com.android.server.wm.Task: int mTaskId>;

        exitmonitor r1;

     label21:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i19;

     label22:
        r47 = new java.lang.SecurityException;

        r48 = new java.lang.StringBuilder;

        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t add task for another application: target uid=");

        $r20 = r42.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i11 = $r20.<android.content.pm.ApplicationInfo: int uid>;

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", calling uid=");

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r24 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r47.<java.lang.SecurityException: void <init>(java.lang.String)>($r24);

        throw r47;

     label23:
        goto label24;

     label24:
        r49 = new java.lang.IllegalArgumentException;

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad thumbnail size: got ");

        $i4 = virtualinvoke r37.<android.graphics.Bitmap: int getWidth()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i5 = virtualinvoke r37.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", require ");

        $i6 = r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailWidth>;

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i7 = r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailHeight>;

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r18 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw r49;

     label25:
        r51 = new java.lang.IllegalArgumentException;

        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Intent ");

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must specify explicit component");

        $r9 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r51;

     label26:
        $r32 := @caughtexception;

        r53 = $r32;

     label27:
        goto label32;

     label28:
        r54 = new java.lang.IllegalArgumentException;

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activity does not exist; token=");

     label29:
        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r5 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r54.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r54;

     label30:
        $r28 := @caughtexception;

        r53 = $r28;

        goto label27;

     label31:
        $r31 := @caughtexception;

        r53 = $r31;

     label32:
        exitmonitor r1;

     label33:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r53;

     label34:
        $r30 := @caughtexception;

        r56 = $r30;

        goto label37;

     label35:
        $r33 := @caughtexception;

        r53 = $r33;

        goto label32;

     label36:
        $r29 := @caughtexception;

        r56 = $r29;

     label37:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r56;

        catch java.lang.Throwable from label01 to label02 with label36;
        catch java.lang.Throwable from label02 to label03 with label31;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label31;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label20 to label21 with label30;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch java.lang.Throwable from label25 to label26 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label32 to label33 with label35;
        catch java.lang.Throwable from label33 to label34 with label34;
    }

    void addWindowLayoutReasons(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.ActivityTaskManagerService: int mLayoutReasons>;

        $i2 = $i1 | i0;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mLayoutReasons> = $i2;

        return;
    }

    public void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm.AppWarnings $r2;
        java.lang.Throwable $r3, $r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.content.ComponentName;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings mAppWarnings>;

        virtualinvoke $r2.<com.android.server.wm.AppWarnings: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>(r5);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r3 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r3;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void applyUpdateLockStateLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z1, z2;
        com.android.server.wm.ActivityTaskManagerService$H $r2;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$p4I6RZJqLXjaEjdISFyNzjAe4HE $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        if r1 == null goto label1;

        $z1 = r1.<com.android.server.wm.ActivityRecord: boolean immersive>;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r3 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$p4I6RZJqLXjaEjdISFyNzjAe4HE;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$p4I6RZJqLXjaEjdISFyNzjAe4HE: void <init>(com.android.server.wm.ActivityTaskManagerService,boolean,com.android.server.wm.ActivityRecord)>(r0, z2, r1);

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    void assertPackageMatchesCallingUid(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r7;
        java.lang.String r8, r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isSameApp(int,java.lang.String)>(i0, r8);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: package=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not belong to uid=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", r9);

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(r9);

        throw $r7;
    }

    public void cancelRecentsAnimation(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        long l0, l1;
        com.android.server.wm.WindowManagerService r1;
        int $i2;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.WindowManagerGlobalLock r7;
        byte b3;
        java.lang.StringBuilder r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "cancelRecentsAnimation()");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l0 = (long) $i2;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r7;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

     label03:
        if z0 == 0 goto label04;

        b3 = 2;

        goto label05;

     label04:
        b3 = 0;

     label05:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cancelRecentsAnimation/uid=");

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.wm.WindowManagerService: void cancelRecentsAnimation(int,java.lang.String)>(b3, $r4);

        exitmonitor r7;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r7;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void cancelTaskWindowTransition(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.String $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.wm.WindowManagerGlobalLock r8;
        com.android.server.wm.Task r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "cancelTaskWindowTransition()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r8 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r8;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r9 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 0);

     label03:
        if r9 != null goto label06;

     label04:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cancelTaskWindowTransition: taskId=");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r5);

        exitmonitor r8;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        virtualinvoke r9.<com.android.server.wm.Task: void cancelTaskWindowTransition()>();

        exitmonitor r8;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r8;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label12:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    boolean checkAppSwitchAllowedLocked(int, int, int, int, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, i3, $i7, $i9;
        java.lang.String r1, $r9;
        long $l4, $l5;
        byte $b6;
        com.android.server.wm.RecentTasks $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        $l4 = r0.<com.android.server.wm.ActivityTaskManagerService: long mAppSwitchesAllowedTime>;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b6 = $l4 cmp $l5;

        if $b6 >= 0 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        $z0 = virtualinvoke $r3.<com.android.server.wm.RecentTasks: boolean isCallerRecents(int)>(i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i7 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkComponentPermission(java.lang.String,int,int,int,boolean)>("android.permission.STOP_APP_SWITCHES", i0, i1, -1, 1);

        if $i7 != 0 goto label3;

        return 1;

     label3:
        $z1 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean checkAllowAppSwitchUid(int)>(i1);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        if i3 == -1 goto label6;

        if i3 == i1 goto label6;

        $i9 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkComponentPermission(java.lang.String,int,int,int,boolean)>("android.permission.STOP_APP_SWITCHES", i2, i3, -1, 1);

        if $i9 != 0 goto label5;

        return 1;

     label5:
        $z2 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean checkAllowAppSwitchUid(int)>(i3);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" request from ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stopped");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r9);

        return 0;
    }

    int checkGetTasksPermission(java.lang.String, int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

        return $i2;
    }

    void clearHeavyWeightProcessIfEquals(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowProcessController r1, r5;
        int $i0;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$w70cT1_hTWQQAYctmXaA0BeZuBc' $r2;
        java.lang.Integer $r3;
        com.android.server.wm.ActivityTaskManagerService$H $r4;
        android.os.Message r6;
        java.util.function.BiConsumer r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: com.android.server.wm.WindowProcessController;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess>;

        if r1 == null goto label2;

        if r1 == r5 goto label1;

        goto label2;

     label1:
        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess> = null;

        $r2 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$w70cT1_hTWQQAYctmXaA0BeZuBc: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$w70cT1_hTWQQAYctmXaA0BeZuBc' INSTANCE>;

        $i0 = r5.<com.android.server.wm.WindowProcessController: int mUserId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r7 = (java.util.function.BiConsumer) $r2;

        r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r7, r0, $r3);

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r6);

        return;

     label2:
        return;
    }

    public void clearLaunchParamsForPackages(java.util.List)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        int $i0, i1;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.LaunchParamsPersister $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        java.util.List r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "clearLaunchParamsForPackages");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label2:
        i1 = 0;

     label3:
        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsPersister mLaunchParamsPersister>;

        $r5 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (java.lang.String) $r5;

        virtualinvoke $r4.<com.android.server.wm.LaunchParamsPersister: void removeRecordForPackage(java.lang.String)>($r6);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.pm.ApplicationInfo r1;
        com.android.server.wm.CompatModePackages $r2;
        android.content.res.CompatibilityInfo $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.CompatModePackages: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>(r1);

        return $r3;
    }

    void continueWindowLayout()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowSurfacePlacer r1;
        com.android.server.wm.WindowManagerService $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $i0 = r0.<com.android.server.wm.ActivityTaskManagerService: int mLayoutReasons>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r1.<com.android.server.wm.WindowSurfacePlacer: void continueLayout(boolean)>(z0);

        return;
    }

    public boolean convertFromTranslucent(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label03:
        if r5 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        z0 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: boolean setOccludesParent(boolean)>(1);

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label11:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public boolean convertToTranslucent(android.os.IBinder, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.SafeActivityOptions r1;
        long l0;
        com.android.server.wm.ActivityRecord r2, r3;
        boolean z0;
        com.android.server.wm.Task $r4;
        java.lang.Throwable $r5, $r6;
        android.os.IBinder r7;
        android.os.Bundle r8;
        com.android.server.wm.WindowManagerGlobalLock r9;
        android.app.ActivityOptions r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.os.IBinder;

        r8 := @parameter1: android.os.Bundle;

        r1 = staticinvoke <com.android.server.wm.SafeActivityOptions: com.android.server.wm.SafeActivityOptions fromBundle(android.os.Bundle)>(r8);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r7);

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r9;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        $r4 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r3 = virtualinvoke $r4.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivityBelow(com.android.server.wm.ActivityRecord)>(r2);

     label07:
        if r3 == null goto label12;

        if r1 == null goto label10;

     label08:
        r10 = virtualinvoke r1.<com.android.server.wm.SafeActivityOptions: android.app.ActivityOptions getOptions(com.android.server.wm.ActivityRecord)>(r2);

     label09:
        goto label11;

     label10:
        r10 = null;

     label11:
        r3.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions returningOptions> = r10;

     label12:
        z0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean setOccludesParent(boolean)>(0);

        exitmonitor r9;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label14:
        $r6 := @caughtexception;

     label15:
        exitmonitor r9;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label17:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    protected com.android.server.wm.AppWarnings createAppWarnings(android.content.Context, android.os.Handler, android.os.Handler, java.io.File)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.Context r1;
        android.os.Handler r2, r3;
        java.io.File r4;
        com.android.server.wm.AppWarnings $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: java.io.File;

        $r5 = new com.android.server.wm.AppWarnings;

        specialinvoke $r5.<com.android.server.wm.AppWarnings: void <init>(com.android.server.wm.ActivityTaskManagerService,android.content.Context,android.os.Handler,android.os.Handler,java.io.File)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    protected com.android.server.wm.ActivityStackSupervisor createStackSupervisor()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityStackSupervisor $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;
        android.os.Looper $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r2 = new com.android.server.wm.ActivityStackSupervisor;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: android.os.Looper getLooper()>();

        specialinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void <init>(com.android.server.wm.ActivityTaskManagerService,android.os.Looper)>(r0, $r4);

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void initialize()>();

        return $r2;
    }

    void deferWindowLayout()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerService $r1, $r3;
        com.android.server.wm.WindowSurfacePlacer $r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowSurfacePlacer: boolean isLayoutDeferred()>();

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mLayoutReasons> = 0;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r4.<com.android.server.wm.WindowSurfacePlacer: void deferLayout()>();

        return;
    }

    public void dismissKeyguard(android.os.IBinder, com.android.internal.policy.IKeyguardDismissCallback, java.lang.CharSequence)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.internal.policy.IKeyguardDismissCallback r1;
        java.lang.CharSequence r2;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r3;
        com.android.server.wm.KeyguardController $r4;
        android.app.ActivityManagerInternal $r5;
        java.lang.Throwable $r6, $r7;
        android.os.IBinder r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: android.os.IBinder;

        r1 := @parameter1: com.android.internal.policy.IKeyguardDismissCallback;

        r2 := @parameter2: java.lang.CharSequence;

        if r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r5.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SHOW_KEYGUARD_MESSAGE", "dismissKeyguard()");

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.KeyguardController mKeyguardController>;

        virtualinvoke $r4.<com.android.server.wm.KeyguardController: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>(r8, r1, r2);

        exitmonitor r3;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r3;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label9:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    void dumpActivitiesLocked(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], int, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        int i0;
        boolean z0, z1;
        java.lang.String r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        r4 := @parameter6: java.lang.String;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void dumpActivitiesLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean,java.lang.String,java.lang.String)>(r1, r2, r3, i0, z0, z1, r4, "ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)");

        return;
    }

    void dumpActivitiesLocked(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], int, boolean, boolean, java.lang.String, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        int i0;
        java.lang.String r4, r5;
        com.android.server.wm.RootWindowContainer $r6, $r7;
        com.android.server.wm.ActivityRecord $r8;
        boolean $z0, z1, z2, z3, z4;
        com.android.server.wm.ActivityStackSupervisor $r9;
        com.android.server.wm.TaskOrganizerController $r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        r4 := @parameter6: java.lang.String;

        r5 := @parameter7: java.lang.String;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(r5);

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        z3 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: boolean dumpActivities(java.io.FileDescriptor,java.io.PrintWriter,boolean,boolean,java.lang.String)>(r1, r2, z1, z2, r4);

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getTopResumedActivity()>();

        $z0 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean printThisActivity(java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String,boolean,java.lang.String,java.lang.Runnable)>(r2, $r8, r4, z3, "  ResumedActivity: ", null);

        if $z0 == 0 goto label1;

        z3 = 1;

        z4 = 0;

        goto label2;

     label1:
        z4 = z3;

     label2:
        if r4 != null goto label4;

        if z4 == 0 goto label3;

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label3:
        z3 = 1;

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: void dump(java.io.PrintWriter,java.lang.String)>(r2, "  ");

        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r10.<com.android.server.wm.TaskOrganizerController: void dump(java.io.PrintWriter,java.lang.String)>(r2, "  ");

     label4:
        if z3 != 0 goto label5;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  (nothing)");

     label5:
        return;
    }

    protected boolean dumpActivity(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String, java.lang.String[], int, boolean, boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.PrintWriter r1;
        boolean z0, z1, z2, z3;
        java.util.ArrayList r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.Object $r3, $r4;
        com.android.server.wm.ActivityRecord $r5, r21;
        java.lang.String $r6, r14;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12, r24, r25;
        java.io.FileDescriptor r13;
        java.lang.String[] r15, r18;
        com.android.server.wm.WindowManagerGlobalLock r16, r22;
        com.android.server.wm.RootWindowContainer r17;
        com.android.server.wm.Task r20, r23;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r13 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r14 := @parameter2: java.lang.String;

        r15 := @parameter3: java.lang.String[];

        i8 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        r16 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r17 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

     label02:
        r2 = virtualinvoke r17.<com.android.server.wm.RootWindowContainer: java.util.ArrayList getDumpActivities(java.lang.String,boolean,boolean)>(r14, z1, z2);

        exitmonitor r16;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i0 > 0 goto label04;

        return 0;

     label04:
        $i1 = lengthof r15;

        $i2 = $i1 - i8;

        r18 = newarray (java.lang.String)[$i2];

        $i3 = lengthof r15;

        $i4 = $i3 - i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r15, i8, r18, 0, $i4);

        $i5 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i9 = $i5 - 1;

        z3 = 0;

        r20 = null;

     label05:
        if i9 < 0 goto label21;

        $r3 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r21 = (com.android.server.wm.ActivityRecord) $r3;

        if z3 == 0 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label06:
        r22 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r22;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r23 = virtualinvoke r21.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

     label08:
        if r20 == r23 goto label14;

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("TASK ");

        $r6 = r23.<com.android.server.wm.Task: java.lang.String affinity>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" id=");

        $i6 = r23.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" userId=");

        $i7 = r23.<com.android.server.wm.Task: int mUserId>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i7);

     label10:
        if z0 == 0 goto label12;

     label11:
        virtualinvoke r23.<com.android.server.wm.Task: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

     label12:
        r20 = r23;

        goto label14;

     label13:
        $r7 := @caughtexception;

        r24 = $r7;

        goto label18;

     label14:
        exitmonitor r22;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r4 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r5 = (com.android.server.wm.ActivityRecord) $r4;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void dumpActivity(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String[],boolean)>("  ", r13, r1, $r5, r18, z0);

        i9 = i9 + -1;

        z3 = 1;

        goto label05;

     label16:
        $r9 := @caughtexception;

        r24 = $r9;

        goto label18;

     label17:
        $r11 := @caughtexception;

        r24 = $r11;

     label18:
        exitmonitor r22;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r24;

     label20:
        $r12 := @caughtexception;

        r24 = $r12;

        goto label18;

     label21:
        return 1;

     label22:
        $r8 := @caughtexception;

        r25 = $r8;

     label23:
        exitmonitor r16;

     label24:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r25;

     label25:
        $r10 := @caughtexception;

        r25 = $r10;

        goto label23;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    void dumpActivityContainersLocked(java.io.PrintWriter)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.PrintWriter r1;
        com.android.server.wm.RootWindowContainer $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ACTIVITY MANAGER CONTAINERS (dumpsys activity containers)");

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void dumpChildrenNames(java.io.PrintWriter,java.lang.String)>(r1, " ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        return;
    }

    void dumpActivityStarterLocked(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        com.android.server.wm.ActivityStartController $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ACTIVITY MANAGER STARTER (dumpsys activity starter)");

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        virtualinvoke $r3.<com.android.server.wm.ActivityStartController: void dump(java.io.PrintWriter,java.lang.String,java.lang.String)>(r1, "", r2);

        return;
    }

    void dumpLastANRLocked(java.io.PrintWriter)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ACTIVITY MANAGER LAST ANR (dumpsys activity lastanr)");

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mLastANRState>;

        if r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  <no ANR has occurred since boot>");

        goto label2;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r2);

     label2:
        return;
    }

    void dumpLastANRTracesLocked(java.io.PrintWriter)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.io.PrintWriter r1;
        java.io.File[] r2;
        int i0, i4;
        java.io.File $r3, r8, r9, r10;
        boolean $z0;
        java.lang.String $r4, r13;
        long $l1, $l2;
        byte $b3;
        java.lang.Throwable $r5, $r6, $r7;
        java.io.BufferedReader r11;
        java.io.FileReader r12;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ACTIVITY MANAGER LAST ANR TRACES (dumpsys activity lastanr-traces)");

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/data/anr");

        r2 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r2);

        if $z0 == 0 goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  <no ANR has occurred since boot>");

        return;

     label01:
        r8 = null;

        i0 = lengthof r2;

        i4 = 0;

     label02:
        if i4 >= i0 goto label05;

        r9 = r2[i4];

        if r8 == null goto label03;

        r10 = r8;

        $l1 = virtualinvoke r8.<java.io.File: long lastModified()>();

        $l2 = virtualinvoke r9.<java.io.File: long lastModified()>();

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label04;

     label03:
        r10 = r9;

     label04:
        i4 = i4 + 1;

        r8 = r10;

        goto label02;

     label05:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("File: ");

        $r4 = virtualinvoke r8.<java.io.File: java.lang.String getName()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label06:
        r11 = new java.io.BufferedReader;

        r12 = new java.io.FileReader;

        specialinvoke r12.<java.io.FileReader: void <init>(java.io.File)>(r8);

        specialinvoke r11.<java.io.BufferedReader: void <init>(java.io.Reader)>(r12);

     label07:
        r13 = virtualinvoke r11.<java.io.BufferedReader: java.lang.String readLine()>();

     label08:
        if r13 == null goto label11;

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r13);

     label10:
        goto label07;

     label11:
        virtualinvoke r11.<java.io.BufferedReader: void close()>();

     label12:
        goto label20;

     label13:
        $r5 := @caughtexception;

     label14:
        virtualinvoke r11.<java.io.BufferedReader: void close()>();

     label15:
        goto label18;

     label16:
        $r6 := @caughtexception;

     label17:
        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label18:
        throw $r5;

     label19:
        $r7 := @caughtexception;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Unable to read: ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r7);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label20:
        return;

        catch java.io.IOException from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label18 to label19 with label19;
    }

    void enableScreenAfterBoot(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long $l0;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <com.android.server.am.EventLogTags: void writeBootProgressEnableScreen(long)>($l0);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void enableScreenAfterBoot()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateEventDispatchingLocked(boolean)>(z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void enforceSystemHasVrFeature()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.vr.high_performance");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("VR mode not supported on this device!");

        throw $r3;
    }

    boolean ensureConfigAndVisibilityAfterUpdate(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1, r5;
        int i0;
        com.android.server.wm.ActivityStack r2;
        com.android.server.wm.RootWindowContainer $r3, $r4;
        boolean z1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        z1 = 1;

        if r2 == null goto label2;

        r5 = r1;

        if i0 == 0 goto label1;

        r5 = r1;

        if r1 != null goto label1;

        r5 = virtualinvoke r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label1:
        z1 = 1;

        if r5 == null goto label2;

        z1 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean)>(i0, 0);

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(r5, i0, 0);

     label2:
        return z1;
    }

    public boolean enterPictureInPictureMode(android.os.IBinder, android.app.PictureInPictureParams)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$js0zprxhKzo_Mx9ozR8logP_1_c r3;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r4, $r5;
        android.os.IBinder r6;
        android.app.PictureInPictureParams r7;
        com.android.server.wm.ActivityTaskManagerService$2 r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r6 := @parameter0: android.os.IBinder;

        r7 := @parameter1: android.app.PictureInPictureParams;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord ensureValidPictureInPictureActivityParamsLocked(java.lang.String,android.os.IBinder,android.app.PictureInPictureParams)>("enterPictureInPictureMode", r6, r7);

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isInPictureInPictureMode(com.android.server.wm.ActivityRecord)>(r2);

        if $z0 == 0 goto label04;

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label04:
        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean checkEnterPictureInPictureState(java.lang.String,boolean)>("enterPictureInPictureMode", 0);

        if $z1 != 0 goto label06;

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        r3 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$js0zprxhKzo_Mx9ozR8logP_1_c;

        specialinvoke r3.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$js0zprxhKzo_Mx9ozR8logP_1_c: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.ActivityRecord,android.app.PictureInPictureParams)>(r0, r2, r7);

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isKeyguardLocked()>();

        if $z2 == 0 goto label08;

        r8 = new com.android.server.wm.ActivityTaskManagerService$2;

        specialinvoke r8.<com.android.server.wm.ActivityTaskManagerService$2: void <init>(com.android.server.wm.ActivityTaskManagerService,java.lang.Runnable)>(r0, r3);

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>(r6, r8, null);

     label07:
        goto label09;

     label08:
        interfaceinvoke r3.<java.lang.Runnable: void run()>();

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label14:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public final boolean finishActivity(android.os.IBinder, int, android.content.Intent, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        android.content.Intent r1;
        com.android.server.wm.ActivityRecord r2, r5, $r7, r25;
        com.android.server.uri.NeededUriGrants r3;
        com.android.server.wm.Task r4;
        com.android.server.wm.ActivityStack r6;
        long l2, $l5;
        boolean $z1, $z2, $z3, z5, z6, z7, z8;
        com.android.server.wm.LockTaskController $r8;
        android.app.IActivityController $r9, $r13;
        com.android.server.wm.ActivityStackSupervisor $r10;
        com.android.server.wm.WindowProcessController $r11, $r27;
        java.lang.String $r12;
        java.lang.IllegalArgumentException $r14;
        java.lang.Throwable $r15, $r16, $r19, $r20, $r21, r29, r30;
        android.os.RemoteException $r17;
        com.android.server.Watchdog $r18;
        android.os.IBinder r22;
        com.android.server.wm.WindowManagerGlobalLock r23, r24;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r22 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.Intent;

        i1 := @parameter3: int;

        if r1 == null goto label02;

        $z3 = virtualinvoke r1.<android.content.Intent: boolean hasFileDescriptors()>();

        if $z3 != 0 goto label01;

        goto label02;

     label01:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File descriptors passed in Intent");

        throw $r14;

     label02:
        r23 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r23;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r22);

     label04:
        if r2 != null goto label07;

     label05:
        exitmonitor r23;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label07:
        exitmonitor r23;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r7 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        r3 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.NeededUriGrants collectGrants(android.content.Intent,com.android.server.wm.ActivityRecord)>(r1, $r7);

        r24 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r24;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isInHistory()>();

        if $z1 != 0 goto label11;

        exitmonitor r24;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label11:
        r4 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r5 = virtualinvoke r4.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

     label12:
        if r5 != null goto label14;

     label13:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Finishing task with all activities already finished");

     label14:
        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        $z2 = virtualinvoke $r8.<com.android.server.wm.LockTaskController: boolean activityBlockedFromFinish(com.android.server.wm.ActivityRecord)>(r2);

        if $z2 == 0 goto label16;

        exitmonitor r24;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label16:
        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController>;

        if $r9 == null goto label28;

     label17:
        r6 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

     label18:
        r25 = virtualinvoke r6.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity(android.os.IBinder,int)>(r22, -1);

     label19:
        if r25 == null goto label28;

     label20:
        $r13 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController>;

        $r12 = r25.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        z5 = interfaceinvoke $r13.<android.app.IActivityController: boolean activityResuming(java.lang.String)>($r12);

     label21:
        goto label25;

     label22:
        $r17 := @caughtexception;

     label23:
        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController> = null;

        $r18 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r18.<com.android.server.Watchdog: void setActivityController(android.app.IActivityController)>(null);

     label24:
        z5 = 1;

     label25:
        if z5 != 0 goto label28;

     label26:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", "Not finishing activity because controller resumed");

        exitmonitor r24;

     label27:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label28:
        $r27 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r27 == null goto label29;

        $r11 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r11.<com.android.server.wm.WindowProcessController: void setLastActivityFinishTimeIfNeeded(long)>($l5);

     label29:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "finishActivity");

     label30:
        if i1 != 1 goto label31;

        z6 = 1;

        goto label32;

     label31:
        z6 = 0;

     label32:
        if i1 == 2 goto label37;

        if z6 == 0 goto label33;

        if r2 != r5 goto label33;

        goto label37;

     label33:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: int finishIfPossible(int,android.content.Intent,com.android.server.uri.NeededUriGrants,java.lang.String,boolean)>(i0, r1, r3, "app-request", 1);

        z7 = r2.<com.android.server.wm.ActivityRecord: boolean finishing>;

     label34:
        z8 = z7;

        if z7 != 0 goto label39;

     label35:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", "Failed to finish by app-request");

     label36:
        z8 = z7;

        goto label39;

     label37:
        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r10.<com.android.server.wm.ActivityStackSupervisor: void removeTask(com.android.server.wm.Task,boolean,boolean,java.lang.String)>(r4, 0, z6, "finish-activity");

        r2.<com.android.server.wm.ActivityRecord: int mRelaunchReason> = 0;

     label38:
        z8 = 1;

     label39:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r24;

     label40:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z8;

     label41:
        $r19 := @caughtexception;

     label42:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label43:
        throw $r19;

     label44:
        $r20 := @caughtexception;

        r29 = $r20;

     label45:
        exitmonitor r24;

     label46:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r29;

     label47:
        $r15 := @caughtexception;

        r29 = $r15;

        goto label45;

     label48:
        $r21 := @caughtexception;

        r30 = $r21;

     label49:
        exitmonitor r23;

     label50:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r30;

     label51:
        $r16 := @caughtexception;

        r30 = $r16;

        goto label49;

        catch java.lang.Throwable from label03 to label04 with label48;
        catch java.lang.Throwable from label05 to label06 with label48;
        catch java.lang.Throwable from label07 to label08 with label48;
        catch java.lang.Throwable from label09 to label10 with label44;
        catch java.lang.Throwable from label11 to label12 with label44;
        catch java.lang.Throwable from label13 to label14 with label44;
        catch java.lang.Throwable from label14 to label15 with label44;
        catch java.lang.Throwable from label16 to label17 with label44;
        catch java.lang.Throwable from label17 to label18 with label44;
        catch java.lang.Throwable from label18 to label19 with label47;
        catch android.os.RemoteException from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label47;
        catch java.lang.Throwable from label23 to label24 with label47;
        catch java.lang.Throwable from label26 to label27 with label47;
        catch java.lang.Throwable from label28 to label29 with label47;
        catch java.lang.Throwable from label29 to label30 with label47;
        catch java.lang.Throwable from label33 to label34 with label41;
        catch java.lang.Throwable from label35 to label36 with label41;
        catch java.lang.Throwable from label37 to label38 with label41;
        catch java.lang.Throwable from label39 to label40 with label47;
        catch java.lang.Throwable from label42 to label43 with label47;
        catch java.lang.Throwable from label43 to label44 with label47;
        catch java.lang.Throwable from label45 to label46 with label47;
        catch java.lang.Throwable from label49 to label50 with label51;
    }

    public boolean finishActivityAffinity(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        boolean z0;
        com.android.internal.util.function.pooled.PooledFunction r2;
        com.android.server.wm.LockTaskController $r3;
        com.android.server.wm.'-$$Lambda$hwQLWout8wOWvnHXCxS5LJZGGvw' $r4;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r5;
        com.android.server.wm.Task $r6;
        java.lang.Throwable $r7, $r8;
        android.os.IBinder r9;
        com.android.server.wm.ActivityRecord r10;
        java.util.function.BiFunction r13;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r10 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r9);

     label03:
        if r10 != null goto label06;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label06:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        z0 = virtualinvoke $r3.<com.android.server.wm.LockTaskController: boolean activityBlockedFromFinish(com.android.server.wm.ActivityRecord)>(r10);

     label07:
        if z0 == 0 goto label10;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label10:
        $r4 = <com.android.server.wm._$$Lambda$hwQLWout8wOWvnHXCxS5LJZGGvw: com.android.server.wm.'-$$Lambda$hwQLWout8wOWvnHXCxS5LJZGGvw' INSTANCE>;

        $r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r13 = (java.util.function.BiFunction) $r4;

        r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(java.util.function.BiFunction,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r13, r10, $r5);

        $r6 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke $r6.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function,com.android.server.wm.WindowContainer,boolean,boolean)>(r2, r10, 1, 1);

        interfaceinvoke r2.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label13:
        $r8 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label15:
        throw $r8;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    void finishRunningVoiceLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.service.voice.IVoiceInteractionSession $r1;
        android.os.PowerManager$WakeLock $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        if $r1 == null goto label1;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice> = null;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManager$WakeLock mVoiceWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateSleepIfNeededLocked()>();

     label1:
        return;
    }

    public final void finishSubActivity(android.os.IBinder, java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        com.android.server.wm.'-$$Lambda$U9zpYh1OwxC9FZcjOfUJl0HQSho' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        com.android.server.wm.ActivityStack $r5;
        java.lang.Throwable $r6, $r7;
        android.os.IBinder r8;
        java.lang.String r9;
        com.android.server.wm.ActivityRecord r10;
        com.android.internal.util.function.pooled.PooledConsumer r11;
        com.android.internal.util.function.QuadConsumer r14;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: android.os.IBinder;

        r9 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r10 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r8);

     label03:
        if r10 != null goto label06;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r2 = <com.android.server.wm._$$Lambda$U9zpYh1OwxC9FZcjOfUJl0HQSho: com.android.server.wm.'-$$Lambda$U9zpYh1OwxC9FZcjOfUJl0HQSho' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r14 = (com.android.internal.util.function.QuadConsumer) $r2;

        r11 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.QuadConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object,java.lang.Object)>(r14, $r3, r10, r9, $r4);

        $r5 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        virtualinvoke $r5.<com.android.server.wm.ActivityStack: void forAllActivities(java.util.function.Consumer)>(r11);

        interfaceinvoke r11.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateOomAdj()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r6 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label12:
        throw $r6;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void finishVoiceTask(android.service.voice.IVoiceInteractionSession)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3, $r4;
        android.service.voice.IVoiceInteractionSession r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.service.voice.IVoiceInteractionSession;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)>(r5);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r4;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.content.ComponentName getActivityClassForToken(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Intent $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label2:
        if r5 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label5:
        $r2 = r5.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        r6 = virtualinvoke $r2.<android.content.Intent: android.content.ComponentName getComponent()>();

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r6;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.os.Bundle getActivityOptions(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;
        android.os.Bundle r6;
        android.app.ActivityOptions r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label03:
        r6 = null;

        if r5 == null goto label09;

     label04:
        r7 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions takeOptionsLocked(boolean)>(1);

     label05:
        if r7 != null goto label06;

        goto label07;

     label06:
        r6 = virtualinvoke r7.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r6;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label14:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    com.android.server.wm.ActivityStartController getActivityStartController()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityStartController $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController mActivityStartController>;

        return $r1;
    }

    public java.util.List getAllStackInfos()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        java.util.ArrayList r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getAllStackInfos()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r5 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: java.util.ArrayList getAllStackInfos(int)>(-1);

        exitmonitor r4;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public java.util.List getAllStackInfosOnDisplay(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        java.util.ArrayList r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getAllStackInfos()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r5 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: java.util.ArrayList getAllStackInfos(int)>(i0);

        exitmonitor r4;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r5;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        android.content.pm.ApplicationInfo $r1, r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r2 := @parameter0: android.content.pm.ApplicationInfo;

        i0 := @parameter1: int;

        if r2 != null goto label1;

        return null;

     label1:
        $r1 = new android.content.pm.ApplicationInfo;

        specialinvoke $r1.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>(r2);

        virtualinvoke $r1.<android.content.pm.ApplicationInfo: void initForUser(int)>(i0);

        return $r1;
    }

    android.app.AppOpsManager getAppOpsManager()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.AppOpsManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.AppOpsManager mAppOpsManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r5 = (android.app.AppOpsManager) $r4;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.AppOpsManager mAppOpsManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.AppOpsManager mAppOpsManager>;

        return $r2;
    }

    public android.graphics.Point getAppTaskThumbnailSize()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int $i0, $i1;
        java.lang.Throwable $r2;
        android.graphics.Point r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = new android.graphics.Point;

        $i1 = r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailWidth>;

        $i0 = r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailHeight>;

        specialinvoke r3.<android.graphics.Point: void <init>(int,int)>($i1, $i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.List getAppTasks(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RecentTasks $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        java.util.ArrayList r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r5);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        r6 = virtualinvoke $r2.<com.android.server.wm.RecentTasks: java.util.ArrayList getAppTasksList(int,java.lang.String)>(i0, r5);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    com.android.server.wm.AppWarnings getAppWarningsLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.AppWarnings $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings mAppWarnings>;

        return $r1;
    }

    public android.os.Bundle getAssistContextExtras(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        boolean z0;
        android.os.Bundle $r1, $r4;
        java.util.ArrayList $r2;
        com.android.server.wm.ActivityTaskManagerService$UiHandler $r3;
        java.lang.Throwable $r5, $r6, $r7;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras r8;
        com.android.server.wm.WindowManagerGlobalLock r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r8 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>(i0, null, null, null, null, null, 1, 1, $i1, null, 500L, 0);

        if r8 != null goto label01;

        return null;

     label01:
        entermonitor r8;

     label02:
        z0 = r8.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: boolean haveResult>;

     label03:
        if z0 != 0 goto label07;

     label04:
        virtualinvoke r8.<java.lang.Object: void wait()>();

     label05:
        goto label02;

     label06:
        $r5 := @caughtexception;

        goto label05;

     label07:
        exitmonitor r8;

     label08:
        r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r10;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r8.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle result>;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void buildAssistBundleLocked(com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras,android.os.Bundle)>(r8, $r1);

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mPendingAssistExtras>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r8);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$UiHandler: void removeCallbacks(java.lang.Runnable)>(r8);

        exitmonitor r10;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r4 = r8.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        return $r4;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r10;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label14:
        $r7 := @caughtexception;

     label15:
        exitmonitor r8;

     label16:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public com.android.server.wm.ActivityTaskManagerInternal getAtmInternal()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityTaskManagerInternal $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerInternal mInternal>;

        return $r1;
    }

    public android.content.ComponentName getCallingActivity(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Intent $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord getCallingRecordLocked(android.os.IBinder)>(r4);

     label02:
        if r5 == null goto label05;

     label03:
        $r2 = r5.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        r6 = virtualinvoke $r2.<android.content.Intent: android.content.ComponentName getComponent()>();

     label04:
        goto label06;

     label05:
        r6 = null;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r6;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String getCallingPackage(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.pm.ActivityInfo $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;
        java.lang.String r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord getCallingRecordLocked(android.os.IBinder)>(r4);

     label02:
        if r5 == null goto label05;

     label03:
        $r2 = r5.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        r6 = $r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

     label04:
        goto label06;

     label05:
        r6 = null;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r6;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.content.res.Configuration getConfiguration()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.res.Configuration $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = new android.content.res.Configuration;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfigurationForCallingPid()>();

        specialinvoke r4.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r2);

        r4.<android.content.res.Configuration: boolean userSetLocale> = 0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int getCurrentUserId()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i0 = virtualinvoke $r1.<android.app.ActivityManagerInternal: int getCurrentUserId()>();

        return $i0;
    }

    public android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.res.Configuration r2;
        android.content.pm.ConfigurationInfo $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r3 = new android.content.pm.ConfigurationInfo;

        specialinvoke $r3.<android.content.pm.ConfigurationInfo: void <init>()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfigurationForCallingPid()>();

        $i0 = r2.<android.content.res.Configuration: int touchscreen>;

        $r3.<android.content.pm.ConfigurationInfo: int reqTouchScreen> = $i0;

        $i1 = r2.<android.content.res.Configuration: int keyboard>;

        $r3.<android.content.pm.ConfigurationInfo: int reqKeyboardType> = $i1;

        $i2 = r2.<android.content.res.Configuration: int navigation>;

        $r3.<android.content.pm.ConfigurationInfo: int reqNavigation> = $i2;

        $i3 = r2.<android.content.res.Configuration: int navigation>;

        if $i3 == 2 goto label2;

        $i9 = r2.<android.content.res.Configuration: int navigation>;

        if $i9 != 3 goto label3;

     label2:
        $i4 = $r3.<android.content.pm.ConfigurationInfo: int reqInputFeatures>;

        $i5 = $i4 | 2;

        $r3.<android.content.pm.ConfigurationInfo: int reqInputFeatures> = $i5;

     label3:
        $i10 = r2.<android.content.res.Configuration: int keyboard>;

        if $i10 == 0 goto label4;

        $i6 = r2.<android.content.res.Configuration: int keyboard>;

        if $i6 == 1 goto label4;

        $i7 = $r3.<android.content.pm.ConfigurationInfo: int reqInputFeatures>;

        $i8 = $i7 | 1;

        $r3.<android.content.pm.ConfigurationInfo: int reqInputFeatures> = $i8;

     label4:
        $i11 = r0.<com.android.server.wm.ActivityTaskManagerService: int GL_ES_VERSION>;

        $r3.<android.content.pm.ConfigurationInfo: int reqGlEsVersion> = $i11;

        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return $r3;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int getDisplayId(android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0, i1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityStack r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStackLocked(android.os.IBinder)>(r3);

     label02:
        i1 = 0;

        if r4 == null goto label07;

     label03:
        i0 = virtualinvoke r4.<com.android.server.wm.ActivityStack: int getDisplayId()>();

     label04:
        if i0 == -1 goto label05;

        i1 = i0;

     label05:
        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i1;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label09:
        $r2 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public java.util.List getFilteredTasks(int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        boolean z0, z1, z2;
        com.android.server.wm.RootWindowContainer r2;
        com.android.server.pm.UserManagerService $r3;
        android.util.ArraySet $r4;
        java.util.ArrayList $r5;
        java.lang.Integer $r6;
        java.lang.Throwable $r7, $r8, r14;
        int[] r9;
        com.android.server.wm.WindowManagerGlobalLock r11, r13, r15;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        z1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isCrossUserAllowed(int,int)>(i2, i1);

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.pm.UserManagerService getUserManager()>();

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r9 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: int[] getProfileIds(int,boolean)>($i3, 1);

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        i6 = 0;

     label01:
        $i4 = lengthof r9;

        if i6 >= $i4 goto label02;

        $i5 = r9[i6];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>($r6);

        i6 = i6 + 1;

        goto label01;

     label02:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r11 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r11;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        z2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isGetTasksAllowed(java.lang.String,int,int)>("getTasks", i2, i1);

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

     label04:
        r13 = r11;

     label05:
        virtualinvoke r2.<com.android.server.wm.RootWindowContainer: void getRunningTasks(int,java.util.List,boolean,int,boolean,boolean,android.util.ArraySet)>(i0, $r5, z0, i1, z2, z1, $r4);

     label06:
        r13 = r11;

     label07:
        exitmonitor r11;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return $r5;

     label09:
        $r8 := @caughtexception;

        r14 = $r8;

        r15 = r11;

     label10:
        r13 = r15;

     label11:
        exitmonitor r15;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r14;

     label13:
        $r7 := @caughtexception;

        r14 = $r7;

        r15 = r13;

        goto label10;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public android.app.ActivityManager$StackInfo getFocusedStackInfo() throws android.os.RemoteException
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        int $i1;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        com.android.server.wm.ActivityStack r5;
        android.app.ActivityManager$StackInfo r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label03:
        if r5 == null goto label06;

     label04:
        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i1 = r5.<com.android.server.wm.ActivityStack: int mTaskId>;

        r6 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(int)>($i1);

        exitmonitor r4;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r6;

     label06:
        exitmonitor r4;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r4;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label11:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public int getFrontActivityScreenCompatMode()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        android.content.pm.ActivityInfo $r2;
        android.content.pm.ApplicationInfo $r3;
        com.android.server.wm.CompatModePackages $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.ActivityStack r6;
        com.android.server.wm.ActivityRecord r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("getFrontActivityScreenCompatMode");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label02:
        if r6 == null goto label05;

     label03:
        r7 = virtualinvoke r6.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        if r7 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -3;

     label09:
        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        $r2 = r7.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r3 = $r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = virtualinvoke $r4.<com.android.server.wm.CompatModePackages: int computeCompatModeLocked(android.content.pm.ApplicationInfo)>($r3);

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    android.content.res.Configuration getGlobalConfiguration()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration $r1, r3;
        com.android.server.wm.RootWindowContainer r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<com.android.server.wm.RootWindowContainer: android.content.res.Configuration getConfiguration()>();

        goto label2;

     label1:
        $r1 = new android.content.res.Configuration;

        specialinvoke $r1.<android.content.res.Configuration: void <init>()>();

        r3 = $r1;

     label2:
        return r3;
    }

    android.content.res.Configuration getGlobalConfigurationForCallingPid()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int $i0;
        android.content.res.Configuration $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfigurationForPid(int)>($i0);

        return $r1;
    }

    android.content.res.Configuration getGlobalConfigurationForPid(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.res.Configuration $r2, r6;
        com.android.server.wm.WindowProcessControllerMap $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.WindowProcessController r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $i1 = <com.android.server.am.ActivityManagerService: int MY_PID>;

        if i0 == $i1 goto label12;

        if i0 >= 0 goto label01;

        goto label12;

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        r5 = virtualinvoke $r3.<com.android.server.wm.WindowProcessControllerMap: com.android.server.wm.WindowProcessController getProcess(int)>(i0);

     label03:
        if r5 == null goto label06;

     label04:
        r6 = virtualinvoke r5.<com.android.server.wm.WindowProcessController: android.content.res.Configuration getConfiguration()>();

     label05:
        goto label07;

     label06:
        r6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r6;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label12:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

        return $r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public com.android.server.wm.WindowManagerGlobalLock getGlobalLock()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        return $r1;
    }

    android.content.Intent getHomeIntent()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r7;
        android.content.Intent $r2;
        android.content.ComponentName $r3;
        int $i0;
        android.net.Uri r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mTopAction>;

        r7 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mTopData>;

        if r7 == null goto label1;

        r8 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r7);

        goto label2;

     label1:
        r8 = null;

     label2:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>(r1, r8);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName mTopComponent>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r3);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(256);

        $i0 = r0.<com.android.server.wm.ActivityTaskManagerService: int mFactoryTest>;

        if $i0 == 1 goto label3;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

     label3:
        return $r2;
    }

    android.content.IIntentSender getIntentSenderLocked(int, java.lang.String, java.lang.String, int, int, android.os.IBinder, java.lang.String, int, android.content.Intent[], java.lang.String[], int, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, i3, $i4, i7;
        java.lang.String r1, r3, $r16, $r21, r22;
        android.os.IBinder r2;
        android.content.Intent[] r4;
        java.lang.String[] r5;
        android.os.Bundle r6;
        com.android.server.am.PendingIntentController $r7;
        java.util.HashSet $r8, $r10, $r11;
        java.lang.ref.WeakReference $r9;
        boolean $z1, z2;
        java.lang.StringBuilder $r12, $r17;
        com.android.server.wm.ActivityRecord r23;
        com.android.server.am.PendingIntentRecord r26;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r22 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        i7 := @parameter3: int;

        i1 := @parameter4: int;

        r2 := @parameter5: android.os.IBinder;

        r3 := @parameter6: java.lang.String;

        i2 := @parameter7: int;

        r4 := @parameter8: android.content.Intent[];

        r5 := @parameter9: java.lang.String[];

        i3 := @parameter10: int;

        r6 := @parameter11: android.os.Bundle;

        if i0 != 3 goto label3;

        r23 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r2);

        if r23 != null goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed createPendingResult: activity ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in any stack");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r21);

        return null;

     label1:
        $z1 = r23.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z1 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed createPendingResult: activity ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is finishing");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r16);

        return null;

     label2:
        goto label4;

     label3:
        r23 = null;

     label4:
        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.PendingIntentController mPendingIntentController>;

        r26 = virtualinvoke $r7.<com.android.server.am.PendingIntentController: com.android.server.am.PendingIntentRecord getIntentSender(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>(i0, r22, r1, i7, i1, r2, r3, i2, r4, r5, i3, r6);

        $i4 = i3 & 536870912;

        if $i4 == 0 goto label5;

        z2 = 1;

        goto label6;

     label5:
        z2 = 0;

     label6:
        if z2 == 0 goto label7;

        return r26;

     label7:
        if i0 != 3 goto label9;

        $r8 = r23.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults>;

        if $r8 != null goto label8;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r23.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults> = $r11;

     label8:
        $r10 = r23.<com.android.server.wm.ActivityRecord: java.util.HashSet pendingResults>;

        $r9 = r26.<com.android.server.am.PendingIntentRecord: java.lang.ref.WeakReference ref>;

        virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        goto label9;

     label9:
        return r26;
    }

    public int getLastResumedActivityUserId()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r3;
        com.android.server.wm.ActivityRecord $r4, $r5;
        java.lang.Throwable $r6;
        int i0, i1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "getLastResumedActivityUserId()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        if $r4 != null goto label3;

        i0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int getCurrentUserId()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label3:
        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        i1 = $r5.<com.android.server.wm.ActivityRecord: int mUserId>;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i1;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    long getLastStopAppSwitchesTime()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long $l0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $l0 = r0.<com.android.server.wm.ActivityTaskManagerService: long mLastStopAppSwitchesTime>;

        return $l0;
    }

    public java.lang.String getLaunchedFromPackage(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.String $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r5 != null goto label3;

        return null;

     label3:
        $r2 = r5.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getLaunchedFromUid(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int $i0;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r3);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r4 != null goto label3;

        return -1;

     label3:
        $i0 = r4.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        return $i0;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    com.android.server.wm.ClientLifecycleManager getLifecycleManager()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ClientLifecycleManager $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager mLifecycleManager>;

        return $r1;
    }

    com.android.server.wm.LockTaskController getLockTaskController()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.LockTaskController $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController mLockTaskController>;

        return $r1;
    }

    public int getLockTaskModeState()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        com.android.server.wm.LockTaskController $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        i0 = virtualinvoke $r3.<com.android.server.wm.LockTaskController: int getLockTaskModeState()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getMaxNumPictureInPictureActions(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.os.IBinder;

        return 3;
    }

    public boolean getPackageAskScreenCompat(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.CompatModePackages $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("getPackageAskScreenCompat");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        z0 = virtualinvoke $r2.<com.android.server.wm.CompatModePackages: boolean getPackageAskCompatModeLocked(java.lang.String)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getPackageForToken(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;
        java.lang.String r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label5:
        r5 = r4.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r5;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    android.content.pm.IPackageManager getPackageManager()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.pm.IPackageManager $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        return $r1;
    }

    android.content.pm.PackageManagerInternal getPackageManagerInternalLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.pm.PackageManagerInternal $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r4 = (android.content.pm.PackageManagerInternal) $r3;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.PackageManagerInternal mPmInternal> = $r4;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        return $r2;
    }

    public int getPackageScreenCompatMode(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        com.android.server.wm.CompatModePackages $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("getPackageScreenCompatMode");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        i0 = virtualinvoke $r2.<com.android.server.wm.CompatModePackages: int getPackageScreenCompatModeLocked(java.lang.String)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getPendingTempWhitelistTagForUidLocked(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.util.SparseArray mPendingTempWhitelist>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    com.android.server.policy.PermissionPolicyInternal getPermissionPolicyInternal()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.policy.PermissionPolicyInternal $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/policy/PermissionPolicyInternal;");

        $r4 = (com.android.server.policy.PermissionPolicyInternal) $r3;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal> = $r4;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.policy.PermissionPolicyInternal mPermissionPolicyInternal>;

        return $r2;
    }

    com.android.server.wm.WindowProcessController getProcessController(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, $i2;
        com.android.server.wm.WindowProcessController r1;
        com.android.server.wm.WindowProcessControllerMap $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowProcessControllerMap: com.android.server.wm.WindowProcessController getProcess(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i1);

        if $z0 == 0 goto label2;

        $i2 = r1.<com.android.server.wm.WindowProcessController: int mUid>;

        if $i2 != i1 goto label2;

        return r1;

     label2:
        return null;
    }

    com.android.server.wm.WindowProcessController getProcessController(android.app.IApplicationThread)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1, $r8;
        android.util.ArrayMap r2;
        android.util.SparseArray r3;
        com.android.internal.app.ProcessMap $r4;
        int $i0, $i1, i2, i3;
        java.lang.Object $r5, $r6;
        boolean $z0;
        android.app.IApplicationThread $r7, r9;
        com.android.server.wm.WindowProcessController r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.app.IApplicationThread;

        if r9 != null goto label1;

        return null;

     label1:
        r1 = interfaceinvoke r9.<android.app.IApplicationThread: android.os.IBinder asBinder()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.ProcessMap mProcessNames>;

        r2 = virtualinvoke $r4.<com.android.internal.app.ProcessMap: android.util.ArrayMap getMap()>();

        $i0 = virtualinvoke r2.<android.util.ArrayMap: int size()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label6;

        $r5 = virtualinvoke r2.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        r3 = (android.util.SparseArray) $r5;

        $i1 = virtualinvoke r3.<android.util.SparseArray: int size()>();

        i3 = $i1 - 1;

     label3:
        if i3 < 0 goto label5;

        $r6 = virtualinvoke r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r10 = (com.android.server.wm.WindowProcessController) $r6;

        $z0 = virtualinvoke r10.<com.android.server.wm.WindowProcessController: boolean hasThread()>();

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke r10.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r8 = interfaceinvoke $r7.<android.app.IApplicationThread: android.os.IBinder asBinder()>();

        if $r8 != r1 goto label4;

        return r10;

     label4:
        i3 = i3 + -1;

        goto label3;

     label5:
        i2 = i2 + -1;

        goto label2;

     label6:
        return null;
    }

    com.android.server.wm.WindowProcessController getProcessController(java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        android.util.SparseArray r2;
        com.android.internal.app.ProcessMap $r3, $r6;
        java.lang.Object $r4, $r8, $r9;
        com.android.server.wm.WindowProcessController $r5, $r10;
        android.util.ArrayMap $r7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 1000 goto label5;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.ProcessMap mProcessNames>;

        $r7 = virtualinvoke $r6.<com.android.internal.app.ProcessMap: android.util.ArrayMap getMap()>();

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.util.SparseArray) $r8;

        if r2 != null goto label1;

        return null;

     label1:
        i1 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        i3 = 0;

     label2:
        if i3 >= i1 goto label5;

        i2 = virtualinvoke r2.<android.util.SparseArray: int keyAt(int)>(i3);

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i2);

        if $z0 != 0 goto label4;

        $z1 = staticinvoke <android.os.UserHandle: boolean isSameUser(int,int)>(i2, i0);

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        $r9 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r10 = (com.android.server.wm.WindowProcessController) $r9;

        return $r10;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.ProcessMap mProcessNames>;

        $r4 = virtualinvoke $r3.<com.android.internal.app.ProcessMap: java.lang.Object get(java.lang.String,int)>(r1, i0);

        $r5 = (com.android.server.wm.WindowProcessController) $r4;

        return $r5;
    }

    public android.content.pm.ParceledListSlice getRecentTasks(int, int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, $i3, $i4, i5, i6;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RecentTasks $r2;
        java.lang.Throwable $r3;
        android.content.pm.ParceledListSlice r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 := @parameter2: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>($i3, i2, i5, "getRecentTasks");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        z0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isGetTasksAllowed(java.lang.String,int,int)>("getRecentTasks", $i4, i2);

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        r4 = virtualinvoke $r2.<com.android.server.wm.RecentTasks: android.content.pm.ParceledListSlice getRecentTasks(int,int,boolean,int,int)>(i0, i1, z0, i6, i2);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    com.android.server.wm.RecentTasks getRecentTasks()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.RecentTasks $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        return $r1;
    }

    public int getRequestedOrientation(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;
        int i0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

     label02:
        if r4 == null goto label05;

     label03:
        i0 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: int getRequestedOrientation()>();

     label04:
        goto label06;

     label05:
        i0 = -1;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    android.content.Intent getSecondaryHomeIntent(java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r2, $r8, r13;
        boolean z0;
        android.content.Intent $r3;
        android.content.Context $r4, $r6;
        android.content.res.Resources $r5, $r7;
        android.net.Uri r14;
        int $i0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mTopAction>;

        r13 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mTopData>;

        if r13 == null goto label1;

        r14 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r13);

        goto label2;

     label1:
        r14 = null;

     label2:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>(r2, r14);

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r5.<android.content.res.Resources: boolean getBoolean(int)>(17891574);

        if r1 == null goto label4;

        if z0 == 0 goto label3;

        goto label4;

     label3:
        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        goto label5;

     label4:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(17039945);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r8);

     label5:
        virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(256);

        $i0 = r0.<com.android.server.wm.ActivityTaskManagerService: int mFactoryTest>;

        if $i0 == 1 goto label6;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.SECONDARY_HOME");

     label6:
        return $r3;
    }

    public android.app.ActivityManager$StackInfo getStackInfo(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        long l2;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        android.app.ActivityManager$StackInfo r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r5 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(int,int)>(i0, i1);

        exitmonitor r4;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r5;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public android.app.ActivityManager$StackInfo getStackInfoOnDisplay(int, int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2;
        long l3;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        android.app.ActivityManager$StackInfo r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r5 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(int,int,int)>(i0, i1, i2);

        exitmonitor r4;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    android.content.ComponentName getSysUiServiceComponentLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.ComponentName $r1, $r2, $r4;
        android.content.pm.PackageManagerInternal $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName mSysUiServiceComponent>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.PackageManagerInternal getPackageManagerInternalLocked()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: android.content.ComponentName getSystemUiServiceComponent()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName mSysUiServiceComponent> = $r4;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName mSysUiServiceComponent>;

        return $r2;
    }

    public android.graphics.Rect getTaskBounds(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        android.app.ActivityManagerInternal $r1;
        android.graphics.Rect $r2, $r5, $r6, $r7;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.WindowContainer $r4;
        java.lang.String $r11;
        java.lang.Throwable $r12, $r13;
        com.android.server.wm.WindowManagerGlobalLock r15;
        com.android.server.wm.Task r16;
        java.lang.StringBuilder r17;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskBounds()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

     label01:
        r15 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r15;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r16 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 1);

     label03:
        if r16 != null goto label06;

     label04:
        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getTaskBounds: taskId=");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r11 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r11);

        exitmonitor r15;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return $r2;

     label06:
        $r4 = virtualinvoke r16.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if $r4 == null goto label08;

        $r7 = virtualinvoke r16.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

     label07:
        goto label09;

     label08:
        $r5 = r16.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        if $r5 == null goto label09;

        $r6 = r16.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r6);

     label09:
        exitmonitor r15;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return $r2;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor r15;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

     label15:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.TaskChangeNotificationController $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        return $r1;
    }

    public android.app.ActivityManager$TaskDescription getTaskDescription(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3;
        com.android.server.wm.Task r4;
        android.app.ActivityManager$TaskDescription r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskDescription()");

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r4 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 1);

     label2:
        if r4 == null goto label5;

     label3:
        r5 = virtualinvoke r4.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r5;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, $r5, $r6, $r13;
        int $i0, $i1, i2, i3;
        java.io.File $r2, $r3, $r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r12;
        com.android.server.wm.RecentTasks $r14;
        android.graphics.Bitmap $r15;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>($i0, $i1, i2, "getTaskDescriptionIcon");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        $r3 = new java.io.File;

        $r4 = staticinvoke <com.android.server.wm.TaskPersister: java.io.File getUserImagesDir(int)>(i3);

        $r5 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r5);

        $r6 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("_activity_icon_");

        if $z1 == 0 goto label1;

        $r14 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.RecentTasks: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String)>(r1);

        return $r15;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad file path: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed for userId ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    public int getTaskForActivity(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        i0 = staticinvoke <com.android.server.wm.ActivityRecord: int getTaskForActivityLocked(android.os.IBinder,boolean)>(r3, z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        boolean z0;
        long l1;
        java.lang.Throwable $r1;
        android.app.ActivityManager$TaskSnapshot r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.READ_FRAME_BUFFER", "getTaskSnapshot()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean,boolean)>(i0, z0, 1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r2;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getTasks(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        java.util.List $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: java.util.List getFilteredTasks(int,boolean)>(i0, 0);

        return $r1;
    }

    com.android.server.wm.ActivityStack getTopDisplayFocusedStack()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.RootWindowContainer $r1;
        com.android.server.wm.ActivityStack $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        return $r2;
    }

    int getUidState(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        com.android.server.wm.MirrorActiveUids $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.MirrorActiveUids mActiveUids>;

        $i1 = virtualinvoke $r1.<com.android.server.wm.MirrorActiveUids: int getUidState(int)>(i0);

        return $i1;
    }

    public android.os.IBinder getUriPermissionOwnerForActivity(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.IllegalArgumentException r2;
        java.lang.String $r5;
        com.android.server.uri.UriPermissionOwner $r6;
        java.lang.Throwable $r7;
        android.os.IBinder r8;
        com.android.server.wm.ActivityRecord r9;
        android.os.Binder r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: android.os.IBinder;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("getUriPermissionOwnerForActivity");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r9 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r8);

     label2:
        if r9 == null goto label5;

     label3:
        $r6 = virtualinvoke r9.<com.android.server.wm.ActivityRecord: com.android.server.uri.UriPermissionOwner getUriPermissionsLocked()>();

        r10 = virtualinvoke $r6.<com.android.server.uri.UriPermissionOwner: android.os.Binder getExternalToken()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r10;

     label5:
        r2 = new java.lang.IllegalArgumentException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activity does not exist; token=");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r5 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r2;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    com.android.server.pm.UserManagerService getUserManager()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.pm.UserManagerService $r1, $r2, $r5;
        android.os.IBinder $r3;
        android.os.IUserManager $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.pm.UserManagerService mUserManager>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("user");

        $r4 = staticinvoke <android.os.IUserManager$Stub: android.os.IUserManager asInterface(android.os.IBinder)>($r3);

        $r5 = (com.android.server.pm.UserManagerService) $r4;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.pm.UserManagerService mUserManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.pm.UserManagerService mUserManager>;

        return $r2;
    }

    public android.window.IWindowOrganizerController getWindowOrganizerController()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;
        com.android.server.wm.WindowOrganizerController $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "getWindowOrganizerController()");

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowOrganizerController mWindowOrganizerController>;

        return $r2;
    }

    int handleIncomingUser(int, int, int, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.app.ActivityManagerInternal $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i3 = virtualinvoke $r2.<android.app.ActivityManagerInternal: int handleIncomingUser(int,int,int,boolean,int,java.lang.String,java.lang.String)>(i0, i1, i2, 0, 0, r1, null);

        return $i3;
    }

    boolean hasSystemAlertWindowPermission(int, int, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.app.AppOpsManager $r2;
        boolean z1, z2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.app.AppOpsManager getAppOpsManager()>();

        i2 = virtualinvoke $r2.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(24, i0, r1, null, "");

        z1 = 1;

        if i2 != 3 goto label3;

        $i3 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>("android.permission.SYSTEM_ALERT_WINDOW", i1, i0);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;

     label3:
        if i2 != 0 goto label4;

        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        return z2;
    }

    boolean hasUserRestriction(java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.pm.UserManagerService getUserManager()>();

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    int increaseConfigurationSeqLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int $i0, i1, i2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $i0 = r0.<com.android.server.wm.ActivityTaskManagerService: int mConfigurationSeq>;

        i1 = $i0 + 1;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mConfigurationSeq> = i1;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 1);

        r0.<com.android.server.wm.ActivityTaskManagerService: int mConfigurationSeq> = i2;

        return i2;
    }

    public void initialize(com.android.server.firewall.IntentFirewall, com.android.server.am.PendingIntentController, android.os.Looper)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.am.PendingIntentController r1;
        android.os.Looper r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3, $r6, $r10, $r12, $r15;
        com.android.server.wm.ActivityTaskManagerService$UiHandler $r4, $r5;
        android.content.Context $r7, $r17;
        com.android.server.wm.AppWarnings $r8;
        com.android.server.wm.CompatModePackages $r9;
        com.android.server.wm.TaskChangeNotificationController $r11;
        com.android.server.wm.WindowManagerGlobalLock $r13, $r22;
        com.android.server.wm.LockTaskController $r14;
        com.android.server.wm.ActivityStackSupervisor $r16, $r20, $r23, r27;
        com.android.server.wm.ActivityStartController $r18;
        com.android.server.wm.RecentTasks $r19;
        com.android.server.wm.VrController $r21;
        com.android.server.wm.KeyguardController $r24;
        com.android.server.firewall.IntentFirewall r25;
        java.io.File r26;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r25 := @parameter0: com.android.server.firewall.IntentFirewall;

        r1 := @parameter1: com.android.server.am.PendingIntentController;

        r2 := @parameter2: android.os.Looper;

        $r3 = new com.android.server.wm.ActivityTaskManagerService$H;

        specialinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: void <init>(com.android.server.wm.ActivityTaskManagerService,android.os.Looper)>(r0, r2);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH> = $r3;

        $r4 = new com.android.server.wm.ActivityTaskManagerService$UiHandler;

        specialinvoke $r4.<com.android.server.wm.ActivityTaskManagerService$UiHandler: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler> = $r4;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.firewall.IntentFirewall mIntentFirewall> = r25;

        r26 = staticinvoke <com.android.server.SystemServiceManager: java.io.File ensureSystemDir()>();

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mUiContext>;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings createAppWarnings(android.content.Context,android.os.Handler,android.os.Handler,java.io.File)>($r7, $r6, $r5, r26);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings mAppWarnings> = $r8;

        $r9 = new com.android.server.wm.CompatModePackages;

        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        specialinvoke $r9.<com.android.server.wm.CompatModePackages: void <init>(com.android.server.wm.ActivityTaskManagerService,java.io.File,android.os.Handler)>(r0, r26, $r10);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages> = $r9;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.PendingIntentController mPendingIntentController> = r1;

        r27 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor createStackSupervisor()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor> = r27;

        $r11 = new com.android.server.wm.TaskChangeNotificationController;

        $r13 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        $r12 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        specialinvoke $r11.<com.android.server.wm.TaskChangeNotificationController: void <init>(java.lang.Object,com.android.server.wm.ActivityStackSupervisor,android.os.Handler)>($r13, r27, $r12);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController> = $r11;

        $r14 = new com.android.server.wm.LockTaskController;

        $r17 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r16 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r15 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        specialinvoke $r14.<com.android.server.wm.LockTaskController: void <init>(android.content.Context,com.android.server.wm.ActivityStackSupervisor,android.os.Handler)>($r17, $r16, $r15);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController mLockTaskController> = $r14;

        $r18 = new com.android.server.wm.ActivityStartController;

        specialinvoke $r18.<com.android.server.wm.ActivityStartController: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController mActivityStartController> = $r18;

        $r19 = new com.android.server.wm.RecentTasks;

        $r20 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        specialinvoke $r19.<com.android.server.wm.RecentTasks: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.ActivityStackSupervisor)>(r0, $r20);

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void setRecentTasks(com.android.server.wm.RecentTasks)>($r19);

        $r21 = new com.android.server.wm.VrController;

        $r22 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        specialinvoke $r21.<com.android.server.wm.VrController: void <init>(java.lang.Object)>($r22);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController> = $r21;

        $r23 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r24 = virtualinvoke $r23.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.KeyguardController mKeyguardController> = $r24;

        return;
    }

    public void installSystemProviders()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityTaskManagerService$FontScaleSettingObserver $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = new com.android.server.wm.ActivityTaskManagerService$FontScaleSettingObserver;

        specialinvoke $r1.<com.android.server.wm.ActivityTaskManagerService$FontScaleSettingObserver: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$FontScaleSettingObserver mFontScaleSettingObserver> = $r1;

        return;
    }

    public void invalidateHomeTaskSnapshot(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.TaskSnapshotController $r3;
        com.android.server.wm.Task $r4;
        int $i0;
        java.lang.Throwable $r5;
        android.os.IBinder r6;
        com.android.server.wm.ActivityRecord r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r6 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r7 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r6);

     label02:
        if r7 == null goto label07;

     label03:
        $z0 = virtualinvoke r7.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        if $z0 != 0 goto label05;

     label04:
        goto label07;

     label05:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        $r4 = virtualinvoke r7.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $i0 = $r4.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r3.<com.android.server.wm.TaskSnapshotController: void removeSnapshotCache(int)>($i0);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public final boolean isActivityStartAllowedOnDisplay(int, android.content.Intent, java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, i3, $i5;
        long l4;
        boolean z0;
        com.android.server.wm.ActivityStackSupervisor $r1, $r3;
        android.app.ActivityManagerInternal $r2;
        java.lang.Throwable $r4, $r5;
        android.content.Intent r6;
        java.lang.String r7;
        android.content.pm.ActivityInfo r8, r9;
        com.android.server.wm.WindowManagerGlobalLock r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.content.Intent;

        r7 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i5 = staticinvoke <com.android.server.wm.ActivityStarter: int computeResolveFilterUid(int,int,int)>(i2, i2, -10000);

        r8 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: android.content.pm.ActivityInfo resolveActivity(android.content.Intent,java.lang.String,int,android.app.ProfilerInfo,int,int)>(r6, r7, 0, null, i1, $i5);

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        r9 = virtualinvoke $r2.<android.app.ActivityManagerInternal: android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo,int)>(r8, i1);

        r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r10;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        z0 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: boolean canPlaceEntityOnDisplay(int,int,int,android.content.pm.ActivityInfo)>(i0, i3, i2, r9);

        exitmonitor r10;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return z0;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r10;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    boolean isActivityStartsLoggingEnabled()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $z0 = virtualinvoke $r1.<android.app.ActivityManagerInternal: boolean isActivityStartsLoggingEnabled()>();

        return $z0;
    }

    public boolean isAssistDataAllowedOnCurrentActivity()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        boolean $z0, $z1;
        android.app.admin.DevicePolicyCache $r2;
        java.lang.Throwable $r3;
        com.android.server.wm.ActivityStack r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label02:
        if r4 == null goto label11;

     label03:
        $z0 = virtualinvoke r4.<com.android.server.wm.ActivityStack: boolean isActivityTypeAssistant()>();

        if $z0 == 0 goto label05;

     label04:
        goto label11;

     label05:
        r5 = virtualinvoke r4.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

     label06:
        if r5 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label09:
        i0 = r5.<com.android.server.wm.ActivityRecord: int mUserId>;

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r2 = staticinvoke <android.app.admin.DevicePolicyCache: android.app.admin.DevicePolicyCache getInstance()>();

        $z1 = virtualinvoke $r2.<android.app.admin.DevicePolicyCache: boolean isScreenCaptureAllowed(int,boolean)>(i0, 0);

        return $z1;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    boolean isAssociatedCompanionApp(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        java.util.Set r1;
        java.util.Map $r2;
        java.lang.Integer $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.Map mCompanionAppUidsMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.util.Set) $r4;

        if r1 != null goto label1;

        return 0;

     label1:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        return $z0;
    }

    boolean isBackgroundActivityStartsEnabled()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $z0 = virtualinvoke $r1.<android.app.ActivityManagerInternal: boolean isBackgroundActivityStartsEnabled()>();

        return $z0;
    }

    boolean isBooted()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $z0 = virtualinvoke $r1.<android.app.ActivityManagerInternal: boolean isBooted()>();

        return $z0;
    }

    boolean isBooting()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $z0 = virtualinvoke $r1.<android.app.ActivityManagerInternal: boolean isBooting()>();

        return $z0;
    }

    public boolean isControllerAMonkey()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.IActivityController $r3;
        boolean $z0, z1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController>;

        if $r3 == null goto label3;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mControllerIsAMonkey>;

        if $z0 == 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z1;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean isCrossUserAllowed(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>("android.permission.INTERACT_ACROSS_USERS", i0, i1);

        if $i2 == 0 goto label2;

        $i3 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkPermission(java.lang.String,int,int)>("android.permission.INTERACT_ACROSS_USERS_FULL", i0, i1);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isDeviceOwner(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<com.android.server.wm.ActivityTaskManagerService: int mDeviceOwnerUid>;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isGetTasksAllowed(java.lang.String, int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, $i2, $i3;
        com.android.server.wm.RecentTasks $r1;
        android.content.pm.IPackageManager $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;
        boolean z0, z1, z2, z3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        z0 = virtualinvoke $r1.<com.android.server.wm.RecentTasks: boolean isCallerRecents(int)>(i1);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $i2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int checkGetTasksPermission(java.lang.String,int,int)>("android.permission.REAL_GET_TASKS", i0, i1);

        if $i2 != 0 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        z2 = z1;

        if z1 != 0 goto label8;

        z2 = z1;

        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int checkGetTasksPermission(java.lang.String,int,int)>("android.permission.GET_TASKS", i0, i1);

        if $i3 != 0 goto label8;

     label4:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        z3 = interfaceinvoke $r2.<android.content.pm.IPackageManager: boolean isUidPrivileged(int)>(i1);

     label5:
        if z3 == 0 goto label6;

        z1 = 1;

     label6:
        z2 = z1;

        goto label8;

     label7:
        $r3 := @caughtexception;

        z2 = z1;

     label8:
        return z2;

        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public boolean isImmersive(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;
        java.lang.IllegalArgumentException r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

     label2:
        if r4 == null goto label5;

     label3:
        z0 = r4.<com.android.server.wm.ActivityRecord: boolean immersive>;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        r5 = new java.lang.IllegalArgumentException;

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw r5;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isInLockTaskMode()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int getLockTaskModeState()>();

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isInPictureInPictureMode(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1, $r4;
        com.android.server.wm.ActivityStack $r2, $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord isInTask(com.android.server.wm.ActivityRecord)>(r1);

        if $r4 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isKeyguardLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.KeyguardController $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.KeyguardController mKeyguardController>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.KeyguardController: boolean isKeyguardLocked()>();

        return $z0;
    }

    public boolean isRootVoiceInteraction(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label5:
        z0 = r4.<com.android.server.wm.ActivityRecord: boolean rootVoiceInteraction>;

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    boolean isSleepingLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping>;

        return $z0;
    }

    boolean isSleepingOrShuttingDownLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isSleepingLocked()>();

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mShuttingDown>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean isTopActivityImmersive()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z1, z2;
        java.lang.Throwable $r2;
        com.android.server.wm.ActivityStack r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("isTopActivityImmersive");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label05:
        r4 = virtualinvoke r3.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label06:
        z2 = 0;

        if r4 == null goto label09;

        z2 = 0;

     label07:
        $z1 = r4.<com.android.server.wm.ActivityRecord: boolean immersive>;

        if $z1 == 0 goto label09;

     label08:
        z2 = 1;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z2;

     label11:
        $r2 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean isTopOfTask(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.Task $r2;
        com.android.server.wm.ActivityRecord $r3, r6;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r5);

     label02:
        if r6 == null goto label05;

     label03:
        $r2 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if $r3 != r6 goto label05;

     label04:
        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean isUidForeground(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: boolean isAnyNonToastWindowVisibleForUid(int)>(i0);

        return $z0;
    }

    public void keyguardGoingAway(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.KeyguardController $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("keyguardGoingAway");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.KeyguardController mKeyguardController>;

        virtualinvoke $r2.<com.android.server.wm.KeyguardController: void keyguardGoingAway(int)>(i0);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void lambda$applyUpdateLockStateLocked$0$ActivityTaskManagerService(boolean, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.ActivityRecord r1;
        android.os.UpdateLock $r2, $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.UpdateLock mUpdateLock>;

        $z1 = virtualinvoke $r2.<android.os.UpdateLock: boolean isHeld()>();

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.UpdateLock mUpdateLock>;

        virtualinvoke $r4.<android.os.UpdateLock: void acquire()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.UpdateLock mUpdateLock>;

        virtualinvoke $r3.<android.os.UpdateLock: void release()>();

     label2:
        return;
    }

    public void lambda$applyUpdateVrModeLocked$6$ActivityTaskManagerService(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0, $z1;
        com.android.server.wm.VrController $r2, $r3;
        com.android.server.wm.WindowManagerService $r4;
        int[] $r5;
        com.android.server.wm.RootWindowContainer $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.ActivityRecord r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.VrController: boolean onVrModeChanged(com.android.server.wm.ActivityRecord)>(r8);

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController>;

        z0 = virtualinvoke $r3.<com.android.server.wm.VrController: boolean shouldDisableNonVrUiLocked()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void disableNonVrUi(boolean)>(z0);

     label3:
        if z0 == 0 goto label5;

     label4:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r5 = newarray (int)[1];

        $r5[0] = 2;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: void removeStacksInWindowingModes(int[])>($r5);

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void lambda$enterPictureInPictureMode$4$ActivityTaskManagerService(com.android.server.wm.ActivityRecord, android.app.PictureInPictureParams)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        float f0;
        java.util.List r2;
        com.android.server.wm.ActivityStack r3;
        com.android.server.wm.WindowContainer $r4;
        android.app.PictureInPictureParams $r5, $r6, r17;
        com.android.server.wm.RootWindowContainer $r7;
        android.content.pm.ActivityInfo $r8;
        android.content.pm.ApplicationInfo $r9;
        boolean $z0;
        java.lang.String $r10, $r14;
        int $i0;
        android.content.Context $r11;
        java.lang.Throwable $r15;
        com.android.server.wm.ActivityRecord r16;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r16 := @parameter0: com.android.server.wm.ActivityRecord;

        r17 := @parameter1: android.app.PictureInPictureParams;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = virtualinvoke r16.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        if $r4 != null goto label3;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skip enterPictureInPictureMode, destroyed ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r14 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r14);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        virtualinvoke r16.<com.android.server.wm.ActivityRecord: void setPictureInPictureParams(android.app.PictureInPictureParams)>(r17);

        $r5 = r16.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        f0 = virtualinvoke $r5.<android.app.PictureInPictureParams: float getAspectRatio()>();

        $r6 = r16.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        r2 = virtualinvoke $r6.<android.app.PictureInPictureParams: java.util.List getActions()>();

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: void moveActivityToPinnedStack(com.android.server.wm.ActivityRecord,java.lang.String)>(r16, "enterPictureInPictureMode");

        r3 = virtualinvoke r16.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        virtualinvoke r3.<com.android.server.wm.ActivityStack: void setPictureInPictureAspectRatio(float)>(f0);

        virtualinvoke r3.<com.android.server.wm.ActivityStack: void setPictureInPictureActions(java.util.List)>(r2);

        $r11 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r8 = r16.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r9 = $r8.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r9.<android.content.pm.ApplicationInfo: int uid>;

        $r10 = r16.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

        $z0 = r16.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch>;

        staticinvoke <com.android.internal.os.logging.MetricsLoggerWrapper: void logPictureInPictureEnter(android.content.Context,int,java.lang.String,boolean)>($r11, $i0, $r10, $z0);

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void logPictureInPictureArgs(android.app.PictureInPictureParams)>(r17);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r15 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void lambda$notifyEnterAnimationComplete$1$ActivityTaskManagerService(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.WindowProcessController $r2;
        android.app.IApplicationThread $r3;
        com.android.server.wm.ActivityRecord$Token $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        android.os.IBinder r7;
        com.android.server.wm.ActivityRecord r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r8 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r7);

     label02:
        if r8 == null goto label08;

     label03:
        z0 = virtualinvoke r8.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

     label04:
        if z0 == 0 goto label08;

     label05:
        $r2 = r8.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r4 = r8.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        interfaceinvoke $r3.<android.app.IApplicationThread: void scheduleEnterAnimationComplete(android.os.IBinder)>($r4);

     label06:
        goto label08;

     label07:
        $r6 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void lambda$onScreenAwakeChanged$3$ActivityTaskManagerService(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        java.util.List $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.List mScreenObservers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.List mScreenObservers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver) $r3;

        interfaceinvoke $r4.<com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver: void onAwakeStateChanged(boolean)>(z0);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public void lambda$postFinishBooting$7$ActivityTaskManagerService(boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1, $z2;
        com.android.server.wm.ActivityTaskManagerInternal $r1;
        android.app.ActivityManagerInternal $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void finishBooting()>();

     label1:
        if z1 == 0 goto label2;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerInternal mInternal>;

        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isBooted()>();

        virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerInternal: void enableScreenAfterBoot(boolean)>($z2);

     label2:
        return;
    }

    public void lambda$scheduleAppGcsLocked$8$ActivityTaskManagerService()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void scheduleAppGcs()>();

        return;
    }

    public void lambda$setLockScreenShown$2$ActivityTaskManagerService(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        java.util.List $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.List mScreenObservers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.List mScreenObservers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver) $r3;

        interfaceinvoke $r4.<com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver: void onKeyguardStateChanged(boolean)>(z0);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public boolean launchAssistIntent(android.content.Intent, int, java.lang.String, int, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.String r2;
        android.os.Bundle r3;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras $r4;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.Bundle;

        $r4 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>(i0, r1, r2, null, null, null, 1, 1, i1, r3, 500L, 0);

        if $r4 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void logAppTooSlow(com.android.server.wm.WindowProcessController, long, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowProcessController r1;
        long l0;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        return;
    }

    public boolean moveActivityTaskToBack(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        int i1;
        com.android.server.wm.Task r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.ActivityStack $r4;
        java.lang.Throwable $r5, $r6;
        android.os.IBinder r7;
        boolean z0, z1, z2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("moveActivityTaskToBack");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        if z0 != 0 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        i1 = staticinvoke <com.android.server.wm.ActivityRecord: int getTaskForActivityLocked(android.os.IBinder,boolean)>(r7, z1);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int)>(i1);

     label05:
        if r2 == null goto label09;

     label06:
        $r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStackLocked(android.os.IBinder)>(r7);

        z2 = virtualinvoke $r4.<com.android.server.wm.ActivityStack: boolean moveTaskToBack(com.android.server.wm.Task)>(r2);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z2;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label12:
        $r6 := @caughtexception;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label14:
        throw $r6;

     label15:
        $r5 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void moveStackToDisplay(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l2;
        android.app.ActivityManagerInternal $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "moveStackToDisplay()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void moveStackToDisplay(int,int,boolean)>(i0, i1, 1);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label08:
        throw $r4;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void moveTaskToFront(android.app.IApplicationThread, java.lang.String, int, int, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;
        int i0, i1;
        android.os.Bundle r2;
        com.android.server.wm.WindowManagerGlobalLock r3;
        android.app.ActivityManagerInternal $r4;
        com.android.server.wm.SafeActivityOptions $r5;
        java.lang.Throwable $r6;
        android.app.IApplicationThread r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.app.IApplicationThread;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.os.Bundle;

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r4.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.REORDER_TASKS", "moveTaskToFront()");

        r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label2:
        $r5 = staticinvoke <com.android.server.wm.SafeActivityOptions: com.android.server.wm.SafeActivityOptions fromBundle(android.os.Bundle)>(r2);

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void moveTaskToFrontLocked(android.app.IApplicationThread,java.lang.String,int,int,com.android.server.wm.SafeActivityOptions)>(r7, r1, i0, i1, $r5);

        exitmonitor r3;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void moveTaskToFrontLocked(android.app.IApplicationThread, java.lang.String, int, int, com.android.server.wm.SafeActivityOptions)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2, i3;
        com.android.server.wm.SafeActivityOptions r1;
        long l4;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.ActivityStartController $r2;
        com.android.server.wm.ActivityStarter $r3;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.LockTaskController $r5;
        com.android.server.wm.ActivityStackSupervisor $r6, $r7;
        java.lang.String $r10, r13;
        java.lang.Throwable $r11;
        android.app.IApplicationThread r12;
        com.android.server.wm.WindowProcessController r14;
        com.android.server.wm.Task r15;
        java.lang.StringBuilder r16;
        android.app.ActivityOptions r17;
        com.android.server.wm.ActivityRecord r18;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r12 := @parameter0: android.app.IApplicationThread;

        r13 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: com.android.server.wm.SafeActivityOptions;

        i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r13);

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean checkAppSwitchAllowedLocked(int,int,int,int,java.lang.String)>(i2, i3, -1, -1, "Task to front");

        if $z0 != 0 goto label01;

        staticinvoke <com.android.server.wm.SafeActivityOptions: void abort(com.android.server.wm.SafeActivityOptions)>(r1);

        return;

     label01:
        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if r12 == null goto label02;

        r14 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(android.app.IApplicationThread)>(r12);

        goto label03;

     label02:
        r14 = null;

     label03:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(null, "moveTaskToFront");

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityStarter: boolean shouldAbortBackgroundActivityStart(int,int,java.lang.String,int,int,com.android.server.wm.WindowProcessController,com.android.server.am.PendingIntentRecord,boolean,android.content.Intent)>(i3, i2, r13, -1, -1, r14, null, 0, null);

        if $z1 == 0 goto label04;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isBackgroundActivityStartsEnabled()>();

        if $z3 != 0 goto label04;

        return;

     label04:
        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r15 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int)>(i0);

     label05:
        if r15 != null goto label08;

     label06:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find task for id: ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", $r10);

        staticinvoke <com.android.server.wm.SafeActivityOptions: void abort(com.android.server.wm.SafeActivityOptions)>(r1);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return;

     label08:
        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        $z2 = virtualinvoke $r5.<com.android.server.wm.LockTaskController: boolean isLockTaskModeViolation(com.android.server.wm.Task)>(r15);

        if $z2 == 0 goto label10;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", "moveTaskToFront: Attempt to violate Lock Task Mode");

        staticinvoke <com.android.server.wm.SafeActivityOptions: void abort(com.android.server.wm.SafeActivityOptions)>(r1);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return;

     label10:
        if r1 == null goto label13;

     label11:
        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        r17 = virtualinvoke r1.<com.android.server.wm.SafeActivityOptions: android.app.ActivityOptions getOptions(com.android.server.wm.ActivityStackSupervisor)>($r7);

     label12:
        goto label14;

     label13:
        r17 = null;

     label14:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor: void findTaskToMoveToFront(com.android.server.wm.Task,int,android.app.ActivityOptions,java.lang.String,boolean)>(r15, i1, r17, "moveTaskToFront", 0);

        r18 = virtualinvoke r15.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

     label15:
        if r18 == null goto label17;

     label16:
        virtualinvoke r18.<com.android.server.wm.ActivityRecord: void showStartingWindow(com.android.server.wm.ActivityRecord,boolean,boolean)>(null, 0, 1);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return;

     label18:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw $r11;

        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    void moveTaskToSplitScreenPrimaryTask(com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.Task r1;
        boolean z0;
        com.android.server.wm.ActivityStack r2, $r5, $r9;
        java.lang.IllegalStateException $r3;
        android.window.WindowContainerTransaction $r4;
        com.android.server.wm.WindowContainer$RemoteToken $r6, $r10, $r12;
        android.window.WindowContainerToken $r7, $r11, $r13;
        com.android.server.wm.WindowOrganizerController $r15;
        com.android.server.wm.TaskDisplayArea r16;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        r16 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r2 = virtualinvoke r16.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootSplitScreenPrimaryTask()>();

        if r2 == null goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r16.<com.android.server.wm.TaskDisplayArea: void positionStackAt(int,com.android.server.wm.ActivityStack,boolean)>(2147483647, r2, 0);

     label1:
        $r4 = new android.window.WindowContainerTransaction;

        specialinvoke $r4.<android.window.WindowContainerTransaction: void <init>()>();

        $r5 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r6 = $r5.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        virtualinvoke $r4.<android.window.WindowContainerTransaction: android.window.WindowContainerTransaction setWindowingMode(android.window.WindowContainerToken,int)>($r7, 0);

        $r9 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r10 = $r9.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r11 = virtualinvoke $r10.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        $r12 = r2.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        virtualinvoke $r4.<android.window.WindowContainerTransaction: android.window.WindowContainerTransaction reparent(android.window.WindowContainerToken,android.window.WindowContainerToken,boolean)>($r11, $r13, z0);

        $r15 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowOrganizerController mWindowOrganizerController>;

        virtualinvoke $r15.<com.android.server.wm.WindowOrganizerController: void applyTransaction(android.window.WindowContainerTransaction)>($r4);

        return;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t enter split without associated organized task");

        throw $r3;
    }

    public void moveTaskToStack(int, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l2;
        com.android.server.wm.RootWindowContainer $r2, $r3;
        java.lang.String $r6, $r11, $r14;
        java.lang.Throwable $r15, $r16;
        com.android.server.wm.Task r17;
        java.lang.StringBuilder r18, r21, r23;
        com.android.server.wm.ActivityStack r19;
        java.lang.IllegalArgumentException r20;
        java.lang.IllegalStateException r22;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "moveTaskToStack()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r17 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int)>(i0);

     label03:
        if r17 != null goto label07;

     label04:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTaskToStack: No task for id=");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r14);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r19 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i1);

     label08:
        if r19 == null goto label14;

     label09:
        $z1 = virtualinvoke r19.<com.android.server.wm.ActivityStack: boolean isActivityTypeStandardOrUndefined()>();

        if $z1 == 0 goto label13;

        virtualinvoke r17.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,boolean,int,boolean,boolean,java.lang.String)>(r19, z0, 1, 1, 0, "moveTaskToStack");

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label13:
        r20 = new java.lang.IllegalArgumentException;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTaskToStack: Attempt to move task ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to stack ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw r20;

     label14:
        r22 = new java.lang.IllegalStateException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTaskToStack: No stack for stackId=");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw r22;

     label15:
        $r16 := @caughtexception;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label17:
        throw $r16;

     label18:
        $r15 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public boolean moveTopActivityToPinnedStack(int, android.graphics.Rect)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        boolean z0, $z1;
        com.android.server.wm.RootWindowContainer $r1;
        java.lang.Throwable $r2, $r3;
        android.graphics.Rect r4;
        com.android.server.wm.WindowManagerGlobalLock r5;
        java.lang.IllegalStateException r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r4 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "moveTopActivityToPinnedStack()");

        r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r5;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z1 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z1 == 0 goto label08;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        z0 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: boolean moveTopStackActivityToPinnedStack(int)>(i0);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r5;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label05:
        $r2 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        throw $r2;

     label08:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("moveTopActivityToPinnedStack:Device doesn\'t support picture-in-picture mode");

        throw r7;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean navigateUpTo(android.os.IBinder, android.content.Intent, int, android.content.Intent)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        android.content.Intent r1, r10;
        com.android.server.wm.ActivityRecord r2, $r4;
        com.android.server.uri.NeededUriGrants r3, r12;
        boolean z0;
        com.android.server.wm.ActivityStack $r5;
        java.lang.Throwable $r6, $r7, $r8, r15;
        android.os.IBinder r9;
        com.android.server.wm.WindowManagerGlobalLock r11, r13;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.os.IBinder;

        r10 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        r1 := @parameter3: android.content.Intent;

        r11 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r11;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r9);

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r11;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label05:
        exitmonitor r11;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        r3 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.NeededUriGrants collectGrants(android.content.Intent,com.android.server.wm.ActivityRecord)>(r10, r2);

        $r4 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        r12 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.NeededUriGrants collectGrants(android.content.Intent,com.android.server.wm.ActivityRecord)>(r1, $r4);

        r13 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r13;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        z0 = virtualinvoke $r5.<com.android.server.wm.ActivityStack: boolean navigateUpTo(com.android.server.wm.ActivityRecord,android.content.Intent,com.android.server.uri.NeededUriGrants,int,android.content.Intent,com.android.server.uri.NeededUriGrants)>(r2, r10, r3, i0, r1, r12);

        exitmonitor r13;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r13;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label12:
        $r7 := @caughtexception;

        r15 = $r7;

     label13:
        exitmonitor r11;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r15;

     label15:
        $r8 := @caughtexception;

        r15 = $r8;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public void notifyActivityDrawn(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.ActivityStack $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.wm.ActivityRecord r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r6 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord isInAnyStack(android.os.IBinder)>(r5);

     label2:
        if r6 == null goto label4;

     label3:
        $r3 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        virtualinvoke $r3.<com.android.server.wm.ActivityStack: void notifyActivityDrawnLocked(com.android.server.wm.ActivityRecord)>(r6);

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void notifyEnterAnimationComplete(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$BXul1K8BX6JEv_ff3NT76qpeZGQ $r2;
        com.android.server.wm.ActivityTaskManagerService$H $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r2 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$BXul1K8BX6JEv_ff3NT76qpeZGQ;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$BXul1K8BX6JEv_ff3NT76qpeZGQ: void <init>(com.android.server.wm.ActivityTaskManagerService,android.os.IBinder)>(r0, r1);

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void notifyLaunchTaskBehindComplete(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityStackSupervisor $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void scheduleLaunchTaskBehindComplete(android.os.IBinder)>(r1);

        return;
    }

    void notifySingleTaskDisplayEmpty(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.TaskChangeNotificationController $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        virtualinvoke $r1.<com.android.server.wm.TaskChangeNotificationController: void notifySingleTaskDisplayEmpty(int)>(i0);

        return;
    }

    void notifyTaskPersisterLocked(com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.Task r1;
        boolean z0;
        com.android.server.wm.RecentTasks $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        virtualinvoke $r2.<com.android.server.wm.RecentTasks: void notifyTaskPersisterLocked(com.android.server.wm.Task,boolean)>(r1, z0);

        return;
    }

    public void onActivityManagerInternalAdded()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Object $r3, $r5;
        android.app.ActivityManagerInternal $r4;
        com.android.server.uri.UriGrantsManagerInternal $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r4 = (android.app.ActivityManagerInternal) $r3;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal> = $r4;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/uri/UriGrantsManagerInternal;");

        $r6 = (com.android.server.uri.UriGrantsManagerInternal) $r5;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.uri.UriGrantsManagerInternal mUgmInternal> = $r6;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onBackPressedOnTaskRoot(android.os.IBinder, android.app.IRequestFinishCallback)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IRequestFinishCallback r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityRecord r3;
        com.android.server.wm.WindowOrganizerController $r4;
        com.android.server.wm.TaskOrganizerController $r5;
        boolean $z0, $z1;
        com.android.server.wm.TaskChangeNotificationController $r6;
        android.app.ActivityManager$RunningTaskInfo $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        android.os.IBinder r10;
        com.android.server.wm.ActivityStack r11;
        com.android.server.wm.Task r12;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r10 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.app.IRequestFinishCallback;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r10);

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        r11 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowOrganizerController mWindowOrganizerController>;

        $r5 = $r4.<com.android.server.wm.WindowOrganizerController: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        $z0 = virtualinvoke $r5.<com.android.server.wm.TaskOrganizerController: boolean handleInterceptBackPressedOnTaskRoot(com.android.server.wm.Task)>(r11);

        if $z0 == 0 goto label07;

     label06:
        goto label14;

     label07:
        if r11 == null goto label10;

     label08:
        $z1 = virtualinvoke r11.<com.android.server.wm.ActivityStack: boolean isSingleTaskInstance()>();

        if $z1 == 0 goto label10;

        r12 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        $r7 = virtualinvoke r12.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        virtualinvoke $r6.<com.android.server.wm.TaskChangeNotificationController: void notifyBackPressedOnTaskRoot(android.app.TaskInfo)>($r7);

     label09:
        goto label14;

     label10:
        interfaceinvoke r1.<android.app.IRequestFinishCallback: void requestFinish()>();

     label11:
        goto label14;

     label12:
        $r9 := @caughtexception;

     label13:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Failed to invoke request finish callback", $r9);

     label14:
        exitmonitor r2;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label16:
        $r8 := @caughtexception;

     label17:
        exitmonitor r2;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void onInitPowerManagement()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityStackSupervisor $r2;
        android.content.Context $r3;
        java.lang.Object $r4, $r5;
        android.os.PowerManagerInternal $r6;
        java.lang.Throwable $r7;
        android.os.PowerManager r8;
        android.os.PowerManager$WakeLock r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void initPowerManagement()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r8 = (android.os.PowerManager) $r4;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        $r6 = (android.os.PowerManagerInternal) $r5;

        r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManagerInternal mPowerManagerInternal> = $r6;

        r9 = virtualinvoke r8.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*voice*");

        r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManager$WakeLock mVoiceWakeLock> = r9;

        virtualinvoke r9.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onScreenAwakeChanged(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$Uli7s8UWTEj0IpBUtoST5bmgvKk $r1;
        com.android.server.wm.ActivityTaskManagerService$H $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r1 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$Uli7s8UWTEj0IpBUtoST5bmgvKk;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$Uli7s8UWTEj0IpBUtoST5bmgvKk: void <init>(com.android.server.wm.ActivityTaskManagerService,boolean)>(r0, z0);

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    void onStartActivitySetDidAppSwitch()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $z0 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mDidAppSwitch>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.ActivityTaskManagerService: long mAppSwitchesAllowedTime> = 0L;

        goto label2;

     label1:
        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mDidAppSwitch> = 1;

     label2:
        return;
    }

    public void onSystemReady()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2, $r3;
        boolean $z0, $z1;
        com.android.server.wm.VrController $r4;
        com.android.server.wm.RecentTasks $r5;
        com.android.server.wm.ActivityStackSupervisor $r6;
        java.lang.Throwable $r7;
        android.content.pm.PackageManager r8;
        com.android.internal.app.AssistUtils r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        r8 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.cant_save_state");

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mHasHeavyWeightFeature> = $z0;

        $z1 = virtualinvoke r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mHasLeanbackFeature> = $z1;

        r9 = new com.android.internal.app.AssistUtils;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        specialinvoke r9.<com.android.internal.app.AssistUtils: void <init>(android.content.Context)>($r3);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.AssistUtils mAssistUtils> = r9;

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController>;

        virtualinvoke $r4.<com.android.server.wm.VrController: void onSystemReady()>();

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        virtualinvoke $r5.<com.android.server.wm.RecentTasks: void onSystemReadyLocked()>();

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r6.<com.android.server.wm.ActivityStackSupervisor: void onSystemReady()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void overridePendingTransition(android.os.IBinder, java.lang.String, int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        long l2;
        com.android.server.wm.ActivityStack$ActivityState $r3, $r4;
        boolean $z0;
        com.android.server.wm.DisplayContent $r5, $r6;
        com.android.server.wm.AppTransition $r7;
        java.lang.Throwable $r8;
        android.os.IBinder r9;
        com.android.server.wm.ActivityRecord r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r10 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r9);

     label02:
        if r10 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r4 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSING>;

        $z0 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r4, $r3);

        if $z0 == 0 goto label06;

        $r5 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        $r6 = $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        $r7 = $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r7.<com.android.server.wm.AppTransition: void overridePendingAppTransition(java.lang.String,int,int,android.os.IRemoteCallback,android.os.IRemoteCallback)>(r1, i0, i1, null, null);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r2;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void positionTaskInStack(int, int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l3;
        android.app.ActivityManagerInternal $r2;
        com.android.server.wm.RootWindowContainer $r3, $r7;
        java.lang.String $r6, $r10, $r14;
        boolean $z0;
        com.android.server.wm.ActivityStack $r15, r19;
        java.lang.Throwable $r16, $r17;
        com.android.server.wm.Task r18;
        java.lang.IllegalArgumentException r20, r22, r24;
        java.lang.StringBuilder r21, r23, r25;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "positionTaskInStack()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r18 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int)>(i0);

     label03:
        if r18 == null goto label14;

     label04:
        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r19 = virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i1);

     label05:
        if r19 == null goto label13;

     label06:
        $z0 = virtualinvoke r19.<com.android.server.wm.ActivityStack: boolean isActivityTypeStandardOrUndefined()>();

        if $z0 == 0 goto label12;

        $r15 = virtualinvoke r18.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r15 != r19 goto label08;

        virtualinvoke r19.<com.android.server.wm.ActivityStack: void positionChildAt(com.android.server.wm.Task,int)>(r18, i2);

     label07:
        goto label09;

     label08:
        virtualinvoke r18.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,int,int,boolean,boolean,java.lang.String)>(r19, i2, 2, 0, 0, "positionTaskInStack");

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        r20 = new java.lang.IllegalArgumentException;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positionTaskInStack: Attempt to change the position of task ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in/to non-standard stack");

        $r14 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw r20;

     label13:
        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positionTaskInStack: no stack for id=");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r22;

     label14:
        r24 = new java.lang.IllegalArgumentException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("positionTaskInStack: no task for id=");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r24;

     label15:
        $r16 := @caughtexception;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label17:
        throw $r16;

     label18:
        $r17 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    void postFinishBooting(boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$hgT7_BsCohDVg6qQfaw5Xpx0_yQ $r1;
        com.android.server.wm.ActivityTaskManagerService$H $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r1 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$hgT7_BsCohDVg6qQfaw5Xpx0_yQ;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$hgT7_BsCohDVg6qQfaw5Xpx0_yQ: void <init>(com.android.server.wm.ActivityTaskManagerService,boolean,boolean)>(r0, z0, z1);

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void registerRemoteAnimationForNextActivityStart(java.lang.String, android.view.RemoteAnimationAdapter)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.view.RemoteAnimationAdapter r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        long l0;
        android.app.ActivityManagerInternal $r3;
        int $i1, $i2;
        com.android.server.wm.ActivityStartController $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.RemoteAnimationAdapter;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimationForNextActivityStart");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r1.<android.view.RemoteAnimationAdapter: void setCallingPidUid(int,int)>($i1, $i2);

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        virtualinvoke $r4.<com.android.server.wm.ActivityStartController: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>(r7, r1);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r2;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r6 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r6;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void registerRemoteAnimations(android.os.IBinder, android.view.RemoteAnimationDefinition)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.view.RemoteAnimationDefinition r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        long l0;
        android.app.ActivityManagerInternal $r3;
        int $i1, $i2;
        java.lang.Throwable $r4, $r5;
        android.os.IBinder r6;
        com.android.server.wm.ActivityRecord r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r6 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.RemoteAnimationDefinition;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimations");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r1.<android.view.RemoteAnimationDefinition: void setCallingPidUid(int,int)>($i1, $i2);

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r7 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r6);

     label02:
        if r7 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r7.<com.android.server.wm.ActivityRecord: void registerRemoteAnimations(android.view.RemoteAnimationDefinition)>(r1);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r2;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r4 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r4;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void registerRemoteAnimationsForDisplay(int, android.view.RemoteAnimationDefinition)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i2, $i3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2, $r5;
        long l1;
        android.app.ActivityManagerInternal $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r10;
        android.view.RemoteAnimationDefinition r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r11 := @parameter1: android.view.RemoteAnimationDefinition;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimations");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r11.<android.view.RemoteAnimationDefinition: void setCallingPidUid(int,int)>($i2, $i3);

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r2 != null goto label05;

     label03:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find display with id: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r8);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r5 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void registerRemoteAnimations(android.view.RemoteAnimationDefinition)>(r11);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r9 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label12:
        throw $r9;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void registerTaskStackListener(android.app.ITaskStackListener)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ITaskStackListener r1;
        com.android.server.wm.TaskChangeNotificationController $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.ITaskStackListener;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "registerTaskStackListener()");

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        virtualinvoke $r2.<com.android.server.wm.TaskChangeNotificationController: void registerTaskStackListener(android.app.ITaskStackListener)>(r1);

        return;
    }

    public boolean releaseActivityInstance(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        boolean z0, $z1;
        com.android.server.wm.ActivityStack$ActivityState $r2, $r3;
        java.lang.Throwable $r4, $r5;
        android.os.IBinder r6;
        com.android.server.wm.ActivityRecord r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r6 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r7 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r6);

     label03:
        if r7 == null goto label09;

     label04:
        $z1 = virtualinvoke r7.<com.android.server.wm.ActivityRecord: boolean isDestroyable()>();

        if $z1 != 0 goto label06;

     label05:
        goto label09;

     label06:
        virtualinvoke r7.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, "app-req");

        $r3 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYING>;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState DESTROYED>;

        z0 = virtualinvoke r7.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r3, $r2);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label11:
        $r4 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label13:
        throw $r4;

     label14:
        $r5 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void releaseSomeActivities(android.app.IApplicationThread)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm.WindowProcessController $r2;
        java.lang.Throwable $r3, $r4;
        android.app.IApplicationThread r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.app.IApplicationThread;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(android.app.IApplicationThread)>(r5);

        virtualinvoke $r2.<com.android.server.wm.WindowProcessController: void releaseSomeActivities(java.lang.String)>("low-mem");

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r4;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void removeAllVisibleRecentTasks()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm.RecentTasks $r2;
        android.app.ActivityManagerInternal $r3;
        int $i1;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.REMOVE_TASKS", "removeAllVisibleRecentTasks()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i1 = virtualinvoke $r3.<android.app.ActivityManagerInternal: int getCurrentUserId()>();

        virtualinvoke $r2.<com.android.server.wm.RecentTasks: void removeAllVisibleTasks(int)>($i1);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r4;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void removeStack(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        com.android.server.wm.RootWindowContainer $r2;
        boolean $z0;
        com.android.server.wm.ActivityStackSupervisor $r3;
        java.lang.String $r6;
        java.lang.Throwable $r7, $r8;
        com.android.server.wm.ActivityStack r9;
        java.lang.StringBuilder r10;
        java.lang.IllegalArgumentException r11;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "removeStack()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r9 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i0);

     label03:
        if r9 != null goto label07;

     label04:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeStack: No stack with id=");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $z0 = virtualinvoke r9.<com.android.server.wm.ActivityStack: boolean isActivityTypeStandardOrUndefined()>();

        if $z0 == 0 goto label11;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void removeStack(com.android.server.wm.ActivityStack)>(r9);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label11:
        r11 = new java.lang.IllegalArgumentException;

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Removing non-standard stack is not allowed.");

        throw r11;

     label12:
        $r8 := @caughtexception;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label14:
        throw $r8;

     label15:
        $r7 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void removeStacksInWindowingModes(int[])
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3, $r4;
        int[] r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: int[];

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "removeStacksInWindowingModes()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void removeStacksInWindowingModes(int[])>(r5);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r4;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void removeStacksWithActivityTypes(int[])
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3, $r4;
        int[] r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: int[];

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "removeStacksWithActivityTypes()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void removeStacksWithActivityTypes(int[])>(r5);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r3 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r3;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean removeTask(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        boolean z0;
        com.android.server.wm.ActivityStackSupervisor $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.REMOVE_TASKS", "removeTask()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        z0 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: boolean removeTaskById(int,boolean,boolean,java.lang.String)>(i0, 1, 1, "remove-task");

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label05:
        $r4 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        throw $r4;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void reportActivityFullyDrawn(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        virtualinvoke r4.<com.android.server.wm.ActivityRecord: void reportFullyDrawnLocked(boolean)>(z0);

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void reportAssistContextExtras(android.os.IBinder, android.os.Bundle, android.app.assist.AssistStructure, android.app.assist.AssistContent, android.net.Uri)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.assist.AssistContent r1, $r23;
        android.net.Uri r2;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras r3;
        boolean z0, $z1, $z3;
        long l0;
        android.content.Intent $r4, $r7, $r10, $r12, r44;
        java.util.ArrayList $r5;
        com.android.server.wm.ActivityTaskManagerService$UiHandler $r6;
        java.lang.String $r8;
        android.os.Bundle $r9, $r15, $r21, $r24, $r30, r37, r39;
        com.android.server.wm.ActivityTaskManagerInternal $r14;
        int $i1, $i2, $i3;
        com.android.internal.app.AssistUtils $r16;
        com.android.server.wm.ActivityRecord $r17, $r19, $r26, $r28;
        com.android.server.wm.Task $r18, $r27;
        android.os.Binder $r20;
        android.app.assist.AssistStructure $r22, r38;
        android.app.IAssistDataReceiver $r25, r41;
        android.content.ComponentName $r29;
        android.os.RemoteException $r31;
        java.lang.Throwable $r32, $r33, $r35;
        android.content.ActivityNotFoundException $r34;
        android.os.IBinder r36;
        com.android.server.wm.WindowManagerGlobalLock r40;
        android.content.Context r43;
        android.os.UserHandle r45;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r36 := @parameter0: android.os.IBinder;

        r37 := @parameter1: android.os.Bundle;

        r38 := @parameter2: android.app.assist.AssistStructure;

        r1 := @parameter3: android.app.assist.AssistContent;

        r2 := @parameter4: android.net.Uri;

        r3 = (com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras) r36;

        entermonitor r3;

     label01:
        r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle result> = r37;

        r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.assist.AssistStructure structure> = r38;

        r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.assist.AssistContent content> = r1;

     label02:
        if r2 == null goto label04;

     label03:
        $r30 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        virtualinvoke $r30.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.intent.extra.REFERRER", r2);

     label04:
        if r38 == null goto label06;

     label05:
        $r26 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: com.android.server.wm.ActivityRecord activity>;

        $r27 = virtualinvoke $r26.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $i3 = $r27.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke r38.<android.app.assist.AssistStructure: void setTaskId(int)>($i3);

        $r28 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: com.android.server.wm.ActivityRecord activity>;

        $r29 = $r28.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        virtualinvoke r38.<android.app.assist.AssistStructure: void setActivityComponent(android.content.ComponentName)>($r29);

        $z3 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: boolean isHome>;

        virtualinvoke r38.<android.app.assist.AssistStructure: void setHomeActivity(boolean)>($z3);

     label06:
        r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: boolean haveResult> = 1;

        virtualinvoke r3.<java.lang.Object: void notifyAll()>();

        $r4 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.content.Intent intent>;

        if $r4 != null goto label08;

        $r25 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.IAssistDataReceiver receiver>;

        if $r25 != null goto label08;

        exitmonitor r3;

     label07:
        return;

     label08:
        exitmonitor r3;

     label09:
        r39 = null;

        r40 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r40;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void buildAssistBundleLocked(com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras,android.os.Bundle)>(r3, r37);

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mPendingAssistExtras>;

        z0 = virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService$UiHandler: void removeCallbacks(java.lang.Runnable)>(r3);

     label11:
        if z0 != 0 goto label14;

     label12:
        exitmonitor r40;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label14:
        r41 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.IAssistDataReceiver receiver>;

     label15:
        if r41 == null goto label18;

     label16:
        r39 = new android.os.Bundle;

        specialinvoke r39.<android.os.Bundle: void <init>()>();

     label17:
        $r17 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: com.android.server.wm.ActivityRecord activity>;

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $i2 = $r18.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke r39.<android.os.Bundle: void putInt(java.lang.String,int)>("taskId", $i2);

        $r19 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: com.android.server.wm.ActivityRecord activity>;

        $r20 = $r19.<com.android.server.wm.ActivityRecord: android.os.Binder assistToken>;

        virtualinvoke r39.<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>("activityId", $r20);

        $r21 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        virtualinvoke r39.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("data", $r21);

        $r22 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.assist.AssistStructure structure>;

        virtualinvoke r39.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("structure", $r22);

        $r23 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.app.assist.AssistContent content>;

        virtualinvoke r39.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("content", $r23);

        $r24 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle receiverExtras>;

        virtualinvoke r39.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("receiverExtras", $r24);

     label18:
        exitmonitor r40;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r41 == null goto label24;

     label20:
        interfaceinvoke r41.<android.app.IAssistDataReceiver: void onHandleAssistData(android.os.Bundle)>(r39);

     label21:
        goto label23;

     label22:
        $r31 := @caughtexception;

     label23:
        return;

     label24:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label25:
        $r7 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.content.Intent intent>;

        $r8 = virtualinvoke $r7.<android.content.Intent: java.lang.String getAction()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r8, "android.service.voice.VoiceInteractionService");

        if $z1 == 0 goto label27;

        $r16 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.AssistUtils mAssistUtils>;

        $r15 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        virtualinvoke $r16.<com.android.internal.app.AssistUtils: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>($r15, 8, null, null);

     label26:
        goto label32;

     label27:
        $r10 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.content.Intent intent>;

        $r9 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.os.Bundle extras>;

        virtualinvoke $r10.<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>($r9);

        $r12 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.content.Intent intent>;

        virtualinvoke $r12.<android.content.Intent: android.content.Intent setFlags(int)>(872415232);

        $r14 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerInternal mInternal>;

        virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerInternal: void closeSystemDialogs(java.lang.String)>("assist");

     label28:
        r43 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        r44 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: android.content.Intent intent>;

        r45 = new android.os.UserHandle;

        $i1 = r3.<com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras: int userHandle>;

        specialinvoke r45.<android.os.UserHandle: void <init>(int)>($i1);

        virtualinvoke r43.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r44, r45);

     label29:
        goto label32;

     label30:
        $r34 := @caughtexception;

     label31:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "No activity to handle assist action.", $r34);

     label32:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label33:
        $r32 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r32;

     label34:
        $r33 := @caughtexception;

     label35:
        exitmonitor r40;

     label36:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r33;

     label37:
        $r35 := @caughtexception;

     label38:
        exitmonitor r3;

     label39:
        throw $r35;

        catch java.lang.Throwable from label01 to label02 with label37;
        catch java.lang.Throwable from label03 to label04 with label37;
        catch java.lang.Throwable from label05 to label06 with label37;
        catch java.lang.Throwable from label06 to label07 with label37;
        catch java.lang.Throwable from label08 to label09 with label37;
        catch java.lang.Throwable from label10 to label11 with label34;
        catch java.lang.Throwable from label12 to label13 with label34;
        catch java.lang.Throwable from label14 to label15 with label34;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.Throwable from label17 to label18 with label34;
        catch java.lang.Throwable from label18 to label19 with label34;
        catch android.os.RemoteException from label20 to label21 with label22;
        catch java.lang.Throwable from label25 to label26 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch android.content.ActivityNotFoundException from label28 to label29 with label30;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label35 to label36 with label34;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    public void reportSizeConfigurations(android.os.IBinder, int[], int[], int[])
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int[] r1, r9, r10;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityRecord r3;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        android.os.IBinder r8;
        java.lang.IllegalArgumentException r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r8 := @parameter0: android.os.IBinder;

        r9 := @parameter1: int[];

        r10 := @parameter2: int[];

        r1 := @parameter3: int[];

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r8);

     label2:
        if r3 == null goto label5;

     label3:
        virtualinvoke r3.<com.android.server.wm.ActivityRecord: void setSizeConfigurations(int[],int[],int[])>(r9, r10, r1);

        exitmonitor r2;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        r11 = new java.lang.IllegalArgumentException;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reportSizeConfigurations: ActivityRecord not found for: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r6 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r11;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean requestAssistContextExtras(int, android.app.IAssistDataReceiver, android.os.Bundle, android.os.IBinder, boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        android.app.IAssistDataReceiver r1;
        android.os.Bundle r2;
        android.os.IBinder r3;
        boolean z0, z1, z2;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.IAssistDataReceiver;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.os.IBinder;

        z1 := @parameter4: boolean;

        z0 := @parameter5: boolean;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>(i0, null, null, r1, r2, r3, z1, z0, $i1, null, 2000L, 0);

        if $r4 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean requestAutofillData(android.app.IAssistDataReceiver, android.os.Bundle, android.os.IBinder, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IAssistDataReceiver r1;
        android.os.Bundle r2;
        android.os.IBinder r3;
        int i0, $i1;
        com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras $r4;
        boolean z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IAssistDataReceiver;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.IBinder;

        i0 := @parameter3: int;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>(2, null, null, r1, r2, r3, 1, 1, $i1, null, 2000L, i0);

        if $r4 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void requestPictureInPictureMode(android.os.IBinder) throws android.os.RemoteException
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0, $z1;
        java.lang.StringBuilder r2;
        android.app.ActivityManagerInternal $r3;
        com.android.server.wm.WindowProcessController $r4;
        android.app.IApplicationThread $r5;
        android.os.IBinder $r6, r17;
        android.app.servertransaction.EnterPipRequestedItem $r7;
        com.android.server.wm.ClientLifecycleManager $r8;
        java.lang.Throwable $r9, $r16;
        java.lang.Exception $r10;
        android.content.Intent $r12;
        android.content.ComponentName $r13;
        java.lang.String $r15;
        com.android.server.wm.ActivityRecord r18;
        android.app.servertransaction.ClientTransaction r19;
        java.lang.IllegalStateException r21, r22;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r17 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "requestPictureInPictureMode");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r18 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r17);

     label03:
        if r18 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean isInPictureInPictureMode(com.android.server.wm.ActivityRecord)>(r18);

        if $z1 != 0 goto label16;

        z0 = virtualinvoke r18.<com.android.server.wm.ActivityRecord: boolean checkEnterPictureInPictureState(java.lang.String,boolean)>("requestPictureInPictureMode", 0);

     label07:
        if z0 == 0 goto label15;

     label08:
        $r4 = r18.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r6 = r18.<com.android.server.wm.ActivityRecord: android.os.IBinder token>;

        r19 = staticinvoke <android.app.servertransaction.ClientTransaction: android.app.servertransaction.ClientTransaction obtain(android.app.IApplicationThread,android.os.IBinder)>($r5, $r6);

        $r7 = staticinvoke <android.app.servertransaction.EnterPipRequestedItem: android.app.servertransaction.EnterPipRequestedItem obtain()>();

        virtualinvoke r19.<android.app.servertransaction.ClientTransaction: void addCallback(android.app.servertransaction.ClientTransactionItem)>($r7);

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ClientLifecycleManager getLifecycleManager()>();

        virtualinvoke $r8.<com.android.server.wm.ClientLifecycleManager: void scheduleTransaction(android.app.servertransaction.ClientTransaction)>(r19);

     label09:
        goto label12;

     label10:
        $r10 := @caughtexception;

     label11:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to send enter pip requested item: ");

        $r12 = r18.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r13 = virtualinvoke $r12.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", $r15, $r10);

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label15:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Requested PIP on an activity that doesn\'t support it");

        throw r21;

     label16:
        r22 = new java.lang.IllegalStateException;

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Activity is already in PIP mode");

        throw r22;

     label17:
        $r9 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

     label20:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        java.lang.String $r7;
        java.util.HashMap $r9;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$3DTHgCAeEd5OOF7ACeXoCk8mmrQ' $r11;
        com.android.server.wm.ActivityTaskManagerService$UiHandler $r12, $r14;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$7ieG0s-7Zp4H2bLiWdOgB6MqhcI' $r13;
        java.lang.Throwable $r15;
        android.os.IBinder r16;
        android.os.Message r17, r18;
        android.os.Binder r21;
        java.lang.StringBuilder r22;
        java.lang.SecurityException r23;
        java.util.function.BiConsumer r24, r25;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r16 := @parameter0: android.os.IBinder;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i1 != 1000 goto label6;

        r21 = new android.os.Binder;

        specialinvoke r21.<android.os.Binder: void <init>()>();

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.HashMap mStartActivitySources>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, r16);

        exitmonitor r2;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r11 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$3DTHgCAeEd5OOF7ACeXoCk8mmrQ: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$3DTHgCAeEd5OOF7ACeXoCk8mmrQ' INSTANCE>;

        r24 = (java.util.function.BiConsumer) $r11;

        r17 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r24, r0, r21);

        $r12 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService$UiHandler: boolean sendMessageDelayed(android.os.Message,long)>(r17, 602000L);

        $r13 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$7ieG0s_7Zp4H2bLiWdOgB6MqhcI: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$7ieG0s-7Zp4H2bLiWdOgB6MqhcI' INSTANCE>;

        r25 = (java.util.function.BiConsumer) $r13;

        r18 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r25, r0, r21);

        $r14 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

        virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService$UiHandler: boolean sendMessageDelayed(android.os.Message,long)>(r18, 1802000L);

        return r21;

     label3:
        $r15 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r15;

     label6:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only the system process can request a permission token, received request from uid: ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r23 = new java.lang.SecurityException;

        $r7 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw r23;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void resizeDockedStack(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.graphics.Rect r1, r2, $r12, $r13, $r14, r17, r18, r19, r22, r23, r30;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r3;
        com.android.server.wm.TaskDisplayArea r4;
        com.android.server.wm.ActivityStack r5;
        com.android.server.wm.Task r6;
        com.android.server.wm.RootWindowContainer $r8;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$l_aPxHBjKyHZWF7sw_vGD5ZvoR4' $r9;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Throwable $r15, $r16;
        com.android.server.wm.WindowContainer$RemoteToken $r20, $r24;
        android.window.WindowContainerToken $r21, $r25;
        com.android.server.wm.WindowOrganizerController $r26;
        android.window.WindowContainerTransaction r29;
        java.util.function.Predicate r31;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r17 := @parameter0: android.graphics.Rect;

        r18 := @parameter1: android.graphics.Rect;

        r19 := @parameter2: android.graphics.Rect;

        r1 := @parameter3: android.graphics.Rect;

        r2 := @parameter4: android.graphics.Rect;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "resizeDockedStack()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r8 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r4 = virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r5 = virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootSplitScreenPrimaryTask()>();

        $r9 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$l_aPxHBjKyHZWF7sw_vGD5ZvoR4: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$l_aPxHBjKyHZWF7sw_vGD5ZvoR4' INSTANCE>;

        r31 = (java.util.function.Predicate) $r9;

        r6 = virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.Task getTask(java.util.function.Predicate)>(r31);

     label03:
        if r5 == null goto label18;

        if r6 != null goto label04;

        goto label18;

     label04:
        r29 = new android.window.WindowContainerTransaction;

        specialinvoke r29.<android.window.WindowContainerTransaction: void <init>()>();

     label05:
        if r19 == null goto label06;

        r17 = r19;

        goto label07;

     label06:
        if r18 == null goto label07;

        r17 = r18;

        goto label07;

     label07:
        $r20 = r5.<com.android.server.wm.Task: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r21 = virtualinvoke $r20.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        virtualinvoke r29.<android.window.WindowContainerTransaction: android.window.WindowContainerTransaction setBounds(android.window.WindowContainerToken,android.graphics.Rect)>($r21, r17);

     label08:
        if r2 == null goto label09;

        r22 = r2;

        goto label10;

     label09:
        r22 = r1;

     label10:
        r23 = r22;

        if r22 != null goto label15;

     label11:
        r30 = new android.graphics.Rect;

        r23 = r30;

        $r12 = virtualinvoke r6.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        specialinvoke r30.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r12);

     label12:
        $r13 = virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: android.graphics.Rect getBounds()>();

        $i1 = virtualinvoke $r13.<android.graphics.Rect: int width()>();

        $r14 = virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: android.graphics.Rect getBounds()>();

        $i2 = virtualinvoke $r14.<android.graphics.Rect: int height()>();

        if $i1 <= $i2 goto label14;

        $i5 = r17.<android.graphics.Rect: int right>;

        $i6 = $i5 + 6;

        r30.<android.graphics.Rect: int left> = $i6;

     label13:
        goto label15;

     label14:
        $i3 = r17.<android.graphics.Rect: int bottom>;

        $i4 = $i3 + 6;

        r30.<android.graphics.Rect: int top> = $i4;

     label15:
        $r24 = r6.<com.android.server.wm.Task: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r25 = virtualinvoke $r24.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        virtualinvoke r29.<android.window.WindowContainerTransaction: android.window.WindowContainerTransaction setBounds(android.window.WindowContainerToken,android.graphics.Rect)>($r25, r23);

        $r26 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowOrganizerController mWindowOrganizerController>;

        virtualinvoke $r26.<com.android.server.wm.WindowOrganizerController: void applyTransaction(android.window.WindowContainerTransaction)>(r29);

        exitmonitor r3;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label18:
        exitmonitor r3;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label20:
        $r16 := @caughtexception;

     label21:
        exitmonitor r3;

     label22:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r16;

     label23:
        $r15 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label22 to label23 with label23;
    }

    public boolean resizeTask(int, android.graphics.Rect, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, $i3;
        long l2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        android.app.WindowConfiguration $r3;
        boolean $z0, z1, z2;
        java.lang.String $r6, $r10;
        java.lang.Throwable $r11, $r12;
        android.graphics.Rect r13;
        com.android.server.wm.RootWindowContainer r14;
        com.android.server.wm.Task r15;
        java.lang.StringBuilder r16, r17;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r13 := @parameter1: android.graphics.Rect;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "resizeTask()");

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r14 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

     label03:
        z1 = 0;

     label04:
        r15 = virtualinvoke r14.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 0);

     label05:
        if r15 != null goto label08;

     label06:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resizeTask: taskId=");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r10 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r10);

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label08:
        $r3 = virtualinvoke r15.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z0 = virtualinvoke $r3.<android.app.WindowConfiguration: boolean canResizeTask()>();

        if $z0 != 0 goto label10;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resizeTask not allowed on task=");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r6 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label10:
        $i3 = i1 & 1;

        if $i3 == 0 goto label11;

        z1 = 1;

     label11:
        z2 = virtualinvoke r15.<com.android.server.wm.Task: boolean resize(android.graphics.Rect,int,boolean)>(r13, i1, z1);

        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z2;

     label13:
        $r12 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

     label16:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public void restartActivityProcessIfVisible(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        java.lang.Throwable $r3, $r4;
        android.os.IBinder r5;
        com.android.server.wm.ActivityRecord r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "restartActivityProcess()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r5);

     label03:
        if r6 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        virtualinvoke r6.<com.android.server.wm.ActivityRecord: void restartProcessIfVisible()>();

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label12:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void resumeAppSwitches()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.STOP_APP_SWITCHES", "resumeAppSwitches");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: long mAppSwitchesAllowedTime> = 0L;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void retrieveSettings(android.content.ContentResolver)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1, z2, $z3, $z5, z6, z7, z8, z9, z10, z11;
        android.content.Context $r1, $r7, $r11, $r12, $r13, $r19;
        android.content.pm.PackageManager $r2, $r8, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Boolean $r3;
        android.content.res.Configuration $r4;
        java.util.Locale $r6;
        java.lang.Throwable $r9;
        android.content.ContentResolver r10;
        com.android.server.wm.WindowManagerGlobalLock r16;
        com.android.server.wm.WindowManagerService $r17;
        com.android.server.wm.RootWindowContainer $r18;
        android.content.res.Resources r20;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r10 := @parameter0: android.content.ContentResolver;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z3 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.freeform_window_management");

        if $z3 != 0 goto label02;

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r10, "enable_freeform_support", 0);

        if $i2 == 0 goto label01;

        goto label02;

     label01:
        z6 = 0;

        goto label03;

     label02:
        z6 = 1;

     label03:
        $r11 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        z0 = staticinvoke <android.app.ActivityTaskManager: boolean supportsMultiWindow(android.content.Context)>($r11);

        if z0 == 0 goto label04;

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z5 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.picture_in_picture");

        if $z5 == 0 goto label04;

        z7 = 1;

        goto label05;

     label04:
        z7 = 0;

     label05:
        $r12 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        z1 = staticinvoke <android.app.ActivityTaskManager: boolean supportsSplitScreenMultiWindow(android.content.Context)>($r12);

        $r13 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z2 = virtualinvoke $r14.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.activities_on_secondary_displays");

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r10, "debug.force_rtl", 0);

        if $i3 == 0 goto label06;

        z8 = 1;

        goto label07;

     label06:
        z8 = 0;

     label07:
        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r10, "force_resizable_activities", 0);

        if $i0 == 0 goto label08;

        z9 = 1;

        goto label09;

     label08:
        z9 = 0;

     label09:
        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r10, "enable_sizecompat_freeform", 0);

        if $i1 == 0 goto label10;

        z10 = 1;

        goto label11;

     label10:
        z10 = 0;

     label11:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z8);

        staticinvoke <android.sysprop.DisplayProperties: void debug_force_rtl(java.lang.Boolean)>($r3);

        $r4 = new android.content.res.Configuration;

        specialinvoke $r4.<android.content.res.Configuration: void <init>()>();

        staticinvoke <android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>(r10, $r4);

        if z8 == 0 goto label12;

        $r6 = $r4.<android.content.res.Configuration: java.util.Locale locale>;

        virtualinvoke $r4.<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>($r6);

     label12:
        r16 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities> = z9;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSizeCompatFreeform> = z10;

     label14:
        if z6 != 0 goto label16;

        if z1 != 0 goto label16;

        if z7 != 0 goto label16;

        if z2 == 0 goto label15;

        goto label16;

     label15:
        z11 = 0;

        goto label17;

     label16:
        z11 = 1;

     label17:
        if z0 != 0 goto label18;

        if z9 == 0 goto label21;

     label18:
        if z11 == 0 goto label21;

     label19:
        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiWindow> = 1;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement> = z6;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsSplitScreenMultiWindow> = z1;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture> = z7;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiDisplay> = z2;

     label20:
        goto label22;

     label21:
        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiWindow> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsSplitScreenMultiWindow> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture> = 0;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiDisplay> = 0;

     label22:
        $r17 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r18 = $r17.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r18.<com.android.server.wm.RootWindowContainer: void onSettingsRetrieved()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean)>($r4, null, 1);

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

        $r19 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        r20 = virtualinvoke $r19.<android.content.Context: android.content.res.Resources getResources()>();

        $i4 = virtualinvoke r20.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104898);

        r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailWidth> = $i4;

        $i5 = virtualinvoke r20.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104897);

        r0.<com.android.server.wm.ActivityTaskManagerService: int mThumbnailHeight> = $i5;

        exitmonitor r16;

     label23:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label24:
        $r9 := @caughtexception;

     label25:
        exitmonitor r16;

     label26:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    void scheduleAppGcsLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$yEgPBZves_gjR6r_sca6FAEYeiA $r1;
        com.android.server.wm.ActivityTaskManagerService$H $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r1 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$yEgPBZves_gjR6r_sca6FAEYeiA;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$yEgPBZves_gjR6r_sca6FAEYeiA: void <init>(com.android.server.wm.ActivityTaskManagerService)>(r0);

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void setActivityController(android.app.IActivityController, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        com.android.server.Watchdog $r3;
        java.lang.Throwable $r4;
        android.app.IActivityController r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.app.IActivityController;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ACTIVITY_WATCHER", "setActivityController()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.IActivityController mController> = r5;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mControllerIsAMonkey> = z0;

        $r3 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r3.<com.android.server.Watchdog: void setActivityController(android.app.IActivityController)>(r5);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setBooted(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        android.app.ActivityManagerInternal $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void setBooted(boolean)>(z0);

        return;
    }

    void setBooting(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        android.app.ActivityManagerInternal $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void setBooting(boolean)>(z0);

        return;
    }

    void setDeviceOwnerUid(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mDeviceOwnerUid> = i0;

        return;
    }

    public void setDisablePreviewScreenshots(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6;
        android.os.IBinder r7;
        com.android.server.wm.ActivityRecord r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r8 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r7);

     label02:
        if r8 != null goto label05;

     label03:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDisablePreviewScreenshots: Unable to find activity for token=");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r4 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r4);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r8.<com.android.server.wm.ActivityRecord: void setDisablePreviewScreenshots(boolean)>(z0);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r6 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r6;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setDisplayToSingleTaskInstance(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        android.app.ActivityManagerInternal $r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3;
        com.android.server.wm.DisplayContent r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "setDisplayToSingleTaskInstance");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r4 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i0);

     label2:
        if r4 == null goto label4;

     label3:
        virtualinvoke r4.<com.android.server.wm.DisplayContent: void setDisplayToSingleTaskInstance()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setFocusedStack(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        android.app.ActivityManagerInternal $r1;
        com.android.server.wm.RootWindowContainer $r2, $r3;
        boolean $z0;
        java.lang.String $r6;
        java.lang.Throwable $r7, $r8;
        com.android.server.wm.WindowManagerGlobalLock r9;
        com.android.server.wm.ActivityStack r10;
        java.lang.StringBuilder r11;
        com.android.server.wm.ActivityRecord r12;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "setFocusedStack()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r10 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i0);

     label03:
        if r10 != null goto label06;

     label04:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setFocusedStack: No stack with id=");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

        exitmonitor r9;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        r12 = virtualinvoke r10.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label07:
        if r12 == null goto label09;

     label08:
        $z0 = virtualinvoke r12.<com.android.server.wm.ActivityRecord: boolean moveFocusableActivityToTop(java.lang.String)>("setFocusedStack");

        if $z0 == 0 goto label09;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label09:
        exitmonitor r9;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r9;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label15:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public void setFocusedTask(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        android.app.ActivityManagerInternal $r1;
        com.android.server.wm.RootWindowContainer $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.Task r7;
        com.android.server.wm.ActivityRecord r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "setFocusedTask()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r7 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 0);

     label03:
        if r7 != null goto label06;

     label04:
        exitmonitor r6;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        r8 = virtualinvoke r7.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivityLocked()>();

     label07:
        if r8 == null goto label09;

     label08:
        $z0 = virtualinvoke r8.<com.android.server.wm.ActivityRecord: boolean moveFocusableActivityToTop(java.lang.String)>("setFocusedTask");

        if $z0 == 0 goto label09;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label09:
        exitmonitor r6;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r6;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label15:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public void setFrontActivityScreenCompatMode(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        android.content.pm.ActivityInfo $r3;
        com.android.server.wm.CompatModePackages $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.ActivityStack r6;
        com.android.server.wm.ActivityRecord r7;
        android.content.pm.ApplicationInfo r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_SCREEN_COMPATIBILITY", "setFrontActivityScreenCompatMode");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label02:
        if r6 == null goto label05;

     label03:
        r7 = virtualinvoke r6.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        if r7 != null goto label09;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "setFrontActivityScreenCompatMode failed: no top activity");

        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        $r3 = r7.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        r8 = $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        virtualinvoke $r4.<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>(r8, i0);

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void setHeavyWeightProcess(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowProcessController $r1, $r3;
        int $i0;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$x3j1aVkumtfulORwKd6dHysJyE0' $r2;
        android.content.Intent $r4;
        java.lang.Integer $r5;
        com.android.server.wm.ActivityTaskManagerService$H $r6;
        com.android.server.wm.ActivityRecord r7;
        android.os.Message r8;
        com.android.internal.util.function.QuadConsumer r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: com.android.server.wm.ActivityRecord;

        $r1 = r7.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHeavyWeightProcess> = $r1;

        $r2 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$x3j1aVkumtfulORwKd6dHysJyE0: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$x3j1aVkumtfulORwKd6dHysJyE0' INSTANCE>;

        $r3 = r7.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r4 = r7.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i0 = r7.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r9 = (com.android.internal.util.function.QuadConsumer) $r2;

        r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuadConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r0, $r3, $r4, $r5);

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r8);

        return;
    }

    public void setImmersive(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        com.android.server.wm.ActivityRecord r4;
        java.lang.IllegalArgumentException r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r3);

     label2:
        if r4 == null goto label6;

     label3:
        r4.<com.android.server.wm.ActivityRecord: boolean immersive> = z0;

        $z1 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: boolean isResumedActivityOnDisplay()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void applyUpdateLockStateLocked(com.android.server.wm.ActivityRecord)>(r4);

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        r5 = new java.lang.IllegalArgumentException;

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw r5;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setInheritShowWhenLocked(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void setInheritShowWhenLocked(boolean)>(z0);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r3 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r3;

     label13:
        $r2 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setLockScreenShown(boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1, $z2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        int $i1;
        com.android.server.wm.KeyguardController $r3;
        com.android.server.wm.ActivityTaskManagerService$H $r5, $r9;
        com.android.server.wm.'-$$Lambda$zwLNi4Hz7werGBGptK8eYRpBWpw' $r6;
        android.app.ActivityManagerInternal $r7;
        java.lang.Boolean $r8;
        java.lang.Throwable $r10, $r11;
        android.os.Message r12;
        com.android.server.wm._$$Lambda$ActivityTaskManagerService$iduseKQrjIWQYD0hJ8Q5DMmuSfE r15;
        java.lang.SecurityException r16;
        java.util.function.BiConsumer r17;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $i1 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkCallingPermission(java.lang.String)>("android.permission.DEVICE_POWER");

        if $i1 != 0 goto label12;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $z2 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mKeyguardShown>;

        if $z2 == z0 goto label02;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mKeyguardShown> = z0;

        $r6 = <com.android.server.wm._$$Lambda$zwLNi4Hz7werGBGptK8eYRpBWpw: com.android.server.wm.'-$$Lambda$zwLNi4Hz7werGBGptK8eYRpBWpw' INSTANCE>;

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r17 = (java.util.function.BiConsumer) $r6;

        r12 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r17, $r7, $r8);

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r12);

     label02:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.KeyguardController mKeyguardController>;

        virtualinvoke $r3.<com.android.server.wm.KeyguardController: void setKeyguardShown(boolean,boolean)>(z0, z1);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        r15 = new com.android.server.wm._$$Lambda$ActivityTaskManagerService$iduseKQrjIWQYD0hJ8Q5DMmuSfE;

        specialinvoke r15.<com.android.server.wm._$$Lambda$ActivityTaskManagerService$iduseKQrjIWQYD0hJ8Q5DMmuSfE: void <init>(com.android.server.wm.ActivityTaskManagerService,boolean)>(r0, z0);

        virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>(r15);

        return;

     label06:
        $r10 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r10;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label12:
        r16 = new java.lang.SecurityException;

        specialinvoke r16.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires permission android.permission.DEVICE_POWER");

        throw r16;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setPackageAskScreenCompat(java.lang.String, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        com.android.server.wm.CompatModePackages $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageAskScreenCompat");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        virtualinvoke $r3.<com.android.server.wm.CompatModePackages: void setPackageAskCompatModeLocked(java.lang.String,boolean)>(r5, z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPackageScreenCompatMode(java.lang.String, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        com.android.server.wm.CompatModePackages $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageScreenCompatMode");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.CompatModePackages mCompatModePackages>;

        virtualinvoke $r3.<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(java.lang.String,int)>(r5, i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPersistentVrThread(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r1;
        java.lang.SecurityException $r8;
        com.android.server.wm.WindowProcessControllerMap $r9;
        com.android.server.wm.VrController $r10;
        java.lang.Throwable $r11;
        com.android.server.wm.WindowManagerGlobalLock r12;
        com.android.server.wm.WindowProcessController r13;
        java.lang.String r16;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $i2 = staticinvoke <com.android.server.wm.ActivityTaskManagerService: int checkCallingPermission(java.lang.String)>("android.permission.RESTRICTED_VR_ACCESS");

        if $i2 != 0 goto label6;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceSystemHasVrFeature()>();

        r12 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r12;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        r13 = virtualinvoke $r9.<com.android.server.wm.WindowProcessControllerMap: com.android.server.wm.WindowProcessController getProcess(int)>(i1);

        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController>;

        virtualinvoke $r10.<com.android.server.wm.VrController: void setPersistentVrThreadLocked(int,int,com.android.server.wm.WindowProcessController)>(i0, i1, r13);

        exitmonitor r12;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r11 := @caughtexception;

     label4:
        exitmonitor r12;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: setPersistentVrThread() from pid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.RESTRICTED_VR_ACCESS");

        r16 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", r16);

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>(r16);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPictureInPictureParams(android.os.IBinder, android.app.PictureInPictureParams)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.PictureInPictureParams r1, $r4, $r5;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityStack r3;
        boolean $z0;
        float $f0;
        java.util.List $r6;
        java.lang.Throwable $r7, $r8;
        android.os.IBinder r9;
        com.android.server.wm.ActivityRecord r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.app.PictureInPictureParams;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r10 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord ensureValidPictureInPictureActivityParamsLocked(java.lang.String,android.os.IBinder,android.app.PictureInPictureParams)>("setPictureInPictureParams", r9, r1);

        virtualinvoke r10.<com.android.server.wm.ActivityRecord: void setPictureInPictureParams(android.app.PictureInPictureParams)>(r1);

        $z0 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: boolean inPinnedWindowingMode()>();

        if $z0 == 0 goto label3;

        r3 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $r4 = r10.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        $f0 = virtualinvoke $r4.<android.app.PictureInPictureParams: float getAspectRatio()>();

        virtualinvoke r3.<com.android.server.wm.ActivityStack: void setPictureInPictureAspectRatio(float)>($f0);

        $r5 = r10.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        $r6 = virtualinvoke $r5.<android.app.PictureInPictureParams: java.util.List getActions()>();

        virtualinvoke r3.<com.android.server.wm.ActivityStack: void setPictureInPictureActions(java.util.List)>($r6);

     label3:
        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void logPictureInPictureArgs(android.app.PictureInPictureParams)>(r1);

        exitmonitor r2;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label9:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    protected void setRecentTasks(com.android.server.wm.RecentTasks)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.RecentTasks r1;
        com.android.server.wm.ActivityStackSupervisor $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.RecentTasks;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks> = r1;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void setRecentTasks(com.android.server.wm.RecentTasks)>(r1);

        return;
    }

    public void setRequestedOrientation(android.os.IBinder, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void setRequestedOrientation(int)>(i0);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r2 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label12:
        throw $r2;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void setResumedActivityUncheckLocked(com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r31;
        com.android.server.wm.Task r2, r27, r30;
        boolean z0;
        com.android.server.wm.ActivityRecord r3, $r7, $r9, r23, r26, $r29;
        com.android.server.wm.DisplayContent $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        com.android.server.wm.TaskChangeNotificationController $r5, $r6;
        android.app.ActivityManagerInternal $r8;
        android.service.voice.IVoiceInteractionSession $r10, $r13, r28;
        android.content.pm.ActivityInfo $r11;
        android.content.pm.ApplicationInfo $r12;
        com.android.server.am.AppTimeTracker $r14, $r15, $r16, $r17, $r18, $r21, r24;
        com.android.server.wm.ActivityTaskManagerService$H $r19;
        android.os.Message $r20;
        com.android.server.wm.RootWindowContainer $r22;
        com.android.internal.app.IVoiceInteractor $r25;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r23 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r23.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        z0 = virtualinvoke r2.<com.android.server.wm.Task: boolean isActivityTypeStandard()>();

        if z0 == 0 goto label03;

        $r15 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker>;

        $r14 = r23.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

        if $r15 == $r14 goto label02;

        r24 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker>;

        if r24 == null goto label01;

        virtualinvoke r24.<com.android.server.am.AppTimeTracker: void stop()>();

        $r19 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r18 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker>;

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityTaskManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r18);

        virtualinvoke $r20.<android.os.Message: void sendToTarget()>();

        $r22 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r21 = r23.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

        virtualinvoke $r22.<com.android.server.wm.RootWindowContainer: void clearOtherAppTimeTrackers(com.android.server.am.AppTimeTracker)>($r21);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker> = null;

     label01:
        $r16 = r23.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

        if $r16 == null goto label04;

        $r17 = r23.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker> = $r17;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startTimeTrackingFocusedActivityLocked()>();

        goto label04;

     label02:
        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startTimeTrackingFocusedActivityLocked()>();

        goto label04;

     label03:
        r23.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker> = null;

     label04:
        $r25 = r2.<com.android.server.wm.Task: com.android.internal.app.IVoiceInteractor voiceInteractor>;

        if $r25 == null goto label05;

        $r13 = r2.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        $r11 = r23.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r12 = $r11.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r12.<android.content.pm.ApplicationInfo: int uid>;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startRunningVoiceLocked(android.service.voice.IVoiceInteractionSession,int)>($r13, $i5);

        goto label08;

     label05:
        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void finishRunningVoiceLocked()>();

        r26 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        if r26 == null goto label08;

        r27 = virtualinvoke r26.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if r27 == null goto label06;

        $r10 = r27.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r10 == null goto label06;

        r28 = r27.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        goto label07;

     label06:
        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        r28 = $r9.<com.android.server.wm.ActivityRecord: android.service.voice.IVoiceInteractionSession voiceSession>;

     label07:
        if r28 == null goto label08;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)>(r28);

     label08:
        $r29 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        if $r29 == null goto label09;

        $i3 = r23.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        $i2 = $r7.<com.android.server.wm.ActivityRecord: int mUserId>;

        if $i3 == $i2 goto label09;

        $r8 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i4 = r23.<com.android.server.wm.ActivityRecord: int mUserId>;

        virtualinvoke $r8.<android.app.ActivityManagerInternal: void sendForegroundProfileChanged(int)>($i4);

     label09:
        r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity>;

        r30 = null;

        if r3 == null goto label10;

        r30 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

     label10:
        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateResumedAppTrace(com.android.server.wm.ActivityRecord)>(r23);

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityRecord mLastResumedActivity> = r23;

        $r4 = virtualinvoke r23.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void setFocusedApp(com.android.server.wm.ActivityRecord,boolean)>(r23, 1);

        if r30 == null goto label11;

        if r2 == r30 goto label13;

     label11:
        if r30 == null goto label12;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        $i1 = r30.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r6.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskFocusChanged(int,boolean)>($i1, 0);

     label12:
        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        $i0 = r2.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r5.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskFocusChanged(int,boolean)>($i0, 1);

     label13:
        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void applyUpdateLockStateLocked(com.android.server.wm.ActivityRecord)>(r23);

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void applyUpdateVrModeLocked(com.android.server.wm.ActivityRecord)>(r23);

        if r23 != null goto label14;

        i6 = -1;

        goto label15;

     label14:
        i6 = r23.<com.android.server.wm.ActivityRecord: int mUserId>;

     label15:
        if r23 != null goto label16;

        r31 = "NULL";

        goto label17;

     label16:
        r31 = r23.<com.android.server.wm.ActivityRecord: java.lang.String shortComponentName>;

     label17:
        staticinvoke <com.android.server.wm.EventLogTags: void writeWmSetResumedActivity(int,java.lang.String,java.lang.String)>(i6, r31, r1);

        return;
    }

    public void setShowWhenLocked(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void setShowWhenLocked(boolean)>(z0);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r2 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r2;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setSplitScreenResizing(boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityStackSupervisor $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "setSplitScreenResizing()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void setSplitScreenResizing(boolean)>(z0);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void setTaskDescription(android.os.IBinder, android.app.ActivityManager$TaskDescription)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManager$TaskDescription r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.app.ActivityManager$TaskDescription;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label2:
        if r5 == null goto label4;

     label3:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void setTaskDescription(android.app.ActivityManager$TaskDescription)>(r1);

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setTaskResizeable(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.Task r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r8 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 1);

     label2:
        if r8 != null goto label5;

     label3:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskResizeable: taskId=");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r6 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        virtualinvoke r8.<com.android.server.wm.Task: void setResizeMode(int)>(i1);

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean setTaskWindowingMode(int, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l2;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.String $r7, $r12;
        com.android.server.wm.DisplayContent $r8;
        com.android.server.wm.TaskDisplayArea $r9;
        java.lang.Throwable $r13, $r14;
        com.android.server.wm.Task r15;
        java.lang.StringBuilder r16, r19;
        com.android.server.wm.ActivityStack r17;
        java.lang.IllegalArgumentException r18;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z4 := @parameter2: boolean;

        if i1 != 3 goto label01;

        $z3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean setTaskWindowingModeSplitScreenPrimary(int,boolean)>(i0, z4);

        return $z3;

     label01:
        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "setTaskWindowingMode()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $z0 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>(i1);

        if $z0 == 0 goto label06;

        z5 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean setTaskWindowingModeSplitScreen(int,int,boolean)>(i0, i1, z4);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z5;

     label06:
        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r15 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 0);

     label07:
        if r15 != null goto label11;

     label08:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskWindowingMode: No task for id=");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r12);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label11:
        $z1 = virtualinvoke r15.<com.android.server.wm.Task: boolean isActivityTypeStandardOrUndefined()>();

        if $z1 == 0 goto label19;

        r17 = virtualinvoke r15.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

     label12:
        if z4 == 0 goto label14;

     label13:
        virtualinvoke r17.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String,com.android.server.wm.Task)>("setTaskWindowingMode", r15);

     label14:
        $z2 = virtualinvoke r17.<com.android.server.wm.ActivityStack: boolean inSplitScreenWindowingMode()>();

        if $z2 == 0 goto label16;

        $r9 = virtualinvoke r17.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        virtualinvoke $r9.<com.android.server.wm.TaskDisplayArea: void onSplitScreenModeDismissed()>();

     label15:
        goto label17;

     label16:
        virtualinvoke r17.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(i1);

        $r8 = virtualinvoke r17.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        virtualinvoke $r8.<com.android.server.wm.DisplayContent: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(null, 0, 1, 1);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label19:
        r18 = new java.lang.IllegalArgumentException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskWindowingMode: Attempt to move non-standard task ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to windowing mode=");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r18;

     label20:
        $r13 := @caughtexception;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label22:
        throw $r13;

     label23:
        $r14 := @caughtexception;

     label24:
        exitmonitor r1;

     label25:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public boolean setTaskWindowingModeSplitScreenPrimary(int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        java.lang.Throwable $r2, $r3;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "setTaskWindowingModeSplitScreenPrimary()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        z1 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean setTaskWindowingModeSplitScreen(int,int,boolean)>(i0, 3, z0);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z1;

     label05:
        $r2 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        throw $r2;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setTurnScreenOn(android.os.IBinder, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.Throwable $r2, $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r4);

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r5.<com.android.server.wm.ActivityRecord: void setTurnScreenOn(boolean)>(z0);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r3 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r3;

     label13:
        $r2 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setUsageStatsManager(android.app.usage.UsageStatsManagerInternal)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.app.usage.UsageStatsManagerInternal r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter0: android.app.usage.UsageStatsManagerInternal;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsInternal> = r3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.service.voice.IVoiceInteractionSession $r2, $r3, r9;
        android.os.IBinder $r4, $r5;
        android.os.PowerManager$WakeLock $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.service.voice.IVoiceInteractionSession;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        if $r2 == null goto label06;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        $r4 = interfaceinvoke $r3.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        $r5 = interfaceinvoke r9.<android.service.voice.IVoiceInteractionSession: android.os.IBinder asBinder()>();

        if $r4 != $r5 goto label06;

     label02:
        if z0 == 0 goto label05;

     label03:
        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManager$WakeLock mVoiceWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void acquire()>();

     label04:
        goto label06;

     label05:
        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManager$WakeLock mVoiceWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void release()>();

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int setVrMode(android.os.IBinder, boolean, android.content.ComponentName)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, $z1;
        com.android.server.vr.VrManagerInternal r1;
        int i0, $i2;
        long l1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Throwable $r4, $r5, $r6;
        android.os.IBinder r7;
        android.content.ComponentName r8;
        com.android.server.wm.WindowManagerGlobalLock r9, r11;
        com.android.server.wm.ActivityRecord r10;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r7 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r8 := @parameter2: android.content.ComponentName;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceSystemHasVrFeature()>();

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/vr/VrManagerInternal;");

        r1 = (com.android.server.vr.VrManagerInternal) $r2;

        r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r10 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r7);

        exitmonitor r9;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r10 == null goto label15;

        $i2 = r10.<com.android.server.wm.ActivityRecord: int mUserId>;

        i0 = virtualinvoke r1.<com.android.server.vr.VrManagerInternal: int hasVrPackage(android.content.ComponentName,int)>(r8, $i2);

        if i0 == 0 goto label03;

        return i0;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        r11 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r11;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label06:
        if z0 == 0 goto label07;

        goto label08;

     label07:
        r8 = null;

     label08:
        r10.<com.android.server.wm.ActivityRecord: android.content.ComponentName requestedVrComponent> = r8;

        $z1 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: boolean isResumedActivityOnDisplay()>();

        if $z1 == 0 goto label09;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void applyUpdateVrModeLocked(com.android.server.wm.ActivityRecord)>(r10);

     label09:
        exitmonitor r11;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r11;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label14:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label15:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label16:
        $r4 := @caughtexception;

     label17:
        exitmonitor r9;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void setVrThread(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowProcessControllerMap $r2;
        com.android.server.wm.VrController $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.WindowProcessController r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceSystemHasVrFeature()>();

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        r5 = virtualinvoke $r2.<com.android.server.wm.WindowProcessControllerMap: com.android.server.wm.WindowProcessController getProcess(int)>(i1);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController>;

        virtualinvoke $r3.<com.android.server.wm.VrController: void setVrThreadLocked(int,int,com.android.server.wm.WindowProcessController)>(i0, i1, r5);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setWindowManager(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2, $r8, $r11;
        android.content.res.Configuration $r3, $r4, $r6, $r7;
        android.os.LocaleList $r5;
        com.android.server.wm.LockTaskController $r9;
        com.android.server.wm.ActivityStackSupervisor $r10;
        java.lang.Throwable $r12;
        com.android.server.wm.WindowManagerService r13;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r13 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager> = r13;

        $r2 = r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer> = $r2;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        virtualinvoke $r3.<android.content.res.Configuration: void setToDefaults()>();

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        $r5 = staticinvoke <android.os.LocaleList: android.os.LocaleList getDefault()>();

        virtualinvoke $r4.<android.content.res.Configuration: void setLocales(android.os.LocaleList)>($r5);

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        $r6.<android.content.res.Configuration: int seq> = 1;

        r0.<com.android.server.wm.ActivityTaskManagerService: int mConfigurationSeq> = 1;

        $r8 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r7 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: void onConfigurationChanged(android.content.res.Configuration)>($r7);

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController mLockTaskController>;

        virtualinvoke $r9.<com.android.server.wm.LockTaskController: void setWindowManager(com.android.server.wm.WindowManagerService)>(r13);

        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r10.<com.android.server.wm.ActivityStackSupervisor: void setWindowManager(com.android.server.wm.WindowManagerService)>(r13);

        $r11 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: void setWindowManager(com.android.server.wm.WindowManagerService)>(r13);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r12 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean shouldDisableNonVrUiLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.VrController $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.VrController mVrController>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.VrController: boolean shouldDisableNonVrUiLocked()>();

        return $z0;
    }

    public boolean shouldUpRecreateTask(android.os.IBinder, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        boolean z0;
        com.android.server.wm.ActivityStack $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.wm.ActivityRecord r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r5);

     label2:
        if r6 == null goto label5;

     label3:
        $r3 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        z0 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: boolean shouldUpRecreateTaskLocked(com.android.server.wm.ActivityRecord,java.lang.String)>(r6, r1);

        exitmonitor r2;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        exitmonitor r2;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean showAssistFromActivity(android.os.IBinder, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.Bundle r1;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityRecord r3, r4;
        boolean z0, $z1;
        com.android.server.wm.ActivityStack $r5;
        com.android.internal.app.AssistUtils $r6;
        java.lang.String $r10, $r15;
        java.lang.Throwable $r16, $r17;
        android.os.IBinder r18;
        java.lang.StringBuilder r19, r20;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r18 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.os.Bundle;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r18);

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        r4 = virtualinvoke $r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

     label03:
        if r4 == r3 goto label06;

     label04:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("showAssistFromActivity failed: caller ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not current top ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r15);

        exitmonitor r2;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        $z1 = r4.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z1 != 0 goto label08;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("showAssistFromActivity failed: caller ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not visible");

        $r10 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r10);

        exitmonitor r2;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label08:
        exitmonitor r2;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.internal.app.AssistUtils mAssistUtils>;

        z0 = virtualinvoke $r6.<com.android.internal.app.AssistUtils: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>(r1, 8, null, r18);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r16;

     label14:
        $r17 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public void showLockTaskEscapeMessage(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityRecord $r2;
        com.android.server.wm.LockTaskController $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r5);

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r3.<com.android.server.wm.LockTaskController: void showLockTaskToast()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final int startActivities(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent[], java.lang.String[], android.os.IBinder, android.os.Bundle, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3;
        android.content.Intent[] r4;
        java.lang.String[] r5;
        android.os.IBinder r6;
        android.os.Bundle r7;
        int $i0, $i1, $i2, i3, i4;
        com.android.server.wm.ActivityStartController $r8;
        com.android.server.wm.SafeActivityOptions $r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.Intent[];

        r5 := @parameter4: java.lang.String[];

        r6 := @parameter5: android.os.IBinder;

        r7 := @parameter6: android.os.Bundle;

        i3 := @parameter7: int;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r2);

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("startActivities");

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>($i0, $i1, i3, "startActivities");

        $r8 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r9 = staticinvoke <com.android.server.wm.SafeActivityOptions: com.android.server.wm.SafeActivityOptions fromBundle(android.os.Bundle)>(r7);

        $i2 = virtualinvoke $r8.<com.android.server.wm.ActivityStartController: int startActivities(android.app.IApplicationThread,int,int,int,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,com.android.server.wm.SafeActivityOptions,int,java.lang.String,com.android.server.am.PendingIntentRecord,boolean)>(r1, -1, 0, -1, r2, r3, r4, r5, r6, $r9, i4, "startActivities", null, 0);

        return $i2;
    }

    public final int startActivity(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, r5, r7;
        android.content.Intent r4;
        android.os.IBinder r6;
        int i0, i1, $i2, $i3;
        android.app.ProfilerInfo r8;
        android.os.Bundle r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.IBinder;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        r8 := @parameter9: android.app.ProfilerInfo;

        r9 := @parameter10: android.os.Bundle;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $i3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>(r1, r2, r3, r4, r5, r6, r7, i0, i1, r8, r9, $i2);

        return $i3;
    }

    public final android.app.WaitResult startActivityAndWait(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, r5, r7;
        android.content.Intent r4;
        android.os.IBinder r6;
        int i0, i1, $i2, $i3, i5, i6;
        android.app.ProfilerInfo r8;
        android.os.Bundle r9;
        android.app.WaitResult $r11;
        com.android.server.wm.ActivityStartController $r12;
        com.android.server.wm.ActivityStarter $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.IBinder;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        r8 := @parameter9: android.app.ProfilerInfo;

        r9 := @parameter10: android.os.Bundle;

        i5 := @parameter11: int;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r2);

        $r11 = new android.app.WaitResult;

        specialinvoke $r11.<android.app.WaitResult: void <init>()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("startActivityAndWait");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>($i2, $i3, i5, "startActivityAndWait");

        $r12 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r13 = virtualinvoke $r12.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r4, "startActivityAndWait");

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCaller(android.app.IApplicationThread)>(r1);

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r3);

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r5);

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultTo(android.os.IBinder)>(r6);

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultWho(java.lang.String)>(r7);

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRequestCode(int)>(i0);

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setStartFlags(int)>(i1);

        $r22 = virtualinvoke $r21.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r9);

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i6);

        $r24 = virtualinvoke $r23.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setProfilerInfo(android.app.ProfilerInfo)>(r8);

        $r25 = virtualinvoke $r24.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setWaitResult(android.app.WaitResult)>($r11);

        virtualinvoke $r25.<com.android.server.wm.ActivityStarter: int execute()>();

        return $r11;
    }

    public final int startActivityAsCaller(android.app.IApplicationThread, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, android.os.IBinder, boolean, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r3, $r8, $r11, $r31, $r38, $r41, r51, r67, r68;
        android.os.IBinder r2, r54, r56, r57;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        android.os.Bundle r4;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.WindowProcessController $r9, $r12, $r22, $r25, $r27;
        android.content.pm.ActivityInfo $r10;
        com.android.server.wm.ActivityStarter $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, r70, r71, r72, r73, r74;
        android.content.ComponentName $r23;
        android.content.Intent $r24, r52;
        android.app.ActivityManagerInternal $r32;
        java.util.HashMap $r33;
        java.lang.Object $r34;
        java.util.ArrayList $r35;
        java.lang.Throwable $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, r75, r81;
        android.app.IApplicationThread r50;
        android.app.ProfilerInfo r53;
        com.android.server.wm.WindowManagerGlobalLock r55;
        java.lang.SecurityException r58, r60, r63, r65, r66, r76, r77, r78, r80;
        java.lang.StringBuilder r59, r61, r64, r79;
        com.android.server.wm.ActivityRecord r62;
        com.android.server.wm.ActivityStartController r69;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r50 := @parameter0: android.app.IApplicationThread;

        r51 := @parameter1: java.lang.String;

        r52 := @parameter2: android.content.Intent;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: android.os.IBinder;

        r3 := @parameter5: java.lang.String;

        i10 := @parameter6: int;

        i0 := @parameter7: int;

        r53 := @parameter8: android.app.ProfilerInfo;

        r4 := @parameter9: android.os.Bundle;

        r54 := @parameter10: android.os.IBinder;

        z0 := @parameter11: boolean;

        i11 := @parameter12: int;

        r55 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r55;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label02:
        if r2 == null goto label40;

        if r54 == null goto label07;

     label03:
        $r32 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r32.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.START_ACTIVITY_AS_CALLER", "startActivityAsCaller");

        $r33 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.HashMap mStartActivitySources>;

        $r34 = virtualinvoke $r33.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r54);

        r56 = (android.os.IBinder) $r34;

     label04:
        r57 = r56;

        if r56 != null goto label08;

     label05:
        $r35 = r0.<com.android.server.wm.ActivityTaskManagerService: java.util.ArrayList mExpiredStartAsCallerTokens>;

        $z3 = virtualinvoke $r35.<java.util.ArrayList: boolean contains(java.lang.Object)>(r54);

        if $z3 == 0 goto label06;

        r58 = new java.lang.SecurityException;

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Called with expired permission token: ");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r41 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r58.<java.lang.SecurityException: void <init>(java.lang.String)>($r41);

        throw r58;

     label06:
        r60 = new java.lang.SecurityException;

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Called with invalid permission token: ");

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r38 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r60.<java.lang.SecurityException: void <init>(java.lang.String)>($r38);

        throw r60;

     label07:
        r57 = r2;

     label08:
        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r62 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord isInAnyStack(android.os.IBinder)>(r57);

     label09:
        if r62 == null goto label39;

     label10:
        $r9 = r62.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r9 == null goto label38;

        $r10 = r62.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r11 = $r10.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z2 == 0 goto label37;

        $r12 = r62.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i3 = $r12.<com.android.server.wm.WindowProcessController: int mUid>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        if $i4 == 1000 goto label13;

        $r25 = r62.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i7 = $r25.<com.android.server.wm.WindowProcessController: int mUid>;

        $i6 = r62.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        if $i7 != $i6 goto label12;

     label11:
        goto label13;

     label12:
        r63 = new java.lang.SecurityException;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling activity in uid ");

        $r27 = r62.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i8 = $r27.<com.android.server.wm.WindowProcessController: int mUid>;

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be system uid or original calling uid ");

        $i9 = r62.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r31 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r63.<java.lang.SecurityException: void <init>(java.lang.String)>($r31);

        throw r63;

     label13:
        if z0 == 0 goto label18;

     label14:
        $r23 = virtualinvoke r52.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r23 == null goto label17;

        $r24 = virtualinvoke r52.<android.content.Intent: android.content.Intent getSelector()>();

        if $r24 != null goto label16;

     label15:
        goto label18;

     label16:
        r65 = new java.lang.SecurityException;

        specialinvoke r65.<java.lang.SecurityException: void <init>(java.lang.String)>("Selector not allowed with ignoreTargetSecurity");

        throw r65;

     label17:
        r66 = new java.lang.SecurityException;

        specialinvoke r66.<java.lang.SecurityException: void <init>(java.lang.String)>("Component must be specified with ignoreTargetSecurity");

        throw r66;

     label18:
        i1 = r62.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        r67 = r62.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        r68 = r62.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        z1 = virtualinvoke r62.<com.android.server.wm.ActivityRecord: boolean isResolverOrChildActivity()>();

        exitmonitor r55;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        i12 = i11;

        if i11 != -10000 goto label20;

        $r22 = r62.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i5 = $r22.<com.android.server.wm.WindowProcessController: int mUid>;

        i12 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

     label20:
        r69 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

     label21:
        $r13 = virtualinvoke r69.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r52, "startActivityAsCaller");

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingUid(int)>(i1);

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r67);

        r70 = virtualinvoke $r15.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r68);

     label22:
        $r16 = virtualinvoke r70.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r1);

        r71 = virtualinvoke $r16.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultTo(android.os.IBinder)>(r2);

     label23:
        r72 = virtualinvoke r71.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultWho(java.lang.String)>(r3);

     label24:
        r73 = virtualinvoke r72.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRequestCode(int)>(i10);

     label25:
        $r17 = virtualinvoke r73.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setStartFlags(int)>(i0);

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r4);

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i12);

        r74 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setIgnoreTargetSecurity(boolean)>(z0);

     label26:
        if z1 == 0 goto label27;

        i13 = 0;

        goto label28;

     label27:
        i13 = i1;

     label28:
        $r20 = virtualinvoke r74.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setFilterCallingUid(int)>(i13);

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setAllowBackgroundActivityStart(boolean)>(1);

        i14 = virtualinvoke $r21.<com.android.server.wm.ActivityStarter: int execute()>();

     label29:
        return i14;

     label30:
        $r43 := @caughtexception;

        r75 = $r43;

        goto label36;

     label31:
        $r42 := @caughtexception;

        r75 = $r42;

        goto label36;

     label32:
        $r49 := @caughtexception;

        r75 = $r49;

        goto label36;

     label33:
        $r44 := @caughtexception;

        r75 = $r44;

        goto label36;

     label34:
        $r47 := @caughtexception;

        r75 = $r47;

        goto label36;

     label35:
        $r45 := @caughtexception;

        r75 = $r45;

     label36:
        throw r75;

     label37:
        r76 = new java.lang.SecurityException;

        specialinvoke r76.<java.lang.SecurityException: void <init>(java.lang.String)>("Must be called from an activity that is declared in the android package");

        throw r76;

     label38:
        r77 = new java.lang.SecurityException;

        specialinvoke r77.<java.lang.SecurityException: void <init>(java.lang.String)>("Called without a process attached to activity");

        throw r77;

     label39:
        r78 = new java.lang.SecurityException;

        r79 = new java.lang.StringBuilder;

        specialinvoke r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Called with bad activity token: ");

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r57);

        $r8 = virtualinvoke r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r78.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw r78;

     label40:
        r80 = new java.lang.SecurityException;

        specialinvoke r80.<java.lang.SecurityException: void <init>(java.lang.String)>("Must be called from an activity");

        throw r80;

     label41:
        $r46 := @caughtexception;

        r81 = $r46;

     label42:
        exitmonitor r55;

     label43:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r81;

     label44:
        $r48 := @caughtexception;

        r81 = $r48;

        goto label42;

        catch java.lang.Throwable from label01 to label02 with label41;
        catch java.lang.Throwable from label03 to label04 with label41;
        catch java.lang.Throwable from label05 to label06 with label41;
        catch java.lang.Throwable from label06 to label07 with label41;
        catch java.lang.Throwable from label08 to label09 with label41;
        catch java.lang.Throwable from label10 to label11 with label41;
        catch java.lang.Throwable from label12 to label13 with label41;
        catch java.lang.Throwable from label14 to label15 with label41;
        catch java.lang.Throwable from label16 to label17 with label41;
        catch java.lang.Throwable from label17 to label18 with label41;
        catch java.lang.Throwable from label18 to label19 with label41;
        catch java.lang.SecurityException from label20 to label21 with label35;
        catch java.lang.SecurityException from label21 to label22 with label34;
        catch java.lang.SecurityException from label22 to label23 with label33;
        catch java.lang.SecurityException from label23 to label24 with label32;
        catch java.lang.SecurityException from label24 to label25 with label31;
        catch java.lang.SecurityException from label25 to label26 with label30;
        catch java.lang.SecurityException from label28 to label29 with label30;
        catch java.lang.Throwable from label37 to label38 with label44;
        catch java.lang.Throwable from label38 to label39 with label44;
        catch java.lang.Throwable from label39 to label40 with label44;
        catch java.lang.Throwable from label40 to label41 with label44;
        catch java.lang.Throwable from label42 to label43 with label44;
    }

    public int startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, r5, r7;
        android.content.Intent r4;
        android.os.IBinder r6;
        int i0, i1, i2, $i3;
        android.app.ProfilerInfo r8;
        android.os.Bundle r9;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.IBinder;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        r8 := @parameter9: android.app.ProfilerInfo;

        r9 := @parameter10: android.os.Bundle;

        i2 := @parameter11: int;

        $i3 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int,boolean)>(r1, r2, r3, r4, r5, r6, r7, i0, i1, r8, r9, i2, 1);

        return $i3;
    }

    public final int startActivityFromRecents(int, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i3, i4;
        long l2;
        com.android.server.wm.ActivityStackSupervisor $r1;
        java.lang.Throwable $r2, $r3;
        android.os.Bundle r4;
        com.android.server.wm.SafeActivityOptions r5;
        com.android.server.wm.WindowManagerGlobalLock r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i3 := @parameter0: int;

        r4 := @parameter1: android.os.Bundle;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.START_TASKS_FROM_RECENTS", "startActivityFromRecents()");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r5 = staticinvoke <com.android.server.wm.SafeActivityOptions: com.android.server.wm.SafeActivityOptions fromBundle(android.os.Bundle)>(r4);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        i4 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: int startActivityFromRecents(int,int,int,com.android.server.wm.SafeActivityOptions)>(i0, i1, i3, r5);

        exitmonitor r6;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return i4;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r6;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public int startActivityIntentSender(android.app.IApplicationThread, android.content.IIntentSender, android.os.IBinder, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1, r4;
        android.content.Intent r2;
        java.lang.String r3, r5;
        int i0, i1, i2, $i3, $i4, $i5;
        android.os.Bundle r6;
        com.android.server.am.PendingIntentRecord r7;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r8, $r13;
        com.android.server.wm.ActivityRecord $r9, $r10;
        android.content.pm.ActivityInfo $r11;
        android.content.pm.ApplicationInfo $r12;
        java.lang.Throwable $r14;
        android.app.IApplicationThread r15;
        android.content.IIntentSender r16;
        com.android.server.wm.WindowManagerGlobalLock r17;
        com.android.server.wm.ActivityStack r18;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r15 := @parameter0: android.app.IApplicationThread;

        r16 := @parameter1: android.content.IIntentSender;

        r1 := @parameter2: android.os.IBinder;

        r2 := @parameter3: android.content.Intent;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.IBinder;

        r5 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        i2 := @parameter9: int;

        r6 := @parameter10: android.os.Bundle;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("startActivityIntentSender");

        if r2 == null goto label02;

        $z1 = virtualinvoke r2.<android.content.Intent: boolean hasFileDescriptors()>();

        if $z1 != 0 goto label01;

        goto label02;

     label01:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File descriptors passed in Intent");

        throw $r13;

     label02:
        $z0 = r16 instanceof com.android.server.am.PendingIntentRecord;

        if $z0 == 0 goto label11;

        r7 = (com.android.server.am.PendingIntentRecord) r16;

        r17 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r17;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r18 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label04:
        if r18 == null goto label06;

     label05:
        $r9 = r18.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r9 == null goto label06;

        $r10 = r18.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        $r11 = $r10.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r12 = $r11.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r12.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 != $i4 goto label06;

        r0.<com.android.server.wm.ActivityTaskManagerService: long mAppSwitchesAllowedTime> = 0L;

     label06:
        exitmonitor r17;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $i5 = virtualinvoke r7.<com.android.server.am.PendingIntentRecord: int sendInner(int,android.content.Intent,java.lang.String,android.os.IBinder,android.content.IIntentReceiver,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>(0, r2, r3, r1, null, null, r4, r5, i0, i1, i2, r6);

        return $i5;

     label08:
        $r14 := @caughtexception;

     label09:
        exitmonitor r17;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r14;

     label11:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad PendingIntent object");

        throw $r8;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public final int startActivityWithConfig(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.content.res.Configuration, android.os.Bundle, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, r5, r7;
        android.content.Intent r4;
        android.os.IBinder r6;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        android.content.res.Configuration r8;
        android.os.Bundle r9;
        com.android.server.wm.ActivityStartController $r10;
        com.android.server.wm.ActivityStarter $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.IBinder;

        r7 := @parameter6: java.lang.String;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        r8 := @parameter9: android.content.res.Configuration;

        r9 := @parameter10: android.os.Bundle;

        i5 := @parameter11: int;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r2);

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceNotIsolatedCaller(java.lang.String)>("startActivityWithConfig");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>($i2, $i3, i5, "startActivityWithConfig");

        $r10 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r11 = virtualinvoke $r10.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r4, "startActivityWithConfig");

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCaller(android.app.IApplicationThread)>(r1);

        $r13 = virtualinvoke $r12.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r5);

        $r16 = virtualinvoke $r15.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultTo(android.os.IBinder)>(r6);

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultWho(java.lang.String)>(r7);

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRequestCode(int)>(i0);

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setStartFlags(int)>(i1);

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setGlobalConfiguration(android.content.res.Configuration)>(r8);

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r9);

        $r22 = virtualinvoke $r21.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i6);

        $i4 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: int execute()>();

        return $i4;
    }

    public int startAssistantActivity(java.lang.String, java.lang.String, int, int, android.content.Intent, java.lang.String, android.os.Bundle, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r2, r4;
        int i0, i1, $i2, i3, i4;
        android.content.Intent r3;
        android.os.Bundle r5;
        android.app.ActivityManagerInternal $r6;
        com.android.server.wm.ActivityStartController $r7;
        com.android.server.wm.ActivityStarter $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r3 := @parameter4: android.content.Intent;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: android.os.Bundle;

        i1 := @parameter7: int;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r1);

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r6.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BIND_VOICE_INTERACTION", "startAssistantActivity()");

        i4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>(i3, i0, i1, "startAssistantActivity");

        $r7 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r8 = virtualinvoke $r7.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r3, "startAssistantActivity");

        $r9 = virtualinvoke $r8.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingUid(int)>(i0);

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r5);

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i4);

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setAllowBackgroundActivityStart(boolean)>(1);

        $i2 = virtualinvoke $r15.<com.android.server.wm.ActivityStarter: int execute()>();

        return $i2;
    }

    public boolean startDreamActivity(android.content.Intent)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityOptions r2;
        com.android.server.wm.WindowManagerGlobalLock r3;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        long l2;
        java.lang.String $r4, $r5, $r8, $r11, $r14, $r17, $r20;
        android.content.pm.ActivityInfo $r6;
        java.lang.Class $r7;
        com.android.server.wm.WindowProcessControllerMap $r9;
        android.content.pm.ApplicationInfo $r10, $r12, $r13, $r15;
        com.android.server.wm.ActivityStartController $r21;
        com.android.server.wm.ActivityStarter $r22, $r23, $r24, $r25, $r27, $r28, $r29;
        android.os.Bundle $r26;
        java.lang.Throwable $r30, $r31;
        android.content.Intent r32;
        com.android.server.wm.WindowProcessController r33;
        java.lang.StringBuilder r34;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r32 := @parameter0: android.content.Intent;

        $r4 = virtualinvoke r32.<android.content.Intent: java.lang.String getPackage()>();

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>($r4);

        $r5 = virtualinvoke r32.<android.content.Intent: java.lang.String getPackage()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsDream(java.lang.String)>($r5);

        $r6 = new android.content.pm.ActivityInfo;

        specialinvoke $r6.<android.content.pm.ActivityInfo: void <init>()>();

        $r6.<android.content.pm.ActivityInfo: int theme> = 16974860;

        $r6.<android.content.pm.ActivityInfo: boolean exported> = 1;

        $r7 = class "Landroid/service/dreams/DreamActivity;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6.<android.content.pm.ActivityInfo: java.lang.String name> = $r8;

        $r6.<android.content.pm.ActivityInfo: boolean enabled> = 1;

        $r6.<android.content.pm.ActivityInfo: int launchMode> = 3;

        $r6.<android.content.pm.ActivityInfo: int persistableMode> = 1;

        $r6.<android.content.pm.ActivityInfo: int screenOrientation> = -1;

        $r6.<android.content.pm.ActivityInfo: int colorMode> = 0;

        $i3 = $r6.<android.content.pm.ActivityInfo: int flags>;

        $i4 = $i3 | 32;

        $r6.<android.content.pm.ActivityInfo: int flags> = $i4;

        r2 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeBasic()>();

        virtualinvoke r2.<android.app.ActivityOptions: void setLaunchActivityType(int)>(5);

        r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r33 = virtualinvoke $r9.<com.android.server.wm.WindowProcessControllerMap: com.android.server.wm.WindowProcessController getProcess(int)>($i5);

        $r10 = r33.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $r11 = $r10.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r6.<android.content.pm.ActivityInfo: java.lang.String packageName> = $r11;

        $r12 = r33.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $r6.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r12;

        $r13 = r33.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $r14 = $r13.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        $r6.<android.content.pm.ActivityInfo: java.lang.String processName> = $r14;

        $r15 = r33.<com.android.server.wm.WindowProcessController: android.content.pm.ApplicationInfo mInfo>;

        $i6 = $r15.<android.content.pm.ApplicationInfo: int uiOptions>;

        $r6.<android.content.pm.ActivityInfo: int uiOptions> = $i6;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android:");

        $r17 = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/dream");

        $r20 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6.<android.content.pm.ActivityInfo: java.lang.String taskAffinity> = $r20;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r21 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r22 = virtualinvoke $r21.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r32, "dream");

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingUid(int)>(i0);

        $r24 = virtualinvoke $r23.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPid(int)>(i1);

        $r25 = virtualinvoke $r24.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityInfo(android.content.pm.ActivityInfo)>($r6);

        $r26 = virtualinvoke r2.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

        $r27 = virtualinvoke $r25.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>($r26);

        $i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r28 = virtualinvoke $r27.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRealCallingUid(int)>($i7);

        $r29 = virtualinvoke $r28.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setAllowBackgroundActivityStart(boolean)>(1);

        virtualinvoke $r29.<com.android.server.wm.ActivityStarter: int execute()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r3;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label05:
        $r30 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label07:
        throw $r30;

     label08:
        $r31 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r31;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void startLocalVoiceInteraction(android.os.IBinder, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.Bundle r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityRecord r3, $r5;
        com.android.server.wm.ActivityStack $r4;
        android.service.voice.IVoiceInteractionSession $r6, $r8, $r9;
        com.android.server.wm.Task $r7;
        boolean $z0;
        java.lang.Object $r10;
        android.service.voice.VoiceInteractionManagerInternal $r11;
        java.lang.Throwable $r12;
        android.os.IBinder r13;
        java.lang.SecurityException r14;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r13 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.os.Bundle;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", "Activity tried to startLocalVoiceInteraction");

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        r3 = virtualinvoke $r4.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        $r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r13);

        if $r5 != r3 goto label09;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        if $r6 != null goto label07;

        $r7 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r8 = $r7.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r8 != null goto label07;

        $r9 = r3.<com.android.server.wm.ActivityRecord: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r9 == null goto label03;

     label02:
        goto label07;

     label03:
        $z0 = r3.<com.android.server.wm.ActivityRecord: boolean pendingVoiceInteractionStart>;

        if $z0 == 0 goto label05;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Pending start of voice interaction already.");

        exitmonitor r2;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        r3.<com.android.server.wm.ActivityRecord: boolean pendingVoiceInteractionStart> = 1;

        exitmonitor r2;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r10 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/service/voice/VoiceInteractionManagerInternal;");

        $r11 = (android.service.voice.VoiceInteractionManagerInternal) $r10;

        virtualinvoke $r11.<android.service.voice.VoiceInteractionManagerInternal: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>(r13, r1);

        return;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Already in a voice interaction, cannot start new voice interaction");

        exitmonitor r2;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        r14 = new java.lang.SecurityException;

        specialinvoke r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Only focused activity can call startVoiceInteraction");

        throw r14;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void startLockTaskModeByToken(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.Task $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r4);

     label2:
        if r5 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r2 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startLockTaskModeLocked(com.android.server.wm.Task,boolean)>($r2, 0);

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean startNextMatchingActivity(android.os.IBinder, android.content.Intent, android.os.Bundle)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.SafeActivityOptions r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.ActivityRecord r3, r68;
        java.util.List r5;
        android.content.pm.ResolveInfo r6, $r53;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        long l0;
        android.content.Intent $r7, $r8, $r10, r59;
        android.net.Uri $r9;
        java.lang.String $r11, $r13, $r16, $r17, $r23, $r30, $r32, $r39, $r40, $r43, $r44, $r45, $r47, $r48, $r49, $r50, $r51, r65, r69;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12;
        android.content.pm.IPackageManager $r12;
        android.content.pm.ParceledListSlice $r14;
        android.content.pm.ApplicationInfo $r15;
        com.android.server.wm.ActivityStartController $r18;
        com.android.server.wm.ActivityStarter $r19, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r33, $r34, $r35, $r36, r70;
        com.android.server.wm.WindowProcessController $r20;
        android.app.IApplicationThread $r21;
        java.lang.Object $r37, $r52;
        android.content.pm.ActivityInfo $r38, $r41, $r42, $r46, r61, r62;
        java.lang.IllegalArgumentException $r54;
        android.os.RemoteException $r55;
        java.lang.Throwable $r56, $r57, r72;
        android.os.IBinder r58;
        android.os.Bundle r60;
        java.lang.StringBuilder r63, r64, r66;
        android.content.ComponentName r67;
        com.android.server.wm.ActivityRecord$Token r71;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r58 := @parameter0: android.os.IBinder;

        r59 := @parameter1: android.content.Intent;

        r60 := @parameter2: android.os.Bundle;

        if r59 == null goto label02;

        $z4 = virtualinvoke r59.<android.content.Intent: boolean hasFileDescriptors()>();

        if $z4 != 0 goto label01;

        goto label02;

     label01:
        $r54 = new java.lang.IllegalArgumentException;

        specialinvoke $r54.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File descriptors passed in Intent");

        throw $r54;

     label02:
        r1 = staticinvoke <com.android.server.wm.SafeActivityOptions: com.android.server.wm.SafeActivityOptions fromBundle(android.os.Bundle)>(r60);

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r58);

     label04:
        if r3 != null goto label07;

     label05:
        staticinvoke <com.android.server.wm.SafeActivityOptions: void abort(com.android.server.wm.SafeActivityOptions)>(r1);

        exitmonitor r2;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label07:
        $z1 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: boolean attachedToProcess()>();

        if $z1 != 0 goto label09;

        staticinvoke <com.android.server.wm.SafeActivityOptions: void abort(com.android.server.wm.SafeActivityOptions)>(r1);

        exitmonitor r2;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label09:
        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(android.content.Intent)>(r59);

     label10:
        $r8 = r3.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r9 = virtualinvoke $r8.<android.content.Intent: android.net.Uri getData()>();

        $r10 = r3.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r11 = virtualinvoke $r10.<android.content.Intent: java.lang.String getType()>();

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r9, $r11);

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

        i7 = virtualinvoke $r7.<android.content.Intent: int getFlags()>();

     label11:
        $i1 = i7 & 8;

        if $i1 == 0 goto label12;

        z5 = 1;

        goto label13;

     label12:
        z5 = 0;

     label13:
        r61 = null;

        r62 = null;

     label14:
        $r12 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r13 = r3.<com.android.server.wm.ActivityRecord: java.lang.String resolvedType>;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r14 = interfaceinvoke $r12.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>($r7, $r13, 66560, $i2);

        r5 = virtualinvoke $r14.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label15:
        if r5 == null goto label18;

        r62 = null;

     label16:
        i8 = interfaceinvoke r5.<java.util.List: int size()>();

     label17:
        goto label19;

     label18:
        i8 = 0;

     label19:
        i9 = 0;

     label20:
        r62 = null;

        if i9 >= i8 goto label67;

        r62 = null;

     label21:
        $r37 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i9);

        r6 = (android.content.pm.ResolveInfo) $r37;

     label22:
        r62 = null;

     label23:
        $r38 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r40 = $r38.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r39 = r3.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $z2 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z2 == 0 goto label66;

     label24:
        r62 = null;

     label25:
        $r41 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r44 = $r41.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r42 = r3.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r43 = $r42.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z3 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z3 == 0 goto label66;

     label26:
        i10 = i9 + 1;

        if i10 >= i8 goto label28;

        r62 = null;

     label27:
        $r52 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i10);

        $r53 = (android.content.pm.ResolveInfo) $r52;

        r61 = $r53.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

     label28:
        r62 = r61;

        if z5 == 0 goto label67;

        r62 = r61;

     label29:
        r63 = new java.lang.StringBuilder;

     label30:
        r62 = r61;

     label31:
        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

     label32:
        r62 = r61;

     label33:
        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next matching activity: found current ");

     label34:
        r62 = r61;

     label35:
        $r45 = r3.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

     label36:
        r62 = r61;

     label37:
        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

     label38:
        r62 = r61;

     label39:
        $r46 = r3.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r47 = $r46.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

     label40:
        r62 = r61;

     label41:
        $r48 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("ActivityTaskManager", $r48);

     label42:
        r62 = r61;

     label43:
        r64 = new java.lang.StringBuilder;

     label44:
        r62 = r61;

     label45:
        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

     label46:
        r62 = r61;

     label47:
        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next matching activity: next is ");

     label48:
        if r61 != null goto label49;

        r65 = "null";

        goto label61;

     label49:
        r62 = r61;

     label50:
        r66 = new java.lang.StringBuilder;

     label51:
        r62 = r61;

     label52:
        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

     label53:
        r62 = r61;

     label54:
        $r49 = r61.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

     label55:
        r62 = r61;

     label56:
        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

     label57:
        r62 = r61;

     label58:
        $r50 = r61.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

     label59:
        r62 = r61;

     label60:
        r65 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

     label61:
        r62 = r61;

     label62:
        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

     label63:
        r62 = r61;

     label64:
        $r51 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("ActivityTaskManager", $r51);

     label65:
        r62 = r61;

        goto label67;

     label66:
        i9 = i9 + 1;

        goto label20;

     label67:
        goto label69;

     label68:
        $r55 := @caughtexception;

     label69:
        if r62 != null goto label75;

     label70:
        staticinvoke <com.android.server.wm.SafeActivityOptions: void abort(com.android.server.wm.SafeActivityOptions)>(r1);

     label71:
        if z5 == 0 goto label73;

     label72:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", "Next matching activity: nothing found");

     label73:
        exitmonitor r2;

     label74:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label75:
        r67 = new android.content.ComponentName;

        $r15 = r62.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r17 = $r15.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r16 = r62.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke r67.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r17, $r16);

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r67);

        $i3 = virtualinvoke $r7.<android.content.Intent: int getFlags()>();

        $i4 = $i3 & -503316481;

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setFlags(int)>($i4);

        z0 = r3.<com.android.server.wm.ActivityRecord: boolean finishing>;

        r3.<com.android.server.wm.ActivityRecord: boolean finishing> = 1;

        r68 = r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        r69 = r3.<com.android.server.wm.ActivityRecord: java.lang.String resultWho>;

        i11 = r3.<com.android.server.wm.ActivityRecord: int requestCode>;

        r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo> = null;

     label76:
        if r68 == null goto label78;

     label77:
        virtualinvoke r68.<com.android.server.wm.ActivityRecord: void removeResultsLocked(com.android.server.wm.ActivityRecord,java.lang.String,int)>(r3, r69, i11);

     label78:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r18 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>($r7, "startNextMatchingActivity");

        $r20 = r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r21 = virtualinvoke $r20.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        $r22 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCaller(android.app.IApplicationThread)>($r21);

        $r23 = r3.<com.android.server.wm.ActivityRecord: java.lang.String resolvedType>;

        $r24 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>($r23);

        r70 = virtualinvoke $r24.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityInfo(android.content.pm.ActivityInfo)>(r62);

     label79:
        if r68 == null goto label82;

     label80:
        r71 = r68.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

     label81:
        goto label83;

     label82:
        r71 = null;

     label83:
        $r25 = virtualinvoke r70.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultTo(android.os.IBinder)>(r71);

        $r26 = virtualinvoke $r25.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResultWho(java.lang.String)>(r69);

        $r27 = virtualinvoke $r26.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRequestCode(int)>(i11);

        $r28 = virtualinvoke $r27.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPid(int)>(-1);

        $i5 = r3.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        $r29 = virtualinvoke $r28.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingUid(int)>($i5);

        $r30 = r3.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        $r31 = virtualinvoke $r29.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>($r30);

        $r32 = r3.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        $r33 = virtualinvoke $r31.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRealCallingPid(int)>(-1);

        $i6 = r3.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        $r35 = virtualinvoke $r34.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setRealCallingUid(int)>($i6);

        $r36 = virtualinvoke $r35.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(com.android.server.wm.SafeActivityOptions)>(r1);

        i12 = virtualinvoke $r36.<com.android.server.wm.ActivityStarter: int execute()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        r3.<com.android.server.wm.ActivityRecord: boolean finishing> = z0;

     label84:
        if i12 == 0 goto label87;

     label85:
        exitmonitor r2;

     label86:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label87:
        exitmonitor r2;

     label88:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label89:
        $r56 := @caughtexception;

        r72 = $r56;

     label90:
        exitmonitor r2;

     label91:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r72;

     label92:
        $r57 := @caughtexception;

        r72 = $r57;

        goto label90;

        catch java.lang.Throwable from label03 to label04 with label89;
        catch java.lang.Throwable from label05 to label06 with label89;
        catch java.lang.Throwable from label07 to label08 with label89;
        catch java.lang.Throwable from label09 to label10 with label89;
        catch java.lang.Throwable from label10 to label11 with label92;
        catch android.os.RemoteException from label14 to label15 with label68;
        catch java.lang.Throwable from label14 to label15 with label92;
        catch android.os.RemoteException from label16 to label17 with label68;
        catch java.lang.Throwable from label16 to label17 with label92;
        catch android.os.RemoteException from label21 to label22 with label68;
        catch java.lang.Throwable from label21 to label22 with label92;
        catch android.os.RemoteException from label23 to label24 with label68;
        catch java.lang.Throwable from label23 to label24 with label92;
        catch android.os.RemoteException from label25 to label26 with label68;
        catch java.lang.Throwable from label25 to label26 with label92;
        catch android.os.RemoteException from label27 to label28 with label68;
        catch java.lang.Throwable from label27 to label28 with label92;
        catch android.os.RemoteException from label29 to label30 with label68;
        catch java.lang.Throwable from label29 to label30 with label92;
        catch android.os.RemoteException from label31 to label32 with label68;
        catch java.lang.Throwable from label31 to label32 with label92;
        catch android.os.RemoteException from label33 to label34 with label68;
        catch java.lang.Throwable from label33 to label34 with label92;
        catch android.os.RemoteException from label35 to label36 with label68;
        catch java.lang.Throwable from label35 to label36 with label92;
        catch android.os.RemoteException from label37 to label38 with label68;
        catch java.lang.Throwable from label37 to label38 with label92;
        catch android.os.RemoteException from label39 to label40 with label68;
        catch java.lang.Throwable from label39 to label40 with label92;
        catch android.os.RemoteException from label41 to label42 with label68;
        catch java.lang.Throwable from label41 to label42 with label92;
        catch android.os.RemoteException from label43 to label44 with label68;
        catch java.lang.Throwable from label43 to label44 with label92;
        catch android.os.RemoteException from label45 to label46 with label68;
        catch java.lang.Throwable from label45 to label46 with label92;
        catch android.os.RemoteException from label47 to label48 with label68;
        catch java.lang.Throwable from label47 to label48 with label92;
        catch android.os.RemoteException from label50 to label51 with label68;
        catch java.lang.Throwable from label50 to label51 with label92;
        catch android.os.RemoteException from label52 to label53 with label68;
        catch java.lang.Throwable from label52 to label53 with label92;
        catch android.os.RemoteException from label54 to label55 with label68;
        catch java.lang.Throwable from label54 to label55 with label92;
        catch android.os.RemoteException from label56 to label57 with label68;
        catch java.lang.Throwable from label56 to label57 with label92;
        catch android.os.RemoteException from label58 to label59 with label68;
        catch java.lang.Throwable from label58 to label59 with label92;
        catch android.os.RemoteException from label60 to label61 with label68;
        catch java.lang.Throwable from label60 to label61 with label92;
        catch android.os.RemoteException from label62 to label63 with label68;
        catch java.lang.Throwable from label62 to label63 with label92;
        catch android.os.RemoteException from label64 to label65 with label68;
        catch java.lang.Throwable from label64 to label65 with label92;
        catch java.lang.Throwable from label70 to label71 with label92;
        catch java.lang.Throwable from label72 to label73 with label92;
        catch java.lang.Throwable from label73 to label74 with label92;
        catch java.lang.Throwable from label75 to label76 with label92;
        catch java.lang.Throwable from label77 to label78 with label92;
        catch java.lang.Throwable from label78 to label79 with label92;
        catch java.lang.Throwable from label80 to label81 with label92;
        catch java.lang.Throwable from label83 to label84 with label92;
        catch java.lang.Throwable from label85 to label86 with label92;
        catch java.lang.Throwable from label87 to label88 with label92;
        catch java.lang.Throwable from label90 to label91 with label92;
    }

    void startProcessAsync(com.android.server.wm.ActivityRecord, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1, $z2;
        java.lang.String r1, $r6, $r14, $r16;
        android.content.pm.ActivityInfo $r3;
        com.android.server.wm.'-$$Lambda$qMFJUmfG50ZSjk7Tac67xBia0d4' $r4;
        android.app.ActivityManagerInternal $r5;
        android.content.pm.ApplicationInfo $r7;
        java.lang.Boolean $r8, $r9;
        android.content.Intent $r10;
        android.content.ComponentName $r11;
        com.android.server.wm.ActivityTaskManagerService$H $r12;
        java.lang.Throwable $r17;
        com.android.server.wm.ActivityRecord r18;
        android.os.Message r19;
        java.lang.StringBuilder r21;
        com.android.internal.util.function.HeptConsumer r22;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r18 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

     label1:
        $z2 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(32L);

        if $z2 == 0 goto label2;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchingStartProcess:");

        $r14 = r18.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, $r16);

     label2:
        $r4 = <com.android.server.wm._$$Lambda$qMFJUmfG50ZSjk7Tac67xBia0d4: com.android.server.wm.'-$$Lambda$qMFJUmfG50ZSjk7Tac67xBia0d4' INSTANCE>;

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r6 = r18.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        $r3 = r18.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r7 = $r3.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r10 = r18.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r11 = virtualinvoke $r10.<android.content.Intent: android.content.ComponentName getComponent()>();

        r22 = (com.android.internal.util.function.HeptConsumer) $r4;

        r19 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.HeptConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r22, $r5, $r6, $r7, $r8, $r9, r1, $r11);

        $r12 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r19);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label4:
        $r17 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r17;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void startRecentsActivity(android.content.Intent, android.app.IAssistDataReceiver, android.view.IRecentsAnimationRunner)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i3;
        long l2;
        android.content.ComponentName r1;
        java.lang.String r2;
        com.android.server.wm.WindowProcessController r3;
        com.android.server.wm.RecentsAnimation r4;
        com.android.server.wm.ActivityStackSupervisor r5;
        com.android.server.wm.ActivityStartController r6;
        com.android.server.wm.WindowManagerService r7;
        com.android.server.wm.RecentTasks $r9, $r10, $r11;
        java.lang.Throwable $r12, $r13, $r14, r20;
        android.content.Intent r15;
        android.app.IAssistDataReceiver r16;
        android.view.IRecentsAnimationRunner r17;
        com.android.server.wm.WindowManagerGlobalLock r18, r19, r21;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r15 := @parameter0: android.content.Intent;

        r16 := @parameter1: android.app.IAssistDataReceiver;

        r17 := @parameter2: android.view.IRecentsAnimationRunner;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "startRecentsActivity()");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r18 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r18;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        r1 = virtualinvoke $r9.<com.android.server.wm.RecentTasks: android.content.ComponentName getRecentsComponent()>();

        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        r2 = virtualinvoke $r10.<com.android.server.wm.RecentTasks: java.lang.String getRecentsComponentFeatureId()>();

        $r11 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks mRecentTasks>;

        i3 = virtualinvoke $r11.<com.android.server.wm.RecentTasks: int getRecentsComponentUid()>();

        r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(int,int)>(i0, i1);

        r4 = new com.android.server.wm.RecentsAnimation;

        r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        r6 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        r7 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

     label03:
        r19 = r18;

     label04:
        specialinvoke r4.<com.android.server.wm.RecentsAnimation: void <init>(com.android.server.wm.ActivityTaskManagerService,com.android.server.wm.ActivityStackSupervisor,com.android.server.wm.ActivityStartController,com.android.server.wm.WindowManagerService,android.content.Intent,android.content.ComponentName,java.lang.String,int,com.android.server.wm.WindowProcessController)>(r0, r5, r6, r7, r15, r1, r2, i3, r3);

     label05:
        if r17 != null goto label08;

        r19 = r18;

     label06:
        virtualinvoke r4.<com.android.server.wm.RecentsAnimation: void preloadRecentsActivity()>();

     label07:
        goto label10;

     label08:
        r19 = r18;

     label09:
        virtualinvoke r4.<com.android.server.wm.RecentsAnimation: void startRecentsActivity(android.view.IRecentsAnimationRunner)>(r17);

     label10:
        r19 = r18;

     label11:
        exitmonitor r18;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label14:
        $r14 := @caughtexception;

        r20 = $r14;

        r21 = r18;

     label15:
        r19 = r21;

     label16:
        exitmonitor r21;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r20;

     label18:
        $r12 := @caughtexception;

        r20 = $r12;

        r21 = r19;

        goto label15;

     label19:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    public void startSystemLockTaskMode(int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        android.app.ActivityManagerInternal $r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.ActivityStack $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.Task r7;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "startSystemLockTaskMode");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r7 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 0);

     label03:
        if r7 != null goto label06;

     label04:
        exitmonitor r6;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        $r3 = virtualinvoke r7.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r3.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>("startSystemLockTaskMode");

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startLockTaskModeLocked(com.android.server.wm.Task,boolean)>(r7, 1);

        exitmonitor r6;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r6;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label12:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public int startVoiceActivity(java.lang.String, java.lang.String, int, int, android.content.Intent, java.lang.String, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, int, android.app.ProfilerInfo, android.os.Bundle, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.String r1, r2, r4;
        int i0, i1, i2, $i3, i4, i5;
        android.content.Intent r3;
        android.service.voice.IVoiceInteractionSession r5;
        com.android.internal.app.IVoiceInteractor r6;
        android.app.ProfilerInfo r7;
        android.os.Bundle r8;
        android.app.ActivityManagerInternal $r9;
        java.lang.NullPointerException $r10;
        com.android.server.wm.ActivityStartController $r11;
        com.android.server.wm.ActivityStarter $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        r3 := @parameter4: android.content.Intent;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: android.service.voice.IVoiceInteractionSession;

        r6 := @parameter7: com.android.internal.app.IVoiceInteractor;

        i1 := @parameter8: int;

        r7 := @parameter9: android.app.ProfilerInfo;

        r8 := @parameter10: android.os.Bundle;

        i2 := @parameter11: int;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r1);

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r9.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BIND_VOICE_INTERACTION", "startVoiceActivity()");

        if r5 == null goto label1;

        if r6 == null goto label1;

        i5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int handleIncomingUser(int,int,int,java.lang.String)>(i4, i0, i2, "startVoiceActivity");

        $r11 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r12 = virtualinvoke $r11.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r3, "startVoiceActivity");

        $r13 = virtualinvoke $r12.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingUid(int)>(i0);

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setVoiceSession(android.service.voice.IVoiceInteractionSession)>(r5);

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setVoiceInteractor(com.android.internal.app.IVoiceInteractor)>(r6);

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setStartFlags(int)>(i1);

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setProfilerInfo(android.app.ProfilerInfo)>(r7);

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r8);

        $r22 = virtualinvoke $r21.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i5);

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setAllowBackgroundActivityStart(boolean)>(1);

        $i3 = virtualinvoke $r23.<com.android.server.wm.ActivityStarter: int execute()>();

        return $i3;

     label1:
        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("null session or interactor");

        throw $r10;
    }

    public void stopAppSwitches()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long $l0, $l1, $l2;
        com.android.server.wm.ActivityStartController $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.STOP_APP_SWITCHES", "stopAppSwitches");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = $l0 + 5000L;

        r0.<com.android.server.wm.ActivityTaskManagerService: long mAppSwitchesAllowedTime> = $l1;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: long mLastStopAppSwitchesTime> = $l2;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mDidAppSwitch> = 0;

        $r3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        virtualinvoke $r3.<com.android.server.wm.ActivityStartController: void schedulePendingActivityLaunches(long)>(5000L);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void stopLocalVoiceInteraction(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.os.IBinder r1;
        java.lang.Object $r2;
        android.service.voice.VoiceInteractionManagerInternal $r3;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/service/voice/VoiceInteractionManagerInternal;");

        $r3 = (android.service.voice.VoiceInteractionManagerInternal) $r2;

        virtualinvoke $r3.<android.service.voice.VoiceInteractionManagerInternal: void stopLocalVoiceInteraction(android.os.IBinder)>(r1);

        return;
    }

    public void stopLockTaskModeByToken(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.Task $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        com.android.server.wm.ActivityRecord r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r4);

     label2:
        if r5 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r2 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void stopLockTaskModeInternal(com.android.server.wm.Task,boolean)>($r2, 0);

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void stopSystemLockTaskMode() throws android.os.RemoteException
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ActivityManagerInternal $r1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r1.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "stopSystemLockTaskMode");

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void stopLockTaskModeInternal(com.android.server.wm.Task,boolean)>(null, 1);

        return;
    }

    public boolean supportsLocalVoiceInteraction()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.Object $r1;
        android.service.voice.VoiceInteractionManagerInternal $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/service/voice/VoiceInteractionManagerInternal;");

        $r2 = (android.service.voice.VoiceInteractionManagerInternal) $r1;

        $z0 = virtualinvoke $r2.<android.service.voice.VoiceInteractionManagerInternal: boolean supportsLocalVoiceInteraction()>();

        return $z0;
    }

    public void suppressResizeConfigChanges(boolean) throws android.os.RemoteException
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "suppressResizeConfigChanges()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSuppressResizeConfigChanges> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void toggleFreeformWindowingMode(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.StringBuilder r2;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.WindowContainer $r6;
        int $i1;
        java.lang.Throwable $r7, $r8;
        android.os.IBinder r9;
        com.android.server.wm.ActivityRecord r10;
        com.android.server.wm.ActivityStack r11;
        java.lang.IllegalStateException r12, r13, r14;
        java.lang.IllegalArgumentException r15;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r10 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r9);

     label03:
        if r10 == null goto label21;

     label04:
        r11 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

     label05:
        if r11 == null goto label20;

     label06:
        $z0 = virtualinvoke r11.<com.android.server.wm.ActivityStack: boolean inFreeformWindowingMode()>();

        if $z0 != 0 goto label09;

        $i1 = virtualinvoke r11.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if $i1 != 1 goto label08;

     label07:
        goto label09;

     label08:
        r12 = new java.lang.IllegalStateException;

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("toggleFreeformWindowingMode: You can only toggle between fullscreen and freeform.");

        throw r12;

     label09:
        $z1 = virtualinvoke r11.<com.android.server.wm.ActivityStack: boolean inFreeformWindowingMode()>();

        if $z1 == 0 goto label11;

        virtualinvoke r11.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(1);

     label10:
        goto label17;

     label11:
        $z2 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSizeCompatFreeform>;

        if $z2 != 0 goto label14;

        $z4 = virtualinvoke r10.<com.android.server.wm.ActivityRecord: boolean inSizeCompatMode()>();

        if $z4 != 0 goto label13;

     label12:
        goto label14;

     label13:
        r13 = new java.lang.IllegalStateException;

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Size-compat windows are currently notfreeform-enabled");

        throw r13;

     label14:
        $r6 = virtualinvoke r11.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getParent()>();

        $z3 = virtualinvoke $r6.<com.android.server.wm.WindowContainer: boolean inFreeformWindowingMode()>();

        if $z3 == 0 goto label16;

        virtualinvoke r11.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(0);

     label15:
        goto label17;

     label16:
        virtualinvoke r11.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(5);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label18:
        exitmonitor r1;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label20:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("toggleFreeformWindowingMode: the activity doesn\'t have a stack");

        throw r14;

     label21:
        r15 = new java.lang.IllegalArgumentException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toggleFreeformWindowingMode: No activity record matching token=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r15;

     label22:
        $r8 := @caughtexception;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label24:
        throw $r8;

     label25:
        $r7 := @caughtexception;

     label26:
        exitmonitor r1;

     label27:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public void unhandledBack()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        android.app.ActivityManagerInternal $r2;
        java.lang.Throwable $r3, $r4;
        com.android.server.wm.ActivityStack r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.FORCE_BACK", "unhandledBack()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

     label03:
        if r5 == null goto label05;

     label04:
        virtualinvoke r5.<com.android.server.wm.ActivityStack: void unhandledBackLocked()>();

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r3 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        throw $r3;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void unregisterRemoteAnimations(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        android.app.ActivityManagerInternal $r2;
        java.lang.Throwable $r3, $r4;
        android.os.IBinder r5;
        com.android.server.wm.ActivityRecord r6;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r5 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "unregisterRemoteAnimations");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord isInStackLocked(android.os.IBinder)>(r5);

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r6.<com.android.server.wm.ActivityRecord: void unregisterRemoteAnimations()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r4 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        throw $r4;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void unregisterTaskStackListener(android.app.ITaskStackListener)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.app.ITaskStackListener r1;
        com.android.server.wm.TaskChangeNotificationController $r2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.app.ITaskStackListener;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", "unregisterTaskStackListener()");

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController mTaskChangeNotificationController>;

        virtualinvoke $r2.<com.android.server.wm.TaskChangeNotificationController: void unregisterTaskStackListener(android.app.ITaskStackListener)>(r1);

        return;
    }

    void updateActivityUsageStats(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, $i1;
        com.android.server.wm.ActivityRecord r1, r4;
        com.android.server.wm.Task r2;
        android.content.ComponentName r3, $r7;
        com.android.server.wm.'-$$Lambda$UZl9uqUNteVgplGGEK6TMzf-7zk' $r5;
        android.app.ActivityManagerInternal $r6;
        java.lang.Integer $r8, $r9;
        com.android.server.wm.ActivityRecord$Token $r10;
        android.os.Message r11;
        com.android.server.wm.ActivityTaskManagerService$H $r12;
        com.android.internal.util.function.HexConsumer r13;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r3 = null;

        if r2 == null goto label1;

        r4 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

        r3 = null;

        if r4 == null goto label1;

        r3 = r4.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

     label1:
        $r5 = <com.android.server.wm._$$Lambda$UZl9uqUNteVgplGGEK6TMzf_7zk: com.android.server.wm.'-$$Lambda$UZl9uqUNteVgplGGEK6TMzf-7zk' INSTANCE>;

        $r6 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r7 = r1.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $i1 = r1.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        r13 = (com.android.internal.util.function.HexConsumer) $r5;

        r11 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.HexConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r13, $r6, $r7, $r8, $r9, $r10, r3);

        $r12 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r11);

        return;
    }

    void updateBatteryStats(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0;
        com.android.server.wm.WindowProcessController $r1;
        int $i0, $i1;
        com.android.server.wm.'-$$Lambda$hT1kyMEAhvB1-Uxr0DFAlnuU3cQ' $r2;
        android.app.ActivityManagerInternal $r3;
        android.content.ComponentName $r4;
        java.lang.Integer $r5, $r6;
        java.lang.Boolean $r7;
        com.android.server.wm.ActivityTaskManagerService$H $r8;
        com.android.server.wm.ActivityRecord r9;
        android.os.Message r10;
        com.android.internal.util.function.QuintConsumer r11;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r9 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        $r2 = <com.android.server.wm._$$Lambda$hT1kyMEAhvB1_Uxr0DFAlnuU3cQ: com.android.server.wm.'-$$Lambda$hT1kyMEAhvB1-Uxr0DFAlnuU3cQ' INSTANCE>;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r4 = r9.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r1 = r9.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $i0 = $r1.<com.android.server.wm.WindowProcessController: int mUid>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i1 = r9.<com.android.server.wm.ActivityRecord: int mUserId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r11 = (com.android.internal.util.function.QuintConsumer) $r2;

        r10 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.QuintConsumer,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r11, $r3, $r4, $r5, $r6, $r7);

        $r8 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r10);

        return;
    }

    public boolean updateConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        int i1;
        android.app.ActivityManagerInternal $r2, $r5;
        com.android.server.wm.ActivityTaskManagerService$H $r3;
        com.android.server.wm.'-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ' $r4;
        java.lang.Integer $r6;
        android.os.Message $r7;
        com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult $r8, $r9;
        com.android.server.wm.WindowManagerService $r10, r14;
        java.lang.Throwable $r11, $r12;
        android.content.res.Configuration r13, r15;
        boolean z2;
        java.util.function.BiConsumer r18;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r13 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r14 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

     label02:
        z2 = 0;

        if r14 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", "Skip updateConfiguration because mWindowManager isn\'t set");

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label05:
        r15 = r13;

        if r13 != null goto label07;

     label06:
        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        r15 = virtualinvoke $r10.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration(int)>(0);

     label07:
        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r4 = <com.android.server.wm._$$Lambda$ADNhW0r9Skcs9ezrOGURijI_lyQ: com.android.server.wm.'-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ' INSTANCE>;

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r18 = (java.util.function.BiConsumer) $r4;

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r18, $r5, $r6);

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>($r7);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        if r15 == null goto label10;

     label09:
        staticinvoke <android.provider.Settings$System: void clearConfiguration(android.content.res.Configuration)>(r15);

     label10:
        $r8 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult mTmpUpdateConfigurationResult>;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,boolean,int,boolean,com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)>(r15, null, 0, 0, -10000, 0, $r8);

        $r9 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult mTmpUpdateConfigurationResult>;

        i1 = $r9.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: int changes>;

     label11:
        if i1 == 0 goto label12;

        z2 = 1;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z2;

     label14:
        $r11 := @caughtexception;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label16:
        throw $r11;

     label17:
        $r12 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    boolean updateConfigurationLocked(android.content.res.Configuration, com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;
        com.android.server.wm.ActivityRecord r2;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,boolean)>(r1, r2, z0, 0);

        return $z1;
    }

    boolean updateConfigurationLocked(android.content.res.Configuration, com.android.server.wm.ActivityRecord, boolean, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        android.content.res.Configuration r1;
        com.android.server.wm.ActivityRecord r2;
        boolean z0, z1, $z2;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,boolean,int,boolean)>(r1, r2, z0, 0, -10000, z1);

        return $z2;
    }

    boolean updateConfigurationLocked(android.content.res.Configuration, com.android.server.wm.ActivityRecord, boolean, boolean, int, boolean, com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        int i0, i1;
        boolean z0, z1, z2, z3, z4;
        com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult r2;
        java.lang.Throwable $r3;
        android.content.res.Configuration r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.content.res.Configuration;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        r2 := @parameter6: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult;

        i1 = 0;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

        if r4 == null goto label2;

     label1:
        i1 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int updateGlobalConfigurationLocked(android.content.res.Configuration,boolean,boolean,int,boolean)>(r4, z1, z2, i0, z0);

     label2:
        z3 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean ensureConfigAndVisibilityAfterUpdate(com.android.server.wm.ActivityRecord,int)>(r1, i1);

     label3:
        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        if r2 == null goto label6;

        r2.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: int changes> = i1;

        if z3 != 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        z4 = 0;

     label5:
        r2.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: boolean activityRelaunched> = z4;

     label6:
        return z3;

     label7:
        $r3 := @caughtexception;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
    }

    void updateCpuStats()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.ActivityTaskManagerService$H r1;
        android.app.ActivityManagerInternal r2;
        com.android.server.wm._$$Lambda$LYW1ECaEajjYgarzgKdTZ4O1fi0 $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = new com.android.server.wm._$$Lambda$LYW1ECaEajjYgarzgKdTZ4O1fi0;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$LYW1ECaEajjYgarzgKdTZ4O1fi0: void <init>(android.app.ActivityManagerInternal)>(r2);

        virtualinvoke r1.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    int updateGlobalConfigurationLocked(android.content.res.Configuration, boolean, boolean, int, boolean)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1, z2, $z4, $z6, $z7;
        com.android.server.wm.DisplayContent r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, i23, i24, $i25, $i26, $i27, i28;
        com.android.server.wm.RootWindowContainer $r2, $r19, $r42;
        android.content.res.Configuration $r3, $r4, $r5, $r10, $r13, $r20, $r26, r33, $r41, $r43, $r47, $r50, $r52, r60;
        float $f0;
        android.app.ActivityThread $r11;
        com.android.server.wm.'-$$Lambda$swA_sUfSJdP8eC8AA9Iby3-SuOY' $r14;
        android.app.ActivityManagerInternal $r15, $r51;
        java.lang.Integer $r16, $r24;
        java.lang.Boolean $r17;
        com.android.server.wm.ActivityTaskManagerService$H $r18, $r25, $r40;
        java.lang.Object $r21;
        com.android.server.wm.WindowProcessController $r22;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$yP9TbBmrgQ4lrgcxb-8oL1pBAs4' $r23;
        android.os.LocaleList $r27, r34;
        java.lang.String[] $r28, $r29, $r32;
        android.content.res.Resources $r30;
        android.content.res.AssetManager $r31;
        java.util.Locale $r35, $r38;
        java.lang.String $r36, $r46, $r48;
        com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$U6g1UdnOPnEF9wX1OTm9nKVXY5k' $r37;
        android.os.Message r39, r55, r58;
        android.app.usage.UsageStatsManagerInternal $r49;
        com.android.server.AttributeCache r53;
        com.android.server.wm.WindowProcessControllerMap $r56;
        android.util.SparseArray r57;
        java.lang.StringBuilder r59;
        java.util.function.BiConsumer r61;
        com.android.internal.util.function.TriConsumer r62, r63;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r33 := @parameter0: android.content.res.Configuration;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i23 := @parameter3: int;

        z2 := @parameter4: boolean;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        $r4 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

        virtualinvoke $r3.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r4);

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        i0 = virtualinvoke $r5.<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>(r33);

        if i0 != 0 goto label1;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: int performDisplayOverrideConfigUpdate(android.content.res.Configuration,boolean)>(r33, z2);

        return 0;

     label1:
        staticinvoke <com.android.server.am.EventLogTags: void writeConfigurationChanged(int)>(i0);

        $i16 = r33.<android.content.res.Configuration: int colorMode>;

        $i15 = r33.<android.content.res.Configuration: int densityDpi>;

        $f0 = r33.<android.content.res.Configuration: float fontScale>;

        $i14 = r33.<android.content.res.Configuration: int hardKeyboardHidden>;

        $i13 = r33.<android.content.res.Configuration: int keyboard>;

        $i12 = r33.<android.content.res.Configuration: int keyboardHidden>;

        $i11 = r33.<android.content.res.Configuration: int mcc>;

        $i10 = r33.<android.content.res.Configuration: int mnc>;

        $i9 = r33.<android.content.res.Configuration: int navigation>;

        $i8 = r33.<android.content.res.Configuration: int navigationHidden>;

        $i7 = r33.<android.content.res.Configuration: int orientation>;

        $i6 = r33.<android.content.res.Configuration: int screenHeightDp>;

        $i5 = r33.<android.content.res.Configuration: int screenLayout>;

        $i4 = r33.<android.content.res.Configuration: int screenWidthDp>;

        $i3 = r33.<android.content.res.Configuration: int smallestScreenWidthDp>;

        $i2 = r33.<android.content.res.Configuration: int touchscreen>;

        $i1 = r33.<android.content.res.Configuration: int uiMode>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>(66, $i16, $i15, $f0, $i14, $i13, $i12, $i11, $i10, $i9, $i8, $i7, $i6, $i5, $i4, $i3, $i2, $i1);

        if z0 != 0 goto label4;

        $r27 = virtualinvoke r33.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $z6 = virtualinvoke $r27.<android.os.LocaleList: boolean isEmpty()>();

        if $z6 != 0 goto label4;

        $z7 = r33.<android.content.res.Configuration: boolean userSetLocale>;

        if $z7 == 0 goto label4;

        r34 = virtualinvoke r33.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        i24 = 0;

        $i20 = virtualinvoke r34.<android.os.LocaleList: int size()>();

        if $i20 <= 1 goto label3;

        $r28 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String[] mSupportedSystemLocales>;

        if $r28 != null goto label2;

        $r30 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r31 = virtualinvoke $r30.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        $r32 = virtualinvoke $r31.<android.content.res.AssetManager: java.lang.String[] getLocales()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String[] mSupportedSystemLocales> = $r32;

     label2:
        $r29 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.String[] mSupportedSystemLocales>;

        $i21 = virtualinvoke r34.<android.os.LocaleList: int getFirstMatchIndex(java.lang.String[])>($r29);

        i24 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i21);

     label3:
        $r35 = virtualinvoke r34.<android.os.LocaleList: java.util.Locale get(int)>(i24);

        $r36 = virtualinvoke $r35.<java.util.Locale: java.lang.String toLanguageTag()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.locale", $r36);

        staticinvoke <android.os.LocaleList: void setDefault(android.os.LocaleList,int)>(r34, i24);

        $r37 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$U6g1UdnOPnEF9wX1OTm9nKVXY5k: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$U6g1UdnOPnEF9wX1OTm9nKVXY5k' INSTANCE>;

        $r38 = virtualinvoke r34.<android.os.LocaleList: java.util.Locale get(int)>(i24);

        r61 = (java.util.function.BiConsumer) $r37;

        r39 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r61, r0, $r38);

        $r40 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r40.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r39);

     label4:
        $r41 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        $i25 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: int increaseConfigurationSeqLocked()>();

        $r41.<android.content.res.Configuration: int seq> = $i25;

        $r42 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r43 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        virtualinvoke $r42.<com.android.server.wm.RootWindowContainer: void onConfigurationChanged(android.content.res.Configuration)>($r43);

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config changes=");

        $r46 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r47 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r48 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ActivityTaskManager", $r48);

        $r49 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.usage.UsageStatsManagerInternal mUsageStatsInternal>;

        $r50 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        $r51 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i26 = virtualinvoke $r51.<android.app.ActivityManagerInternal: int getCurrentUserId()>();

        virtualinvoke $r49.<android.app.usage.UsageStatsManagerInternal: void reportConfigurationChange(android.content.res.Configuration,int)>($r50, $i26);

        $r52 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateShouldShowDialogsLocked(android.content.res.Configuration)>($r52);

        r53 = staticinvoke <com.android.server.AttributeCache: com.android.server.AttributeCache instance()>();

        if r53 == null goto label5;

        $r26 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        virtualinvoke r53.<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)>($r26);

     label5:
        $r11 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityThread mSystemThread>;

        $r10 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        virtualinvoke $r11.<android.app.ActivityThread: void applyConfigurationToResources(android.content.res.Configuration)>($r10);

        r60 = new android.content.res.Configuration;

        $r13 = r0.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration mTempConfig>;

        specialinvoke r60.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r13);

        if z1 == 0 goto label6;

        $z4 = staticinvoke <android.provider.Settings$System: boolean hasInterestingConfigurationChanges(int)>(i0);

        if $z4 == 0 goto label6;

        $r23 = <com.android.server.wm._$$Lambda$ActivityTaskManagerService$yP9TbBmrgQ4lrgcxb_8oL1pBAs4: com.android.server.wm.'-$$Lambda$ActivityTaskManagerService$yP9TbBmrgQ4lrgcxb-8oL1pBAs4' INSTANCE>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i23);

        r62 = (com.android.internal.util.function.TriConsumer) $r23;

        r55 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r62, r0, $r24, r60);

        $r25 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r25.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r55);

     label6:
        $r56 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        r57 = virtualinvoke $r56.<com.android.server.wm.WindowProcessControllerMap: android.util.SparseArray getPidMap()>();

        $i27 = virtualinvoke r57.<android.util.SparseArray: int size()>();

        i28 = $i27 - 1;

     label7:
        if i28 < 0 goto label8;

        $i19 = virtualinvoke r57.<android.util.SparseArray: int keyAt(int)>(i28);

        $r21 = virtualinvoke r57.<android.util.SparseArray: java.lang.Object get(int)>($i19);

        $r22 = (com.android.server.wm.WindowProcessController) $r21;

        virtualinvoke $r22.<com.android.server.wm.WindowProcessController: void onConfigurationChanged(android.content.res.Configuration)>(r60);

        i28 = i28 + -1;

        goto label7;

     label8:
        $r14 = <com.android.server.wm._$$Lambda$swA_sUfSJdP8eC8AA9Iby3_SuOY: com.android.server.wm.'-$$Lambda$swA_sUfSJdP8eC8AA9Iby3-SuOY' INSTANCE>;

        $r15 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r63 = (com.android.internal.util.function.TriConsumer) $r14;

        r58 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r63, $r15, $r16, $r17);

        $r18 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r18.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r58);

        $r19 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r20 = virtualinvoke $r19.<com.android.server.wm.RootWindowContainer: android.content.res.Configuration getConfiguration()>();

        virtualinvoke r1.<com.android.server.wm.DisplayContent: int performDisplayOverrideConfigUpdate(android.content.res.Configuration,boolean)>($r20, z2);

        return i0;
    }

    public void updateLockTaskFeatures(int, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1, i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.LockTaskController $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i2 == 0 goto label1;

        if i2 == 1000 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskFeatures()");

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r5.<com.android.server.wm.LockTaskController: void updateLockTaskFeatures(int,int)>(i0, i1);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void updateLockTaskPackages(int, java.lang.String[])
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.app.ActivityManagerInternal $r2;
        java.lang.Throwable $r3;
        java.lang.String[] r4;
        com.android.server.wm.LockTaskController $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String[];

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i1 == 0 goto label1;

        if i1 == 1000 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r2.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskPackages()");

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r5.<com.android.server.wm.LockTaskController: void updateLockTaskPackages(int,java.lang.String[])>(i0, r4);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void updateOomAdj()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        java.lang.Runnable $r1, $r3;
        com.android.server.wm.ActivityTaskManagerService$H $r2, $r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r1 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.Runnable mUpdateOomAdjRunnable>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService$H: void removeCallbacks(java.lang.Runnable)>($r1);

        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: java.lang.Runnable mUpdateOomAdjRunnable>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    public void updatePersistentConfiguration(android.content.res.Configuration, int)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2, $r3;
        android.content.res.Configuration r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,boolean,int,boolean)>(r4, null, 0, 1, i0, 0);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

     label8:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    void updateSleepIfNeededLocked()
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        boolean z0, z1, $z3, $z4, z5;
        com.android.server.am.AppTimeTracker r1;
        com.android.server.wm.RootWindowContainer $r2, $r4;
        com.android.server.wm.ActivityStackSupervisor $r3, $r5;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        $r2 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $z3 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: boolean hasAwakeDisplay()>();

        z0 = $z3 ^ 1;

        z1 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping>;

        if z0 != 0 goto label2;

        if z1 == 0 goto label1;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping> = 0;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int)>(14, 2);

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void startTimeTrackingFocusedActivityLocked()>();

        r0.<com.android.server.wm.ActivityTaskManagerService: int mTopProcessState> = 2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", "Top Process State changed to PROCESS_STATE_TOP");

        $r5 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: void comeOutOfSleepIfNeededLocked()>();

     label1:
        $r4 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void applySleepTokens(boolean)>(1);

        z5 = 0;

        if z1 == 0 goto label4;

        z5 = 1;

        goto label4;

     label2:
        z5 = 0;

        $z4 = r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping>;

        if $z4 != 0 goto label4;

        z5 = 0;

        if z0 == 0 goto label4;

        r0.<com.android.server.wm.ActivityTaskManagerService: boolean mSleeping> = 1;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int)>(14, 1);

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.am.AppTimeTracker mCurAppTimeTracker>;

        if r1 == null goto label3;

        virtualinvoke r1.<com.android.server.am.AppTimeTracker: void stop()>();

     label3:
        r0.<com.android.server.wm.ActivityTaskManagerService: int mTopProcessState> = 12;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ActivityTaskManager", "Top Process State changed to PROCESS_STATE_TOP_SLEEPING");

        $r3 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void goingToSleepLocked()>();

        specialinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateResumedAppTrace(com.android.server.wm.ActivityRecord)>(null);

        z5 = 1;

     label4:
        if z5 == 0 goto label5;

        virtualinvoke r0.<com.android.server.wm.ActivityTaskManagerService: void updateOomAdj()>();

     label5:
        return;
    }

    public boolean willActivityBeVisible(android.os.IBinder)
    {
        com.android.server.wm.ActivityTaskManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityStack r2;
        boolean z0;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStackLocked(android.os.IBinder)>(r4);

     label2:
        if r2 == null goto label5;

     label3:
        z0 = virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean willActivityBeVisible(android.os.IBinder)>(r4);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_VISIBILITY> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_SWITCH> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_STACK> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_LOCKTASK> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_IMMERSIVE> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_FOCUS> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG_CONFIGURATION> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.ActivityTaskManagerService: long START_AS_CALLER_TOKEN_TIMEOUT_IMPL> = 602000L;

        <com.android.server.wm.ActivityTaskManagerService: long START_AS_CALLER_TOKEN_TIMEOUT> = 600000L;

        <com.android.server.wm.ActivityTaskManagerService: long START_AS_CALLER_TOKEN_EXPIRED_TIMEOUT> = 1802000L;

        <com.android.server.wm.ActivityTaskManagerService: int RELAUNCH_REASON_WINDOWING_MODE_RESIZE> = 1;

        <com.android.server.wm.ActivityTaskManagerService: int RELAUNCH_REASON_NONE> = 0;

        <com.android.server.wm.ActivityTaskManagerService: int RELAUNCH_REASON_FREE_RESIZE> = 2;

        <com.android.server.wm.ActivityTaskManagerService: int PENDING_AUTOFILL_ASSIST_STRUCTURE_TIMEOUT> = 2000;

        <com.android.server.wm.ActivityTaskManagerService: int PENDING_ASSIST_EXTRAS_TIMEOUT> = 500;

        <com.android.server.wm.ActivityTaskManagerService: int PENDING_ASSIST_EXTRAS_LONG_TIMEOUT> = 2000;

        <com.android.server.wm.ActivityTaskManagerService: int LAYOUT_REASON_VISIBILITY_CHANGED> = 2;

        <com.android.server.wm.ActivityTaskManagerService: int LAYOUT_REASON_CONFIG_CHANGED> = 1;

        <com.android.server.wm.ActivityTaskManagerService: int KEY_DISPATCHING_TIMEOUT_MS> = 5000;

        <com.android.server.wm.ActivityTaskManagerService: int INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT_MS> = 60000;

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_STARTER_CMD> = "starter";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_RECENTS_SHORT_CMD> = "r";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_RECENTS_CMD> = "recents";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_LASTANR_TRACES_CMD> = "lastanr-traces";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_LASTANR_CMD> = "lastanr";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_CONTAINERS_CMD> = "containers";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_ACTIVITIES_SHORT_CMD> = "a";

        <com.android.server.wm.ActivityTaskManagerService: java.lang.String DUMP_ACTIVITIES_CMD> = "activities";

        <com.android.server.wm.ActivityTaskManagerService: long APP_SWITCH_DELAY_TIME> = 5000L;

        <com.android.server.wm.ActivityTaskManagerService: boolean ANIMATE> = 1;

        <com.android.server.wm.ActivityTaskManagerService: long ACTIVITY_BG_START_GRACE_PERIOD_MS> = 10000L;

        return;
    }
}
