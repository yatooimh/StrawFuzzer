class com.android.server.wm.AppTaskImpl extends android.app.IAppTask$Stub
{
    private static final java.lang.String TAG;
    private int mCallingUid;
    private com.android.server.wm.ActivityTaskManagerService mService;
    private int mTaskId;

    public void <init>(com.android.server.wm.ActivityTaskManagerService, int, int)
    {
        com.android.server.wm.AppTaskImpl r0;
        com.android.server.wm.ActivityTaskManagerService r1;
        int i0, i1;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.app.IAppTask$Stub: void <init>()>();

        r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService> = r1;

        r0.<com.android.server.wm.AppTaskImpl: int mTaskId> = i0;

        r0.<com.android.server.wm.AppTaskImpl: int mCallingUid> = i1;

        return;
    }

    private void checkCaller()
    {
        com.android.server.wm.AppTaskImpl r0;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r7;
        java.lang.String $r8;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        $i0 = r0.<com.android.server.wm.AppTaskImpl: int mCallingUid>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != $i1 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller ");

        $i2 = r0.<com.android.server.wm.AppTaskImpl: int mCallingUid>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match caller of getAppTasks(): ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void finishAndRemoveTask()
    {
        com.android.server.wm.AppTaskImpl r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        boolean z0;
        java.lang.IllegalArgumentException r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r4;
        int $i1, $i2;
        com.android.server.wm.ActivityStackSupervisor $r5;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        specialinvoke r0.<com.android.server.wm.AppTaskImpl: void checkCaller()>();

        $r3 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r4 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r5 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i1 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        z0 = virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: boolean removeTaskById(int,boolean,boolean,java.lang.String)>($i1, 0, 1, "finish-and-remove-task");

     label03:
        if z0 == 0 goto label07;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label05:
        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        r2 = new java.lang.IllegalArgumentException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find task ID ");

        $i2 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r2;

     label08:
        $r9 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        throw $r9;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.app.ActivityManager$RecentTaskInfo getTaskInfo()
    {
        com.android.server.wm.AppTaskImpl r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.IllegalArgumentException r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r4, $r9;
        int $i1, $i2;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.String $r8;
        com.android.server.wm.RecentTasks $r10;
        java.lang.Throwable $r11, $r12;
        com.android.server.wm.Task r13;
        android.app.ActivityManager$RecentTaskInfo r14;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        specialinvoke r0.<com.android.server.wm.AppTaskImpl: void checkCaller()>();

        $r3 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r4 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r5 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i1 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        r13 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>($i1, 1);

     label03:
        if r13 == null goto label07;

     label04:
        $r9 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        r14 = virtualinvoke $r10.<com.android.server.wm.RecentTasks: android.app.ActivityManager$RecentTaskInfo createRecentTaskInfo(com.android.server.wm.Task,boolean)>(r13, 0);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r14;

     label07:
        r2 = new java.lang.IllegalArgumentException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find task ID ");

        $i2 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r2;

     label08:
        $r12 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        throw $r12;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void moveToFront(android.app.IApplicationThread, java.lang.String)
    {
        com.android.server.wm.AppTaskImpl r0;
        int i0, i1, $i3;
        long l2;
        com.android.server.wm.ActivityStarter r1;
        com.android.server.wm.ActivityTaskManagerService $r2, $r3, $r4, $r5, $r7, $r9, $r10;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ActivityStartController $r6;
        com.android.server.wm.ActivityStackSupervisor $r8;
        java.lang.Throwable $r11, $r12, $r13, r21;
        android.app.IApplicationThread r14;
        java.lang.String r15;
        com.android.server.wm.WindowManagerGlobalLock r16, r18, r20;
        com.android.server.wm.WindowProcessController r17;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        r14 := @parameter0: android.app.IApplicationThread;

        r15 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.wm.AppTaskImpl: void checkCaller()>();

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r15);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r3 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        r16 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $z0 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: boolean checkAppSwitchAllowedLocked(int,int,int,int,java.lang.String)>(i0, i1, -1, -1, "Move to front");

        if $z0 != 0 goto label04;

        exitmonitor r16;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label04:
        r17 = null;

        if r14 == null goto label06;

     label05:
        $r10 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        r17 = virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(android.app.IApplicationThread)>(r14);

     label06:
        $r5 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        r1 = virtualinvoke $r6.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(null, "moveToFront");

     label07:
        r18 = r16;

     label08:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityStarter: boolean shouldAbortBackgroundActivityStart(int,int,java.lang.String,int,int,com.android.server.wm.WindowProcessController,com.android.server.am.PendingIntentRecord,boolean,android.content.Intent)>(i1, i0, r15, -1, -1, r17, null, 0, null);

        if $z1 == 0 goto label14;

     label09:
        r18 = r16;

     label10:
        $r9 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $z2 = virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: boolean isBackgroundActivityStartsEnabled()>();

        if $z2 != 0 goto label14;

     label11:
        r18 = r16;

     label12:
        exitmonitor r16;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label14:
        r18 = r16;

     label15:
        $r7 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r8 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $i3 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        virtualinvoke $r8.<com.android.server.wm.ActivityStackSupervisor: int startActivityFromRecents(int,int,int,com.android.server.wm.SafeActivityOptions)>(i0, i1, $i3, null);

     label16:
        r18 = r16;

     label17:
        exitmonitor r16;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label20:
        $r13 := @caughtexception;

        r20 = r16;

        r21 = $r13;

     label21:
        r18 = r20;

     label22:
        exitmonitor r20;

     label23:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r21;

     label24:
        $r12 := @caughtexception;

        r21 = $r12;

        r20 = r18;

        goto label21;

     label25:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    public void setExcludeFromRecents(boolean)
    {
        com.android.server.wm.AppTaskImpl r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        java.lang.StringBuilder r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r4;
        int $i1, $i2, $i3, $i4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.String $r8;
        java.lang.Throwable $r11, $r12;
        com.android.server.wm.Task r13;
        android.content.Intent r14;
        java.lang.IllegalArgumentException r15;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.wm.AppTaskImpl: void checkCaller()>();

        $r3 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r4 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r5 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i1 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        r13 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>($i1, 1);

     label03:
        if r13 == null goto label12;

     label04:
        r14 = virtualinvoke r13.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

     label05:
        if z0 == 0 goto label08;

     label06:
        virtualinvoke r14.<android.content.Intent: android.content.Intent addFlags(int)>(8388608);

     label07:
        goto label09;

     label08:
        $i3 = virtualinvoke r14.<android.content.Intent: int getFlags()>();

        $i4 = $i3 & -8388609;

        virtualinvoke r14.<android.content.Intent: android.content.Intent setFlags(int)>($i4);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        r15 = new java.lang.IllegalArgumentException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find task ID ");

        $i2 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r15;

     label13:
        $r11 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label15:
        throw $r11;

     label16:
        $r12 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public int startActivity(android.os.IBinder, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.Bundle)
    {
        com.android.server.wm.AppTaskImpl r0;
        android.content.Intent r1;
        java.lang.String r2, $r12, $r15, r28, r29;
        android.os.Bundle r3;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        com.android.server.wm.Task r5;
        com.android.server.wm.ActivityTaskManagerService $r6, $r7, $r8, $r16;
        com.android.server.wm.RootWindowContainer $r9;
        com.android.server.wm.ActivityStartController $r17;
        com.android.server.wm.ActivityStarter $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.Throwable $r26;
        android.os.IBinder r27;
        android.app.IApplicationThread r30;
        java.lang.IllegalArgumentException r31, r33;
        java.lang.StringBuilder r32, r34;

        r0 := @this: com.android.server.wm.AppTaskImpl;

        r27 := @parameter0: android.os.IBinder;

        r28 := @parameter1: java.lang.String;

        r29 := @parameter2: java.lang.String;

        r1 := @parameter3: android.content.Intent;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: android.os.Bundle;

        specialinvoke r0.<com.android.server.wm.AppTaskImpl: void checkCaller()>();

        $r6 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: void assertPackageMatchesCallingUid(java.lang.String)>(r28);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        r4 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r8 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r9 = $r8.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $i1 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        r5 = virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>($i1, 1);

     label02:
        if r5 == null goto label08;

     label03:
        r30 = staticinvoke <android.app.IApplicationThread$Stub: android.app.IApplicationThread asInterface(android.os.IBinder)>(r27);

     label04:
        if r30 == null goto label07;

     label05:
        exitmonitor r4;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r16 = r0.<com.android.server.wm.AppTaskImpl: com.android.server.wm.ActivityTaskManagerService mService>;

        $r17 = virtualinvoke $r16.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityStartController: com.android.server.wm.ActivityStarter obtainStarter(android.content.Intent,java.lang.String)>(r1, "AppTaskImpl");

        $r19 = virtualinvoke $r18.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCaller(android.app.IApplicationThread)>(r30);

        $r20 = virtualinvoke $r19.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingPackage(java.lang.String)>(r28);

        $r21 = virtualinvoke $r20.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setCallingFeatureId(java.lang.String)>(r29);

        $r22 = virtualinvoke $r21.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setResolvedType(java.lang.String)>(r2);

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setActivityOptions(android.os.Bundle)>(r3);

        $r24 = virtualinvoke $r23.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setUserId(int)>(i0);

        $r25 = virtualinvoke $r24.<com.android.server.wm.ActivityStarter: com.android.server.wm.ActivityStarter setInTask(com.android.server.wm.Task)>(r5);

        $i3 = virtualinvoke $r25.<com.android.server.wm.ActivityStarter: int execute()>();

        return $i3;

     label07:
        r31 = new java.lang.IllegalArgumentException;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad app thread ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r15 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r31;

     label08:
        r33 = new java.lang.IllegalArgumentException;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find task ID ");

        $i2 = r0.<com.android.server.wm.AppTaskImpl: int mTaskId>;

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw r33;

     label09:
        $r26 := @caughtexception;

     label10:
        exitmonitor r4;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r26;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.AppTaskImpl: java.lang.String TAG> = "AppTaskImpl";

        return;
    }
}
