public final class com.android.server.wm.CompatModePackages extends java.lang.Object
{
    private static final int COMPAT_FLAG_DONT_ASK;
    private static final int COMPAT_FLAG_ENABLED;
    private static final int MSG_WRITE;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_CONFIGURATION;
    private final android.util.AtomicFile mFile;
    private final com.android.server.wm.CompatModePackages$CompatHandler mHandler;
    private final java.util.HashMap mPackages;
    private final com.android.server.wm.ActivityTaskManagerService mService;

    public void <init>(com.android.server.wm.ActivityTaskManagerService, java.io.File, android.os.Handler)
    {
        com.android.server.wm.CompatModePackages r0;
        java.io.FileInputStream r1, r26, r27, r28;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String r3, $r11, $r12, $r13, $r14, r30, r31;
        java.util.HashMap $r4, $r33;
        android.util.AtomicFile $r5, $r9;
        java.io.File $r6, r24;
        com.android.server.wm.CompatModePackages$CompatHandler $r7;
        android.os.Looper $r8;
        java.nio.charset.Charset $r10;
        boolean $z0, $z1;
        int $i0, i3, i4, i6, i7;
        java.lang.Throwable $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        com.android.server.wm.ActivityTaskManagerService r23;
        android.os.Handler r25;
        java.lang.Integer $r34;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r23 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        r24 := @parameter1: java.io.File;

        r25 := @parameter2: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages> = $r4;

        r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService> = r23;

        $r5 = new android.util.AtomicFile;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r24, "packages-compat.xml");

        specialinvoke $r5.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r6, "compat-mode");

        r0.<com.android.server.wm.CompatModePackages: android.util.AtomicFile mFile> = $r5;

        $r7 = new com.android.server.wm.CompatModePackages$CompatHandler;

        $r8 = virtualinvoke r25.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r7.<com.android.server.wm.CompatModePackages$CompatHandler: void <init>(com.android.server.wm.CompatModePackages,android.os.Looper)>(r0, $r8);

        r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.CompatModePackages$CompatHandler mHandler> = $r7;

        r26 = null;

        r27 = null;

        r28 = null;

     label01:
        $r9 = r0.<com.android.server.wm.CompatModePackages: android.util.AtomicFile mFile>;

        r1 = virtualinvoke $r9.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label03:
        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label04:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label05:
        $r10 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r11 = virtualinvoke $r10.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, $r11);

     label06:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label07:
        i3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label08:
        if i3 == 2 goto label11;

        if i3 == 1 goto label11;

        r28 = r1;

        r26 = r1;

        r27 = r1;

     label09:
        i3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

     label10:
        goto label08;

     label11:
        if i3 != 1 goto label16;

        if r1 == null goto label15;

     label12:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r16 := @caughtexception;

     label15:
        return;

     label16:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label17:
        $r12 = "compat-packages";

        $r13 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label39;

     label18:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label19:
        i4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

     label20:
        if i4 != 2 goto label36;

        r28 = r1;

        r26 = r1;

        r27 = r1;

     label21:
        r30 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label22:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label23:
        $i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i0 != 2 goto label36;

     label24:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label25:
        $r14 = "pkg";

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r30);

        if $z1 == 0 goto label36;

     label26:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label27:
        r31 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label28:
        if r31 == null goto label36;

        r28 = r1;

        r26 = r1;

        r27 = r1;

     label29:
        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mode");

     label30:
        i6 = 0;

        if r3 == null goto label34;

        r28 = r1;

        r26 = r1;

        r27 = r1;

     label31:
        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

     label32:
        goto label34;

     label33:
        $r21 := @caughtexception;

        i6 = 0;

     label34:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label35:
        $r33 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r33.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r31, $r34);

     label36:
        r28 = r1;

        r26 = r1;

        r27 = r1;

     label37:
        i7 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

     label38:
        i4 = i7;

        if i7 != 1 goto label20;

     label39:
        if r1 == null goto label54;

     label40:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label41:
        goto label54;

     label42:
        $r22 := @caughtexception;

        goto label41;

     label43:
        $r19 := @caughtexception;

        goto label55;

     label44:
        $r20 := @caughtexception;

        if r26 == null goto label46;

        r28 = r26;

     label45:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Error reading compat-packages", $r20);

     label46:
        if r26 == null goto label54;

     label47:
        virtualinvoke r26.<java.io.FileInputStream: void close()>();

     label48:
        goto label41;

     label49:
        $r17 := @caughtexception;

        r28 = r27;

     label50:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Error reading compat-packages", $r17);

     label51:
        if r27 == null goto label54;

     label52:
        virtualinvoke r27.<java.io.FileInputStream: void close()>();

     label53:
        goto label41;

     label54:
        return;

     label55:
        if r28 == null goto label59;

     label56:
        virtualinvoke r28.<java.io.FileInputStream: void close()>();

     label57:
        goto label59;

     label58:
        $r18 := @caughtexception;

     label59:
        throw $r19;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label49;
        catch java.io.IOException from label01 to label02 with label44;
        catch java.lang.Throwable from label01 to label02 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label49;
        catch java.io.IOException from label03 to label04 with label44;
        catch java.lang.Throwable from label03 to label04 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label49;
        catch java.io.IOException from label05 to label06 with label44;
        catch java.lang.Throwable from label05 to label06 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label49;
        catch java.io.IOException from label07 to label08 with label44;
        catch java.lang.Throwable from label07 to label08 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label49;
        catch java.io.IOException from label09 to label10 with label44;
        catch java.lang.Throwable from label09 to label10 with label43;
        catch java.io.IOException from label12 to label13 with label14;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label49;
        catch java.io.IOException from label17 to label18 with label44;
        catch java.lang.Throwable from label17 to label18 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label49;
        catch java.io.IOException from label19 to label20 with label44;
        catch java.lang.Throwable from label19 to label20 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label49;
        catch java.io.IOException from label21 to label22 with label44;
        catch java.lang.Throwable from label21 to label22 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label49;
        catch java.io.IOException from label23 to label24 with label44;
        catch java.lang.Throwable from label23 to label24 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label49;
        catch java.io.IOException from label25 to label26 with label44;
        catch java.lang.Throwable from label25 to label26 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label27 to label28 with label49;
        catch java.io.IOException from label27 to label28 with label44;
        catch java.lang.Throwable from label27 to label28 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label49;
        catch java.io.IOException from label29 to label30 with label44;
        catch java.lang.Throwable from label29 to label30 with label43;
        catch java.lang.NumberFormatException from label31 to label32 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label49;
        catch java.io.IOException from label31 to label32 with label44;
        catch java.lang.Throwable from label31 to label32 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label35 to label36 with label49;
        catch java.io.IOException from label35 to label36 with label44;
        catch java.lang.Throwable from label35 to label36 with label43;
        catch org.xmlpull.v1.XmlPullParserException from label37 to label38 with label49;
        catch java.io.IOException from label37 to label38 with label44;
        catch java.lang.Throwable from label37 to label38 with label43;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.lang.Throwable from label45 to label46 with label43;
        catch java.io.IOException from label47 to label48 with label42;
        catch java.lang.Throwable from label50 to label51 with label43;
        catch java.io.IOException from label52 to label53 with label42;
        catch java.io.IOException from label56 to label57 with label58;
    }

    static void access$000(com.android.server.wm.CompatModePackages)
    {
        com.android.server.wm.CompatModePackages r0;

        r0 := @parameter0: com.android.server.wm.CompatModePackages;

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void saveCompatModes()>();

        return;
    }

    private int getPackageFlags(java.lang.String)
    {
        com.android.server.wm.CompatModePackages r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.String r3;
        java.lang.Integer r4;
        int i0;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (java.lang.Integer) $r2;

        if r4 == null goto label1;

        i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    private void removePackage(java.lang.String)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;
        java.util.HashMap $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void scheduleWrite()>();

     label1:
        return;
    }

    private void saveCompatModes()
    {
        com.android.server.wm.CompatModePackages r0;
        java.io.FileOutputStream r1, r34;
        com.android.internal.util.FastXmlSerializer r2;
        android.content.pm.IPackageManager r3;
        int i0, i1, i2;
        java.util.Iterator r4;
        java.lang.String r5, $r11, r64;
        android.content.res.CompatibilityInfo r6;
        com.android.server.wm.ActivityTaskManagerService $r7, $r14;
        java.util.HashMap $r8, r33;
        android.util.AtomicFile $r9, $r17, $r29;
        java.nio.charset.Charset $r10;
        java.lang.Boolean $r12;
        java.util.Set $r15;
        java.lang.Object $r18, $r19, $r20;
        java.lang.Integer $r21;
        boolean $z0, $z1, $z2;
        android.os.RemoteException $r26;
        java.lang.Throwable $r27, $r28, $r30, $r31, r55;
        com.android.server.wm.WindowManagerGlobalLock r32;
        android.content.res.Configuration r44;
        java.util.Map$Entry r50;
        android.content.pm.ApplicationInfo r53, r54;

        r0 := @this: com.android.server.wm.CompatModePackages;

        $r7 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService>;

        r32 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r32;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r33 = new java.util.HashMap;

        $r8 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        specialinvoke r33.<java.util.HashMap: void <init>(java.util.Map)>($r8);

     label02:
        exitmonitor r32;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        r34 = null;

     label04:
        $r9 = r0.<com.android.server.wm.CompatModePackages: android.util.AtomicFile mFile>;

        r1 = virtualinvoke $r9.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label05:
        r34 = r1;

     label06:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label07:
        r34 = r1;

     label08:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label09:
        r34 = r1;

     label10:
        $r10 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r11 = virtualinvoke $r10.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, $r11);

     label11:
        r34 = r1;

     label12:
        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r12);

     label13:
        r34 = r1;

     label14:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

     label15:
        r34 = r1;

     label16:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "compat-packages");

     label17:
        r34 = r1;

     label18:
        r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

     label19:
        r34 = r1;

     label20:
        $r14 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService>;

        r44 = virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

     label21:
        r34 = r1;

     label22:
        i0 = r44.<android.content.res.Configuration: int screenLayout>;

     label23:
        r34 = r1;

     label24:
        i1 = r44.<android.content.res.Configuration: int smallestScreenWidthDp>;

     label25:
        r34 = r1;

     label26:
        $r15 = virtualinvoke r33.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label27:
        r34 = r1;

     label28:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label60;

     label29:
        r34 = r1;

     label30:
        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.util.Map$Entry) $r18;

     label31:
        r34 = r1;

     label32:
        $r19 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r19;

     label33:
        r34 = r1;

     label34:
        $r20 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.lang.Integer) $r20;

        i2 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

     label35:
        if i2 != 0 goto label36;

        goto label27;

     label36:
        r53 = null;

     label37:
        r54 = interfaceinvoke r3.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r5, 0, 0);

     label38:
        r53 = r54;

        goto label41;

     label39:
        $r31 := @caughtexception;

        r55 = $r31;

        r34 = r1;

        goto label64;

     label40:
        $r26 := @caughtexception;

     label41:
        if r53 != null goto label42;

        goto label27;

     label42:
        r34 = r1;

     label43:
        r6 = new android.content.res.CompatibilityInfo;

     label44:
        r34 = r1;

     label45:
        specialinvoke r6.<android.content.res.CompatibilityInfo: void <init>(android.content.pm.ApplicationInfo,int,int,boolean)>(r53, i0, i1, 0);

     label46:
        r34 = r1;

     label47:
        $z0 = virtualinvoke r6.<android.content.res.CompatibilityInfo: boolean alwaysSupportsScreen()>();

        if $z0 == 0 goto label49;

     label48:
        goto label27;

     label49:
        r34 = r1;

     label50:
        $z1 = virtualinvoke r6.<android.content.res.CompatibilityInfo: boolean neverSupportsScreen()>();

        if $z1 == 0 goto label52;

     label51:
        goto label27;

     label52:
        r34 = r1;

     label53:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "pkg");

     label54:
        r34 = r1;

     label55:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", r5);

     label56:
        r34 = r1;

     label57:
        r64 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2);

     label58:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "mode", r64);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "pkg");

     label59:
        goto label27;

     label60:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "compat-packages");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r17 = r0.<com.android.server.wm.CompatModePackages: android.util.AtomicFile mFile>;

        virtualinvoke $r17.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label61:
        goto label65;

     label62:
        $r28 := @caughtexception;

        r55 = $r28;

        r34 = r1;

        goto label64;

     label63:
        $r30 := @caughtexception;

        r55 = $r30;

     label64:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTaskManager", "Error writing compat packages", r55);

        if r34 == null goto label65;

        $r29 = r0.<com.android.server.wm.CompatModePackages: android.util.AtomicFile mFile>;

        virtualinvoke $r29.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r34);

     label65:
        return;

     label66:
        $r27 := @caughtexception;

     label67:
        exitmonitor r32;

     label68:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label66;
        catch java.lang.Throwable from label02 to label03 with label66;
        catch java.io.IOException from label04 to label05 with label63;
        catch java.io.IOException from label06 to label07 with label63;
        catch java.io.IOException from label08 to label09 with label63;
        catch java.io.IOException from label10 to label11 with label63;
        catch java.io.IOException from label12 to label13 with label63;
        catch java.io.IOException from label14 to label15 with label63;
        catch java.io.IOException from label16 to label17 with label63;
        catch java.io.IOException from label18 to label19 with label63;
        catch java.io.IOException from label20 to label21 with label63;
        catch java.io.IOException from label22 to label23 with label63;
        catch java.io.IOException from label24 to label25 with label63;
        catch java.io.IOException from label26 to label27 with label63;
        catch java.io.IOException from label28 to label29 with label63;
        catch java.io.IOException from label30 to label31 with label63;
        catch java.io.IOException from label32 to label33 with label63;
        catch java.io.IOException from label34 to label35 with label63;
        catch android.os.RemoteException from label37 to label38 with label40;
        catch java.io.IOException from label37 to label38 with label39;
        catch java.io.IOException from label43 to label44 with label63;
        catch java.io.IOException from label45 to label46 with label63;
        catch java.io.IOException from label47 to label48 with label63;
        catch java.io.IOException from label50 to label51 with label63;
        catch java.io.IOException from label53 to label54 with label63;
        catch java.io.IOException from label55 to label56 with label63;
        catch java.io.IOException from label57 to label58 with label63;
        catch java.io.IOException from label58 to label59 with label62;
        catch java.io.IOException from label60 to label61 with label62;
        catch java.lang.Throwable from label67 to label68 with label66;
    }

    private void scheduleWrite()
    {
        com.android.server.wm.CompatModePackages r0;
        android.os.Message r1;
        com.android.server.wm.CompatModePackages$CompatHandler $r2, $r3, $r4;

        r0 := @this: com.android.server.wm.CompatModePackages;

        $r2 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.CompatModePackages$CompatHandler mHandler>;

        virtualinvoke $r2.<com.android.server.wm.CompatModePackages$CompatHandler: void removeMessages(int)>(300);

        $r3 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.CompatModePackages$CompatHandler mHandler>;

        r1 = virtualinvoke $r3.<com.android.server.wm.CompatModePackages$CompatHandler: android.os.Message obtainMessage(int)>(300);

        $r4 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.CompatModePackages$CompatHandler mHandler>;

        virtualinvoke $r4.<com.android.server.wm.CompatModePackages$CompatHandler: boolean sendMessageDelayed(android.os.Message,long)>(r1, 10000L);

        return;
    }

    private void setPackageFlagLocked(java.lang.String, int, boolean)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;
        boolean z0;
        int i0, i1, i2;
        java.util.HashMap $r2, $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i0 = specialinvoke r0.<com.android.server.wm.CompatModePackages: int getPackageFlags(java.lang.String)>(r1);

        if z0 == 0 goto label1;

        i2 = i1 & i0;

        goto label2;

     label1:
        i2 = i0 | i1;

     label2:
        if i0 == i2 goto label5;

        if i2 == 0 goto label3;

        $r4 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        goto label4;

     label3:
        $r2 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label4:
        specialinvoke r0.<com.android.server.wm.CompatModePackages: void scheduleWrite()>();

     label5:
        return;
    }

    public android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)
    {
        com.android.server.wm.CompatModePackages r0;
        android.content.pm.ApplicationInfo r1;
        android.content.res.Configuration r2;
        int i0, i1, $i2, $i3;
        com.android.server.wm.ActivityTaskManagerService $r3;
        java.lang.String $r4;
        android.content.res.CompatibilityInfo $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r3 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService>;

        r2 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

        i0 = r2.<android.content.res.Configuration: int screenLayout>;

        i1 = r2.<android.content.res.Configuration: int smallestScreenWidthDp>;

        $r4 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i2 = specialinvoke r0.<com.android.server.wm.CompatModePackages: int getPackageFlags(java.lang.String)>($r4);

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r5 = new android.content.res.CompatibilityInfo;

        specialinvoke $r5.<android.content.res.CompatibilityInfo: void <init>(android.content.pm.ApplicationInfo,int,int,boolean)>(r1, i0, i1, z0);

        return $r5;
    }

    public int computeCompatModeLocked(android.content.pm.ApplicationInfo)
    {
        com.android.server.wm.CompatModePackages r0;
        int i0, $i1, $i2, $i3;
        android.content.res.Configuration r1;
        java.lang.String $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        android.content.res.CompatibilityInfo $r4;
        boolean $z0, $z1, z2;
        android.content.pm.ApplicationInfo r5;
        byte b4;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r5 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = r5.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        i0 = specialinvoke r0.<com.android.server.wm.CompatModePackages: int getPackageFlags(java.lang.String)>($r2);

        b4 = 1;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r3 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfiguration()>();

        $r4 = new android.content.res.CompatibilityInfo;

        $i3 = r1.<android.content.res.Configuration: int screenLayout>;

        $i2 = r1.<android.content.res.Configuration: int smallestScreenWidthDp>;

        specialinvoke $r4.<android.content.res.CompatibilityInfo: void <init>(android.content.pm.ApplicationInfo,int,int,boolean)>(r5, $i3, $i2, z2);

        $z0 = virtualinvoke $r4.<android.content.res.CompatibilityInfo: boolean alwaysSupportsScreen()>();

        if $z0 == 0 goto label3;

        return -2;

     label3:
        $z1 = virtualinvoke $r4.<android.content.res.CompatibilityInfo: boolean neverSupportsScreen()>();

        if $z1 == 0 goto label4;

        return -1;

     label4:
        if z2 == 0 goto label5;

        goto label6;

     label5:
        b4 = 0;

     label6:
        return b4;
    }

    public boolean getPackageAskCompatModeLocked(java.lang.String)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<com.android.server.wm.CompatModePackages: int getPackageFlags(java.lang.String)>(r1);

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int getPackageScreenCompatModeLocked(java.lang.String)
    {
        com.android.server.wm.CompatModePackages r0;
        android.content.pm.IPackageManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.String r3;
        android.content.pm.ApplicationInfo r4;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r4 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r3, 0, 0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r4 = null;

     label4:
        if r4 != null goto label5;

        return -3;

     label5:
        $i0 = virtualinvoke r0.<com.android.server.wm.CompatModePackages: int computeCompatModeLocked(android.content.pm.ApplicationInfo)>(r4);

        return $i0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.HashMap getPackages()
    {
        com.android.server.wm.CompatModePackages r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.wm.CompatModePackages;

        $r1 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        return $r1;
    }

    public void handlePackageAddedLocked(java.lang.String, boolean)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;
        boolean z0, $z1, $z2, $z3, z4;
        android.content.pm.IPackageManager $r2;
        java.util.HashMap $r3, $r4;
        android.os.RemoteException $r6;
        android.content.pm.ApplicationInfo r7, r8;
        android.content.res.CompatibilityInfo r10;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r7 = null;

        z4 = 0;

     label1:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r8 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 0, 0);

     label2:
        r7 = r8;

        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        if r7 != null goto label5;

        return;

     label5:
        r10 = virtualinvoke r0.<com.android.server.wm.CompatModePackages: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>(r7);

        $z1 = virtualinvoke r10.<android.content.res.CompatibilityInfo: boolean alwaysSupportsScreen()>();

        if $z1 != 0 goto label6;

        $z3 = virtualinvoke r10.<android.content.res.CompatibilityInfo: boolean neverSupportsScreen()>();

        if $z3 != 0 goto label6;

        z4 = 1;

        goto label6;

     label6:
        if z0 == 0 goto label7;

        if z4 != 0 goto label7;

        $r3 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        $z2 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label7;

        $r4 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void scheduleWrite()>();

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void handlePackageDataClearedLocked(java.lang.String)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void removePackage(java.lang.String)>(r1);

        return;
    }

    public void handlePackageUninstalledLocked(java.lang.String)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void removePackage(java.lang.String)>(r1);

        return;
    }

    public void setPackageAskCompatModeLocked(java.lang.String, boolean)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void setPackageFlagLocked(java.lang.String,int,boolean)>(r1, 1, z0);

        return;
    }

    void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo, int)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1, $r18, $r23, $r28;
        int i0, $i1, $i4, i6, i7, i8;
        android.content.res.CompatibilityInfo r2, r32;
        boolean $z0, $z1, $z3, $z4, z5;
        java.util.HashMap $r3, $r11;
        com.android.server.wm.ActivityTaskManagerService $r5, $r6;
        com.android.server.wm.WindowProcessControllerMap $r7;
        java.lang.Object $r8;
        android.util.ArraySet $r9;
        android.app.IApplicationThread $r10;
        java.lang.Integer $r12;
        java.lang.StringBuilder $r14, $r19, $r24;
        java.lang.Exception $r29;
        android.content.pm.ApplicationInfo r30;
        com.android.server.wm.ActivityStack r35;
        com.android.server.wm.ActivityRecord r36;
        android.util.SparseArray r37;
        com.android.server.wm.WindowProcessController r38;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r30 := @parameter0: android.content.pm.ApplicationInfo;

        i6 := @parameter1: int;

        r1 = r30.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        i0 = specialinvoke r0.<com.android.server.wm.CompatModePackages: int getPackageFlags(java.lang.String)>(r1);

        if i6 == 0 goto label05;

        if i6 == 1 goto label04;

        if i6 == 2 goto label01;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown screen compat mode req #");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r28);

        return;

     label01:
        $i4 = i0 & 2;

        if $i4 != 0 goto label02;

        z5 = 1;

        goto label03;

     label02:
        z5 = 0;

     label03:
        goto label06;

     label04:
        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        if z5 == 0 goto label07;

        i7 = 2 | i0;

        goto label08;

     label07:
        i7 = i0 & -3;

     label08:
        r32 = virtualinvoke r0.<com.android.server.wm.CompatModePackages: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>(r30);

        $z0 = virtualinvoke r32.<android.content.res.CompatibilityInfo: boolean alwaysSupportsScreen()>();

        if $z0 == 0 goto label09;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring compat mode change of ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; compatibility never needed");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r23);

        i7 = 0;

     label09:
        $z1 = virtualinvoke r32.<android.content.res.CompatibilityInfo: boolean neverSupportsScreen()>();

        if $z1 == 0 goto label10;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring compat mode change of ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; compatibility always needed");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r18);

        i7 = 0;

     label10:
        if i7 == i0 goto label19;

        if i7 == 0 goto label11;

        $r11 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r12);

        goto label12;

     label11:
        $r3 = r0.<com.android.server.wm.CompatModePackages: java.util.HashMap mPackages>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label12:
        r2 = virtualinvoke r0.<com.android.server.wm.CompatModePackages: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>(r30);

        specialinvoke r0.<com.android.server.wm.CompatModePackages: void scheduleWrite()>();

        $r5 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService>;

        r35 = virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        r36 = virtualinvoke r35.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord restartPackage(java.lang.String)>(r1);

        $r6 = r0.<com.android.server.wm.CompatModePackages: com.android.server.wm.ActivityTaskManagerService mService>;

        $r7 = $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessControllerMap mProcessMap>;

        r37 = virtualinvoke $r7.<com.android.server.wm.WindowProcessControllerMap: android.util.SparseArray getPidMap()>();

        $i1 = virtualinvoke r37.<android.util.SparseArray: int size()>();

        i8 = $i1 - 1;

     label13:
        if i8 < 0 goto label18;

        $r8 = virtualinvoke r37.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        r38 = (com.android.server.wm.WindowProcessController) $r8;

        $r9 = r38.<com.android.server.wm.WindowProcessController: android.util.ArraySet mPkgList>;

        $z3 = virtualinvoke $r9.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z3 != 0 goto label14;

        goto label17;

     label14:
        $z4 = virtualinvoke r38.<com.android.server.wm.WindowProcessController: boolean hasThread()>();

        if $z4 == 0 goto label15;

        $r10 = virtualinvoke r38.<com.android.server.wm.WindowProcessController: android.app.IApplicationThread getThread()>();

        interfaceinvoke $r10.<android.app.IApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>(r1, r2);

     label15:
        goto label17;

     label16:
        $r29 := @caughtexception;

     label17:
        i8 = i8 + -1;

        goto label13;

     label18:
        if r36 == null goto label19;

        virtualinvoke r36.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean)>(0, 0);

        virtualinvoke r35.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(r36, 0, 0);

     label19:
        return;

        catch java.lang.Exception from label14 to label15 with label16;
    }

    public void setPackageScreenCompatModeLocked(java.lang.String, int)
    {
        com.android.server.wm.CompatModePackages r0;
        java.lang.String r1, $r6;
        int i0;
        android.content.pm.IPackageManager $r2;
        java.lang.StringBuilder $r3;
        android.os.RemoteException $r7;
        android.content.pm.ApplicationInfo r8, r9;

        r0 := @this: com.android.server.wm.CompatModePackages;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r8 = null;

     label1:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r9 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 0, 0);

     label2:
        r8 = r9;

        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        if r8 != null goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPackageScreenCompatMode failed: unknown package ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r6);

        return;

     label5:
        virtualinvoke r0.<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>(r8, i0);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.CompatModePackages: java.lang.String TAG_CONFIGURATION> = "ActivityTaskManager";

        <com.android.server.wm.CompatModePackages: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.CompatModePackages: int MSG_WRITE> = 300;

        <com.android.server.wm.CompatModePackages: int COMPAT_FLAG_ENABLED> = 2;

        <com.android.server.wm.CompatModePackages: int COMPAT_FLAG_DONT_ASK> = 1;

        return;
    }
}
