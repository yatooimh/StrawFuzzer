public class com.android.server.wm.DisplayArea$Tokens extends com.android.server.wm.DisplayArea
{
    private final java.util.function.Predicate mGetOrientingWindow;
    int mLastKeyguardForcedOrientation;
    private final java.util.Comparator mWindowComparator;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DisplayArea$Type, java.lang.String)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.DisplayArea$Type r2;
        java.lang.String r3;
        com.android.server.wm.'-$$Lambda$CD-g9zNm970tG9hCSQ-1BiBOrwY' $r4;
        java.util.Comparator $r5;
        com.android.server.wm._$$Lambda$DisplayArea$Tokens$m3rhEbIWQl888W_2uGBIkkXLdlA r7;
        java.util.function.ToIntFunction r8;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.DisplayArea$Type;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.wm.DisplayArea: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayArea$Type,java.lang.String,int)>(r1, r2, r3, 2);

        r0.<com.android.server.wm.DisplayArea$Tokens: int mLastKeyguardForcedOrientation> = -1;

        $r4 = <com.android.server.wm._$$Lambda$CD_g9zNm970tG9hCSQ_1BiBOrwY: com.android.server.wm.'-$$Lambda$CD-g9zNm970tG9hCSQ-1BiBOrwY' INSTANCE>;

        r8 = (java.util.function.ToIntFunction) $r4;

        $r5 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(r8);

        r0.<com.android.server.wm.DisplayArea$Tokens: java.util.Comparator mWindowComparator> = $r5;

        r7 = new com.android.server.wm._$$Lambda$DisplayArea$Tokens$m3rhEbIWQl888W_2uGBIkkXLdlA;

        specialinvoke r7.<com.android.server.wm._$$Lambda$DisplayArea$Tokens$m3rhEbIWQl888W_2uGBIkkXLdlA: void <init>(com.android.server.wm.DisplayArea$Tokens)>(r0);

        r0.<com.android.server.wm.DisplayArea$Tokens: java.util.function.Predicate mGetOrientingWindow> = r7;

        return;
    }

    void addChild(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        com.android.server.wm.WindowToken r1;
        java.util.Comparator $r2;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        $r2 = r0.<com.android.server.wm.DisplayArea$Tokens: java.util.Comparator mWindowComparator>;

        virtualinvoke r0.<com.android.server.wm.DisplayArea$Tokens: void addChild(com.android.server.wm.WindowContainer,java.util.Comparator)>(r1, $r2);

        return;
    }

    public volatile void commitPendingTransaction()
    {
        com.android.server.wm.DisplayArea$Tokens r0;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        specialinvoke r0.<com.android.server.wm.DisplayArea: void commitPendingTransaction()>();

        return;
    }

    public volatile int compareTo(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        com.android.server.wm.WindowContainer r1;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayArea: int compareTo(com.android.server.wm.WindowContainer)>(r1);

        return $i0;
    }

    public volatile android.view.SurfaceControl getAnimationLeashParent()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl getAnimationLeashParent()>();

        return $r1;
    }

    public volatile android.view.SurfaceControl getFreezeSnapshotTarget()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl getFreezeSnapshotTarget()>();

        return $r1;
    }

    int getOrientation(int)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        com.android.server.wm.WindowState r1;
        int i0, $i3, i4, i5;
        java.lang.String r2;
        long l1, l2;
        java.util.function.Predicate $r3;
        android.view.WindowManager$LayoutParams $r4, $r6;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.policy.WindowManagerPolicy $r7;
        com.android.server.wm.DisplayContent $r8;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        java.lang.Long $r11, $r12;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        i4 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.DisplayArea$Tokens: java.util.function.Predicate mGetOrientingWindow>;

        r1 = virtualinvoke r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r3);

        if r1 != null goto label1;

        return i4;

     label1:
        $r4 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r4.<android.view.WindowManager$LayoutParams: int screenOrientation>;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z0 == 0 goto label2;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        l1 = (long) i0;

        $r8 = r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.DisplayContent mDisplayContent>;

        $i3 = virtualinvoke $r8.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        l2 = (long) $i3;

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r2;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r9[1] = $r11;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r9[2] = $r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 1674747211, 20, null, $r9);

     label2:
        i5 = i0;

        $r5 = r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r6 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z1 = interfaceinvoke $r7.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams)>($r6);

        if $z1 == 0 goto label4;

        if i0 == -2 goto label3;

        if i0 == -1 goto label3;

        r0.<com.android.server.wm.DisplayArea$Tokens: int mLastKeyguardForcedOrientation> = i0;

        i5 = i0;

        goto label4;

     label3:
        i5 = r0.<com.android.server.wm.DisplayArea$Tokens: int mLastKeyguardForcedOrientation>;

     label4:
        r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.WindowContainer mLastOrientationSource> = r1;

        return i5;
    }

    public volatile android.view.SurfaceControl getParentSurfaceControl()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl getParentSurfaceControl()>();

        return $r1;
    }

    public volatile android.view.SurfaceControl$Transaction getPendingTransaction()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        return $r1;
    }

    public volatile android.view.SurfaceControl getSurfaceControl()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl getSurfaceControl()>();

        return $r1;
    }

    public volatile int getSurfaceHeight()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayArea: int getSurfaceHeight()>();

        return $i0;
    }

    public volatile int getSurfaceWidth()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayArea: int getSurfaceWidth()>();

        return $i0;
    }

    public volatile android.view.SurfaceControl$Transaction getSyncTransaction()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        return $r1;
    }

    public boolean lambda$new$0$DisplayArea$Tokens(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        com.android.server.wm.WindowState r1;
        com.android.server.policy.WindowManagerPolicy r2;
        com.android.server.wm.WindowManagerService $r3, $r6;
        android.view.WindowManager$LayoutParams $r4, $r5;
        boolean $z0, $z1, $z2, z3, $z4;
        com.android.server.wm.DisplayContent $r7, $r9;
        com.android.server.wm.AppTransition $r8;
        int $i0, i1;
        com.android.server.wm.UnknownAppVisibilityController $r10;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.WindowManagerService mWmService>;

        r2 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r4 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z0 = interfaceinvoke r2.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams)>($r4);

        if $z0 == 0 goto label5;

        $r6 = r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.WindowManagerService mWmService>;

        $z1 = $r6.<com.android.server.wm.WindowManagerService: boolean mKeyguardGoingAway>;

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r7 = r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.DisplayContent mDisplayContent>;

        $r8 = $r7.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i0 = virtualinvoke $r8.<com.android.server.wm.AppTransition: int getAppTransition()>();

        if $i0 != 23 goto label2;

        $r9 = r0.<com.android.server.wm.DisplayArea$Tokens: com.android.server.wm.DisplayContent mDisplayContent>;

        $r10 = $r9.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        $z2 = virtualinvoke $r10.<com.android.server.wm.UnknownAppVisibilityController: boolean allResolved()>();

        if $z2 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        $z4 = interfaceinvoke r2.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardShowingAndNotOccluded()>();

        if $z4 != 0 goto label4;

        if z3 == 0 goto label5;

     label4:
        return 1;

     label5:
        $r5 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i1 = $r5.<android.view.WindowManager$LayoutParams: int screenOrientation>;

        if i1 == -1 goto label7;

        if i1 == 3 goto label7;

        if i1 != -2 goto label6;

        goto label7;

     label6:
        return 1;

     label7:
        return 0;
    }

    public volatile android.view.SurfaceControl$Builder makeAnimationLeash()
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl$Builder $r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        $r1 = specialinvoke r0.<com.android.server.wm.DisplayArea: android.view.SurfaceControl$Builder makeAnimationLeash()>();

        return $r1;
    }

    public volatile void onAnimationLeashCreated(android.view.SurfaceControl$Transaction, android.view.SurfaceControl)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        specialinvoke r0.<com.android.server.wm.DisplayArea: void onAnimationLeashCreated(android.view.SurfaceControl$Transaction,android.view.SurfaceControl)>(r1, r2);

        return;
    }

    public volatile void onAnimationLeashLost(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.view.SurfaceControl$Transaction r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        specialinvoke r0.<com.android.server.wm.DisplayArea: void onAnimationLeashLost(android.view.SurfaceControl$Transaction)>(r1);

        return;
    }

    public volatile void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        android.content.res.Configuration r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<com.android.server.wm.DisplayArea: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    public volatile void onTransactionReady(int, java.util.Set)
    {
        com.android.server.wm.DisplayArea$Tokens r0;
        int i0;
        java.util.Set r1;

        r0 := @this: com.android.server.wm.DisplayArea$Tokens;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        specialinvoke r0.<com.android.server.wm.DisplayArea: void onTransactionReady(int,java.util.Set)>(i0, r1);

        return;
    }
}
