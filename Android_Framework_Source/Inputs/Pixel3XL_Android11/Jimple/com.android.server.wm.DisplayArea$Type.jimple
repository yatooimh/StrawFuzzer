final enum class com.android.server.wm.DisplayArea$Type extends java.lang.Enum
{
    private static final com.android.server.wm.DisplayArea$Type[] $VALUES;
    public static final enum com.android.server.wm.DisplayArea$Type ABOVE_TASKS;
    public static final enum com.android.server.wm.DisplayArea$Type ANY;
    public static final enum com.android.server.wm.DisplayArea$Type BELOW_TASKS;

    static void <clinit>()
    {
        com.android.server.wm.DisplayArea$Type $r1, $r2, $r3, $r5, $r6;
        com.android.server.wm.DisplayArea$Type[] $r4;

        $r1 = new com.android.server.wm.DisplayArea$Type;

        specialinvoke $r1.<com.android.server.wm.DisplayArea$Type: void <init>(java.lang.String,int)>("ABOVE_TASKS", 0);

        <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ABOVE_TASKS> = $r1;

        $r2 = new com.android.server.wm.DisplayArea$Type;

        specialinvoke $r2.<com.android.server.wm.DisplayArea$Type: void <init>(java.lang.String,int)>("BELOW_TASKS", 1);

        <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type BELOW_TASKS> = $r2;

        $r3 = new com.android.server.wm.DisplayArea$Type;

        specialinvoke $r3.<com.android.server.wm.DisplayArea$Type: void <init>(java.lang.String,int)>("ANY", 2);

        <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ANY> = $r3;

        $r4 = newarray (com.android.server.wm.DisplayArea$Type)[3];

        $r5 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ABOVE_TASKS>;

        $r4[0] = $r5;

        $r6 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type BELOW_TASKS>;

        $r4[1] = $r6;

        $r4[2] = $r3;

        <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type[] $VALUES> = $r4;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        com.android.server.wm.DisplayArea$Type r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.wm.DisplayArea$Type;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void checkChild(com.android.server.wm.DisplayArea$Type, com.android.server.wm.DisplayArea$Type)
    {
        com.android.server.wm.DisplayArea$Type r0, r1, $r3, $r4;
        int i0, $i1;
        int[] $r2;
        boolean z1, z2;

        r0 := @parameter0: com.android.server.wm.DisplayArea$Type;

        r1 := @parameter1: com.android.server.wm.DisplayArea$Type;

        $r2 = <com.android.server.wm.DisplayArea$1: int[] $SwitchMap$com$android$server$wm$DisplayArea$Type>;

        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayArea$Type: int ordinal()>();

        i0 = $r2[$i1];

        z1 = 0;

        if i0 == 1 goto label3;

        if i0 == 2 goto label1;

        goto label5;

     label1:
        $r4 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type BELOW_TASKS>;

        if r1 != $r4 goto label2;

        z1 = 1;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z1, "BELOW_TASKS can only contain BELOW_TASKS");

        goto label5;

     label3:
        z2 = 0;

        $r3 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ABOVE_TASKS>;

        if r1 != $r3 goto label4;

        z2 = 1;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "ABOVE_TASKS can only contain ABOVE_TASKS");

     label5:
        return;
    }

    static void checkSiblings(com.android.server.wm.DisplayArea$Type, com.android.server.wm.DisplayArea$Type)
    {
        com.android.server.wm.DisplayArea$Type r0, r5, r6, r10;
        boolean z1, z2;
        java.lang.StringBuilder $r7, $r11;
        java.lang.String $r9, $r13;

        r5 := @parameter0: com.android.server.wm.DisplayArea$Type;

        r0 := @parameter1: com.android.server.wm.DisplayArea$Type;

        r6 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type BELOW_TASKS>;

        if r5 == r6 goto label2;

        if r0 == r6 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be above BELOW_TASKS");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z1, $r9);

        r10 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ABOVE_TASKS>;

        if r5 != r10 goto label4;

        z2 = 0;

        if r0 != r10 goto label5;

     label4:
        z2 = 1;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be below ABOVE_TASKS");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, $r13);

        return;
    }

    static com.android.server.wm.DisplayArea$Type typeOf(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.WindowContainer r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        com.android.server.wm.DisplayArea$Type $r7, $r9, $r11;
        com.android.server.wm.WindowToken $r8;
        com.android.server.wm.DisplayArea $r10;

        r0 := @parameter0: com.android.server.wm.WindowContainer;

        $z0 = r0 instanceof com.android.server.wm.DisplayArea;

        if $z0 == 0 goto label1;

        $r10 = (com.android.server.wm.DisplayArea) r0;

        $r11 = $r10.<com.android.server.wm.DisplayArea: com.android.server.wm.DisplayArea$Type mType>;

        return $r11;

     label1:
        $z1 = r0 instanceof com.android.server.wm.WindowToken;

        if $z1 == 0 goto label2;

        $z3 = r0 instanceof com.android.server.wm.ActivityRecord;

        if $z3 != 0 goto label2;

        $r8 = (com.android.server.wm.WindowToken) r0;

        $r9 = staticinvoke <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type typeOf(com.android.server.wm.WindowToken)>($r8);

        return $r9;

     label2:
        $z2 = r0 instanceof com.android.server.wm.ActivityStack;

        if $z2 == 0 goto label3;

        $r7 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ANY>;

        return $r7;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown container: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private static com.android.server.wm.DisplayArea$Type typeOf(com.android.server.wm.WindowToken)
    {
        int $i0;
        com.android.server.wm.WindowToken r0;
        com.android.server.wm.DisplayArea$Type r1;

        r0 := @parameter0: com.android.server.wm.WindowToken;

        $i0 = virtualinvoke r0.<com.android.server.wm.WindowToken: int getWindowLayerFromType()>();

        if $i0 >= 2 goto label1;

        r1 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type BELOW_TASKS>;

        goto label2;

     label1:
        r1 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type ABOVE_TASKS>;

     label2:
        return r1;
    }

    public static com.android.server.wm.DisplayArea$Type valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.android.server.wm.DisplayArea$Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/android/server/wm/DisplayArea$Type;", r0);

        $r2 = (com.android.server.wm.DisplayArea$Type) $r1;

        return $r2;
    }

    public static com.android.server.wm.DisplayArea$Type[] values()
    {
        com.android.server.wm.DisplayArea$Type[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.android.server.wm.DisplayArea$Type: com.android.server.wm.DisplayArea$Type[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.android.server.wm.DisplayArea$Type[]) $r1;

        return $r2;
    }
}
