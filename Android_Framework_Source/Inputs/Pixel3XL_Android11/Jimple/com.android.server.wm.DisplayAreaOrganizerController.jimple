public class com.android.server.wm.DisplayAreaOrganizerController extends android.window.IDisplayAreaOrganizerController$Stub
{
    private static final java.lang.String TAG;
    private final com.android.server.wm.WindowManagerGlobalLock mGlobalLock;
    private final java.util.HashMap mOrganizersByFeatureIds;
    final com.android.server.wm.ActivityTaskManagerService mService;

    void <init>(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        com.android.server.wm.ActivityTaskManagerService r1;
        java.util.HashMap $r2;
        com.android.server.wm.WindowManagerGlobalLock $r3;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<android.window.IDisplayAreaOrganizerController$Stub: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.DisplayAreaOrganizerController: java.util.HashMap mOrganizersByFeatureIds> = $r2;

        r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.ActivityTaskManagerService mService> = r1;

        $r3 = r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock> = $r3;

        return;
    }

    static com.android.server.wm.WindowManagerGlobalLock access$000(com.android.server.wm.DisplayAreaOrganizerController)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        com.android.server.wm.WindowManagerGlobalLock $r1;

        r0 := @parameter0: com.android.server.wm.DisplayAreaOrganizerController;

        $r1 = r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        return $r1;
    }

    static java.util.HashMap access$100(com.android.server.wm.DisplayAreaOrganizerController)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.wm.DisplayAreaOrganizerController;

        $r1 = r0.<com.android.server.wm.DisplayAreaOrganizerController: java.util.HashMap mOrganizersByFeatureIds>;

        return $r1;
    }

    private void enforceStackPermission(java.lang.String)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        java.lang.String r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.app.ActivityManagerInternal $r3;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", r1);

        return;
    }

    static void lambda$registerOrganizer$0(int, android.window.IDisplayAreaOrganizer, com.android.server.wm.DisplayArea)
    {
        int i0, $i1;
        android.window.IDisplayAreaOrganizer r0;
        com.android.server.wm.DisplayArea r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.window.IDisplayAreaOrganizer;

        r1 := @parameter2: com.android.server.wm.DisplayArea;

        $i1 = r1.<com.android.server.wm.DisplayArea: int mFeatureId>;

        if $i1 == i0 goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.DisplayArea: void setOrganizer(android.window.IDisplayAreaOrganizer)>(r0);

        return;
    }

    static boolean lambda$unregisterOrganizer$1(android.window.IDisplayAreaOrganizer, java.util.Map$Entry)
    {
        android.window.IDisplayAreaOrganizer r0, $r3;
        java.util.Map$Entry r1;
        java.lang.Object $r2;
        android.os.IBinder $r4, $r5;
        boolean z0;

        r0 := @parameter0: android.window.IDisplayAreaOrganizer;

        r1 := @parameter1: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (android.window.IDisplayAreaOrganizer) $r2;

        $r4 = interfaceinvoke $r3.<android.window.IDisplayAreaOrganizer: android.os.IBinder asBinder()>();

        $r5 = interfaceinvoke r0.<android.window.IDisplayAreaOrganizer: android.os.IBinder asBinder()>();

        if $r4 != $r5 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$unregisterOrganizer$2(android.window.IDisplayAreaOrganizer, com.android.server.wm.DisplayArea)
    {
        android.window.IDisplayAreaOrganizer r0, $r2;
        com.android.server.wm.DisplayArea r1;

        r0 := @parameter0: android.window.IDisplayAreaOrganizer;

        r1 := @parameter1: com.android.server.wm.DisplayArea;

        $r2 = r1.<com.android.server.wm.DisplayArea: android.window.IDisplayAreaOrganizer mOrganizer>;

        if $r2 == r0 goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.DisplayArea: void setOrganizer(android.window.IDisplayAreaOrganizer)>(null);

        return;
    }

    void onDisplayAreaAppeared(android.window.IDisplayAreaOrganizer, com.android.server.wm.DisplayArea)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        com.android.server.wm.DisplayArea r1;
        android.view.SurfaceControl r2, $r3;
        android.window.DisplayAreaInfo $r4;
        android.os.RemoteException $r5;
        android.window.IDisplayAreaOrganizer r6;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r6 := @parameter0: android.window.IDisplayAreaOrganizer;

        r1 := @parameter1: com.android.server.wm.DisplayArea;

     label1:
        r2 = new android.view.SurfaceControl;

        $r3 = virtualinvoke r1.<com.android.server.wm.DisplayArea: android.view.SurfaceControl getSurfaceControl()>();

        specialinvoke r2.<android.view.SurfaceControl: void <init>(android.view.SurfaceControl,java.lang.String)>($r3, "DisplayAreaOrganizerController.onDisplayAreaAppeared");

        $r4 = virtualinvoke r1.<com.android.server.wm.DisplayArea: android.window.DisplayAreaInfo getDisplayAreaInfo()>();

        interfaceinvoke r6.<android.window.IDisplayAreaOrganizer: void onDisplayAreaAppeared(android.window.DisplayAreaInfo,android.view.SurfaceControl)>($r4, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void onDisplayAreaInfoChanged(android.window.IDisplayAreaOrganizer, com.android.server.wm.DisplayArea)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        com.android.server.wm.DisplayArea r1;
        android.window.DisplayAreaInfo $r2;
        android.os.RemoteException $r3;
        android.window.IDisplayAreaOrganizer r4;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r4 := @parameter0: android.window.IDisplayAreaOrganizer;

        r1 := @parameter1: com.android.server.wm.DisplayArea;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayArea: android.window.DisplayAreaInfo getDisplayAreaInfo()>();

        interfaceinvoke r4.<android.window.IDisplayAreaOrganizer: void onDisplayAreaInfoChanged(android.window.DisplayAreaInfo)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void onDisplayAreaVanished(android.window.IDisplayAreaOrganizer, com.android.server.wm.DisplayArea)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        com.android.server.wm.DisplayArea r1;
        android.window.DisplayAreaInfo $r2;
        android.os.RemoteException $r3;
        android.window.IDisplayAreaOrganizer r4;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r4 := @parameter0: android.window.IDisplayAreaOrganizer;

        r1 := @parameter1: com.android.server.wm.DisplayArea;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayArea: android.window.DisplayAreaInfo getDisplayAreaInfo()>();

        interfaceinvoke r4.<android.window.IDisplayAreaOrganizer: void onDisplayAreaVanished(android.window.DisplayAreaInfo)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerOrganizer(android.window.IDisplayAreaOrganizer, int)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer r2;
        java.util.HashMap $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        android.os.IBinder $r6;
        com.android.server.wm.ActivityTaskManagerService $r7;
        java.lang.Throwable $r11, $r12;
        android.os.RemoteException $r13;
        android.window.IDisplayAreaOrganizer r14;
        com.android.server.wm.DisplayAreaOrganizerController$DeathRecipient r15;
        com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$mx6kBh7YI0Ihvd4RL7NvMLiVdwc r17;
        java.lang.IllegalStateException r18;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r14 := @parameter0: android.window.IDisplayAreaOrganizer;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.DisplayAreaOrganizerController: void enforceStackPermission(java.lang.String)>("registerOrganizer()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.DisplayAreaOrganizerController: java.util.HashMap mOrganizersByFeatureIds>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 != null goto label10;

        r15 = new com.android.server.wm.DisplayAreaOrganizerController$DeathRecipient;

        specialinvoke r15.<com.android.server.wm.DisplayAreaOrganizerController$DeathRecipient: void <init>(com.android.server.wm.DisplayAreaOrganizerController,android.window.IDisplayAreaOrganizer,int)>(r0, r14, i0);

     label03:
        $r6 = interfaceinvoke r14.<android.window.IDisplayAreaOrganizer: android.os.IBinder asBinder()>();

        interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r15, 0);

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

     label06:
        $r7 = r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        r2 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r17 = new com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$mx6kBh7YI0Ihvd4RL7NvMLiVdwc;

        specialinvoke r17.<com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$mx6kBh7YI0Ihvd4RL7NvMLiVdwc: void <init>(int,android.window.IDisplayAreaOrganizer)>(i0, r14);

        virtualinvoke r2.<com.android.server.wm.RootWindowContainer: void forAllDisplayAreas(java.util.function.Consumer)>(r17);

        $r8 = r0.<com.android.server.wm.DisplayAreaOrganizerController: java.util.HashMap mOrganizersByFeatureIds>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r14);

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label10:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Replacing existing organizer currently unsupported");

        throw r18;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label14:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public void unregisterOrganizer(android.window.IDisplayAreaOrganizer)
    {
        com.android.server.wm.DisplayAreaOrganizerController r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.HashMap $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        java.lang.Throwable $r4, $r5;
        android.window.IDisplayAreaOrganizer r6;
        java.util.Set r7;
        com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$nRbzpv86yu_hPtn9WaGp64X2Pt0 r8;
        com.android.server.wm.RootWindowContainer r9;
        com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$PjbOQsmTo9SsqYA5W_I1Ng23PYc r10;

        r0 := @this: com.android.server.wm.DisplayAreaOrganizerController;

        r6 := @parameter0: android.window.IDisplayAreaOrganizer;

        specialinvoke r0.<com.android.server.wm.DisplayAreaOrganizerController: void enforceStackPermission(java.lang.String)>("unregisterTaskOrganizer()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.DisplayAreaOrganizerController: java.util.HashMap mOrganizersByFeatureIds>;

        r7 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        r8 = new com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$nRbzpv86yu_hPtn9WaGp64X2Pt0;

        specialinvoke r8.<com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$nRbzpv86yu_hPtn9WaGp64X2Pt0: void <init>(android.window.IDisplayAreaOrganizer)>(r6);

        interfaceinvoke r7.<java.util.Set: boolean removeIf(java.util.function.Predicate)>(r8);

        $r3 = r0.<com.android.server.wm.DisplayAreaOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        r9 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r10 = new com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$PjbOQsmTo9SsqYA5W_I1Ng23PYc;

        specialinvoke r10.<com.android.server.wm._$$Lambda$DisplayAreaOrganizerController$PjbOQsmTo9SsqYA5W_I1Ng23PYc: void <init>(android.window.IDisplayAreaOrganizer)>(r6);

        virtualinvoke r9.<com.android.server.wm.RootWindowContainer: void forAllDisplayAreas(java.util.function.Consumer)>(r10);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DisplayAreaOrganizerController: java.lang.String TAG> = "DisplayAreaOrganizerController";

        return;
    }
}
