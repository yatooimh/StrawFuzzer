class com.android.server.wm.DisplayContent extends com.android.server.wm.WindowContainer implements com.android.server.policy.WindowManagerPolicy$DisplayContentInfo
{
    static final int FORCE_SCALING_MODE_AUTO;
    static final int FORCE_SCALING_MODE_DISABLED;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_STACK;
    boolean isDefaultDisplay;
    final java.util.ArrayList mAllSleepTokens;
    final com.android.server.wm.AppTransition mAppTransition;
    final com.android.server.wm.AppTransitionController mAppTransitionController;
    private final java.util.function.Consumer mApplyPostLayoutPolicy;
    private final java.util.function.Consumer mApplySurfaceChangesTransaction;
    com.android.server.wm.ActivityTaskManagerService mAtmService;
    int mBaseDisplayDensity;
    int mBaseDisplayHeight;
    private android.graphics.Rect mBaseDisplayRect;
    int mBaseDisplayWidth;
    final android.util.ArraySet mChangingContainers;
    final float mCloseToSquareMaxAspectRatio;
    final android.util.ArraySet mClosingApps;
    private final android.util.DisplayMetrics mCompatDisplayMetrics;
    float mCompatibleScreenScale;
    private final java.util.function.Predicate mComputeImeTargetPredicate;
    com.android.server.wm.WindowState mCurrentFocus;
    private int mCurrentOverrideConfigurationChanges;
    private int mDeferUpdateImeTargetCount;
    private boolean mDeferredRemoval;
    final android.view.Display mDisplay;
    private android.util.IntArray mDisplayAccessUIDs;
    final com.android.server.wm.DisplayAreaPolicy mDisplayAreaPolicy;
    private final com.android.server.wm.utils.RotationCache mDisplayCutoutCache;
    com.android.server.wm.DisplayFrames mDisplayFrames;
    final int mDisplayId;
    private final android.view.DisplayInfo mDisplayInfo;
    private final android.util.DisplayMetrics mDisplayMetrics;
    private final com.android.server.wm.DisplayPolicy mDisplayPolicy;
    private boolean mDisplayReady;
    private final com.android.server.wm.DisplayRotation mDisplayRotation;
    boolean mDisplayScalingDisabled;
    final com.android.server.wm.DockedStackDividerController mDividerControllerLocked;
    final java.util.ArrayList mExitingTokens;
    private final com.android.internal.util.ToBooleanFunction mFindFocusedWindow;
    private com.android.server.wm.FixedRotationAnimationController mFixedRotationAnimationController;
    private com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp;
    final com.android.server.wm.DisplayContent$FixedRotationTransitionListener mFixedRotationTransitionListener;
    com.android.server.wm.ActivityRecord mFocusedApp;
    private boolean mIgnoreRotationForApps;
    private final com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers;
    private boolean mInEnsureActivitiesVisible;
    android.view.DisplayCutout mInitialDisplayCutout;
    int mInitialDisplayDensity;
    int mInitialDisplayHeight;
    int mInitialDisplayWidth;
    com.android.server.wm.InsetsControlTarget mInputMethodControlTarget;
    com.android.server.wm.WindowState mInputMethodInputTarget;
    com.android.server.wm.WindowState mInputMethodTarget;
    boolean mInputMethodTargetWaitingAnim;
    com.android.server.wm.WindowState mInputMethodWindow;
    private com.android.server.wm.InputMonitor mInputMonitor;
    private final com.android.server.wm.InsetsPolicy mInsetsPolicy;
    private final com.android.server.wm.InsetsStateController mInsetsStateController;
    private com.android.server.wm.ActivityRecord mLastCompatModeActivity;
    private int mLastDispatchedSystemUiVisibility;
    com.android.server.wm.WindowState mLastFocus;
    private boolean mLastHasContent;
    private int mLastStatusBarVisibility;
    private boolean mLastWallpaperVisible;
    private boolean mLayoutNeeded;
    int mLayoutSeq;
    private android.graphics.Point mLocationInParentWindow;
    java.util.ArrayList mLosingFocus;
    private android.view.MagnificationSpec mMagnificationSpec;
    private int mMaxUiWidth;
    private com.android.internal.logging.MetricsLogger mMetricsLogger;
    final java.util.List mNoAnimationNotifyOnTransitionFinished;
    com.android.server.wm.ActivityTaskManagerInternal$SleepToken mOffToken;
    final android.util.ArraySet mOpeningApps;
    private final com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers;
    private android.view.SurfaceControl mParentSurfaceControl;
    private com.android.server.wm.WindowState mParentWindow;
    private final java.util.function.Consumer mPerformLayout;
    private final java.util.function.Consumer mPerformLayoutAttached;
    final com.android.server.wm.PinnedStackController mPinnedStackControllerLocked;
    private final com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher;
    private android.view.InputWindowHandle mPortalWindowHandle;
    final android.util.DisplayMetrics mRealDisplayMetrics;
    com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget;
    private final android.os.IBinder$DeathRecipient mRemoteInsetsDeath;
    private boolean mRemoved;
    private boolean mRemoving;
    private boolean mRemovingDisplay;
    private final com.android.server.wm.DisplayArea$Root mRootDisplayArea;
    private com.android.server.wm.RootWindowContainer mRootWindowContainer;
    private com.android.server.wm.utils.DisplayRotationUtil mRotationUtil;
    private final java.util.function.Consumer mScheduleToastTimeout;
    private com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation;
    private final android.view.SurfaceSession mSession;
    final android.util.SparseArray mShellRoots;
    boolean mShouldOverrideDisplayConfiguration;
    boolean mSingleTaskInstance;
    boolean mSkipAppTransitionAnimation;
    private boolean mSleeping;
    private final android.graphics.Region mSystemGestureExclusion;
    private int mSystemGestureExclusionLimit;
    private final android.os.RemoteCallbackList mSystemGestureExclusionListeners;
    private final android.graphics.Region mSystemGestureExclusionUnrestricted;
    private boolean mSystemGestureExclusionWasRestricted;
    final com.android.server.wm.TaskTapPointerEventListener mTapDetector;
    final android.util.ArraySet mTapExcludeProvidingWindows;
    final java.util.ArrayList mTapExcludedWindows;
    private final android.content.res.Configuration mTempConfig;
    private final com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState;
    private final android.graphics.Rect mTmpBounds;
    private final android.content.res.Configuration mTmpConfiguration;
    private final android.util.DisplayMetrics mTmpDisplayMetrics;
    private android.graphics.Point mTmpDisplaySize;
    private boolean mTmpInitial;
    private final android.graphics.Matrix mTmpMatrix;
    private final android.graphics.Rect mTmpRect;
    private final android.graphics.Rect mTmpRect2;
    private final android.graphics.RectF mTmpRectF;
    private final android.graphics.Region mTmpRegion;
    private final com.android.server.wm.DisplayContent$TaskForResizePointSearchResult mTmpTaskForResizePointSearchResult;
    private final java.util.LinkedList mTmpUpdateAllDrawn;
    private com.android.server.wm.WindowState mTmpWindow;
    private com.android.server.wm.WindowState mTmpWindow2;
    private boolean mTmpWindowsBehindIme;
    private final java.util.HashMap mTokenMap;
    private android.graphics.Region mTouchExcludeRegion;
    final com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController;
    private boolean mUpdateImeTarget;
    private final java.util.function.Consumer mUpdateWindowsForAnimator;
    boolean mWaitingForConfig;
    com.android.server.wm.WallpaperController mWallpaperController;
    boolean mWallpaperMayChange;
    final java.util.ArrayList mWinAddedSinceNullFocus;
    final java.util.ArrayList mWinInsetsChanged;
    final java.util.ArrayList mWinRemovedSinceNullFocus;
    private final com.android.server.wm.DisplayContent$WindowContainers mWindowContainers;
    private final float mWindowCornerRadius;
    int pendingLayoutChanges;

    void <init>(android.view.Display, com.android.server.wm.RootWindowContainer)
    {
        com.android.server.wm.DisplayContent r0, $r64, $r71;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        com.android.server.wm.WindowManagerService $r1, $r3, $r5, $r7, $r9, $r62, $r69, $r77, $r80, $r83, $r89, $r90, $r92, $r97, $r99, $r100, $r108, $r109, $r111, $r115, $r117, $r118, $r121, $r122, $r126, $r128, $r146, $r149, $r154, $r157, $r161, $r163;
        com.android.server.wm.DisplayContent$WindowContainers $r2, $r144, $r152;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r4, $r145;
        com.android.server.wm.DisplayContent$ImeContainer $r6, $r147;
        com.android.server.wm.DisplayArea$Root $r8, $r148;
        android.util.ArraySet $r10, $r11, $r12, $r36;
        java.util.ArrayList $r13, $r26, $r35, $r41, $r43, $r44, $r45, $r51;
        java.util.HashMap $r14;
        com.android.server.wm.utils.RotationCache $r15;
        com.android.server.wm._$$Lambda$DisplayContent$fiC19lMy_d__rvza7hhOSw6bOM8 $r16;
        android.view.DisplayInfo $r17, $r81, r169;
        android.util.DisplayMetrics $r18, $r22, $r23, $r24, $r82, $r85;
        android.os.RemoteCallbackList $r19;
        android.graphics.Region $r20, $r21, $r27, $r32;
        android.graphics.Rect $r25, $r28, $r29, $r33;
        android.graphics.RectF $r30;
        android.graphics.Matrix $r31;
        android.content.res.Configuration $r34, $r53;
        java.util.LinkedList $r37;
        com.android.server.wm.DisplayContent$TaskForResizePointSearchResult $r38;
        com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState $r39;
        android.view.SurfaceSession $r40, $r127;
        com.android.server.wm.DisplayContent$FixedRotationTransitionListener $r42, $r94;
        com.android.server.wm.utils.DisplayRotationUtil $r46;
        android.graphics.Point $r47, $r52;
        android.util.SparseArray $r48;
        com.android.server.wm._$$Lambda$DisplayContent$DjwkABhnEVEEFPHXKA0QFcHdb2w $r49;
        android.util.IntArray $r50;
        com.android.server.wm._$$Lambda$DisplayContent$D0QJUvhaQkGgoMtOmjw5foY9F8M $r54;
        com.android.server.wm._$$Lambda$DisplayContent$hRKjZwmneu0T85LNNY6_Zcs4gKM $r55;
        com.android.server.wm._$$Lambda$DisplayContent$7uZtakUXzuXqF_Qht5Uq7LUvubI $r56;
        com.android.server.wm._$$Lambda$DisplayContent$qT01Aq6xt_ZOs86A1yDQe_qmPFQ $r57;
        com.android.server.wm._$$Lambda$DisplayContent$7voe_dEKk2BYMriCvPuvaznb9WQ $r58;
        com.android.server.wm._$$Lambda$DisplayContent$TPj3OjTsuIg5GTLb5nMmFqIghA4 $r59;
        com.android.server.wm._$$Lambda$DisplayContent$JibsaX4YnJd0ta_wiDDdSp_PjQk $r60;
        com.android.server.wm._$$Lambda$DisplayContent$qxt4izS31fb0LF2uo_OF9DMa7gc $r61;
        com.android.server.wm.RootWindowContainer $r63, $r70, r168;
        java.lang.StringBuilder $r65, $r101;
        java.lang.IllegalArgumentException $r75;
        java.lang.String $r76, $r105;
        com.android.server.wm.ActivityTaskManagerService $r78, $r112, $r164;
        com.android.server.wm.WallpaperController $r79;
        com.android.server.wm.WindowManagerConstants $r84;
        com.android.server.wm.DisplayFrames $r86;
        com.android.server.wm.utils.WmDisplayCutout $r87;
        com.android.server.wm.AppTransition $r88, $r95;
        android.content.Context $r91, $r119;
        com.android.server.wm.WindowManagerInternal$AppTransitionListener $r93;
        com.android.server.wm.AppTransitionController $r96;
        com.android.server.wm.UnknownAppVisibilityController $r98;
        com.android.server.wm.PointerEventDispatcher $r104;
        android.view.InputChannel $r106;
        com.android.server.wm.TaskTapPointerEventListener $r107;
        com.android.server.wm.WindowManagerService$MousePositionTracker $r110;
        com.android.server.wm.RecentTasks $r113, $r165;
        com.android.server.wm.DisplayPolicy $r114, $r123, $r159, $r160;
        com.android.server.wm.DisplayRotation $r116;
        android.content.res.Resources $r120;
        float $f0, $f1;
        boolean $z1, $z2, $z3, z4;
        com.android.server.wm.DockedStackDividerController $r124;
        com.android.server.wm.PinnedStackController $r125;
        android.view.SurfaceControl$Builder $r129, $r130, $r131, $r132, $r133, $r134;
        android.view.SurfaceControl $r135, $r137, $r139, $r141;
        android.view.SurfaceControl$Transaction $r136, $r138, $r140, $r143;
        com.android.server.wm.DisplayAreaPolicy$Provider $r150;
        com.android.server.wm.DisplayAreaPolicy $r151;
        com.android.server.wm.InputMonitor $r153;
        com.android.server.wm.InsetsStateController $r155;
        com.android.server.wm.InsetsPolicy $r156;
        com.android.server.wm.DisplayWindowSettings $r158;
        com.android.server.policy.WindowManagerPolicy $r162;
        android.view.WindowManagerPolicyConstants$PointerEventListener $r166;
        android.view.Display r167;
        com.android.server.input.InputManagerService r171;

        r0 := @this: com.android.server.wm.DisplayContent;

        r167 := @parameter0: android.view.Display;

        r168 := @parameter1: com.android.server.wm.RootWindowContainer;

        $r1 = r168.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWindowManager>;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void <init>(com.android.server.wm.WindowManagerService)>($r1);

        $r2 = new com.android.server.wm.DisplayContent$WindowContainers;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r2.<com.android.server.wm.DisplayContent$WindowContainers: void <init>(com.android.server.wm.DisplayContent,java.lang.String,com.android.server.wm.WindowManagerService)>(r0, "mWindowContainers", $r3);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$WindowContainers mWindowContainers> = $r2;

        $r4 = new com.android.server.wm.DisplayContent$NonAppWindowContainers;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r4.<com.android.server.wm.DisplayContent$NonAppWindowContainers: void <init>(com.android.server.wm.DisplayContent,java.lang.String,com.android.server.wm.WindowManagerService)>(r0, "mOverlayContainers", $r5);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers> = $r4;

        $r6 = new com.android.server.wm.DisplayContent$ImeContainer;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r6.<com.android.server.wm.DisplayContent$ImeContainer: void <init>(com.android.server.wm.WindowManagerService)>($r7);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers> = $r6;

        $r8 = new com.android.server.wm.DisplayArea$Root;

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r8.<com.android.server.wm.DisplayArea$Root: void <init>(com.android.server.wm.WindowManagerService)>($r9);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayArea$Root mRootDisplayArea> = $r8;

        r0.<com.android.server.wm.DisplayContent: boolean mSkipAppTransitionAnimation> = 0;

        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps> = $r10;

        $r11 = new android.util.ArraySet;

        specialinvoke $r11.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps> = $r11;

        $r12 = new android.util.ArraySet;

        specialinvoke $r12.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.List mNoAnimationNotifyOnTransitionFinished> = $r13;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap> = $r14;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth> = 0;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight> = 0;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity> = 0;

        $r15 = new com.android.server.wm.utils.RotationCache;

        $r16 = new com.android.server.wm._$$Lambda$DisplayContent$fiC19lMy_d__rvza7hhOSw6bOM8;

        specialinvoke $r16.<com.android.server.wm._$$Lambda$DisplayContent$fiC19lMy_d__rvza7hhOSw6bOM8: void <init>(com.android.server.wm.DisplayContent)>(r0);

        specialinvoke $r15.<com.android.server.wm.utils.RotationCache: void <init>(com.android.server.wm.utils.RotationCache$RotationDependentComputation)>($r16);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.RotationCache mDisplayCutoutCache> = $r15;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth> = 0;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight> = 0;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = 0;

        $r17 = new android.view.DisplayInfo;

        specialinvoke $r17.<android.view.DisplayInfo: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo> = $r17;

        $r18 = new android.util.DisplayMetrics;

        specialinvoke $r18.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics> = $r18;

        $r19 = new android.os.RemoteCallbackList;

        specialinvoke $r19.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners> = $r19;

        $r20 = new android.graphics.Region;

        specialinvoke $r20.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusion> = $r20;

        r0.<com.android.server.wm.DisplayContent: boolean mSystemGestureExclusionWasRestricted> = 0;

        $r21 = new android.graphics.Region;

        specialinvoke $r21.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusionUnrestricted> = $r21;

        $r22 = new android.util.DisplayMetrics;

        specialinvoke $r22.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mRealDisplayMetrics> = $r22;

        $r23 = new android.util.DisplayMetrics;

        specialinvoke $r23.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mTmpDisplayMetrics> = $r23;

        $r24 = new android.util.DisplayMetrics;

        specialinvoke $r24.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mCompatDisplayMetrics> = $r24;

        r0.<com.android.server.wm.DisplayContent: boolean mLastWallpaperVisible> = 0;

        $r25 = new android.graphics.Rect;

        specialinvoke $r25.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mBaseDisplayRect> = $r25;

        r0.<com.android.server.wm.DisplayContent: boolean mShouldOverrideDisplayConfiguration> = 1;

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens> = $r26;

        $r27 = new android.graphics.Region;

        specialinvoke $r27.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion> = $r27;

        $r28 = new android.graphics.Rect;

        specialinvoke $r28.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect> = $r28;

        $r29 = new android.graphics.Rect;

        specialinvoke $r29.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect2> = $r29;

        $r30 = new android.graphics.RectF;

        specialinvoke $r30.<android.graphics.RectF: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF> = $r30;

        $r31 = new android.graphics.Matrix;

        specialinvoke $r31.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Matrix mTmpMatrix> = $r31;

        $r32 = new android.graphics.Region;

        specialinvoke $r32.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion> = $r32;

        $r33 = new android.graphics.Rect;

        specialinvoke $r33.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds> = $r33;

        $r34 = new android.content.res.Configuration;

        specialinvoke $r34.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration> = $r34;

        $r35 = new java.util.ArrayList;

        specialinvoke $r35.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mTapExcludedWindows> = $r35;

        $r36 = new android.util.ArraySet;

        specialinvoke $r36.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mTapExcludeProvidingWindows> = $r36;

        $r37 = new java.util.LinkedList;

        specialinvoke $r37.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.LinkedList mTmpUpdateAllDrawn> = $r37;

        $r38 = new com.android.server.wm.DisplayContent$TaskForResizePointSearchResult;

        specialinvoke $r38.<com.android.server.wm.DisplayContent$TaskForResizePointSearchResult: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$TaskForResizePointSearchResult mTmpTaskForResizePointSearchResult> = $r38;

        $r39 = new com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState;

        specialinvoke $r39.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: void <init>(com.android.server.wm.DisplayContent$1)>(null);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState> = $r39;

        r0.<com.android.server.wm.DisplayContent: boolean mRemovingDisplay> = 0;

        r0.<com.android.server.wm.DisplayContent: boolean mDisplayReady> = 0;

        r0.<com.android.server.wm.DisplayContent: boolean mWallpaperMayChange> = 0;

        $r40 = new android.view.SurfaceSession;

        specialinvoke $r40.<android.view.SurfaceSession: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.view.SurfaceSession mSession> = $r40;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus> = null;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mLastFocus> = null;

        $r41 = new java.util.ArrayList;

        specialinvoke $r41.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mLosingFocus> = $r41;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp> = null;

        $r42 = new com.android.server.wm.DisplayContent$FixedRotationTransitionListener;

        specialinvoke $r42.<com.android.server.wm.DisplayContent$FixedRotationTransitionListener: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$FixedRotationTransitionListener mFixedRotationTransitionListener> = $r42;

        $r43 = new java.util.ArrayList;

        specialinvoke $r43.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinAddedSinceNullFocus> = $r43;

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinRemovedSinceNullFocus> = $r44;

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinInsetsChanged> = $r45;

        r0.<com.android.server.wm.DisplayContent: int mLayoutSeq> = 0;

        $r46 = new com.android.server.wm.utils.DisplayRotationUtil;

        specialinvoke $r46.<com.android.server.wm.utils.DisplayRotationUtil: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.DisplayRotationUtil mRotationUtil> = $r46;

        $r47 = new android.graphics.Point;

        specialinvoke $r47.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Point mLocationInParentWindow> = $r47;

        r0.<com.android.server.wm.DisplayContent: int mLastStatusBarVisibility> = 0;

        r0.<com.android.server.wm.DisplayContent: int mLastDispatchedSystemUiVisibility> = 0;

        $r48 = new android.util.SparseArray;

        specialinvoke $r48.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots> = $r48;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget> = null;

        $r49 = new com.android.server.wm._$$Lambda$DisplayContent$DjwkABhnEVEEFPHXKA0QFcHdb2w;

        specialinvoke $r49.<com.android.server.wm._$$Lambda$DisplayContent$DjwkABhnEVEEFPHXKA0QFcHdb2w: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: android.os.IBinder$DeathRecipient mRemoteInsetsDeath> = $r49;

        $r50 = new android.util.IntArray;

        specialinvoke $r50.<android.util.IntArray: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.util.IntArray mDisplayAccessUIDs> = $r50;

        $r51 = new java.util.ArrayList;

        specialinvoke $r51.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens> = $r51;

        $r52 = new android.graphics.Point;

        specialinvoke $r52.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.graphics.Point mTmpDisplaySize> = $r52;

        $r53 = new android.content.res.Configuration;

        specialinvoke $r53.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTempConfig> = $r53;

        r0.<com.android.server.wm.DisplayContent: boolean mInEnsureActivitiesVisible> = 0;

        $r54 = new com.android.server.wm._$$Lambda$DisplayContent$D0QJUvhaQkGgoMtOmjw5foY9F8M;

        specialinvoke $r54.<com.android.server.wm._$$Lambda$DisplayContent$D0QJUvhaQkGgoMtOmjw5foY9F8M: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mUpdateWindowsForAnimator> = $r54;

        $r55 = new com.android.server.wm._$$Lambda$DisplayContent$hRKjZwmneu0T85LNNY6_Zcs4gKM;

        specialinvoke $r55.<com.android.server.wm._$$Lambda$DisplayContent$hRKjZwmneu0T85LNNY6_Zcs4gKM: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mScheduleToastTimeout> = $r55;

        $r56 = new com.android.server.wm._$$Lambda$DisplayContent$7uZtakUXzuXqF_Qht5Uq7LUvubI;

        specialinvoke $r56.<com.android.server.wm._$$Lambda$DisplayContent$7uZtakUXzuXqF_Qht5Uq7LUvubI: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: com.android.internal.util.ToBooleanFunction mFindFocusedWindow> = $r56;

        $r57 = new com.android.server.wm._$$Lambda$DisplayContent$qT01Aq6xt_ZOs86A1yDQe_qmPFQ;

        specialinvoke $r57.<com.android.server.wm._$$Lambda$DisplayContent$qT01Aq6xt_ZOs86A1yDQe_qmPFQ: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mPerformLayout> = $r57;

        $r58 = new com.android.server.wm._$$Lambda$DisplayContent$7voe_dEKk2BYMriCvPuvaznb9WQ;

        specialinvoke $r58.<com.android.server.wm._$$Lambda$DisplayContent$7voe_dEKk2BYMriCvPuvaznb9WQ: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mPerformLayoutAttached> = $r58;

        $r59 = new com.android.server.wm._$$Lambda$DisplayContent$TPj3OjTsuIg5GTLb5nMmFqIghA4;

        specialinvoke $r59.<com.android.server.wm._$$Lambda$DisplayContent$TPj3OjTsuIg5GTLb5nMmFqIghA4: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Predicate mComputeImeTargetPredicate> = $r59;

        $r60 = new com.android.server.wm._$$Lambda$DisplayContent$JibsaX4YnJd0ta_wiDDdSp_PjQk;

        specialinvoke $r60.<com.android.server.wm._$$Lambda$DisplayContent$JibsaX4YnJd0ta_wiDDdSp_PjQk: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mApplyPostLayoutPolicy> = $r60;

        $r61 = new com.android.server.wm._$$Lambda$DisplayContent$qxt4izS31fb0LF2uo_OF9DMa7gc;

        specialinvoke $r61.<com.android.server.wm._$$Lambda$DisplayContent$qxt4izS31fb0LF2uo_OF9DMa7gc: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mApplySurfaceChangesTransaction> = $r61;

        $r62 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r63 = $r62.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i1 = virtualinvoke r167.<android.view.Display: int getDisplayId()>();

        $r64 = virtualinvoke $r63.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i1);

        if $r64 != null goto label7;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer> = r168;

        $r77 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r78 = $r77.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService> = $r78;

        r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay> = r167;

        $i4 = virtualinvoke r167.<android.view.Display: int getDisplayId()>();

        r0.<com.android.server.wm.DisplayContent: int mDisplayId> = $i4;

        $r79 = new com.android.server.wm.WallpaperController;

        $r80 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r79.<com.android.server.wm.WallpaperController: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r80, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController> = $r79;

        $r81 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke r167.<android.view.Display: boolean getDisplayInfo(android.view.DisplayInfo)>($r81);

        $r82 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke r167.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>($r82);

        $r83 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r84 = $r83.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        $i6 = $r84.<com.android.server.wm.WindowManagerConstants: int mSystemGestureExclusionLimitDp>;

        $r85 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        $i5 = $r85.<android.util.DisplayMetrics: int densityDpi>;

        $i7 = $i6 * $i5;

        $i8 = $i7 / 160;

        r0.<com.android.server.wm.DisplayContent: int mSystemGestureExclusionLimit> = $i8;

        $i9 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i9 != 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay> = z4;

        i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        r169 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r86 = new com.android.server.wm.DisplayFrames;

        $i10 = r169.<android.view.DisplayInfo: int rotation>;

        $r87 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>($i10);

        specialinvoke $r86.<com.android.server.wm.DisplayFrames: void <init>(int,android.view.DisplayInfo,com.android.server.wm.utils.WmDisplayCutout)>(i0, r169, $r87);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames> = $r86;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void initializeDisplayBaseInfo()>();

        $r88 = new com.android.server.wm.AppTransition;

        $r89 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r91 = $r89.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r90 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r88.<com.android.server.wm.AppTransition: void <init>(android.content.Context,com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r91, $r90, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition> = $r88;

        $r92 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r93 = $r92.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerInternal$AppTransitionListener mActivityManagerAppTransitionNotifier>;

        virtualinvoke $r88.<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>($r93);

        $r95 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r94 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$FixedRotationTransitionListener mFixedRotationTransitionListener>;

        virtualinvoke $r95.<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>($r94);

        $r96 = new com.android.server.wm.AppTransitionController;

        $r97 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r96.<com.android.server.wm.AppTransitionController: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r97, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransitionController mAppTransitionController> = $r96;

        $r98 = new com.android.server.wm.UnknownAppVisibilityController;

        $r99 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r98.<com.android.server.wm.UnknownAppVisibilityController: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r99, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController> = $r98;

        $r100 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r171 = $r100.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PointerEventDispatcher");

        $i11 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r104 = new com.android.server.wm.PointerEventDispatcher;

        $r105 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        $i12 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r106 = virtualinvoke r171.<com.android.server.input.InputManagerService: android.view.InputChannel monitorInput(java.lang.String,int)>($r105, $i12);

        specialinvoke $r104.<com.android.server.wm.PointerEventDispatcher: void <init>(android.view.InputChannel)>($r106);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher> = $r104;

        $r107 = new com.android.server.wm.TaskTapPointerEventListener;

        $r108 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r107.<com.android.server.wm.TaskTapPointerEventListener: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r108, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskTapPointerEventListener mTapDetector> = $r107;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>($r107);

        $r109 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r110 = $r109.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>($r110);

        $r111 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r112 = $r111.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r113 = virtualinvoke $r112.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        if $r113 == null goto label3;

        $r163 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r164 = $r163.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r165 = virtualinvoke $r164.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RecentTasks getRecentTasks()>();

        $r166 = virtualinvoke $r165.<com.android.server.wm.RecentTasks: android.view.WindowManagerPolicyConstants$PointerEventListener getInputListener()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>($r166);

     label3:
        $r114 = new com.android.server.wm.DisplayPolicy;

        $r115 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r114.<com.android.server.wm.DisplayPolicy: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r115, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy> = $r114;

        $r116 = new com.android.server.wm.DisplayRotation;

        $r117 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r116.<com.android.server.wm.DisplayRotation: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r117, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation> = $r116;

        $r118 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r119 = $r118.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r120 = virtualinvoke $r119.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r120.<android.content.res.Resources: float getFloat(int)>(17105054);

        r0.<com.android.server.wm.DisplayContent: float mCloseToSquareMaxAspectRatio> = $f0;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z1 == 0 goto label4;

        $r161 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r162 = $r161.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r162.<com.android.server.policy.WindowManagerPolicy: void setDefaultDisplay(com.android.server.policy.WindowManagerPolicy$DisplayContentInfo)>(r0);

     label4:
        $r121 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z2 = $r121.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z2 == 0 goto label5;

        $r160 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r160.<com.android.server.wm.DisplayPolicy: void onConfigurationChanged()>();

     label5:
        $r122 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z3 = $r122.<com.android.server.wm.WindowManagerService: boolean mSystemReady>;

        if $z3 == 0 goto label6;

        $r159 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r159.<com.android.server.wm.DisplayPolicy: void systemReady()>();

     label6:
        $r123 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $f1 = virtualinvoke $r123.<com.android.server.wm.DisplayPolicy: float getWindowCornerRadius()>();

        r0.<com.android.server.wm.DisplayContent: float mWindowCornerRadius> = $f1;

        $r124 = new com.android.server.wm.DockedStackDividerController;

        specialinvoke $r124.<com.android.server.wm.DockedStackDividerController: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController mDividerControllerLocked> = $r124;

        $r125 = new com.android.server.wm.PinnedStackController;

        $r126 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r125.<com.android.server.wm.PinnedStackController: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r126, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked> = $r125;

        $r128 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r127 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceSession mSession>;

        $r129 = virtualinvoke $r128.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Builder makeSurfaceBuilder(android.view.SurfaceSession)>($r127);

        $r130 = virtualinvoke $r129.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setOpaque(boolean)>(1);

        $r131 = virtualinvoke $r130.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()>();

        $r132 = virtualinvoke $r131.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>("Root");

        $r133 = virtualinvoke $r132.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()>();

        $r134 = virtualinvoke $r133.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("DisplayContent");

        $r135 = virtualinvoke $r134.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mSurfaceControl> = $r135;

        $r136 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r137 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mSurfaceControl>;

        $r138 = virtualinvoke $r136.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>($r137, 0);

        $r139 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mSurfaceControl>;

        $i13 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r140 = virtualinvoke $r138.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayerStack(android.view.SurfaceControl,int)>($r139, $i13);

        $r141 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r140.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>($r141);

        $r143 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r143.<android.view.SurfaceControl$Transaction: void apply()>();

        $r144 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$WindowContainers mWindowContainers>;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void addChild(com.android.server.wm.WindowContainer,java.util.Comparator)>($r144, null);

        $r145 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void addChild(com.android.server.wm.WindowContainer,java.util.Comparator)>($r145, null);

        $r146 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r150 = $r146.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayAreaPolicy$Provider mDisplayAreaPolicyProvider>;

        $r149 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r148 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayArea$Root mRootDisplayArea>;

        $r147 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        $r151 = interfaceinvoke $r150.<com.android.server.wm.DisplayAreaPolicy$Provider: com.android.server.wm.DisplayAreaPolicy instantiate(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent,com.android.server.wm.DisplayArea$Root,com.android.server.wm.DisplayArea)>($r149, r0, $r148, $r147);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayAreaPolicy mDisplayAreaPolicy> = $r151;

        $r152 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$WindowContainers mWindowContainers>;

        virtualinvoke $r152.<com.android.server.wm.DisplayContent$WindowContainers: void addChildren()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r0);

        $r153 = new com.android.server.wm.InputMonitor;

        $r154 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        specialinvoke $r153.<com.android.server.wm.InputMonitor: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>($r154, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor> = $r153;

        $r155 = new com.android.server.wm.InsetsStateController;

        specialinvoke $r155.<com.android.server.wm.InsetsStateController: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController> = $r155;

        $r156 = new com.android.server.wm.InsetsPolicy;

        specialinvoke $r156.<com.android.server.wm.InsetsPolicy: void <init>(com.android.server.wm.InsetsStateController,com.android.server.wm.DisplayContent)>($r155, r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsPolicy mInsetsPolicy> = $r156;

        $r157 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r158 = $r157.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r158.<com.android.server.wm.DisplayWindowSettings: void applySettingsToDisplayLocked(com.android.server.wm.DisplayContent)>(r0);

        return;

     label7:
        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display with ID=");

        $i2 = virtualinvoke r167.<android.view.Display: int getDisplayId()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists=");

        $r69 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r70 = $r69.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i3 = virtualinvoke r167.<android.view.Display: int getDisplayId()>();

        $r71 = virtualinvoke $r70.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i3);

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new=");

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r167);

        $r75 = new java.lang.IllegalArgumentException;

        $r76 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r76);

        throw $r75;
    }

    static com.android.server.wm.DisplayContent$ImeContainer access$300(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$ImeContainer $r1;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        return $r1;
    }

    static com.android.server.wm.DisplayArea$Root access$400(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayArea$Root $r1;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayArea$Root mRootDisplayArea>;

        return $r1;
    }

    static com.android.server.wm.ActivityRecord access$500(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        return $r1;
    }

    private static void addActivityUid(com.android.server.wm.ActivityRecord, android.util.IntArray)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.IntArray r1;
        int $i0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.util.IntArray;

        $i0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: int getUid()>();

        virtualinvoke r1.<android.util.IntArray: void add(int)>($i0);

        return;
    }

    private static int addToGlobalAndConsumeLimit(android.graphics.Region, android.graphics.Region, android.graphics.Rect, int, com.android.server.wm.WindowState, int)
    {
        android.graphics.Region r0, r5, r7;
        int i0, i1, i2, $i3, $i4, $i5;
        com.android.server.wm.WindowState r1;
        int[] r2, r8;
        android.graphics.Region$Op $r3;
        com.android.server.wm._$$Lambda$DisplayContent$_t02M5j_NY8t_HMWggKym0SrI5k $r4;
        android.graphics.Rect r6;

        r5 := @parameter0: android.graphics.Region;

        r0 := @parameter1: android.graphics.Region;

        r6 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        r1 := @parameter4: com.android.server.wm.WindowState;

        i1 := @parameter5: int;

        r7 = staticinvoke <android.graphics.Region: android.graphics.Region obtain(android.graphics.Region)>(r5);

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r7.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r6, $r3);

        r8 = newarray (int)[1];

        r8[0] = i0;

        r2 = newarray (int)[1];

        r2[0] = 0;

        $r4 = new com.android.server.wm._$$Lambda$DisplayContent$_t02M5j_NY8t_HMWggKym0SrI5k;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$DisplayContent$_t02M5j_NY8t_HMWggKym0SrI5k: void <init>(int[],int[],android.graphics.Region)>(r8, r2, r0);

        staticinvoke <com.android.server.wm.utils.RegionUtils: void forEachRectReverse(android.graphics.Region,java.util.function.Consumer)>(r7, $r4);

        i2 = r8[0];

        $i4 = r2[0];

        $i3 = i0 - i2;

        virtualinvoke r1.<com.android.server.wm.WindowState: void setLastExclusionHeights(int,int,int)>(i1, $i4, $i3);

        virtualinvoke r7.<android.graphics.Region: void recycle()>();

        $i5 = r8[0];

        return $i5;
    }

    private void adjustDisplaySizeRanges(android.view.DisplayInfo, int, int, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.DisplayInfo r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        android.view.DisplayCutout r2;
        com.android.server.wm.utils.WmDisplayCutout $r3;
        com.android.server.wm.DisplayPolicy $r4, $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.DisplayInfo;

        i8 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i8);

        r2 = virtualinvoke $r3.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i3 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: int getConfigDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i1, i2, i8, i0, r2);

        $i4 = r1.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        if i3 >= $i4 goto label1;

        r1.<android.view.DisplayInfo: int smallestNominalAppWidth> = i3;

     label1:
        $i5 = r1.<android.view.DisplayInfo: int largestNominalAppWidth>;

        if i3 <= $i5 goto label2;

        r1.<android.view.DisplayInfo: int largestNominalAppWidth> = i3;

     label2:
        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i9 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: int getConfigDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i1, i2, i8, i0, r2);

        $i6 = r1.<android.view.DisplayInfo: int smallestNominalAppHeight>;

        if i9 >= $i6 goto label3;

        r1.<android.view.DisplayInfo: int smallestNominalAppHeight> = i9;

     label3:
        $i7 = r1.<android.view.DisplayInfo: int largestNominalAppHeight>;

        if i9 <= $i7 goto label4;

        r1.<android.view.DisplayInfo: int largestNominalAppHeight> = i9;

     label4:
        return;
    }

    static boolean alwaysCreateStack(int, int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = 1;

        if i1 != 1 goto label2;

        if i0 == 1 goto label1;

        if i0 == 5 goto label1;

        if i0 == 2 goto label1;

        if i0 == 4 goto label1;

        if i0 != 6 goto label2;

     label1:
        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    private void amendWindowTapExcludeRegion(android.graphics.Region)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Region r1, r2;
        android.util.ArraySet $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.WindowState $r6;
        android.graphics.Region$Op $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Region;

        r2 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mTapExcludeProvidingWindows>;

        $i0 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r4 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mTapExcludeProvidingWindows>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r6 = (com.android.server.wm.WindowState) $r5;

        virtualinvoke $r6.<com.android.server.wm.WindowState: void getTapExcludeRegion(android.graphics.Region)>(r2);

        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r2, $r7);

        i1 = i1 + -1;

        goto label1;

     label2:
        virtualinvoke r2.<android.graphics.Region: void recycle()>();

        return;
    }

    private void applyRotation(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean z0, $z1;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.DisplayRotation $r2, $r3;
        android.content.res.Configuration $r4;
        com.android.server.wm.WindowManagerService $r6, $r8, $r10, $r12, $r16, $r21;
        java.util.ArrayList $r7, $r13;
        com.android.server.wm.AccessibilityController $r9, $r11;
        java.lang.Object $r14;
        android.view.IRotationWatcher $r15;
        com.android.server.wm.WindowManagerService$H $r17;
        android.os.RemoteException $r18;
        com.android.server.wm.ScreenRotationAnimation r19;
        com.android.server.wm._$$Lambda$DisplayContent$rrIyMuu_GcQqYYNiuxrgp7_xvhQ $r20;
        android.hardware.display.DisplayManagerInternal $r22;
        com.android.server.wm._$$Lambda$DisplayContent$_lwLvC_wAU5sgJoEjpK20Cc7yDo $r23;
        com.android.server.wm.WindowManagerService$RotationWatcher r24;

        r0 := @this: com.android.server.wm.DisplayContent;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        virtualinvoke $r2.<com.android.server.wm.DisplayRotation: void applyCurrentRotation(int)>(i0);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        z0 = virtualinvoke $r3.<com.android.server.wm.DisplayRotation: boolean isRotatingSeamlessly()>();

        r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        if z0 == 0 goto label01;

        r19 = null;

        goto label02;

     label01:
        r19 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

     label02:
        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $i1 = $r4.<android.content.res.Configuration: int uiMode>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo updateDisplayAndOrientation(int,android.content.res.Configuration)>($i1, null);

        if r19 == null goto label03;

        $z1 = virtualinvoke r19.<com.android.server.wm.ScreenRotationAnimation: boolean hasScreenshot()>();

        if $z1 == 0 goto label03;

        virtualinvoke r19.<com.android.server.wm.ScreenRotationAnimation: void setRotation(android.view.SurfaceControl$Transaction,int)>(r1, i0);

     label03:
        $r20 = new com.android.server.wm._$$Lambda$DisplayContent$rrIyMuu_GcQqYYNiuxrgp7_xvhQ;

        specialinvoke $r20.<com.android.server.wm._$$Lambda$DisplayContent$rrIyMuu_GcQqYYNiuxrgp7_xvhQ: void <init>(android.view.SurfaceControl$Transaction,int,int,boolean)>(r1, i5, i0, z0);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r20, 1);

        $r21 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r22 = $r21.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        virtualinvoke $r22.<android.hardware.display.DisplayManagerInternal: void performTraversal(android.view.SurfaceControl$Transaction)>(r1);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void scheduleAnimation()>();

        $r23 = new com.android.server.wm._$$Lambda$DisplayContent$_lwLvC_wAU5sgJoEjpK20Cc7yDo;

        specialinvoke $r23.<com.android.server.wm._$$Lambda$DisplayContent$_lwLvC_wAU5sgJoEjpK20Cc7yDo: void <init>(com.android.server.wm.DisplayContent,boolean)>(r0, z0);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r23, 1);

        if z0 == 0 goto label04;

        $r16 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r17 = $r16.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r17.<com.android.server.wm.WindowManagerService$H: void sendNewMessageDelayed(int,java.lang.Object,long)>(54, r0, 2000L);

     label04:
        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i6 = $i2 - 1;

     label05:
        if i6 < 0 goto label10;

        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r13 = $r12.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        r24 = (com.android.server.wm.WindowManagerService$RotationWatcher) $r14;

        $i4 = r24.<com.android.server.wm.WindowManagerService$RotationWatcher: int mDisplayId>;

        $i3 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i4 != $i3 goto label09;

     label06:
        $r15 = r24.<com.android.server.wm.WindowManagerService$RotationWatcher: android.view.IRotationWatcher mWatcher>;

        interfaceinvoke $r15.<android.view.IRotationWatcher: void onRotationChanged(int)>(i0);

     label07:
        goto label09;

     label08:
        $r18 := @caughtexception;

     label09:
        i6 = i6 + -1;

        goto label05;

     label10:
        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r9 == null goto label11;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r11.<com.android.server.wm.AccessibilityController: void onRotationChangedLocked(com.android.server.wm.DisplayContent)>(r0);

     label11:
        return;

        catch android.os.RemoteException from label06 to label07 with label08;
    }

    private void applyRotationAndFinishFixedRotation(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm._$$Lambda$DisplayContent$nLtIl6G_J9ubuqCmo2SmaYpTt_E $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if r1 != null goto label1;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void applyRotation(int,int)>(i0, i1);

        return;

     label1:
        $r2 = new com.android.server.wm._$$Lambda$DisplayContent$nLtIl6G_J9ubuqCmo2SmaYpTt_E;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$DisplayContent$nLtIl6G_J9ubuqCmo2SmaYpTt_E: void <init>(com.android.server.wm.DisplayContent,int,int)>(r0, i0, i1);

        virtualinvoke r1.<com.android.server.wm.WindowToken: void finishFixedRotationTransform(java.lang.Runnable)>($r2);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord)>(null);

        return;
    }

    private void calculateBounds(android.view.DisplayInfo, android.graphics.Rect)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.DisplayInfo r1;
        android.graphics.Rect r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        boolean z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.DisplayInfo;

        r2 := @parameter1: android.graphics.Rect;

        i5 = r1.<android.view.DisplayInfo: int rotation>;

        z1 = 1;

        if i5 == 1 goto label2;

        if i5 != 3 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label3;

        i6 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        goto label4;

     label3:
        i6 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

     label4:
        if z1 == 0 goto label5;

        i7 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        goto label6;

     label5:
        i7 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

     label6:
        i8 = r1.<android.view.DisplayInfo: int logicalWidth>;

        $i1 = i6 - i8;

        i9 = $i1 / 2;

        i0 = r1.<android.view.DisplayInfo: int logicalHeight>;

        $i2 = i7 - i0;

        i10 = $i2 / 2;

        $i4 = i9 + i8;

        $i3 = i10 + i0;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(i9, i10, $i4, $i3);

        return;
    }

    private com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotationUncached(android.view.DisplayCutout, int)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Insets r1, $r4;
        com.android.server.wm.utils.WmDisplayCutout $r2, $r5, $r6;
        android.view.DisplayCutout $r3, r7, r11;
        int $i0, $i1, i2, $i3, $i4, i5, i6;
        boolean z1;
        com.android.server.wm.utils.DisplayRotationUtil $r8;
        android.graphics.Rect[] $r9, r10;

        r0 := @this: com.android.server.wm.DisplayContent;

        r7 := @parameter0: android.view.DisplayCutout;

        i2 := @parameter1: int;

        if r7 == null goto label9;

        $r3 = <android.view.DisplayCutout: android.view.DisplayCutout NO_CUTOUT>;

        if r7 != $r3 goto label1;

        goto label9;

     label1:
        $r4 = virtualinvoke r7.<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>();

        r1 = staticinvoke <android.util.RotationUtils: android.graphics.Insets rotateInsets(android.graphics.Insets,int)>($r4, i2);

        if i2 != 0 goto label2;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        $r6 = staticinvoke <com.android.server.wm.utils.WmDisplayCutout: com.android.server.wm.utils.WmDisplayCutout computeSafeInsets(android.view.DisplayCutout,int,int)>(r7, $i1, $i0);

        return $r6;

     label2:
        z1 = 1;

        if i2 == 1 goto label4;

        if i2 != 3 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.DisplayRotationUtil mRotationUtil>;

        $r9 = virtualinvoke r7.<android.view.DisplayCutout: android.graphics.Rect[] getBoundingRectsAll()>();

        $i3 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i4 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        r10 = virtualinvoke $r8.<com.android.server.wm.utils.DisplayRotationUtil: android.graphics.Rect[] getRotatedBounds(android.graphics.Rect[],int,int,int)>($r9, i2, $i3, $i4);

        r11 = staticinvoke <android.view.DisplayCutout: android.view.DisplayCutout fromBoundsAndWaterfall(android.graphics.Rect[],android.graphics.Insets)>(r10, r1);

        if z1 == 0 goto label5;

        i5 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        goto label6;

     label5:
        i5 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

     label6:
        if z1 == 0 goto label7;

        i6 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        goto label8;

     label7:
        i6 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

     label8:
        $r5 = staticinvoke <com.android.server.wm.utils.WmDisplayCutout: com.android.server.wm.utils.WmDisplayCutout computeSafeInsets(android.view.DisplayCutout,int,int)>(r11, i5, i6);

        return $r5;

     label9:
        $r2 = <com.android.server.wm.utils.WmDisplayCutout: com.android.server.wm.utils.WmDisplayCutout NO_CUTOUT>;

        return $r2;
    }

    private boolean canUpdateImeTarget()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDeferUpdateImeTargetCount>;

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void clearFixedRotationLaunchingApp()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void finishFixedRotationTransform()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord)>(null);

        return;
    }

    private void clearLayoutNeeded()
    {
        com.android.server.wm.DisplayContent r0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: boolean mLayoutNeeded> = 0;

        return;
    }

    private int computeCompatSmallestWidth(boolean, int, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        android.util.DisplayMetrics r1, $r2, $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i6 := @parameter3: int;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mTmpDisplayMetrics>;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke $r3.<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>($r2);

        r1 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mTmpDisplayMetrics>;

        if z0 == 0 goto label1;

        i7 = i6;

        i6 = i1;

        goto label2;

     label1:
        i7 = i1;

     label2:
        $i2 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceCompatConfigWidthSize(int,int,int,android.util.DisplayMetrics,int,int)>(0, 0, i0, r1, i7, i6);

        $i3 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceCompatConfigWidthSize(int,int,int,android.util.DisplayMetrics,int,int)>($i2, 1, i0, r1, i6, i7);

        $i4 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceCompatConfigWidthSize(int,int,int,android.util.DisplayMetrics,int,int)>($i3, 2, i0, r1, i7, i6);

        $i5 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceCompatConfigWidthSize(int,int,int,android.util.DisplayMetrics,int,int)>($i4, 3, i0, r1, i6, i7);

        return $i5;
    }

    private void computeScreenAppConfiguration(android.content.res.Configuration, int, int, int, int, android.view.DisplayCutout)
    {
        com.android.server.wm.DisplayContent r0;
        android.content.res.Configuration r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i19;
        android.view.DisplayCutout r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        com.android.server.wm.DisplayPolicy $r3, $r4, $r6, $r12, $r13;
        android.graphics.Rect $r5, $r7, $r8;
        android.app.WindowConfiguration $r9, $r10;
        android.util.DisplayMetrics $r11;
        byte b18;
        boolean z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: android.view.DisplayCutout;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i4 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i0, i1, i2, i3, r2);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i17 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i0, i1, i2, i3, r2);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r6.<com.android.server.wm.DisplayPolicy: void getNonDecorInsetsLw(int,int,int,android.view.DisplayCutout,android.graphics.Rect)>(i2, i0, i1, r2, $r5);

        $r7 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        i5 = $r7.<android.graphics.Rect: int left>;

        $r8 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        i6 = $r8.<android.graphics.Rect: int top>;

        $r9 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i8 = i5 + i4;

        $i7 = i6 + i17;

        virtualinvoke $r9.<android.app.WindowConfiguration: void setAppBounds(int,int,int,int)>(i5, i6, $i8, $i7);

        $r10 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        virtualinvoke $r10.<android.app.WindowConfiguration: void setRotation(int)>(i2);

        if i0 > i1 goto label1;

        b18 = 1;

        goto label2;

     label1:
        b18 = 2;

     label2:
        r1.<android.content.res.Configuration: int orientation> = b18;

        $r11 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        f0 = $r11.<android.util.DisplayMetrics: float density>;

        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $i9 = virtualinvoke $r12.<com.android.server.wm.DisplayPolicy: int getConfigDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i0, i1, i2, i3, r2);

        $f1 = (float) $i9;

        $f2 = $f1 / f0;

        $i10 = (int) $f2;

        r1.<android.content.res.Configuration: int screenWidthDp> = $i10;

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $i11 = virtualinvoke $r13.<com.android.server.wm.DisplayPolicy: int getConfigDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i0, i1, i2, i3, r2);

        $f3 = (float) $i11;

        $f4 = $f3 / f0;

        $i12 = (int) $f4;

        r1.<android.content.res.Configuration: int screenHeightDp> = $i12;

        $i13 = r1.<android.content.res.Configuration: int screenWidthDp>;

        $f6 = (float) $i13;

        $f5 = r0.<com.android.server.wm.DisplayContent: float mCompatibleScreenScale>;

        $f7 = $f6 / $f5;

        $i14 = (int) $f7;

        r1.<android.content.res.Configuration: int compatScreenWidthDp> = $i14;

        $i15 = r1.<android.content.res.Configuration: int screenHeightDp>;

        $f9 = (float) $i15;

        $f8 = r0.<com.android.server.wm.DisplayContent: float mCompatibleScreenScale>;

        $f10 = $f9 / $f8;

        $i16 = (int) $f10;

        r1.<android.content.res.Configuration: int compatScreenHeightDp> = $i16;

        z1 = 1;

        if i2 == 1 goto label4;

        if i2 != 3 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $i19 = specialinvoke r0.<com.android.server.wm.DisplayContent: int computeCompatSmallestWidth(boolean,int,int,int)>(z1, i3, i0, i1);

        r1.<android.content.res.Configuration: int compatSmallestScreenWidthDp> = $i19;

        return;
    }

    private void computeSizeRangesAndScreenLayout(android.view.DisplayInfo, boolean, int, int, int, float, android.content.res.Configuration)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.DisplayInfo r1;
        boolean z0;
        float f0, $f1, $f2;
        android.content.res.Configuration r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.DisplayInfo;

        z0 := @parameter1: boolean;

        i8 := @parameter2: int;

        i9 := @parameter3: int;

        i10 := @parameter4: int;

        f0 := @parameter5: float;

        r2 := @parameter6: android.content.res.Configuration;

        if z0 == 0 goto label1;

        i0 = i10;

        i10 = i9;

        i9 = i0;

        goto label1;

     label1:
        r1.<android.view.DisplayInfo: int smallestNominalAppWidth> = 1073741824;

        r1.<android.view.DisplayInfo: int smallestNominalAppHeight> = 1073741824;

        r1.<android.view.DisplayInfo: int largestNominalAppWidth> = 0;

        r1.<android.view.DisplayInfo: int largestNominalAppHeight> = 0;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int,int)>(r1, 0, i8, i9, i10);

        specialinvoke r0.<com.android.server.wm.DisplayContent: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int,int)>(r1, 1, i8, i10, i9);

        specialinvoke r0.<com.android.server.wm.DisplayContent: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int,int)>(r1, 2, i8, i9, i10);

        specialinvoke r0.<com.android.server.wm.DisplayContent: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int,int)>(r1, 3, i8, i10, i9);

        if r2 != null goto label2;

        return;

     label2:
        $i1 = r2.<android.content.res.Configuration: int screenLayout>;

        $i2 = staticinvoke <android.content.res.Configuration: int resetScreenLayout(int)>($i1);

        $i3 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceConfigLayout(int,int,float,int,int,int)>($i2, 0, f0, i9, i10, i8);

        $i4 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceConfigLayout(int,int,float,int,int,int)>($i3, 1, f0, i10, i9, i8);

        $i5 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceConfigLayout(int,int,float,int,int,int)>($i4, 2, f0, i9, i10, i8);

        i11 = specialinvoke r0.<com.android.server.wm.DisplayContent: int reduceConfigLayout(int,int,float,int,int,int)>($i5, 3, f0, i10, i9, i8);

        $i6 = r1.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        $f1 = (float) $i6;

        $f2 = $f1 / f0;

        $i7 = (int) $f2;

        r2.<android.content.res.Configuration: int smallestScreenWidthDp> = $i7;

        r2.<android.content.res.Configuration: int screenLayout> = i11;

        return;
    }

    private static void convertCropForSurfaceFlinger(android.graphics.Rect, int, int, int)
    {
        android.graphics.Rect r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22;

        r0 := @parameter0: android.graphics.Rect;

        i18 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i18 != 1 goto label1;

        i19 = r0.<android.graphics.Rect: int top>;

        $i13 = r0.<android.graphics.Rect: int right>;

        $i14 = i0 - $i13;

        r0.<android.graphics.Rect: int top> = $i14;

        $i15 = r0.<android.graphics.Rect: int bottom>;

        r0.<android.graphics.Rect: int right> = $i15;

        $i16 = r0.<android.graphics.Rect: int left>;

        $i17 = i0 - $i16;

        r0.<android.graphics.Rect: int bottom> = $i17;

        r0.<android.graphics.Rect: int left> = i19;

        goto label3;

     label1:
        if i18 != 2 goto label2;

        i20 = r0.<android.graphics.Rect: int top>;

        $i7 = r0.<android.graphics.Rect: int bottom>;

        $i8 = i1 - $i7;

        r0.<android.graphics.Rect: int top> = $i8;

        $i9 = i1 - i20;

        r0.<android.graphics.Rect: int bottom> = $i9;

        i21 = r0.<android.graphics.Rect: int right>;

        $i10 = r0.<android.graphics.Rect: int left>;

        $i11 = i0 - $i10;

        r0.<android.graphics.Rect: int right> = $i11;

        $i12 = i0 - i21;

        r0.<android.graphics.Rect: int left> = $i12;

        goto label3;

     label2:
        if i18 != 3 goto label3;

        i22 = r0.<android.graphics.Rect: int top>;

        $i2 = r0.<android.graphics.Rect: int left>;

        r0.<android.graphics.Rect: int top> = $i2;

        $i3 = r0.<android.graphics.Rect: int bottom>;

        $i4 = i1 - $i3;

        r0.<android.graphics.Rect: int left> = $i4;

        $i5 = r0.<android.graphics.Rect: int right>;

        r0.<android.graphics.Rect: int bottom> = $i5;

        $i6 = i1 - i22;

        r0.<android.graphics.Rect: int right> = $i6;

        goto label3;

     label3:
        return;
    }

    private android.view.InputWindowHandle createPortalWindowHandle(java.lang.String)
    {
        com.android.server.wm.DisplayContent r0;
        java.lang.String r1;
        android.view.InputWindowHandle $r3;
        android.os.Binder $r4;
        android.graphics.Rect $r5, $r6;
        android.graphics.Region $r7;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: java.lang.String;

        $r3 = new android.view.InputWindowHandle;

        specialinvoke $r3.<android.view.InputWindowHandle: void <init>(android.view.InputApplicationHandle,int)>(null, -1);

        $r3.<android.view.InputWindowHandle: java.lang.String name> = r1;

        $r4 = new android.os.Binder;

        specialinvoke $r4.<android.os.Binder: void <init>()>();

        $r3.<android.view.InputWindowHandle: android.os.IBinder token> = $r4;

        $r3.<android.view.InputWindowHandle: int layoutParamsFlags> = 8388648;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void getBounds(android.graphics.Rect)>($r5);

        $r7 = $r3.<android.view.InputWindowHandle: android.graphics.Region touchableRegion>;

        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r7.<android.graphics.Region: boolean set(android.graphics.Rect)>($r6);

        $r3.<android.view.InputWindowHandle: float scaleFactor> = 1.0F;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $r3.<android.view.InputWindowHandle: int ownerPid> = $i0;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r3.<android.view.InputWindowHandle: int ownerUid> = $i1;

        $i2 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r3.<android.view.InputWindowHandle: int portalToDisplayId> = $i2;

        return $r3;
    }

    static void createRotationMatrix(int, float, float, float, float, android.graphics.Matrix)
    {
        int i0;
        float f0, f1, f2, f3, $f4;
        android.graphics.Matrix r0;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        r0 := @parameter5: android.graphics.Matrix;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        goto label5;

     label1:
        virtualinvoke r0.<android.graphics.Matrix: void setRotate(float,float,float)>(270.0F, 0.0F, 0.0F);

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>(0.0F, f3);

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>(f1, 0.0F);

        goto label5;

     label2:
        virtualinvoke r0.<android.graphics.Matrix: void reset()>();

        goto label5;

     label3:
        virtualinvoke r0.<android.graphics.Matrix: void setRotate(float,float,float)>(90.0F, 0.0F, 0.0F);

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>(f2, 0.0F);

        $f4 = neg f1;

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>($f4, f0);

        goto label5;

     label4:
        virtualinvoke r0.<android.graphics.Matrix: void reset()>();

     label5:
        return;
    }

    private static void createRotationMatrix(int, float, float, android.graphics.Matrix)
    {
        int i0;
        float f0, f1;
        android.graphics.Matrix r0;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r0 := @parameter3: android.graphics.Matrix;

        staticinvoke <com.android.server.wm.DisplayContent: void createRotationMatrix(int,float,float,float,float,android.graphics.Matrix)>(i0, 0.0F, 0.0F, f0, f1, r0);

        return;
    }

    static int deltaRotation(int, int)
    {
        int i0, i1, i2, i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 - i0;

        i3 = i2;

        if i2 >= 0 goto label1;

        i3 = i2 + 4;

     label1:
        return i3;
    }

    private void getBounds(android.graphics.Rect, int)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Rect r1;
        android.view.DisplayInfo $r2;
        int $i0, $i1, $i2, i3, i4;
        android.graphics.Matrix $r3, $r6;
        float $f0, $f1;
        android.graphics.RectF $r4, $r5, $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Rect;

        i3 := @parameter1: int;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void getBounds(android.graphics.Rect)>(r1);

        $r2 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r2.<android.view.DisplayInfo: int rotation>;

        i4 = staticinvoke <com.android.server.wm.DisplayContent: int deltaRotation(int,int)>($i0, i3);

        if i4 == 1 goto label1;

        if i4 != 3 goto label2;

     label1:
        $i1 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $f1 = (float) $i1;

        $i2 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        $f0 = (float) $i2;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.graphics.Matrix mTmpMatrix>;

        staticinvoke <com.android.server.wm.DisplayContent: void createRotationMatrix(int,float,float,android.graphics.Matrix)>(i4, $f1, $f0, $r3);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF>;

        virtualinvoke $r4.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Matrix mTmpMatrix>;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF>;

        virtualinvoke $r6.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r5);

        $r7 = r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF>;

        virtualinvoke $r7.<android.graphics.RectF: void round(android.graphics.Rect)>(r1);

     label2:
        return;
    }

    private boolean isImeControlledByApp()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        int $i0;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<com.android.server.wm.WindowState: int getWindowingMode()>();

        $z0 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>($i0);

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isNonDecorDisplayCloseToSquare(int, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2, i3, $i4, $i5, i7, i8;
        android.view.DisplayCutout r1;
        com.android.server.wm.utils.WmDisplayCutout $r2;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        com.android.server.wm.DisplayPolicy $r5, $r6;
        float $f0, $f1, $f2, $f3;
        byte $b6;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i7 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i7);

        r1 = virtualinvoke $r2.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        i2 = interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: int getUiMode()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i3 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i0, i1, i7, i2, r1);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i8 = virtualinvoke $r6.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i0, i1, i7, i2, r1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i3, i8);

        $f0 = (float) $i4;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i3, i8);

        $f1 = (float) $i5;

        $f3 = $f0 / $f1;

        $f2 = r0.<com.android.server.wm.DisplayContent: float mCloseToSquareMaxAspectRatio>;

        $b6 = $f3 cmpg $f2;

        if $b6 > 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$addToGlobalAndConsumeLimit$25(int[], int[], android.graphics.Region, android.graphics.Rect)
    {
        int[] r0, r1;
        android.graphics.Region r2;
        android.graphics.Rect r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Region$Op $r4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        r2 := @parameter2: android.graphics.Region;

        r3 := @parameter3: android.graphics.Rect;

        $i1 = r0[0];

        if $i1 > 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $i2 = r1[0];

        $i3 = $i2 + i0;

        r1[0] = $i3;

        $i4 = r0[0];

        if i0 <= $i4 goto label2;

        $i8 = r3.<android.graphics.Rect: int bottom>;

        $i7 = r0[0];

        $i9 = $i8 - $i7;

        r3.<android.graphics.Rect: int top> = $i9;

     label2:
        $i5 = r0[0];

        $i6 = $i5 - i0;

        r0[0] = $i6;

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r3, $r4);

        return;
    }

    static void lambda$applyRotation$9(android.view.SurfaceControl$Transaction, int, int, boolean, com.android.server.wm.WindowState)
    {
        android.view.SurfaceControl$Transaction r0;
        int i0, i1;
        boolean z0;
        com.android.server.wm.WindowState r1;

        r0 := @parameter0: android.view.SurfaceControl$Transaction;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: com.android.server.wm.WindowState;

        virtualinvoke r1.<com.android.server.wm.WindowState: void seamlesslyRotateIfAllowed(android.view.SurfaceControl$Transaction,int,int,boolean)>(r0, i0, i1, z0);

        return;
    }

    public static void lambda$cDcvMzGxc6XW13Q8FrU5X4DagqE(com.android.server.wm.DisplayContent, com.android.server.wm.Task, com.android.server.wm.Task, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.Task r1, r2;
        int i0;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        r1 := @parameter1: com.android.server.wm.Task;

        r2 := @parameter2: com.android.server.wm.Task;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void processTaskForTouchExcludeRegion(com.android.server.wm.Task,com.android.server.wm.Task,int)>(r1, r2, i0);

        return;
    }

    static boolean lambda$canAddToastWindowForUid$13(int, com.android.server.wm.WindowState)
    {
        int i0, $i1;
        com.android.server.wm.WindowState r0;
        boolean $z0, z1;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.WindowState;

        $i1 = r0.<com.android.server.wm.WindowState: int mOwnerUid>;

        if $i1 != i0 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static boolean lambda$canAddToastWindowForUid$14(int, com.android.server.wm.WindowState)
    {
        int i0, $i1, $i2;
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        boolean $z0, $z1, z2;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2005 goto label1;

        $i2 = r0.<com.android.server.wm.WindowState: int mOwnerUid>;

        if $i2 != i0 goto label1;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mPermanentlyHidden>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    static void lambda$dumpWindowAnimators$17(java.io.PrintWriter, java.lang.String, int[], com.android.server.wm.WindowState)
    {
        java.io.PrintWriter r0;
        java.lang.String r1, $r10;
        int[] r2;
        com.android.server.wm.WindowStateAnimator r3;
        java.lang.StringBuilder $r4;
        int $i0, $i1, $i2;
        com.android.server.wm.WindowState r11;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: int[];

        r11 := @parameter3: com.android.server.wm.WindowState;

        r3 = r11.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window #");

        $i0 = r2[0];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $i1 = r2[0];

        $i2 = $i1 + 1;

        r2[0] = $i2;

        return;
    }

    public static com.android.server.wm.utils.WmDisplayCutout lambda$fiC19lMy-d_-rvza7hhOSw6bOM8(com.android.server.wm.DisplayContent, android.view.DisplayCutout, int)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.DisplayCutout r1;
        int i0;
        com.android.server.wm.utils.WmDisplayCutout $r2;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        r1 := @parameter1: android.view.DisplayCutout;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotationUncached(android.view.DisplayCutout,int)>(r1, i0);

        return $r2;
    }

    static boolean lambda$hasSecureWindowOnScreen$20(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isSecureLocked()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    static void lambda$notifyLocationInParentDisplayChanged$23(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WindowState: void updateLocationInParentDisplayIfNeeded()>();

        return;
    }

    public static void lambda$olEtDzkJbp6PCECUFtRISV0LCpk(com.android.server.wm.ActivityRecord, android.util.IntArray)
    {
        com.android.server.wm.ActivityRecord r0;
        android.util.IntArray r1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.util.IntArray;

        staticinvoke <com.android.server.wm.DisplayContent: void addActivityUid(com.android.server.wm.ActivityRecord,android.util.IntArray)>(r0, r1);

        return;
    }

    static void lambda$pointWithinAppWindow$11(int[], int, int, com.android.server.wm.WindowState, android.graphics.Rect)
    {
        int[] r0;
        int i0, i1, $i2, $i3;
        com.android.server.wm.WindowState r1;
        android.graphics.Rect r2, $r3;
        boolean $z0, $z1, $z2;
        android.view.WindowManager$LayoutParams $r4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: com.android.server.wm.WindowState;

        r2 := @parameter4: android.graphics.Rect;

        $i2 = r0[0];

        if $i2 == -1 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $z2 = virtualinvoke $r3.<android.graphics.Rect: boolean contains(int,int)>(i0, i1);

        if $z2 == 0 goto label2;

        $r4 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        r0[0] = $i3;

        return;

     label2:
        return;
    }

    static void lambda$removeAllTasks$27(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack $r1;

        r0 := @parameter0: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r1.<com.android.server.wm.ActivityStack: void removeChild(com.android.server.wm.WindowContainer,java.lang.String)>(r0, "removeAllTasks");

        return;
    }

    static void lambda$startKeyguardExitOnNonAppWindows$18(com.android.server.policy.WindowManagerPolicy, boolean, boolean, boolean, com.android.server.wm.WindowState)
    {
        com.android.server.policy.WindowManagerPolicy r0;
        boolean z0, z1, z2, $z3, $z4, $z5;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.ActivityRecord $r2;
        android.view.animation.Animation $r3;

        r0 := @parameter0: com.android.server.policy.WindowManagerPolicy;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r1 := @parameter4: com.android.server.wm.WindowState;

        $r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 != null goto label1;

        $z3 = interfaceinvoke r0.<com.android.server.policy.WindowManagerPolicy: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r1);

        if $z3 == 0 goto label1;

        $z4 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean wouldBeVisibleIfPolicyIgnored()>();

        if $z4 == 0 goto label1;

        $z5 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z5 != 0 goto label1;

        $r3 = interfaceinvoke r0.<com.android.server.policy.WindowManagerPolicy: android.view.animation.Animation createHiddenByKeyguardExit(boolean,boolean,boolean)>(z0, z1, z2);

        virtualinvoke r1.<com.android.server.wm.WindowState: void startAnimation(android.view.animation.Animation)>($r3);

     label1:
        return;
    }

    static void lambda$updateImeControlTarget$16(android.os.IBinder)
    {
        android.os.IBinder r0;
        com.android.server.inputmethod.InputMethodManagerInternal $r1;

        r0 := @parameter0: android.os.IBinder;

        $r1 = staticinvoke <com.android.server.inputmethod.InputMethodManagerInternal: com.android.server.inputmethod.InputMethodManagerInternal get()>();

        virtualinvoke $r1.<com.android.server.inputmethod.InputMethodManagerInternal: void reportImeControl(android.os.IBinder)>(r0);

        return;
    }

    static void lambda$updateSystemUiVisibility$21(int, int, com.android.server.wm.WindowState)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        android.view.IWindow $r0;
        android.view.WindowManager$LayoutParams $r1;
        boolean $z0;
        android.os.RemoteException $r2;
        com.android.server.wm.WindowState r3;

        i0 := @parameter0: int;

        i10 := @parameter1: int;

        r3 := @parameter2: com.android.server.wm.WindowState;

     label1:
        i1 = r3.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

     label2:
        $i3 = i1 ^ i0;

        i11 = $i3 & i10;

        $i5 = i11 & i1;

        $i4 = i0 & i11;

        i2 = $i5 | $i4;

        if i2 == i1 goto label4;

     label3:
        $i8 = r3.<com.android.server.wm.WindowState: int mSeq>;

        $i9 = $i8 + 1;

        r3.<com.android.server.wm.WindowState: int mSeq> = $i9;

        r3.<com.android.server.wm.WindowState: int mSystemUiVisibility> = i2;

     label4:
        if i2 != i1 goto label6;

     label5:
        $r1 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z0 = $r1.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners>;

        if $z0 == 0 goto label7;

     label6:
        $i6 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i6 == 2 goto label7;

        $r0 = r3.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $i7 = r3.<com.android.server.wm.WindowState: int mSeq>;

        interfaceinvoke $r0.<android.view.IWindow: void dispatchSystemUiVisibilityChanged(int,int,int,int)>($i7, i0, i2, i11);

     label7:
        goto label9;

     label8:
        $r2 := @caughtexception;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    static boolean logsGestureExclusionRestrictions(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        long l0;
        android.view.WindowManager$LayoutParams r1;
        int i1, $i3, $i4;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.WindowManagerConstants $r3;
        byte $b2;
        boolean $z0, $z1, z2;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.DisplayPolicy $r5;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        l0 = $r3.<com.android.server.wm.WindowManagerConstants: long mSystemGestureExclusionLogDebounceTimeoutMillis>;

        z2 = 0;

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        i1 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if i1 == 2013 goto label2;

        if i1 == 3 goto label2;

        if i1 == 2019 goto label2;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = $i3 & 16;

        if $i4 != 0 goto label2;

        $z0 = staticinvoke <com.android.server.wm.DisplayContent: boolean needsGestureExclusionRestrictions(com.android.server.wm.WindowState,int)>(r0, 0);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: boolean hasSideGestures()>();

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label2;

     label2:
        return z2;
    }

    private static boolean needsGestureExclusionRestrictions(com.android.server.wm.WindowState, int)
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2, i3;
        android.view.WindowManager$LayoutParams $r1;
        boolean z0, z1;

        r0 := @parameter0: com.android.server.wm.WindowState;

        i3 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        z0 = 1;

        $i1 = i3 & 4098;

        if $i1 != 4098 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 != 0 goto label3;

        if i0 == 2011 goto label3;

        if i0 == 2040 goto label3;

        $i2 = virtualinvoke r0.<com.android.server.wm.WindowState: int getActivityType()>();

        if $i2 == 2 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;
    }

    private static void onWindowFocusChanged(com.android.server.wm.WindowState, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0, r1;
        com.android.server.wm.Task r2, r3;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: com.android.server.wm.WindowState;

        r2 = null;

        if r1 == null goto label1;

        r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        if r0 == null goto label3;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

     label3:
        if r3 != r2 goto label4;

        return;

     label4:
        if r3 == null goto label5;

        virtualinvoke r3.<com.android.server.wm.Task: void onWindowFocusChanged(boolean)>(1);

     label5:
        if r2 == null goto label6;

        virtualinvoke r2.<com.android.server.wm.Task: void onWindowFocusChanged(boolean)>(0);

     label6:
        return;
    }

    private void performLayoutNoTrace(boolean, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z1, $z2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        com.android.server.wm.DisplayFrames r1, $r6, $r8;
        android.view.DisplayInfo r2, $r3, $r4;
        com.android.server.wm.utils.WmDisplayCutout $r5;
        com.android.server.wm.DisplayPolicy $r7;
        android.content.res.Configuration $r9;
        java.util.function.Consumer $r10, $r12;
        com.android.server.wm.WindowState $r11;
        com.android.server.wm.InputMonitor $r13, $r14, $r17;
        com.android.server.wm.WindowManagerService $r15;
        com.android.server.wm.WindowManagerService$H $r16;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isLayoutNeeded()>();

        if $z2 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.DisplayContent: void clearLayoutNeeded()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        i0 = $r3.<android.view.DisplayInfo: int logicalWidth>;

        $r4 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        i1 = $r4.<android.view.DisplayInfo: int logicalHeight>;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        r2 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i3 = r2.<android.view.DisplayInfo: int rotation>;

        $r5 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>($i3);

        virtualinvoke r1.<com.android.server.wm.DisplayFrames: void onDisplayInfoUpdated(android.view.DisplayInfo,com.android.server.wm.utils.WmDisplayCutout)>(r2, $r5);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $i4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getRotation()>();

        $r6.<com.android.server.wm.DisplayFrames: int mRotation> = $i4;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $r9 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $i5 = $r9.<android.content.res.Configuration: int uiMode>;

        virtualinvoke $r7.<com.android.server.wm.DisplayPolicy: void beginLayoutLw(com.android.server.wm.DisplayFrames,int)>($r8, $i5);

        $i6 = r0.<com.android.server.wm.DisplayContent: int mLayoutSeq>;

        i2 = $i6 + 1;

        i7 = i2;

        if i2 >= 0 goto label2;

        i7 = 0;

     label2:
        r0.<com.android.server.wm.DisplayContent: int mLayoutSeq> = i7;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = null;

        r0.<com.android.server.wm.DisplayContent: boolean mTmpInitial> = z0;

        r0.<com.android.server.wm.DisplayContent: boolean mTmpWindowsBehindIme> = 0;

        $r10 = r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mPerformLayout>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r10, 1);

        $r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow>;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow2> = $r11;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = null;

        $r12 = r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mPerformLayoutAttached>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r12, 1);

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r13.<com.android.server.wm.InputMonitor: void layoutInputConsumers(int,int)>(i0, i1);

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r14.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        if z1 == 0 goto label3;

        $r17 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r17.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label3:
        $r15 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r16.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(41);

        return;
    }

    private void processTaskForTouchExcludeRegion(com.android.server.wm.Task, com.android.server.wm.Task, int)
    {
        com.android.server.wm.DisplayContent r0, $r14;
        com.android.server.wm.Task r1, r2;
        int i0, $i1, $i2;
        com.android.server.wm.ActivityRecord r3;
        boolean z0, $z1, $z2, $z5, $z6;
        android.graphics.Region$Op $r4;
        android.graphics.Rect $r5, $r7, $r9, $r10, $r11, $r12, $r13, $r15;
        android.graphics.Region $r6;
        com.android.server.wm.DisplayFrames $r8;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 := @parameter1: com.android.server.wm.Task;

        i0 := @parameter2: int;

        r3 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopVisibleActivity()>();

        if r3 == null goto label8;

        $z1 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: boolean hasContentToDisplay()>();

        if $z1 != 0 goto label1;

        goto label8;

     label1:
        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean isActivityTypeHome()>();

        if $z2 == 0 goto label2;

        $z5 = virtualinvoke r1.<com.android.server.wm.Task: boolean isVisible()>();

        if $z5 == 0 goto label2;

        $z6 = virtualinvoke r1.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z6 == 0 goto label2;

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        $r13 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r14.<com.android.server.wm.DisplayContent: void getBounds(android.graphics.Rect)>($r13);

        goto label3;

     label2:
        $r15 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<com.android.server.wm.Task: void getDimBounds(android.graphics.Rect)>($r15);

     label3:
        if r1 != r2 goto label4;

        $r12 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect2>;

        $r11 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r12.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

     label4:
        z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if r1 != r2 goto label5;

        if z0 == 0 goto label7;

     label5:
        if z0 == 0 goto label6;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        $i2 = neg i0;

        $i1 = neg i0;

        virtualinvoke $r7.<android.graphics.Rect: void inset(int,int)>($i2, $i1);

        $r10 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $r9 = $r8.<com.android.server.wm.DisplayFrames: android.graphics.Rect mContent>;

        virtualinvoke $r10.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r9);

     label6:
        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke $r6.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>($r5, $r4);

     label7:
        return;

     label8:
        return;
    }

    private int reduceCompatConfigWidthSize(int, int, int, android.util.DisplayMetrics, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, i9;
        android.util.DisplayMetrics r1;
        android.view.DisplayCutout r2;
        float f0, $f1, $f2, $f3, $f4, $f5;
        com.android.server.wm.utils.WmDisplayCutout $r3;
        com.android.server.wm.DisplayPolicy $r4, $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        i7 := @parameter2: int;

        r1 := @parameter3: android.util.DisplayMetrics;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i6);

        r2 = virtualinvoke $r3.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $i3 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i1, i2, i6, i7, r2);

        r1.<android.util.DisplayMetrics: int noncompatWidthPixels> = $i3;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $i4 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i1, i2, i6, i7, r2);

        r1.<android.util.DisplayMetrics: int noncompatHeightPixels> = $i4;

        f0 = staticinvoke <android.content.res.CompatibilityInfo: float computeCompatibleScaling(android.util.DisplayMetrics,android.util.DisplayMetrics)>(r1, null);

        $i5 = r1.<android.util.DisplayMetrics: int noncompatWidthPixels>;

        $f1 = (float) $i5;

        $f3 = $f1 / f0;

        $f2 = r1.<android.util.DisplayMetrics: float density>;

        $f4 = $f3 / $f2;

        $f5 = $f4 + 0.5F;

        i8 = (int) $f5;

        if i0 == 0 goto label1;

        i9 = i0;

        if i8 >= i0 goto label2;

     label1:
        i9 = i8;

     label2:
        return i9;
    }

    private int reduceConfigLayout(int, int, float, int, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i11, i12;
        float f0, $f1, $f2, $f3, $f4;
        android.view.DisplayCutout r1;
        com.android.server.wm.utils.WmDisplayCutout $r2;
        com.android.server.wm.DisplayPolicy $r3, $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        f0 := @parameter2: float;

        i6 := @parameter3: int;

        i7 := @parameter4: int;

        i8 := @parameter5: int;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i5);

        r1 = virtualinvoke $r2.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i1 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i6, i7, i5, i8, r1);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i9 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i6, i7, i5, i8, r1);

        i11 = i1;

        i12 = i9;

        if i1 >= i9 goto label1;

        i12 = i1;

        i11 = i9;

     label1:
        $f1 = (float) i11;

        $f2 = $f1 / f0;

        $i3 = (int) $f2;

        $f3 = (float) i12;

        $f4 = $f3 / f0;

        $i2 = (int) $f4;

        $i4 = staticinvoke <android.content.res.Configuration: int reduceScreenLayout(int,int,int)>(i0, $i3, $i2);

        return $i4;
    }

    private void setInputMethodTarget(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r3;
        boolean z0, $z1, $z2;
        java.lang.String r2;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if r1 != $r3 goto label1;

        $z2 = r0.<com.android.server.wm.DisplayContent: boolean mInputMethodTargetWaitingAnim>;

        if $z2 != z0 goto label1;

        return;

     label1:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_IME_enabled>;

        if $z1 == 0 goto label2;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_IME>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 2119122320, 0, null, $r4);

     label2:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget> = r1;

        r0.<com.android.server.wm.DisplayContent: boolean mInputMethodTargetWaitingAnim> = z0;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(1);

        specialinvoke r0.<com.android.server.wm.DisplayContent: void updateImeParent()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateImeControlTarget()>();

        return;
    }

    private void startFixedRotationTransform(com.android.server.wm.WindowToken, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowToken r1;
        int i0, $i1;
        android.view.DisplayInfo r2;
        com.android.server.wm.utils.WmDisplayCutout r3;
        android.content.res.Configuration $r4, $r5, $r7;
        com.android.server.wm.DisplayFrames $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke $r4.<android.content.res.Configuration: void unset()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo computeScreenConfiguration(android.content.res.Configuration,int)>($r5, i0);

        r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i0);

        $r6 = new com.android.server.wm.DisplayFrames;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        specialinvoke $r6.<com.android.server.wm.DisplayFrames: void <init>(int,android.view.DisplayInfo,com.android.server.wm.utils.WmDisplayCutout)>($i1, r2, r3);

        $r7 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke r1.<com.android.server.wm.WindowToken: void applyFixedRotationTransform(android.view.DisplayInfo,com.android.server.wm.DisplayFrames,android.content.res.Configuration)>(r2, $r6, $r7);

        return;
    }

    private void updateBaseDisplayMetricsIfNeeded()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, $i13, $i14, i15, i16, i17;
        com.android.server.wm.WindowManagerService $r1;
        android.view.DisplayInfo $r2, $r4, $r5, $r6, $r7, r9, r10;
        android.hardware.display.DisplayManagerInternal $r3;
        android.view.DisplayCutout $r8, r11;
        boolean $z0, z1, z2, z3, z4;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r1.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke $r3.<android.hardware.display.DisplayManagerInternal: void getNonOverrideDisplayInfo(int,android.view.DisplayInfo)>($i1, $r2);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        i10 = $r4.<android.view.DisplayInfo: int rotation>;

        z1 = 0;

        if i10 == 1 goto label02;

        if i10 != 3 goto label01;

        goto label02;

     label01:
        z2 = 0;

        goto label03;

     label02:
        z2 = 1;

     label03:
        r9 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        if z2 == 0 goto label04;

        i11 = r9.<android.view.DisplayInfo: int logicalHeight>;

        goto label05;

     label04:
        i11 = r9.<android.view.DisplayInfo: int logicalWidth>;

     label05:
        r10 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        if z2 == 0 goto label06;

        i12 = r10.<android.view.DisplayInfo: int logicalWidth>;

        goto label07;

     label06:
        i12 = r10.<android.view.DisplayInfo: int logicalHeight>;

     label07:
        $r5 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        i0 = $r5.<android.view.DisplayInfo: int logicalDensityDpi>;

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        r11 = $r6.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

        $i2 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        if $i2 != i11 goto label09;

        $i7 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        if $i7 != i12 goto label09;

        $i9 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i8 = $r7.<android.view.DisplayInfo: int logicalDensityDpi>;

        if $i9 != $i8 goto label09;

        $r8 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayCutout mInitialDisplayCutout>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, r11);

        if $z0 != 0 goto label08;

        goto label09;

     label08:
        z3 = 0;

        goto label10;

     label09:
        z3 = 1;

     label10:
        if z3 == 0 goto label21;

        $i4 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $i3 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        if $i4 != $i3 goto label12;

        $i6 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        $i5 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        if $i6 == $i5 goto label11;

        goto label12;

     label11:
        z4 = 0;

        goto label13;

     label12:
        z4 = 1;

     label13:
        $i13 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        $i14 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        if $i13 == $i14 goto label14;

        z1 = 1;

     label14:
        if z4 == 0 goto label15;

        i15 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        goto label16;

     label15:
        i15 = i11;

     label16:
        if z4 == 0 goto label17;

        i16 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        goto label18;

     label17:
        i16 = i12;

     label18:
        if z1 == 0 goto label19;

        i17 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        goto label20;

     label19:
        i17 = i0;

     label20:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetrics(int,int,int)>(i15, i16, i17);

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth> = i11;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight> = i12;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity> = i0;

        r0.<com.android.server.wm.DisplayContent: android.view.DisplayCutout mInitialDisplayCutout> = r11;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

     label21:
        return;
    }

    private void updateBounds()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.InputWindowHandle r1, $r10, $r14;
        android.graphics.Rect $r2, $r4, $r6, $r8, $r9, $r11;
        android.view.DisplayInfo $r3;
        android.view.SurfaceControl $r5, $r15;
        android.graphics.Region $r7, $r12;
        boolean $z1;
        android.view.SurfaceControl$Transaction $r13;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void calculateBounds(android.view.DisplayInfo,android.graphics.Rect)>($r3, $r2);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: int setBounds(android.graphics.Rect)>($r4);

        r1 = r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle mPortalWindowHandle>;

        if r1 == null goto label1;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mParentSurfaceControl>;

        if $r5 == null goto label1;

        $r7 = r1.<android.view.InputWindowHandle: android.graphics.Region touchableRegion>;

        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r7.<android.graphics.Region: boolean getBounds(android.graphics.Rect)>($r6);

        $r9 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        $r8 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        $z1 = virtualinvoke $r9.<android.graphics.Rect: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label1;

        $r10 = r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle mPortalWindowHandle>;

        $r12 = $r10.<android.view.InputWindowHandle: android.graphics.Region touchableRegion>;

        $r11 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r12.<android.graphics.Region: boolean set(android.graphics.Rect)>($r11);

        $r13 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r15 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mParentSurfaceControl>;

        $r14 = r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle mPortalWindowHandle>;

        virtualinvoke $r13.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)>($r15, $r14);

     label1:
        return;
    }

    private android.view.DisplayInfo updateDisplayAndOrientation(int, android.content.res.Configuration)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        android.view.DisplayInfo r1, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r18, $r23, r26, r27, r28;
        com.android.server.wm.utils.WmDisplayCutout $r2;
        com.android.server.wm.DisplayPolicy $r3, $r4;
        boolean $z1, $z2, $z3, $z4, $z5, z6;
        android.util.DisplayMetrics $r11, $r13, $r19, $r20, $r22;
        float $f0, $f1;
        com.android.server.wm.WindowManagerService $r15;
        android.hardware.display.DisplayManagerInternal $r16;
        android.graphics.Rect $r17;
        android.content.res.CompatibilityInfo $r21;
        android.content.res.Configuration r24;
        android.view.DisplayCutout r25;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r24 := @parameter1: android.content.res.Configuration;

        i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getRotation()>();

        z6 = 1;

        if i1 == 1 goto label02;

        if i1 != 3 goto label01;

        z6 = 1;

        goto label02;

     label01:
        z6 = 0;

     label02:
        if z6 == 0 goto label03;

        i10 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        goto label04;

     label03:
        i10 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

     label04:
        if z6 == 0 goto label05;

        i11 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        goto label06;

     label05:
        i11 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

     label06:
        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i1);

        r25 = virtualinvoke $r2.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i2 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayWidth(int,int,int,int,android.view.DisplayCutout)>(i10, i11, i1, i0, r25);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i3 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: int getNonDecorDisplayHeight(int,int,int,int,android.view.DisplayCutout)>(i10, i11, i1, i0, r25);

        $r5 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r5.<android.view.DisplayInfo: int rotation> = i1;

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r6.<android.view.DisplayInfo: int logicalWidth> = i10;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r7.<android.view.DisplayInfo: int logicalHeight> = i11;

        $r8 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i4 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        $r8.<android.view.DisplayInfo: int logicalDensityDpi> = $i4;

        $r9 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r9.<android.view.DisplayInfo: int appWidth> = i2;

        $r10 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r10.<android.view.DisplayInfo: int appHeight> = i3;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z1 == 0 goto label07;

        $r23 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r22 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mRealDisplayMetrics>;

        $r21 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        virtualinvoke $r23.<android.view.DisplayInfo: void getLogicalMetrics(android.util.DisplayMetrics,android.content.res.CompatibilityInfo,android.content.res.Configuration)>($r22, $r21, null);

     label07:
        r1 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $z2 = virtualinvoke r25.<android.view.DisplayCutout: boolean isEmpty()>();

        if $z2 == 0 goto label08;

        r25 = null;

        goto label08;

     label08:
        r1.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout> = r25;

        $r12 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r11 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke $r12.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics)>($r11);

        $z3 = r0.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled>;

        if $z3 == 0 goto label09;

        r26 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i8 = r26.<android.view.DisplayInfo: int flags>;

        $i9 = $i8 | 1073741824;

        r26.<android.view.DisplayInfo: int flags> = $i9;

        goto label10;

     label09:
        r27 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i5 = r27.<android.view.DisplayInfo: int flags>;

        $i6 = $i5 & -1073741825;

        r27.<android.view.DisplayInfo: int flags> = $i6;

     label10:
        $r14 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r13 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        $f0 = $r13.<android.util.DisplayMetrics: float density>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void computeSizeRangesAndScreenLayout(android.view.DisplayInfo,boolean,int,int,int,float,android.content.res.Configuration)>($r14, z6, i0, i10, i11, $f0, r24);

        $z4 = r0.<com.android.server.wm.DisplayContent: boolean mShouldOverrideDisplayConfiguration>;

        if $z4 == 0 goto label11;

        r28 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        goto label12;

     label11:
        r28 = null;

     label12:
        $r15 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i7 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r16.<android.hardware.display.DisplayManagerInternal: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)>($i7, r28);

        $r17 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mBaseDisplayRect>;

        virtualinvoke $r17.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i10, i11);

        $z5 = r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z5 == 0 goto label13;

        $r20 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        $r19 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mCompatDisplayMetrics>;

        $f1 = staticinvoke <android.content.res.CompatibilityInfo: float computeCompatibleScaling(android.util.DisplayMetrics,android.util.DisplayMetrics)>($r20, $r19);

        r0.<com.android.server.wm.DisplayContent: float mCompatibleScreenScale> = $f1;

     label13:
        $r18 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        return $r18;
    }

    private void updateImeParent()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.SurfaceControl r1, $r4;
        android.view.SurfaceControl$Transaction $r2;
        com.android.server.wm.DisplayContent$ImeContainer $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl computeImeParent()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        $r4 = $r3.<com.android.server.wm.DisplayContent$ImeContainer: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>($r4, r1);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void scheduleAnimation()>();

     label1:
        return;
    }

    private boolean updateOrientation(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2;
        com.android.server.wm.Task r1;
        com.android.server.wm.DisplayRotation $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.TaskChangeNotificationController $r4;
        com.android.server.wm.WindowContainer r5;
        com.android.server.wm.ActivityRecord r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getOrientation()>();

        r5 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowContainer getLastOrientationSource()>();

        if r5 == null goto label1;

        r6 = virtualinvoke r5.<com.android.server.wm.WindowContainer: com.android.server.wm.ActivityRecord asActivityRecord()>();

        goto label2;

     label1:
        r6 = null;

     label2:
        if r6 == null goto label4;

        r1 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if r1 == null goto label3;

        $i1 = r1.<com.android.server.wm.Task: int mLastReportedRequestedOrientation>;

        if i0 == $i1 goto label3;

        r1.<com.android.server.wm.Task: int mLastReportedRequestedOrientation> = i0;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i2 = r1.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r4.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskRequestedOrientationChanged(int,int)>($i2, i0);

     label3:
        $z2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean handleTopActivityLaunchingInDifferentOrientation(com.android.server.wm.ActivityRecord,boolean)>(r6, 1);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.DisplayRotation: boolean updateOrientation(int,boolean)>(i0, z0);

        return $z1;
    }

    private boolean updateStatusBarVisibilityLocked(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.input.InputManagerService $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 = r0.<com.android.server.wm.DisplayContent: int mLastDispatchedSystemUiVisibility>;

        if i1 != i0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.wm.DisplayContent: int mLastDispatchedSystemUiVisibility> = i0;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z0 == 0 goto label2;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r2.<com.android.server.input.InputManagerService: void setSystemUiVisibility(int)>(i0);

     label2:
        $i2 = i1 ^ i0;

        $i3 = $i2 & 7;

        $i4 = $i3 & i0;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateSystemUiVisibility(int,int)>(i0, $i4);

        return 1;
    }

    protected void addChild(com.android.server.wm.DisplayContent$DisplayChildWindowContainer, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.DisplayContent$DisplayChildWindowContainer;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("See DisplayChildWindowContainer");

        throw $r2;
    }

    protected void addChild(com.android.server.wm.DisplayContent$DisplayChildWindowContainer, java.util.Comparator)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer r1;
        java.util.Comparator r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.DisplayContent$DisplayChildWindowContainer;

        r2 := @parameter1: java.util.Comparator;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("See DisplayChildWindowContainer");

        throw $r3;
    }

    protected volatile void addChild(com.android.server.wm.WindowContainer, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowContainer r1;
        int i0;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        i0 := @parameter1: int;

        $r2 = (com.android.server.wm.DisplayContent$DisplayChildWindowContainer) r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void addChild(com.android.server.wm.DisplayContent$DisplayChildWindowContainer,int)>($r2, i0);

        return;
    }

    protected volatile void addChild(com.android.server.wm.WindowContainer, java.util.Comparator)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowContainer r1;
        java.util.Comparator r2;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        r2 := @parameter1: java.util.Comparator;

        $r3 = (com.android.server.wm.DisplayContent$DisplayChildWindowContainer) r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void addChild(com.android.server.wm.DisplayContent$DisplayChildWindowContainer,java.util.Comparator)>($r3, r2);

        return;
    }

    android.view.SurfaceControl addShellRoot(android.view.IWindow, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        android.util.SparseArray $r1, $r4, $r7;
        java.lang.Object $r2;
        com.android.server.wm.ShellRoot $r3, r10;
        android.view.SurfaceControl $r5, $r8, r12;
        android.view.IWindow $r6, r9;

        r0 := @this: com.android.server.wm.DisplayContent;

        r9 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r10 = (com.android.server.wm.ShellRoot) $r2;

        if r10 == null goto label2;

        $r6 = virtualinvoke r10.<com.android.server.wm.ShellRoot: android.view.IWindow getClient()>();

        if $r6 != r9 goto label1;

        $r8 = virtualinvoke r10.<com.android.server.wm.ShellRoot: android.view.SurfaceControl getSurfaceControl()>();

        return $r8;

     label1:
        virtualinvoke r10.<com.android.server.wm.ShellRoot: void clear()>();

        $r7 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>(i0);

     label2:
        $r3 = new com.android.server.wm.ShellRoot;

        specialinvoke $r3.<com.android.server.wm.ShellRoot: void <init>(android.view.IWindow,com.android.server.wm.DisplayContent,int)>(r9, r0, i0);

        r12 = virtualinvoke $r3.<com.android.server.wm.ShellRoot: android.view.SurfaceControl getSurfaceControl()>();

        if r12 != null goto label3;

        virtualinvoke $r3.<com.android.server.wm.ShellRoot: void clear()>();

        return null;

     label3:
        $r4 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r3);

        $r5 = new android.view.SurfaceControl;

        specialinvoke $r5.<android.view.SurfaceControl: void <init>(android.view.SurfaceControl,java.lang.String)>(r12, "DisplayContent.addShellRoot");

        return $r5;
    }

    void addWindowToken(android.os.IBinder, com.android.server.wm.WindowToken)
    {
        com.android.server.wm.DisplayContent r0, r1;
        int i0;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.StringBuilder $r4, $r17, $r26;
        java.lang.String $r8, $r16, $r21, $r25, $r28, $r33;
        java.util.HashMap $r13, $r34;
        java.lang.IllegalArgumentException $r15, $r24, $r32;
        com.android.server.wm.ActivityRecord $r36;
        com.android.server.wm.DisplayContent$ImeContainer $r37;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r38;
        com.android.server.wm.DisplayAreaPolicy $r39;
        android.os.IBinder r40;
        com.android.server.wm.WindowToken r41;

        r0 := @this: com.android.server.wm.DisplayContent;

        r40 := @parameter0: android.os.IBinder;

        r41 := @parameter1: com.android.server.wm.WindowToken;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getWindowTokenDisplay(com.android.server.wm.WindowToken)>(r41);

        if r1 != null goto label6;

        if r40 == null goto label5;

        if r41 == null goto label4;

        $r34 = r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r40, r41);

        $r36 = virtualinvoke r41.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if $r36 != null goto label3;

        r41.<com.android.server.wm.WindowToken: com.android.server.wm.DisplayContent mDisplayContent> = r0;

        i0 = r41.<com.android.server.wm.WindowToken: int windowType>;

        if i0 == 2011 goto label2;

        if i0 == 2012 goto label2;

        if i0 == 2039 goto label1;

        $r39 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayAreaPolicy mDisplayAreaPolicy>;

        virtualinvoke $r39.<com.android.server.wm.DisplayAreaPolicy: void addWindow(com.android.server.wm.WindowToken)>(r41);

        goto label3;

     label1:
        $r38 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        virtualinvoke $r38.<com.android.server.wm.DisplayContent$NonAppWindowContainers: void addChild(com.android.server.wm.WindowToken)>(r41);

        goto label3;

     label2:
        $r37 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        virtualinvoke $r37.<com.android.server.wm.DisplayContent$ImeContainer: void addChild(com.android.server.wm.WindowToken)>(r41);

     label3:
        return;

     label4:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t map null token to display=");

        $r28 = virtualinvoke r0.<com.android.server.wm.DisplayContent: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" binder=");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label5:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t map token=");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to display=");

        $r21 = virtualinvoke r0.<com.android.server.wm.DisplayContent: java.lang.String getName()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" binder is null");

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t map token=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to display=");

        $r8 = virtualinvoke r0.<com.android.server.wm.DisplayContent: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already mapped to display=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tokens=");

        $r13 = r1.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;
    }

    void adjustForImeIfNeeded()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        int i0;
        boolean $z0, $z1, z2;
        com.android.server.wm.DisplayFrames $r2;
        com.android.server.wm.PinnedStackController $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        i0 = virtualinvoke $r2.<com.android.server.wm.DisplayFrames: int getInputMethodWindowVisibleHeight()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        virtualinvoke $r3.<com.android.server.wm.PinnedStackController: void setAdjustedForIme(boolean,int)>(z2, i0);

        return;
    }

    void applyMagnificationSpec(android.view.MagnificationSpec)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.MagnificationSpec r1;
        float $f0, $f1;
        double $d0, $d1;
        byte $b0, $b1;
        android.view.SurfaceControl$Transaction $r2, $r3, $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.MagnificationSpec;

        $f0 = r1.<android.view.MagnificationSpec: float scale>;

        $d0 = (double) $f0;

        $b0 = $d0 cmpl 1.0;

        if $b0 == 0 goto label1;

        r0.<com.android.server.wm.DisplayContent: android.view.MagnificationSpec mMagnificationSpec> = r1;

        goto label2;

     label1:
        r0.<com.android.server.wm.DisplayContent: android.view.MagnificationSpec mMagnificationSpec> = null;

     label2:
        specialinvoke r0.<com.android.server.wm.DisplayContent: void updateImeParent()>();

        $f1 = r1.<android.view.MagnificationSpec: float scale>;

        $d1 = (double) $f1;

        $b1 = $d1 cmpl 1.0;

        if $b1 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void applyMagnificationSpec(android.view.SurfaceControl$Transaction,android.view.MagnificationSpec)>($r4, r1);

        goto label4;

     label3:
        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void clearMagnificationSpec(android.view.SurfaceControl$Transaction)>($r2);

     label4:
        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: void apply()>();

        return;
    }

    void applySurfaceChangesTransaction()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1, $r12, $r21;
        java.util.LinkedList $r2, $r18, $r27;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, i12, $i13, $i14;
        com.android.server.wm.DisplayPolicy $r3, $r5;
        java.util.function.Consumer $r4, $r8;
        com.android.server.wm.InsetsStateController $r6, $r9;
        com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState $r7, $r11, $r13, $r14, $r15;
        com.android.server.wm.ImeInsetsSourceProvider $r10;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, $z7;
        float $f0;
        android.hardware.display.DisplayManagerInternal $r16;
        com.android.server.wm.WallpaperController $r17, $r23;
        java.lang.Object $r19;
        com.android.server.wm.ActivityRecord $r20;
        com.android.server.wm.WallpaperVisibilityListeners $r22;
        java.lang.Throwable $r24, $r25;
        com.android.server.wm.WindowSurfacePlacer r26;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r26 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $r2 = r0.<com.android.server.wm.DisplayContent: java.util.LinkedList mTmpUpdateAllDrawn>;

        virtualinvoke $r2.<java.util.LinkedList: void clear()>();

        i12 = 0;

     label01:
        i12 = i12 + 1;

        if i12 <= 6 goto label02;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Animation repeat aborted after too many iterations");

        specialinvoke r0.<com.android.server.wm.DisplayContent: void clearLayoutNeeded()>();

        goto label12;

     label02:
        $i0 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label03;

        $r23 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r23.<com.android.server.wm.WallpaperController: void adjustWallpaperWindows()>();

     label03:
        $i2 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label04;

        $z4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateOrientation()>();

        if $z4 == 0 goto label04;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label04:
        $i13 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i14 = $i13 & 1;

        if $i14 == 0 goto label05;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label05:
        if i12 >= 4 goto label08;

        if i12 != 1 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void performLayout(boolean,boolean)>(z5, 0);

        goto label09;

     label08:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Layout repeat skipped after too many iterations");

     label09:
        r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = 0;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "applyPostLayoutPolicy");

     label10:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: void beginPostLayoutPolicyLw()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mApplyPostLayoutPolicy>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r4, 1);

        $i5 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $i6 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: int finishPostLayoutPolicyLw()>();

        $i7 = $i5 | $i6;

        r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i7;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        virtualinvoke $r6.<com.android.server.wm.InsetsStateController: void onPostLayout()>();

        $i8 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        if $i8 != 0 goto label01;

     label12:
        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        virtualinvoke $r7.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: void reset()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "applyWindowSurfaceChanges");

     label13:
        $r8 = r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mApplySurfaceChangesTransaction>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r8, 1);

     label14:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void prepareSurfaces()>();

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.InsetsStateController: com.android.server.wm.ImeInsetsSourceProvider getImeSourceProvider()>();

        virtualinvoke $r10.<com.android.server.wm.ImeInsetsSourceProvider: void checkShowImePostLayout()>();

        $r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z0 = $r11.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean displayHasContent>;

        r0.<com.android.server.wm.DisplayContent: boolean mLastHasContent> = $z0;

        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r16 = $r12.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i10 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $z2 = r0.<com.android.server.wm.DisplayContent: boolean mLastHasContent>;

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $f0 = $r13.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: float preferredRefreshRate>;

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $i9 = $r14.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: int preferredModeId>;

        $r15 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z1 = $r15.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean preferMinimalPostProcessing>;

        virtualinvoke $r16.<android.hardware.display.DisplayManagerInternal: void setDisplayProperties(int,boolean,float,int,boolean,boolean)>($i10, $z2, $f0, $i9, $z1, 1);

        $r17 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        z6 = virtualinvoke $r17.<com.android.server.wm.WallpaperController: boolean isWallpaperVisible()>();

        $z3 = r0.<com.android.server.wm.DisplayContent: boolean mLastWallpaperVisible>;

        if z6 == $z3 goto label15;

        r0.<com.android.server.wm.DisplayContent: boolean mLastWallpaperVisible> = z6;

        $r21 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r22 = $r21.<com.android.server.wm.WindowManagerService: com.android.server.wm.WallpaperVisibilityListeners mWallpaperVisibilityListeners>;

        virtualinvoke $r22.<com.android.server.wm.WallpaperVisibilityListeners: void notifyWallpaperVisibilityChanged(com.android.server.wm.DisplayContent)>(r0);

     label15:
        $r27 = r0.<com.android.server.wm.DisplayContent: java.util.LinkedList mTmpUpdateAllDrawn>;

        $z7 = virtualinvoke $r27.<java.util.LinkedList: boolean isEmpty()>();

        if $z7 != 0 goto label16;

        $r18 = r0.<com.android.server.wm.DisplayContent: java.util.LinkedList mTmpUpdateAllDrawn>;

        $r19 = virtualinvoke $r18.<java.util.LinkedList: java.lang.Object removeLast()>();

        $r20 = (com.android.server.wm.ActivityRecord) $r19;

        virtualinvoke $r20.<com.android.server.wm.ActivityRecord: void updateAllDrawn()>();

        goto label15;

     label16:
        return;

     label17:
        $r24 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r24;

     label18:
        $r25 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r25;

        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label17;
    }

    void assignChildLayers(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.DisplayContent$WindowContainers $r2, $r4;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r3, $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$WindowContainers mWindowContainers>;

        virtualinvoke $r2.<com.android.server.wm.DisplayContent$WindowContainers: void assignLayer(android.view.SurfaceControl$Transaction,int)>(r1, 0);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent$NonAppWindowContainers: void assignLayer(android.view.SurfaceControl$Transaction,int)>(r1, 1);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$WindowContainers mWindowContainers>;

        virtualinvoke $r4.<com.android.server.wm.DisplayContent$WindowContainers: void assignChildLayers(android.view.SurfaceControl$Transaction)>(r1);

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        virtualinvoke $r5.<com.android.server.wm.DisplayContent$NonAppWindowContainers: void assignChildLayers(android.view.SurfaceControl$Transaction)>(r1);

        return;
    }

    void assignRelativeLayerForImeTargetChild(android.view.SurfaceControl$Transaction, com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.WindowContainer r2;
        com.android.server.wm.DisplayContent$ImeContainer $r3, $r4;
        android.view.SurfaceControl $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: com.android.server.wm.WindowContainer;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent$ImeContainer: void setNeedsLayer()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent$ImeContainer: android.view.SurfaceControl getSurfaceControl()>();

        virtualinvoke r2.<com.android.server.wm.WindowContainer: void assignRelativeLayer(android.view.SurfaceControl$Transaction,android.view.SurfaceControl,int)>(r1, $r5, 1);

        return;
    }

    void assignStackOrdering()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r1;
        android.view.SurfaceControl$Transaction $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: void assignStackOrdering(android.view.SurfaceControl$Transaction)>($r2);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void assignWindowLayers(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "assignWindowLayers");

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void assignChildLayers(android.view.SurfaceControl$Transaction)>($r1);

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label1:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void scheduleAnimation()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;
    }

    com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        android.view.DisplayCutout $r1;
        com.android.server.wm.utils.RotationCache $r2;
        java.lang.Object $r3;
        com.android.server.wm.utils.WmDisplayCutout $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.RotationCache mDisplayCutoutCache>;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayCutout mInitialDisplayCutout>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.utils.RotationCache: java.lang.Object getOrCompute(java.lang.Object,int)>($r1, i0);

        $r4 = (com.android.server.wm.utils.WmDisplayCutout) $r3;

        return $r4;
    }

    boolean calculateSystemGestureExclusion(android.graphics.Region, android.graphics.Region)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Region r1, r2, r3, r6, r7;
        android.graphics.Rect r4, r5;
        int[] r8;
        int i0, $i1, $i2, $i3, i4, i5;
        com.android.server.wm.DisplayFrames $r9, $r10;
        com.android.server.wm.InsetsStateController $r11, $r14;
        com.android.server.wm.InsetsSourceProvider $r12, $r15;
        android.view.InsetsSource $r13, $r16;
        com.android.server.wm._$$Lambda$DisplayContent$BvG_N_oQ9idqqb6Bo2x0dq7gI5g $r17;
        boolean z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Region;

        r2 := @parameter1: android.graphics.Region;

        virtualinvoke r1.<android.graphics.Region: void setEmpty()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.Region: void setEmpty()>();

     label1:
        r3 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $i2 = $r9.<com.android.server.wm.DisplayFrames: int mDisplayWidth>;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $i1 = $r10.<com.android.server.wm.DisplayFrames: int mDisplayHeight>;

        virtualinvoke r3.<android.graphics.Region: boolean set(int,int,int,int)>(0, 0, $i2, $i1);

        $r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.InsetsStateController: com.android.server.wm.InsetsSourceProvider getSourceProvider(int)>(5);

        $r13 = virtualinvoke $r12.<com.android.server.wm.InsetsSourceProvider: android.view.InsetsSource getSource()>();

        r4 = virtualinvoke $r13.<android.view.InsetsSource: android.graphics.Rect getFrame()>();

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.InsetsStateController: com.android.server.wm.InsetsSourceProvider getSourceProvider(int)>(6);

        $r16 = virtualinvoke $r15.<com.android.server.wm.InsetsSourceProvider: android.view.InsetsSource getSource()>();

        r5 = virtualinvoke $r16.<android.view.InsetsSource: android.graphics.Rect getFrame()>();

        r6 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r7 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        r8 = newarray (int)[2];

        i4 = r0.<com.android.server.wm.DisplayContent: int mSystemGestureExclusionLimit>;

        r8[0] = i4;

        r8[1] = i4;

        $r17 = new com.android.server.wm._$$Lambda$DisplayContent$BvG_N_oQ9idqqb6Bo2x0dq7gI5g;

        specialinvoke $r17.<com.android.server.wm._$$Lambda$DisplayContent$BvG_N_oQ9idqqb6Bo2x0dq7gI5g: void <init>(com.android.server.wm.DisplayContent,android.graphics.Region,android.graphics.Region,android.graphics.Region,int[],android.graphics.Region,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>(r0, r3, r6, r7, r8, r1, r4, r5, r2);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r17, 1);

        virtualinvoke r7.<android.graphics.Region: void recycle()>();

        virtualinvoke r6.<android.graphics.Region: void recycle()>();

        virtualinvoke r3.<android.graphics.Region: void recycle()>();

        i0 = r8[0];

        i5 = r0.<com.android.server.wm.DisplayContent: int mSystemGestureExclusionLimit>;

        if i0 < i5 goto label3;

        $i3 = r8[1];

        if $i3 >= i5 goto label2;

        goto label3;

     label2:
        z1 = 0;

        goto label4;

     label3:
        z1 = 1;

     label4:
        return z1;
    }

    boolean canAddToastWindowForUid(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowState r1, $r4;
        com.android.server.wm._$$Lambda$DisplayContent$mRojqgB8byVtZRzyTl2qSRFPgIo $r2;
        com.android.server.wm._$$Lambda$DisplayContent$2VlyMN8z2sOPqE9_yf_z3_peRMI $r3;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r2 = new com.android.server.wm._$$Lambda$DisplayContent$mRojqgB8byVtZRzyTl2qSRFPgIo;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$DisplayContent$mRojqgB8byVtZRzyTl2qSRFPgIo: void <init>(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r2);

        z0 = 1;

        if r1 == null goto label1;

        return 1;

     label1:
        $r3 = new com.android.server.wm._$$Lambda$DisplayContent$2VlyMN8z2sOPqE9_yf_z3_peRMI;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$DisplayContent$2VlyMN8z2sOPqE9_yf_z3_peRMI: void <init>(int)>(i0);

        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r3);

        if $r4 != null goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    boolean canShowIme()
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, $z2, z3;
        com.android.server.wm.WindowManagerService $r1, $r3;
        com.android.server.wm.DisplayWindowSettings $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isTrusted()>();

        z3 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.DisplayWindowSettings: boolean shouldShowImeLocked(com.android.server.wm.DisplayContent)>(r0);

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z2 = $r3.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays>;

        if $z2 == 0 goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    com.android.server.wm.InsetsControlTarget computeImeControlTarget()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r2, $r3;
        boolean $z0;
        com.android.server.wm.InsetsControlTarget $r4;
        com.android.server.wm.DisplayContent$RemoteInsetsControlTarget $r5, $r6, $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean isImeControlledByApp()>();

        if $z0 != 0 goto label1;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

        if $r7 != null goto label2;

     label1:
        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        if r1 == null goto label3;

        $r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getWindow()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget getImeHostOrFallback(com.android.server.wm.WindowState)>($r3);

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

        if $r4 != $r5 goto label3;

     label2:
        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

        return $r6;

     label3:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        return $r2;
    }

    android.view.SurfaceControl computeImeParent()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.MagnificationSpec $r1;
        com.android.server.wm.DisplayContent$ImeContainer $r2;
        com.android.server.wm.WindowContainer $r3;
        android.view.SurfaceControl $r4, $r7;
        boolean $z0, z1;
        com.android.server.wm.WindowState $r5;
        com.android.server.wm.ActivityRecord $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.MagnificationSpec mMagnificationSpec>;

        if $r1 != null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label3;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isImeAttachedToApp()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $r6 = $r5.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.ActivityRecord: android.view.SurfaceControl getSurfaceControl()>();

        return $r7;

     label3:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent$ImeContainer: com.android.server.wm.WindowContainer getParent()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: android.view.SurfaceControl getSurfaceControl()>();

        return $r4;
    }

    com.android.server.wm.WindowState computeImeTarget(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.android.server.wm.WindowState r1, r5, r7, r8, r10, r11;
        java.util.function.Predicate $r2;
        com.android.server.wm.AppTransition $r3;
        android.view.WindowManager$LayoutParams $r4;
        int $i0;
        com.android.server.wm.ActivityRecord r6, r9;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        r6 = null;

        if r5 != null goto label02;

        if z0 == 0 goto label01;

        $z9 = r0.<com.android.server.wm.DisplayContent: boolean mInputMethodTargetWaitingAnim>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void setInputMethodTarget(com.android.server.wm.WindowState,boolean)>(null, $z9);

     label01:
        return null;

     label02:
        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $z1 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean canUpdateImeTarget()>();

        if $z1 != 0 goto label03;

        return r1;

     label03:
        r0.<com.android.server.wm.DisplayContent: boolean mUpdateImeTarget> = z0;

        $r2 = r0.<com.android.server.wm.DisplayContent: java.util.function.Predicate mComputeImeTargetPredicate>;

        r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r2);

        r8 = r7;

        if r7 == null goto label04;

        r8 = r7;

        $r4 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label04;

        r9 = r7.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        r8 = r7;

        if r9 == null goto label04;

        r10 = virtualinvoke r9.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState getImeTargetBelowWindow(com.android.server.wm.WindowState)>(r7);

        r8 = r7;

        if r10 == null goto label04;

        r8 = r10;

     label04:
        if r1 == null goto label05;

        $z5 = r1.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z5 != 0 goto label05;

        $z6 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z6 == 0 goto label05;

        $z7 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isClosing()>();

        if $z7 == 0 goto label05;

        $z8 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isActivityTypeHome()>();

        if $z8 != 0 goto label05;

        return r1;

     label05:
        if r8 != null goto label07;

        if z0 == 0 goto label06;

        $z4 = r0.<com.android.server.wm.DisplayContent: boolean mInputMethodTargetWaitingAnim>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void setInputMethodTarget(com.android.server.wm.WindowState,boolean)>(null, $z4);

     label06:
        return null;

     label07:
        if z0 == 0 goto label12;

        if r1 != null goto label08;

        goto label09;

     label08:
        r6 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

     label09:
        if r6 == null goto label11;

        r11 = null;

        $z2 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z2 == 0 goto label10;

        r11 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState getHighestAnimLayerWindow(com.android.server.wm.WindowState)>(r1);

     label10:
        if r11 == null goto label11;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z3 = virtualinvoke $r3.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z3 == 0 goto label11;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void setInputMethodTarget(com.android.server.wm.WindowState,boolean)>(r11, 1);

        return r11;

     label11:
        specialinvoke r0.<com.android.server.wm.DisplayContent: void setInputMethodTarget(com.android.server.wm.WindowState,boolean)>(r8, 0);

     label12:
        return r8;
    }

    void computeImeTargetIfNeeded(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r3;
        com.android.server.wm.WindowState r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if r2 == null goto label1;

        $r3 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r3 != r1 goto label1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

     label1:
        return;
    }

    android.view.DisplayInfo computeScreenConfiguration(android.content.res.Configuration, int)
    {
        com.android.server.wm.DisplayContent r0;
        android.content.res.Configuration r1, $r6;
        int i0, i1, $i2, $i3, i4, i5;
        android.graphics.Rect r3, $r5;
        android.app.WindowConfiguration $r4, $r10;
        com.android.server.wm.utils.WmDisplayCutout $r7;
        android.view.DisplayInfo $r8, $r9;
        boolean $z1, z2;
        android.util.DisplayMetrics $r11;
        float $f0;
        android.view.DisplayCutout r12;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        z2 = 1;

        if i0 == 1 goto label2;

        if i0 != 3 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label3;

        i4 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        goto label4;

     label3:
        i4 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

     label4:
        if z2 == 0 goto label5;

        i5 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        goto label6;

     label5:
        i5 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

     label6:
        $r4 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r5 = virtualinvoke $r4.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        virtualinvoke $r5.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i4, i5);

        $r6 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        i1 = $r6.<android.content.res.Configuration: int uiMode>;

        $r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>(i0);

        r12 = virtualinvoke $r7.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        specialinvoke r0.<com.android.server.wm.DisplayContent: void computeScreenAppConfiguration(android.content.res.Configuration,int,int,int,int,android.view.DisplayCutout)>(r1, i4, i5, i0, i1, r12);

        $r8 = new android.view.DisplayInfo;

        $r9 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        specialinvoke $r8.<android.view.DisplayInfo: void <init>(android.view.DisplayInfo)>($r9);

        $r8.<android.view.DisplayInfo: int rotation> = i0;

        $r8.<android.view.DisplayInfo: int logicalWidth> = i4;

        $r8.<android.view.DisplayInfo: int logicalHeight> = i5;

        $r10 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r3 = virtualinvoke $r10.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        $i2 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $r8.<android.view.DisplayInfo: int appWidth> = $i2;

        $i3 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $r8.<android.view.DisplayInfo: int appHeight> = $i3;

        $z1 = virtualinvoke r12.<android.view.DisplayCutout: boolean isEmpty()>();

        if $z1 == 0 goto label7;

        r12 = null;

        goto label7;

     label7:
        $r8.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout> = r12;

        $r11 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        $f0 = $r11.<android.util.DisplayMetrics: float density>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void computeSizeRangesAndScreenLayout(android.view.DisplayInfo,boolean,int,int,int,float,android.content.res.Configuration)>($r8, z2, i1, i4, i5, $f0, r1);

        return $r8;
    }

    void computeScreenConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.DisplayContent r0;
        android.content.res.Configuration r1;
        android.view.DisplayInfo r2;
        android.view.InputDevice[] r3;
        android.view.InputDevice r4;
        com.android.server.input.InputManagerService r5, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i24, i25, i28, i29, i30, $i32, $i33, $i35;
        android.graphics.Rect $r6, $r7;
        android.app.WindowConfiguration $r8, $r9, $r10;
        android.view.DisplayCutout $r11;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11;
        com.android.server.wm.WindowManagerService $r12, $r14, $r16, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r26;
        com.android.server.wm.DisplayPolicy $r13;
        com.android.server.policy.WindowManagerPolicy $r15;
        com.android.server.wm.WindowManagerService$H $r18, $r20;
        short s18;
        byte b19, b20, $b21, b22, b23, b26, b27, b31, b34;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.content.res.Configuration;

        $i0 = r1.<android.content.res.Configuration: int uiMode>;

        r2 = specialinvoke r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo updateDisplayAndOrientation(int,android.content.res.Configuration)>($i0, r1);

        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void calculateBounds(android.view.DisplayInfo,android.graphics.Rect)>(r2, $r6);

        $r8 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpBounds>;

        virtualinvoke $r8.<android.app.WindowConfiguration: void setBounds(android.graphics.Rect)>($r7);

        $r9 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getWindowingMode()>();

        virtualinvoke $r9.<android.app.WindowConfiguration: void setWindowingMode(int)>($i1);

        $r10 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $i2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getWindowingMode()>();

        virtualinvoke $r10.<android.app.WindowConfiguration: void setDisplayWindowingMode(int)>($i2);

        $i6 = r2.<android.view.DisplayInfo: int logicalWidth>;

        $i5 = r2.<android.view.DisplayInfo: int logicalHeight>;

        $i4 = r2.<android.view.DisplayInfo: int rotation>;

        $i3 = r1.<android.content.res.Configuration: int uiMode>;

        $r11 = r2.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void computeScreenAppConfiguration(android.content.res.Configuration,int,int,int,int,android.view.DisplayCutout)>(r1, $i6, $i5, $i4, $i3, $r11);

        i17 = r1.<android.content.res.Configuration: int screenLayout>;

        $i7 = r2.<android.view.DisplayInfo: int flags>;

        $i8 = $i7 & 16;

        if $i8 == 0 goto label01;

        s18 = 512;

        goto label02;

     label01:
        s18 = 256;

     label02:
        $i9 = i17 & -769;

        $i10 = $i9 | s18;

        r1.<android.content.res.Configuration: int screenLayout> = $i10;

        $i11 = r2.<android.view.DisplayInfo: int logicalDensityDpi>;

        r1.<android.content.res.Configuration: int densityDpi> = $i11;

        $z0 = virtualinvoke r2.<android.view.DisplayInfo: boolean isHdr()>();

        if $z0 == 0 goto label03;

        $r25 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z9 = virtualinvoke $r25.<com.android.server.wm.WindowManagerService: boolean hasHdrSupport()>();

        if $z9 == 0 goto label03;

        b19 = 8;

        goto label04;

     label03:
        b19 = 4;

     label04:
        $z10 = virtualinvoke r2.<android.view.DisplayInfo: boolean isWideColorGamut()>();

        if $z10 == 0 goto label05;

        $r24 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z8 = virtualinvoke $r24.<com.android.server.wm.WindowManagerService: boolean hasWideColorGamutSupport()>();

        if $z8 == 0 goto label05;

        b20 = 2;

        goto label06;

     label05:
        b20 = 1;

     label06:
        $b21 = b19 | b20;

        r1.<android.content.res.Configuration: int colorMode> = $b21;

        r1.<android.content.res.Configuration: int touchscreen> = 1;

        r1.<android.content.res.Configuration: int keyboard> = 1;

        r1.<android.content.res.Configuration: int navigation> = 1;

        b22 = 0;

        b23 = 0;

        $r26 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r27 = $r26.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        r3 = virtualinvoke $r27.<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()>();

        if r3 == null goto label07;

        i24 = lengthof r3;

        goto label08;

     label07:
        i24 = 0;

     label08:
        i25 = 0;

     label09:
        if i25 >= i24 goto label21;

        r4 = r3[i25];

        $z4 = virtualinvoke r4.<android.view.InputDevice: boolean isVirtual()>();

        if $z4 == 0 goto label10;

        b26 = b22;

        b27 = b23;

        goto label20;

     label10:
        $r22 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r5 = $r22.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i28 = virtualinvoke r4.<android.view.InputDevice: int getId()>();

        $i13 = r2.<android.view.DisplayInfo: int type>;

        if $i13 != 5 goto label11;

        i29 = 0;

        goto label12;

     label11:
        i29 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

     label12:
        $z5 = virtualinvoke r5.<com.android.server.input.InputManagerService: boolean canDispatchToDisplay(int,int)>(i28, i29);

        if $z5 != 0 goto label13;

        b26 = b22;

        b27 = b23;

        goto label20;

     label13:
        i30 = virtualinvoke r4.<android.view.InputDevice: int getSources()>();

        $z6 = virtualinvoke r4.<android.view.InputDevice: boolean isExternal()>();

        if $z6 == 0 goto label14;

        b31 = 2;

        goto label15;

     label14:
        b31 = 1;

     label15:
        $r23 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z7 = $r23.<com.android.server.wm.WindowManagerService: boolean mIsTouchDevice>;

        if $z7 == 0 goto label16;

        $i16 = i30 & 4098;

        if $i16 != 4098 goto label17;

        r1.<android.content.res.Configuration: int touchscreen> = 3;

        goto label17;

     label16:
        r1.<android.content.res.Configuration: int touchscreen> = 1;

     label17:
        $i32 = i30 & 65540;

        if $i32 != 65540 goto label18;

        r1.<android.content.res.Configuration: int navigation> = 3;

        b23 = b23 | b31;

        goto label19;

     label18:
        $i14 = i30 & 513;

        if $i14 != 513 goto label19;

        $i15 = r1.<android.content.res.Configuration: int navigation>;

        if $i15 != 1 goto label19;

        r1.<android.content.res.Configuration: int navigation> = 2;

        b23 = b23 | b31;

        goto label19;

     label19:
        b26 = b22;

        b27 = b23;

        $i33 = virtualinvoke r4.<android.view.InputDevice: int getKeyboardType()>();

        if $i33 != 2 goto label20;

        r1.<android.content.res.Configuration: int keyboard> = 2;

        b26 = b22 | b31;

        b27 = b23;

     label20:
        i25 = i25 + 1;

        b22 = b26;

        b23 = b27;

        goto label09;

     label21:
        b34 = b23;

        $i12 = r1.<android.content.res.Configuration: int navigation>;

        if $i12 != 1 goto label22;

        b34 = b23;

        $r21 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z3 = $r21.<com.android.server.wm.WindowManagerService: boolean mHasPermanentDpad>;

        if $z3 == 0 goto label22;

        r1.<android.content.res.Configuration: int navigation> = 2;

        b34 = b23 | 1;

     label22:
        $i35 = r1.<android.content.res.Configuration: int keyboard>;

        if $i35 == 1 goto label23;

        z11 = 1;

        goto label24;

     label23:
        z11 = 0;

     label24:
        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z1 = $r12.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable>;

        if z11 == $z1 goto label25;

        $r16 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r16.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable> = z11;

        $r17 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r18 = $r17.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r18.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(22);

        $r19 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r20 = $r19.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r20.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(22);

     label25:
        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r13.<com.android.server.wm.DisplayPolicy: void updateConfigurationAndScreenSizeDependentBehaviors()>();

        r1.<android.content.res.Configuration: int keyboardHidden> = 1;

        r1.<android.content.res.Configuration: int hardKeyboardHidden> = 1;

        r1.<android.content.res.Configuration: int navigationHidden> = 1;

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r15 = $r14.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r15.<com.android.server.policy.WindowManagerPolicy: void adjustConfigurationLw(android.content.res.Configuration,int,int)>(r1, b22, b34);

        return;
    }

    void configureDisplayPolicy()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, i9;
        com.android.server.wm.DisplayFrames r1;
        android.view.DisplayInfo r2;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.wm.DisplayRotation $r4;
        com.android.server.wm.utils.WmDisplayCutout $r5;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        i1 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        if i0 <= i1 goto label1;

        i6 = i1;

        i7 = i0;

        goto label2;

     label1:
        i6 = i0;

        i7 = i1;

     label2:
        i2 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        $i3 = i6 * 160;

        i8 = $i3 / i2;

        $i4 = i7 * 160;

        i9 = $i4 / i2;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: void updateConfigurationAndScreenSizeDependentBehaviors()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        virtualinvoke $r4.<com.android.server.wm.DisplayRotation: void configure(int,int,int,int)>(i0, i1, i8, i9);

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        r2 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i5 = r2.<android.view.DisplayInfo: int rotation>;

        $r5 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.utils.WmDisplayCutout calculateDisplayCutoutForRotation(int)>($i5);

        virtualinvoke r1.<com.android.server.wm.DisplayFrames: void onDisplayInfoUpdated(android.view.DisplayInfo,com.android.server.wm.utils.WmDisplayCutout)>(r2, $r5);

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean isNonDecorDisplayCloseToSquare(int,int,int)>(0, i0, i1);

        r0.<com.android.server.wm.DisplayContent: boolean mIgnoreRotationForApps> = $z0;

        return;
    }

    void continueUpdateImeTarget()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 = r0.<com.android.server.wm.DisplayContent: int mDeferUpdateImeTargetCount>;

        if i0 != 0 goto label1;

        return;

     label1:
        i1 = i0 + -1;

        r0.<com.android.server.wm.DisplayContent: int mDeferUpdateImeTargetCount> = i1;

        if i1 != 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

     label2:
        return;
    }

    void continueUpdateOrientationForDiffOrienLaunchingApp()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord $r1;
        com.android.server.wm.DisplayRotation $r2, $r3;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getOrientation()>();

        $z0 = virtualinvoke $r2.<com.android.server.wm.DisplayRotation: boolean updateOrientation(int,boolean)>($i0, 0);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

        return;

     label2:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $z1 = virtualinvoke $r3.<com.android.server.wm.DisplayRotation: boolean isWaitingForRemoteRotation()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<com.android.server.wm.DisplayContent: void clearFixedRotationLaunchingApp()>();

        return;
    }

    void deferUpdateImeTarget()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDeferUpdateImeTargetCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.DisplayContent: int mDeferUpdateImeTargetCount> = $i1;

        return;
    }

    boolean destroyLeakedSurfaces()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm._$$Lambda$DisplayContent$cUrRhr9F2jovlTUmfY9boAvOD98 $r2;
        com.android.server.wm.WindowState $r3;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = null;

        $r2 = new com.android.server.wm._$$Lambda$DisplayContent$cUrRhr9F2jovlTUmfY9boAvOD98;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$DisplayContent$cUrRhr9F2jovlTUmfY9boAvOD98: void <init>(com.android.server.wm.DisplayContent)>(r0);

        z0 = 0;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r2, 0);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow>;

        if $r3 == null goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r10, $r28, $r33, $r45, $r59, $r61, $r65, $r67, $r71, $r73, $r77, $r79, $r83, $r85, $r92, $r98, $r99, r105, r107;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r4, $r11, $r22, $r29, $r42, $r56, $r62, $r68, $r74, $r80, $r89, $r94;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32;
        android.view.DisplayInfo $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        android.graphics.Region $r31, $r93;
        com.android.server.wm.WindowState $r34, $r35, $r36, $r103, r110;
        java.util.ArrayList $r37, $r46, $r86, $r87, $r100, $r101;
        com.android.server.wm.ActivityRecord $r38, $r39, $r96;
        com.android.server.wm.WallpaperController $r40;
        android.os.RemoteCallbackList $r41;
        com.android.server.wm.TaskDisplayArea $r47, $r48, $r49, r113, $r116;
        com.android.server.wm.PinnedStackController $r50;
        com.android.server.wm.DisplayFrames $r51;
        com.android.server.wm.DisplayPolicy $r52;
        com.android.server.wm.DisplayRotation $r53;
        com.android.server.wm.InputMonitor $r54;
        com.android.server.wm.InsetsStateController $r55;
        java.lang.Object $r88, $r102;
        com.android.server.wm.WindowToken r114;
        com.android.server.wm.ScreenRotationAnimation r115;
        com.android.server.wm.ActivityStack r117, r119, r121, r123, r125;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display: mDisplayId=");

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stacks=");

        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getStackCount()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean mSingleTaskInstance>;

        if $z1 == 0 goto label01;

        r105 = " mSingleTaskInstance";

        goto label02;

     label01:
        r105 = "";

     label02:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r107 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r107);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("init=");

        $i2 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i3 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $i4 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("dpi");

        $i6 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i5 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        if $i6 != $i5 goto label03;

        $i24 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        $i23 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        if $i24 != $i23 goto label03;

        $i26 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        $i25 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        if $i26 == $i25 goto label04;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" base=");

        $i27 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i27);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $i28 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i28);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $i29 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i29);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("dpi");

     label04:
        $z5 = r0.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled>;

        if $z5 == 0 goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(" noscale");

     label05:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" cur=");

        $r14 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i7 = $r14.<android.view.DisplayInfo: int logicalWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $r15 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i8 = $r15.<android.view.DisplayInfo: int logicalHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" app=");

        $r16 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i9 = $r16.<android.view.DisplayInfo: int appWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $r17 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i10 = $r17.<android.view.DisplayInfo: int appHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" rng=");

        $r18 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i11 = $r18.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $r19 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i12 = $r19.<android.view.DisplayInfo: int smallestNominalAppHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("-");

        $r20 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i13 = $r20.<android.view.DisplayInfo: int largestNominalAppWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("x");

        $r21 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i14 = $r21.<android.view.DisplayInfo: int largestNominalAppHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i14);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deferred=");

        $z2 = r0.<com.android.server.wm.DisplayContent: boolean mDeferredRemoval>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLayoutNeeded=");

        $z3 = r0.<com.android.server.wm.DisplayContent: boolean mLayoutNeeded>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mTouchExcludeRegion=");

        $r31 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mLayoutSeq=");

        $i15 = r0.<com.android.server.wm.DisplayContent: int mLayoutSeq>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mCurrentFocus=");

        $r34 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r34);

        $r36 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mLastFocus>;

        $r35 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r36 == $r35 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastFocus=");

        $r103 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mLastFocus>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r103);

     label06:
        $r37 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mLosingFocus>;

        $i16 = virtualinvoke $r37.<java.util.ArrayList: int size()>();

        if $i16 <= 0 goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows losing focus:");

        $r100 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mLosingFocus>;

        $i22 = virtualinvoke $r100.<java.util.ArrayList: int size()>();

        i30 = $i22 - 1;

     label07:
        if i30 < 0 goto label10;

        $r101 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mLosingFocus>;

        $r102 = virtualinvoke $r101.<java.util.ArrayList: java.lang.Object get(int)>(i30);

        r110 = (com.android.server.wm.WindowState) $r102;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Losing #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i30);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r110);

        if z0 == 0 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r110.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label09;

     label08:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label09:
        i30 = i30 + -1;

        goto label07;

     label10:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mFocusedApp=");

        $r38 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r38);

        $i17 = r0.<com.android.server.wm.DisplayContent: int mLastStatusBarVisibility>;

        if $i17 == 0 goto label11;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastStatusBarVisibility=0x");

        $i21 = r0.<com.android.server.wm.DisplayContent: int mLastStatusBarVisibility>;

        $r99 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i21);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r99);

     label11:
        $r39 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if $r39 == null goto label12;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mFixedRotationLaunchingApp=");

        $r96 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r96);

        $r98 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r98);

     label12:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r40 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r40.<com.android.server.wm.WallpaperController: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        $r41 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        $i18 = virtualinvoke $r41.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i18 <= 0 goto label13;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSystemGestureExclusion=");

        $r93 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusion>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r93);

     label13:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task display areas in top down Z order:");

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r45);

        $i19 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i31 = $i19 - 1;

     label14:
        if i31 < 0 goto label15;

        r113 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i31);

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r92 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r113.<com.android.server.wm.TaskDisplayArea: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, $r92, z0);

        i31 = i31 + -1;

        goto label14;

     label15:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r46 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $z4 = virtualinvoke $r46.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label17;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Exiting tokens:");

        $r86 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $i20 = virtualinvoke $r86.<java.util.ArrayList: int size()>();

        i32 = $i20 - 1;

     label16:
        if i32 < 0 goto label17;

        $r87 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $r88 = virtualinvoke $r87.<java.util.ArrayList: java.lang.Object get(int)>(i32);

        r114 = (com.android.server.wm.WindowToken) $r88;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Exiting #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i32);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r114);

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r114.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", z0);

        i32 = i32 + -1;

        goto label16;

     label17:
        r115 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

        if r115 == null goto label18;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  mScreenRotationAnimation:");

        virtualinvoke r115.<com.android.server.wm.ScreenRotationAnimation: void printTo(java.lang.String,java.io.PrintWriter)>(r107, r1);

        goto label19;

     label18:
        if z0 == 0 goto label19;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  no ScreenRotationAnimation ");

     label19:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r116 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r117 = virtualinvoke $r116.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootHomeTask()>();

        if r117 == null goto label20;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("homeStack=");

        $r83 = virtualinvoke r117.<com.android.server.wm.ActivityStack: java.lang.String getName()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r83);

        $r85 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r85);

     label20:
        $r47 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r119 = virtualinvoke $r47.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootPinnedTask()>();

        if r119 == null goto label21;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pinnedStack=");

        $r77 = virtualinvoke r119.<com.android.server.wm.ActivityStack: java.lang.String getName()>();

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r79);

     label21:
        $r48 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r121 = virtualinvoke $r48.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootSplitScreenPrimaryTask()>();

        if r121 == null goto label22;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitScreenPrimaryStack=");

        $r71 = virtualinvoke r121.<com.android.server.wm.ActivityStack: java.lang.String getName()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r73);

     label22:
        $r49 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r123 = virtualinvoke $r49.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStack(int,int)>(0, 3);

        if r123 == null goto label23;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recentsStack=");

        $r65 = virtualinvoke r123.<com.android.server.wm.ActivityStack: java.lang.String getName()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

     label23:
        r125 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getStack(int,int)>(0, 5);

        if r125 == null goto label24;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dreamStack=");

        $r59 = virtualinvoke r125.<com.android.server.wm.ActivityStack: java.lang.String getName()>();

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r61);

     label24:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r50 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        virtualinvoke $r50.<com.android.server.wm.PinnedStackController: void dump(java.lang.String,java.io.PrintWriter)>(r2, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r51 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        virtualinvoke $r51.<com.android.server.wm.DisplayFrames: void dump(java.lang.String,java.io.PrintWriter)>(r2, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r52 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r52.<com.android.server.wm.DisplayPolicy: void dump(java.lang.String,java.io.PrintWriter)>(r2, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r53 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        virtualinvoke $r53.<com.android.server.wm.DisplayRotation: void dump(java.lang.String,java.io.PrintWriter)>(r2, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r54 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r54.<com.android.server.wm.InputMonitor: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r55 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        virtualinvoke $r55.<com.android.server.wm.InsetsStateController: void dump(java.lang.String,java.io.PrintWriter)>(r2, r1);

        return;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long, int)
    {
        com.android.server.wm.DisplayContent r0;
        android.util.proto.ProtoOutputStream r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i10, i11, i12;
        com.android.server.wm.DisplayArea$Root $r2;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r3, $r16;
        android.view.DisplayInfo $r4;
        com.android.server.wm.DisplayFrames $r5;
        com.android.server.wm.AppTransition $r6;
        android.util.ArraySet $r7, $r8, $r10, $r13;
        boolean $z0, $z1, $z2;
        com.android.server.wm.TaskDisplayArea $r9;
        java.lang.Object $r11, $r14;
        com.android.server.wm.ActivityRecord $r12, $r15, r20, r22;
        com.android.server.wm.WindowContainer $r17;
        com.android.server.wm.WindowToken $r18;
        long l7, l9;
        com.android.server.wm.ScreenRotationAnimation r19;
        com.android.server.wm.ActivityStack r21;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l7 := @parameter1: long;

        i8 := @parameter2: int;

        if i8 != 2 goto label01;

        $z2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isVisible()>();

        if $z2 != 0 goto label01;

        return;

     label01:
        l9 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l7);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268033L, i8);

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i0);

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayArea$Root mRootDisplayArea>;

        virtualinvoke $r2.<com.android.server.wm.DisplayArea$Root: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268053L, i8);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        $i1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent$NonAppWindowContainers: int getChildCount()>();

        i10 = $i1 - 1;

     label02:
        if i10 < 0 goto label03;

        $r16 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        $r17 = virtualinvoke $r16.<com.android.server.wm.DisplayContent$NonAppWindowContainers: com.android.server.wm.WindowContainer getChildAt(int)>(i10);

        $r18 = (com.android.server.wm.WindowToken) $r17;

        virtualinvoke $r18.<com.android.server.wm.WindowToken: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 2246267895828L, i8);

        i10 = i10 + -1;

        goto label02;

     label03:
        $i2 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464265L, $i2);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke $r4.<android.view.DisplayInfo: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268042L);

        $i3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getRotation()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464267L, $i3);

        r19 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

        if r19 == null goto label04;

        virtualinvoke r19.<com.android.server.wm.ScreenRotationAnimation: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268044L);

     label04:
        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        virtualinvoke $r5.<com.android.server.wm.DisplayFrames: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268045L);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268048L);

        r20 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if r20 == null goto label05;

        virtualinvoke r20.<com.android.server.wm.ActivityRecord: void writeNameToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1138166333455L);

     label05:
        $r7 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $i4 = virtualinvoke $r7.<android.util.ArraySet: int size()>();

        i11 = $i4 - 1;

     label06:
        if i11 < 0 goto label07;

        $r13 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $r14 = virtualinvoke $r13.<android.util.ArraySet: java.lang.Object valueAt(int)>(i11);

        $r15 = (com.android.server.wm.ActivityRecord) $r14;

        virtualinvoke $r15.<com.android.server.wm.ActivityRecord: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 2246267895825L);

        i11 = i11 + -1;

        goto label06;

     label07:
        $r8 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $i5 = virtualinvoke $r8.<android.util.ArraySet: int size()>();

        i12 = $i5 - 1;

     label08:
        if i12 < 0 goto label09;

        $r10 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $r11 = virtualinvoke $r10.<android.util.ArraySet: java.lang.Object valueAt(int)>(i12);

        $r12 = (com.android.server.wm.ActivityRecord) $r11;

        virtualinvoke $r12.<com.android.server.wm.ActivityRecord: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 2246267895826L);

        i12 = i12 + -1;

        goto label08;

     label09:
        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mSingleTaskInstance>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366166L, $z0);

        r21 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r21 == null goto label11;

        $i6 = virtualinvoke r21.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464279L, $i6);

        $r9 = virtualinvoke r21.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r22 = virtualinvoke $r9.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getFocusedActivity()>();

        if r22 == null goto label10;

        virtualinvoke r22.<com.android.server.wm.ActivityRecord: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268056L);

     label10:
        goto label12;

     label11:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464279L, -1);

     label12:
        $z1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isReady()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366170L, $z1);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l9);

        return;
    }

    void dumpTokens(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        java.io.PrintWriter r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator r2;
        java.util.HashMap $r3, $r8;
        java.lang.StringBuilder $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7;
        java.util.Collection $r9;
        android.util.ArraySet $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r21;
        java.lang.Object $r18;
        com.android.server.wm.WindowToken r20;
        com.android.server.wm.UnknownAppVisibilityController $r22;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        $z1 = virtualinvoke $r3.<java.util.HashMap: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Display #");

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r18 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.android.server.wm.WindowToken) $r18;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r20);

        if z0 == 0 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r20.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", z0);

        goto label4;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label4:
        goto label2;

     label5:
        $r10 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z3 = virtualinvoke $r10.<android.util.ArraySet: boolean isEmpty()>();

        if $z3 == 0 goto label6;

        $r16 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $z4 = virtualinvoke $r16.<android.util.ArraySet: boolean isEmpty()>();

        if $z4 == 0 goto label6;

        $r17 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers>;

        $z5 = virtualinvoke $r17.<android.util.ArraySet: boolean isEmpty()>();

        if $z5 != 0 goto label9;

     label6:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r21 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $i3 = virtualinvoke $r21.<android.util.ArraySet: int size()>();

        if $i3 <= 0 goto label7;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mOpeningApps=");

        $r15 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r15);

     label7:
        $r11 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $i1 = virtualinvoke $r11.<android.util.ArraySet: int size()>();

        if $i1 <= 0 goto label8;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mClosingApps=");

        $r14 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r14);

     label8:
        $r12 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers>;

        $i2 = virtualinvoke $r12.<android.util.ArraySet: int size()>();

        if $i2 <= 0 goto label9;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mChangingApps=");

        $r13 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r13);

     label9:
        $r22 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        virtualinvoke $r22.<com.android.server.wm.UnknownAppVisibilityController: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        return;
    }

    void dumpWindowAnimators(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.DisplayContent r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        com.android.server.wm._$$Lambda$DisplayContent$Gs1I9c16qswnvvDSPXoEhteQcFM $r3;
        int[] $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r3 = new com.android.server.wm._$$Lambda$DisplayContent$Gs1I9c16qswnvvDSPXoEhteQcFM;

        $r4 = newarray (int)[1];

        specialinvoke $r3.<com.android.server.wm._$$Lambda$DisplayContent$Gs1I9c16qswnvvDSPXoEhteQcFM: void <init>(java.io.PrintWriter,java.lang.String,int[])>(r1, r2, $r4);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r3, 0);

        return;
    }

    void ensureActivitiesVisible(com.android.server.wm.ActivityRecord, int, boolean, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, i2;
        boolean z0, z1, $z2;
        com.android.server.wm.TaskDisplayArea $r1;
        java.lang.Throwable $r2;
        com.android.server.wm.ActivityRecord r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r3 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = r0.<com.android.server.wm.DisplayContent: boolean mInEnsureActivitiesVisible>;

        if $z2 == 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.DisplayContent: boolean mInEnsureActivitiesVisible> = 1;

     label2:
        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i2 = $i1 - 1;

     label3:
        if i2 < 0 goto label6;

     label4:
        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i2);

        virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r3, i0, z0, z1);

     label5:
        i2 = i2 + -1;

        goto label3;

     label6:
        r0.<com.android.server.wm.DisplayContent: boolean mInEnsureActivitiesVisible> = 0;

        return;

     label7:
        $r2 := @caughtexception;

        r0.<com.android.server.wm.DisplayContent: boolean mInEnsureActivitiesVisible> = 0;

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    void executeAppTransition()
    {
        com.android.server.wm.DisplayContent r0;
        java.lang.String r1, r2, $r8;
        long l0;
        com.android.server.wm.AppTransition $r3, $r4, $r7;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm.WindowSurfacePlacer $r6;
        int $i1;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        java.lang.Long $r11;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z0 == 0 goto label2;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z1 == 0 goto label1;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        l0 = (long) $i1;

        $r8 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r1;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r9[1] = $r11;

        $r9[2] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 1166381079, 4, null, $r9);

     label1:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r4.<com.android.server.wm.AppTransition: void setReady()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r6.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label2:
        return;
    }

    boolean fillsParent()
    {
        com.android.server.wm.DisplayContent r0;

        r0 := @this: com.android.server.wm.DisplayContent;

        return 1;
    }

    com.android.server.wm.WindowState findFocusedWindow()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        com.android.internal.util.ToBooleanFunction $r2;
        boolean $z1;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = null;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.internal.util.ToBooleanFunction mFindFocusedWindow>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>($r2, 1);

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow>;

        if r1 != null goto label2;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z1 == 0 goto label1;

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r3 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 2128604122, 0, null, $r3);

     label1:
        return null;

     label2:
        return r1;
    }

    com.android.server.wm.WindowState findFocusedWindowIfNeeded(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0;
        com.android.server.wm.WindowState r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = $r1.<com.android.server.wm.WindowManagerService: boolean mPerDisplayFocusEnabled>;

        if $z0 != 0 goto label2;

        if i0 != -1 goto label1;

        goto label2;

     label1:
        r2 = null;

        goto label3;

     label2:
        r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState findFocusedWindow()>();

     label3:
        return r2;
    }

    com.android.server.wm.WindowState findScrollCaptureTargetWindow(com.android.server.wm.WindowState, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r3;
        int i0;
        com.android.server.wm.DisplayContent$1 $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        $r2 = new com.android.server.wm.DisplayContent$1;

        specialinvoke $r2.<com.android.server.wm.DisplayContent$1: void <init>(com.android.server.wm.DisplayContent,com.android.server.wm.WindowState,int)>(r0, r1, i0);

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r2);

        return $r3;
    }

    com.android.server.wm.Task findTaskForResizePoint(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2;
        android.util.DisplayMetrics $r1;
        com.android.server.wm.DisplayContent$TaskForResizePointSearchResult $r2;
        com.android.server.wm.TaskDisplayArea $r3;
        com.android.server.wm.Task $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        i2 = staticinvoke <com.android.server.wm.WindowManagerService: int dipToPixel(int,android.util.DisplayMetrics)>(30, $r1);

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$TaskForResizePointSearchResult mTmpTaskForResizePointSearchResult>;

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $r4 = virtualinvoke $r2.<com.android.server.wm.DisplayContent$TaskForResizePointSearchResult: com.android.server.wm.Task process(com.android.server.wm.WindowContainer,int,int,int)>($r3, i0, i1, i2);

        return $r4;
    }

    void finishFixedRotationAnimationIfPossible()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.FixedRotationAnimationController r1;
        com.android.server.wm.DisplayRotation $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.FixedRotationAnimationController mFixedRotationAnimationController>;

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.DisplayRotation: boolean hasSeamlessRotatingWindow()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<com.android.server.wm.FixedRotationAnimationController: void show()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.FixedRotationAnimationController mFixedRotationAnimationController> = null;

     label1:
        return;
    }

    boolean forAllImeWindows(com.android.internal.util.ToBooleanFunction, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.internal.util.ToBooleanFunction r1;
        boolean z0, $z1;
        com.android.server.wm.DisplayContent$ImeContainer $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.DisplayContent$ImeContainer: boolean forAllWindowForce(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        return $z1;
    }

    com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord $r1;
        android.os.IBinder r2;
        com.android.server.wm.WindowToken r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r2 := @parameter0: android.os.IBinder;

        r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r2);

        if r3 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r3.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        return $r1;
    }

    int getCurrentOverrideConfigurationChanges()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mCurrentOverrideConfigurationChanges>;

        return $i0;
    }

    com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayAreaPolicy $r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayAreaPolicy mDisplayAreaPolicy>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayAreaPolicy: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(0);

        return $r2;
    }

    public android.view.Display getDisplay()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.Display $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        return $r1;
    }

    int getDisplayId()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        return $i0;
    }

    android.view.DisplayInfo getDisplayInfo()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.DisplayInfo $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        return $r1;
    }

    android.util.DisplayMetrics getDisplayMetrics()
    {
        com.android.server.wm.DisplayContent r0;
        android.util.DisplayMetrics $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        return $r1;
    }

    com.android.server.wm.DisplayPolicy getDisplayPolicy()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayPolicy $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        return $r1;
    }

    android.graphics.Point getDisplayPosition()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1;
        android.hardware.display.DisplayManagerInternal $r2;
        int $i0;
        android.graphics.Point $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r3 = virtualinvoke $r2.<android.hardware.display.DisplayManagerInternal: android.graphics.Point getDisplayPosition(int)>($i0);

        return $r3;
    }

    public com.android.server.wm.DisplayRotation getDisplayRotation()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayRotation $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        return $r1;
    }

    android.content.Context getDisplayUiContext()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayPolicy $r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: android.content.Context getSystemUiContext()>();

        return $r2;
    }

    com.android.server.wm.DockedStackDividerController getDockedDividerController()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DockedStackDividerController $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController mDividerControllerLocked>;

        return $r1;
    }

    com.android.server.wm.FixedRotationAnimationController getFixedRotationAnimationController()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.FixedRotationAnimationController $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.FixedRotationAnimationController mFixedRotationAnimationController>;

        return $r1;
    }

    com.android.server.wm.ActivityStack getFocusedStack()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityStack r1;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        r1 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r1 == null goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.WindowContainer getImeContainer()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$ImeContainer $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ImeContainer mImeWindowsContainers>;

        return $r1;
    }

    com.android.server.wm.InsetsControlTarget getImeFallback()
    {
        com.android.server.wm.DisplayContent r0, r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.wm.InsetsControlTarget r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        r4 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: com.android.server.wm.WindowState getStatusBar()>();

        if r4 == null goto label1;

        goto label2;

     label1:
        r4 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

     label2:
        return r4;
    }

    com.android.server.wm.InsetsControlTarget getImeHostOrFallback(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0, $r3;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.InsetsControlTarget $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z0 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: boolean canShowIme()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget getImeFallback()>();

        return $r2;
    }

    com.android.server.wm.InputMonitor getInputMonitor()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.InputMonitor $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        return $r1;
    }

    com.android.server.wm.InsetsPolicy getInsetsPolicy()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.InsetsPolicy $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsPolicy mInsetsPolicy>;

        return $r1;
    }

    com.android.server.wm.InsetsStateController getInsetsStateController()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.InsetsStateController $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        return $r1;
    }

    boolean getLastHasContent()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mLastHasContent>;

        return $z0;
    }

    int getLastOrientation()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayRotation $r1;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.DisplayRotation: int getLastOrientation()>();

        return $i0;
    }

    android.graphics.Point getLocationInParentDisplay()
    {
        com.android.server.wm.DisplayContent r0, r9, r11;
        android.graphics.Point $r2, $r5, $r7;
        com.android.server.wm.WindowState $r3, $r8, r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        android.graphics.Rect $r4, $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow>;

        if $r3 == null goto label2;

        r9 = r0;

     label1:
        r10 = virtualinvoke r9.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        $i0 = $r2.<android.graphics.Point: int x>;

        $f0 = (float) $i0;

        $r4 = virtualinvoke r10.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i1 = $r4.<android.graphics.Rect: int left>;

        $f1 = (float) $i1;

        $r5 = virtualinvoke r9.<com.android.server.wm.DisplayContent: android.graphics.Point getLocationInParentWindow()>();

        $i2 = $r5.<android.graphics.Point: int x>;

        $f3 = (float) $i2;

        $f2 = r10.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f4 = $f3 * $f2;

        $f5 = $f4 + 0.5F;

        $f6 = $f1 + $f5;

        $f7 = $f0 + $f6;

        $i3 = (int) $f7;

        $r2.<android.graphics.Point: int x> = $i3;

        $i4 = $r2.<android.graphics.Point: int y>;

        $f8 = (float) $i4;

        $r6 = virtualinvoke r10.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i5 = $r6.<android.graphics.Rect: int top>;

        $f9 = (float) $i5;

        $r7 = virtualinvoke r9.<com.android.server.wm.DisplayContent: android.graphics.Point getLocationInParentWindow()>();

        $i6 = $r7.<android.graphics.Point: int y>;

        $f11 = (float) $i6;

        $f10 = r10.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f12 = $f11 * $f10;

        $f13 = $f12 + 0.5F;

        $f14 = $f9 + $f13;

        $f15 = $f8 + $f14;

        $i7 = (int) $f15;

        $r2.<android.graphics.Point: int y> = $i7;

        r11 = virtualinvoke r10.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r11 == null goto label2;

        r9 = r11;

        $r8 = virtualinvoke r11.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        if $r8 != null goto label1;

     label2:
        return $r2;
    }

    android.graphics.Point getLocationInParentWindow()
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Point $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.graphics.Point mLocationInParentWindow>;

        return $r1;
    }

    protected com.android.internal.logging.MetricsLogger getMetricsLogger()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.internal.logging.MetricsLogger $r1, $r2, $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        if $r1 != null goto label1;

        $r3 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r3.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.wm.DisplayContent: com.android.internal.logging.MetricsLogger mMetricsLogger> = $r3;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        return $r2;
    }

    java.lang.String getName()
    {
        com.android.server.wm.DisplayContent r0;
        java.lang.StringBuilder $r2;
        int $i0;
        android.view.DisplayInfo $r6;
        java.lang.String $r7, $r10;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display ");

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" name=\"");

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r7 = $r6.<android.view.DisplayInfo: java.lang.String name>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    int getNaturalOrientation()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0, $i1;
        byte b2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        if $i1 >= $i0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 2;

     label2:
        return b2;
    }

    int getOrientation()
    {
        com.android.server.wm.DisplayContent r0;
        long l0, l1;
        int i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.WindowManagerService $r1, $r5;
        com.android.server.wm.DisplayArea$Root $r2, $r3;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.policy.WindowManagerPolicy $r6;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;
        java.lang.Long $r9, $r10;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowContainer mLastOrientationSource> = null;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mIgnoreRotationForApps>;

        if $z0 == 0 goto label1;

        return 2;

     label1:
        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z1 = $r1.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 == 0 goto label3;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z2 = interfaceinvoke $r6.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardLocked()>();

        if $z2 == 0 goto label3;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label2;

        $i4 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        l0 = (long) $i4;

        $i5 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getLastOrientation()>();

        l1 = (long) $i5;

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r7[1] = $r10;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -1710206702, 5, null, $r7);

     label2:
        $i3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getLastOrientation()>();

        return $i3;

     label3:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayArea$Root mRootDisplayArea>;

        i2 = virtualinvoke $r2.<com.android.server.wm.DisplayArea$Root: int getOrientation()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayArea$Root mRootDisplayArea>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayArea$Root: com.android.server.wm.WindowContainer getLastOrientationSource()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowContainer mLastOrientationSource> = $r4;

        return i2;
    }

    android.view.SurfaceControl getOverlayLayer()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r1;
        android.view.SurfaceControl $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent$NonAppWindowContainers: android.view.SurfaceControl getSurfaceControl()>();

        return $r2;
    }

    com.android.server.wm.WindowState getParentWindow()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow>;

        return $r1;
    }

    com.android.server.wm.PinnedStackController getPinnedStackController()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.PinnedStackController $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        return $r1;
    }

    int getPreferredOptionsPanelGravity()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getRotation()>();

        $i2 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        if $i2 >= $i1 goto label3;

        if i0 == 1 goto label2;

        if i0 == 3 goto label1;

        return 81;

     label1:
        return 8388691;

     label2:
        return 85;

     label3:
        if i0 == 1 goto label6;

        if i0 == 2 goto label5;

        if i0 == 3 goto label4;

        return 85;

     label4:
        return 81;

     label5:
        return 8388691;

     label6:
        return 81;
    }

    android.util.IntArray getPresentUIDs()
    {
        com.android.server.wm.DisplayContent r0, $r6;
        com.android.internal.util.function.pooled.PooledConsumer r1;
        android.util.IntArray $r2, $r5, $r7;
        com.android.server.wm.'-$$Lambda$DisplayContent$olEtDzkJbp6PCECUFtRISV0LCpk' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        java.util.function.BiConsumer r8;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.util.IntArray mDisplayAccessUIDs>;

        virtualinvoke $r2.<android.util.IntArray: void clear()>();

        $r3 = <com.android.server.wm._$$Lambda$DisplayContent$olEtDzkJbp6PCECUFtRISV0LCpk: com.android.server.wm.'-$$Lambda$DisplayContent$olEtDzkJbp6PCECUFtRISV0LCpk' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r5 = r0.<com.android.server.wm.DisplayContent: android.util.IntArray mDisplayAccessUIDs>;

        r8 = (java.util.function.BiConsumer) $r3;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r8, $r4, $r5);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r6.<com.android.server.wm.DisplayContent: void forAllActivities(java.util.function.Consumer)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $r7 = r0.<com.android.server.wm.DisplayContent: android.util.IntArray mDisplayAccessUIDs>;

        return $r7;
    }

    long getProtoFieldId()
    {
        com.android.server.wm.DisplayContent r0;

        r0 := @this: com.android.server.wm.DisplayContent;

        return 1146756268035L;
    }

    int getRotation()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayRotation $r1;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.DisplayRotation: int getRotation()>();

        return $i0;
    }

    public com.android.server.wm.ScreenRotationAnimation getRotationAnimation()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ScreenRotationAnimation $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        return $r1;
    }

    android.view.SurfaceSession getSession()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.SurfaceSession $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceSession mSession>;

        return $r1;
    }

    void getStableRect(android.graphics.Rect)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Rect r1, $r3;
        com.android.server.wm.DisplayFrames $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $r3 = $r2.<com.android.server.wm.DisplayFrames: android.graphics.Rect mStable>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        return;
    }

    com.android.server.wm.ActivityStack getStack(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, i2;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i2);

        r1 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStack(int)>(i0);

        if r1 == null goto label2;

        return r1;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.ActivityStack getStack(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, i3;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        r1 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStack(int,int)>(i0, i1);

        if r1 == null goto label2;

        return r1;

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        return null;
    }

    protected int getStackCount()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0, $i1, i2, i3;
        com.android.server.wm.TaskDisplayArea $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i2 = 0;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        $i1 = virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i2 = i2 + $i1;

        i3 = i3 + -1;

        goto label1;

     label2:
        return i2;
    }

    protected com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.DisplayAreaPolicy $r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayAreaPolicy mDisplayAreaPolicy>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayAreaPolicy: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i0);

        return $r2;
    }

    protected int getTaskDisplayAreaCount()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayAreaPolicy $r1;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayAreaPolicy mDisplayAreaPolicy>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.DisplayAreaPolicy: int getTaskDisplayAreaCount()>();

        return $i0;
    }

    com.android.server.wm.ActivityStack getTopStack()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityStack r1;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        r1 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getTopStack()>();

        if r1 == null goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.WindowState getTouchableWinAtPointLocked(float, float)
    {
        com.android.server.wm.DisplayContent r0;
        float f0, f1;
        com.android.server.wm._$$Lambda$DisplayContent$UpcoNmXQIJX_lHKnFIxs4t_Pu24 $r1;
        int $i0, $i1;
        com.android.server.wm.WindowState $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = new com.android.server.wm._$$Lambda$DisplayContent$UpcoNmXQIJX_lHKnFIxs4t_Pu24;

        $i1 = (int) f0;

        $i0 = (int) f1;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$DisplayContent$UpcoNmXQIJX_lHKnFIxs4t_Pu24: void <init>(com.android.server.wm.DisplayContent,int,int)>(r0, $i1, $i0);

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r1);

        return $r2;
    }

    float getWindowCornerRadius()
    {
        com.android.server.wm.DisplayContent r0;
        float $f0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $f0 = r0.<com.android.server.wm.DisplayContent: float mWindowCornerRadius>;

        return $f0;
    }

    com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)
    {
        com.android.server.wm.DisplayContent r0;
        android.os.IBinder r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        com.android.server.wm.WindowToken $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.android.server.wm.WindowToken) $r3;

        return $r4;
    }

    int getWindowTokensWithoutSurfaceCount(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2, i3, i4;
        com.android.server.wm.WindowToken r2;
        java.util.ArrayList $r3;
        java.util.HashMap $r4;
        java.util.Collection $r5;
        java.lang.Object $r6;
        com.android.server.wm.ActivityRecord $r7;
        android.view.SurfaceControl $r8;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        i3 = 0;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i4 = $i1 - 1;

     label1:
        if i4 < 0 goto label6;

        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i4);

        r2 = (com.android.server.wm.WindowToken) $r6;

        $i2 = virtualinvoke r2.<com.android.server.wm.WindowToken: int getOwnerUid()>();

        if i0 == $i2 goto label2;

        goto label5;

     label2:
        $r7 = virtualinvoke r2.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if $r7 == null goto label3;

        goto label5;

     label3:
        $r8 = r2.<com.android.server.wm.WindowToken: android.view.SurfaceControl mSurfaceControl>;

        if $r8 == null goto label4;

        goto label5;

     label4:
        i3 = i3 + 1;

     label5:
        i4 = i4 + -1;

        goto label1;

     label6:
        return i3;
    }

    android.view.SurfaceControl getWindowingLayer()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$WindowContainers $r1;
        android.view.SurfaceControl $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$WindowContainers mWindowContainers>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent$WindowContainers: android.view.SurfaceControl getSurfaceControl()>();

        return $r2;
    }

    void handleActivitySizeCompatModeIfNeeded(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r3, $r7;
        com.android.server.wm.ActivityStack$ActivityState $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        com.android.server.wm.ActivityTaskManagerService $r4, $r8;
        com.android.server.wm.TaskChangeNotificationController $r5, $r9;
        com.android.server.wm.ActivityRecord$Token $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r2);

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getWindowingMode()>();

        if $i0 == 1 goto label1;

        goto label5;

     label1:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean inSizeCompatMode()>();

        if $z1 != 0 goto label3;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mLastCompatModeActivity>;

        if $r7 == null goto label2;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i2 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r9.<com.android.server.wm.TaskChangeNotificationController: void notifySizeCompatModeActivityChanged(int,android.os.IBinder)>($i2, null);

     label2:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mLastCompatModeActivity> = null;

        return;

     label3:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mLastCompatModeActivity>;

        if $r3 != r1 goto label4;

        return;

     label4:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mLastCompatModeActivity> = r1;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r6 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r5.<com.android.server.wm.TaskChangeNotificationController: void notifySizeCompatModeActivityChanged(int,android.os.IBinder)>($i1, $r6);

        return;

     label5:
        return;
    }

    void handleAnimatingStoppedAndTransition()
    {
        com.android.server.wm.DisplayContent r0;
        android.os.IBinder r1;
        com.android.server.wm.AppTransition $r2, $r10;
        java.util.List $r3, $r4, $r8;
        int $i0, $i2, $i3, i4;
        com.android.server.wm.WallpaperController $r5;
        com.android.server.wm.WindowManagerService $r7;
        byte $b1;
        java.lang.Object $r9;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r2.<com.android.server.wm.AppTransition: void setIdle()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: java.util.List mNoAnimationNotifyOnTransitionFinished>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        $r8 = r0.<com.android.server.wm.DisplayContent: java.util.List mNoAnimationNotifyOnTransitionFinished>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        r1 = (android.os.IBinder) $r9;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r10.<com.android.server.wm.AppTransition: void notifyAppTransitionFinishedLocked(android.os.IBinder)>(r1);

        i4 = i4 + -1;

        goto label1;

     label2:
        $r4 = r0.<com.android.server.wm.DisplayContent: java.util.List mNoAnimationNotifyOnTransitionFinished>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r5.<com.android.server.wm.WallpaperController: void hideDeferredWallpapersIfNeeded()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void onAppTransitionDone()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

        r0.<com.android.server.wm.DisplayContent: boolean mWallpaperMayChange> = 1;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r7.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

        $i2 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $b1 = 0 | 1;

        $i3 = $i2 | $b1;

        r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i3;

        return;
    }

    boolean handleCompleteDeferredRemoval()
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean handleCompleteDeferredRemoval()>();

        if z0 != 0 goto label1;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean mDeferredRemoval>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void removeImmediately()>();

        return 0;

     label1:
        return z0;
    }

    boolean handleTopActivityLaunchingInDifferentOrientation(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, $i1, $i2;
        com.android.server.wm.WindowContainer $r3;
        com.android.server.wm.PinnedStackController $r4;
        com.android.server.wm.AppTransition $r5, $r7;
        android.util.ArraySet $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        $z1 = <com.android.server.wm.WindowManagerService: boolean ENABLE_FIXED_ROTATION_TRANSFORM>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $z2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isFinishingFixedRotationTransform()>();

        if $z2 == 0 goto label02;

        return 0;

     label02:
        $z3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean hasFixedRotationTransform()>();

        if $z3 == 0 goto label03;

        return 1;

     label03:
        $z4 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        if $z4 == 0 goto label12;

        $z5 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z5 == 0 goto label04;

        goto label12;

     label04:
        if z0 == 0 goto label07;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z8 = virtualinvoke $r5.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z8 == 0 goto label06;

        $r6 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z9 = virtualinvoke $r6.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z9 != 0 goto label05;

        goto label06;

     label05:
        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i1 = virtualinvoke $r7.<com.android.server.wm.AppTransition: int getTransitFlags()>();

        $i2 = $i1 & 2;

        if $i2 == 0 goto label08;

        return 0;

     label06:
        return 0;

     label07:
        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r1 == $r2 goto label08;

        return 0;

     label08:
        i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int rotationForActivityInDifferentOrientation(com.android.server.wm.ActivityRecord)>(r1);

        if i0 != -1 goto label09;

        return 0;

     label09:
        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

        $z6 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: boolean matchParentBounds()>();

        if $z6 != 0 goto label10;

        return 0;

     label10:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        $z7 = virtualinvoke $r4.<com.android.server.wm.PinnedStackController: boolean isPipActiveOrWindowingModeChanging()>();

        if $z7 == 0 goto label11;

        return 0;

     label11:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingApp(com.android.server.wm.ActivityRecord,int)>(r1, i0);

        return 1;

     label12:
        return 0;
    }

    boolean handlesOrientationChangeFromDescendant()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayRotation $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayRotation: boolean respectAppRequestedOrientation()>();

        return $z0;
    }

    boolean hasAccess(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        android.view.Display $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $z0 = virtualinvoke $r1.<android.view.Display: boolean hasAccess(int)>(i0);

        return $z0;
    }

    boolean hasAlertWindowSurfaces()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1, $r3;
        android.util.ArraySet $r2, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.Session $r6;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $i0 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r6 = (com.android.server.wm.Session) $r5;

        $z0 = virtualinvoke $r6.<com.android.server.wm.Session: boolean hasAlertWindowSurfaces(com.android.server.wm.DisplayContent)>(r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    boolean hasSecureWindowOnScreen()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.'-$$Lambda$DisplayContent$7Z9gsguOLtfXssJUALjgEsOLZoE' $r1;
        com.android.server.wm.WindowState $r2;
        boolean z0;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = <com.android.server.wm._$$Lambda$DisplayContent$7Z9gsguOLtfXssJUALjgEsOLZoE: com.android.server.wm.'-$$Lambda$DisplayContent$7Z9gsguOLtfXssJUALjgEsOLZoE' INSTANCE>;

        r3 = (java.util.function.Predicate) $r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>(r3);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean hasTopFixedRotationLaunchingApp()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r3;
        com.android.server.wm.DisplayContent$FixedRotationTransitionListener $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$FixedRotationTransitionListener mFixedRotationTransitionListener>;

        $r3 = staticinvoke <com.android.server.wm.DisplayContent$FixedRotationTransitionListener: com.android.server.wm.ActivityRecord access$200(com.android.server.wm.DisplayContent$FixedRotationTransitionListener)>($r2);

        if r1 == $r3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void hideTransientBars()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0, $i1;
        com.android.server.wm.InsetsPolicy $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mLastStatusBarVisibility>;

        $i1 = $i0 & -201326593;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void statusBarVisibilityChanged(int)>($i1);

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsPolicy getInsetsPolicy()>();

        virtualinvoke $r1.<com.android.server.wm.InsetsPolicy: void hideTransient()>();

        return;
    }

    boolean ignoreRotationForApps()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mIgnoreRotationForApps>;

        return $z0;
    }

    void initializeDisplayBaseInfo()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.DisplayInfo $r2, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        android.hardware.display.DisplayManagerInternal r3;
        android.view.DisplayCutout $r12;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r3 = $r1.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        if r3 == null goto label1;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        r4 = virtualinvoke r3.<android.hardware.display.DisplayManagerInternal: android.view.DisplayInfo getDisplayInfo(int)>($i0);

        if r4 == null goto label1;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke $r2.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>(r4);

     label1:
        $r5 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r5.<android.view.DisplayInfo: int logicalWidth>;

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r6.<android.view.DisplayInfo: int logicalHeight>;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i3 = $r7.<android.view.DisplayInfo: int logicalDensityDpi>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetrics(int,int,int)>($i1, $i2, $i3);

        $r8 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i4 = $r8.<android.view.DisplayInfo: int logicalWidth>;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth> = $i4;

        $r9 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i5 = $r9.<android.view.DisplayInfo: int logicalHeight>;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight> = $i5;

        $r10 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i6 = $r10.<android.view.DisplayInfo: int logicalDensityDpi>;

        r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity> = $i6;

        $r11 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $r12 = $r11.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

        r0.<com.android.server.wm.DisplayContent: android.view.DisplayCutout mInitialDisplayCutout> = $r12;

        return;
    }

    boolean isAnyNonToastWindowVisibleForPid(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.'-$$Lambda$VYR_ckkt7281-Ti8Ps0f0Tx3ljY' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        java.lang.Integer $r5;
        boolean z0;
        java.util.function.BiPredicate r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r3 = <com.android.server.wm._$$Lambda$VYR_ckkt7281_Ti8Ps0f0Tx3ljY: com.android.server.wm.'-$$Lambda$VYR_ckkt7281-Ti8Ps0f0Tx3ljY' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/WindowState;");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (java.util.function.BiPredicate) $r3;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r4, $r5);

        r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        if r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isFixedRotationLaunchingApp(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if $r2 != r1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isImeAttachedToApp()
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, z2;
        com.android.server.wm.WindowState r1, $r3, $r4;
        com.android.server.wm.ActivityRecord $r2, $r5;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean isImeControlledByApp()>();

        z2 = 1;

        if z0 == 0 goto label1;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if r1 == null goto label1;

        $r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowState: int getWindowingMode()>();

        if $i0 != 1 goto label1;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $r5 = $r4.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.ActivityRecord: boolean matchParentBounds()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isInputMethodClientFocus(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i3;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.Session $r2, $r3;
        boolean z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(0);

        if r1 != null goto label1;

        return 0;

     label1:
        z1 = 0;

        $r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i2 = $r2.<com.android.server.wm.Session: int mUid>;

        if $i2 != i0 goto label2;

        z1 = 0;

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i3 = $r3.<com.android.server.wm.Session: int mPid>;

        if $i3 != i1 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    boolean isLayoutNeeded()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mLayoutNeeded>;

        return $z0;
    }

    boolean isNextTransitionForward()
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.AppTransition $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        i0 = virtualinvoke $r1.<com.android.server.wm.AppTransition: int getAppTransition()>();

        if i0 == 6 goto label2;

        if i0 == 8 goto label2;

        if i0 != 10 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isPrivate()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.Display $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r1.<android.view.Display: int getFlags()>();

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isReady()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = $r1.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean mDisplayReady>;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isRemoved()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mRemoved>;

        return $z0;
    }

    boolean isRemoving()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mRemoving>;

        return $z0;
    }

    boolean isSingleTaskInstance()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mSingleTaskInstance>;

        return $z0;
    }

    boolean isSleeping()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mSleeping>;

        return $z0;
    }

    boolean isTrusted()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.Display $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $z0 = virtualinvoke $r1.<android.view.Display: boolean isTrusted()>();

        return $z0;
    }

    boolean isUidPresent(int)
    {
        com.android.server.wm.DisplayContent r0, $r5;
        int i0;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.'-$$Lambda$QEISWTQzWbgxRMT5rMnIEzpsKpc' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        com.android.server.wm.ActivityRecord $r6;
        boolean z0;
        java.util.function.BiPredicate r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r2 = <com.android.server.wm._$$Lambda$QEISWTQzWbgxRMT5rMnIEzpsKpc: com.android.server.wm.'-$$Lambda$QEISWTQzWbgxRMT5rMnIEzpsKpc' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r7 = (java.util.function.BiPredicate) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r7, $r3, $r4);

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r1);

        if $r6 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        return z0;
    }

    boolean isVisible()
    {
        com.android.server.wm.DisplayContent r0;

        r0 := @this: com.android.server.wm.DisplayContent;

        return 1;
    }

    public void lambda$applyRotation$10$DisplayContent(boolean, com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, $z2;
        com.android.server.wm.WindowState r1;
        java.lang.String r2;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.wm.WindowState;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z1 == 0 goto label2;

        if z0 != 0 goto label2;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z2 == 0 goto label1;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 2083556954, 0, null, $r5);

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(1);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete> = 0;

        r1.<com.android.server.wm.WindowState: int mLastFreezeDuration> = 0;

     label2:
        r1.<com.android.server.wm.WindowState: boolean mReportOrientationChanged> = 1;

        return;
    }

    public void lambda$applyRotationAndFinishFixedRotation$26$DisplayContent(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void applyRotation(int,int)>(i0, i1);

        return;
    }

    public void lambda$calculateSystemGestureExclusion$24$DisplayContent(android.graphics.Region, android.graphics.Region, android.graphics.Region, int[], android.graphics.Region, android.graphics.Rect, android.graphics.Rect, android.graphics.Region, com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Region r1, r2, r3, r4, r7, r22;
        android.graphics.Rect r5, r6, r9;
        com.android.server.wm.WindowState r8;
        boolean $z0, $z1, $z2, $z4, $z6, $z7;
        android.view.WindowManager$LayoutParams $r10;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10;
        android.graphics.Region$Op $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.util.List $r12;
        float $f0;
        com.android.server.wm.WindowFrames $r13;
        int[] r21;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Region;

        r2 := @parameter1: android.graphics.Region;

        r3 := @parameter2: android.graphics.Region;

        r21 := @parameter3: int[];

        r4 := @parameter4: android.graphics.Region;

        r5 := @parameter5: android.graphics.Rect;

        r6 := @parameter6: android.graphics.Rect;

        r7 := @parameter7: android.graphics.Region;

        r8 := @parameter8: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r8.<com.android.server.wm.WindowState: boolean cantReceiveTouchInput()>();

        if $z0 != 0 goto label9;

        $z1 = virtualinvoke r8.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z1 == 0 goto label9;

        $r10 = virtualinvoke r8.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r10.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label8;

        $z2 = virtualinvoke r1.<android.graphics.Region: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        goto label9;

     label1:
        virtualinvoke r8.<com.android.server.wm.WindowState: void getEffectiveTouchableRegion(android.graphics.Region)>(r2);

        $r11 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r1, $r11);

        $z4 = virtualinvoke r8.<com.android.server.wm.WindowState: boolean isImplicitlyExcludingAllSystemGestures()>();

        if $z4 == 0 goto label2;

        virtualinvoke r3.<android.graphics.Region: boolean set(android.graphics.Region)>(r2);

        goto label3;

     label2:
        $r12 = virtualinvoke r8.<com.android.server.wm.WindowState: java.util.List getSystemGestureExclusion()>();

        staticinvoke <com.android.server.wm.utils.RegionUtils: void rectListToRegion(java.util.List,android.graphics.Region)>($r12, r3);

        $f0 = r8.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke r3.<android.graphics.Region: void scale(float)>($f0);

        $r13 = virtualinvoke r8.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames getWindowFrames()>();

        r9 = $r13.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i3 = r9.<android.graphics.Rect: int left>;

        $i2 = r9.<android.graphics.Rect: int top>;

        virtualinvoke r3.<android.graphics.Region: void translate(int,int)>($i3, $i2);

        $r14 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r3.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r2, $r14);

     label3:
        $i4 = r0.<com.android.server.wm.DisplayContent: int mLastDispatchedSystemUiVisibility>;

        $z6 = staticinvoke <com.android.server.wm.DisplayContent: boolean needsGestureExclusionRestrictions(com.android.server.wm.WindowState,int)>(r8, $i4);

        if $z6 == 0 goto label4;

        $i7 = r21[0];

        $i8 = staticinvoke <com.android.server.wm.DisplayContent: int addToGlobalAndConsumeLimit(android.graphics.Region,android.graphics.Region,android.graphics.Rect,int,com.android.server.wm.WindowState,int)>(r3, r4, r5, $i7, r8, 0);

        r21[0] = $i8;

        $i9 = r21[1];

        $i10 = staticinvoke <com.android.server.wm.DisplayContent: int addToGlobalAndConsumeLimit(android.graphics.Region,android.graphics.Region,android.graphics.Rect,int,com.android.server.wm.WindowState,int)>(r3, r4, r6, $i9, r8, 1);

        r21[1] = $i10;

        r22 = staticinvoke <android.graphics.Region: android.graphics.Region obtain(android.graphics.Region)>(r3);

        $r18 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r22.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r5, $r18);

        $r19 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r22.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r6, $r19);

        $r20 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r4.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r22, $r20);

        virtualinvoke r22.<android.graphics.Region: void recycle()>();

        goto label6;

     label4:
        $z7 = staticinvoke <com.android.server.wm.DisplayContent: boolean needsGestureExclusionRestrictions(com.android.server.wm.WindowState,int)>(r8, 0);

        if $z7 == 0 goto label5;

        staticinvoke <com.android.server.wm.DisplayContent: int addToGlobalAndConsumeLimit(android.graphics.Region,android.graphics.Region,android.graphics.Rect,int,com.android.server.wm.WindowState,int)>(r3, r4, r5, 2147483647, r8, 0);

        staticinvoke <com.android.server.wm.DisplayContent: int addToGlobalAndConsumeLimit(android.graphics.Region,android.graphics.Region,android.graphics.Rect,int,com.android.server.wm.WindowState,int)>(r3, r4, r6, 2147483647, r8, 1);

     label5:
        $r15 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r4.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r3, $r15);

     label6:
        if r7 == null goto label7;

        $r17 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r7.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r3, $r17);

     label7:
        $r16 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r2, $r16);

        return;

     label8:
        goto label9;

     label9:
        return;
    }

    public void lambda$destroyLeakedSurfaces$15$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowStateAnimator r2;
        com.android.server.wm.WindowSurfaceController $r3, $r13, $r25;
        com.android.server.wm.WindowManagerService $r4, $r37;
        com.android.server.wm.Session $r5, $r31, $r34;
        android.util.ArraySet $r6;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ActivityRecord $r7, $r8, $r16;
        java.lang.StringBuilder $r9, $r21;
        java.lang.String $r18, $r36, r41;
        java.lang.Object[] $r19;
        com.android.server.wm.ProtoLogGroup $r20;
        com.android.server.wm.WindowToken $r28;
        int $i1, $i2;
        java.util.ArrayList $r38;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r3 = r2.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r4.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $r5 = r2.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $z0 = virtualinvoke $r6.<android.util.ArraySet: boolean contains(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAKED SURFACE (session doesn\'t exist): ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r25 = r2.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r28 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pid=");

        $r31 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i1 = $r31.<com.android.server.wm.Session: int mPid>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $r34 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i2 = $r34.<com.android.server.wm.Session: int mUid>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r36 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r36);

        virtualinvoke r2.<com.android.server.wm.WindowStateAnimator: void destroySurface()>();

        $r37 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r38 = $r37.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        virtualinvoke $r38.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = r1;

        goto label4;

     label2:
        $r7 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r7 == null goto label4;

        $r8 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = virtualinvoke $r8.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z1 != 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAKED SURFACE (app token hidden): ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r13 = r2.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r16 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r18);

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z2 == 0 goto label3;

        r41 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r20 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r41;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r20, -1938839202, 0, null, $r19);

     label3:
        virtualinvoke r2.<com.android.server.wm.WindowStateAnimator: void destroySurface()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = r1;

     label4:
        return;
    }

    public boolean lambda$getTouchableWinAtPointLocked$12$DisplayContent(int, int, com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2, $i3, $i4;
        com.android.server.wm.WindowState r1;
        boolean z0, $z1, $z2, z3;
        android.view.WindowManager$LayoutParams $r2;
        android.graphics.Rect $r3, $r4;
        android.graphics.Region $r5, $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.WindowState;

        $r2 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i2 = $r2.<android.view.WindowManager$LayoutParams: int flags>;

        z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        z3 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $i3 = i2 & 16;

        if $i3 == 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<com.android.server.wm.WindowState: void getVisibleBounds(android.graphics.Rect)>($r3);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        $z1 = virtualinvoke $r4.<android.graphics.Rect: boolean contains(int,int)>(i0, i1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        virtualinvoke r1.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>($r5);

        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        $z2 = virtualinvoke $r6.<android.graphics.Region: boolean contains(int,int)>(i0, i1);

        if $z2 != 0 goto label4;

        $i4 = i2 & 40;

        if $i4 != 0 goto label5;

     label4:
        z3 = 1;

     label5:
        return z3;
    }

    public void lambda$new$0$DisplayContent()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget> = null;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$new$1$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowStateAnimator r2;
        com.android.server.wm.ActivityRecord r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $i0 = r2.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i0 != 3 goto label2;

        if r3 == null goto label1;

        $z1 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: boolean canShowWindows()>();

        if $z1 == 0 goto label2;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean performShowLocked()>();

        if $z0 == 0 goto label2;

        $i1 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i2 = $i1 | 8;

        r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i2;

     label2:
        return;
    }

    public void lambda$new$2$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r3;
        int i0, $i1, $i2;
        com.android.server.wm.WindowManagerService$H r2;
        com.android.server.wm.WindowManagerService $r4;
        android.view.WindowManager$LayoutParams $r5, $r7;
        boolean $z0;
        android.os.Message $r6;
        long $l3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow>;

        i0 = $r3.<com.android.server.wm.WindowState: int mOwnerUid>;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r2 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r5 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2005 goto label1;

        $i2 = r1.<com.android.server.wm.WindowState: int mOwnerUid>;

        if $i2 != i0 goto label1;

        $z0 = virtualinvoke r2.<android.os.Handler: boolean hasMessages(int,java.lang.Object)>(52, r1);

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(52, r1);

        $r7 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l3 = $r7.<android.view.WindowManager$LayoutParams: long hideTimeoutMilliseconds>;

        virtualinvoke r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r6, $l3);

     label1:
        return;
    }

    public boolean lambda$new$3$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        long l0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object[] $r1, $r4, $r6, $r8, $r11;
        com.android.server.wm.ProtoLogGroup $r2, $r5, $r7, $r9, $r12;
        android.view.WindowManager$LayoutParams $r3, $r10;
        int $i1, $i2, $i3;
        java.lang.Long $r13;
        java.lang.Boolean $r14;
        com.android.server.wm.WindowState r15;
        com.android.server.wm.ActivityRecord r16, r18;
        java.lang.String r17, r19, r20, r21, r22;

        r0 := @this: com.android.server.wm.DisplayContent;

        r15 := @parameter0: com.android.server.wm.WindowState;

        r16 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_enabled>;

        if $z1 == 0 goto label1;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

        $r10 = r15.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r10.<android.view.WindowManager$LayoutParams: int flags>;

        l0 = (long) $i3;

        z0 = virtualinvoke r15.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS>;

        $r11 = newarray (java.lang.Object)[3];

        $r11[0] = r17;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r11[2] = $r14;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 1358462645, 52, null, $r11);

     label1:
        $z2 = virtualinvoke r15.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z2 != 0 goto label2;

        return 0;

     label2:
        r18 = r15.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r16 != null goto label4;

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z6 == 0 goto label3;

        r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r19;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, -87705714, 0, null, $r8);

     label3:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = r15;

        return 1;

     label4:
        $z3 = virtualinvoke r16.<com.android.server.wm.ActivityRecord: boolean windowsAreFocusable()>();

        if $z3 != 0 goto label6;

        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z5 == 0 goto label5;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r20;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, 1430336882, 0, null, $r6);

     label5:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = r15;

        return 1;

     label6:
        if r18 == null goto label8;

        $r3 = r15.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 3 goto label8;

        $i2 = virtualinvoke r16.<com.android.server.wm.ActivityRecord: int compareTo(com.android.server.wm.WindowContainer)>(r18);

        if $i2 <= 0 goto label8;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z4 == 0 goto label7;

        r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r16);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r21;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, -809771899, 0, null, $r4);

     label7:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = null;

        return 1;

     label8:
        $z7 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z7 == 0 goto label9;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

        $r2 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r2, -415865166, 0, null, $r1);

     label9:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = r15;

        return 1;
    }

    public void lambda$new$4$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r2, $r12;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, z10, z11, $z12, z13;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.wm.DisplayFrames $r4;
        int $i0;
        com.android.server.wm.ActivityRecord $r5, $r13;
        android.graphics.Rect $r6;
        com.android.server.wm.InsetsStateController $r7;
        android.view.InsetsState $r8;
        java.util.ArrayList $r9;
        com.android.server.wm.WindowManagerService $r10;
        com.android.server.policy.WindowManagerPolicy $r11;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow>;

        if $r2 == null goto label01;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z9 = interfaceinvoke $r11.<com.android.server.policy.WindowManagerPolicy: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r1);

        if $z9 != 0 goto label02;

     label01:
        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z1 == 0 goto label03;

     label02:
        z10 = 1;

        goto label04;

     label03:
        z10 = 0;

     label04:
        z0 = r1.<com.android.server.wm.WindowState: boolean mBehindIme>;

        z11 = r0.<com.android.server.wm.DisplayContent: boolean mTmpWindowsBehindIme>;

        if z0 == z11 goto label05;

        r1.<com.android.server.wm.WindowState: boolean mBehindIme> = z11;

        $r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        $r8 = virtualinvoke $r7.<com.android.server.wm.InsetsStateController: android.view.InsetsState getRawInsetsState()>();

        $z7 = virtualinvoke $r8.<android.view.InsetsState: boolean getSourceOrDefaultVisibility(int)>(13);

        if $z7 == 0 goto label05;

        $r9 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinInsetsChanged>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label05:
        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if r1 != $r12 goto label06;

        r0.<com.android.server.wm.DisplayContent: boolean mTmpWindowsBehindIme> = 1;

     label06:
        if z10 == 0 goto label07;

        $z5 = r1.<com.android.server.wm.WindowState: boolean mHaveFrame>;

        if $z5 == 0 goto label07;

        $z6 = r1.<com.android.server.wm.WindowState: boolean mLayoutNeeded>;

        if $z6 == 0 goto label11;

     label07:
        $z12 = r1.<com.android.server.wm.WindowState: boolean mLayoutAttached>;

        if $z12 != 0 goto label11;

        $z2 = r0.<com.android.server.wm.DisplayContent: boolean mTmpInitial>;

        if $z2 == 0 goto label08;

        virtualinvoke r1.<com.android.server.wm.WindowState: void resetContentChanged()>();

     label08:
        r1.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 0;

        virtualinvoke r1.<com.android.server.wm.WindowState: void prelayout()>();

        z13 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isLaidOut()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: void layoutWindowLw(com.android.server.wm.WindowState,com.android.server.wm.WindowState,com.android.server.wm.DisplayFrames)>(r1, null, $r4);

        $i0 = r0.<com.android.server.wm.DisplayContent: int mLayoutSeq>;

        r1.<com.android.server.wm.WindowState: int mLayoutSeq> = $i0;

        $z3 = z13 ^ 1;

        if $z3 == 0 goto label10;

        $r6 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $z4 = virtualinvoke $r6.<android.graphics.Rect: boolean isEmpty()>();

        if $z4 != 0 goto label09;

        virtualinvoke r1.<com.android.server.wm.WindowState: void updateLastFrames()>();

     label09:
        virtualinvoke r1.<com.android.server.wm.WindowState: void updateLastInsetValues()>();

        virtualinvoke r1.<com.android.server.wm.WindowState: void updateLocationInParentDisplayIfNeeded()>();

     label10:
        $r13 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r13 == null goto label11;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r5.<com.android.server.wm.ActivityRecord: void layoutLetterbox(com.android.server.wm.WindowState)>(r1);

     label11:
        return;
    }

    public void lambda$new$5$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.wm.DisplayFrames $r5;
        com.android.server.wm.WindowManagerService $r6;
        com.android.server.policy.WindowManagerPolicy $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mLayoutAttached>;

        if $z0 == 0 goto label5;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow>;

        if $r2 == null goto label1;

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z4 = interfaceinvoke $r7.<com.android.server.policy.WindowManagerPolicy: boolean canBeHiddenByKeyguardLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r1);

        if $z4 == 0 goto label1;

        return;

     label1:
        $i0 = r1.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 == 8 goto label2;

        $z3 = r1.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z3 != 0 goto label3;

     label2:
        $z1 = r1.<com.android.server.wm.WindowState: boolean mHaveFrame>;

        if $z1 == 0 goto label3;

        $z2 = r1.<com.android.server.wm.WindowState: boolean mLayoutNeeded>;

        if $z2 == 0 goto label5;

     label3:
        $z5 = r0.<com.android.server.wm.DisplayContent: boolean mTmpInitial>;

        if $z5 == 0 goto label4;

        virtualinvoke r1.<com.android.server.wm.WindowState: void resetContentChanged()>();

     label4:
        r1.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 0;

        virtualinvoke r1.<com.android.server.wm.WindowState: void prelayout()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r4 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: void layoutWindowLw(com.android.server.wm.WindowState,com.android.server.wm.WindowState,com.android.server.wm.DisplayFrames)>(r1, $r4, $r5);

        $i1 = r0.<com.android.server.wm.DisplayContent: int mLayoutSeq>;

        r1.<com.android.server.wm.WindowState: int mLayoutSeq> = $i1;

     label5:
        return;
    }

    public boolean lambda$new$6$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean canBeImeTarget()>();

        return $z0;
    }

    public void lambda$new$7$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r4, $r5;
        com.android.server.wm.DisplayPolicy $r2;
        android.view.WindowManager$LayoutParams $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r3 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r4 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void applyPostLayoutPolicyLw(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams,com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r1, $r3, $r4, $r5);

        return;
    }

    public void lambda$new$8$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, z28, $z29;
        com.android.server.wm.WindowManagerService $r2, $r4, $r7, $r20;
        com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState $r3, $r5, $r6, $r16, $r19, $r23, $r26, $r27, $r28, r29, $r30, $r31, r32, $r36;
        com.android.server.wm.WindowManagerService$H $r8;
        android.os.Message $r9;
        java.util.LinkedList $r10, $r11;
        android.view.WindowManager$LayoutParams $r12, $r15, $r17, $r18, $r33;
        int $i0, $i1, $i2, $i3, i5, i7, $i8;
        com.android.server.wm.WallpaperController $r13, $r14;
        float $f0, $f1, $f2;
        byte $b4, $b6;
        com.android.server.policy.WindowManagerPolicy $r21;
        com.android.server.wm.DisplayPolicy $r22, $r34;
        com.android.server.wm.WindowSurfacePlacer r24;
        com.android.server.wm.RootWindowContainer r25;
        com.android.server.wm.RefreshRatePolicy $r35;
        com.android.server.wm.WindowStateAnimator r37;
        com.android.server.wm.ActivityRecord r38;
        java.util.ArrayList $r39;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r24 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $z2 = r1.<com.android.server.wm.WindowState: boolean mObscured>;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z1 = $r3.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean obscured>;

        if $z2 == $z1 goto label01;

        z18 = 1;

        goto label02;

     label01:
        z18 = 0;

     label02:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r25 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z3 = $r5.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean obscured>;

        r1.<com.android.server.wm.WindowState: boolean mObscured> = $z3;

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z4 = $r6.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean obscured>;

        if $z4 != 0 goto label08;

        z19 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if z19 == 0 goto label03;

        $z17 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isObscuringDisplay()>();

        if $z17 == 0 goto label03;

        r25.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mObscuringWindow> = r1;

        $r23 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $r23.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean obscured> = 1;

     label03:
        $r26 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z20 = $r26.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean obscured>;

        $r27 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z21 = $r27.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean syswin>;

        z0 = virtualinvoke r25.<com.android.server.wm.RootWindowContainer: boolean handleNotObscuredLocked(com.android.server.wm.WindowState,boolean,boolean)>(r1, $z20, $z21);

        $r28 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z22 = $r28.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean displayHasContent>;

        if $z22 != 0 goto label04;

        $r22 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $z14 = virtualinvoke $r22.<com.android.server.wm.DisplayPolicy: boolean isWindowExcludedFromContent(com.android.server.wm.WindowState)>(r1);

        if $z14 != 0 goto label04;

        r29 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z15 = r29.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean displayHasContent>;

        $z16 = $z15 | z0;

        r29.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean displayHasContent> = $z16;

     label04:
        $z23 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z23 == 0 goto label08;

        if z19 == 0 goto label08;

        $r15 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i5 = $r15.<android.view.WindowManager$LayoutParams: int type>;

        if i5 == 2008 goto label05;

        if i5 == 2010 goto label05;

        if i5 != 2040 goto label06;

        $r20 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r21 = $r20.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z13 = interfaceinvoke $r21.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardShowing()>();

        if $z13 == 0 goto label06;

     label05:
        $r30 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $r30.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean syswin> = 1;

     label06:
        $r31 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $f2 = $r31.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: float preferredRefreshRate>;

        $b6 = $f2 cmpl 0.0F;

        if $b6 != 0 goto label07;

        $r17 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f0 = $r17.<android.view.WindowManager$LayoutParams: float preferredRefreshRate>;

        $b4 = $f0 cmpl 0.0F;

        if $b4 == 0 goto label07;

        $r19 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $r18 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f1 = $r18.<android.view.WindowManager$LayoutParams: float preferredRefreshRate>;

        $r19.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: float preferredRefreshRate> = $f1;

     label07:
        r32 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $z24 = r32.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean preferMinimalPostProcessing>;

        $r33 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z25 = $r33.<android.view.WindowManager$LayoutParams: boolean preferMinimalPostProcessing>;

        $z26 = $z24 | $z25;

        r32.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: boolean preferMinimalPostProcessing> = $z26;

        $r34 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r35 = virtualinvoke $r34.<com.android.server.wm.DisplayPolicy: com.android.server.wm.RefreshRatePolicy getRefreshRatePolicy()>();

        i7 = virtualinvoke $r35.<com.android.server.wm.RefreshRatePolicy: int getPreferredModeId(com.android.server.wm.WindowState)>(r1);

        $r36 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $i8 = $r36.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: int preferredModeId>;

        if $i8 != 0 goto label08;

        if i7 == 0 goto label08;

        $r16 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState mTmpApplySurfaceChangesTransactionState>;

        $r16.<com.android.server.wm.DisplayContent$ApplySurfaceChangesTransactionState: int preferredModeId> = i7;

     label08:
        if z18 == 0 goto label09;

        $z11 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z11 == 0 goto label09;

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $z12 = virtualinvoke $r13.<com.android.server.wm.WallpaperController: boolean isWallpaperTarget(com.android.server.wm.WindowState)>(r1);

        if $z12 == 0 goto label09;

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r14.<com.android.server.wm.WallpaperController: void updateWallpaperVisibility()>();

     label09:
        virtualinvoke r1.<com.android.server.wm.WindowState: void handleWindowMovedIfNeeded()>();

        r37 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke r1.<com.android.server.wm.WindowState: void resetContentChanged()>();

        $z27 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z27 == 0 goto label10;

        z28 = virtualinvoke r37.<com.android.server.wm.WindowStateAnimator: boolean commitFinishDrawingLocked()>();

        $z10 = r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z10 == 0 goto label10;

        if z28 == 0 goto label10;

        $r12 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r12.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 1048576;

        if $i1 == 0 goto label10;

        r0.<com.android.server.wm.DisplayContent: boolean mWallpaperMayChange> = 1;

        $i2 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i3 = $i2 | 4;

        r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i3;

     label10:
        r38 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r38 == null goto label11;

        virtualinvoke r38.<com.android.server.wm.ActivityRecord: void updateLetterboxSurface(com.android.server.wm.WindowState)>(r1);

        $z7 = virtualinvoke r38.<com.android.server.wm.ActivityRecord: boolean updateDrawnWindowStates(com.android.server.wm.WindowState)>(r1);

        if $z7 == 0 goto label11;

        $r10 = r0.<com.android.server.wm.DisplayContent: java.util.LinkedList mTmpUpdateAllDrawn>;

        $z8 = virtualinvoke $r10.<java.util.LinkedList: boolean contains(java.lang.Object)>(r38);

        if $z8 != 0 goto label11;

        $r11 = r0.<com.android.server.wm.DisplayContent: java.util.LinkedList mTmpUpdateAllDrawn>;

        virtualinvoke $r11.<java.util.LinkedList: boolean add(java.lang.Object)>(r38);

     label11:
        $r39 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mLosingFocus>;

        $z29 = virtualinvoke $r39.<java.util.ArrayList: boolean isEmpty()>();

        if $z29 != 0 goto label12;

        $z5 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z5 == 0 goto label12;

        $z6 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z6 == 0 goto label12;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(3, r0);

        virtualinvoke $r9.<android.os.Message: void sendToTarget()>();

     label12:
        virtualinvoke r1.<com.android.server.wm.WindowState: void updateResizingWindowIfNeeded()>();

        return;
    }

    public void lambda$onWindowFreezeTimeout$22$DisplayContent(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1;
        boolean $z0;
        long $l0, $l1, $l2;
        com.android.server.wm.WindowManagerService $r3;
        int $i3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowState: void orientationChangeTimedOut()>();

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $l1 = $r3.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l2 = $l0 - $l1;

        $i3 = (int) $l2;

        r1.<com.android.server.wm.WindowState: int mLastFreezeDuration> = $i3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force clearing orientation change: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        return;
    }

    public boolean lambda$shouldWaitForSystemDecorWindowsOnBoot$19$DisplayContent(android.util.SparseBooleanArray, com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        android.util.SparseBooleanArray r1;
        com.android.server.wm.WindowState r2;
        boolean z0, $z1, $z2, $z3, z4;
        android.view.WindowManager$LayoutParams $r3, $r6;
        com.android.server.wm.WindowManagerService $r4;
        com.android.server.policy.WindowManagerPolicy $r5;
        int i0, $i1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.util.SparseBooleanArray;

        r2 := @parameter1: com.android.server.wm.WindowState;

        $z1 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z1 == 0 goto label1;

        $z3 = r2.<com.android.server.wm.WindowState: boolean mObscured>;

        if $z3 != 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        z0 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if z4 == 0 goto label3;

        if z0 != 0 goto label3;

        return 1;

     label3:
        if z0 == 0 goto label6;

        $r3 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if i0 == 1 goto label5;

        if i0 == 2013 goto label5;

        if i0 == 2021 goto label5;

        if i0 == 2040 goto label4;

        goto label6;

     label4:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z2 = interfaceinvoke $r5.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardDrawnLw()>();

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>(2040, $z2);

        goto label6;

     label5:
        $r6 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i1, 1);

     label6:
        return 0;
    }

    void layoutAndAssignWindowLayersIfNeeded()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1, $r2, $r4;
        boolean $z0;
        com.android.server.wm.InputMonitor $r3, $r6;
        com.android.server.wm.WindowSurfacePlacer $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r1.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(0);

     label1:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r3.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r5.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r6.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

        return;
    }

    android.view.SurfaceControl$Builder makeChildSurface(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm.WindowManagerService $r2;
        android.view.SurfaceControl$Builder $r3, $r5, $r7, r9;
        java.lang.String $r4;
        android.view.SurfaceControl $r6;
        android.view.SurfaceSession r8;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        if r1 == null goto label1;

        r8 = virtualinvoke r1.<com.android.server.wm.WindowContainer: android.view.SurfaceSession getSession()>();

        goto label2;

     label1:
        r8 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceSession getSession()>();

     label2:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Builder makeSurfaceBuilder(android.view.SurfaceSession)>(r8);

        r9 = virtualinvoke $r3.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()>();

        if r1 != null goto label3;

        return r9;

     label3:
        $r4 = virtualinvoke r1.<com.android.server.wm.WindowContainer: java.lang.String getName()>();

        $r5 = virtualinvoke r9.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>($r4);

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mSurfaceControl>;

        $r7 = virtualinvoke $r5.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>($r6);

        return $r7;
    }

    android.view.SurfaceControl$Builder makeOverlay()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.SurfaceSession $r1;
        com.android.server.wm.WindowManagerService $r2;
        android.view.SurfaceControl$Builder $r3, $r6;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r4;
        android.view.SurfaceControl $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceSession mSession>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Builder makeSurfaceBuilder(android.view.SurfaceSession)>($r1);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent$NonAppWindowContainers: android.view.SurfaceControl getSurfaceControl()>();

        $r6 = virtualinvoke $r3.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>($r5);

        return $r6;
    }

    void notifyLocationInParentDisplayChanged()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.'-$$Lambda$DisplayContent$Ei1gEKrsGOVbEpUtkye4DxvMrow' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = <com.android.server.wm._$$Lambda$DisplayContent$Ei1gEKrsGOVbEpUtkye4DxvMrow: com.android.server.wm.'-$$Lambda$DisplayContent$Ei1gEKrsGOVbEpUtkye4DxvMrow' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>(r2, 0);

        return;
    }

    boolean okToAnimate()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean okToAnimate(boolean)>(0);

        return $z0;
    }

    boolean okToAnimate(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0, $z1, z2, z3;
        int $i0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        z2 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean okToDisplay(boolean)>(z2);

        if $z0 == 0 goto label2;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i0 != 0 goto label1;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z1 = interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: boolean okToAnimate()>();

        if $z1 == 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean okToDisplay()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean okToDisplay(boolean)>(0);

        return $z0;
    }

    boolean okToDisplay(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1;
        android.view.DisplayInfo $r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r4;
        boolean $z2, $z3, $z4, z5, z6, z7;
        com.android.server.policy.WindowManagerPolicy $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        z5 := @parameter0: boolean;

        i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if i0 != 0 goto label4;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z2 = $r2.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z2 == 0 goto label1;

        if z5 == 0 goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z3 = $r3.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z3 == 0 goto label2;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z4 = interfaceinvoke $r5.<com.android.server.policy.WindowManagerPolicy: boolean isScreenOn()>();

        if $z4 == 0 goto label2;

        z6 = 1;

        goto label3;

     label2:
        z6 = 0;

     label3:
        return z6;

     label4:
        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r1.<android.view.DisplayInfo: int state>;

        if $i1 != 2 goto label5;

        z7 = 1;

        goto label6;

     label5:
        z7 = 0;

     label6:
        return z7;
    }

    void onAppTransitionDone()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r3;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0, $z1, $z2;
        com.android.server.wm.DisplayRotation $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onAppTransitionDone()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if r1 == null goto label1;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z1 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $z2 = virtualinvoke $r4.<com.android.server.wm.DisplayRotation: boolean isRotatingSeamlessly()>();

        if $z2 != 0 goto label1;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void clearFixedRotationLaunchingApp()>();

     label1:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2, $i3;
        android.content.res.Configuration $r1, $r2, $r6, r10;
        android.view.DisplayInfo $r3;
        com.android.internal.logging.MetricsLogger $r4;
        android.metrics.LogMaker $r5, $r7, $r9;
        java.lang.Integer $r8;
        com.android.server.wm.DisplayPolicy r11;
        com.android.server.wm.PinnedStackController r12;

        r0 := @this: com.android.server.wm.DisplayContent;

        r10 := @parameter0: android.content.res.Configuration;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void preOnConfigurationChanged()>();

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        i0 = $r1.<android.content.res.Configuration: int orientation>;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onConfigurationChanged(android.content.res.Configuration)>(r10);

        r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        if r11 == null goto label1;

        virtualinvoke r11.<com.android.server.wm.DisplayPolicy: void onConfigurationChanged()>();

     label1:
        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $i1 = $r2.<android.content.res.Configuration: int orientation>;

        if i0 == $i1 goto label2;

        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.internal.logging.MetricsLogger getMetricsLogger()>();

        $r5 = new android.metrics.LogMaker;

        specialinvoke $r5.<android.metrics.LogMaker: void <init>(int)>(1659);

        $r6 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $i2 = $r6.<android.content.res.Configuration: int orientation>;

        $r7 = virtualinvoke $r5.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>($i2);

        $i3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9 = virtualinvoke $r7.<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>(1660, $r8);

        virtualinvoke $r4.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r9);

     label2:
        r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController mPinnedStackControllerLocked>;

        if r12 == null goto label3;

        $r3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        virtualinvoke r12.<com.android.server.wm.PinnedStackController: void onDisplayInfoChanged(android.view.DisplayInfo)>($r3);

     label3:
        return;
    }

    boolean onDescendantOrientationChanged(android.os.IBinder, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z1, $z3;
        android.content.res.Configuration $r1, r6;
        com.android.server.wm.DisplayRotation $r2;
        com.android.server.wm.RootWindowContainer $r3;
        android.os.IBinder r4;
        com.android.server.wm.ConfigurationContainer r5;
        com.android.server.wm.ActivityRecord r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r4 := @parameter0: android.os.IBinder;

        r5 := @parameter1: com.android.server.wm.ConfigurationContainer;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        r6 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration updateOrientation(android.content.res.Configuration,android.os.IBinder,boolean)>($r1, r4, 0);

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        z0 = virtualinvoke $r2.<com.android.server.wm.DisplayRotation: boolean respectAppRequestedOrientation()>();

        if r6 != null goto label1;

        return z0;

     label1:
        if z0 == 0 goto label3;

        $z3 = r5 instanceof com.android.server.wm.ActivityRecord;

        if $z3 == 0 goto label3;

        r7 = (com.android.server.wm.ActivityRecord) r5;

        z1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateDisplayOverrideConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)>(r6, r7, 0, null);

        r7.<com.android.server.wm.ActivityRecord: boolean frozenBeforeDestroy> = 1;

        if z1 != 0 goto label2;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateDisplayOverrideConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)>(r6, null, 0, null);

     label4:
        return z0;
    }

    void onDescendantOverrideConfigurationChanged()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        return;
    }

    void onDisplayChanged()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i3;
        com.android.server.wm.ActivityTaskManagerInternal$SleepToken r1, $r8, $r10;
        android.graphics.Point $r2, $r4, $r5;
        android.view.Display $r3, $r6, $r7;
        com.android.server.wm.ActivityTaskManagerService $r9;
        com.android.server.wm.WindowManagerService $r11;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.graphics.Point mTmpDisplaySize>;

        virtualinvoke $r3.<android.view.Display: void getRealSize(android.graphics.Point)>($r2);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.Point mTmpDisplaySize>;

        $i3 = $r4.<android.graphics.Point: int x>;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Point mTmpDisplaySize>;

        $i2 = $r5.<android.graphics.Point: int y>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: int setBounds(int,int,int,int)>(0, 0, $i3, $i2);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateDisplayInfo()>();

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        i0 = virtualinvoke $r6.<android.view.Display: int getDisplayId()>();

        if i0 == 0 goto label2;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        i1 = virtualinvoke $r7.<android.view.Display: int getState()>();

        if i1 != 1 goto label1;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mOffToken>;

        if $r8 != null goto label1;

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerInternal$SleepToken acquireSleepToken(java.lang.String,int)>("Display-off", i0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mOffToken> = $r10;

        goto label2;

     label1:
        if i1 != 2 goto label2;

        r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mOffToken>;

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.wm.ActivityTaskManagerInternal$SleepToken: void release()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerInternal$SleepToken mOffToken> = null;

     label2:
        $r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r11.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        return;
    }

    void onDisplayChanged(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0, r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r1);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateSystemGestureExclusionLimit()>();

        return;
    }

    void onParentChanged(com.android.server.wm.ConfigurationContainer, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ConfigurationContainer r1, r2;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r3, $r5, $r8, $r10;
        int $i0, $i1;
        com.android.server.wm.WindowAnimator $r4;
        android.hardware.display.DisplayManagerInternal $r6, $r11;
        android.content.res.Configuration $r7;
        com.android.server.wm.DisplayWindowListenerController $r9;
        android.view.DisplayInfo $r12;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ConfigurationContainer;

        r2 := @parameter1: com.android.server.wm.ConfigurationContainer;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isReady()>();

        if $z0 != 0 goto label2;

        r0.<com.android.server.wm.DisplayContent: boolean mDisplayReady> = 1;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r4.<com.android.server.wm.WindowAnimator: void addDisplayLocked(int)>($i0);

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        if $r6 == null goto label1;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r12 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        virtualinvoke $r11.<android.hardware.display.DisplayManagerInternal: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)>($i1, $r12);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void configureDisplayPolicy()>();

     label1:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        $r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>($r7);

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        virtualinvoke $r9.<com.android.server.wm.DisplayWindowListenerController: void dispatchDisplayAdded(com.android.server.wm.DisplayContent)>(r0);

     label2:
        return;
    }

    public void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.DisplayContent r0;
        android.content.res.Configuration r1, r2;
        int i0, i1, $i2;
        android.app.WindowConfiguration $r3, $r4;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm.ActivityTaskManagerService $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.content.res.Configuration;

        r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $r3 = r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i0 = virtualinvoke $r3.<android.app.WindowConfiguration: int getRotation()>();

        $r4 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i1 = virtualinvoke $r4.<android.app.WindowConfiguration: int getRotation()>();

        if i0 == -1 goto label1;

        if i0 == i1 goto label1;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void applyRotationAndFinishFixedRotation(int,int)>(i0, i1);

     label1:
        $i2 = virtualinvoke r2.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r1);

        r0.<com.android.server.wm.DisplayContent: int mCurrentOverrideConfigurationChanges> = $i2;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>(r1);

        r0.<com.android.server.wm.DisplayContent: int mCurrentOverrideConfigurationChanges> = 0;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void setNewDisplayOverrideConfiguration(android.content.res.Configuration,com.android.server.wm.DisplayContent)>(r1, r0);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: void addWindowLayoutReasons(int)>(1);

        return;
    }

    void onWindowFreezeTimeout()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1, $r3;
        com.android.server.wm._$$Lambda$DisplayContent$GdYfLI7hkBs2XfGJkN6DbdzEs8U $r2;
        com.android.server.wm.WindowSurfacePlacer $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Window freeze timeout expired.");

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r1.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen> = 2;

        $r2 = new com.android.server.wm._$$Lambda$DisplayContent$GdYfLI7hkBs2XfGJkN6DbdzEs8U;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$DisplayContent$GdYfLI7hkBs2XfGJkN6DbdzEs8U: void <init>(com.android.server.wm.DisplayContent)>(r0);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r2, 1);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r4.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        return;
    }

    int performDisplayOverrideConfigUpdate(android.content.res.Configuration, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z2;
        int i0, $i1, $i3, $i4;
        android.content.res.Configuration $r1, $r2, $r3, $r9, $r14, r24, $r29;
        java.lang.String $r6, $r13;
        com.android.server.wm.ActivityTaskManagerService $r15, $r17, $r22;
        com.android.server.wm.AppWarnings $r16;
        com.android.server.wm.'-$$Lambda$ibmQVLjaQW2x74Wk8TcE0Og2MJM' $r18;
        android.app.ActivityManagerInternal $r19;
        java.lang.Integer $r20, $r21;
        com.android.server.wm.ActivityTaskManagerService$H $r23;
        android.os.Message r26;
        com.android.server.wm.WindowManagerService $r27;
        com.android.server.wm.DisplayWindowListenerController $r28;
        java.lang.StringBuilder r30;
        com.android.internal.util.function.TriConsumer r31;

        r0 := @this: com.android.server.wm.DisplayContent;

        r24 := @parameter0: android.content.res.Configuration;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTempConfig>;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        virtualinvoke $r1.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r2);

        $r3 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTempConfig>;

        i0 = virtualinvoke $r3.<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>(r24);

        if i0 == 0 goto label4;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override config changes=");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTempConfig>;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for displayId=");

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r13);

        $r14 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTempConfig>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>($r14);

        $i3 = i0 & 4096;

        if $i3 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label3;

        $i4 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i4 != 0 goto label3;

        $r15 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r16 = $r15.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.AppWarnings mAppWarnings>;

        virtualinvoke $r16.<com.android.server.wm.AppWarnings: void onDensityChanged()>();

        $r18 = <com.android.server.wm._$$Lambda$ibmQVLjaQW2x74Wk8TcE0Og2MJM: com.android.server.wm.'-$$Lambda$ibmQVLjaQW2x74Wk8TcE0Og2MJM' INSTANCE>;

        $r17 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r19 = $r17.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(24);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        r31 = (com.android.internal.util.function.TriConsumer) $r18;

        r26 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r31, $r19, $r20, $r21);

        $r22 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r23 = $r22.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        virtualinvoke $r23.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>(r26);

     label3:
        $r27 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r28 = $r27.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        $r29 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r28.<com.android.server.wm.DisplayWindowListenerController: void dispatchDisplayChanged(com.android.server.wm.DisplayContent,android.content.res.Configuration)>(r0, $r29);

     label4:
        return i0;
    }

    void performLayout(boolean, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "performLayout");

     label1:
        specialinvoke r0.<com.android.server.wm.DisplayContent: void performLayoutNoTrace(boolean,boolean)>(z0, z1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    boolean pointWithinAppWindow(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i3;
        int[] r1;
        com.android.internal.util.function.pooled.PooledConsumer r2;
        com.android.server.wm._$$Lambda$DisplayContent$n90JauAfTfQVesyRzx0_TX7s1LM $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        android.graphics.Rect $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = 1;

        r1 = newarray (int)[1];

        r1[0] = -1;

        $r3 = new com.android.server.wm._$$Lambda$DisplayContent$n90JauAfTfQVesyRzx0_TX7s1LM;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$DisplayContent$n90JauAfTfQVesyRzx0_TX7s1LM: void <init>(int[],int,int)>(r1, i0, i1);

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/WindowState;");

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>($r3, $r4, $r5);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>(r2, 1);

        interfaceinvoke r2.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $i2 = r1[0];

        if 1 > $i2 goto label1;

        $i3 = r1[0];

        if $i3 > 99 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void positionChildAt(int, com.android.server.wm.DisplayContent$DisplayChildWindowContainer, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer r1;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.DisplayContent$DisplayChildWindowContainer;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void positionDisplayAt(int,boolean)>(i0, z0);

        return;
    }

    volatile void positionChildAt(int, com.android.server.wm.WindowContainer, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowContainer r1;
        boolean z0;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.WindowContainer;

        z0 := @parameter2: boolean;

        $r2 = (com.android.server.wm.DisplayContent$DisplayChildWindowContainer) r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void positionChildAt(int,com.android.server.wm.DisplayContent$DisplayChildWindowContainer,boolean)>(i0, $r2, z0);

        return;
    }

    void positionDisplayAt(int, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        boolean z0;
        com.android.server.wm.WindowContainer $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowContainer getParent()>();

        virtualinvoke $r1.<com.android.server.wm.WindowContainer: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r0, z0);

        return;
    }

    void preOnConfigurationChanged()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.PinnedStackController $r1, $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        virtualinvoke $r2.<com.android.server.wm.PinnedStackController: void onConfigurationChanged()>();

     label1:
        return;
    }

    void prepareAppTransition(int, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(i0, z0, 0, 0);

        return;
    }

    void prepareAppTransition(int, boolean, int, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.AppTransition $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z2 = virtualinvoke $r1.<com.android.server.wm.AppTransition: boolean prepareAppTransitionLocked(int,boolean,int,boolean)>(i0, z0, i1, z1);

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean okToAnimate()>();

        if $z3 == 0 goto label1;

        r0.<com.android.server.wm.DisplayContent: boolean mSkipAppTransitionAnimation> = 0;

     label1:
        return;
    }

    void prepareFreezingTaskBounds()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: void prepareFreezingTaskBounds()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void prepareSurfaces()
    {
        com.android.server.wm.DisplayContent r0;
        java.lang.Throwable $r1;
        android.view.SurfaceControl$Transaction r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "prepareSurfaces");

     label1:
        r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        specialinvoke r0.<com.android.server.wm.WindowContainer: void prepareSurfaces()>();

        staticinvoke <android.view.SurfaceControl: void mergeToGlobalTransaction(android.view.SurfaceControl$Transaction)>(r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void reParentWindowToken(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.DisplayContent r0, r2;
        com.android.server.wm.WindowToken r1;
        com.android.server.wm.WindowManagerService $r3, $r13;
        int[] $r4;
        com.android.server.wm.AccessibilityController $r5, $r14;
        int $i0, i1;
        android.os.IBinder $r6, $r12;
        java.util.HashMap $r7;
        java.lang.Object $r8;
        com.android.server.wm.ActivityRecord $r9;
        com.android.server.wm.WindowContainer $r10;
        com.android.server.wm.WindowState $r11;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        r2 = virtualinvoke r1.<com.android.server.wm.WindowToken: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r2 != r0 goto label1;

        return;

     label1:
        if r2 == null goto label3;

        $r7 = r2.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        $r6 = r1.<com.android.server.wm.WindowToken: android.os.IBinder token>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        if $r8 == null goto label2;

        $r9 = virtualinvoke r1.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if $r9 != null goto label2;

        $r10 = virtualinvoke r1.<com.android.server.wm.WindowToken: com.android.server.wm.WindowContainer getParent()>();

        virtualinvoke $r10.<com.android.server.wm.WindowContainer: void removeChild(com.android.server.wm.WindowContainer)>(r1);

     label2:
        $r11 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mLastFocus>;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowToken: boolean hasChild(com.android.server.wm.WindowContainer)>($r11);

        if $z0 == 0 goto label3;

        r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mLastFocus> = null;

     label3:
        $r12 = r1.<com.android.server.wm.WindowToken: android.os.IBinder token>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void addWindowToken(android.os.IBinder,com.android.server.wm.WindowToken)>($r12, r1);

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r14 == null goto label6;

        if r2 == null goto label4;

        i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        goto label5;

     label4:
        i1 = -1;

     label5:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r4 = newarray (int)[2];

        $r4[0] = i1;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r4[1] = $i0;

        virtualinvoke $r5.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r4);

     label6:
        return;
    }

    void reapplyMagnificationSpec()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.MagnificationSpec $r1, $r3;
        android.view.SurfaceControl$Transaction $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.MagnificationSpec mMagnificationSpec>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: android.view.MagnificationSpec mMagnificationSpec>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void applyMagnificationSpec(android.view.SurfaceControl$Transaction,android.view.MagnificationSpec)>($r2, $r3);

     label1:
        return;
    }

    void reconfigureDisplayLocked()
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, $z2, z3;
        android.content.res.Configuration r1, $r2, $r3, $r4;
        int $i0;
        com.android.server.wm.WindowManagerService $r5, $r7;
        com.android.server.wm.WindowSurfacePlacer $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isReady()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void configureDisplayPolicy()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateOrientation()>();

        r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke $r2.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r1);

        $r3 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void computeScreenConfiguration(android.content.res.Configuration)>($r3);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        $i0 = virtualinvoke r1.<android.content.res.Configuration: int diff(android.content.res.Configuration)>($r4);

        if $i0 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        $z2 = z0 | z3;

        if $z2 == 0 goto label4;

        r0.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig> = 1;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService: void startFreezingDisplay(int,int,com.android.server.wm.DisplayContent)>(0, 0, r0);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label4:
        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r6.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        return;
    }

    void reevaluateStatusBarVisibility()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayPolicy $r1;
        int $i0, $i1;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.WindowSurfacePlacer $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $i0 = r0.<com.android.server.wm.DisplayContent: int mLastStatusBarVisibility>;

        $i1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int adjustSystemUiVisibilityLw(int)>($i0);

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean updateStatusBarVisibilityLocked(int)>($i1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r3.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label1:
        return;
    }

    void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.WindowManagerPolicyConstants$PointerEventListener r1;
        com.android.server.wm.PointerEventDispatcher $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.WindowManagerPolicyConstants$PointerEventListener;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher>;

        virtualinvoke $r2.<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>(r1);

        return;
    }

    void registerRemoteAnimations(android.view.RemoteAnimationDefinition)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.RemoteAnimationDefinition r1;
        com.android.server.wm.AppTransitionController $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.RemoteAnimationDefinition;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransitionController mAppTransitionController>;

        virtualinvoke $r2.<com.android.server.wm.AppTransitionController: void registerRemoteAnimations(android.view.RemoteAnimationDefinition)>(r1);

        return;
    }

    void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener)
    {
        com.android.server.wm.DisplayContent r0;
        android.os.RemoteCallbackList $r1, $r2;
        int $i0, $i1;
        boolean $z1, z2;
        android.graphics.Region $r3, r6;
        android.os.RemoteException $r4;
        android.view.ISystemGestureExclusionListener r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r5 := @parameter0: android.view.ISystemGestureExclusionListener;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        virtualinvoke $r1.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r5);

        $r2 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        $i0 = virtualinvoke $r2.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i0 != 1 goto label1;

        z2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateSystemGestureExclusion()>();

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 != 0 goto label7;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean mSystemGestureExclusionWasRestricted>;

        if $z1 == 0 goto label3;

        r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusionUnrestricted>;

        goto label4;

     label3:
        r6 = null;

     label4:
        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusion>;

        interfaceinvoke r5.<android.view.ISystemGestureExclusionListener: void onSystemGestureExclusionChanged(int,android.graphics.Region,android.graphics.Region)>($i1, $r3, r6);

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to notify SystemGestureExclusionListener during register", $r4);

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void releaseSelfIfNeeded()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z1, $z2, $z3, z4;
        int $i0, $i1, $i2, $i3, i4, i5;
        com.android.server.wm.ActivityStack $r1, $r6, r8;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.KeyguardController $r4;
        com.android.server.wm.TaskDisplayArea $r5, r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean mRemoved>;

        if $z1 != 0 goto label01;

        return;

     label01:
        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i0 - 1;

     label02:
        z4 = 1;

        if i4 < 0 goto label06;

        r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i3 = virtualinvoke r7.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        if $i3 == 1 goto label03;

        z4 = 0;

        goto label06;

     label03:
        r8 = virtualinvoke r7.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(0);

        $z2 = virtualinvoke r8.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        if $z2 == 0 goto label05;

        $z3 = virtualinvoke r8.<com.android.server.wm.ActivityStack: boolean hasChild()>();

        if $z3 == 0 goto label04;

        goto label05;

     label04:
        i4 = i4 + -1;

        goto label02;

     label05:
        z4 = 0;

     label06:
        if z4 == 0 goto label09;

        $i2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i5 = $i2 - 1;

     label07:
        if i5 < 0 goto label08;

        $r5 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i5);

        $r6 = virtualinvoke $r5.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(0);

        virtualinvoke $r6.<com.android.server.wm.ActivityStack: void removeIfPossible()>();

        i5 = i5 + -1;

        goto label07;

     label08:
        goto label10;

     label09:
        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getTopStack()>();

        if $r1 != null goto label10;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void removeIfPossible()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r3 = $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r4.<com.android.server.wm.KeyguardController: void onDisplayRemoved(int)>($i1);

     label10:
        return;
    }

    void remove()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;
        com.android.server.wm.ActivityStack r1, r17;
        com.android.server.wm.RootWindowContainer $r2, $r4, $r8, $r15;
        com.android.server.wm.ActivityStackSupervisor $r3, $r5, $r16;
        com.android.server.wm.DisplayPolicy $r6;
        java.util.ArrayList $r7, $r9, $r10, $r11;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r12;
        com.android.server.wm.TaskDisplayArea $r13;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: boolean mRemoving> = 1;

        r17 = null;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r3 = $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void beginDeferResume()>();

     label01:
        i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

     label04:
        $r13 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        r1 = virtualinvoke $r13.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack remove()>();

     label05:
        if r1 == null goto label06;

        r17 = r1;

     label06:
        i1 = i1 + 1;

        goto label03;

     label07:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r5 = $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: void endDeferResume()>();

        r0.<com.android.server.wm.DisplayContent: boolean mRemoved> = 1;

        if r17 == null goto label08;

        virtualinvoke r17.<com.android.server.wm.ActivityStack: void postReparent()>();

     label08:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void releaseSelfIfNeeded()>();

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r6.<com.android.server.wm.DisplayPolicy: void release()>();

        $r7 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        $z0 = virtualinvoke $r7.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r10 = $r8.<com.android.server.wm.RootWindowContainer: java.util.ArrayList mSleepTokens>;

        $r9 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        virtualinvoke $r10.<java.util.ArrayList: boolean removeAll(java.util.Collection)>($r9);

        $r11 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        virtualinvoke $r11.<java.util.ArrayList: void clear()>();

        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService: void updateSleepIfNeededLocked()>();

     label09:
        return;

     label10:
        $r14 := @caughtexception;

        $r15 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r16 = $r15.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r16.<com.android.server.wm.ActivityStackSupervisor: void endDeferResume()>();

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
    }

    void removeAllTasks()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.'-$$Lambda$DisplayContent$baGpE41geZHYtmuLU8fsleePZ34' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = <com.android.server.wm._$$Lambda$DisplayContent$baGpE41geZHYtmuLU8fsleePZ34: com.android.server.wm.'-$$Lambda$DisplayContent$baGpE41geZHYtmuLU8fsleePZ34' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllTasks(java.util.function.Consumer)>(r2);

        return;
    }

    void removeAppToken(android.os.IBinder)
    {
        com.android.server.wm.DisplayContent r0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityRecord $r2, r15;
        java.lang.StringBuilder $r3, $r9;
        java.lang.String $r8, $r12;
        com.android.server.wm.WindowToken r13;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.os.IBinder;

        r13 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken removeWindowToken(android.os.IBinder)>(r1);

        if r13 != null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAppToken: Attempted to remove non-existing token: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r12);

        return;

     label1:
        r15 = virtualinvoke r13.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if r15 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-App token: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r8);

        return;

     label2:
        virtualinvoke r15.<com.android.server.wm.ActivityRecord: void onRemovedFromDisplay()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if r15 != $r2 goto label3;

        virtualinvoke r15.<com.android.server.wm.ActivityRecord: void finishFixedRotationTransform()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord)>(null);

     label3:
        return;
    }

    protected void removeChild(com.android.server.wm.DisplayContent$DisplayChildWindowContainer)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer r1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.DisplayContent$DisplayChildWindowContainer;

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mRemovingDisplay>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeChild(com.android.server.wm.WindowContainer)>(r1);

        return;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("See DisplayChildWindowContainer");

        throw $r2;
    }

    protected volatile void removeChild(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm.DisplayContent$DisplayChildWindowContainer $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        $r2 = (com.android.server.wm.DisplayContent$DisplayChildWindowContainer) r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void removeChild(com.android.server.wm.DisplayContent$DisplayChildWindowContainer)>($r2);

        return;
    }

    void removeExistingTokensIfPossible()
    {
        com.android.server.wm.DisplayContent r0;
        java.util.ArrayList $r1, $r3, $r6;
        int $i0, $i1, i2, i3;
        com.android.server.wm.TaskDisplayArea $r2;
        java.lang.Object $r4;
        com.android.server.wm.WindowToken $r5;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r5 = (com.android.server.wm.WindowToken) $r4;

        $z0 = $r5.<com.android.server.wm.WindowToken: boolean hasVisible>;

        if $z0 != 0 goto label2;

        $r6 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object remove(int)>(i2);

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i1 - 1;

     label4:
        if i3 < 0 goto label5;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: void removeExistingAppTokensIfPossible()>();

        i3 = i3 + -1;

        goto label4;

     label5:
        return;
    }

    void removeIfPossible()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isAnimating(int)>(3);

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.DisplayContent: boolean mDeferredRemoval> = 1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void removeImmediately()>();

        return;
    }

    void removeImmediately()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState $r2, $r18;
        android.util.ArraySet $r3, $r4, $r5;
        com.android.server.wm.UnknownAppVisibilityController $r6;
        com.android.server.wm.AppTransition $r7;
        com.android.server.wm.WindowManagerService $r8, $r10, $r13, $r16;
        com.android.server.wm.PointerEventDispatcher $r9;
        int $i0;
        com.android.server.wm.WindowAnimator $r11;
        com.android.server.wm.InputMonitor $r12;
        com.android.server.wm.DisplayWindowListenerController $r14;
        android.view.SurfaceControl$Transaction $r15;
        com.android.server.wm.WindowSurfacePlacer $r17;
        java.lang.Throwable $r19;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: boolean mRemovingDisplay> = 1;

        r0.<com.android.server.wm.DisplayContent: boolean mDeferredRemoval> = 0;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow>;

        if $r2 == null goto label2;

        $r18 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow>;

        virtualinvoke $r18.<com.android.server.wm.WindowState: boolean removeEmbeddedDisplayContent(com.android.server.wm.DisplayContent)>(r0);

     label2:
        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r3.<android.util.ArraySet: void clear()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        virtualinvoke $r4.<android.util.ArraySet: void clear()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers>;

        virtualinvoke $r5.<android.util.ArraySet: void clear()>();

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        virtualinvoke $r6.<com.android.server.wm.UnknownAppVisibilityController: void clear()>();

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r7.<com.android.server.wm.AppTransition: void removeAppTransitionTimeoutCallbacks()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void handleAnimatingStoppedAndTransition()>();

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeImmediately()>();

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher>;

        virtualinvoke $r9.<com.android.server.wm.PointerEventDispatcher: void dispose()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setRotationAnimation(com.android.server.wm.ScreenRotationAnimation)>(null);

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r11.<com.android.server.wm.WindowAnimator: void removeDisplayLocked(int)>($i0);

        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r12.<com.android.server.wm.InputMonitor: void onDisplayRemoved()>();

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        virtualinvoke $r14.<com.android.server.wm.DisplayWindowListenerController: void dispatchDisplayRemoved(com.android.server.wm.DisplayContent)>(r0);

     label3:
        r0.<com.android.server.wm.DisplayContent: boolean mDisplayReady> = 0;

        r0.<com.android.server.wm.DisplayContent: boolean mRemovingDisplay> = 0;

        $r15 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r15.<android.view.SurfaceControl$Transaction: void apply()>();

        $r16 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r17 = $r16.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r17.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

        return;

     label4:
        $r19 := @caughtexception;

        r0.<com.android.server.wm.DisplayContent: boolean mDisplayReady> = 0;

        r0.<com.android.server.wm.DisplayContent: boolean mRemovingDisplay> = 0;

        throw $r19;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    void removeShellRoot(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2;
        android.util.SparseArray $r3, $r5;
        java.lang.Object $r4;
        java.lang.Throwable $r6;
        com.android.server.wm.ShellRoot r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.wm.ShellRoot) $r4;

     label2:
        if r7 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        virtualinvoke r7.<com.android.server.wm.ShellRoot: void clear()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    transient void removeStacksInWindowingModes(int[])
    {
        com.android.server.wm.DisplayContent r0;
        int[] r1;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: void removeStacksInWindowingModes(int[])>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    transient void removeStacksWithActivityTypes(int[])
    {
        com.android.server.wm.DisplayContent r0;
        int[] r1;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: void removeStacksWithActivityTypes(int[])>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    com.android.server.wm.WindowToken removeWindowToken(android.os.IBinder)
    {
        com.android.server.wm.DisplayContent r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        com.android.server.wm.ActivityRecord $r3;
        android.os.IBinder r4;
        com.android.server.wm.WindowToken r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r4 := @parameter0: android.os.IBinder;

        $r1 = r0.<com.android.server.wm.DisplayContent: java.util.HashMap mTokenMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r4);

        r5 = (com.android.server.wm.WindowToken) $r2;

        if r5 == null goto label1;

        $r3 = virtualinvoke r5.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if $r3 != null goto label1;

        virtualinvoke r5.<com.android.server.wm.WindowToken: void setExiting()>();

     label1:
        return r5;
    }

    void reparentDisplayContent(com.android.server.wm.WindowState, android.view.SurfaceControl)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, r3;
        android.view.SurfaceControl r2, $r8;
        android.view.InputWindowHandle $r4, $r6, $r11;
        android.view.SurfaceControl$Transaction $r5, $r7;
        java.lang.String $r10;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: android.view.SurfaceControl;

        r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.wm.WindowState: boolean removeEmbeddedDisplayContent(com.android.server.wm.DisplayContent)>(r0);

     label1:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow> = r1;

        virtualinvoke r1.<com.android.server.wm.WindowState: boolean addEmbeddedDisplayContent(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mParentSurfaceControl> = r2;

        $r4 = r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle mPortalWindowHandle>;

        if $r4 != null goto label2;

        $r10 = virtualinvoke r2.<android.view.SurfaceControl: java.lang.String toString()>();

        $r11 = specialinvoke r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle createPortalWindowHandle(java.lang.String)>($r10);

        r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle mPortalWindowHandle> = $r11;

     label2:
        $r5 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.InputWindowHandle mPortalWindowHandle>;

        $r7 = virtualinvoke $r5.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)>(r2, $r6);

        $r8 = r0.<com.android.server.wm.DisplayContent: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r7.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>($r8, r2);

        return;
    }

    void reparentToOverlay(android.view.SurfaceControl$Transaction, android.view.SurfaceControl)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2, $r4;
        com.android.server.wm.DisplayContent$NonAppWindowContainers $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$NonAppWindowContainers mOverlayContainers>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayContent$NonAppWindowContainers: android.view.SurfaceControl getSurfaceControl()>();

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>(r2, $r4);

        return;
    }

    void rotateBounds(int, int, android.graphics.Rect)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;
        android.graphics.Rect r1, $r2, $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void getBounds(android.graphics.Rect,int)>($r2, i1);

        $r3 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void rotateBounds(android.graphics.Rect,int,int,android.graphics.Rect)>($r3, i0, i1, r1);

        return;
    }

    void rotateBounds(android.graphics.Rect, int, int, android.graphics.Rect)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Rect r1, r2;
        int i0, $i1, $i2, i3, i4;
        float $f0, $f1;
        android.graphics.Matrix $r3, $r6;
        android.graphics.RectF $r4, $r5, $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Rect;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: android.graphics.Rect;

        i4 = staticinvoke <com.android.server.wm.DisplayContent: int deltaRotation(int,int)>(i0, i3);

        $i1 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f0 = (float) $i1;

        $i2 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f1 = (float) $i2;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.graphics.Matrix mTmpMatrix>;

        staticinvoke <com.android.server.wm.DisplayContent: void createRotationMatrix(int,float,float,android.graphics.Matrix)>(i4, $f0, $f1, $r3);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF>;

        virtualinvoke $r4.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Matrix mTmpMatrix>;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF>;

        virtualinvoke $r6.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r5);

        $r7 = r0.<com.android.server.wm.DisplayContent: android.graphics.RectF mTmpRectF>;

        virtualinvoke $r7.<android.graphics.RectF: void round(android.graphics.Rect)>(r2);

        return;
    }

    void rotateInDifferentOrientationIfNeeded(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1;
        int i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int rotationForActivityInDifferentOrientation(com.android.server.wm.ActivityRecord)>(r1);

        if i0 == -1 goto label1;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void startFixedRotationTransform(com.android.server.wm.WindowToken,int)>(r1, i0);

     label1:
        return;
    }

    int rotationForActivityInDifferentOrientation(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        android.content.res.Configuration $r2;
        com.android.server.wm.DisplayRotation $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = <com.android.server.wm.WindowManagerService: boolean ENABLE_FIXED_ROTATION_TRANSFORM>;

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean inMultiWindowMode()>();

        if $z1 != 0 goto label4;

        $i2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getRequestedConfigurationOrientation()>();

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

        $i3 = $r2.<android.content.res.Configuration: int orientation>;

        if $i2 != $i3 goto label2;

        goto label4;

     label2:
        i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getRotation()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $i4 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getRequestedOrientation()>();

        i1 = virtualinvoke $r3.<com.android.server.wm.DisplayRotation: int rotationForOrientation(int,int)>($i4, i0);

        if i1 != i0 goto label3;

        return -1;

     label3:
        return i1;

     label4:
        return -1;
    }

    void scheduleToastWindowsTimeoutIfNeededLocked(com.android.server.wm.WindowState, com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, r2;
        java.util.function.Consumer $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: com.android.server.wm.WindowState;

        if r1 == null goto label2;

        if r2 == null goto label1;

        $i1 = r2.<com.android.server.wm.WindowState: int mOwnerUid>;

        $i0 = r1.<com.android.server.wm.WindowState: int mOwnerUid>;

        if $i1 != $i0 goto label1;

        goto label2;

     label1:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mTmpWindow> = r1;

        $r3 = r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mScheduleToastTimeout>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r3, 0);

        return;

     label2:
        return;
    }

    android.graphics.Bitmap screenshotDisplayLocked(android.graphics.Bitmap$Config)
    {
        com.android.server.wm.DisplayContent r0, $r11;
        int i0, i1, i2, i5;
        com.android.server.wm.WindowManagerService $r2, $r9;
        com.android.server.policy.WindowManagerPolicy $r3;
        boolean $z0, $z1, z2;
        android.view.DisplayInfo $r4, $r5;
        android.graphics.Rect $r6;
        android.view.Display $r7;
        android.graphics.Bitmap$Config r8;
        com.android.server.wm.RootWindowContainer $r10;
        com.android.server.wm.ScreenRotationAnimation r12;
        android.graphics.Bitmap r13, r14;

        r0 := @this: com.android.server.wm.DisplayContent;

        r8 := @parameter0: android.graphics.Bitmap$Config;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: boolean isScreenOn()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        i0 = $r4.<android.view.DisplayInfo: int logicalWidth>;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        i1 = $r5.<android.view.DisplayInfo: int logicalHeight>;

        if i0 <= 0 goto label8;

        if i1 > 0 goto label2;

        goto label8;

     label2:
        z2 = 0;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, i0, i1);

        $r7 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        i2 = virtualinvoke $r7.<android.view.Display: int getRotation()>();

        if i2 == 1 goto label3;

        i5 = i2;

        if i2 != 3 goto label5;

     label3:
        if i2 != 1 goto label4;

        i5 = 3;

        goto label5;

     label4:
        i5 = 1;

     label5:
        staticinvoke <com.android.server.wm.DisplayContent: void convertCropForSurfaceFlinger(android.graphics.Rect,int,int,int)>($r6, i5, i0, i1);

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r11 = virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

        r12 = virtualinvoke $r11.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

        if r12 == null goto label6;

        $z1 = virtualinvoke r12.<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>();

        if $z1 == 0 goto label6;

        z2 = 1;

        goto label6;

     label6:
        r13 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,boolean,int)>($r6, i0, i1, z2, i5);

        if r13 != null goto label7;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Failed to take screenshot");

        return null;

     label7:
        r14 = virtualinvoke r13.<android.graphics.Bitmap: android.graphics.Bitmap createAshmemBitmap(android.graphics.Bitmap$Config)>(r8);

        virtualinvoke r13.<android.graphics.Bitmap: void recycle()>();

        return r14;

     label8:
        return null;
    }

    void sendNewConfiguration()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.DisplayRotation $r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.WindowSurfacePlacer $r4;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isReady()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.DisplayRotation: boolean isWaitingForRemoteRotation()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        $z2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateDisplayOverrideConfigurationLocked()>();

        if $z2 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<com.android.server.wm.DisplayContent: void clearFixedRotationLaunchingApp()>();

        $z3 = r0.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

        if $z3 == 0 goto label4;

        r0.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig> = 0;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = "config-unchanged";

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r4.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label4:
        return;
    }

    void setDisplayToSingleTaskInstance()
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r8, $r14;
        java.lang.IllegalArgumentException $r5, $r11, $r19;
        java.lang.String $r6, $r12, $r20;
        com.android.server.wm.TaskDisplayArea $r7, $r13;
        com.android.server.wm.ActivityStack r21;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        if $i1 > 1 goto label4;

        $r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        i0 = virtualinvoke $r7.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        if i0 > 1 goto label3;

        if i0 <= 0 goto label2;

        $r13 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r21 = virtualinvoke $r13.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(0);

        $i2 = virtualinvoke r21.<com.android.server.wm.ActivityStack: int getChildCount()>();

        if $i2 > 1 goto label1;

        goto label2;

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display stack already has multiple tasks. display=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stack=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label2:
        r0.<com.android.server.wm.DisplayContent: boolean mSingleTaskInstance> = 1;

        return;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display already has multiple stacks. display=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display already has multiple task display areas. display=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    void setDisplayWindowingMode(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setWindowingMode(int)>(i0);

        return;
    }

    void setExitingTokensHasVisible(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0;
        java.util.ArrayList $r1, $r3;
        int $i0, $i1, i2, i3;
        com.android.server.wm.TaskDisplayArea $r2;
        java.lang.Object $r4;
        com.android.server.wm.WindowToken $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r5 = (com.android.server.wm.WindowToken) $r4;

        $r5.<com.android.server.wm.WindowToken: boolean hasVisible> = z0;

        i2 = i2 + -1;

        goto label1;

     label2:
        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i1 - 1;

     label3:
        if i3 < 0 goto label4;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: void setExitingTokensHasVisible(boolean)>(z0);

        i3 = i3 + -1;

        goto label3;

     label4:
        return;
    }

    void setFixedRotationLaunchingApp(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, r2;
        int i0, $i1, $i2;
        android.app.WindowConfiguration $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if r2 != r1 goto label1;

        $r4 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: android.app.WindowConfiguration getWindowConfiguration()>();

        $i2 = virtualinvoke $r4.<android.app.WindowConfiguration: int getRotation()>();

        if $i2 != i0 goto label1;

        return;

     label1:
        if r2 == null goto label2;

        $r3 = virtualinvoke r2.<com.android.server.wm.WindowToken: android.app.WindowConfiguration getWindowConfiguration()>();

        $i1 = virtualinvoke $r3.<android.app.WindowConfiguration: int getRotation()>();

        if $i1 != i0 goto label2;

        $z0 = virtualinvoke r2.<com.android.server.wm.WindowToken: boolean isAnimating(int)>(3);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void linkFixedRotationTransform(com.android.server.wm.WindowToken)>(r2);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord,int)>(r1, i0);

        return;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean hasFixedRotationTransform()>();

        if $z1 != 0 goto label3;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void startFixedRotationTransform(com.android.server.wm.WindowToken,int)>(r1, i0);

     label3:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord,int)>(r1, i0);

        if r2 == null goto label4;

        virtualinvoke r2.<com.android.server.wm.WindowToken: void finishFixedRotationTransform()>();

     label4:
        return;
    }

    void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord,int)>(r1, -1);

        return;
    }

    void setFixedRotationLaunchingAppUnchecked(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1, $r3, $r4;
        int i0;
        com.android.server.wm.WindowManagerService $r5, $r7;
        com.android.server.wm.DisplayWindowListenerController $r6, $r8;
        com.android.server.wm.FixedRotationAnimationController $r9, $r10;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if $r3 != null goto label1;

        if r1 == null goto label1;

        $r7 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        virtualinvoke $r8.<com.android.server.wm.DisplayWindowListenerController: void dispatchFixedRotationStarted(com.android.server.wm.DisplayContent,int)>(r0, i0);

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.FixedRotationAnimationController mFixedRotationAnimationController>;

        if $r9 != null goto label2;

        $r10 = new com.android.server.wm.FixedRotationAnimationController;

        specialinvoke $r10.<com.android.server.wm.FixedRotationAnimationController: void <init>(com.android.server.wm.DisplayContent)>(r0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.FixedRotationAnimationController mFixedRotationAnimationController> = $r10;

        virtualinvoke $r10.<com.android.server.wm.FixedRotationAnimationController: void hide()>();

        goto label2;

     label1:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp>;

        if $r4 == null goto label2;

        if r1 != null goto label2;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        virtualinvoke $r6.<com.android.server.wm.DisplayWindowListenerController: void dispatchFixedRotationFinished(com.android.server.wm.DisplayContent)>(r0);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void finishFixedRotationAnimationIfPossible()>();

     label2:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFixedRotationLaunchingApp> = r1;

        return;
    }

    void setFocusedApp(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z1, $z2, $z4;
        com.android.server.wm.WindowManagerService $r2, $r4;
        com.android.server.wm.RootWindowContainer $r3;
        int $i0, $i1, $i3;
        java.lang.Object[] $r5, $r15;
        com.android.server.wm.ProtoLogGroup $r6, $r16;
        java.lang.Boolean $r7;
        java.lang.Long $r8, $r17;
        java.lang.StringBuilder $r9;
        java.lang.String $r14, r21;
        com.android.server.wm.ActivityRecord r18, r20;
        com.android.server.wm.ActivityRecord$Token r19;
        long l4, l5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r18 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        r19 = r18.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        if r19 != null goto label2;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z4 == 0 goto label1;

        $i3 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        l4 = (long) $i3;

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r15 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r15[0] = $r17;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, -603199586, 1, null, $r15);

     label1:
        r20 = null;

        goto label4;

     label2:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r20 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r19);

        if r20 != null goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set focus to non-existing app token: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", displayId=");

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r14);

     label3:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z2 == 0 goto label4;

        r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        l5 = (long) $i0;

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r21;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r5[2] = $r8;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 584499099, 28, null, $r5);

     label4:
        z1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean setFocusedApp(com.android.server.wm.ActivityRecord)>(r20);

        if z0 == 0 goto label5;

        if z1 == 0 goto label5;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

     label5:
        return;
    }

    boolean setFocusedApp(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.DisplayContent r0, r1;
        com.android.server.wm.ActivityRecord $r3, r14;
        com.android.server.wm.InputMonitor $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, $r13, r15;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.server.wm.DisplayContent;

        r14 := @parameter0: com.android.server.wm.ActivityRecord;

        if r14 == null goto label3;

        r1 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 == r0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not on ");

        $r8 = virtualinvoke r0.<com.android.server.wm.DisplayContent: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but ");

        if r1 == null goto label1;

        r15 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.lang.String getName()>();

        goto label2;

     label1:
        r15 = "none";

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if $r3 != r14 goto label4;

        return 0;

     label4:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp> = r14;

        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r4.<com.android.server.wm.InputMonitor: void setFocusedAppLw(com.android.server.wm.ActivityRecord)>(r14);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateTouchExcludeRegion()>();

        return 1;
    }

    void setForcedDensity(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i3, i4;
        com.android.server.wm.WindowManagerService $r1, $r2;
        com.android.server.wm.DisplayWindowSettings $r3;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != -2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $i2 = $r1.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        if $i2 == i1 goto label3;

        if z0 == 0 goto label4;

     label3:
        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = i0;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

     label4:
        if z0 == 0 goto label5;

        return;

     label5:
        i4 = i0;

        $i3 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        if i0 != $i3 goto label6;

        i4 = 0;

     label6:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r3.<com.android.server.wm.DisplayWindowSettings: void setForcedDensity(com.android.server.wm.DisplayContent,int,int)>(r0, i4, i1);

        return;
    }

    void setForcedScalingMode(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i2;
        java.lang.StringBuilder $r2;
        boolean $z0, z1;
        java.lang.String $r5, r8;
        com.android.server.wm.WindowManagerService $r6;
        com.android.server.wm.DisplayWindowSettings $r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        z1 = 1;

        i2 = i0;

        if i0 == 1 goto label1;

        i2 = 0;

     label1:
        if i2 == 0 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        r0.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled> = z1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using display scaling mode: ");

        $z0 = r0.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled>;

        if $z0 == 0 goto label4;

        r8 = "off";

        goto label5;

     label4:
        r8 = "auto";

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r5);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r7.<com.android.server.wm.DisplayWindowSettings: void setForcedScalingMode(com.android.server.wm.DisplayContent,int)>(r0, i2);

        return;
    }

    void setForcedSize(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.lang.StringBuilder $r2;
        java.lang.String $r7;
        com.android.server.wm.WindowManagerService $r8;
        com.android.server.wm.DisplayWindowSettings $r9;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        if $i2 != i0 goto label1;

        $i11 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        if $i11 != i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        i12 = i0;

        i13 = i1;

        if z0 != 0 goto label3;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 200);

        $i6 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i7 = $i6 * 2;

        i12 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7);

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 200);

        $i9 = r0.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        $i10 = $i9 * 2;

        i13 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i10);

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using new display size: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $i4 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetrics(int,int,int)>(i12, i13, $i4);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        if z0 == 0 goto label4;

        i13 = 0;

        i12 = 0;

     label4:
        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r9.<com.android.server.wm.DisplayWindowSettings: void setForcedSize(com.android.server.wm.DisplayContent,int,int)>(r0, i12, i13);

        return;
    }

    public void setForwardedInsets(android.graphics.Insets)
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Insets r1, $r3, r7;
        com.android.server.wm.DisplayPolicy $r2, $r4;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm.WindowSurfacePlacer $r6;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.graphics.Insets;

        r7 = r1;

        if r1 != null goto label1;

        r7 = <android.graphics.Insets: android.graphics.Insets NONE>;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: android.graphics.Insets getForwardedInsets()>();

        $z0 = virtualinvoke $r3.<android.graphics.Insets: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: void setForwardedInsets(android.graphics.Insets)>(r7);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r6.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

        return;
    }

    void setInputMethodInputTarget(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r3;
        java.lang.String r2;
        boolean $z0;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        if $r3 == r1 goto label2;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_IME_enabled>;

        if $z0 == 0 goto label1;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_IME>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, -322743468, 0, null, $r4);

     label1:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget> = r1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateImeControlTarget()>();

     label2:
        return;
    }

    void setInputMethodWindowLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r9;
        int i0, $i1;
        com.android.server.wm.InsetsStateController $r2;
        com.android.server.wm.InsetsSourceProvider $r3;
        com.android.server.wm.DisplayPolicy $r4;
        com.android.internal.util.function.TriConsumer $r5;
        com.android.server.wm.Session $r7;
        com.android.server.wm.WindowManagerService $r8;
        com.android.server.wm.ActivityTaskManagerInternal $r10;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow> = r1;

        if r1 == null goto label1;

        $r7 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        i0 = $r7.<com.android.server.wm.Session: int mPid>;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        $i1 = virtualinvoke $r9.<com.android.server.wm.WindowState: int getDisplayId()>();

        virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerInternal: void onImeWindowSetOnDisplay(int,int)>(i0, $i1);

     label1:
        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.InsetsStateController: com.android.server.wm.InsetsSourceProvider getSourceProvider(int)>(13);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: com.android.internal.util.function.TriConsumer getImeSourceFrameProvider()>();

        virtualinvoke $r3.<com.android.server.wm.InsetsSourceProvider: void setWindow(com.android.server.wm.WindowState,com.android.internal.util.function.TriConsumer,com.android.internal.util.function.TriConsumer)>(r1, $r5, null);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateImeControlTarget()>();

        return;
    }

    void setInsetProvider(int, com.android.server.wm.WindowState, com.android.internal.util.function.TriConsumer)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowState r1;
        com.android.internal.util.function.TriConsumer r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.WindowState;

        r2 := @parameter2: com.android.internal.util.function.TriConsumer;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setInsetProvider(int,com.android.server.wm.WindowState,com.android.internal.util.function.TriConsumer,com.android.internal.util.function.TriConsumer)>(i0, r1, r2, null);

        return;
    }

    void setInsetProvider(int, com.android.server.wm.WindowState, com.android.internal.util.function.TriConsumer, com.android.internal.util.function.TriConsumer)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowState r1;
        com.android.internal.util.function.TriConsumer r2, r3;
        com.android.server.wm.InsetsStateController $r4;
        com.android.server.wm.InsetsSourceProvider $r5;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.WindowState;

        r2 := @parameter2: com.android.internal.util.function.TriConsumer;

        r3 := @parameter3: com.android.internal.util.function.TriConsumer;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.InsetsStateController: com.android.server.wm.InsetsSourceProvider getSourceProvider(int)>(i0);

        virtualinvoke $r5.<com.android.server.wm.InsetsSourceProvider: void setWindow(com.android.server.wm.WindowState,com.android.internal.util.function.TriConsumer,com.android.internal.util.function.TriConsumer)>(r1, r2, r3);

        return;
    }

    void setIsSleeping(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.DisplayContent: boolean mSleeping> = z0;

        return;
    }

    void setLayoutNeeded()
    {
        com.android.server.wm.DisplayContent r0;

        r0 := @this: com.android.server.wm.DisplayContent;

        r0.<com.android.server.wm.DisplayContent: boolean mLayoutNeeded> = 1;

        return;
    }

    void setMaxUiWidth(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.DisplayContent: int mMaxUiWidth> = i0;

        $i3 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $i2 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetrics(int,int,int)>($i3, $i2, $i1);

        return;
    }

    void setRemoteInsetsController(android.view.IDisplayWindowInsetsController)
    {
        com.android.server.wm.DisplayContent r0;
        android.os.IBinder $r1, $r4;
        android.os.IBinder$DeathRecipient $r2, $r5;
        android.view.IDisplayWindowInsetsController $r3, r7;
        android.os.RemoteException $r6;
        com.android.server.wm.DisplayContent$RemoteInsetsControlTarget r8, r9;

        r0 := @this: com.android.server.wm.DisplayContent;

        r7 := @parameter0: android.view.IDisplayWindowInsetsController;

        r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

        if r8 == null goto label1;

        $r3 = staticinvoke <com.android.server.wm.DisplayContent$RemoteInsetsControlTarget: android.view.IDisplayWindowInsetsController access$100(com.android.server.wm.DisplayContent$RemoteInsetsControlTarget)>(r8);

        $r4 = interfaceinvoke $r3.<android.view.IDisplayWindowInsetsController: android.os.IBinder asBinder()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: android.os.IBinder$DeathRecipient mRemoteInsetsDeath>;

        interfaceinvoke $r4.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget> = null;

     label1:
        if r7 == null goto label5;

     label2:
        $r1 = interfaceinvoke r7.<android.view.IDisplayWindowInsetsController: android.os.IBinder asBinder()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: android.os.IBinder$DeathRecipient mRemoteInsetsDeath>;

        interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r2, 0);

        r9 = new com.android.server.wm.DisplayContent$RemoteInsetsControlTarget;

        specialinvoke r9.<com.android.server.wm.DisplayContent$RemoteInsetsControlTarget: void <init>(com.android.server.wm.DisplayContent,android.view.IDisplayWindowInsetsController)>(r0, r7);

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget> = r9;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        return;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setRotationAnimation(com.android.server.wm.ScreenRotationAnimation)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ScreenRotationAnimation r1, r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.ScreenRotationAnimation;

        r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

     label1:
        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation mScreenRotationAnimation> = r1;

        return;
    }

    public void setWindowingMode(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void setWindowingMode(int)>(i0);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void setDisplayWindowingMode(int)>(i0);

        return;
    }

    boolean shouldDestroyContentOnRemove()
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        android.view.Display $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        i0 = virtualinvoke $r1.<android.view.Display: int getRemoveMode()>();

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean shouldSleep()
    {
        com.android.server.wm.DisplayContent r0;
        int $i0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        android.service.voice.IVoiceInteractionSession $r2;
        java.util.ArrayList $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getStackCount()>();

        if $i0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

     label1:
        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: android.service.voice.IVoiceInteractionSession mRunningVoice>;

        if $r2 != null goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    boolean shouldWaitForSystemDecorWindowsOnBoot()
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z14;
        android.util.SparseBooleanArray $r2;
        com.android.server.wm._$$Lambda$DisplayContent$x9QSHnWitjvGOC1SnurRP5ASz48 $r3;
        com.android.server.wm.WindowState $r4;
        com.android.server.wm.WindowManagerService $r5, $r8, $r9, $r10, $r11, $r21, $r24;
        android.content.Context $r6, $r22;
        android.content.res.Resources $r7, $r23;
        java.lang.Object[] $r12;
        com.android.server.wm.ProtoLogGroup $r13;
        java.lang.Boolean $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z6 = r0.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z6 != 0 goto label1;

        $z12 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean supportsSystemDecorations()>();

        if $z12 != 0 goto label1;

        return 0;

     label1:
        $r2 = new android.util.SparseBooleanArray;

        specialinvoke $r2.<android.util.SparseBooleanArray: void <init>()>();

        virtualinvoke $r2.<android.util.SparseBooleanArray: void put(int,boolean)>(2040, 1);

        $r3 = new com.android.server.wm._$$Lambda$DisplayContent$x9QSHnWitjvGOC1SnurRP5ASz48;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$DisplayContent$x9QSHnWitjvGOC1SnurRP5ASz48: void <init>(com.android.server.wm.DisplayContent,android.util.SparseBooleanArray)>(r0, $r2);

        $r4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r3);

        if $r4 == null goto label2;

        return 1;

     label2:
        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $z7 = virtualinvoke $r7.<android.content.res.Resources: boolean getBoolean(int)>(17891453);

        if $z7 == 0 goto label3;

        $r21 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r22 = $r21.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.res.Resources getResources()>();

        $z10 = virtualinvoke $r23.<android.content.res.Resources: boolean getBoolean(int)>(17891397);

        if $z10 == 0 goto label3;

        $r24 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z11 = $r24.<com.android.server.wm.WindowManagerService: boolean mOnlyCore>;

        if $z11 != 0 goto label3;

        z13 = 1;

        goto label4;

     label3:
        z13 = 0;

     label4:
        z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(2021);

        z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(1);

        z2 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(2013);

        z3 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(2040);

        $z14 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

        if $z14 == 0 goto label5;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        z4 = $r10.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        $r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        z5 = $r11.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

        $r12 = newarray (java.lang.Object)[7];

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z5);

        $r12[1] = $r15;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r12[2] = $r16;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r12[3] = $r17;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r12[4] = $r18;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z13);

        $r12[5] = $r19;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r12[6] = $r20;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, -635082269, 16383, null, $r12);

        goto label5;

     label5:
        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z8 = $r8.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z8 != 0 goto label6;

        if z0 != 0 goto label6;

        return 1;

     label6:
        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z9 = $r9.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z9 == 0 goto label9;

        if z1 != 0 goto label7;

        if z3 == 0 goto label8;

     label7:
        if z13 == 0 goto label9;

        if z2 != 0 goto label9;

     label8:
        return 1;

     label9:
        return 0;
    }

    void startKeyguardExitOnNonAppWindows(boolean, boolean, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, z1, z2;
        com.android.server.policy.WindowManagerPolicy r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm._$$Lambda$DisplayContent$Ufn2ZjVS0i1L8aeQ8GZMJNJfmcY $r3;
        android.util.SparseArray $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        com.android.server.wm.ShellRoot $r7;
        android.view.animation.Animation $r8;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r3 = new com.android.server.wm._$$Lambda$DisplayContent$Ufn2ZjVS0i1L8aeQ8GZMJNJfmcY;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$DisplayContent$Ufn2ZjVS0i1L8aeQ8GZMJNJfmcY: void <init>(com.android.server.policy.WindowManagerPolicy,boolean,boolean,boolean)>(r1, z0, z1, z2);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r3, 1);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r7 = (com.android.server.wm.ShellRoot) $r6;

        $r8 = interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy: android.view.animation.Animation createHiddenByKeyguardExit(boolean,boolean,boolean)>(z0, z1, z2);

        virtualinvoke $r7.<com.android.server.wm.ShellRoot: void startAnimation(android.view.animation.Animation)>($r8);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void statusBarVisibilityChanged(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i1;
        com.android.server.wm.DisplayPolicy $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.DisplayContent: int mLastStatusBarVisibility> = i0;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $i1 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int adjustSystemUiVisibilityLw(int)>(i0);

        specialinvoke r0.<com.android.server.wm.DisplayContent: boolean updateStatusBarVisibilityLocked(int)>($i1);

        return;
    }

    boolean supportsSystemDecorations()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1, $r4, $r5;
        com.android.server.wm.DisplayWindowSettings $r2;
        boolean $z0, $z1, $z2, z3;
        android.view.Display $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.DisplayWindowSettings: boolean shouldShowSystemDecorsLocked(com.android.server.wm.DisplayContent)>(r0);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r3.<android.view.Display: int getFlags()>();

        $i1 = $i0 & 64;

        if $i1 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $z2 = $r4.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays>;

        if $z2 == 0 goto label2;

     label1:
        $i2 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $i3 = $r5.<com.android.server.wm.WindowManagerService: int mVr2dDisplayId>;

        if $i2 == $i3 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean isTrusted()>();

        if $z1 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    void switchUser(int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.DisplayPolicy $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void switchUser(int)>(i0);

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r1.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void switchUser()>();

        return;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.DisplayContent r0;
        java.lang.StringBuilder $r2;
        int $i0;
        android.view.DisplayInfo $r6;
        com.android.server.wm.WindowList $r9;
        java.lang.String $r11;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display ");

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" info=");

        $r6 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stacks=");

        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList mChildren>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    com.android.server.wm.ActivityRecord topRunningActivity()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(0);

        return $r1;
    }

    com.android.server.wm.ActivityRecord topRunningActivity(boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0;
        com.android.server.wm.ActivityRecord r1;
        int $i0, i1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i1);

        r1 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(z0);

        if r1 == null goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    void unregisterPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.WindowManagerPolicyConstants$PointerEventListener r1;
        com.android.server.wm.PointerEventDispatcher $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.WindowManagerPolicyConstants$PointerEventListener;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher>;

        virtualinvoke $r2.<com.android.server.wm.PointerEventDispatcher: void unregisterInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>(r1);

        return;
    }

    void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener)
    {
        com.android.server.wm.DisplayContent r0;
        android.view.ISystemGestureExclusionListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: android.view.ISystemGestureExclusionListener;

        $r2 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    void updateBaseDisplayMetrics(int, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Rect $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth> = i0;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight> = i1;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = i2;

        i3 = r0.<com.android.server.wm.DisplayContent: int mMaxUiWidth>;

        if i3 <= 0 goto label1;

        if i0 <= i3 goto label1;

        $i4 = i3 * i1;

        $i5 = $i4 / i0;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight> = $i5;

        $i6 = i3 * i2;

        $i7 = $i6 / i0;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = $i7;

        r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth> = i3;

     label1:
        $r1 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mBaseDisplayRect>;

        $i8 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $i9 = r0.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i8, $i9);

        specialinvoke r0.<com.android.server.wm.DisplayContent: void updateBounds()>();

        return;
    }

    void updateDisplayInfo()
    {
        com.android.server.wm.DisplayContent r0;
        android.view.DisplayInfo $r1;
        android.view.Display $r2, $r4;
        android.util.DisplayMetrics $r3;

        r0 := @this: com.android.server.wm.DisplayContent;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetricsIfNeeded()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke $r2.<android.view.Display: boolean getDisplayInfo(android.view.DisplayInfo)>($r1);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke $r4.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>($r3);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r0);

        return;
    }

    boolean updateDisplayOverrideConfigurationLocked()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult r2, $r13;
        com.android.server.wm.ActivityTaskManagerService $r4, $r5, $r11, $r12;
        int $i0, $i1;
        com.android.server.wm.ActivityTaskManagerService$H $r6;
        com.android.server.wm.'-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ' $r7;
        android.app.ActivityManagerInternal $r8;
        java.lang.Integer $r9;
        android.os.Message $r10;
        boolean z2;
        android.content.res.Configuration r14;
        java.util.function.BiConsumer r15;

        r0 := @this: com.android.server.wm.DisplayContent;

        r14 = new android.content.res.Configuration;

        specialinvoke r14.<android.content.res.Configuration: void <init>()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void computeScreenConfiguration(android.content.res.Configuration)>(r14);

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r6 = $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r7 = <com.android.server.wm._$$Lambda$ADNhW0r9Skcs9ezrOGURijI_lyQ: com.android.server.wm.'-$$Lambda$ADNhW0r9Skcs9ezrOGURijI-lyQ' INSTANCE>;

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r8 = $r5.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r15 = (java.util.function.BiConsumer) $r7;

        $r10 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.BiConsumer,java.lang.Object,java.lang.Object)>(r15, $r8, $r9);

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService$H: boolean sendMessage(android.os.Message)>($r10);

        staticinvoke <android.provider.Settings$System: void clearConfiguration(android.content.res.Configuration)>(r14);

        $r11 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r2 = $r11.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult mTmpUpdateConfigurationResult>;

        z2 = 0;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateDisplayOverrideConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)>(r14, null, 0, r2);

        $r12 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r13 = $r12.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult mTmpUpdateConfigurationResult>;

        $i1 = $r13.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: int changes>;

        if $i1 == 0 goto label1;

        z2 = 1;

     label1:
        return z2;
    }

    boolean updateDisplayOverrideConfigurationLocked(android.content.res.Configuration, com.android.server.wm.ActivityRecord, boolean, com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult r2;
        boolean z0, z1, z2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r4, $r6, $r8, $r9;
        int $i0, i1;
        java.lang.Throwable $r5;
        android.content.res.Configuration r7;

        r0 := @this: com.android.server.wm.DisplayContent;

        r7 := @parameter0: android.content.res.Configuration;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        z1 := @parameter2: boolean;

        r2 := @parameter3: com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult;

        i1 = 0;

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

        if r7 == null goto label4;

     label1:
        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i0 != 0 goto label3;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        i1 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: int updateGlobalConfigurationLocked(android.content.res.Configuration,boolean,boolean,int,boolean)>(r7, 0, 0, -10000, z1);

     label2:
        goto label4;

     label3:
        i1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int performDisplayOverrideConfigUpdate(android.content.res.Configuration,boolean)>(r7, z1);

     label4:
        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        z0 = virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: boolean ensureConfigAndVisibilityAfterUpdate(com.android.server.wm.ActivityRecord,int)>(r1, i1);

     label5:
        $r9 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        if r2 == null goto label8;

        r2.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: int changes> = i1;

        if z0 != 0 goto label6;

        z2 = 1;

        goto label7;

     label6:
        z2 = 0;

     label7:
        r2.<com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult: boolean activityRelaunched> = z2;

     label8:
        return z0;

     label9:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
    }

    boolean updateFocusedWindowLocked(int, boolean, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, $i2, $i3, $i4, i5, i6, i7, $i8;
        boolean z0, $z1, $z3, z4, z5;
        java.lang.String r1, r2, $r15, r26;
        long l1;
        com.android.server.wm.WindowState $r3, $r4, $r5, $r10, $r14, $r23, $r24, r25, r27;
        java.util.ArrayList $r6, $r11, $r12;
        com.android.server.wm.InputMonitor $r7;
        com.android.server.wm.WindowManagerService $r8, $r19, $r22;
        com.android.server.wm.RootWindowContainer $r9;
        com.android.server.wm.WindowToken $r13;
        java.lang.Object[] $r16;
        com.android.server.wm.ProtoLogGroup $r17;
        java.lang.Long $r18;
        com.android.server.wm.WindowManagerService$H $r20;
        android.os.Message $r21;
        com.android.server.wm.DisplayPolicy $r28;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i5 := @parameter2: int;

        r25 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState findFocusedWindowIfNeeded(int)>(i5);

        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r3 != r25 goto label01;

        return 0;

     label01:
        z4 = 0;

        $r4 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r4 == null goto label04;

        $r23 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $r24 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

        if $r23 == $r24 goto label02;

        z5 = 1;

        goto label03;

     label02:
        z5 = 0;

     label03:
        z4 = z5;

        if i0 == 1 goto label04;

        z4 = z5;

        if i0 == 3 goto label04;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(0);

        z4 = z5;

     label04:
        if z4 == 0 goto label05;

        $r22 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r22.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        r25 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState findFocusedWindowIfNeeded(int)>(i5);

     label05:
        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r5 == r25 goto label06;

        $r19 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r20 = $r19.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r21 = virtualinvoke $r20.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(2, r0);

        virtualinvoke $r21.<android.os.Message: void sendToTarget()>();

     label06:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z1 == 0 goto label07;

        $r14 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25);

        $i4 = virtualinvoke r0.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        l1 = (long) $i4;

        $r15 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(4);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        $r17 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r16 = newarray (java.lang.Object)[4];

        $r16[0] = r26;

        $r16[1] = r1;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r16[2] = $r18;

        $r16[3] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r17, 1469292670, 16, null, $r16);

     label07:
        r27 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus> = r25;

        $r6 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mLosingFocus>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r25);

        if r25 == null goto label08;

        $r11 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinAddedSinceNullFocus>;

        virtualinvoke $r11.<java.util.ArrayList: void clear()>();

        $r12 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinRemovedSinceNullFocus>;

        virtualinvoke $r12.<java.util.ArrayList: void clear()>();

        $z3 = virtualinvoke r25.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z3 == 0 goto label08;

        $r13 = r25.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r13.<com.android.server.wm.WindowToken: boolean paused> = 0;

     label08:
        staticinvoke <com.android.server.wm.DisplayContent: void onWindowFocusChanged(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r27, r25);

        $r28 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        i6 = virtualinvoke $r28.<com.android.server.wm.DisplayPolicy: int focusChangedLw(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r27, r25);

        i7 = i6;

        if z4 == 0 goto label10;

        i7 = i6;

        $r10 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if r27 == $r10 goto label10;

        if i0 != 2 goto label09;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void performLayout(boolean,boolean)>(1, z0);

        i7 = i6 & -2;

        goto label10;

     label09:
        i7 = i6;

        if i0 != 3 goto label10;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(0);

        i7 = i6;

     label10:
        $i8 = i7 & 1;

        if $i8 == 0 goto label12;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        if i0 != 2 goto label11;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void performLayout(boolean,boolean)>(1, z0);

        goto label12;

     label11:
        if i0 != 4 goto label12;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: void performSurfacePlacement()>();

     label12:
        if i0 == 1 goto label13;

        $r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r7.<com.android.server.wm.InputMonitor: void setInputFocusLw(com.android.server.wm.WindowState,boolean)>(r25, z0);

     label13:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void adjustForImeIfNeeded()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void scheduleToastWindowsTimeoutIfNeededLocked(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r27, r25);

        if i0 != 2 goto label14;

        $i2 = r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i3 = $i2 | 8;

        r0.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i3;

     label14:
        return 1;
    }

    void updateImeControlTarget()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.InsetsStateController $r1;
        com.android.server.wm.InsetsControlTarget $r2, r7;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.wm._$$Lambda$DisplayContent$_xtu90EUfC_AM8Qe5g8vDDI07_E $r4;
        com.android.server.wm.WindowManagerService$H $r5;
        android.view.IWindow $r6;
        com.android.server.wm.WindowState r8;
        android.os.IBinder r9;

        r0 := @this: com.android.server.wm.DisplayContent;

        r7 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget computeImeControlTarget()>();

        r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget> = r7;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController mInsetsStateController>;

        virtualinvoke $r1.<com.android.server.wm.InsetsStateController: void onImeControlTargetChanged(com.android.server.wm.InsetsControlTarget)>(r7);

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget>;

        r8 = staticinvoke <com.android.server.wm.InsetsControlTarget: com.android.server.wm.WindowState asWindowOrNull(com.android.server.wm.InsetsControlTarget)>($r2);

        if r8 == null goto label1;

        $r6 = r8.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r9 = interfaceinvoke $r6.<android.view.IWindow: android.os.IBinder asBinder()>();

        goto label2;

     label1:
        r9 = null;

     label2:
        $r3 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r4 = new com.android.server.wm._$$Lambda$DisplayContent$_xtu90EUfC_AM8Qe5g8vDDI07_E;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$DisplayContent$_xtu90EUfC_AM8Qe5g8vDDI07_E: void <init>(android.os.IBinder)>(r9);

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    void updateLocation(com.android.server.wm.WindowState, int, int)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowState r1, $r2;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r3;
        android.graphics.Point $r4, $r5;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r6, $r8;
        com.android.server.wm.AccessibilityController $r7, $r10;
        int[] $r9;

        r0 := @this: com.android.server.wm.DisplayContent;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mParentWindow>;

        if $r2 != r1 goto label3;

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.Point mLocationInParentWindow>;

        $z0 = virtualinvoke $r4.<android.graphics.Point: boolean equals(int,int)>(i0, i1);

        if $z0 != 0 goto label2;

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Point mLocationInParentWindow>;

        virtualinvoke $r5.<android.graphics.Point: void set(int,int)>(i0, i1);

        $r6 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r7 == null goto label1;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r9 = newarray (int)[1];

        $i2 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r9[0] = $i2;

        virtualinvoke $r10.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r9);

     label1:
        virtualinvoke r0.<com.android.server.wm.DisplayContent: void notifyLocationInParentDisplayChanged()>();

     label2:
        return;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The given window is not the parent window of this display.");

        throw $r3;
    }

    android.content.res.Configuration updateOrientation(android.content.res.Configuration, android.os.IBinder, boolean)
    {
        com.android.server.wm.DisplayContent r0;
        boolean z0, $z1, $z2, $z3;
        android.content.res.Configuration $r1, $r2, $r3, $r4, $r6, $r7, r10, $r13, r14;
        int $i0;
        com.android.server.wm.DisplayRotation $r5;
        com.android.server.wm.WindowManagerService $r8;
        com.android.server.wm.RootWindowContainer $r9;
        android.os.IBinder r11;
        com.android.server.wm.ActivityRecord r12;

        r0 := @this: com.android.server.wm.DisplayContent;

        r10 := @parameter0: android.content.res.Configuration;

        r11 := @parameter1: android.os.IBinder;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.wm.DisplayContent: boolean mDisplayReady>;

        if $z1 != 0 goto label1;

        return null;

     label1:
        $z2 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean updateOrientation(boolean)>(z0);

        if $z2 == 0 goto label3;

        if r11 == null goto label2;

        $r8 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z3 = $r9.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete>;

        if $z3 != 0 goto label2;

        r12 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r11);

        if r12 == null goto label2;

        virtualinvoke r12.<com.android.server.wm.ActivityRecord: void startFreezingScreen()>();

     label2:
        $r13 = new android.content.res.Configuration;

        specialinvoke $r13.<android.content.res.Configuration: void <init>()>();

        r14 = $r13;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void computeScreenConfiguration(android.content.res.Configuration)>($r13);

        goto label4;

     label3:
        r14 = null;

        if r10 == null goto label4;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke $r1.<android.content.res.Configuration: void unset()>();

        $r2 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke $r2.<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>(r10);

        $r3 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void computeScreenConfiguration(android.content.res.Configuration)>($r3);

        r14 = null;

        $r4 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        $i0 = virtualinvoke r10.<android.content.res.Configuration: int diff(android.content.res.Configuration)>($r4);

        if $i0 == 0 goto label4;

        r0.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig> = 1;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        virtualinvoke $r5.<com.android.server.wm.DisplayRotation: void prepareNormalRotationAnimation()>();

        $r6 = new android.content.res.Configuration;

        $r7 = r0.<com.android.server.wm.DisplayContent: android.content.res.Configuration mTmpConfiguration>;

        specialinvoke $r6.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r7);

        r14 = $r6;

     label4:
        return r14;
    }

    boolean updateOrientation()
    {
        com.android.server.wm.DisplayContent r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayContent: boolean updateOrientation(boolean)>(0);

        return $z0;
    }

    boolean updateRotationUnchecked()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayRotation $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation mDisplayRotation>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayRotation: boolean updateRotationUnchecked(boolean)>(0);

        return $z0;
    }

    boolean updateSystemGestureExclusion()
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Region r1, $r4, $r5, $r6, r14;
        boolean z0, $z1, $z3;
        android.os.RemoteCallbackList $r3, $r7, $r8, $r9;
        int $i0, $i1, i3, i4;
        android.os.IInterface $r10;
        android.view.ISystemGestureExclusionListener $r11;
        android.os.RemoteException $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        $i0 = virtualinvoke $r3.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i0 != 0 goto label01;

        return 0;

     label01:
        r1 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusionUnrestricted>;

        $z1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean calculateSystemGestureExclusion(android.graphics.Region,android.graphics.Region)>(r1, $r4);

        r0.<com.android.server.wm.DisplayContent: boolean mSystemGestureExclusionWasRestricted> = $z1;

     label02:
        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusion>;

        z0 = virtualinvoke $r5.<android.graphics.Region: boolean equals(java.lang.Object)>(r1);

     label03:
        if z0 == 0 goto label04;

        virtualinvoke r1.<android.graphics.Region: void recycle()>();

        return 0;

     label04:
        $r6 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusion>;

        virtualinvoke $r6.<android.graphics.Region: boolean set(android.graphics.Region)>(r1);

        $z3 = r0.<com.android.server.wm.DisplayContent: boolean mSystemGestureExclusionWasRestricted>;

        if $z3 == 0 goto label06;

        r14 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mSystemGestureExclusionUnrestricted>;

     label05:
        goto label07;

     label06:
        r14 = null;

     label07:
        $r7 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        i3 = virtualinvoke $r7.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label08:
        i4 = i3 + -1;

     label09:
        if i4 < 0 goto label15;

     label10:
        $r9 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        $r10 = virtualinvoke $r9.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i4);

        $r11 = (android.view.ISystemGestureExclusionListener) $r10;

        $i1 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        interfaceinvoke $r11.<android.view.ISystemGestureExclusionListener: void onSystemGestureExclusionChanged(int,android.graphics.Region,android.graphics.Region)>($i1, r1, r14);

     label11:
        goto label14;

     label12:
        $r12 := @caughtexception;

     label13:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to notify SystemGestureExclusionListener", $r12);

     label14:
        i4 = i4 + -1;

        goto label09;

     label15:
        $r8 = r0.<com.android.server.wm.DisplayContent: android.os.RemoteCallbackList mSystemGestureExclusionListeners>;

        virtualinvoke $r8.<android.os.RemoteCallbackList: void finishBroadcast()>();

     label16:
        virtualinvoke r1.<android.graphics.Region: void recycle()>();

        return 1;

     label17:
        $r13 := @caughtexception;

        virtualinvoke r1.<android.graphics.Region: void recycle()>();

        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    void updateSystemGestureExclusionLimit()
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.WindowManagerConstants $r2;
        android.util.DisplayMetrics $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        $i1 = $r2.<com.android.server.wm.WindowManagerConstants: int mSystemGestureExclusionLimitDp>;

        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        $i0 = $r3.<android.util.DisplayMetrics: int densityDpi>;

        $i2 = $i1 * $i0;

        $i3 = $i2 / 160;

        r0.<com.android.server.wm.DisplayContent: int mSystemGestureExclusionLimit> = $i3;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateSystemGestureExclusion()>();

        return;
    }

    void updateSystemUiVisibility(int, int)
    {
        com.android.server.wm.DisplayContent r0;
        int i0, i1;
        com.android.server.wm._$$Lambda$DisplayContent$w9ep5dwa3CsKsu0rpKSQwF_60A4 $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new com.android.server.wm._$$Lambda$DisplayContent$w9ep5dwa3CsKsu0rpKSQwF_60A4;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$DisplayContent$w9ep5dwa3CsKsu0rpKSQwF_60A4: void <init>(int,int)>(i0, i1);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r1, 1);

        return;
    }

    void updateTouchExcludeRegion()
    {
        com.android.server.wm.DisplayContent r0;
        android.graphics.Rect $r1, $r4, $r5, $r9, $r12, $r14, $r31;
        android.graphics.Region $r2, $r10, $r15, $r17, $r18, $r21, $r23, $r24, $r25, $r28, $r29, $r32, $r33, $r41;
        android.util.DisplayMetrics $r3;
        com.android.server.wm.'-$$Lambda$DisplayContent$cDcvMzGxc6XW13Q8FrU5X4DagqE' $r6;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r7;
        java.lang.Integer $r8;
        boolean $z1, $z2, $z5, $z7;
        int $i0, i1, $i2, i3;
        com.android.server.wm.TaskDisplayArea $r11;
        com.android.server.wm.DockedStackDividerController $r13;
        android.graphics.Region$Op $r16, $r22, $r27, $r30;
        java.util.ArrayList $r19, $r38;
        java.lang.Object $r20;
        com.android.server.wm.WindowState $r26, r37, r39;
        com.android.server.wm.ActivityRecord r34;
        com.android.server.wm.Task r35;
        com.android.internal.util.function.pooled.PooledConsumer r36;
        com.android.server.wm.TaskTapPointerEventListener $r40;
        com.android.internal.util.function.QuadConsumer r42;

        r0 := @this: com.android.server.wm.DisplayContent;

        r34 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if r34 == null goto label01;

        r35 = virtualinvoke r34.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        goto label02;

     label01:
        r35 = null;

     label02:
        if r35 != null goto label03;

        $r33 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        virtualinvoke $r33.<android.graphics.Region: void setEmpty()>();

        goto label04;

     label03:
        $r2 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        $r1 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mBaseDisplayRect>;

        virtualinvoke $r2.<android.graphics.Region: boolean set(android.graphics.Rect)>($r1);

        $r3 = r0.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mDisplayMetrics>;

        i1 = staticinvoke <com.android.server.wm.WindowManagerService: int dipToPixel(int,android.util.DisplayMetrics)>(30, $r3);

        $r4 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r4.<android.graphics.Rect: void setEmpty()>();

        $r5 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect2>;

        virtualinvoke $r5.<android.graphics.Rect: void setEmpty()>();

        $r6 = <com.android.server.wm._$$Lambda$DisplayContent$cDcvMzGxc6XW13Q8FrU5X4DagqE: com.android.server.wm.'-$$Lambda$DisplayContent$cDcvMzGxc6XW13Q8FrU5X4DagqE' INSTANCE>;

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r42 = (com.android.internal.util.function.QuadConsumer) $r6;

        r36 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.QuadConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r42, r0, $r7, r35, $r8);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllTasks(java.util.function.Consumer)>(r36);

        interfaceinvoke r36.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $r9 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect2>;

        $z1 = virtualinvoke $r9.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 != 0 goto label04;

        $r32 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        $r31 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect2>;

        $r30 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r32.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>($r31, $r30);

     label04:
        r37 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if r37 == null goto label05;

        $z7 = virtualinvoke r37.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z7 == 0 goto label05;

        $r26 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        $r25 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        virtualinvoke $r26.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>($r25);

        $r29 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        $r28 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        $r27 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r29.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>($r28, $r27);

     label05:
        $r38 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mTapExcludedWindows>;

        $i2 = virtualinvoke $r38.<java.util.ArrayList: int size()>();

        i3 = $i2 - 1;

     label06:
        if i3 < 0 goto label09;

        $r19 = r0.<com.android.server.wm.DisplayContent: java.util.ArrayList mTapExcludedWindows>;

        $r20 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r39 = (com.android.server.wm.WindowState) $r20;

        $z5 = virtualinvoke r39.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z5 != 0 goto label07;

        goto label08;

     label07:
        $r21 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        virtualinvoke r39.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>($r21);

        $r24 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        $r23 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        $r22 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r24.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>($r23, $r22);

     label08:
        i3 = i3 + -1;

        goto label06;

     label09:
        $r10 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        specialinvoke r0.<com.android.server.wm.DisplayContent: void amendWindowTapExcludeRegion(android.graphics.Region)>($r10);

        $i0 = r0.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i0 != 0 goto label10;

        $r11 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $z2 = virtualinvoke $r11.<com.android.server.wm.TaskDisplayArea: boolean isSplitScreenModeActivated()>();

        if $z2 == 0 goto label10;

        $r13 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController mDividerControllerLocked>;

        $r12 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r13.<com.android.server.wm.DockedStackDividerController: void getTouchRegion(android.graphics.Rect)>($r12);

        $r15 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        $r14 = r0.<com.android.server.wm.DisplayContent: android.graphics.Rect mTmpRect>;

        virtualinvoke $r15.<android.graphics.Region: boolean set(android.graphics.Rect)>($r14);

        $r18 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        $r17 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTmpRegion>;

        $r16 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r18.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>($r17, $r16);

     label10:
        $r40 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskTapPointerEventListener mTapDetector>;

        $r41 = r0.<com.android.server.wm.DisplayContent: android.graphics.Region mTouchExcludeRegion>;

        virtualinvoke $r40.<com.android.server.wm.TaskTapPointerEventListener: void setTouchExcludeRegion(android.graphics.Region)>($r41);

        return;
    }

    void updateWindowsForAnimator()
    {
        com.android.server.wm.DisplayContent r0;
        java.util.function.Consumer $r1;

        r0 := @this: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: java.util.function.Consumer mUpdateWindowsForAnimator>;

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r1, 1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DisplayContent: java.lang.String TAG_STACK> = "WindowManager";

        <com.android.server.wm.DisplayContent: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.DisplayContent: int FORCE_SCALING_MODE_DISABLED> = 1;

        <com.android.server.wm.DisplayContent: int FORCE_SCALING_MODE_AUTO> = 0;

        return;
    }
}
