public class com.android.server.wm.DisplayRotation extends java.lang.Object
{
    private static final int ALLOW_ALL_ROTATIONS_DISABLED;
    private static final int ALLOW_ALL_ROTATIONS_ENABLED;
    private static final int ALLOW_ALL_ROTATIONS_UNDEFINED;
    private static final int REMOTE_ROTATION_TIMEOUT_MS;
    private static final java.lang.String TAG;
    public final boolean isDefaultDisplay;
    private int mAllowAllRotations;
    private boolean mAllowSeamlessRotationDespiteNavBarMoving;
    private final int mCarDockRotation;
    private final android.content.Context mContext;
    private int mCurrentAppOrientation;
    private boolean mDefaultFixedToUserRotation;
    private int mDeferredRotationPauseCount;
    private int mDemoHdmiRotation;
    private boolean mDemoHdmiRotationLock;
    private int mDemoRotation;
    private boolean mDemoRotationLock;
    private final int mDeskDockRotation;
    private final com.android.server.wm.DisplayContent mDisplayContent;
    private final com.android.server.wm.DisplayPolicy mDisplayPolicy;
    private final java.lang.Runnable mDisplayRotationHandlerTimeout;
    private final com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings;
    private int mFixedToUserRotation;
    private boolean mIsWaitingForRemoteRotation;
    int mLandscapeRotation;
    private int mLastOrientation;
    private final int mLidOpenRotation;
    private final java.lang.Object mLock;
    private com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener;
    int mPortraitRotation;
    private final android.view.IDisplayWindowRotationCallback mRemoteRotationCallback;
    private boolean mRotatingSeamlessly;
    private int mRotation;
    private int mSeamlessRotationCount;
    int mSeascapeRotation;
    private final com.android.server.wm.WindowManagerService mService;
    private com.android.server.wm.DisplayRotation$SettingsObserver mSettingsObserver;
    private int mShowRotationSuggestions;
    private com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal;
    private final boolean mSupportAutoRotation;
    private final com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim;
    private final int mUndockedHdmiRotation;
    int mUpsideDownRotation;
    private int mUserRotation;
    private int mUserRotationMode;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayPolicy $r3;
        com.android.server.wm.DisplayWindowSettings $r4;
        android.content.Context $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.DisplayContent;

        $r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r4 = r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        $r5 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke r1.<com.android.server.wm.WindowManagerService: java.lang.Object getWindowManagerLock()>();

        specialinvoke r0.<com.android.server.wm.DisplayRotation: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent,com.android.server.wm.DisplayPolicy,com.android.server.wm.DisplayWindowSettings,android.content.Context,java.lang.Object)>(r1, r2, $r3, $r4, $r5, $r6);

        return;
    }

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DisplayContent, com.android.server.wm.DisplayPolicy, com.android.server.wm.DisplayWindowSettings, android.content.Context, java.lang.Object)
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.DisplayPolicy r1;
        com.android.server.wm.DisplayWindowSettings r2;
        android.content.Context r3, $r8, $r11;
        java.lang.Object r4;
        com.android.server.wm.DisplayRotation$RotationAnimationPair $r5;
        com.android.server.wm.DisplayRotation$1 $r6;
        com.android.server.wm.DisplayRotation$2 $r7;
        boolean $z0, $z1, $z2;
        android.content.res.Resources $r9;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.wm.DisplayRotation$OrientationListener $r10;
        com.android.server.wm.DisplayRotation$SettingsObserver $r12;
        com.android.server.wm.WindowManagerService r13;
        com.android.server.wm.DisplayContent r14;
        android.os.Handler r15;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r13 := @parameter0: com.android.server.wm.WindowManagerService;

        r14 := @parameter1: com.android.server.wm.DisplayContent;

        r1 := @parameter2: com.android.server.wm.DisplayPolicy;

        r2 := @parameter3: com.android.server.wm.DisplayWindowSettings;

        r3 := @parameter4: android.content.Context;

        r4 := @parameter5: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new com.android.server.wm.DisplayRotation$RotationAnimationPair;

        specialinvoke $r5.<com.android.server.wm.DisplayRotation$RotationAnimationPair: void <init>(com.android.server.wm.DisplayRotation$1)>(null);

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim> = $r5;

        r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation> = -1;

        r0.<com.android.server.wm.DisplayRotation: int mLastOrientation> = -1;

        r0.<com.android.server.wm.DisplayRotation: int mAllowAllRotations> = -1;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode> = 0;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotation> = 0;

        r0.<com.android.server.wm.DisplayRotation: int mFixedToUserRotation> = 0;

        r0.<com.android.server.wm.DisplayRotation: boolean mIsWaitingForRemoteRotation> = 0;

        $r6 = new com.android.server.wm.DisplayRotation$1;

        specialinvoke $r6.<com.android.server.wm.DisplayRotation$1: void <init>(com.android.server.wm.DisplayRotation)>(r0);

        r0.<com.android.server.wm.DisplayRotation: java.lang.Runnable mDisplayRotationHandlerTimeout> = $r6;

        $r7 = new com.android.server.wm.DisplayRotation$2;

        specialinvoke $r7.<com.android.server.wm.DisplayRotation$2: void <init>(com.android.server.wm.DisplayRotation)>(r0);

        r0.<com.android.server.wm.DisplayRotation: android.view.IDisplayWindowRotationCallback mRemoteRotationCallback> = $r7;

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService> = r13;

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent> = r14;

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy> = r1;

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings> = r2;

        r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext> = r3;

        r0.<com.android.server.wm.DisplayRotation: java.lang.Object mLock> = r4;

        $z0 = r14.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay> = $z0;

        $r8 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r9.<android.content.res.Resources: boolean getBoolean(int)>(17891541);

        r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation> = $z1;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayRotation: int readRotation(int)>(17694822);

        r0.<com.android.server.wm.DisplayRotation: int mLidOpenRotation> = $i0;

        $i1 = specialinvoke r0.<com.android.server.wm.DisplayRotation: int readRotation(int)>(17694763);

        r0.<com.android.server.wm.DisplayRotation: int mCarDockRotation> = $i1;

        $i2 = specialinvoke r0.<com.android.server.wm.DisplayRotation: int readRotation(int)>(17694789);

        r0.<com.android.server.wm.DisplayRotation: int mDeskDockRotation> = $i2;

        $i3 = specialinvoke r0.<com.android.server.wm.DisplayRotation: int readRotation(int)>(17694913);

        r0.<com.android.server.wm.DisplayRotation: int mUndockedHdmiRotation> = $i3;

        $z2 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        if $z2 == 0 goto label1;

        r15 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        $r10 = new com.android.server.wm.DisplayRotation$OrientationListener;

        $r11 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        specialinvoke $r10.<com.android.server.wm.DisplayRotation$OrientationListener: void <init>(com.android.server.wm.DisplayRotation,android.content.Context,android.os.Handler)>(r0, $r11, r15);

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener> = $r10;

        $i4 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        virtualinvoke $r10.<com.android.server.wm.DisplayRotation$OrientationListener: void setCurrentRotation(int)>($i4);

        $r12 = new com.android.server.wm.DisplayRotation$SettingsObserver;

        specialinvoke $r12.<com.android.server.wm.DisplayRotation$SettingsObserver: void <init>(com.android.server.wm.DisplayRotation,android.os.Handler)>(r0, r15);

        r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$SettingsObserver mSettingsObserver> = $r12;

        virtualinvoke $r12.<com.android.server.wm.DisplayRotation$SettingsObserver: void observe()>();

     label1:
        return;
    }

    static int access$100(com.android.server.wm.DisplayRotation)
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        return $i0;
    }

    static void access$200(com.android.server.wm.DisplayRotation, int, android.window.WindowContainerTransaction)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        android.window.WindowContainerTransaction r1;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        i0 := @parameter1: int;

        r1 := @parameter2: android.window.WindowContainerTransaction;

        specialinvoke r0.<com.android.server.wm.DisplayRotation: void continueRotation(int,android.window.WindowContainerTransaction)>(i0, r1);

        return;
    }

    static com.android.server.wm.WindowManagerService access$300(com.android.server.wm.DisplayRotation)
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        return $r1;
    }

    static int access$400(com.android.server.wm.DisplayRotation)
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        return $i0;
    }

    static boolean access$500(com.android.server.wm.DisplayRotation, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isRotationChoicePossible(int)>(i0);

        return $z0;
    }

    static boolean access$600(com.android.server.wm.DisplayRotation, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isValidRotationChoice(int)>(i0);

        return $z0;
    }

    static void access$700(com.android.server.wm.DisplayRotation, int, boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.DisplayRotation: void sendProposedRotationChangeToStatusBarInternal(int,boolean)>(i0, z0);

        return;
    }

    static android.content.Context access$800(com.android.server.wm.DisplayRotation)
    {
        com.android.server.wm.DisplayRotation r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        $r1 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$900(com.android.server.wm.DisplayRotation)
    {
        com.android.server.wm.DisplayRotation r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.DisplayRotation;

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean updateSettings()>();

        return $z0;
    }

    private static java.lang.String allowAllRotationsToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == -1 goto label3;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "true";

     label2:
        return "false";

     label3:
        return "unknown";
    }

    private void continueRotation(int, android.window.WindowContainerTransaction)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r6, $r9, $r11, $r15;
        boolean $z0;
        java.lang.Runnable $r4;
        com.android.server.wm.WindowManagerService$H $r5;
        com.android.server.wm.ActivityTaskManagerService $r7, $r10, $r12, $r16;
        com.android.server.wm.DisplayContent $r8;
        com.android.server.wm.WindowOrganizerController $r13;
        java.lang.Throwable $r14, $r17;
        android.window.WindowContainerTransaction r18;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        r18 := @parameter1: android.window.WindowContainerTransaction;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        if i0 != $i1 goto label13;

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean mIsWaitingForRemoteRotation>;

        if $z0 != 0 goto label03;

     label02:
        goto label13;

     label03:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r4 = r0.<com.android.server.wm.DisplayRotation: java.lang.Runnable mDisplayRotationHandlerTimeout>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: void removeCallbacks(java.lang.Runnable)>($r4);

        r0.<com.android.server.wm.DisplayRotation: boolean mIsWaitingForRemoteRotation> = 0;

        $r6 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label04:
        $r8 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r8.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label05:
        if r18 == null goto label07;

     label06:
        $r11 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r12 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r13 = $r12.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowOrganizerController mWindowOrganizerController>;

        virtualinvoke $r13.<com.android.server.wm.WindowOrganizerController: void applyTransaction(android.window.WindowContainerTransaction)>(r18);

     label07:
        $r9 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r14 := @caughtexception;

     label11:
        $r15 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r16.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

     label12:
        throw $r14;

     label13:
        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label15:
        $r17 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private boolean isAnyPortrait(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        if i0 == $i1 goto label2;

        $i2 = r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation>;

        if i0 != $i2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isLandscapeOrSeascape(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        if i0 == $i1 goto label2;

        $i2 = r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation>;

        if i0 != $i2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isRotationChoicePossible(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, z4, z5, $z6;
        com.android.server.wm.DisplayPolicy $r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i2 == 1 goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean isFixedToUserRotation()>();

        if $z0 == 0 goto label02;

        return 0;

     label02:
        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $i3 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int getLidState()>();

        if $i3 != 1 goto label03;

        $i5 = r0.<com.android.server.wm.DisplayRotation: int mLidOpenRotation>;

        if $i5 < 0 goto label03;

        return 0;

     label03:
        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i1 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: int getDockMode()>();

        if i1 != 2 goto label04;

        return 0;

     label04:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z4 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: boolean isDeskDockEnablesAccelerometer()>();

        if i1 == 1 goto label05;

        if i1 == 3 goto label05;

        if i1 != 4 goto label06;

     label05:
        if z4 != 0 goto label06;

        return 0;

     label06:
        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z5 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: boolean isHdmiPlugged()>();

        if z5 == 0 goto label07;

        $z3 = r0.<com.android.server.wm.DisplayRotation: boolean mDemoHdmiRotationLock>;

        if $z3 == 0 goto label07;

        return 0;

     label07:
        if z5 == 0 goto label08;

        if i1 != 0 goto label08;

        $i4 = r0.<com.android.server.wm.DisplayRotation: int mUndockedHdmiRotation>;

        if $i4 < 0 goto label08;

        return 0;

     label08:
        $z6 = r0.<com.android.server.wm.DisplayRotation: boolean mDemoRotationLock>;

        if $z6 == 0 goto label09;

        return 0;

     label09:
        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: boolean isPersistentVrModeEnabled()>();

        if $z1 == 0 goto label10;

        return 0;

     label10:
        $z2 = r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation>;

        if $z2 != 0 goto label11;

        return 0;

     label11:
        if i0 == -1 goto label13;

        if i0 == 2 goto label13;

        tableswitch(i0)
        {
            case 11: goto label13;
            case 12: goto label13;
            case 13: goto label13;
            default: goto label12;
        };

     label12:
        return 0;

     label13:
        return 1;
    }

    private boolean isValidRotationChoice(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, $i2, $i3;
        boolean $z2, z3, z4, z5;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        i1 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        z3 = 1;

        if i1 == -1 goto label09;

        if i1 == 2 goto label09;

        tableswitch(i1)
        {
            case 11: goto label08;
            case 12: goto label05;
            case 13: goto label02;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        if i0 < 0 goto label03;

        goto label04;

     label03:
        z3 = 0;

     label04:
        return z3;

     label05:
        $i3 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        if i0 != $i3 goto label06;

        z4 = 1;

        goto label07;

     label06:
        z4 = 0;

     label07:
        return z4;

     label08:
        $z2 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isLandscapeOrSeascape(int)>(i0);

        return $z2;

     label09:
        if i0 < 0 goto label10;

        $i2 = r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation>;

        if i0 == $i2 goto label10;

        z5 = 1;

        goto label11;

     label10:
        z5 = 0;

     label11:
        return z5;
    }

    static void lambda$cancelSeamlessRotation$0(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void finishSeamlessRotation(boolean)>(0);

        r0.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated> = 0;

     label1:
        return;
    }

    static boolean lambda$shouldRotateSeamlessly$1(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        return $z0;
    }

    private boolean needSensorRunning()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean $z1, $z2, $z3, $z4, $z5, z6, z7;
        com.android.server.wm.DisplayPolicy $r1, $r2, $r3;
        int $i0, $i1, i2, i3;

        r0 := @this: com.android.server.wm.DisplayRotation;

        z6 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean isFixedToUserRotation()>();

        if z6 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation>;

        if $z1 == 0 goto label3;

        i2 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        if i2 == 4 goto label2;

        if i2 == 10 goto label2;

        if i2 == 7 goto label2;

        if i2 != 6 goto label3;

     label2:
        return 1;

     label3:
        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i3 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: int getDockMode()>();

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z2 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: boolean isCarDockEnablesAccelerometer()>();

        if $z2 == 0 goto label4;

        if i3 == 2 goto label5;

     label4:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z3 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: boolean isDeskDockEnablesAccelerometer()>();

        if $z3 == 0 goto label6;

        if i3 == 1 goto label5;

        if i3 == 3 goto label5;

        if i3 != 4 goto label6;

     label5:
        return 1;

     label6:
        $i0 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i0 != 1 goto label8;

        z7 = 0;

        $z5 = r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation>;

        if $z5 == 0 goto label7;

        z7 = 0;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mShowRotationSuggestions>;

        if $i1 != 1 goto label7;

        z7 = 1;

     label7:
        return z7;

     label8:
        $z4 = r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation>;

        return $z4;
    }

    private void prepareSeamlessRotation()
    {
        com.android.server.wm.DisplayRotation r0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount> = 0;

        r0.<com.android.server.wm.DisplayRotation: boolean mRotatingSeamlessly> = 1;

        return;
    }

    private int readRotation(int)
    {
        com.android.server.wm.DisplayRotation r0;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        android.content.res.Resources$NotFoundException $r4;
        int i0, i1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        i1 = virtualinvoke $r3.<android.content.res.Resources: int getInteger(int)>(i0);

     label2:
        if i1 == 0 goto label6;

        if i1 == 90 goto label5;

        if i1 == 180 goto label4;

        if i1 == 270 goto label3;

        goto label8;

     label3:
        return 3;

     label4:
        return 2;

     label5:
        return 1;

     label6:
        return 0;

     label7:
        $r4 := @caughtexception;

     label8:
        return -1;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label7;
    }

    private com.android.server.wm.DisplayRotation$RotationAnimationPair selectRotationAnimation()
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1;
        com.android.server.wm.DisplayPolicy $r1, $r7, $r14;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.DisplayRotation$RotationAnimationPair $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11, r16, r17;
        android.view.WindowManager$LayoutParams $r8;
        com.android.server.wm.WindowManagerService $r12;
        com.android.server.policy.WindowManagerPolicy $r13;
        com.android.server.wm.WindowState r15;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: boolean isScreenOnFully()>();

        if $z0 == 0 goto label02;

        $r12 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r13 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z2 = interfaceinvoke $r13.<com.android.server.policy.WindowManagerPolicy: boolean okToAnimate()>();

        if $z2 != 0 goto label01;

        goto label02;

     label01:
        z3 = 0;

        goto label03;

     label02:
        z3 = 1;

     label03:
        $r14 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        r15 = virtualinvoke $r14.<com.android.server.wm.DisplayPolicy: com.android.server.wm.WindowState getTopFullscreenOpaqueWindow()>();

        if z3 == 0 goto label04;

        $r9 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        $r9.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit> = 17432711;

        $r10 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        $r10.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter> = 17432710;

        $r11 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        return $r11;

     label04:
        if r15 == null goto label09;

        i0 = virtualinvoke r15.<com.android.server.wm.WindowState: int getRotationAnimationHint()>();

        i1 = i0;

        if i0 >= 0 goto label05;

        i1 = i0;

        $r7 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z1 = virtualinvoke $r7.<com.android.server.wm.DisplayPolicy: boolean isTopLayoutFullscreen()>();

        if $z1 == 0 goto label05;

        $r8 = virtualinvoke r15.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        i1 = $r8.<android.view.WindowManager$LayoutParams: int rotationAnimation>;

     label05:
        if i1 == 1 goto label07;

        if i1 == 2 goto label06;

        if i1 == 3 goto label07;

        r16 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        r16.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter> = 0;

        r16.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit> = 0;

        goto label08;

     label06:
        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        $r5.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit> = 17432711;

        $r6 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        $r6.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter> = 17432710;

        goto label08;

     label07:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        $r3.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit> = 17432712;

        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        $r4.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter> = 17432710;

     label08:
        goto label10;

     label09:
        r17 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        r17.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter> = 0;

        r17.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit> = 0;

     label10:
        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair mTmpRotationAnim>;

        return $r2;
    }

    private void sendProposedRotationChangeToStatusBarInternal(int, boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        boolean z0;
        com.android.server.statusbar.StatusBarManagerInternal r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/statusbar/StatusBarManagerInternal;");

        $r4 = (com.android.server.statusbar.StatusBarManagerInternal) $r3;

        r0.<com.android.server.wm.DisplayRotation: com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal> = $r4;

     label1:
        r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.statusbar.StatusBarManagerInternal mStatusBarManagerInternal>;

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.server.statusbar.StatusBarManagerInternal: void onProposedRotationChanged(int,boolean)>(i0, z0);

     label2:
        return;
    }

    private void startRemoteRotation(int, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, $i2;
        com.android.server.wm.WindowManagerService $r2, $r4, $r8, $r11;
        android.view.IDisplayWindowRotationController $r3, $r6;
        com.android.server.wm.DisplayContent $r5;
        android.view.IDisplayWindowRotationCallback $r7;
        java.lang.Runnable $r9, $r12;
        com.android.server.wm.WindowManagerService$H $r10, $r13;
        android.os.RemoteException $r14;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController>;

        if $r3 != null goto label1;

        return;

     label1:
        r0.<com.android.server.wm.DisplayRotation: boolean mIsWaitingForRemoteRotation> = 1;

     label2:
        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r6 = $r4.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController>;

        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $i2 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r7 = r0.<com.android.server.wm.DisplayRotation: android.view.IDisplayWindowRotationCallback mRemoteRotationCallback>;

        interfaceinvoke $r6.<android.view.IDisplayWindowRotationController: void onRotateDisplay(int,int,int,android.view.IDisplayWindowRotationCallback)>($i2, i0, i1, $r7);

        $r8 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r10 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r9 = r0.<com.android.server.wm.DisplayRotation: java.lang.Runnable mDisplayRotationHandlerTimeout>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerService$H: void removeCallbacks(java.lang.Runnable)>($r9);

        $r11 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r13 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r12 = r0.<com.android.server.wm.DisplayRotation: java.lang.Runnable mDisplayRotationHandlerTimeout>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: boolean postDelayed(java.lang.Runnable,long)>($r12, 800L);

     label3:
        return;

     label4:
        $r14 := @caughtexception;

        r0.<com.android.server.wm.DisplayRotation: boolean mIsWaitingForRemoteRotation> = 0;

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void updateOrientationListenerLw()
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.DisplayRotation$OrientationListener r1, $r6, $r7, $r8, $r9, $r10;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, z11;
        long l0;
        com.android.server.wm.DisplayPolicy $r2, $r3, $r4, $r5;
        int $i1;
        java.lang.Object[] $r11;
        com.android.server.wm.ProtoLogGroup $r12;
        java.lang.Boolean $r13, $r14, $r16, $r17, $r18;
        java.lang.Long $r15;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        if r1 == null goto label5;

        $z5 = virtualinvoke r1.<com.android.server.wm.DisplayRotation$OrientationListener: boolean canDetectOrientation()>();

        if $z5 != 0 goto label1;

        goto label5;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z0 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: boolean isScreenOnEarly()>();

        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z1 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: boolean isAwake()>();

        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z2 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: boolean isKeyguardDrawComplete()>();

        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z3 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: boolean isWindowManagerDrawComplete()>();

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z6 == 0 goto label2;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        l0 = (long) $i1;

        $r10 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        z4 = $r10.<com.android.server.wm.DisplayRotation$OrientationListener: boolean mEnabled>;

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r11 = newarray (java.lang.Object)[6];

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r11[0] = $r13;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r11[1] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r11[2] = $r15;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r11[3] = $r16;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r11[4] = $r17;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r11[5] = $r18;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, -1868124841, 4063, null, $r11);

     label2:
        z11 = 1;

        if z0 == 0 goto label3;

        z11 = 1;

        if z1 == 0 goto label3;

        z11 = 1;

        if z2 == 0 goto label3;

        z11 = 1;

        if z3 == 0 goto label3;

        z11 = 1;

        $z8 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean needSensorRunning()>();

        if $z8 == 0 goto label3;

        z11 = 0;

        $r8 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        $z9 = $r8.<com.android.server.wm.DisplayRotation$OrientationListener: boolean mEnabled>;

        if $z9 != 0 goto label3;

        $r9 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        virtualinvoke $r9.<com.android.server.wm.DisplayRotation$OrientationListener: void enable(boolean)>(1);

        z11 = 0;

     label3:
        if z11 == 0 goto label4;

        $r6 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        $z7 = $r6.<com.android.server.wm.DisplayRotation$OrientationListener: boolean mEnabled>;

        if $z7 == 0 goto label4;

        $r7 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        virtualinvoke $r7.<com.android.server.wm.DisplayRotation$OrientationListener: void disable()>();

     label4:
        return;

     label5:
        return;
    }

    private boolean updateSettings()
    {
        com.android.server.wm.DisplayRotation r0;
        java.lang.Object r1;
        boolean z0, z1, z2;
        android.content.Context $r2;
        int $i1, $i2, $i3, $i4, i5, i6;
        java.lang.Throwable $r3;
        android.content.ContentResolver r4;
        byte b7;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $r2 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        r4 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z1 = 0;

        r1 = r0.<com.android.server.wm.DisplayRotation: java.lang.Object mLock>;

        entermonitor r1;

        z2 = 0;

     label01:
        z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

     label02:
        if z0 == 0 goto label03;

        i5 = 0;

        goto label04;

     label03:
        i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r4, "show_rotation_suggestions", 1, -2);

     label04:
        $i1 = r0.<com.android.server.wm.DisplayRotation: int mShowRotationSuggestions>;

        if $i1 == i5 goto label06;

        r0.<com.android.server.wm.DisplayRotation: int mShowRotationSuggestions> = i5;

     label05:
        z2 = 1;

     label06:
        i6 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r4, "user_rotation", 0, -2);

     label07:
        $i2 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        if $i2 == i6 goto label09;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotation> = i6;

     label08:
        z1 = 1;

     label09:
        $i3 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r4, "accelerometer_rotation", 0, -2);

        if $i3 == 0 goto label11;

     label10:
        b7 = 0;

        goto label12;

     label11:
        b7 = 1;

     label12:
        $i4 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i4 == b7 goto label14;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode> = b7;

     label13:
        z2 = 1;

        z1 = 1;

     label14:
        if z2 == 0 goto label16;

     label15:
        specialinvoke r0.<com.android.server.wm.DisplayRotation: void updateOrientationListenerLw()>();

     label16:
        exitmonitor r1;

     label17:
        return z1;

     label18:
        $r3 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    void applyCurrentRotation(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        com.android.server.wm.DisplayRotation$OrientationListener r1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.DisplayRotation$OrientationListener: void setCurrentRotation(int)>(i0);

     label1:
        return;
    }

    void cancelSeamlessRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean $z0;
        com.android.server.wm.'-$$Lambda$DisplayRotation$XcFKA0vAcDK0Q2CR5rqPDdsewi8' $r1;
        com.android.server.wm.DisplayContent $r2, $r3;
        java.util.function.Consumer r4;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean mRotatingSeamlessly>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r1 = <com.android.server.wm._$$Lambda$DisplayRotation$XcFKA0vAcDK0Q2CR5rqPDdsewi8: com.android.server.wm.'-$$Lambda$DisplayRotation$XcFKA0vAcDK0Q2CR5rqPDdsewi8' INSTANCE>;

        r4 = (java.util.function.Consumer) $r1;

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>(r4, 1);

        r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount> = 0;

        r0.<com.android.server.wm.DisplayRotation: boolean mRotatingSeamlessly> = 0;

        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void finishFixedRotationAnimationIfPossible()>();

        return;
    }

    void configure(int, int, int, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7;
        android.content.res.Resources r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, z12, $z13;
        android.content.Context $r2, $r5, $r7;
        java.lang.String $r3, $r4, $r11, $r12, $r13, $r14;
        android.content.pm.PackageManager $r6, $r8;
        com.android.server.wm.WindowManagerService $r9, $r10;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i7 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        z10 = 1;

        if i7 <= i0 goto label02;

        r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation> = 0;

        r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation> = 2;

        $z9 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891512);

        if $z9 == 0 goto label01;

        r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation> = 1;

        r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation> = 3;

        goto label04;

     label01:
        r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation> = 3;

        r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation> = 1;

        goto label04;

     label02:
        r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation> = 0;

        r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation> = 2;

        $z2 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891512);

        if $z2 == 0 goto label03;

        r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation> = 3;

        r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation> = 1;

        goto label04;

     label03:
        r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation> = 1;

        r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation> = 3;

     label04:
        $r11 = "portrait";

        $r12 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.demo.hdmirotation");

        $z11 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z11 == 0 goto label05;

        $i6 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        r0.<com.android.server.wm.DisplayRotation: int mDemoHdmiRotation> = $i6;

        goto label06;

     label05:
        $i3 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        r0.<com.android.server.wm.DisplayRotation: int mDemoHdmiRotation> = $i3;

     label06:
        $z3 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.hdmirotationlock", 0);

        r0.<com.android.server.wm.DisplayRotation: boolean mDemoHdmiRotationLock> = $z3;

        $r3 = "portrait";

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.demo.remoterotation");

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label07;

        $i5 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        r0.<com.android.server.wm.DisplayRotation: int mDemoRotation> = $i5;

        goto label08;

     label07:
        $i4 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        r0.<com.android.server.wm.DisplayRotation: int mDemoRotation> = $i4;

     label08:
        $z5 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.rotationlock", 0);

        r0.<com.android.server.wm.DisplayRotation: boolean mDemoRotationLock> = $z5;

        $r5 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z0 = virtualinvoke $r6.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        $r7 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z1 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        $r9 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $z6 = $r9.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays>;

        if $z6 == 0 goto label09;

        $z8 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        if $z8 != 0 goto label09;

        z12 = 1;

        goto label10;

     label09:
        z12 = 0;

     label10:
        if z0 != 0 goto label11;

        if z1 != 0 goto label11;

        $r10 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $z7 = $r10.<com.android.server.wm.WindowManagerService: boolean mIsPc>;

        if $z7 != 0 goto label11;

        if z12 == 0 goto label12;

     label11:
        $r13 = "true";

        $r14 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("config.override_forced_orient");

        $z13 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z13 != 0 goto label12;

        goto label13;

     label12:
        z10 = 0;

     label13:
        r0.<com.android.server.wm.DisplayRotation: boolean mDefaultFixedToUserRotation> = z10;

        return;
    }

    void dump(java.lang.String, java.io.PrintWriter)
    {
        com.android.server.wm.DisplayRotation r0;
        java.lang.String r1, $r7, $r11, $r13, $r18, $r23, $r27, $r31, $r33, $r36, $r38, $r42, $r44, $r47, $r49, $r54, $r58, $r60, $r63, $r65, $r69, $r71, $r74, $r76, $r79, $r81, $r85, $r87, $r91, $r94, $r96, $r100, $r102, $r107, $r111;
        java.io.PrintWriter r2;
        com.android.server.wm.DisplayRotation$OrientationListener r3;
        java.lang.StringBuilder $r4, $r8, $r14, $r19, $r24, $r28, $r34, $r39, $r45, $r50, $r55, $r61, $r66, $r72, $r77, $r82, $r88, $r92, $r97, $r103, $r108;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DisplayRotation");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCurrentAppOrientation=");

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        $r11 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String screenOrientationToString(int)>($i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastOrientation=");

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mLastOrientation>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRotation=");

        $i2 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDeferredRotationPauseCount=");

        $i3 = r0.<com.android.server.wm.DisplayRotation: int mDeferredRotationPauseCount>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLandscapeRotation=");

        $i4 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        $r31 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i4);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSeascapeRotation=");

        $i5 = r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation>;

        $r36 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i5);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPortraitRotation=");

        $i6 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        $r42 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i6);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUpsideDownRotation=");

        $i7 = r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation>;

        $r47 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i7);

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r49);

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSupportAutoRotation=");

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation>;

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r54 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r54);

        r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        if r3 == null goto label1;

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r111 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.server.wm.DisplayRotation$OrientationListener: void dump(java.io.PrintWriter,java.lang.String)>(r2, $r111);

     label1:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCarDockRotation=");

        $i8 = r0.<com.android.server.wm.DisplayRotation: int mCarDockRotation>;

        $r58 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i8);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r60);

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDeskDockRotation=");

        $i9 = r0.<com.android.server.wm.DisplayRotation: int mDeskDockRotation>;

        $r63 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i9);

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r65);

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserRotationMode=");

        $i10 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        $r69 = staticinvoke <com.android.server.policy.WindowManagerPolicy: java.lang.String userRotationModeToString(int)>($i10);

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r71);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUserRotation=");

        $i11 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        $r74 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i11);

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r76 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r76);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mAllowAllRotations=");

        $i12 = r0.<com.android.server.wm.DisplayRotation: int mAllowAllRotations>;

        $r79 = staticinvoke <com.android.server.wm.DisplayRotation: java.lang.String allowAllRotationsToString(int)>($i12);

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r81 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r81);

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDemoHdmiRotation=");

        $i13 = r0.<com.android.server.wm.DisplayRotation: int mDemoHdmiRotation>;

        $r85 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i13);

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r87);

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDemoHdmiRotationLock=");

        $z1 = r0.<com.android.server.wm.DisplayRotation: boolean mDemoHdmiRotationLock>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r91 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r91);

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUndockedHdmiRotation=");

        $i14 = r0.<com.android.server.wm.DisplayRotation: int mUndockedHdmiRotation>;

        $r94 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i14);

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r94);

        $r96 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r96);

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLidOpenRotation=");

        $i15 = r0.<com.android.server.wm.DisplayRotation: int mLidOpenRotation>;

        $r100 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i15);

        virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r102 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r102);

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mFixedToUserRotation=");

        $z2 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean isFixedToUserRotation()>();

        virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r107 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r107);

        return;
    }

    void freezeRotation(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        i0 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        goto label1;

     label1:
        virtualinvoke r0.<com.android.server.wm.DisplayRotation: void setUserRotation(int,int)>(1, i0);

        return;
    }

    public int getCurrentAppOrientation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        return $i0;
    }

    public com.android.server.wm.DisplayPolicy getDisplayPolicy()
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.DisplayPolicy $r1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        return $r1;
    }

    public int getLandscapeRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        return $i0;
    }

    int getLastOrientation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mLastOrientation>;

        return $i0;
    }

    public com.android.server.policy.WindowOrientationListener getOrientationListener()
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.DisplayRotation$OrientationListener $r1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        return $r1;
    }

    public int getPortraitRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        return $i0;
    }

    int getRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        return $i0;
    }

    public int getSeascapeRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation>;

        return $i0;
    }

    public int getUpsideDownRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation>;

        return $i0;
    }

    public int getUserRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        return $i0;
    }

    public int getUserRotationMode()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        return $i0;
    }

    boolean hasSeamlessRotatingWindow()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount>;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isFixedToUserRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 = r0.<com.android.server.wm.DisplayRotation: int mFixedToUserRotation>;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean mDefaultFixedToUserRotation>;

        return $z0;

     label1:
        return 1;

     label2:
        return 0;
    }

    boolean isRotatingSeamlessly()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean mRotatingSeamlessly>;

        return $z0;
    }

    boolean isRotationFrozen()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean z0, z2, z3;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        z0 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        z2 = 1;

        if z0 != 0 goto label3;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i1 != 1 goto label1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;

     label3:
        $r1 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "accelerometer_rotation", 0, -2);

        if $i0 != 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        z3 = 0;

     label5:
        return z3;
    }

    boolean isWaitingForRemoteRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean mIsWaitingForRemoteRotation>;

        return $z0;
    }

    public void lambda$onSeamlessRotationTimeout$2$DisplayRotation(boolean[], com.android.server.wm.WindowState)
    {
        com.android.server.wm.DisplayRotation r0;
        boolean[] r1;
        com.android.server.wm.WindowState r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 := @parameter0: boolean[];

        r2 := @parameter1: com.android.server.wm.WindowState;

        $z0 = r2.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r1[0] = 1;

        virtualinvoke r2.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        virtualinvoke r2.<com.android.server.wm.WindowState: void finishSeamlessRotation(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.DisplayRotation: void markForSeamlessRotation(com.android.server.wm.WindowState,boolean)>(r2, 0);

        return;
    }

    void markForSeamlessRotation(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.WindowState r1;
        boolean z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.wm.DisplayContent $r2;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if z0 == $z1 goto label6;

        $z2 = r1.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate>;

        if $z2 == 0 goto label1;

        goto label6;

     label1:
        r1.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated> = z0;

        if z0 == 0 goto label2;

        $i3 = r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount>;

        $i4 = $i3 + 1;

        r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount> = $i4;

        goto label3;

     label2:
        $i0 = r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount>;

        $i1 = $i0 - 1;

        r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount> = $i1;

     label3:
        $i2 = r0.<com.android.server.wm.DisplayRotation: int mSeamlessRotationCount>;

        if $i2 != 0 goto label5;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label4;

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r3 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, -576070986, 0, null, $r3);

     label4:
        r0.<com.android.server.wm.DisplayRotation: boolean mRotatingSeamlessly> = 0;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void finishFixedRotationAnimationIfPossible()>();

        virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean updateRotationAndSendNewConfigIfChanged()>();

     label5:
        return;

     label6:
        return;
    }

    boolean needsUpdate()
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mLastOrientation>;

        $i2 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: int rotationForOrientation(int,int)>($i1, i0);

        if i0 == $i2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void onSeamlessRotationTimeout()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean[] r1;
        com.android.server.wm._$$Lambda$DisplayRotation$U_vCBL3JcMFTFCBOM9boFL8nSM0 $r2;
        com.android.server.wm.DisplayContent $r3;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r4;
        com.android.server.wm.WindowSurfacePlacer $r5;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 = newarray (boolean)[1];

        r1[0] = 0;

        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r2 = new com.android.server.wm._$$Lambda$DisplayRotation$U_vCBL3JcMFTFCBOM9boFL8nSM0;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$DisplayRotation$U_vCBL3JcMFTFCBOM9boFL8nSM0: void <init>(com.android.server.wm.DisplayRotation,boolean[])>(r0, r1);

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r2, 1);

        $z0 = r1[0];

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r5.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label1:
        return;
    }

    public void onUserSwitch()
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.DisplayRotation$SettingsObserver r1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$SettingsObserver mSettingsObserver>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.DisplayRotation$SettingsObserver: void onChange(boolean)>(0);

     label1:
        return;
    }

    void pause()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mDeferredRotationPauseCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.DisplayRotation: int mDeferredRotationPauseCount> = $i1;

        return;
    }

    void prepareNormalRotationAnimation()
    {
        com.android.server.wm.DisplayRotation r0;
        com.android.server.wm.DisplayRotation$RotationAnimationPair r1;
        com.android.server.wm.DisplayContent $r2;
        int $i0, $i1;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.DisplayRotation;

        virtualinvoke r0.<com.android.server.wm.DisplayRotation: void cancelSeamlessRotation()>();

        r1 = specialinvoke r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair selectRotationAnimation()>();

        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $i1 = r1.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit>;

        $i0 = r1.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter>;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void startFreezingDisplay(int,int,com.android.server.wm.DisplayContent)>($i1, $i0, $r2);

        return;
    }

    boolean respectAppRequestedOrientation()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $z0 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean isFixedToUserRotation()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    void restoreSettings(int, int, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i3, i4, i5, i6;
        boolean $z0;
        java.lang.StringBuilder $r1, $r8;
        com.android.server.wm.DisplayContent $r5, $r12;
        java.lang.String $r7, $r14;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        r0.<com.android.server.wm.DisplayRotation: int mFixedToUserRotation> = i4;

        $z0 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        if $z0 == 0 goto label1;

        return;

     label1:
        i5 = i3;

        if i3 == 0 goto label2;

        i5 = i3;

        if i3 == 1 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to restore an invalid user rotation mode ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r12 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r14);

        i5 = 0;

     label2:
        if i0 < 0 goto label3;

        i6 = i0;

        if i0 <= 3 goto label4;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to restore an invalid user rotation ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        i6 = 0;

     label4:
        r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode> = i5;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotation> = i6;

        return;
    }

    void resume()
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 = r0.<com.android.server.wm.DisplayRotation: int mDeferredRotationPauseCount>;

        if i0 > 0 goto label1;

        return;

     label1:
        i1 = i0 + -1;

        r0.<com.android.server.wm.DisplayRotation: int mDeferredRotationPauseCount> = i1;

        if i1 != 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean updateRotationAndSendNewConfigIfChanged()>();

     label2:
        return;
    }

    int rotationForOrientation(int, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, $i26;
        java.lang.String r1, r2, r3, $r12, $r13, $r14, r20, r21;
        long l2, l3, l4;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        com.android.server.wm.DisplayPolicy $r4, $r5, $r6, $r7, $r8, $r9;
        android.content.Context $r10;
        android.content.res.Resources $r11;
        java.lang.Object[] $r15;
        com.android.server.wm.ProtoLogGroup $r16;
        java.lang.Long $r17, $r18, $r19;
        com.android.server.wm.DisplayRotation$OrientationListener r22;
        byte b27;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label03;

        $r12 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String screenOrientationToString(int)>(i0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        l2 = (long) i0;

        $r13 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>(i1);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        l3 = (long) i1;

        $i20 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        $r14 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>($i20);

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        $i21 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        l4 = (long) $i21;

        $i22 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i22 != 1 goto label01;

        r20 = "USER_ROTATION_LOCKED";

        goto label02;

     label01:
        r20 = "";

     label02:
        r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r15 = newarray (java.lang.Object)[7];

        $r15[0] = r1;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r15[1] = $r17;

        $r15[2] = r2;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r15[3] = $r18;

        $r15[4] = r3;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r15[5] = $r19;

        $r15[6] = r21;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, 202263690, 1092, null, $r15);

     label03:
        $z17 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean isFixedToUserRotation()>();

        if $z17 == 0 goto label04;

        $i19 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        return $i19;

     label04:
        r22 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$OrientationListener mOrientationListener>;

        if r22 == null goto label05;

        i23 = virtualinvoke r22.<com.android.server.wm.DisplayRotation$OrientationListener: int getProposedRotation()>();

        goto label06;

     label05:
        i23 = -1;

     label06:
        i24 = i23;

        if i23 >= 0 goto label07;

        i24 = i1;

     label07:
        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i25 = virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: int getLidState()>();

        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        i5 = virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: int getDockMode()>();

        $r6 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z0 = virtualinvoke $r6.<com.android.server.wm.DisplayPolicy: boolean isHdmiPlugged()>();

        $r7 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z1 = virtualinvoke $r7.<com.android.server.wm.DisplayPolicy: boolean isCarDockEnablesAccelerometer()>();

        $r8 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        z2 = virtualinvoke $r8.<com.android.server.wm.DisplayPolicy: boolean isDeskDockEnablesAccelerometer()>();

        $z4 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        if $z4 != 0 goto label08;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        goto label33;

     label08:
        if i25 != 1 goto label09;

        $i18 = r0.<com.android.server.wm.DisplayRotation: int mLidOpenRotation>;

        if $i18 < 0 goto label09;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mLidOpenRotation>;

        goto label33;

     label09:
        if i5 != 2 goto label13;

        if z1 != 0 goto label10;

        $i17 = r0.<com.android.server.wm.DisplayRotation: int mCarDockRotation>;

        if $i17 < 0 goto label13;

     label10:
        if z1 == 0 goto label11;

        goto label12;

     label11:
        i24 = r0.<com.android.server.wm.DisplayRotation: int mCarDockRotation>;

     label12:
        goto label33;

     label13:
        if i5 == 1 goto label14;

        if i5 == 3 goto label14;

        if i5 != 4 goto label15;

     label14:
        if z2 != 0 goto label31;

        $i12 = r0.<com.android.server.wm.DisplayRotation: int mDeskDockRotation>;

        if $i12 < 0 goto label15;

        goto label31;

     label15:
        if z0 == 0 goto label16;

        $z16 = r0.<com.android.server.wm.DisplayRotation: boolean mDemoHdmiRotationLock>;

        if $z16 == 0 goto label16;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mDemoHdmiRotation>;

        goto label33;

     label16:
        if z0 == 0 goto label17;

        if i5 != 0 goto label17;

        $i16 = r0.<com.android.server.wm.DisplayRotation: int mUndockedHdmiRotation>;

        if $i16 < 0 goto label17;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mUndockedHdmiRotation>;

        goto label33;

     label17:
        $z18 = r0.<com.android.server.wm.DisplayRotation: boolean mDemoRotationLock>;

        if $z18 == 0 goto label18;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mDemoRotation>;

        goto label33;

     label18:
        $r9 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z13 = virtualinvoke $r9.<com.android.server.wm.DisplayPolicy: boolean isPersistentVrModeEnabled()>();

        if $z13 == 0 goto label19;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        goto label33;

     label19:
        if i0 != 14 goto label20;

        i24 = i1;

        goto label33;

     label20:
        $z14 = r0.<com.android.server.wm.DisplayRotation: boolean mSupportAutoRotation>;

        if $z14 != 0 goto label21;

        i24 = -1;

        goto label33;

     label21:
        $i13 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i13 != 0 goto label22;

        if i0 == 2 goto label25;

        if i0 == -1 goto label25;

        if i0 == 11 goto label25;

        if i0 == 12 goto label25;

        if i0 == 13 goto label25;

     label22:
        if i0 == 4 goto label25;

        if i0 == 10 goto label25;

        if i0 == 6 goto label25;

        if i0 != 7 goto label23;

        goto label25;

     label23:
        $i15 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i15 != 1 goto label24;

        if i0 == 5 goto label24;

        if i0 == 0 goto label24;

        if i0 == 1 goto label24;

        if i0 == 8 goto label24;

        if i0 == 9 goto label24;

        i24 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        goto label33;

     label24:
        i24 = -1;

        goto label33;

     label25:
        $i26 = r0.<com.android.server.wm.DisplayRotation: int mAllowAllRotations>;

        if $i26 != -1 goto label28;

        $r10 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $z15 = virtualinvoke $r11.<android.content.res.Resources: boolean getBoolean(int)>(17891341);

        if $z15 == 0 goto label26;

        b27 = 1;

        goto label27;

     label26:
        b27 = 0;

     label27:
        r0.<com.android.server.wm.DisplayRotation: int mAllowAllRotations> = b27;

     label28:
        if i24 != 2 goto label30;

        $i14 = r0.<com.android.server.wm.DisplayRotation: int mAllowAllRotations>;

        if $i14 == 1 goto label30;

        if i0 == 10 goto label30;

        if i0 != 13 goto label29;

        goto label30;

     label29:
        i24 = i1;

        goto label33;

     label30:
        goto label33;

     label31:
        if z2 == 0 goto label32;

        goto label33;

     label32:
        i24 = r0.<com.android.server.wm.DisplayRotation: int mDeskDockRotation>;

     label33:
        if i0 == 0 goto label48;

        if i0 == 1 goto label46;

        if i0 == 11 goto label43;

        if i0 == 12 goto label40;

        tableswitch(i0)
        {
            case 6: goto label43;
            case 7: goto label40;
            case 8: goto label38;
            case 9: goto label36;
            default: goto label34;
        };

     label34:
        if i24 < 0 goto label35;

        return i24;

     label35:
        return 0;

     label36:
        $z11 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isAnyPortrait(int)>(i24);

        if $z11 == 0 goto label37;

        return i24;

     label37:
        $i10 = r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation>;

        return $i10;

     label38:
        $z12 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isLandscapeOrSeascape(int)>(i24);

        if $z12 == 0 goto label39;

        return i24;

     label39:
        $i11 = r0.<com.android.server.wm.DisplayRotation: int mSeascapeRotation>;

        return $i11;

     label40:
        $z9 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isAnyPortrait(int)>(i24);

        if $z9 == 0 goto label41;

        return i24;

     label41:
        $z10 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isAnyPortrait(int)>(i1);

        if $z10 == 0 goto label42;

        return i1;

     label42:
        $i9 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        return $i9;

     label43:
        $z7 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isLandscapeOrSeascape(int)>(i24);

        if $z7 == 0 goto label44;

        return i24;

     label44:
        $z8 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isLandscapeOrSeascape(int)>(i1);

        if $z8 == 0 goto label45;

        return i1;

     label45:
        $i8 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        return $i8;

     label46:
        $z6 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isAnyPortrait(int)>(i24);

        if $z6 == 0 goto label47;

        return i24;

     label47:
        $i7 = r0.<com.android.server.wm.DisplayRotation: int mPortraitRotation>;

        return $i7;

     label48:
        $z5 = specialinvoke r0.<com.android.server.wm.DisplayRotation: boolean isLandscapeOrSeascape(int)>(i24);

        if $z5 == 0 goto label49;

        return i24;

     label49:
        $i6 = r0.<com.android.server.wm.DisplayRotation: int mLandscapeRotation>;

        return $i6;
    }

    void setFixedToUserRotation(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.DisplayWindowSettings $r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mFixedToUserRotation>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.DisplayRotation: int mFixedToUserRotation> = i0;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r2.<com.android.server.wm.DisplayWindowSettings: void setFixedToUserRotation(com.android.server.wm.DisplayContent,int)>($r1, i0);

        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void updateRotation(boolean,boolean)>(1, 0);

        return;
    }

    void setRotation(int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.DisplayRotation: int mRotation> = i0;

        return;
    }

    void setUserRotation(int, int)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1, $i2, i3;
        boolean z0, z3;
        android.content.ContentResolver r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.DisplayWindowSettings $r3;
        com.android.server.wm.WindowManagerService $r4;
        android.content.Context $r5;
        byte b5;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        z0 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        if z0 == 0 goto label3;

        $r5 = r0.<com.android.server.wm.DisplayRotation: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if i3 != 1 goto label1;

        b5 = 0;

        goto label2;

     label1:
        b5 = 1;

     label2:
        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accelerometer_rotation", b5, -2);

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_rotation", i0, -2);

        return;

     label3:
        z3 = 0;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode>;

        if $i1 == i3 goto label4;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotationMode> = i3;

        z3 = 1;

     label4:
        $i2 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        if $i2 == i0 goto label5;

        r0.<com.android.server.wm.DisplayRotation: int mUserRotation> = i0;

        z3 = 1;

     label5:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r3.<com.android.server.wm.DisplayWindowSettings: void setUserRotation(com.android.server.wm.DisplayContent,int,int)>($r2, i3, i0);

        if z3 == 0 goto label6;

        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void updateRotation(boolean,boolean)>(1, 0);

     label6:
        return;
    }

    boolean shouldRotateSeamlessly(int, int, boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, i2, $i3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.android.server.wm.WindowState r1, $r5, $r13;
        com.android.server.wm.DisplayContent $r2, $r4, $r8, $r10, $r12;
        com.android.server.wm.DisplayPolicy $r3, $r15;
        android.view.WindowManager$LayoutParams $r6;
        com.android.server.wm.ActivityRecord $r7, $r14;
        com.android.server.wm.TaskDisplayArea $r9;
        com.android.server.wm.'-$$Lambda$DisplayRotation$lsr6xPkBu86tvqZ1VLc3Gk1VT6c' $r11;
        java.util.function.Predicate r16;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean hasTopFixedRotationLaunchingApp()>();

        if $z1 == 0 goto label01;

        return 1;

     label01:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: com.android.server.wm.WindowState getTopFullscreenOpaqueWindow()>();

        if r1 == null goto label12;

        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if r1 == $r5 goto label02;

        goto label12;

     label02:
        $r6 = virtualinvoke r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i3 = $r6.<android.view.WindowManager$LayoutParams: int rotationAnimation>;

        if $i3 != 3 goto label11;

        $z2 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z2 == 0 goto label03;

        goto label11;

     label03:
        i2 = r0.<com.android.server.wm.DisplayRotation: int mUpsideDownRotation>;

        if i0 == i2 goto label10;

        if i1 != i2 goto label04;

        goto label10;

     label04:
        $z3 = r0.<com.android.server.wm.DisplayRotation: boolean mAllowSeamlessRotationDespiteNavBarMoving>;

        if $z3 != 0 goto label05;

        $r15 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayPolicy mDisplayPolicy>;

        $z7 = virtualinvoke $r15.<com.android.server.wm.DisplayPolicy: boolean navigationBarCanMove()>();

        if $z7 != 0 goto label05;

        return 0;

     label05:
        $r7 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r7 == null goto label06;

        $r14 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z6 = virtualinvoke $r14.<com.android.server.wm.ActivityRecord: boolean matchParentBounds()>();

        if $z6 != 0 goto label06;

        return 0;

     label06:
        $r8 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $z4 = virtualinvoke $r9.<com.android.server.wm.TaskDisplayArea: boolean hasPinnedTask()>();

        if $z4 != 0 goto label09;

        $r10 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $z5 = virtualinvoke $r10.<com.android.server.wm.DisplayContent: boolean hasAlertWindowSurfaces()>();

        if $z5 == 0 goto label07;

        goto label09;

     label07:
        if z0 != 0 goto label08;

        $r12 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r11 = <com.android.server.wm._$$Lambda$DisplayRotation$lsr6xPkBu86tvqZ1VLc3Gk1VT6c: com.android.server.wm.'-$$Lambda$DisplayRotation$lsr6xPkBu86tvqZ1VLc3Gk1VT6c' INSTANCE>;

        r16 = (java.util.function.Predicate) $r11;

        $r13 = virtualinvoke $r12.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>(r16);

        if $r13 == null goto label08;

        return 0;

     label08:
        return 1;

     label09:
        return 0;

     label10:
        return 0;

     label11:
        return 0;

     label12:
        return 0;
    }

    void thawRotation()
    {
        com.android.server.wm.DisplayRotation r0;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        $i0 = r0.<com.android.server.wm.DisplayRotation: int mUserRotation>;

        virtualinvoke r0.<com.android.server.wm.DisplayRotation: void setUserRotation(int,int)>(0, $i0);

        return;
    }

    boolean updateOrientation(int, boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = r0.<com.android.server.wm.DisplayRotation: int mLastOrientation>;

        if i0 != $i1 goto label1;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.wm.DisplayRotation: int mLastOrientation> = i0;

        $i2 = r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation>;

        if i0 == $i2 goto label2;

        r0.<com.android.server.wm.DisplayRotation: int mCurrentAppOrientation> = i0;

        $z1 = r0.<com.android.server.wm.DisplayRotation: boolean isDefaultDisplay>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.wm.DisplayRotation: void updateOrientationListenerLw()>();

     label2:
        $z2 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean updateRotationUnchecked(boolean)>(z0);

        return $z2;
    }

    public void updateOrientationListener()
    {
        com.android.server.wm.DisplayRotation r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 = r0.<com.android.server.wm.DisplayRotation: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.wm.DisplayRotation: void updateOrientationListenerLw()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean updateRotationAndSendNewConfigIfChanged()
    {
        com.android.server.wm.DisplayRotation r0;
        boolean z0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.DisplayRotation;

        z0 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean updateRotationUnchecked(boolean)>(0);

        if z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r1.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label1:
        return z0;
    }

    boolean updateRotationUnchecked(boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.String r1, $r16, $r17, $r23, $r24, $r25, r45, r46, r47, r48;
        com.android.server.wm.DisplayContent $r2, $r6, $r8, $r9, $r34, $r36;
        com.android.server.wm.WindowManagerService $r3, $r4, $r5, $r35;
        com.android.server.wm.WindowManagerService$H $r7;
        java.lang.Object[] $r10, $r18, $r26, $r32, $r38, $r40, $r42;
        com.android.server.wm.ProtoLogGroup $r11, $r19, $r27, $r33, $r39, $r41, $r43;
        java.lang.Long $r12, $r13, $r14, $r15, $r20, $r21, $r22, $r28, $r29, $r30, $r31;
        com.android.server.wm.DisplayContent$FixedRotationTransitionListener $r37;
        com.android.server.wm.ScreenRotationAnimation r44;
        long l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17;

        r0 := @this: com.android.server.wm.DisplayRotation;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        i0 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if z0 != 0 goto label07;

        $i6 = r0.<com.android.server.wm.DisplayRotation: int mDeferredRotationPauseCount>;

        if $i6 <= 0 goto label02;

        $z12 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z12 == 0 goto label01;

        $r43 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r42 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r43, 1497304204, 0, null, $r42);

     label01:
        return 0;

     label02:
        $r34 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        r44 = virtualinvoke $r34.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

        if r44 == null goto label04;

        $z10 = virtualinvoke r44.<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>();

        if $z10 == 0 goto label04;

        $z11 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z11 == 0 goto label03;

        $r41 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r40 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r41, 292904800, 0, null, $r40);

     label03:
        return 0;

     label04:
        $r35 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $z7 = $r35.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z7 == 0 goto label06;

        $z9 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z9 == 0 goto label05;

        $r39 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r38 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r39, 1947239194, 0, null, $r38);

     label05:
        return 0;

     label06:
        $r36 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r37 = $r36.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$FixedRotationTransitionListener mFixedRotationTransitionListener>;

        $z8 = virtualinvoke $r37.<com.android.server.wm.DisplayContent$FixedRotationTransitionListener: boolean isTopFixedOrientationRecentsAnimating()>();

        if $z8 == 0 goto label07;

        return 0;

     label07:
        $r3 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $z1 = $r3.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z1 != 0 goto label09;

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z6 == 0 goto label08;

        $r33 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r32 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r33, -1117599386, 0, null, $r32);

     label08:
        return 0;

     label09:
        i1 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        i2 = r0.<com.android.server.wm.DisplayRotation: int mLastOrientation>;

        i3 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: int rotationForOrientation(int,int)>(i2, i1);

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z2 == 0 goto label10;

        $r23 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>(i3);

        r45 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23);

        l7 = (long) i3;

        l8 = (long) i0;

        $r24 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String screenOrientationToString(int)>(i2);

        r46 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24);

        l9 = (long) i2;

        $r25 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>(i1);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r25);

        l10 = (long) i1;

        $r27 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r26 = newarray (java.lang.Object)[7];

        $r26[0] = r45;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7);

        $r26[1] = $r28;

        $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        $r26[2] = $r29;

        $r26[3] = r46;

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l9);

        $r26[4] = $r30;

        $r26[5] = r1;

        $r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10);

        $r26[6] = $r31;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r27, -1263316010, 4372, null, $r26);

     label10:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label11;

        l11 = (long) i0;

        $r16 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String screenOrientationToString(int)>(i2);

        r47 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        l12 = (long) i2;

        $r17 = staticinvoke <android.view.Surface: java.lang.String rotationToString(int)>(i3);

        r48 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        l13 = (long) i3;

        $r19 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r18 = newarray (java.lang.Object)[5];

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11);

        $r18[0] = $r20;

        $r18[1] = r47;

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l12);

        $r18[2] = $r21;

        $r18[3] = r48;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13);

        $r18[4] = $r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r19, -766059044, 273, null, $r18);

     label11:
        if i1 != i3 goto label12;

        return 0;

     label12:
        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z4 == 0 goto label13;

        l14 = (long) i0;

        l15 = (long) i3;

        l16 = (long) i1;

        l17 = (long) i2;

        $r11 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r10 = newarray (java.lang.Object)[4];

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l15);

        $r10[1] = $r13;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l16);

        $r10[2] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l17);

        $r10[3] = $r15;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r11, -1730156332, 85, null, $r10);

        goto label13;

     label13:
        $i4 = staticinvoke <com.android.server.wm.DisplayContent: int deltaRotation(int,int)>(i3, i1);

        if $i4 == 2 goto label14;

        $r9 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        $r9.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig> = 1;

        goto label14;

     label14:
        r0.<com.android.server.wm.DisplayRotation: int mRotation> = i3;

        $r4 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r4.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen> = 1;

        $r5 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r6 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService$H: void sendNewMessageDelayed(int,java.lang.Object,long)>(11, $r6, 2000L);

        $r8 = r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r8.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $z5 = virtualinvoke r0.<com.android.server.wm.DisplayRotation: boolean shouldRotateSeamlessly(int,int,boolean)>(i1, i3, z0);

        if $z5 == 0 goto label15;

        specialinvoke r0.<com.android.server.wm.DisplayRotation: void prepareSeamlessRotation()>();

        goto label16;

     label15:
        virtualinvoke r0.<com.android.server.wm.DisplayRotation: void prepareNormalRotationAnimation()>();

     label16:
        $i5 = r0.<com.android.server.wm.DisplayRotation: int mRotation>;

        specialinvoke r0.<com.android.server.wm.DisplayRotation: void startRemoteRotation(int,int)>(i1, $i5);

        return 1;
    }

    void updateUserDependentConfiguration(android.content.res.Resources)
    {
        com.android.server.wm.DisplayRotation r0;
        android.content.res.Resources r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayRotation;

        r1 := @parameter0: android.content.res.Resources;

        $z0 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891347);

        r0.<com.android.server.wm.DisplayRotation: boolean mAllowSeamlessRotationDespiteNavBarMoving> = $z0;

        return;
    }

    boolean validateRotationAnimation(int, int, boolean)
    {
        com.android.server.wm.DisplayRotation r0;
        int i0, i1, $i2, $i3;
        com.android.server.wm.DisplayRotation$RotationAnimationPair r1;
        boolean z1, z2;

        r0 := @this: com.android.server.wm.DisplayRotation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 := @parameter2: boolean;

        tableswitch(i0)
        {
            case 17432711: goto label2;
            case 17432712: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        if z1 == 0 goto label3;

        return 0;

     label3:
        r1 = specialinvoke r0.<com.android.server.wm.DisplayRotation: com.android.server.wm.DisplayRotation$RotationAnimationPair selectRotationAnimation()>();

        $i2 = r1.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mExit>;

        if i0 != $i2 goto label4;

        $i3 = r1.<com.android.server.wm.DisplayRotation$RotationAnimationPair: int mEnter>;

        if i1 != $i3 goto label4;

        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        return z2;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DisplayRotation: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.DisplayRotation: int REMOTE_ROTATION_TIMEOUT_MS> = 800;

        <com.android.server.wm.DisplayRotation: int ALLOW_ALL_ROTATIONS_UNDEFINED> = -1;

        <com.android.server.wm.DisplayRotation: int ALLOW_ALL_ROTATIONS_ENABLED> = 1;

        <com.android.server.wm.DisplayRotation: int ALLOW_ALL_ROTATIONS_DISABLED> = 0;

        return;
    }
}
