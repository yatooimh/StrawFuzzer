class com.android.server.wm.DisplayWindowSettings$AtomicFileStorage extends java.lang.Object implements com.android.server.wm.DisplayWindowSettings$SettingPersister
{
    private final android.util.AtomicFile mAtomicFile;

    void <init>()
    {
        com.android.server.wm.DisplayWindowSettings$AtomicFileStorage r0;
        java.io.File $r2, $r3, $r4;
        boolean $z0;
        android.util.AtomicFile $r5;

        r0 := @this: com.android.server.wm.DisplayWindowSettings$AtomicFileStorage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.io.File;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "system");

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "display_settings.xml");

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: void copyVendorSettings(java.io.File)>($r2);

     label1:
        $r5 = new android.util.AtomicFile;

        specialinvoke $r5.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r2, "wm-displays");

        r0.<com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: android.util.AtomicFile mAtomicFile> = $r5;

        return;
    }

    private static void copyVendorSettings(java.io.File)
    {
        java.io.File $r1, $r2, r4;
        boolean $z0;
        java.lang.Throwable $r3;

        r4 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "etc/display_settings.xml");

        $z0 = virtualinvoke $r1.<java.io.File: boolean canRead()>();

        if $z0 == 0 goto label4;

     label1:
        staticinvoke <android.os.FileUtils: long copy(java.io.File,java.io.File)>($r1, r4);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Failed to copy vendor display_settings.xml");

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void finishWrite(java.io.OutputStream, boolean)
    {
        com.android.server.wm.DisplayWindowSettings$AtomicFileStorage r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        android.util.AtomicFile $r7, $r8;
        java.io.OutputStream r9;
        java.io.FileOutputStream r10;

        r0 := @this: com.android.server.wm.DisplayWindowSettings$AtomicFileStorage;

        r9 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $z1 = r9 instanceof java.io.FileOutputStream;

        if $z1 == 0 goto label3;

        r10 = (java.io.FileOutputStream) r9;

        if z0 == 0 goto label1;

        $r8 = r0.<com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r8.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r10);

        goto label2;

     label1:
        $r7 = r0.<com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r7.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r10);

     label2:
        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected OutputStream as argument: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public java.io.InputStream openRead() throws java.io.FileNotFoundException
    {
        com.android.server.wm.DisplayWindowSettings$AtomicFileStorage r0;
        android.util.AtomicFile $r1;
        java.io.FileInputStream $r2;

        r0 := @this: com.android.server.wm.DisplayWindowSettings$AtomicFileStorage;

        $r1 = r0.<com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: android.util.AtomicFile mAtomicFile>;

        $r2 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        return $r2;
    }

    public java.io.OutputStream startWrite() throws java.io.IOException
    {
        com.android.server.wm.DisplayWindowSettings$AtomicFileStorage r0;
        android.util.AtomicFile $r1;
        java.io.FileOutputStream $r2;

        r0 := @this: com.android.server.wm.DisplayWindowSettings$AtomicFileStorage;

        $r1 = r0.<com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: android.util.AtomicFile mAtomicFile>;

        $r2 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        return $r2;
    }
}
