class com.android.server.wm.DisplayWindowSettings extends java.lang.Object
{
    private static final java.lang.String DISPLAY_SETTINGS_FILE_NAME;
    private static final int IDENTIFIER_PORT;
    private static final int IDENTIFIER_UNIQUE_ID;
    private static final java.lang.String SYSTEM_DIRECTORY;
    private static final java.lang.String TAG;
    private static final java.lang.String VENDOR_DISPLAY_SETTINGS_PATH;
    private static final java.lang.String WM_DISPLAY_COMMIT_TAG;
    private final java.util.HashMap mEntries;
    private int mIdentifier;
    private final com.android.server.wm.WindowManagerService mService;
    private final com.android.server.wm.DisplayWindowSettings$SettingPersister mStorage;

    void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.DisplayWindowSettings$AtomicFileStorage $r2;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        $r2 = new com.android.server.wm.DisplayWindowSettings$AtomicFileStorage;

        specialinvoke $r2.<com.android.server.wm.DisplayWindowSettings$AtomicFileStorage: void <init>()>();

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayWindowSettings$SettingPersister)>(r1, $r2);

        return;
    }

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DisplayWindowSettings$SettingPersister)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.DisplayWindowSettings$SettingPersister r2;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.DisplayWindowSettings$SettingPersister;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries> = $r3;

        r0.<com.android.server.wm.DisplayWindowSettings: int mIdentifier> = 0;

        r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$SettingPersister mStorage> = r2;

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void readSettings()>();

        return;
    }

    private boolean getBooleanAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: boolean getBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r1, r2, 0);

        return $z0;
    }

    private boolean getBooleanAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String, boolean)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        java.lang.String r1, r4;
        boolean z0, z1;
        java.lang.Throwable $r2;
        org.xmlpull.v1.XmlPullParser r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r3 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

     label1:
        r4 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r1);

     label2:
        if r4 == null goto label5;

     label3:
        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r4);

     label4:
        z1 = z0;

        goto label5;

     label5:
        return z1;

     label6:
        $r2 := @caughtexception;

        return z1;

        catch java.lang.NumberFormatException from label1 to label2 with label6;
        catch java.lang.NumberFormatException from label3 to label4 with label6;
    }

    private com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        android.view.DisplayInfo r1;
        java.util.HashMap $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.String $r4, r8;
        com.android.server.wm.DisplayWindowSettings$Entry $r7, r9, r10;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: android.view.DisplayInfo;

        r8 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: java.lang.String getIdentifier(android.view.DisplayInfo)>(r1);

        $r2 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.android.server.wm.DisplayWindowSettings$Entry) $r3;

        if r9 == null goto label1;

        return r9;

     label1:
        $r5 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r4 = r1.<android.view.DisplayInfo: java.lang.String name>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r10 = (com.android.server.wm.DisplayWindowSettings$Entry) $r6;

        if r10 == null goto label2;

        $r7 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry updateIdentifierForEntry(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r10, r1);

        return $r7;

     label2:
        return null;
    }

    private java.lang.String getIdentifier(android.view.DisplayInfo)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        byte b0;
        int $i1, $i2;
        android.view.DisplayAddress $r1, $r2, $r3;
        boolean $z0;
        android.view.DisplayAddress$Physical $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, $r11;
        android.view.DisplayInfo r9;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r9 := @parameter0: android.view.DisplayInfo;

        $i1 = r0.<com.android.server.wm.DisplayWindowSettings: int mIdentifier>;

        if $i1 != 1 goto label1;

        $r1 = r9.<android.view.DisplayInfo: android.view.DisplayAddress address>;

        if $r1 == null goto label1;

        $r2 = r9.<android.view.DisplayInfo: android.view.DisplayAddress address>;

        $z0 = $r2 instanceof android.view.DisplayAddress$Physical;

        if $z0 == 0 goto label1;

        $r3 = r9.<android.view.DisplayInfo: android.view.DisplayAddress address>;

        $r4 = (android.view.DisplayAddress$Physical) $r3;

        b0 = virtualinvoke $r4.<android.view.DisplayAddress$Physical: byte getPort()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port:");

        $i2 = staticinvoke <java.lang.Byte: int toUnsignedInt(byte)>(b0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        $r11 = r9.<android.view.DisplayInfo: java.lang.String uniqueId>;

        return $r11;
    }

    private int getIntAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, r2, 0);

        return $i0;
    }

    private int getIntAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        java.lang.String r1, r4;
        int i0, i1;
        java.lang.Throwable $r2;
        org.xmlpull.v1.XmlPullParser r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r3 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

     label1:
        r4 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r1);

     label2:
        if r4 == null goto label5;

     label3:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

     label4:
        i1 = i0;

        goto label5;

     label5:
        return i1;

     label6:
        $r2 := @caughtexception;

        return i1;

        catch java.lang.NumberFormatException from label1 to label2 with label6;
        catch java.lang.NumberFormatException from label3 to label4 with label6;
    }

    private com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayWindowSettings$Entry r1, $r2, r5;
        java.lang.String $r3;
        android.view.DisplayInfo r4;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r4 := @parameter0: android.view.DisplayInfo;

        r1 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)>(r4);

        if r1 == null goto label1;

        r5 = r1;

        goto label2;

     label1:
        $r2 = new com.android.server.wm.DisplayWindowSettings$Entry;

        $r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: java.lang.String getIdentifier(android.view.DisplayInfo)>(r4);

        specialinvoke $r2.<com.android.server.wm.DisplayWindowSettings$Entry: void <init>(java.lang.String,com.android.server.wm.DisplayWindowSettings$1)>($r3, null);

        r5 = $r2;

     label2:
        return r5;
    }

    private int getWindowingModeLocked(com.android.server.wm.DisplayWindowSettings$Entry, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayWindowSettings$Entry r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r4, $r6;
        boolean $z1, $z2, $z3, z4, $z5;
        com.android.server.wm.ActivityTaskManagerService $r5, $r7;
        int i1, i2, i3;
        byte b4;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayWindowSettings$Entry;

        i1 := @parameter1: int;

        if r1 == null goto label1;

        i2 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1000(com.android.server.wm.DisplayWindowSettings$Entry)>(r1);

        goto label2;

     label1:
        i2 = 0;

     label2:
        if i2 != 5 goto label3;

        $r4 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z3 = $r5.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement>;

        if $z3 != 0 goto label3;

        return 1;

     label3:
        i3 = i2;

        if i2 != 0 goto label8;

        z4 = 0;

        $r2 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $z1 = $r2.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays>;

        if $z1 == 0 goto label4;

        z4 = 0;

        if i1 == 0 goto label4;

        z4 = 1;

     label4:
        $r6 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z5 = $r7.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement>;

        if $z5 == 0 goto label6;

        $r3 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $z2 = $r3.<com.android.server.wm.WindowManagerService: boolean mIsPc>;

        if $z2 != 0 goto label5;

        if z4 == 0 goto label6;

     label5:
        b4 = 5;

        goto label7;

     label6:
        b4 = 1;

     label7:
        i3 = b4;

     label8:
        return i3;
    }

    private void readConfig(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException, org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.wm.DisplayWindowSettings r0;
        org.xmlpull.v1.XmlPullParser r1;
        int $i0;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "identifier");

        r0.<com.android.server.wm.DisplayWindowSettings: int mIdentifier> = $i0;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        return;
    }

    private void readDisplay(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException, org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.wm.DisplayWindowSettings r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2;
        com.android.server.wm.DisplayWindowSettings$Entry $r4;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16;
        boolean $z0, $z2, $z4;
        java.util.HashMap $r5;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if r2 == null goto label1;

        $r4 = new com.android.server.wm.DisplayWindowSettings$Entry;

        specialinvoke $r4.<com.android.server.wm.DisplayWindowSettings$Entry: void <init>(java.lang.String,com.android.server.wm.DisplayWindowSettings$1)>(r2, null);

        $i0 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "windowingMode", 0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1002(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i0);

        $i2 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "userRotationMode", 0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$302(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i2);

        $i4 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "userRotation", 0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$402(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i4);

        $i6 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "forcedWidth");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$502(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i6);

        $i8 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "forcedHeight");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$602(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i8);

        $i10 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "forcedDensity");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$702(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i10);

        $i12 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "forcedScalingMode", 0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$802(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i12);

        $i14 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "removeContentMode", 0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1102(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i14);

        $z0 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: boolean getBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "shouldShowWithInsecureKeyguard");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1202(com.android.server.wm.DisplayWindowSettings$Entry,boolean)>($r4, $z0);

        $z2 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: boolean getBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "shouldShowSystemDecors");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1302(com.android.server.wm.DisplayWindowSettings$Entry,boolean)>($r4, $z2);

        $z4 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: boolean getBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "shouldShowIme");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1402(com.android.server.wm.DisplayWindowSettings$Entry,boolean)>($r4, $z4);

        $i16 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "fixedToUserRotation");

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$902(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r4, $i16);

        $r5 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

     label1:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        return;
    }

    private void readSettings()
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0, $i2, i10, i11;
        com.android.server.wm.DisplayWindowSettings$SettingPersister $r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3, $r6, $r8, $r12, $r17, $r22, $r29, $r34, $r41, r46;
        boolean $z0, $z1;
        java.lang.Throwable $r9, $r14, $r19, $r24, $r36, $r37, $r38, $r43;
        java.util.HashMap $r13, $r18, $r23, $r25, $r30, $r35, $r42;
        java.lang.IndexOutOfBoundsException $r26;
        java.lang.NullPointerException $r31;
        java.io.InputStream r44;
        org.xmlpull.v1.XmlPullParser r45;
        java.lang.StringBuilder r47, r52, r54, r56, r58, r60, r62;
        java.lang.IllegalStateException r49;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

     label01:
        $r1 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$SettingPersister mStorage>;

        r44 = interfaceinvoke $r1.<com.android.server.wm.DisplayWindowSettings$SettingPersister: java.io.InputStream openRead()>();

     label02:
        r45 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r44, $r3);

     label03:
        i10 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int next()>();

     label04:
        if i10 == 2 goto label05;

        if i10 == 1 goto label05;

        goto label03;

     label05:
        if i10 != 2 goto label21;

     label06:
        i0 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label07:
        i11 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int next()>();

     label08:
        if i11 == 1 goto label17;

        if i11 != 3 goto label10;

     label09:
        $i2 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i2 <= i0 goto label17;

     label10:
        if i11 == 3 goto label07;

        if i11 != 4 goto label11;

        goto label07;

     label11:
        r46 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r46.<java.lang.String: boolean equals(java.lang.Object)>("display");

        if $z0 == 0 goto label13;

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void readDisplay(org.xmlpull.v1.XmlPullParser)>(r45);

     label12:
        goto label16;

     label13:
        $z1 = virtualinvoke r46.<java.lang.String: boolean equals(java.lang.Object)>("config");

        if $z1 == 0 goto label15;

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void readConfig(org.xmlpull.v1.XmlPullParser)>(r45);

     label14:
        goto label16;

     label15:
        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown element under <display-settings>: ");

        $r6 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r8);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r45);

     label16:
        goto label07;

     label17:
        goto label18;

     label18:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label19:
        goto label53;

     label20:
        $r37 := @caughtexception;

        goto label53;

     label21:
        r49 = new java.lang.IllegalStateException;

        specialinvoke r49.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no start tag found");

        throw r49;

     label22:
        $r24 := @caughtexception;

        goto label54;

     label23:
        $r26 := @caughtexception;

     label24:
        r52 = new java.lang.StringBuilder;

        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r29 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r29);

     label25:
        $r30 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r30.<java.util.HashMap: void clear()>();

     label26:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label27:
        goto label19;

     label28:
        $r38 := @caughtexception;

     label29:
        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r41 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r41);

     label30:
        $r42 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r42.<java.util.HashMap: void clear()>();

     label31:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label32:
        goto label19;

     label33:
        $r9 := @caughtexception;

     label34:
        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r12 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r12);

     label35:
        $r13 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r13.<java.util.HashMap: void clear()>();

     label36:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label37:
        goto label19;

     label38:
        $r14 := @caughtexception;

     label39:
        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r17 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

     label40:
        $r18 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r18.<java.util.HashMap: void clear()>();

     label41:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label42:
        goto label19;

     label43:
        $r31 := @caughtexception;

     label44:
        r60 = new java.lang.StringBuilder;

        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r34 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r34);

     label45:
        $r35 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r35.<java.util.HashMap: void clear()>();

     label46:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label47:
        goto label19;

     label48:
        $r19 := @caughtexception;

     label49:
        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r22 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r22);

     label50:
        $r23 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r23.<java.util.HashMap: void clear()>();

     label51:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label52:
        goto label19;

     label53:
        return;

     label54:
        $r25 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        virtualinvoke $r25.<java.util.HashMap: void clear()>();

     label55:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label56:
        goto label58;

     label57:
        $r43 := @caughtexception;

     label58:
        throw $r24;

     label59:
        $r36 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "No existing display settings, starting empty");

        return;

        catch java.io.IOException from label01 to label02 with label59;
        catch java.lang.IllegalStateException from label02 to label03 with label48;
        catch java.lang.NullPointerException from label02 to label03 with label43;
        catch java.lang.NumberFormatException from label02 to label03 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label33;
        catch java.io.IOException from label02 to label03 with label28;
        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label23;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.IllegalStateException from label03 to label04 with label48;
        catch java.lang.NullPointerException from label03 to label04 with label43;
        catch java.lang.NumberFormatException from label03 to label04 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label33;
        catch java.io.IOException from label03 to label04 with label28;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label23;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.IllegalStateException from label06 to label07 with label48;
        catch java.lang.NullPointerException from label06 to label07 with label43;
        catch java.lang.NumberFormatException from label06 to label07 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label33;
        catch java.io.IOException from label06 to label07 with label28;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label23;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.IllegalStateException from label07 to label08 with label48;
        catch java.lang.NullPointerException from label07 to label08 with label43;
        catch java.lang.NumberFormatException from label07 to label08 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label33;
        catch java.io.IOException from label07 to label08 with label28;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label23;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.IllegalStateException from label09 to label10 with label48;
        catch java.lang.NullPointerException from label09 to label10 with label43;
        catch java.lang.NumberFormatException from label09 to label10 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label33;
        catch java.io.IOException from label09 to label10 with label28;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label23;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.IllegalStateException from label11 to label12 with label48;
        catch java.lang.NullPointerException from label11 to label12 with label43;
        catch java.lang.NumberFormatException from label11 to label12 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label33;
        catch java.io.IOException from label11 to label12 with label28;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label23;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.IllegalStateException from label13 to label14 with label48;
        catch java.lang.NullPointerException from label13 to label14 with label43;
        catch java.lang.NumberFormatException from label13 to label14 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label33;
        catch java.io.IOException from label13 to label14 with label28;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label23;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.IllegalStateException from label15 to label16 with label48;
        catch java.lang.NullPointerException from label15 to label16 with label43;
        catch java.lang.NumberFormatException from label15 to label16 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label33;
        catch java.io.IOException from label15 to label16 with label28;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label23;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.IllegalStateException from label21 to label22 with label48;
        catch java.lang.NullPointerException from label21 to label22 with label43;
        catch java.lang.NumberFormatException from label21 to label22 with label38;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label33;
        catch java.io.IOException from label21 to label22 with label28;
        catch java.lang.IndexOutOfBoundsException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label24 to label25 with label22;
        catch java.io.IOException from label26 to label27 with label20;
        catch java.lang.Throwable from label29 to label30 with label22;
        catch java.io.IOException from label31 to label32 with label20;
        catch java.lang.Throwable from label34 to label35 with label22;
        catch java.io.IOException from label36 to label37 with label20;
        catch java.lang.Throwable from label39 to label40 with label22;
        catch java.io.IOException from label41 to label42 with label20;
        catch java.lang.Throwable from label44 to label45 with label22;
        catch java.io.IOException from label46 to label47 with label20;
        catch java.lang.Throwable from label49 to label50 with label22;
        catch java.io.IOException from label51 to label52 with label20;
        catch java.io.IOException from label55 to label56 with label57;
    }

    private boolean removeEntry(android.view.DisplayInfo)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        android.view.DisplayInfo r1;
        java.lang.Object r2, $r7, $r10;
        java.util.HashMap $r3, $r6, $r9;
        java.lang.String $r4, $r5, $r8;
        boolean $z0, $z1, z2, z3, z4;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: android.view.DisplayInfo;

        $r3 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r4 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: java.lang.String getIdentifier(android.view.DisplayInfo)>(r1);

        r2 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        z2 = 1;

        if r2 == null goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $r6 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r5 = r1.<android.view.DisplayInfo: java.lang.String uniqueId>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        if $r7 == null goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        $r9 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r8 = r1.<android.view.DisplayInfo: java.lang.String name>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r8);

        if $r10 == null goto label5;

        goto label6;

     label5:
        z2 = 0;

     label6:
        $z0 = z3 | z4;

        $z1 = $z0 | z2;

        return $z1;
    }

    private com.android.server.wm.DisplayWindowSettings$Entry updateIdentifierForEntry(com.android.server.wm.DisplayWindowSettings$Entry, android.view.DisplayInfo)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        android.view.DisplayInfo r1;
        com.android.server.wm.DisplayWindowSettings$Entry $r2, r7;
        java.lang.String $r3, $r5;
        java.util.HashMap $r4;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r7 := @parameter0: com.android.server.wm.DisplayWindowSettings$Entry;

        r1 := @parameter1: android.view.DisplayInfo;

        $r2 = new com.android.server.wm.DisplayWindowSettings$Entry;

        $r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: java.lang.String getIdentifier(android.view.DisplayInfo)>(r1);

        specialinvoke $r2.<com.android.server.wm.DisplayWindowSettings$Entry: void <init>(java.lang.String,com.android.server.wm.DisplayWindowSettings$Entry,com.android.server.wm.DisplayWindowSettings$1)>($r3, r7, null);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: boolean removeEntry(android.view.DisplayInfo)>(r1);

        $r4 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r5 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: java.lang.String access$200(com.android.server.wm.DisplayWindowSettings$Entry)>($r2);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2);

        return $r2;
    }

    private void writeSettings()
    {
        com.android.server.wm.DisplayWindowSettings r0;
        java.util.Iterator r1;
        com.android.server.wm.DisplayWindowSettings$Entry r2;
        com.android.server.wm.DisplayWindowSettings$SettingPersister $r3, $r15, $r51;
        java.nio.charset.Charset $r4;
        java.lang.String $r5, $r9, $r18, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r49;
        java.lang.Boolean $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i20;
        java.util.HashMap $r12;
        java.util.Collection $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r16;
        java.lang.Throwable $r45, $r50;
        java.lang.StringBuilder $r46;
        java.io.OutputStream r52;
        com.android.internal.util.FastXmlSerializer r53;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

     label01:
        $r3 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$SettingPersister mStorage>;

        r52 = interfaceinvoke $r3.<com.android.server.wm.DisplayWindowSettings$SettingPersister: java.io.OutputStream startWrite()>();

     label02:
        r53 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r53.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r52, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display-settings");

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "config");

        $i0 = r0.<com.android.server.wm.DisplayWindowSettings: int mIdentifier>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "identifier", $r9);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "config");

        $r12 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r16 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.wm.DisplayWindowSettings$Entry) $r16;

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display");

        $r18 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: java.lang.String access$200(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r18);

        $i1 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1000(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i1 == 0 goto label04;

        $i17 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1000(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r43 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i17);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "windowingMode", $r43);

     label04:
        $i2 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$300(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i2 == 0 goto label05;

        $i16 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$300(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r41 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i16);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "userRotationMode", $r41);

     label05:
        $i3 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$400(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i3 == 0 goto label06;

        $i15 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$400(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r39 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i15);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "userRotation", $r39);

     label06:
        $i4 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$500(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i4 == 0 goto label07;

        $i12 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$600(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i12 == 0 goto label07;

        $i13 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$500(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r35 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "forcedWidth", $r35);

        $i14 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$600(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r37 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i14);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "forcedHeight", $r37);

     label07:
        $i20 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$700(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i20 == 0 goto label08;

        $i11 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$700(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r33 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "forcedDensity", $r33);

     label08:
        $i5 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$800(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i5 == 0 goto label09;

        $i10 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$800(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r31 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "forcedScalingMode", $r31);

     label09:
        $i6 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1100(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i6 == 0 goto label10;

        $i9 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1100(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r29 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "removeContentMode", $r29);

     label10:
        $z1 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1200(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $z1 == 0 goto label11;

        $z6 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1200(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r27 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z6);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "shouldShowWithInsecureKeyguard", $r27);

     label11:
        $z2 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1300(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $z2 == 0 goto label12;

        $z5 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1300(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r25 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "shouldShowSystemDecors", $r25);

     label12:
        $z3 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1400(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $z3 == 0 goto label13;

        $z4 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1400(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "shouldShowIme", $r23);

     label13:
        $i7 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$900(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i7 == 0 goto label14;

        $i8 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$900(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "fixedToUserRotation", $r21);

     label14:
        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display");

     label15:
        goto label03;

     label16:
        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display-settings");

        interfaceinvoke r53.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r15 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$SettingPersister mStorage>;

        interfaceinvoke $r15.<com.android.server.wm.DisplayWindowSettings$SettingPersister: void finishWrite(java.io.OutputStream,boolean)>(r52, 1);

     label17:
        goto label19;

     label18:
        $r50 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to write display window settings.", $r50);

        $r51 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$SettingPersister mStorage>;

        interfaceinvoke $r51.<com.android.server.wm.DisplayWindowSettings$SettingPersister: void finishWrite(java.io.OutputStream,boolean)>(r52, 0);

     label19:
        return;

     label20:
        $r45 := @caughtexception;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write display settings: ");

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r49);

        return;

        catch java.io.IOException from label01 to label02 with label20;
        catch java.io.IOException from label02 to label03 with label18;
        catch java.io.IOException from label03 to label04 with label18;
        catch java.io.IOException from label04 to label05 with label18;
        catch java.io.IOException from label05 to label06 with label18;
        catch java.io.IOException from label06 to label07 with label18;
        catch java.io.IOException from label07 to label08 with label18;
        catch java.io.IOException from label08 to label09 with label18;
        catch java.io.IOException from label09 to label10 with label18;
        catch java.io.IOException from label10 to label11 with label18;
        catch java.io.IOException from label11 to label12 with label18;
        catch java.io.IOException from label12 to label13 with label18;
        catch java.io.IOException from label13 to label14 with label18;
        catch java.io.IOException from label14 to label15 with label18;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry, android.view.DisplayInfo)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayWindowSettings$Entry r1;
        android.view.DisplayInfo r2;
        boolean $z0, $z1;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayWindowSettings$Entry;

        r2 := @parameter1: android.view.DisplayInfo;

        $z0 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1500(com.android.server.wm.DisplayWindowSettings$Entry)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: boolean removeEntry(android.view.DisplayInfo)>(r2);

        if $z1 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.DisplayWindowSettings: java.util.HashMap mEntries>;

        $r4 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: java.lang.String getIdentifier(android.view.DisplayInfo)>(r2);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettings()>();

        return;
    }

    void applySettingsToDisplayLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.DisplayWindowSettings$Entry r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.view.DisplayInfo $r3;
        com.android.server.wm.DisplayRotation $r4;
        boolean z0;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r2 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>($r3);

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $i2 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getWindowingModeLocked(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r2, $i1);

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setWindowingMode(int)>($i2);

        $r4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        $i3 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$300(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $i4 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$400(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $i5 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$900(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        virtualinvoke $r4.<com.android.server.wm.DisplayRotation: void restoreSettings(int,int,int)>($i3, $i4, $i5);

        $i6 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$700(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i6 == 0 goto label1;

        $i12 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$700(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = $i12;

     label1:
        $i7 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$500(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i7 == 0 goto label2;

        $i8 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$600(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i8 == 0 goto label2;

        $i9 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$500(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $i10 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$600(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        $i11 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetrics(int,int,int)>($i9, $i10, $i11);

     label2:
        i0 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$800(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        z0 = 1;

        if i0 != 1 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        r1.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled> = z0;

        return;
    }

    int getRemoveContentModeLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.DisplayWindowSettings$Entry r2;
        android.view.DisplayInfo $r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r2 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)>($r3);

        if r2 == null goto label2;

        $i0 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1100(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        $i1 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1100(com.android.server.wm.DisplayWindowSettings$Entry)>(r2);

        return $i1;

     label2:
        $z0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isPrivate()>();

        if $z0 == 0 goto label3;

        return 2;

     label3:
        return 1;
    }

    int getWindowingModeLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayContent r1;
        android.view.DisplayInfo $r2;
        com.android.server.wm.DisplayWindowSettings$Entry $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)>($r2);

        $i0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $i1 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getWindowingModeLocked(com.android.server.wm.DisplayWindowSettings$Entry,int)>($r3, $i0);

        return $i1;
    }

    void setFixedToUserRotation(com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0;
        android.view.DisplayInfo r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r1);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$902(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r3, i0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r3, r1);

        return;
    }

    void setForcedDensity(com.android.server.wm.DisplayContent, int, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0, i1;
        com.android.server.wm.DisplayWindowSettings$Entry r1;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        com.android.server.wm.DisplayContent r5;
        java.lang.String r6;
        android.view.DisplayInfo r7;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r5 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r5.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z0 == 0 goto label3;

        if i0 != 0 goto label1;

        r6 = "";

        goto label2;

     label1:
        r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

     label2:
        $r2 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r4, "display_density_forced", r6, i1);

        return;

     label3:
        r7 = virtualinvoke r5.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r1 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r7);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$702(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r1, i0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r1, r7);

        return;
    }

    void setForcedScalingMode(com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0;
        android.view.DisplayInfo r1;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        com.android.server.wm.DisplayContent r5;
        com.android.server.wm.DisplayWindowSettings$Entry r6;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r5 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        $z0 = r5.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r4, "display_scaling_force", i0);

        return;

     label1:
        r1 = virtualinvoke r5.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r6 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r1);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$802(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r6, i0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r6, r1);

        return;
    }

    void setForcedSize(com.android.server.wm.DisplayContent, int, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0, i1;
        com.android.server.wm.DisplayWindowSettings$Entry r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        com.android.server.wm.DisplayContent r6;
        java.lang.String r8;
        com.android.server.wm.WindowManagerService $r9;
        android.content.Context $r10;
        android.content.ContentResolver $r11;
        android.view.DisplayInfo r12;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r6 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r6.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z0 == 0 goto label4;

        if i0 == 0 goto label2;

        if i1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        r8 = "";

     label3:
        $r9 = r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.WindowManagerService mService>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r11, "display_size_forced", r8);

        return;

     label4:
        r12 = virtualinvoke r6.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r1 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r12);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$502(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r1, i0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$602(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r1, i1);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r1, r12);

        return;
    }

    void setRemoveContentModeLocked(com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0;
        android.view.DisplayInfo r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r1);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1102(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r3, i0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r3, r1);

        return;
    }

    void setShouldShowImeLocked(com.android.server.wm.DisplayContent, boolean)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        boolean z0;
        android.view.DisplayInfo r1;
        int $i0;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i0 != 0 goto label1;

        if z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Default display should show IME");

        return;

     label1:
        r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r1);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1402(com.android.server.wm.DisplayWindowSettings$Entry,boolean)>(r3, z0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r3, r1);

        return;
    }

    void setShouldShowSystemDecorsLocked(com.android.server.wm.DisplayContent, boolean)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        boolean z0;
        android.view.DisplayInfo r1;
        int $i0;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i0 != 0 goto label1;

        if z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Default display should show system decors");

        return;

     label1:
        r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r1);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1302(com.android.server.wm.DisplayWindowSettings$Entry,boolean)>(r3, z0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r3, r1);

        return;
    }

    void setShouldShowWithInsecureKeyguardLocked(com.android.server.wm.DisplayContent, boolean)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        boolean z0, $z1;
        android.view.DisplayInfo r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isPrivate()>();

        if $z1 != 0 goto label1;

        if z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Public display can\'t be allowed to show content when locked");

        return;

     label1:
        r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r1);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1202(com.android.server.wm.DisplayWindowSettings$Entry,boolean)>(r3, z0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r3, r1);

        return;
    }

    void setUserRotation(com.android.server.wm.DisplayContent, int, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int i0, i1;
        com.android.server.wm.DisplayWindowSettings$Entry r1;
        com.android.server.wm.DisplayContent r2;
        android.view.DisplayInfo r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r1 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r3);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$302(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r1, i0);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$402(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r1, i1);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r1, r3);

        return;
    }

    void setWindowingModeLocked(com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayContent r1;
        int i0;
        android.view.DisplayInfo r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getOrCreateEntry(android.view.DisplayInfo)>(r2);

        staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: int access$1002(com.android.server.wm.DisplayWindowSettings$Entry,int)>(r3, i0);

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setWindowingMode(int)>(i0);

        specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>(r3, r2);

        return;
    }

    boolean shouldShowImeLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int $i0;
        android.view.DisplayInfo $r1;
        boolean $z0;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)>($r1);

        if r3 != null goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1400(com.android.server.wm.DisplayWindowSettings$Entry)>(r3);

        return $z0;
    }

    boolean shouldShowSystemDecorsLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        int $i0;
        android.view.DisplayInfo $r1;
        boolean $z0;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)>($r1);

        if r3 != null goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1300(com.android.server.wm.DisplayWindowSettings$Entry)>(r3);

        return $z0;
    }

    boolean shouldShowWithInsecureKeyguardLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        android.view.DisplayInfo $r1;
        boolean $z0;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DisplayWindowSettings$Entry r3;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r2 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        r3 = specialinvoke r0.<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry getEntry(android.view.DisplayInfo)>($r1);

        if r3 != null goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <com.android.server.wm.DisplayWindowSettings$Entry: boolean access$1200(com.android.server.wm.DisplayWindowSettings$Entry)>(r3);

        return $z0;
    }

    boolean updateSettingsForDisplay(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayWindowSettings r0;
        com.android.server.wm.DisplayContent r1;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.wm.DisplayWindowSettings;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $i0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getWindowingMode()>();

        $i1 = virtualinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getWindowingModeLocked(com.android.server.wm.DisplayContent)>(r1);

        if $i0 == $i1 goto label1;

        $i2 = virtualinvoke r0.<com.android.server.wm.DisplayWindowSettings: int getWindowingModeLocked(com.android.server.wm.DisplayContent)>(r1);

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setWindowingMode(int)>($i2);

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DisplayWindowSettings: java.lang.String WM_DISPLAY_COMMIT_TAG> = "wm-displays";

        <com.android.server.wm.DisplayWindowSettings: java.lang.String VENDOR_DISPLAY_SETTINGS_PATH> = "etc/display_settings.xml";

        <com.android.server.wm.DisplayWindowSettings: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.DisplayWindowSettings: java.lang.String SYSTEM_DIRECTORY> = "system";

        <com.android.server.wm.DisplayWindowSettings: int IDENTIFIER_UNIQUE_ID> = 0;

        <com.android.server.wm.DisplayWindowSettings: int IDENTIFIER_PORT> = 1;

        <com.android.server.wm.DisplayWindowSettings: java.lang.String DISPLAY_SETTINGS_FILE_NAME> = "display_settings.xml";

        return;
    }
}
