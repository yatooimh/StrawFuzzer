class com.android.server.wm.DragDropController extends java.lang.Object
{
    private static final float DRAG_SHADOW_ALPHA_TRANSPARENT;
    private static final long DRAG_TIMEOUT_MS;
    static final int MSG_ANIMATION_END;
    static final int MSG_DRAG_END_TIMEOUT;
    static final int MSG_TEAR_DOWN_DRAG_AND_DROP_INPUT;
    private java.util.concurrent.atomic.AtomicReference mCallback;
    private com.android.server.wm.DragState mDragState;
    private final android.os.Handler mHandler;
    private com.android.server.wm.WindowManagerService mService;

    void <init>(com.android.server.wm.WindowManagerService, android.os.Looper)
    {
        com.android.server.wm.DragDropController r0;
        com.android.server.wm.WindowManagerService r1;
        android.os.Looper r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        com.android.server.wm.DragDropController$1 $r4;
        com.android.server.wm.DragDropController$DragHandler $r5;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        $r4 = new com.android.server.wm.DragDropController$1;

        specialinvoke $r4.<com.android.server.wm.DragDropController$1: void <init>(com.android.server.wm.DragDropController)>(r0);

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r4);

        r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback> = $r3;

        r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService> = r1;

        $r5 = new com.android.server.wm.DragDropController$DragHandler;

        specialinvoke $r5.<com.android.server.wm.DragDropController$DragHandler: void <init>(com.android.server.wm.DragDropController,com.android.server.wm.WindowManagerService,android.os.Looper)>(r0, r1, r2);

        r0.<com.android.server.wm.DragDropController: android.os.Handler mHandler> = $r5;

        return;
    }

    static com.android.server.wm.DragState access$000(com.android.server.wm.DragDropController)
    {
        com.android.server.wm.DragDropController r0;
        com.android.server.wm.DragState $r1;

        r0 := @parameter0: com.android.server.wm.DragDropController;

        $r1 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        return $r1;
    }

    void cancelDragAndDrop(android.os.IBinder, boolean)
    {
        com.android.server.wm.DragDropController r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.concurrent.atomic.AtomicReference $r2, $r11, $r16;
        java.lang.Object $r3, $r12, $r17;
        com.android.server.wm.WindowManagerInternal$IDragDropCallback $r4, $r13, $r18;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm.DragState $r6, $r7, $r9, $r10;
        android.os.IBinder $r8, r19;
        java.lang.Throwable $r14, $r15;
        java.lang.IllegalStateException r20, r21;

        r0 := @this: com.android.server.wm.DragDropController;

        r19 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r3;

        interfaceinvoke $r4.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void preCancelDragAndDrop(android.os.IBinder)>(r19);

     label01:
        $r5 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        r1 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r6 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r6 == null goto label06;

        $r7 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r8 = $r7.<com.android.server.wm.DragState: android.os.IBinder mToken>;

        if $r8 != r19 goto label05;

        $r9 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r9.<com.android.server.wm.DragState: boolean mDragResult> = 0;

        $r10 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r10.<com.android.server.wm.DragState: void cancelDragLocked(boolean)>(z0);

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label04:
        $r11 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r13 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r12;

        interfaceinvoke $r13.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postCancelDragAndDrop()>();

        return;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "cancelDragAndDrop() does not match prepareDrag()");

        r20 = new java.lang.IllegalStateException;

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cancelDragAndDrop() does not match prepareDrag()");

        throw r20;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "cancelDragAndDrop() without prepareDrag()");

        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cancelDragAndDrop() without prepareDrag()");

        throw r21;

     label07:
        $r14 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r14;

     label10:
        $r15 := @caughtexception;

        $r16 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r17 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r18 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r17;

        interfaceinvoke $r18.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postCancelDragAndDrop()>();

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    boolean dragDropActiveLocked()
    {
        com.android.server.wm.DragDropController r0;
        com.android.server.wm.DragState r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.DragState: boolean isClosing()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    void dragRecipientEntered(android.view.IWindow)
    {
        com.android.server.wm.DragDropController r0;
        android.view.IWindow r1;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    void dragRecipientExited(android.view.IWindow)
    {
        com.android.server.wm.DragDropController r0;
        android.view.IWindow r1;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    void handleMotionEvent(boolean, float, float)
    {
        com.android.server.wm.DragDropController r0;
        boolean z0, $z1;
        float f0, f1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.wm.DragState $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.DragDropController;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r3 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.DragDropController: boolean dragDropActiveLocked()>();

        if $z1 != 0 goto label03;

        exitmonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label03:
        if z0 == 0 goto label06;

     label04:
        $r5 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r5.<com.android.server.wm.DragState: void notifyMoveLocked(float,float)>(f0, f1);

     label05:
        goto label07;

     label06:
        $r4 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r4.<com.android.server.wm.DragState: void notifyDropLocked(float,float)>(f0, f1);

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void onDragStateClosedLocked(com.android.server.wm.DragState)
    {
        com.android.server.wm.DragDropController r0;
        com.android.server.wm.DragState r1, $r2;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 := @parameter0: com.android.server.wm.DragState;

        $r2 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r2 == r1 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowManager", "Unknown drag state is closed");

        return;

     label1:
        r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState> = null;

        return;
    }

    android.os.IBinder performDrag(android.view.SurfaceSession, int, int, android.view.IWindow, int, android.view.SurfaceControl, int, float, float, float, float, android.content.ClipData)
    {
        com.android.server.wm.DragDropController r0;
        int i0, i1, i2, i3, $i5;
        float f0, f1, f2, f3, $f4, $f5, $f6, f7;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowState r3;
        android.os.IBinder r4;
        com.android.server.wm.DragState r5, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r28, $r30, $r31, $r32, $r33, $r34, $r35, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r58, $r59, $r60, r99, r100;
        com.android.server.wm.WindowManagerService r6, $r11, $r12, $r25;
        android.os.Binder $r7, r94;
        java.util.concurrent.atomic.AtomicReference $r8, $r23, $r62, $r81, $r87, $r91, $r96, $r103, $r107;
        java.lang.Object $r9, $r24, $r63, $r82, $r88, $r92, $r97, $r104, $r108;
        com.android.server.wm.WindowManagerInternal$IDragDropCallback $r10, $r29, $r64, $r83, $r89, $r93, $r98, $r105, $r109;
        java.lang.String $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10;
        android.view.InputChannel $r26;
        com.android.server.input.InputManagerService $r27;
        java.lang.Throwable $r57, $r61, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, r84, r85, r110;
        android.view.SurfaceSession r77;
        android.view.IWindow r78;
        android.view.SurfaceControl r79, r86, r101;
        android.content.ClipData r80;
        com.android.server.wm.DisplayContent r90;
        android.view.Display r95;
        android.view.SurfaceControl$Transaction r102;
        java.lang.StringBuilder r106;

        r0 := @this: com.android.server.wm.DragDropController;

        r77 := @parameter0: android.view.SurfaceSession;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r78 := @parameter3: android.view.IWindow;

        i2 := @parameter4: int;

        r79 := @parameter5: android.view.SurfaceControl;

        i3 := @parameter6: int;

        f0 := @parameter7: float;

        f1 := @parameter8: float;

        f2 := @parameter9: float;

        f3 := @parameter10: float;

        r80 := @parameter11: android.content.ClipData;

        $r7 = new android.os.Binder;

        specialinvoke $r7.<android.os.Binder: void <init>()>();

        $r8 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r10 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r9;

        z9 = interfaceinvoke $r10.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: boolean prePerformDrag(android.view.IWindow,android.os.IBinder,int,float,float,float,float,android.content.ClipData)>(r78, $r7, i3, f0, f1, f2, f3, r80);

     label01:
        $r11 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        r2 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label03:
        if z9 != 0 goto label12;

     label04:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "IDragDropCallback rejects the performDrag request");

     label05:
        if r79 == null goto label07;

     label06:
        virtualinvoke r79.<android.view.SurfaceControl: void release()>();

     label07:
        $r54 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r54 == null goto label08;

        $r55 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z7 = virtualinvoke $r55.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z7 != 0 goto label08;

        $r56 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r56.<com.android.server.wm.DragState: void closeLocked()>();

     label08:
        exitmonitor r2;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r81 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r82 = virtualinvoke $r81.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r83 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r82;

        interfaceinvoke $r83.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        return null;

     label10:
        $r68 := @caughtexception;

        r84 = $r68;

        goto label72;

     label11:
        $r66 := @caughtexception;

        r85 = $r66;

        r86 = r79;

        goto label67;

     label12:
        z10 = virtualinvoke r0.<com.android.server.wm.DragDropController: boolean dragDropActiveLocked()>();

     label13:
        if z10 == 0 goto label20;

     label14:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drag already in progress");

     label15:
        if r79 == null goto label17;

     label16:
        virtualinvoke r79.<android.view.SurfaceControl: void release()>();

     label17:
        $r51 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r51 == null goto label18;

        $r52 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z6 = virtualinvoke $r52.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z6 != 0 goto label18;

        $r53 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r53.<com.android.server.wm.DragState: void closeLocked()>();

     label18:
        exitmonitor r2;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r87 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r88 = virtualinvoke $r87.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r89 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r88;

        interfaceinvoke $r89.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        return null;

     label20:
        $r12 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        r3 = virtualinvoke $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r78, 0);

     label21:
        if r3 == null goto label58;

     label22:
        $z1 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean cantReceiveTouchInput()>();

        if $z1 == 0 goto label24;

     label23:
        goto label58;

     label24:
        r90 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

     label25:
        if r90 != null goto label32;

     label26:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "display content is null");

     label27:
        if r79 == null goto label29;

     label28:
        virtualinvoke r79.<android.view.SurfaceControl: void release()>();

     label29:
        $r48 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r48 == null goto label30;

        $r49 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z5 = virtualinvoke $r49.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z5 != 0 goto label30;

        $r50 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r50.<com.android.server.wm.DragState: void closeLocked()>();

     label30:
        exitmonitor r2;

     label31:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r91 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r92 = virtualinvoke $r91.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r93 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r92;

        interfaceinvoke $r93.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        return null;

     label32:
        $i5 = i2 & 512;

        if $i5 != 0 goto label33;

        f7 = 0.7071F;

        goto label34;

     label33:
        f7 = 1.0F;

     label34:
        r4 = interfaceinvoke r78.<android.view.IWindow: android.os.IBinder asBinder()>();

        r94 = new android.os.Binder;

        specialinvoke r94.<android.os.Binder: void <init>()>();

     label35:
        r5 = new com.android.server.wm.DragState;

        r6 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

     label36:
        specialinvoke r5.<com.android.server.wm.DragState: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DragDropController,android.os.IBinder,android.view.SurfaceControl,int,android.os.IBinder)>(r6, r0, r94, r79, i2, r4);

        r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState> = r5;

     label37:
        r86 = null;

     label38:
        r5.<com.android.server.wm.DragState: int mPid> = i0;

        $r19 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r19.<com.android.server.wm.DragState: int mUid> = i1;

        $r20 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r20.<com.android.server.wm.DragState: float mOriginalAlpha> = f7;

        $r21 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r21.<com.android.server.wm.DragState: android.os.IBinder mToken> = $r7;

        $r22 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r22.<com.android.server.wm.DragState: com.android.server.wm.DisplayContent mDisplayContent> = r90;

        r95 = virtualinvoke r90.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r23 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r24 = virtualinvoke $r23.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r29 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r24;

        $r28 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r25 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        $r27 = $r25.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r26 = r3.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        $z2 = interfaceinvoke $r29.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: boolean registerInputChannel(com.android.server.wm.DragState,android.view.Display,com.android.server.input.InputManagerService,android.view.InputChannel)>($r28, r95, $r27, $r26);

        if $z2 != 0 goto label44;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Unable to transfer touch focus");

     label39:
        goto label40;

     label40:
        $r44 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r44 == null goto label41;

        $r45 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z4 = virtualinvoke $r45.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z4 != 0 goto label41;

        $r46 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r46.<com.android.server.wm.DragState: void closeLocked()>();

     label41:
        exitmonitor r2;

     label42:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r96 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r97 = virtualinvoke $r96.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r98 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r97;

        interfaceinvoke $r98.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        return null;

     label43:
        $r67 := @caughtexception;

        r84 = $r67;

        goto label72;

     label44:
        $r30 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r30.<com.android.server.wm.DragState: android.content.ClipData mData> = r80;

        r99 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

     label45:
        virtualinvoke r99.<com.android.server.wm.DragState: void broadcastDragStartedLocked(float,float)>(f0, f1);

        $r31 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r31.<com.android.server.wm.DragState: void overridePointerIconLocked(int)>(i3);

        $r32 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r32.<com.android.server.wm.DragState: float mThumbOffsetX> = f2;

        r100 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

     label46:
        r100.<com.android.server.wm.DragState: float mThumbOffsetY> = f3;

        $r33 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        r101 = $r33.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl>;

        $r34 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        r102 = $r34.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r35 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $f4 = $r35.<com.android.server.wm.DragState: float mOriginalAlpha>;

        virtualinvoke r102.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>(r101, $f4);

        $f6 = f0 - f2;

        $f5 = f1 - f3;

        virtualinvoke r102.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>(r101, $f6, $f5);

        virtualinvoke r102.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>(r101);

        virtualinvoke r90.<com.android.server.wm.DisplayContent: void reparentToOverlay(android.view.SurfaceControl$Transaction,android.view.SurfaceControl)>(r102, r101);

        virtualinvoke r3.<com.android.server.wm.WindowState: void scheduleAnimation()>();

        $r39 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r39.<com.android.server.wm.DragState: void notifyLocationLocked(float,float)>(f0, f1);

     label47:
        goto label48;

     label48:
        $r40 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r40 == null goto label49;

        $r41 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z3 = virtualinvoke $r41.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z3 != 0 goto label49;

        $r42 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r42.<com.android.server.wm.DragState: void closeLocked()>();

     label49:
        exitmonitor r2;

     label50:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label51:
        $r103 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r104 = virtualinvoke $r103.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r105 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r104;

        interfaceinvoke $r105.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        return $r7;

     label52:
        $r69 := @caughtexception;

        r85 = $r69;

        goto label67;

     label53:
        $r72 := @caughtexception;

        r85 = $r72;

        goto label55;

     label54:
        $r70 := @caughtexception;

        r85 = $r70;

     label55:
        goto label67;

     label56:
        $r65 := @caughtexception;

        r85 = $r65;

        r86 = r79;

        goto label67;

     label57:
        $r71 := @caughtexception;

        r85 = $r71;

        r86 = r79;

        goto label67;

     label58:
        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad requesting window ");

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r78);

        $r15 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r15);

     label59:
        if r79 == null goto label61;

     label60:
        virtualinvoke r79.<android.view.SurfaceControl: void release()>();

     label61:
        $r16 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r16 == null goto label62;

        $r17 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z0 = virtualinvoke $r17.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z0 != 0 goto label62;

        $r18 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r18.<com.android.server.wm.DragState: void closeLocked()>();

     label62:
        exitmonitor r2;

     label63:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r107 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r108 = virtualinvoke $r107.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r109 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r108;

        interfaceinvoke $r109.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        return null;

     label64:
        $r76 := @caughtexception;

        r84 = $r76;

        goto label72;

     label65:
        $r57 := @caughtexception;

        r85 = $r57;

        r86 = r79;

        goto label67;

     label66:
        $r74 := @caughtexception;

        r85 = $r74;

        r86 = r79;

     label67:
        if r86 == null goto label69;

     label68:
        virtualinvoke r86.<android.view.SurfaceControl: void release()>();

     label69:
        $r58 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r58 == null goto label70;

        $r59 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $z8 = virtualinvoke $r59.<com.android.server.wm.DragState: boolean isInProgress()>();

        if $z8 != 0 goto label70;

        $r60 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r60.<com.android.server.wm.DragState: void closeLocked()>();

     label70:
        throw r85;

     label71:
        $r75 := @caughtexception;

        r84 = $r75;

     label72:
        exitmonitor r2;

     label73:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r84;

     label74:
        $r73 := @caughtexception;

        r110 = $r73;

        goto label76;

     label75:
        $r61 := @caughtexception;

        r110 = $r61;

     label76:
        $r62 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r63 = virtualinvoke $r62.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r64 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r63;

        interfaceinvoke $r64.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postPerformDrag()>();

        throw r110;

        catch java.lang.Throwable from label01 to label02 with label75;
        catch java.lang.Throwable from label02 to label03 with label66;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label66;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label17 to label18 with label10;
        catch java.lang.Throwable from label18 to label19 with label10;
        catch java.lang.Throwable from label20 to label21 with label66;
        catch java.lang.Throwable from label22 to label23 with label66;
        catch java.lang.Throwable from label24 to label25 with label66;
        catch java.lang.Throwable from label26 to label27 with label11;
        catch java.lang.Throwable from label28 to label29 with label10;
        catch java.lang.Throwable from label29 to label30 with label10;
        catch java.lang.Throwable from label30 to label31 with label10;
        catch java.lang.Throwable from label34 to label35 with label66;
        catch java.lang.Throwable from label35 to label36 with label57;
        catch java.lang.Throwable from label36 to label37 with label56;
        catch java.lang.Throwable from label38 to label39 with label54;
        catch java.lang.Throwable from label40 to label40 with label43;
        catch java.lang.Throwable from label40 to label41 with label43;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label44 to label45 with label54;
        catch java.lang.Throwable from label45 to label46 with label53;
        catch java.lang.Throwable from label46 to label47 with label52;
        catch java.lang.Throwable from label48 to label48 with label71;
        catch java.lang.Throwable from label48 to label49 with label71;
        catch java.lang.Throwable from label49 to label50 with label71;
        catch java.lang.Throwable from label50 to label51 with label74;
        catch java.lang.Throwable from label58 to label59 with label65;
        catch java.lang.Throwable from label60 to label61 with label64;
        catch java.lang.Throwable from label61 to label62 with label64;
        catch java.lang.Throwable from label62 to label63 with label64;
        catch java.lang.Throwable from label68 to label69 with label71;
        catch java.lang.Throwable from label69 to label70 with label71;
        catch java.lang.Throwable from label70 to label71 with label71;
        catch java.lang.Throwable from label72 to label73 with label71;
        catch java.lang.Throwable from label73 to label74 with label74;
    }

    void registerCallback(com.android.server.wm.WindowManagerInternal$IDragDropCallback)
    {
        com.android.server.wm.DragDropController r0;
        com.android.server.wm.WindowManagerInternal$IDragDropCallback r1;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 := @parameter0: com.android.server.wm.WindowManagerInternal$IDragDropCallback;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

    void reportDropResult(android.view.IWindow, boolean)
    {
        com.android.server.wm.DragDropController r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.concurrent.atomic.AtomicReference $r2, $r18, $r24, $r27, $r32;
        java.lang.Object $r3, $r19, $r25, $r28, $r33;
        com.android.server.wm.WindowManagerInternal$IDragDropCallback $r4, $r20, $r26, $r29, $r34;
        com.android.server.wm.WindowManagerService $r5, $r14;
        com.android.server.wm.DragState $r6, $r7, $r16, $r17;
        android.os.IBinder $r8, $r13, r36;
        java.lang.String $r11, $r23;
        android.os.Handler $r12;
        com.android.server.wm.WindowState $r15;
        java.lang.Throwable $r30, $r31;
        android.view.IWindow r35;
        java.lang.StringBuilder r37, r38;
        java.lang.IllegalStateException r39;

        r0 := @this: com.android.server.wm.DragDropController;

        r35 := @parameter0: android.view.IWindow;

        z0 := @parameter1: boolean;

        r36 = interfaceinvoke r35.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r2 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r3;

        interfaceinvoke $r4.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void preReportDropResult(android.view.IWindow,boolean)>(r35, z0);

     label01:
        $r5 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        r1 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r6 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        if $r6 != null goto label04;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drop result given but no drag in progress");

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r27 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r28 = virtualinvoke $r27.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r29 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r28;

        interfaceinvoke $r29.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postReportDropResult()>();

        return;

     label04:
        $r7 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r8 = $r7.<com.android.server.wm.DragState: android.os.IBinder mToken>;

        if $r8 != r36 goto label09;

        $r12 = r0.<com.android.server.wm.DragDropController: android.os.Handler mHandler>;

        $r13 = interfaceinvoke r35.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r12.<android.os.Handler: void removeMessages(int,java.lang.Object)>(0, $r13);

        $r14 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.WindowManagerService mService>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r35, 0);

        if $r15 != null goto label06;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad result-reporting window ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r23 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r23);

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r24 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r25 = virtualinvoke $r24.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r26 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r25;

        interfaceinvoke $r26.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postReportDropResult()>();

        return;

     label06:
        $r16 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        $r16.<com.android.server.wm.DragState: boolean mDragResult> = z0;

        $r17 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r17.<com.android.server.wm.DragState: void endDragLocked()>();

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        $r18 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r19 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r20 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r19;

        interfaceinvoke $r20.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postReportDropResult()>();

        return;

     label09:
        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid drop-result claim by ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r11 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r11);

        r39 = new java.lang.IllegalStateException;

        specialinvoke r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>("reportDropResult() by non-recipient");

        throw r39;

     label10:
        $r30 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r30;

     label13:
        $r31 := @caughtexception;

        $r32 = r0.<com.android.server.wm.DragDropController: java.util.concurrent.atomic.AtomicReference mCallback>;

        $r33 = virtualinvoke $r32.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r34 = (com.android.server.wm.WindowManagerInternal$IDragDropCallback) $r33;

        interfaceinvoke $r34.<com.android.server.wm.WindowManagerInternal$IDragDropCallback: void postReportDropResult()>();

        throw $r31;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    void sendDragStartedIfNeededLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DragDropController r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.DragState $r2;

        r0 := @this: com.android.server.wm.DragDropController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.DragDropController: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r2.<com.android.server.wm.DragState: void sendDragStartedIfNeededLocked(com.android.server.wm.WindowState)>(r1);

        return;
    }

    void sendHandlerMessage(int, java.lang.Object)
    {
        com.android.server.wm.DragDropController r0;
        int i0;
        java.lang.Object r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.DragDropController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<com.android.server.wm.DragDropController: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(i0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void sendTimeoutMessage(int, java.lang.Object)
    {
        com.android.server.wm.DragDropController r0;
        int i0;
        android.os.Handler $r1, $r2, $r3;
        java.lang.Object r4;
        android.os.Message r5;

        r0 := @this: com.android.server.wm.DragDropController;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<com.android.server.wm.DragDropController: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int,java.lang.Object)>(i0, r4);

        $r2 = r0.<com.android.server.wm.DragDropController: android.os.Handler mHandler>;

        r5 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(i0, r4);

        $r3 = r0.<com.android.server.wm.DragDropController: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r5, 5000L);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DragDropController: int MSG_TEAR_DOWN_DRAG_AND_DROP_INPUT> = 1;

        <com.android.server.wm.DragDropController: int MSG_DRAG_END_TIMEOUT> = 0;

        <com.android.server.wm.DragDropController: int MSG_ANIMATION_END> = 2;

        <com.android.server.wm.DragDropController: long DRAG_TIMEOUT_MS> = 5000L;

        <com.android.server.wm.DragDropController: float DRAG_SHADOW_ALPHA_TRANSPARENT> = 0.7071F;

        return;
    }
}
