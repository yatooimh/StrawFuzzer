class com.android.server.wm.DragState extends java.lang.Object
{
    private static final java.lang.String ANIMATED_PROPERTY_ALPHA;
    private static final java.lang.String ANIMATED_PROPERTY_SCALE;
    private static final java.lang.String ANIMATED_PROPERTY_X;
    private static final java.lang.String ANIMATED_PROPERTY_Y;
    private static final int DRAG_FLAGS_URI_ACCESS;
    private static final int DRAG_FLAGS_URI_PERMISSIONS;
    private static final long MAX_ANIMATION_DURATION_MS;
    private static final long MIN_ANIMATION_DURATION_MS;
    volatile boolean mAnimationCompleted;
    private android.animation.ValueAnimator mAnimator;
    boolean mCrossProfileCopyAllowed;
    private final android.view.animation.Interpolator mCubicEaseOutInterpolator;
    float mCurrentX;
    float mCurrentY;
    android.content.ClipData mData;
    android.content.ClipDescription mDataDescription;
    com.android.server.wm.DisplayContent mDisplayContent;
    private android.graphics.Point mDisplaySize;
    final com.android.server.wm.DragDropController mDragDropController;
    boolean mDragInProgress;
    boolean mDragResult;
    int mFlags;
    com.android.server.wm.DragState$InputInterceptor mInputInterceptor;
    android.view.SurfaceControl mInputSurface;
    private boolean mIsClosing;
    android.os.IBinder mLocalWin;
    java.util.ArrayList mNotifiedWindows;
    float mOriginalAlpha;
    float mOriginalX;
    float mOriginalY;
    int mPid;
    final com.android.server.wm.WindowManagerService mService;
    int mSourceUserId;
    android.view.SurfaceControl mSurfaceControl;
    com.android.server.wm.WindowState mTargetWindow;
    float mThumbOffsetX;
    float mThumbOffsetY;
    private final android.graphics.Rect mTmpClipRect;
    android.os.IBinder mToken;
    int mTouchSource;
    final android.view.SurfaceControl$Transaction mTransaction;
    int mUid;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DragDropController, android.os.IBinder, android.view.SurfaceControl, int, android.os.IBinder)
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.DragDropController r2;
        android.os.IBinder r3, r5;
        android.view.SurfaceControl r4;
        int i0;
        android.view.animation.DecelerateInterpolator $r6;
        android.graphics.Point $r7;
        android.graphics.Rect $r8;
        java.util.ArrayList $r9;
        java.util.function.Supplier $r10;
        java.lang.Object $r11;
        android.view.SurfaceControl$Transaction $r12;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.DragDropController;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: android.view.SurfaceControl;

        i0 := @parameter4: int;

        r5 := @parameter5: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.DragState: boolean mAnimationCompleted> = 0;

        $r6 = new android.view.animation.DecelerateInterpolator;

        specialinvoke $r6.<android.view.animation.DecelerateInterpolator: void <init>(float)>(1.5F);

        r0.<com.android.server.wm.DragState: android.view.animation.Interpolator mCubicEaseOutInterpolator> = $r6;

        $r7 = new android.graphics.Point;

        specialinvoke $r7.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.DragState: android.graphics.Rect mTmpClipRect> = $r8;

        r0.<com.android.server.wm.DragState: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.DragState: com.android.server.wm.DragDropController mDragDropController> = r2;

        r0.<com.android.server.wm.DragState: android.os.IBinder mToken> = r3;

        r0.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl> = r4;

        r0.<com.android.server.wm.DragState: int mFlags> = i0;

        r0.<com.android.server.wm.DragState: android.os.IBinder mLocalWin> = r5;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows> = $r9;

        $r10 = r1.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r11 = interfaceinvoke $r10.<java.util.function.Supplier: java.lang.Object get()>();

        $r12 = (android.view.SurfaceControl$Transaction) $r11;

        r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction> = $r12;

        return;
    }

    static android.graphics.Point access$000(com.android.server.wm.DragState)
    {
        com.android.server.wm.DragState r0;
        android.graphics.Point $r1;

        r0 := @parameter0: com.android.server.wm.DragState;

        $r1 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        return $r1;
    }

    private android.animation.ValueAnimator createCancelAnimationLocked()
    {
        com.android.server.wm.DragState r0;
        float[] $r2, $r4, $r6, $r8;
        float $f0, $f1, $f2, $f3, $f4, f5, f6;
        android.animation.PropertyValuesHolder[] $r3;
        android.animation.PropertyValuesHolder $r5, $r7, $r9, r16;
        com.android.server.wm.DragState$AnimationListener $r10;
        android.view.animation.Interpolator $r12;
        com.android.server.wm.WindowManagerService $r13;
        com.android.server.wm._$$Lambda$DragState$WVn6_eGpkutjNAUr_QLMbFLA5qw $r14;
        android.os.Handler $r15;
        android.animation.ValueAnimator r17;

        r0 := @this: com.android.server.wm.DragState;

        f5 = r0.<com.android.server.wm.DragState: float mCurrentX>;

        $r2 = newarray (float)[2];

        $f0 = r0.<com.android.server.wm.DragState: float mThumbOffsetX>;

        $f1 = f5 - $f0;

        $r2[0] = $f1;

        $r2[1] = f5;

        r16 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("x", $r2);

        f6 = r0.<com.android.server.wm.DragState: float mCurrentY>;

        $r3 = newarray (android.animation.PropertyValuesHolder)[4];

        $r3[0] = r16;

        $r4 = newarray (float)[2];

        $f2 = r0.<com.android.server.wm.DragState: float mThumbOffsetY>;

        $f3 = f6 - $f2;

        $r4[0] = $f3;

        $r4[1] = f6;

        $r5 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("y", $r4);

        $r3[1] = $r5;

        $r6 = newarray (float)[2];

        $r6[0] = 1.0F;

        $r6[1] = 0.0F;

        $r7 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("scale", $r6);

        $r3[2] = $r7;

        $r8 = newarray (float)[2];

        $f4 = r0.<com.android.server.wm.DragState: float mOriginalAlpha>;

        $r8[0] = $f4;

        $r8[1] = 0.0F;

        $r9 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("alpha", $r8);

        $r3[3] = $r9;

        r17 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>($r3);

        $r10 = new com.android.server.wm.DragState$AnimationListener;

        specialinvoke $r10.<com.android.server.wm.DragState$AnimationListener: void <init>(com.android.server.wm.DragState,com.android.server.wm.DragState$1)>(r0, null);

        virtualinvoke r17.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(195L);

        $r12 = r0.<com.android.server.wm.DragState: android.view.animation.Interpolator mCubicEaseOutInterpolator>;

        virtualinvoke r17.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r12);

        virtualinvoke r17.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r10);

        virtualinvoke r17.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r10);

        $r13 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowManagerService mService>;

        $r15 = $r13.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r14 = new com.android.server.wm._$$Lambda$DragState$WVn6_eGpkutjNAUr_QLMbFLA5qw;

        specialinvoke $r14.<com.android.server.wm._$$Lambda$DragState$WVn6_eGpkutjNAUr_QLMbFLA5qw: void <init>(android.animation.ValueAnimator)>(r17);

        virtualinvoke $r15.<android.os.Handler: boolean post(java.lang.Runnable)>($r14);

        return r17;
    }

    private android.animation.ValueAnimator createReturnAnimationLocked()
    {
        com.android.server.wm.DragState r0;
        android.animation.PropertyValuesHolder r1, $r7, r18, r19;
        long l0, $l8;
        float[] $r2, $r3, $r4, $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, f14, f15, f16, f17, f18, f19, f20;
        android.animation.PropertyValuesHolder[] $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        android.graphics.Point $r8, $r9, $r10, $r11;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wm.DragState$AnimationListener $r12;
        android.view.animation.Interpolator $r14;
        com.android.server.wm.WindowManagerService $r15;
        com.android.server.wm._$$Lambda$DragState$4E4tzlfJ9AKYEiVk7F8SFlBLwPc $r16;
        android.os.Handler $r17;
        android.animation.ValueAnimator r20;

        r0 := @this: com.android.server.wm.DragState;

        f14 = r0.<com.android.server.wm.DragState: float mCurrentX>;

        f15 = r0.<com.android.server.wm.DragState: float mThumbOffsetX>;

        $r2 = newarray (float)[2];

        $f0 = f14 - f15;

        $r2[0] = $f0;

        $f1 = r0.<com.android.server.wm.DragState: float mOriginalX>;

        $f2 = $f1 - f15;

        $r2[1] = $f2;

        r18 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("x", $r2);

        f16 = r0.<com.android.server.wm.DragState: float mCurrentY>;

        f17 = r0.<com.android.server.wm.DragState: float mThumbOffsetY>;

        $r3 = newarray (float)[2];

        $f3 = f16 - f17;

        $r3[0] = $f3;

        $f4 = r0.<com.android.server.wm.DragState: float mOriginalY>;

        $f5 = $f4 - f17;

        $r3[1] = $f5;

        r19 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("y", $r3);

        $r4 = newarray (float)[2];

        $r4[0] = 1.0F;

        $r4[1] = 1.0F;

        r1 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("scale", $r4);

        f18 = r0.<com.android.server.wm.DragState: float mOriginalAlpha>;

        $r5 = newarray (android.animation.PropertyValuesHolder)[4];

        $r5[0] = r18;

        $r5[1] = r19;

        $r5[2] = r1;

        $r6 = newarray (float)[2];

        $r6[0] = f18;

        $f6 = f18 / 2.0F;

        $r6[1] = $f6;

        $r7 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>("alpha", $r6);

        $r5[3] = $r7;

        r20 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>($r5);

        $f8 = r0.<com.android.server.wm.DragState: float mOriginalX>;

        $f7 = r0.<com.android.server.wm.DragState: float mCurrentX>;

        f19 = $f8 - $f7;

        $f10 = r0.<com.android.server.wm.DragState: float mOriginalY>;

        $f9 = r0.<com.android.server.wm.DragState: float mCurrentY>;

        f20 = $f10 - $f9;

        $f12 = f19 * f19;

        $f11 = f20 * f20;

        $f13 = $f12 + $f11;

        $d0 = (double) $f13;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $r8 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        $i2 = $r8.<android.graphics.Point: int x>;

        $r9 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        $i1 = $r9.<android.graphics.Point: int x>;

        $i6 = $i2 * $i1;

        $r10 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        $i4 = $r10.<android.graphics.Point: int y>;

        $r11 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        $i3 = $r11.<android.graphics.Point: int y>;

        $i5 = $i4 * $i3;

        $i7 = $i6 + $i5;

        $d2 = (double) $i7;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $d4 = $d1 / $d3;

        $d5 = $d4 * 180.0;

        l0 = (long) $d5;

        $r12 = new com.android.server.wm.DragState$AnimationListener;

        specialinvoke $r12.<com.android.server.wm.DragState$AnimationListener: void <init>(com.android.server.wm.DragState,com.android.server.wm.DragState$1)>(r0, null);

        $l8 = l0 + 195L;

        virtualinvoke r20.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>($l8);

        $r14 = r0.<com.android.server.wm.DragState: android.view.animation.Interpolator mCubicEaseOutInterpolator>;

        virtualinvoke r20.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r14);

        virtualinvoke r20.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r12);

        virtualinvoke r20.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r12);

        $r15 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowManagerService mService>;

        $r17 = $r15.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r16 = new com.android.server.wm._$$Lambda$DragState$4E4tzlfJ9AKYEiVk7F8SFlBLwPc;

        specialinvoke $r16.<com.android.server.wm._$$Lambda$DragState$4E4tzlfJ9AKYEiVk7F8SFlBLwPc: void <init>(android.animation.ValueAnimator)>(r20);

        virtualinvoke $r17.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

        return r20;
    }

    private boolean isFromSource(int)
    {
        com.android.server.wm.DragState r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.wm.DragState;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.DragState: int mTouchSource>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isValidDropTarget(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.WindowState r1;
        boolean $z0, $z1, $z2, z3;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.IWindow $r2;
        android.os.IBinder $r3, $r4;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z3 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isPotentialDragTarget()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i0 = r0.<com.android.server.wm.DragState: int mFlags>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.wm.DragState: boolean targetWindowSupportsGlobalDrag(com.android.server.wm.WindowState)>(r1);

        if $z2 != 0 goto label4;

     label3:
        $r3 = r0.<com.android.server.wm.DragState: android.os.IBinder mLocalWin>;

        $r2 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r4 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r3 == $r4 goto label4;

        return 0;

     label4:
        $z1 = r0.<com.android.server.wm.DragState: boolean mCrossProfileCopyAllowed>;

        if $z1 != 0 goto label5;

        $i2 = r0.<com.android.server.wm.DragState: int mSourceUserId>;

        $i3 = virtualinvoke r1.<com.android.server.wm.WindowState: int getOwningUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        if $i2 != $i4 goto label6;

     label5:
        z3 = 1;

     label6:
        return z3;
    }

    private boolean isWindowNotified(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.WindowState r1, $r5;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows>;

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.wm.WindowState) $r4;

        if $r5 != r1 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    static void lambda$createCancelAnimationLocked$2(android.animation.ValueAnimator)
    {
        android.animation.ValueAnimator r0;

        r0 := @parameter0: android.animation.ValueAnimator;

        virtualinvoke r0.<android.animation.ValueAnimator: void start()>();

        return;
    }

    static void lambda$createReturnAnimationLocked$1(android.animation.ValueAnimator)
    {
        android.animation.ValueAnimator r0;

        r0 := @parameter0: android.animation.ValueAnimator;

        virtualinvoke r0.<android.animation.ValueAnimator: void start()>();

        return;
    }

    private static android.view.DragEvent obtainDragEvent(com.android.server.wm.WindowState, int, float, float, java.lang.Object, android.content.ClipDescription, android.content.ClipData, com.android.internal.view.IDragAndDropPermissions, boolean)
    {
        com.android.server.wm.WindowState r0;
        int i0;
        float f0, f1, $f2, $f3;
        java.lang.Object r1;
        android.content.ClipDescription r2;
        android.content.ClipData r3;
        com.android.internal.view.IDragAndDropPermissions r4;
        boolean z0;
        android.view.DragEvent $r5;

        r0 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r1 := @parameter4: java.lang.Object;

        r2 := @parameter5: android.content.ClipDescription;

        r3 := @parameter6: android.content.ClipData;

        r4 := @parameter7: com.android.internal.view.IDragAndDropPermissions;

        z0 := @parameter8: boolean;

        $f2 = virtualinvoke r0.<com.android.server.wm.WindowState: float translateToWindowX(float)>(f0);

        $f3 = virtualinvoke r0.<com.android.server.wm.WindowState: float translateToWindowY(float)>(f1);

        $r5 = staticinvoke <android.view.DragEvent: android.view.DragEvent obtain(int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,com.android.internal.view.IDragAndDropPermissions,boolean)>(i0, $f2, $f3, r1, r2, r3, r4, z0);

        return $r5;
    }

    private void sendDragStartedLocked(com.android.server.wm.WindowState, float, float, android.content.ClipDescription)
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.WindowState r1;
        float f0, f1;
        boolean $z0, $z1;
        android.view.IWindow $r2;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        com.android.server.wm.Session $r4, $r6, $r11;
        java.lang.Throwable $r5;
        android.os.RemoteException $r7;
        java.lang.String $r10;
        android.content.ClipDescription r12;
        android.view.DragEvent r13;
        java.lang.StringBuilder r16;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r12 := @parameter3: android.content.ClipDescription;

        $z0 = r0.<com.android.server.wm.DragState: boolean mDragInProgress>;

        if $z0 == 0 goto label10;

        $z1 = specialinvoke r0.<com.android.server.wm.DragState: boolean isValidDropTarget(com.android.server.wm.WindowState)>(r1);

        if $z1 == 0 goto label10;

        r13 = staticinvoke <com.android.server.wm.DragState: android.view.DragEvent obtainDragEvent(com.android.server.wm.WindowState,int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,com.android.internal.view.IDragAndDropPermissions,boolean)>(r1, 1, f0, f1, null, r12, null, null, 0);

     label01:
        $r2 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r2.<android.view.IWindow: void dispatchDragEvent(android.view.DragEvent)>(r13);

        $r3 = r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label02:
        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i1 = $r4.<com.android.server.wm.Session: int mPid>;

        if $i0 == $i1 goto label10;

     label03:
        virtualinvoke r13.<android.view.DragEvent: void recycle()>();

        goto label10;

     label04:
        $r5 := @caughtexception;

        goto label08;

     label05:
        $r7 := @caughtexception;

     label06:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to drag-start window ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r10);

     label07:
        $i5 = staticinvoke <android.os.Process: int myPid()>();

        $r11 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i6 = $r11.<com.android.server.wm.Session: int mPid>;

        if $i5 == $i6 goto label10;

        goto label03;

     label08:
        $i2 = staticinvoke <android.os.Process: int myPid()>();

        $r6 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i3 = $r6.<com.android.server.wm.Session: int mPid>;

        if $i2 == $i3 goto label09;

        virtualinvoke r13.<android.view.DragEvent: void recycle()>();

     label09:
        throw $r5;

     label10:
        return;

        catch android.os.RemoteException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    private void showInputSurface()
    {
        com.android.server.wm.DragState r0;
        android.view.SurfaceControl $r1, $r2, $r5, $r8, $r15, $r29;
        android.view.SurfaceControl$Transaction $r3, $r6, $r9, $r16, $r18, $r20;
        android.graphics.Point $r11, $r12;
        int $i0, $i1, $i3;
        android.graphics.Rect $r13, $r14;
        com.android.server.wm.DisplayContent $r21, $r23;
        com.android.server.wm.RootWindowContainer $r22;
        android.view.SurfaceSession $r24;
        android.view.SurfaceControl$Builder $r25, $r26, $r27, $r28;
        com.android.server.wm.WindowManagerService r30;
        android.view.InputWindowHandle r31;

        r0 := @this: com.android.server.wm.DragState;

        $r1 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface>;

        if $r1 != null goto label1;

        r30 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowManagerService mService>;

        $r22 = r30.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r21 = r0.<com.android.server.wm.DragState: com.android.server.wm.DisplayContent mDisplayContent>;

        $i3 = virtualinvoke $r21.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r23 = virtualinvoke $r22.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i3);

        $r24 = virtualinvoke $r23.<com.android.server.wm.DisplayContent: android.view.SurfaceSession getSession()>();

        $r25 = virtualinvoke r30.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Builder makeSurfaceBuilder(android.view.SurfaceSession)>($r24);

        $r26 = virtualinvoke $r25.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()>();

        $r27 = virtualinvoke $r26.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>("Drag and Drop Input Consumer");

        $r28 = virtualinvoke $r27.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("DragState.showInputSurface");

        $r29 = virtualinvoke $r28.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface> = $r29;

     label1:
        r31 = virtualinvoke r0.<com.android.server.wm.DragState: android.view.InputWindowHandle getInputWindowHandle()>();

        if r31 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drag is in progress but there is no drag window handle.");

        return;

     label2:
        $r3 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r2 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface>;

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>($r2);

        $r6 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r5 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface>;

        virtualinvoke $r6.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)>($r5, r31);

        $r9 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r8 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface>;

        virtualinvoke $r9.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>($r8, 2147483647);

        $r13 = r0.<com.android.server.wm.DragState: android.graphics.Rect mTmpClipRect>;

        $r11 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        $i1 = $r11.<android.graphics.Point: int x>;

        $r12 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        $i0 = $r12.<android.graphics.Point: int y>;

        virtualinvoke $r13.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        $r16 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r15 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface>;

        $r14 = r0.<com.android.server.wm.DragState: android.graphics.Rect mTmpClipRect>;

        virtualinvoke $r16.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,android.graphics.Rect)>($r15, $r14);

        $r18 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r18.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction syncInputWindows()>();

        $r20 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r20.<android.view.SurfaceControl$Transaction: void apply(boolean)>(1);

        return;
    }

    private boolean targetWindowSupportsGlobalDrag(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.ActivityRecord $r2, $r3;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 == null goto label2;

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $i0 = $r3.<com.android.server.wm.ActivityRecord: int mTargetSdk>;

        if $i0 < 24 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    void broadcastDragStartedLocked(float, float)
    {
        com.android.server.wm.DragState r0;
        float f0, f1;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        android.os.UserManagerInternal $r3;
        boolean $z0, $z1;
        com.android.server.wm._$$Lambda$DragState$_yUFIMrhYYccZ0gwd6eVcpAE93o $r4;
        com.android.server.wm.DisplayContent $r5;
        android.content.ClipData r6;
        android.content.ClipDescription r7;

        r0 := @this: com.android.server.wm.DragState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<com.android.server.wm.DragState: float mCurrentX> = f0;

        r0.<com.android.server.wm.DragState: float mOriginalX> = f0;

        r0.<com.android.server.wm.DragState: float mCurrentY> = f1;

        r0.<com.android.server.wm.DragState: float mOriginalY> = f1;

        r6 = r0.<com.android.server.wm.DragState: android.content.ClipData mData>;

        if r6 == null goto label1;

        r7 = virtualinvoke r6.<android.content.ClipData: android.content.ClipDescription getDescription()>();

        goto label2;

     label1:
        r7 = null;

     label2:
        r0.<com.android.server.wm.DragState: android.content.ClipDescription mDataDescription> = r7;

        $r1 = r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        r0.<com.android.server.wm.DragState: boolean mDragInProgress> = 1;

        $i0 = r0.<com.android.server.wm.DragState: int mUid>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        r0.<com.android.server.wm.DragState: int mSourceUserId> = $i1;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r3 = (android.os.UserManagerInternal) $r2;

        $i2 = r0.<com.android.server.wm.DragState: int mSourceUserId>;

        $z0 = virtualinvoke $r3.<android.os.UserManagerInternal: boolean getUserRestriction(int,java.lang.String)>($i2, "no_cross_profile_copy_paste");

        $z1 = 1 ^ $z0;

        r0.<com.android.server.wm.DragState: boolean mCrossProfileCopyAllowed> = $z1;

        $r5 = r0.<com.android.server.wm.DragState: com.android.server.wm.DisplayContent mDisplayContent>;

        $r4 = new com.android.server.wm._$$Lambda$DragState$_yUFIMrhYYccZ0gwd6eVcpAE93o;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$DragState$_yUFIMrhYYccZ0gwd6eVcpAE93o: void <init>(com.android.server.wm.DragState,float,float)>(r0, f0, f1);

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r4, 0);

        return;
    }

    void cancelDragLocked(boolean)
    {
        com.android.server.wm.DragState r0;
        boolean z0, $z1;
        android.animation.ValueAnimator $r1, $r2;

        r0 := @this: com.android.server.wm.DragState;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator>;

        if $r1 == null goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.wm.DragState: boolean mDragInProgress>;

        if $z1 == 0 goto label3;

        if z0 == 0 goto label2;

        goto label3;

     label2:
        $r2 = specialinvoke r0.<com.android.server.wm.DragState: android.animation.ValueAnimator createCancelAnimationLocked()>();

        r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator> = $r2;

        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.DragState: void closeLocked()>();

        return;
    }

    void closeLocked()
    {
        com.android.server.wm.DragState r0;
        int i0, $i2, $i3, $i4;
        com.android.server.wm.WindowState r1;
        android.view.DragEvent r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.animation.ValueAnimator $r3;
        android.view.SurfaceControl$Transaction $r4, $r5, $r6, $r7;
        float $f0, $f1, f2, f3;
        com.android.server.wm.DisplayContent $r8;
        com.android.server.wm.WindowManagerService $r9;
        java.util.ArrayList $r10, $r11;
        java.lang.Object $r12;
        com.android.server.wm.Session $r13, $r14;
        com.android.server.wm.DragDropController $r15, $r28;
        android.os.RemoteException $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r20;
        com.android.server.wm.DragState$InputInterceptor r21;
        java.util.Iterator r22;
        android.view.IWindow $r23;
        android.view.SurfaceControl r26, r27;

        r0 := @this: com.android.server.wm.DragState;

        r0.<com.android.server.wm.DragState: boolean mIsClosing> = 1;

        r21 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragState$InputInterceptor mInputInterceptor>;

        if r21 == null goto label01;

        $r15 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r15.<com.android.server.wm.DragDropController: void sendHandlerMessage(int,java.lang.Object)>(1, r21);

        r0.<com.android.server.wm.DragState: com.android.server.wm.DragState$InputInterceptor mInputInterceptor> = null;

     label01:
        $z0 = r0.<com.android.server.wm.DragState: boolean mDragInProgress>;

        if $z0 == 0 goto label11;

        i0 = staticinvoke <android.os.Process: int myPid()>();

        $r10 = r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows>;

        r22 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r12 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.wm.WindowState) $r12;

        $z4 = r0.<com.android.server.wm.DragState: boolean mDragResult>;

        if $z4 != 0 goto label03;

        $r14 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i4 = $r14.<com.android.server.wm.Session: int mPid>;

        $i3 = r0.<com.android.server.wm.DragState: int mPid>;

        if $i4 != $i3 goto label03;

        f2 = r0.<com.android.server.wm.DragState: float mCurrentX>;

        f3 = r0.<com.android.server.wm.DragState: float mCurrentY>;

        goto label04;

     label03:
        f3 = 0.0F;

        f2 = 0.0F;

     label04:
        $z5 = r0.<com.android.server.wm.DragState: boolean mDragResult>;

        r2 = staticinvoke <android.view.DragEvent: android.view.DragEvent obtain(int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,com.android.internal.view.IDragAndDropPermissions,boolean)>(4, f2, f3, null, null, null, null, $z5);

     label05:
        $r23 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r23.<android.view.IWindow: void dispatchDragEvent(android.view.DragEvent)>(r2);

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to drag-end window ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r20);

     label08:
        $r13 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i2 = $r13.<com.android.server.wm.Session: int mPid>;

        if i0 == $i2 goto label09;

        virtualinvoke r2.<android.view.DragEvent: void recycle()>();

     label09:
        goto label02;

     label10:
        $r11 = r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows>;

        virtualinvoke $r11.<java.util.ArrayList: void clear()>();

        r0.<com.android.server.wm.DragState: boolean mDragInProgress> = 0;

     label11:
        $z1 = specialinvoke r0.<com.android.server.wm.DragState: boolean isFromSource(int)>(8194);

        if $z1 == 0 goto label12;

        $r9 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowManagerService mService>;

        $r8 = r0.<com.android.server.wm.DragState: com.android.server.wm.DisplayContent mDisplayContent>;

        $f1 = r0.<com.android.server.wm.DragState: float mCurrentX>;

        $f0 = r0.<com.android.server.wm.DragState: float mCurrentY>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService: void restorePointerIconLocked(com.android.server.wm.DisplayContent,float,float)>($r8, $f1, $f0);

        r0.<com.android.server.wm.DragState: int mTouchSource> = 0;

     label12:
        r26 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface>;

        if r26 == null goto label13;

        $r6 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r7 = virtualinvoke $r6.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction remove(android.view.SurfaceControl)>(r26);

        virtualinvoke $r7.<android.view.SurfaceControl$Transaction: void apply()>();

        r0.<com.android.server.wm.DragState: android.view.SurfaceControl mInputSurface> = null;

     label13:
        r27 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl>;

        if r27 == null goto label14;

        $r4 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r5 = virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>(r27, null);

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: void apply()>();

        r0.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl> = null;

     label14:
        $r3 = r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator>;

        if $r3 == null goto label15;

        $z2 = r0.<com.android.server.wm.DragState: boolean mAnimationCompleted>;

        if $z2 != 0 goto label15;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowManager", "Unexpectedly destroying mSurfaceControl while animation is running");

     label15:
        r0.<com.android.server.wm.DragState: int mFlags> = 0;

        r0.<com.android.server.wm.DragState: android.os.IBinder mLocalWin> = null;

        r0.<com.android.server.wm.DragState: android.os.IBinder mToken> = null;

        r0.<com.android.server.wm.DragState: android.content.ClipData mData> = null;

        r0.<com.android.server.wm.DragState: float mThumbOffsetY> = 0.0F;

        r0.<com.android.server.wm.DragState: float mThumbOffsetX> = 0.0F;

        r0.<com.android.server.wm.DragState: java.util.ArrayList mNotifiedWindows> = null;

        $r28 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r28.<com.android.server.wm.DragDropController: void onDragStateClosedLocked(com.android.server.wm.DragState)>(r0);

        return;

        catch android.os.RemoteException from label05 to label06 with label07;
    }

    void endDragLocked()
    {
        com.android.server.wm.DragState r0;
        android.animation.ValueAnimator $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.DragState;

        $r1 = r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator>;

        if $r1 == null goto label1;

        return;

     label1:
        $z0 = r0.<com.android.server.wm.DragState: boolean mDragResult>;

        if $z0 != 0 goto label2;

        $r2 = specialinvoke r0.<com.android.server.wm.DragState: android.animation.ValueAnimator createReturnAnimationLocked()>();

        r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator> = $r2;

        return;

     label2:
        virtualinvoke r0.<com.android.server.wm.DragState: void closeLocked()>();

        return;
    }

    android.view.InputChannel getInputChannel()
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.DragState$InputInterceptor r1;
        android.view.InputChannel r2;

        r0 := @this: com.android.server.wm.DragState;

        r1 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragState$InputInterceptor mInputInterceptor>;

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = r1.<com.android.server.wm.DragState$InputInterceptor: android.view.InputChannel mServerChannel>;

     label2:
        return r2;
    }

    android.view.InputWindowHandle getInputWindowHandle()
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.DragState$InputInterceptor r1;
        android.view.InputWindowHandle r2;

        r0 := @this: com.android.server.wm.DragState;

        r1 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragState$InputInterceptor mInputInterceptor>;

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = r1.<com.android.server.wm.DragState$InputInterceptor: android.view.InputWindowHandle mDragWindowHandle>;

     label2:
        return r2;
    }

    boolean isClosing()
    {
        com.android.server.wm.DragState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DragState;

        $z0 = r0.<com.android.server.wm.DragState: boolean mIsClosing>;

        return $z0;
    }

    boolean isInProgress()
    {
        com.android.server.wm.DragState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.DragState;

        $z0 = r0.<com.android.server.wm.DragState: boolean mDragInProgress>;

        return $z0;
    }

    public void lambda$broadcastDragStartedLocked$0$DragState(float, float, com.android.server.wm.WindowState)
    {
        com.android.server.wm.DragState r0;
        float f0, f1;
        com.android.server.wm.WindowState r1;
        android.content.ClipDescription $r2;

        r0 := @this: com.android.server.wm.DragState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.DragState: android.content.ClipDescription mDataDescription>;

        specialinvoke r0.<com.android.server.wm.DragState: void sendDragStartedLocked(com.android.server.wm.WindowState,float,float,android.content.ClipDescription)>(r1, f0, f1, $r2);

        return;
    }

    void notifyDropLocked(float, float)
    {
        com.android.server.wm.DragState r0;
        float f0, f1;
        com.android.server.wm.WindowState r1;
        android.animation.ValueAnimator $r2;
        com.android.server.wm.DisplayContent $r3;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i10, i11, i12, i13, $i14;
        android.content.ClipData $r4, $r6, r16, $r19;
        com.android.server.wm.DragAndDropPermissionsHandler $r5, r15;
        java.lang.String $r7, $r13;
        java.lang.Throwable $r8;
        com.android.server.wm.Session $r9, $r14, $r23;
        android.os.RemoteException $r10;
        android.view.IWindow $r17, $r21;
        android.os.IBinder r18;
        android.view.DragEvent r20;
        com.android.server.wm.DragDropController $r22;
        java.lang.StringBuilder r26;

        r0 := @this: com.android.server.wm.DragState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator>;

        if $r2 == null goto label01;

        return;

     label01:
        r0.<com.android.server.wm.DragState: float mCurrentX> = f0;

        r0.<com.android.server.wm.DragState: float mCurrentY> = f1;

        $r3 = r0.<com.android.server.wm.DragState: com.android.server.wm.DisplayContent mDisplayContent>;

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getTouchableWinAtPointLocked(float,float)>(f0, f1);

        $z0 = specialinvoke r0.<com.android.server.wm.DragState: boolean isWindowNotified(com.android.server.wm.WindowState)>(r1);

        if $z0 != 0 goto label02;

        r0.<com.android.server.wm.DragState: boolean mDragResult> = 0;

        virtualinvoke r0.<com.android.server.wm.DragState: void endDragLocked()>();

        return;

     label02:
        $i0 = virtualinvoke r1.<com.android.server.wm.WindowState: int getOwningUid()>();

        i10 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        i11 = r0.<com.android.server.wm.DragState: int mFlags>;

        $i1 = i11 & 256;

        if $i1 == 0 goto label03;

        $i2 = i11 & 3;

        if $i2 == 0 goto label03;

        $r4 = r0.<com.android.server.wm.DragState: android.content.ClipData mData>;

        if $r4 == null goto label03;

        $r5 = new com.android.server.wm.DragAndDropPermissionsHandler;

        $r6 = r0.<com.android.server.wm.DragState: android.content.ClipData mData>;

        $i3 = r0.<com.android.server.wm.DragState: int mUid>;

        $r7 = virtualinvoke r1.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        $i4 = r0.<com.android.server.wm.DragState: int mFlags>;

        $i6 = $i4 & 195;

        $i5 = r0.<com.android.server.wm.DragState: int mSourceUserId>;

        specialinvoke $r5.<com.android.server.wm.DragAndDropPermissionsHandler: void <init>(android.content.ClipData,int,java.lang.String,int,int,int)>($r6, $i3, $r7, $i6, $i5, i10);

        r15 = $r5;

        goto label04;

     label03:
        r15 = null;

     label04:
        i12 = r0.<com.android.server.wm.DragState: int mSourceUserId>;

        if i12 == i10 goto label05;

        r16 = r0.<com.android.server.wm.DragState: android.content.ClipData mData>;

        if r16 == null goto label05;

        virtualinvoke r16.<android.content.ClipData: void fixUris(int)>(i12);

     label05:
        i13 = staticinvoke <android.os.Process: int myPid()>();

        $r17 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r18 = interfaceinvoke $r17.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r19 = r0.<com.android.server.wm.DragState: android.content.ClipData mData>;

        r20 = staticinvoke <com.android.server.wm.DragState: android.view.DragEvent obtainDragEvent(com.android.server.wm.WindowState,int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,com.android.internal.view.IDragAndDropPermissions,boolean)>(r1, 3, f0, f1, null, null, $r19, r15, 0);

     label06:
        $r21 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r21.<android.view.IWindow: void dispatchDragEvent(android.view.DragEvent)>(r20);

        $r22 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r22.<com.android.server.wm.DragDropController: void sendTimeoutMessage(int,java.lang.Object)>(0, r18);

     label07:
        $r23 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i14 = $r23.<com.android.server.wm.Session: int mPid>;

        if i13 == $i14 goto label13;

     label08:
        virtualinvoke r20.<android.view.DragEvent: void recycle()>();

        goto label13;

     label09:
        $r8 := @caughtexception;

        goto label14;

     label10:
        $r10 := @caughtexception;

     label11:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t send drop notification to win ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r13);

        virtualinvoke r0.<com.android.server.wm.DragState: void endDragLocked()>();

     label12:
        $r14 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i9 = $r14.<com.android.server.wm.Session: int mPid>;

        if i13 == $i9 goto label13;

        goto label08;

     label13:
        r0.<com.android.server.wm.DragState: android.os.IBinder mToken> = r18;

        return;

     label14:
        $r9 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i7 = $r9.<com.android.server.wm.Session: int mPid>;

        if i13 == $i7 goto label15;

        virtualinvoke r20.<android.view.DragEvent: void recycle()>();

     label15:
        throw $r8;

        catch android.os.RemoteException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
    }

    void notifyLocationLocked(float, float)
    {
        com.android.server.wm.DragState r0;
        float f0, f1;
        int i0, $i1, $i2;
        com.android.server.wm.DisplayContent $r1;
        android.view.IWindow $r2, $r7;
        com.android.server.wm.Session $r3, $r9;
        com.android.server.wm.WindowState $r4, $r5, $r6, $r8, r11, $r12;
        boolean $z0;
        android.os.RemoteException $r10;
        android.view.DragEvent r13, r14;

        r0 := @this: com.android.server.wm.DragState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<com.android.server.wm.DragState: com.android.server.wm.DisplayContent mDisplayContent>;

        r11 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getTouchableWinAtPointLocked(float,float)>(f0, f1);

        if r11 == null goto label1;

        $z0 = specialinvoke r0.<com.android.server.wm.DragState: boolean isWindowNotified(com.android.server.wm.WindowState)>(r11);

        if $z0 != 0 goto label1;

        r11 = null;

        goto label1;

     label1:
        i0 = staticinvoke <android.os.Process: int myPid()>();

        $r12 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowState mTargetWindow>;

        if r11 == $r12 goto label2;

        $r4 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowState mTargetWindow>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowState mTargetWindow>;

        r13 = staticinvoke <com.android.server.wm.DragState: android.view.DragEvent obtainDragEvent(com.android.server.wm.WindowState,int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,com.android.internal.view.IDragAndDropPermissions,boolean)>($r5, 6, 0.0F, 0.0F, null, null, null, null, 0);

        $r6 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowState mTargetWindow>;

        $r7 = $r6.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r7.<android.view.IWindow: void dispatchDragEvent(android.view.DragEvent)>(r13);

        $r8 = r0.<com.android.server.wm.DragState: com.android.server.wm.WindowState mTargetWindow>;

        $r9 = $r8.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i2 = $r9.<com.android.server.wm.Session: int mPid>;

        if i0 == $i2 goto label2;

        virtualinvoke r13.<android.view.DragEvent: void recycle()>();

     label2:
        if r11 == null goto label4;

     label3:
        r14 = staticinvoke <com.android.server.wm.DragState: android.view.DragEvent obtainDragEvent(com.android.server.wm.WindowState,int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,com.android.internal.view.IDragAndDropPermissions,boolean)>(r11, 2, f0, f1, null, null, null, null, 0);

        $r2 = r11.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r2.<android.view.IWindow: void dispatchDragEvent(android.view.DragEvent)>(r14);

        $r3 = r11.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i1 = $r3.<com.android.server.wm.Session: int mPid>;

        if i0 == $i1 goto label4;

        virtualinvoke r14.<android.view.DragEvent: void recycle()>();

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "can\'t send drag notification to windows");

     label6:
        r0.<com.android.server.wm.DragState: com.android.server.wm.WindowState mTargetWindow> = r11;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    void notifyMoveLocked(float, float)
    {
        com.android.server.wm.DragState r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        java.lang.String r1;
        long l0, l1;
        android.animation.ValueAnimator $r2;
        android.view.SurfaceControl $r3, $r6;
        android.view.SurfaceControl$Transaction $r4, $r5;
        boolean $z0;
        int $i2, $i3;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;
        java.lang.Long $r9, $r10;

        r0 := @this: com.android.server.wm.DragState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = r0.<com.android.server.wm.DragState: android.animation.ValueAnimator mAnimator>;

        if $r2 == null goto label1;

        return;

     label1:
        r0.<com.android.server.wm.DragState: float mCurrentX> = f0;

        r0.<com.android.server.wm.DragState: float mCurrentY> = f1;

        $r4 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl$Transaction mTransaction>;

        $r3 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl>;

        $f2 = r0.<com.android.server.wm.DragState: float mThumbOffsetX>;

        $f5 = f0 - $f2;

        $f3 = r0.<com.android.server.wm.DragState: float mThumbOffsetY>;

        $f4 = f1 - $f3;

        $r5 = virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>($r3, $f5, $f4);

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: void apply()>();

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.server.wm.DragState: android.view.SurfaceControl mSurfaceControl>;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $f6 = r0.<com.android.server.wm.DragState: float mThumbOffsetX>;

        $f7 = f0 - $f6;

        $i2 = (int) $f7;

        l0 = (long) $i2;

        $f8 = r0.<com.android.server.wm.DragState: float mThumbOffsetY>;

        $f9 = f1 - $f8;

        $i3 = (int) $f9;

        l1 = (long) $i3;

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r1;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r7[2] = $r10;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 342460966, 20, null, $r7);

     label2:
        virtualinvoke r0.<com.android.server.wm.DragState: void notifyLocationLocked(float,float)>(f0, f1);

        return;
    }

    void overridePointerIconLocked(int)
    {
        com.android.server.wm.DragState r0;
        int i0;
        boolean $z0;
        android.hardware.input.InputManager $r1;

        r0 := @this: com.android.server.wm.DragState;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.DragState: int mTouchSource> = i0;

        $z0 = specialinvoke r0.<com.android.server.wm.DragState: boolean isFromSource(int)>(8194);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        virtualinvoke $r1.<android.hardware.input.InputManager: void setPointerIconType(int)>(1021);

     label1:
        return;
    }

    void register(android.view.Display)
    {
        com.android.server.wm.DragState r0;
        android.view.Display r1;
        android.graphics.Point $r2;
        com.android.server.wm.DragState$InputInterceptor $r3, $r4;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: android.view.Display;

        $r2 = r0.<com.android.server.wm.DragState: android.graphics.Point mDisplaySize>;

        virtualinvoke r1.<android.view.Display: void getRealSize(android.graphics.Point)>($r2);

        $r3 = r0.<com.android.server.wm.DragState: com.android.server.wm.DragState$InputInterceptor mInputInterceptor>;

        if $r3 == null goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Duplicate register of drag input channel");

        goto label2;

     label1:
        $r4 = new com.android.server.wm.DragState$InputInterceptor;

        specialinvoke $r4.<com.android.server.wm.DragState$InputInterceptor: void <init>(com.android.server.wm.DragState,android.view.Display)>(r0, r1);

        r0.<com.android.server.wm.DragState: com.android.server.wm.DragState$InputInterceptor mInputInterceptor> = $r4;

        specialinvoke r0.<com.android.server.wm.DragState: void showInputSurface()>();

     label2:
        return;
    }

    void sendDragStartedIfNeededLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.DragState r0;
        com.android.server.wm.WindowState r1;
        boolean $z0, $z1;
        android.content.ClipDescription $r2;
        float $f0, $f1;

        r0 := @this: com.android.server.wm.DragState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.DragState: boolean mDragInProgress>;

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.server.wm.DragState: boolean isWindowNotified(com.android.server.wm.WindowState)>(r1);

        if $z1 == 0 goto label1;

        return;

     label1:
        $f1 = r0.<com.android.server.wm.DragState: float mCurrentX>;

        $f0 = r0.<com.android.server.wm.DragState: float mCurrentY>;

        $r2 = r0.<com.android.server.wm.DragState: android.content.ClipDescription mDataDescription>;

        specialinvoke r0.<com.android.server.wm.DragState: void sendDragStartedLocked(com.android.server.wm.WindowState,float,float,android.content.ClipDescription)>(r1, $f1, $f0, $r2);

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.DragState: long MIN_ANIMATION_DURATION_MS> = 195L;

        <com.android.server.wm.DragState: long MAX_ANIMATION_DURATION_MS> = 375L;

        <com.android.server.wm.DragState: int DRAG_FLAGS_URI_PERMISSIONS> = 195;

        <com.android.server.wm.DragState: int DRAG_FLAGS_URI_ACCESS> = 3;

        <com.android.server.wm.DragState: java.lang.String ANIMATED_PROPERTY_Y> = "y";

        <com.android.server.wm.DragState: java.lang.String ANIMATED_PROPERTY_X> = "x";

        <com.android.server.wm.DragState: java.lang.String ANIMATED_PROPERTY_SCALE> = "scale";

        <com.android.server.wm.DragState: java.lang.String ANIMATED_PROPERTY_ALPHA> = "alpha";

        return;
    }
}
