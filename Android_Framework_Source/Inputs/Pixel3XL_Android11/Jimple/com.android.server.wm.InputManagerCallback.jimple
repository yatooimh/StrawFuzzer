final class com.android.server.wm.InputManagerCallback extends java.lang.Object implements com.android.server.input.InputManagerService$WindowManagerCallbacks
{
    private static final long PRE_DUMP_MIN_INTERVAL_MS;
    private static final long PRE_DUMP_MONITOR_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private java.util.concurrent.atomic.AtomicReference mFocusedWindow;
    private boolean mFocusedWindowHasCapture;
    private boolean mInputDevicesReady;
    private final java.lang.Object mInputDevicesReadyMonitor;
    private boolean mInputDispatchEnabled;
    private boolean mInputDispatchFrozen;
    private java.lang.String mInputFreezeReason;
    private volatile long mLastPreDumpTimeMs;
    private final com.android.server.wm.WindowManagerService mService;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0, $r1;
        long $l0, $l1;

        <com.android.server.wm.InputManagerCallback: java.lang.String TAG> = "WindowManager";

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(20L);

        <com.android.server.wm.InputManagerCallback: long PRE_DUMP_MIN_INTERVAL_MS> = $l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        <com.android.server.wm.InputManagerCallback: long PRE_DUMP_MONITOR_TIMEOUT_MS> = $l1;

        return;
    }

    public void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerService r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.InputManagerCallback: java.lang.Object mInputDevicesReadyMonitor> = $r2;

        r0.<com.android.server.wm.InputManagerCallback: java.lang.String mInputFreezeReason> = null;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.android.server.wm.InputManagerCallback: java.util.concurrent.atomic.AtomicReference mFocusedWindow> = $r3;

        r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService> = r1;

        return;
    }

    static long access$000()
    {
        long $l0;

        $l0 = <com.android.server.wm.InputManagerCallback: long PRE_DUMP_MONITOR_TIMEOUT_MS>;

        return $l0;
    }

    private boolean dispatchPointerCaptureChanged(android.view.IWindow, boolean)
    {
        com.android.server.wm.InputManagerCallback r0;
        boolean z0, $z1;
        android.os.RemoteException $r1;
        android.view.IWindow r2;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r2 := @parameter0: android.view.IWindow;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.wm.InputManagerCallback: boolean mFocusedWindowHasCapture>;

        if $z1 == z0 goto label5;

        r0.<com.android.server.wm.InputManagerCallback: boolean mFocusedWindowHasCapture> = z0;

     label1:
        interfaceinvoke r2.<android.view.IWindow: void dispatchPointerCaptureChanged(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return 1;

     label5:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isWindowAboveSystem(com.android.server.wm.WindowState)
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowState r1;
        int i0, $i1;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0, z1;
        com.android.server.policy.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow>;

        i0 = interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int,boolean)>(2038, $z0);

        $i1 = r1.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i1 <= i0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private long notifyANRInner(android.view.InputApplicationHandle, android.os.IBinder, java.lang.String)
    {
        com.android.server.wm.InputManagerCallback r0;
        java.lang.String r1, $r5, $r9, $r10, $r13;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowState r3, r24, r27;
        long l0, $l2, $l3;
        com.android.server.wm.WindowManagerService $r4, $r6, $r15, $r17, $r32, $r33;
        android.app.ActivityManagerInternal $r7;
        byte $b1;
        com.android.server.wm.ActivityRecord$Token $r8;
        boolean $z0, z1, z2;
        android.view.WindowManager$LayoutParams $r11;
        java.lang.CharSequence $r12;
        android.os.IBinder $r14, r23;
        com.android.server.wm.EmbeddedWindowController $r16;
        java.util.HashMap $r18;
        java.lang.Object $r19;
        com.android.server.wm.Session $r20;
        java.lang.Throwable $r21;
        android.view.InputApplicationHandle r22;
        com.android.server.wm.ActivityRecord r25, r28;
        int i4, i5;
        com.android.server.wm.EmbeddedWindowController$EmbeddedWindow r26;
        java.lang.StringBuilder r29, r30, r31;
        com.android.server.wm.ActivityTaskManagerInternal $r34;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r22 := @parameter0: android.view.InputApplicationHandle;

        r23 := @parameter1: android.os.IBinder;

        r1 := @parameter2: java.lang.String;

        r24 = null;

        specialinvoke r0.<com.android.server.wm.InputManagerCallback: void preDumpIfLockTooSlow()>();

        $r4 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        r2 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label02:
        r25 = null;

        z1 = 0;

        i4 = -1;

        if r23 == null goto label07;

     label03:
        $r17 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r18 = $r17.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r23);

        r3 = (com.android.server.wm.WindowState) $r19;

     label04:
        r25 = null;

        r24 = r3;

        z1 = 0;

        i4 = -1;

        if r3 == null goto label07;

     label05:
        r25 = r3.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r20 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        i4 = $r20.<com.android.server.wm.Session: int mPid>;

        z1 = specialinvoke r0.<com.android.server.wm.InputManagerCallback: boolean isWindowAboveSystem(com.android.server.wm.WindowState)>(r3);

     label06:
        r24 = r3;

     label07:
        z2 = z1;

        i5 = i4;

        if r23 == null goto label13;

        z2 = z1;

        i5 = i4;

        if r24 != null goto label13;

     label08:
        $r15 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

        r26 = virtualinvoke $r16.<com.android.server.wm.EmbeddedWindowController: com.android.server.wm.EmbeddedWindowController$EmbeddedWindow get(android.os.IBinder)>(r23);

     label09:
        z2 = z1;

        i5 = i4;

        if r26 == null goto label13;

     label10:
        i5 = r26.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: int mOwnerPid>;

        r27 = r26.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: com.android.server.wm.WindowState mHostWindowState>;

     label11:
        if r27 != null goto label12;

        z2 = 1;

        goto label13;

     label12:
        z2 = specialinvoke r0.<com.android.server.wm.InputManagerCallback: boolean isWindowAboveSystem(com.android.server.wm.WindowState)>(r27);

     label13:
        r28 = r25;

        if r25 != null goto label15;

        r28 = r25;

        if r22 == null goto label15;

     label14:
        $r14 = r22.<android.view.InputApplicationHandle: android.os.IBinder token>;

        r28 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>($r14);

     label15:
        if r24 == null goto label18;

     label16:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event dispatching timed out sending to ");

        $r11 = r24.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r12 = virtualinvoke $r11.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Reason: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r13);

     label17:
        goto label22;

     label18:
        if r28 == null goto label21;

     label19:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event dispatching timed out sending to application ");

        $r9 = r28.<com.android.server.wm.ActivityRecord: java.lang.String stringName>;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Reason: ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r10);

     label20:
        goto label22;

     label21:
        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event dispatching timed out .  Reason: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r5);

     label22:
        $r32 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r32.<com.android.server.wm.WindowManagerService: void saveANRStateLocked(com.android.server.wm.ActivityRecord,com.android.server.wm.WindowState,java.lang.String)>(r28, r24, r1);

        exitmonitor r2;

     label23:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r33 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r34 = $r33.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r34.<com.android.server.wm.ActivityTaskManagerInternal: void saveANRState(java.lang.String)>(r1);

        if r28 == null goto label25;

        $r8 = r28.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        if $r8 == null goto label25;

        $z0 = virtualinvoke r28.<com.android.server.wm.ActivityRecord: boolean keyDispatchingTimedOut(java.lang.String,int)>(r1, i5);

        if $z0 != 0 goto label24;

        $l3 = r28.<com.android.server.wm.ActivityRecord: long mInputDispatchingTimeoutNanos>;

        return $l3;

     label24:
        goto label26;

     label25:
        if r24 != null goto label27;

        if i5 == -1 goto label26;

        goto label27;

     label26:
        goto label28;

     label27:
        $r6 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: android.app.ActivityManagerInternal mAmInternal>;

        l0 = virtualinvoke $r7.<android.app.ActivityManagerInternal: long inputDispatchingTimedOut(int,boolean,java.lang.String)>(i5, z2, r1);

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label28;

        $l2 = 1000000L * l0;

        return $l2;

     label28:
        return 0L;

     label29:
        $r21 := @caughtexception;

     label30:
        exitmonitor r2;

     label31:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label08 to label09 with label29;
        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label12 to label13 with label29;
        catch java.lang.Throwable from label14 to label15 with label29;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    private void preDumpIfLockTooSlow()
    {
        com.android.server.wm.InputManagerCallback r0;
        long l0, $l2, $l5, $l9, $l10, $l11;
        java.lang.String r1, $r15, $r19, r41;
        boolean z0, $z1, $z3;
        int i1, $i4, $i7, $i8, i13, $i14, i15;
        byte $b3, $b12;
        android.util.ArrayMap $r2;
        com.android.server.wm._$$Lambda$TDUtW_T9flkdwvGQ9AliNjGyzdY $r4;
        com.android.server.wm.WindowManagerService $r6, r30;
        com.android.server.wm._$$Lambda$Pl4__K9hqf4p4lme99AnaMrbXe0 $r8;
        java.util.concurrent.CountDownLatch $r10;
        java.util.concurrent.TimeUnit $r11;
        java.util.ArrayList $r12, $r20, r37;
        java.lang.Integer $r13, $r21;
        java.lang.StringBuilder $r14;
        java.io.File $r18, r40;
        java.lang.String[] $r22;
        java.lang.Object $r23, $r25;
        com.android.server.wm.InputManagerCallback$1 $r24;
        java.lang.Runnable $r26;
        java.lang.Throwable $r27;
        boolean[] r28;
        android.app.ActivityManagerInternal r33;
        int[] r38;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $z1 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z1 != 0 goto label01;

        return;

     label01:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = r0.<com.android.server.wm.InputManagerCallback: long mLastPreDumpTimeMs>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label02;

        $l9 = r0.<com.android.server.wm.InputManagerCallback: long mLastPreDumpTimeMs>;

        $l11 = l0 - $l9;

        $l10 = <com.android.server.wm.InputManagerCallback: long PRE_DUMP_MIN_INTERVAL_MS>;

        $b12 = $l11 cmp $l10;

        if $b12 >= 0 goto label02;

        return;

     label02:
        r28 = newarray (boolean)[1];

        r28[0] = 1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>(int)>(2);

        r30 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r30);

        $r4 = new com.android.server.wm._$$Lambda$TDUtW_T9flkdwvGQ9AliNjGyzdY;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$TDUtW_T9flkdwvGQ9AliNjGyzdY: void <init>(com.android.server.wm.WindowManagerService)>(r30);

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("WindowManager", $r4);

        $r6 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        r33 = $r6.<com.android.server.wm.WindowManagerService: android.app.ActivityManagerInternal mAmInternal>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r33);

        $r8 = new com.android.server.wm._$$Lambda$Pl4__K9hqf4p4lme99AnaMrbXe0;

        specialinvoke $r8.<com.android.server.wm._$$Lambda$Pl4__K9hqf4p4lme99AnaMrbXe0: void <init>(android.app.ActivityManagerInternal)>(r33);

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ActivityManager", $r8);

        $r10 = new java.util.concurrent.CountDownLatch;

        $i4 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        specialinvoke $r10.<java.util.concurrent.CountDownLatch: void <init>(int)>($i4);

        i13 = 0;

     label03:
        $i14 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i13 >= $i14 goto label04;

        $r23 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i13);

        r1 = (java.lang.String) $r23;

        $r24 = new com.android.server.wm.InputManagerCallback$1;

        $r25 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i13);

        $r26 = (java.lang.Runnable) $r25;

        specialinvoke $r24.<com.android.server.wm.InputManagerCallback$1: void <init>(com.android.server.wm.InputManagerCallback,java.lang.Runnable,java.util.concurrent.CountDownLatch,long,java.lang.String,boolean[])>(r0, $r26, $r10, l0, r1, r28);

        virtualinvoke $r24.<com.android.server.wm.InputManagerCallback$1: void start()>();

        i13 = i13 + 1;

        goto label03;

     label04:
        $l5 = <com.android.server.wm.InputManagerCallback: long PRE_DUMP_MONITOR_TIMEOUT_MS>;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z0 = virtualinvoke $r10.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l5, $r11);

     label05:
        if z0 == 0 goto label07;

        return;

     label06:
        $r27 := @caughtexception;

     label07:
        r0.<com.android.server.wm.InputManagerCallback: long mLastPreDumpTimeMs> = l0;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Pre-dump for unresponsive");

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(1);

        $i7 = <com.android.server.am.ActivityManagerService: int MY_PID>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        r37 = null;

        i15 = 0;

        $z3 = r28[0];

        if $z3 == 0 goto label08;

        $r22 = newarray (java.lang.String)[1];

        $r22[0] = "/system/bin/surfaceflinger";

        r38 = staticinvoke <android.os.Process: int[] getPidsForCommands(java.lang.String[])>($r22);

        goto label09;

     label08:
        r38 = null;

     label09:
        if r38 == null goto label11;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>(int)>(1);

        i1 = lengthof r38;

     label10:
        r37 = $r20;

        if i15 >= i1 goto label11;

        $i8 = r38[i15];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        i15 = i15 + 1;

        goto label10;

     label11:
        r40 = staticinvoke <com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(java.util.ArrayList,com.android.internal.os.ProcessCpuTracker,android.util.SparseArray,java.util.ArrayList,java.io.StringWriter)>($r12, null, null, r37, null);

        if r40 == null goto label12;

        r41 = virtualinvoke r40.<java.io.File: java.lang.String getParent()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r40.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_pre");

        $r18 = new java.io.File;

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r41, $r19);

        virtualinvoke r40.<java.io.File: boolean renameTo(java.io.File)>($r18);

     label12:
        return;

        catch java.lang.InterruptedException from label04 to label05 with label06;
    }

    private void updateInputDispatchModeLw()
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0, $z1;
        com.android.server.input.InputManagerService $r2;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $z1 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchEnabled>;

        $z0 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchFrozen>;

        virtualinvoke $r2.<com.android.server.input.InputManagerService: void setInputDispatchMode(boolean,boolean)>($z1, $z0);

        return;
    }

    public android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.wm.InputManagerCallback r0;
        android.os.IBinder r1;
        android.view.KeyEvent r2, $r5;
        int i0;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.policy.WindowManagerPolicy $r4;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r5 = interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder,android.view.KeyEvent,int)>(r1, r2, i0);

        return $r5;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.InputManagerCallback r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r4, $r8, $r10;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.wm.InputManagerCallback: java.lang.String mInputFreezeReason>;

        if $r4 == null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mInputFreezeReason=");

        $r8 = r0.<com.android.server.wm.InputManagerCallback: java.lang.String mInputFreezeReason>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

     label1:
        return;
    }

    public void freezeInputDispatchingLw()
    {
        com.android.server.wm.InputManagerCallback r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $z0 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchFrozen>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchFrozen> = 1;

        specialinvoke r0.<com.android.server.wm.InputManagerCallback: void updateInputDispatchModeLw()>();

     label1:
        return;
    }

    public int getPointerDisplayId()
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r4, $r7;
        boolean $z0;
        com.android.server.wm.RootWindowContainer $r5, $r8;
        com.android.server.wm.WindowList $r6, $r9;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.Object $r10;
        java.lang.Throwable $r11;
        com.android.server.wm.DisplayContent r12;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $r2 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $z0 = $r3.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays>;

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label03:
        i3 = 0;

     label04:
        $r4 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r6 = $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

        i4 = $i0 - 1;

     label05:
        if i4 < 0 goto label11;

     label06:
        $r7 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r9 = $r8.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r12 = (com.android.server.wm.DisplayContent) $r10;

        $i1 = virtualinvoke r12.<com.android.server.wm.DisplayContent: int getWindowingMode()>();

        if $i1 != 5 goto label08;

        i5 = virtualinvoke r12.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i5;

     label08:
        i6 = i3;

        if i3 != 0 goto label10;

        i6 = i3;

     label09:
        $i2 = virtualinvoke r12.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i2 == 0 goto label10;

        i6 = virtualinvoke r12.<com.android.server.wm.DisplayContent: int getDisplayId()>();

     label10:
        i4 = i4 + -1;

        i3 = i6;

        goto label05;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i3;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public int getPointerLayer()
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.policy.WindowManagerPolicy $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int)>(2018);

        $i1 = $i0 * 10000;

        $i2 = $i1 + 1000;

        return $i2;
    }

    public long interceptKeyBeforeDispatching(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.wm.InputManagerCallback r0;
        android.os.IBinder r1;
        android.view.KeyEvent r2;
        int i0;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        long $l1;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $l1 = interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.os.IBinder,android.view.KeyEvent,int)>(r1, r2, i0);

        return $l1;
    }

    public int interceptKeyBeforeQueueing(android.view.KeyEvent, int)
    {
        com.android.server.wm.InputManagerCallback r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.policy.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i1 = interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>(r1, i0);

        return $i1;
    }

    public int interceptMotionBeforeQueueingNonInteractive(int, long, int)
    {
        com.android.server.wm.InputManagerCallback r0;
        int i0, i2, $i3;
        long l1;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i3 = interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: int interceptMotionBeforeQueueingNonInteractive(int,long,int)>(i0, l1, i2);

        return $i3;
    }

    public long notifyANR(android.view.InputApplicationHandle, android.os.IBinder, java.lang.String)
    {
        com.android.server.wm.InputManagerCallback r0;
        java.lang.String r1, $r6, $r12;
        long l0, l1, $l2, $l3, $l5, $l6;
        java.lang.StringBuilder $r2, $r8;
        java.lang.Throwable $r7;
        android.view.InputApplicationHandle r13;
        android.os.IBinder r14;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r13 := @parameter0: android.view.InputApplicationHandle;

        r14 := @parameter1: android.os.IBinder;

        r1 := @parameter2: java.lang.String;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label1:
        l1 = specialinvoke r0.<com.android.server.wm.InputManagerCallback: long notifyANRInner(android.view.InputApplicationHandle,android.os.IBinder,java.lang.String)>(r13, r14, r1);

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyANR took ");

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l3 = $l2 - l0;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowManager", $r6);

        return l1;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyANR took ");

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l6 = $l5 - l0;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowManager", $r12);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void notifyCameraLensCoverSwitchChanged(long, boolean)
    {
        com.android.server.wm.InputManagerCallback r0;
        long l0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void notifyCameraLensCoverSwitchChanged(long,boolean)>(l0, z0);

        return;
    }

    public void notifyConfigurationChanged()
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerService $r1, $r2;
        com.android.server.wm.DisplayContent $r3;
        boolean $z0;
        java.lang.Object $r4, r8;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.WindowManagerGlobalLock r7;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        r7 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r7;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

        exitmonitor r7;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        r8 = r0.<com.android.server.wm.InputManagerCallback: java.lang.Object mInputDevicesReadyMonitor>;

        entermonitor r8;

     label03:
        $z0 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDevicesReady>;

        if $z0 != 0 goto label04;

        r0.<com.android.server.wm.InputManagerCallback: boolean mInputDevicesReady> = 1;

        $r4 = r0.<com.android.server.wm.InputManagerCallback: java.lang.Object mInputDevicesReadyMonitor>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

     label04:
        exitmonitor r8;

     label05:
        return;

     label06:
        $r5 := @caughtexception;

     label07:
        exitmonitor r8;

     label08:
        throw $r5;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r7;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean notifyFocusChanged(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerService $r1, $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4, $r6;
        java.util.concurrent.atomic.AtomicReference $r5, $r21;
        android.os.IBinder $r7, $r8, r14, r15;
        java.lang.StringBuilder $r9;
        java.lang.String $r12;
        java.lang.Throwable $r13;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r16;
        com.android.server.wm.WindowState r17;
        android.view.IWindow r18, r19;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r14 := @parameter0: android.os.IBinder;

        r15 := @parameter1: android.os.IBinder;

        z0 = 0;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        r16 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r15);

        r17 = (com.android.server.wm.WindowState) $r4;

        exitmonitor r16;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r17 == null goto label3;

        r18 = r17.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        goto label4;

     label3:
        r18 = null;

     label4:
        $r5 = r0.<com.android.server.wm.InputManagerCallback: java.util.concurrent.atomic.AtomicReference mFocusedWindow>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r19 = (android.view.IWindow) $r6;

        if r19 == null goto label6;

        if r18 == null goto label5;

        $r7 = interfaceinvoke r18.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r8 = interfaceinvoke r19.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r7 != $r8 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyFocusChanged called with unchanged mFocusedWindow=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r12);

        return 0;

     label5:
        z0 = specialinvoke r0.<com.android.server.wm.InputManagerCallback: boolean dispatchPointerCaptureChanged(android.view.IWindow,boolean)>(r19, 0);

     label6:
        $r21 = r0.<com.android.server.wm.InputManagerCallback: java.util.concurrent.atomic.AtomicReference mFocusedWindow>;

        virtualinvoke $r21.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r18);

        return z0;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor r16;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyInputChannelBroken(android.os.IBinder)
    {
        com.android.server.wm.InputManagerCallback r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.os.IBinder r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r11 := @parameter0: android.os.IBinder;

        if r11 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r2 = (com.android.server.wm.WindowState) $r6;

     label3:
        if r2 == null goto label5;

     label4:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WINDOW DIED ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r9);

        virtualinvoke r2.<com.android.server.wm.WindowState: void removeIfPossible()>();

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyLidSwitchChanged(long, boolean)
    {
        com.android.server.wm.InputManagerCallback r0;
        long l0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)>(l0, z0);

        return;
    }

    public void onPointerDownOutsideFocus(android.os.IBinder)
    {
        com.android.server.wm.InputManagerCallback r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.WindowManagerService$H $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.InputManagerCallback: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(62, r1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;
    }

    public boolean requestPointerCapture(android.os.IBinder, boolean)
    {
        com.android.server.wm.InputManagerCallback r0;
        boolean z0, $z1, $z2;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r8;
        java.lang.String $r6, $r11, r15;
        android.os.IBinder $r7, r12;
        android.view.IWindow r13;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        r12 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.InputManagerCallback: java.util.concurrent.atomic.AtomicReference mFocusedWindow>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r13 = (android.view.IWindow) $r2;

        if r13 == null goto label5;

        $r7 = interfaceinvoke r13.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r7 == r12 goto label1;

        goto label5;

     label1:
        $z1 = r0.<com.android.server.wm.InputManagerCallback: boolean mFocusedWindowHasCapture>;

        if $z1 != z0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestPointerCapture: already ");

        if z0 == 0 goto label2;

        r15 = "enabled";

        goto label3;

     label2:
        r15 = "disabled";

     label3:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r11);

        return 0;

     label4:
        $z2 = specialinvoke r0.<com.android.server.wm.InputManagerCallback: boolean dispatchPointerCaptureChanged(android.view.IWindow,boolean)>(r13, z0);

        return $z2;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestPointerCapture called for a window that has no focus: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r6);

        return 0;
    }

    public void setEventDispatchingLw(boolean)
    {
        com.android.server.wm.InputManagerCallback r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchEnabled>;

        if $z1 == z0 goto label1;

        r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchEnabled> = z0;

        specialinvoke r0.<com.android.server.wm.InputManagerCallback: void updateInputDispatchModeLw()>();

     label1:
        return;
    }

    public void thawInputDispatchingLw()
    {
        com.android.server.wm.InputManagerCallback r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        $z0 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchFrozen>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.InputManagerCallback: boolean mInputDispatchFrozen> = 0;

        r0.<com.android.server.wm.InputManagerCallback: java.lang.String mInputFreezeReason> = null;

        specialinvoke r0.<com.android.server.wm.InputManagerCallback: void updateInputDispatchModeLw()>();

     label1:
        return;
    }

    public boolean waitForInputDevicesReady(long)
    {
        com.android.server.wm.InputManagerCallback r0;
        long l0;
        java.lang.Object r1, $r2;
        java.lang.Throwable $r3, $r4;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.InputManagerCallback;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.wm.InputManagerCallback: java.lang.Object mInputDevicesReadyMonitor>;

        entermonitor r1;

     label01:
        z0 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDevicesReady>;

     label02:
        if z0 != 0 goto label06;

     label03:
        $r2 = r0.<com.android.server.wm.InputManagerCallback: java.lang.Object mInputDevicesReadyMonitor>;

        virtualinvoke $r2.<java.lang.Object: void wait(long)>(l0);

     label04:
        goto label06;

     label05:
        $r3 := @caughtexception;

     label06:
        z1 = r0.<com.android.server.wm.InputManagerCallback: boolean mInputDevicesReady>;

        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
}
