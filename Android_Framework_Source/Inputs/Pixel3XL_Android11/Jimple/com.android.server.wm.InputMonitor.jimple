final class com.android.server.wm.InputMonitor extends java.lang.Object
{
    private boolean mDisableWallpaperTouchEvents;
    private final com.android.server.wm.DisplayContent mDisplayContent;
    private final int mDisplayId;
    private boolean mDisplayRemoved;
    private android.view.InputWindowHandle mFocusedInputWindowHandle;
    private final android.os.Handler mHandler;
    private final android.util.ArrayMap mInputConsumers;
    private com.android.server.wm.WindowState mInputFocus;
    private final android.view.SurfaceControl$Transaction mInputTransaction;
    private final com.android.server.wm.WindowManagerService mService;
    private final android.graphics.Rect mTmpRect;
    private final com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer mUpdateInputForAllWindowsConsumer;
    private final com.android.server.wm.InputMonitor$UpdateInputWindows mUpdateInputWindows;
    private boolean mUpdateInputWindowsImmediately;
    private boolean mUpdateInputWindowsNeeded;
    private boolean mUpdateInputWindowsPending;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowManagerService r1, $r6, $r10;
        com.android.server.wm.DisplayContent r2;
        android.graphics.Rect $r3;
        android.util.ArrayMap $r4;
        com.android.server.wm.InputMonitor$UpdateInputWindows $r5;
        int $i0;
        java.util.function.Supplier $r7;
        java.lang.Object $r8;
        android.view.SurfaceControl$Transaction $r9;
        android.os.Handler $r11;
        com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer $r12;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.DisplayContent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded> = 1;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.InputMonitor: android.graphics.Rect mTmpRect> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers> = $r4;

        $r5 = new com.android.server.wm.InputMonitor$UpdateInputWindows;

        specialinvoke $r5.<com.android.server.wm.InputMonitor$UpdateInputWindows: void <init>(com.android.server.wm.InputMonitor,com.android.server.wm.InputMonitor$1)>(r0, null);

        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputWindows mUpdateInputWindows> = $r5;

        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.DisplayContent mDisplayContent> = r2;

        $i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        r0.<com.android.server.wm.InputMonitor: int mDisplayId> = $i0;

        $r6 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r8 = interfaceinvoke $r7.<java.util.function.Supplier: java.lang.Object get()>();

        $r9 = (android.view.SurfaceControl$Transaction) $r8;

        r0.<com.android.server.wm.InputMonitor: android.view.SurfaceControl$Transaction mInputTransaction> = $r9;

        $r10 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        r0.<com.android.server.wm.InputMonitor: android.os.Handler mHandler> = $r11;

        $r12 = new com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer;

        specialinvoke $r12.<com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer: void <init>(com.android.server.wm.InputMonitor,com.android.server.wm.InputMonitor$1)>(r0, null);

        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer mUpdateInputForAllWindowsConsumer> = $r12;

        return;
    }

    static android.util.ArrayMap access$000(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        return $r1;
    }

    static android.view.SurfaceControl$Transaction access$100(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: android.view.SurfaceControl$Transaction mInputTransaction>;

        return $r1;
    }

    static int access$1000(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        int $i0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $i0 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        return $i0;
    }

    static android.graphics.Rect access$1100(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: android.graphics.Rect mTmpRect>;

        return $r1;
    }

    static boolean access$1200(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mDisableWallpaperTouchEvents>;

        return $z0;
    }

    static boolean access$1202(com.android.server.wm.InputMonitor, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.InputMonitor: boolean mDisableWallpaperTouchEvents> = z0;

        return z0;
    }

    static com.android.server.wm.DisplayContent access$1300(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.DisplayContent mDisplayContent>;

        return $r1;
    }

    static boolean access$1400(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsImmediately>;

        return $z0;
    }

    static void access$1500(android.view.InputWindowHandle, java.lang.String, int, boolean)
    {
        android.view.InputWindowHandle r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @parameter0: android.view.InputWindowHandle;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        staticinvoke <com.android.server.wm.InputMonitor: void populateOverlayInputInfo(android.view.InputWindowHandle,java.lang.String,int,boolean)>(r0, r1, i0, z0);

        return;
    }

    static com.android.server.wm.WindowManagerService access$200(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        return $r1;
    }

    static boolean access$302(com.android.server.wm.InputMonitor, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsPending> = z0;

        return z0;
    }

    static boolean access$402(com.android.server.wm.InputMonitor, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded> = z0;

        return z0;
    }

    static boolean access$500(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mDisplayRemoved>;

        return $z0;
    }

    static com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer access$600(com.android.server.wm.InputMonitor)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer $r1;

        r0 := @parameter0: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer mUpdateInputForAllWindowsConsumer>;

        return $r1;
    }

    private void addInputConsumer(java.lang.String, com.android.server.wm.InputConsumerImpl)
    {
        com.android.server.wm.InputMonitor r0;
        java.lang.String r1;
        com.android.server.wm.InputConsumerImpl r2;
        android.util.ArrayMap $r3;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.wm.InputConsumerImpl;

        $r3 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke r2.<com.android.server.wm.InputConsumerImpl: void linkToDeathRecipient()>();

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        return;
    }

    private boolean disposeInputConsumer(com.android.server.wm.InputConsumerImpl)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.InputConsumerImpl r1;
        android.view.SurfaceControl$Transaction $r2;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.InputConsumerImpl;

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.InputMonitor: android.view.SurfaceControl$Transaction mInputTransaction>;

        virtualinvoke r1.<com.android.server.wm.InputConsumerImpl: void disposeChannelsLw(android.view.SurfaceControl$Transaction)>($r2);

        return 1;

     label1:
        return 0;
    }

    private static void populateOverlayInputInfo(android.view.InputWindowHandle, java.lang.String, int, boolean)
    {
        android.view.InputWindowHandle r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        android.graphics.Region $r2;

        r0 := @parameter0: android.view.InputWindowHandle;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r0.<android.view.InputWindowHandle: java.lang.String name> = r1;

        r0.<android.view.InputWindowHandle: int layoutParamsType> = i0;

        r0.<android.view.InputWindowHandle: long dispatchingTimeoutNanos> = 5000000000L;

        r0.<android.view.InputWindowHandle: boolean visible> = z0;

        r0.<android.view.InputWindowHandle: boolean canReceiveKeys> = 0;

        r0.<android.view.InputWindowHandle: boolean hasFocus> = 0;

        r0.<android.view.InputWindowHandle: int inputFeatures> = 2;

        r0.<android.view.InputWindowHandle: float scaleFactor> = 1.0F;

        r0.<android.view.InputWindowHandle: int layoutParamsFlags> = 56;

        r0.<android.view.InputWindowHandle: int portalToDisplayId> = -1;

        $r2 = r0.<android.view.InputWindowHandle: android.graphics.Region touchableRegion>;

        virtualinvoke $r2.<android.graphics.Region: void setEmpty()>();

        virtualinvoke r0.<android.view.InputWindowHandle: void setTouchableRegionCrop(android.view.SurfaceControl)>(null);

        return;
    }

    private void scheduleUpdateInputWindows()
    {
        com.android.server.wm.InputMonitor r0;
        boolean $z0, $z1;
        com.android.server.wm.InputMonitor$UpdateInputWindows $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.wm.InputMonitor;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mDisplayRemoved>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsPending>;

        if $z1 != 0 goto label2;

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsPending> = 1;

        $r2 = r0.<com.android.server.wm.InputMonitor: android.os.Handler mHandler>;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputWindows mUpdateInputWindows>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

     label2:
        return;
    }

    static void setTrustedOverlayInputInfo(android.view.SurfaceControl, android.view.SurfaceControl$Transaction, int, java.lang.String)
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceControl$Transaction r1;
        int i0;
        java.lang.String r2;
        android.view.InputWindowHandle $r4;

        r0 := @parameter0: android.view.SurfaceControl;

        r1 := @parameter1: android.view.SurfaceControl$Transaction;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r4 = new android.view.InputWindowHandle;

        specialinvoke $r4.<android.view.InputWindowHandle: void <init>(android.view.InputApplicationHandle,int)>(null, i0);

        staticinvoke <com.android.server.wm.InputMonitor: void populateOverlayInputInfo(android.view.InputWindowHandle,java.lang.String,int,boolean)>($r4, r2, 2015, 1);

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)>(r0, $r4);

        return;
    }

    com.android.server.policy.WindowManagerPolicy$InputConsumer createInputConsumer(android.os.Looper, java.lang.String, android.view.InputEventReceiver$Factory)
    {
        com.android.server.wm.InputMonitor r0;
        java.lang.String r1, $r10;
        android.view.InputEventReceiver$Factory r2;
        android.util.ArrayMap $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r9;
        com.android.server.wm.InputMonitor$EventReceiverInputConsumer $r11;
        com.android.server.wm.WindowManagerService $r12;
        android.os.UserHandle $r13;
        android.os.Looper r14;

        r0 := @this: com.android.server.wm.InputMonitor;

        r14 := @parameter0: android.os.Looper;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.view.InputEventReceiver$Factory;

        $r3 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r11 = new com.android.server.wm.InputMonitor$EventReceiverInputConsumer;

        $r12 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        $r13 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $i2 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        specialinvoke $r11.<com.android.server.wm.InputMonitor$EventReceiverInputConsumer: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.InputMonitor,android.os.Looper,java.lang.String,android.view.InputEventReceiver$Factory,int,android.os.UserHandle,int)>($r12, r0, r14, r1, r2, $i1, $r13, $i2);

        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>(r1, $r11);

        return $r11;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Existing input consumer found with name: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", display: ");

        $i0 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    void createInputConsumer(android.os.IBinder, java.lang.String, android.view.InputChannel, int, android.os.UserHandle)
    {
        com.android.server.wm.InputMonitor r0;
        java.lang.String r1, $r10;
        android.os.UserHandle r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.util.ArrayMap $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4;
        java.lang.IllegalStateException $r9;
        com.android.server.wm.InputConsumerImpl $r11;
        com.android.server.wm.WindowManagerService $r12;
        android.view.InputWindowHandle $r13, r17;
        android.os.IBinder r14;
        android.view.InputChannel r15;
        byte b6;

        r0 := @this: com.android.server.wm.InputMonitor;

        r14 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        r15 := @parameter2: android.view.InputChannel;

        i5 := @parameter3: int;

        r2 := @parameter4: android.os.UserHandle;

        $r3 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label8;

        $r11 = new com.android.server.wm.InputConsumerImpl;

        $r12 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $i2 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        specialinvoke $r11.<com.android.server.wm.InputConsumerImpl: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,java.lang.String,android.view.InputChannel,int,android.os.UserHandle,int)>($r12, r14, r1, r15, i5, r2, $i2);

        b6 = -1;

        i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if i0 == 1024719987 goto label3;

        if i0 == 1415830696 goto label2;

     label1:
        goto label4;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("wallpaper_input_consumer");

        if $z2 == 0 goto label1;

        b6 = 0;

        goto label4;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("pip_input_consumer");

        if $z1 == 0 goto label1;

        b6 = 1;

     label4:
        if b6 == 0 goto label6;

        if b6 == 1 goto label5;

        goto label7;

     label5:
        r17 = $r11.<com.android.server.wm.InputConsumerImpl: android.view.InputWindowHandle mWindowHandle>;

        $i3 = r17.<android.view.InputWindowHandle: int layoutParamsFlags>;

        $i4 = $i3 | 32;

        r17.<android.view.InputWindowHandle: int layoutParamsFlags> = $i4;

        goto label7;

     label6:
        $r13 = $r11.<com.android.server.wm.InputConsumerImpl: android.view.InputWindowHandle mWindowHandle>;

        $r13.<android.view.InputWindowHandle: boolean hasWallpaper> = 1;

     label7:
        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>(r1, $r11);

        return;

     label8:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Existing input consumer found with name: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", display: ");

        $i1 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    boolean destroyInputConsumer(java.lang.String)
    {
        com.android.server.wm.InputMonitor r0;
        java.lang.String r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        com.android.server.wm.InputConsumerImpl $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (com.android.server.wm.InputConsumerImpl) $r3;

        $z0 = specialinvoke r0.<com.android.server.wm.InputMonitor: boolean disposeInputConsumer(com.android.server.wm.InputConsumerImpl)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        return 1;

     label1:
        return 0;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.InputMonitor r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r7, r15;
        android.util.ArrayMap $r3, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.lang.Object $r8, $r10;
        com.android.server.wm.InputConsumerImpl $r11;
        java.util.Set r12;
        java.util.Iterator r14;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        r12 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Set keySet()>();

        $z0 = interfaceinvoke r12.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InputConsumers:");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        r14 = interfaceinvoke r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r8;

        $r9 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        $r11 = (com.android.server.wm.InputConsumerImpl) $r10;

        virtualinvoke $r11.<com.android.server.wm.InputConsumerImpl: void dump(java.io.PrintWriter,java.lang.String,java.lang.String)>(r1, r15, r2);

        goto label1;

     label2:
        return;
    }

    com.android.server.wm.InputConsumerImpl getInputConsumer(java.lang.String)
    {
        com.android.server.wm.InputMonitor r0;
        java.lang.String r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        com.android.server.wm.InputConsumerImpl $r4;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.android.server.wm.InputConsumerImpl) $r3;

        return $r4;
    }

    public void lambda$onDisplayRemoved$0$InputMonitor()
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowManagerService $r1, $r6;
        java.util.function.Supplier $r2;
        java.lang.Object $r3;
        android.view.SurfaceControl$Transaction $r4, $r5;
        int $i0;
        com.android.server.input.InputManagerService $r7;

        r0 := @this: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r3 = interfaceinvoke $r2.<java.util.function.Supplier: java.lang.Object get()>();

        $r4 = (android.view.SurfaceControl$Transaction) $r3;

        $r5 = virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction syncInputWindows()>();

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: void apply()>();

        $r6 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $i0 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        virtualinvoke $r7.<com.android.server.input.InputManagerService: void onDisplayRemoved(int)>($i0);

        return;
    }

    void layoutInputConsumers(int, int)
    {
        com.android.server.wm.InputMonitor r0;
        int i0, i1, $i2, i3;
        android.util.ArrayMap $r2, $r3;
        java.lang.Object $r4;
        android.view.SurfaceControl$Transaction $r5;
        com.android.server.wm.InputConsumerImpl $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.wm.InputMonitor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "layoutInputConsumer");

        $r2 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $i2 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        i3 = $i2 - 1;

     label2:
        if i3 < 0 goto label5;

     label3:
        $r3 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r6 = (com.android.server.wm.InputConsumerImpl) $r4;

        $r5 = r0.<com.android.server.wm.InputMonitor: android.view.SurfaceControl$Transaction mInputTransaction>;

        virtualinvoke $r6.<com.android.server.wm.InputConsumerImpl: void layout(android.view.SurfaceControl$Transaction,int,int)>($r5, i0, i1);

     label4:
        i3 = i3 + -1;

        goto label2;

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    void onDisplayRemoved()
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.InputMonitor$UpdateInputWindows $r1;
        android.os.Handler $r2, $r4;
        com.android.server.wm._$$Lambda$InputMonitor$ew_vdS116C6DH9LxWaTuVXJYZPE $r3;

        r0 := @this: com.android.server.wm.InputMonitor;

        $r2 = r0.<com.android.server.wm.InputMonitor: android.os.Handler mHandler>;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputWindows mUpdateInputWindows>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        $r4 = r0.<com.android.server.wm.InputMonitor: android.os.Handler mHandler>;

        $r3 = new com.android.server.wm._$$Lambda$InputMonitor$ew_vdS116C6DH9LxWaTuVXJYZPE;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$InputMonitor$ew_vdS116C6DH9LxWaTuVXJYZPE: void <init>(com.android.server.wm.InputMonitor)>(r0);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        r0.<com.android.server.wm.InputMonitor: boolean mDisplayRemoved> = 1;

        return;
    }

    public void pauseDispatchingLw(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowToken r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        $z0 = r1.<com.android.server.wm.WindowToken: boolean paused>;

        if $z0 != 0 goto label1;

        r1.<com.android.server.wm.WindowToken: boolean paused> = 1;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

     label1:
        return;
    }

    void populateInputWindowHandle(android.view.InputWindowHandle, com.android.server.wm.WindowState, int, int, boolean, boolean, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        android.view.InputWindowHandle r1;
        com.android.server.wm.WindowState r2;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0, z1, $z2, $z3, z4, z5;
        android.graphics.Rect r3, $r10;
        java.lang.String $r4;
        long $l3;
        com.android.server.wm.ActivityRecord $r5, $r13;
        com.android.server.wm.Session $r6, $r7;
        android.view.WindowManager$LayoutParams $r8, $r9;
        com.android.server.wm.Task $r11, $r12;
        float $f0, $f1, $f2;
        byte $b13;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: android.view.InputWindowHandle;

        r2 := @parameter1: com.android.server.wm.WindowState;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z4 := @parameter4: boolean;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        $r4 = virtualinvoke r2.<com.android.server.wm.WindowState: java.lang.String toString()>();

        r1.<android.view.InputWindowHandle: java.lang.String name> = $r4;

        $i2 = virtualinvoke r2.<com.android.server.wm.WindowState: int getSurfaceTouchableRegion(android.view.InputWindowHandle,int)>(r1, i0);

        r1.<android.view.InputWindowHandle: int layoutParamsFlags> = $i2;

        r1.<android.view.InputWindowHandle: int layoutParamsType> = i1;

        $l3 = virtualinvoke r2.<com.android.server.wm.WindowState: long getInputDispatchingTimeoutNanos()>();

        r1.<android.view.InputWindowHandle: long dispatchingTimeoutNanos> = $l3;

        r1.<android.view.InputWindowHandle: boolean visible> = z4;

        $z2 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        r1.<android.view.InputWindowHandle: boolean canReceiveKeys> = $z2;

        r1.<android.view.InputWindowHandle: boolean hasFocus> = z0;

        r1.<android.view.InputWindowHandle: boolean hasWallpaper> = z1;

        $r5 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r5 == null goto label1;

        $r13 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        z5 = $r13.<com.android.server.wm.ActivityRecord: boolean paused>;

        goto label2;

     label1:
        z5 = 0;

     label2:
        r1.<android.view.InputWindowHandle: boolean paused> = z5;

        $r6 = r2.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i4 = $r6.<com.android.server.wm.Session: int mPid>;

        r1.<android.view.InputWindowHandle: int ownerPid> = $i4;

        $r7 = r2.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i5 = $r7.<com.android.server.wm.Session: int mUid>;

        r1.<android.view.InputWindowHandle: int ownerUid> = $i5;

        $r8 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r8.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        r1.<android.view.InputWindowHandle: int inputFeatures> = $i6;

        $i7 = virtualinvoke r2.<com.android.server.wm.WindowState: int getDisplayId()>();

        r1.<android.view.InputWindowHandle: int displayId> = $i7;

        r3 = virtualinvoke r2.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i8 = r3.<android.graphics.Rect: int left>;

        r1.<android.view.InputWindowHandle: int frameLeft> = $i8;

        $i9 = r3.<android.graphics.Rect: int top>;

        r1.<android.view.InputWindowHandle: int frameTop> = $i9;

        $i10 = r3.<android.graphics.Rect: int right>;

        r1.<android.view.InputWindowHandle: int frameRight> = $i10;

        $i11 = r3.<android.graphics.Rect: int bottom>;

        r1.<android.view.InputWindowHandle: int frameBottom> = $i11;

        $r9 = virtualinvoke r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $r10 = $r9.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i12 = $r10.<android.graphics.Rect: int left>;

        r1.<android.view.InputWindowHandle: int surfaceInset> = $i12;

        $r11 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if $r11 == null goto label3;

        $r12 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $z3 = virtualinvoke $r12.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z3 == 0 goto label3;

        virtualinvoke r1.<android.view.InputWindowHandle: void replaceTouchableRegionWithCrop(android.view.SurfaceControl)>(null);

     label3:
        $f2 = r2.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b13 = $f2 cmpl 1.0F;

        if $b13 == 0 goto label4;

        $f0 = r2.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f1 = 1.0F / $f0;

        r1.<android.view.InputWindowHandle: float scaleFactor> = $f1;

        goto label5;

     label4:
        r1.<android.view.InputWindowHandle: float scaleFactor> = 1.0F;

     label5:
        if z0 == 0 goto label6;

        r0.<com.android.server.wm.InputMonitor: android.view.InputWindowHandle mFocusedInputWindowHandle> = r1;

     label6:
        return;
    }

    void resetInputConsumers(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.InputMonitor r0;
        android.view.SurfaceControl$Transaction r1;
        android.util.ArrayMap $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.InputConsumerImpl $r5;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $r2 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.InputMonitor: android.util.ArrayMap mInputConsumers>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.wm.InputConsumerImpl) $r4;

        virtualinvoke $r5.<com.android.server.wm.InputConsumerImpl: void hide(android.view.SurfaceControl$Transaction)>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public void resumeDispatchingLw(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowToken r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        $z0 = r1.<com.android.server.wm.WindowToken: boolean paused>;

        if $z0 == 0 goto label1;

        r1.<com.android.server.wm.WindowToken: boolean paused> = 0;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

     label1:
        return;
    }

    public void setFocusedAppLw(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.ActivityRecord r1;
        android.view.InputApplicationHandle r2;
        java.lang.String $r3;
        long $l0;
        com.android.server.wm.WindowManagerService $r4, $r6;
        int $i1, $i2;
        com.android.server.input.InputManagerService $r5, $r7;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        if r1 != null goto label1;

        $r6 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $i2 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        virtualinvoke $r7.<com.android.server.input.InputManagerService: void setFocusedApplication(int,android.view.InputApplicationHandle)>($i2, null);

        goto label2;

     label1:
        r2 = r1.<com.android.server.wm.ActivityRecord: android.view.InputApplicationHandle mInputApplicationHandle>;

        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: java.lang.String toString()>();

        r2.<android.view.InputApplicationHandle: java.lang.String name> = $r3;

        $l0 = r1.<com.android.server.wm.ActivityRecord: long mInputDispatchingTimeoutNanos>;

        r2.<android.view.InputApplicationHandle: long dispatchingTimeoutNanos> = $l0;

        $r4 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $i1 = r0.<com.android.server.wm.InputMonitor: int mDisplayId>;

        virtualinvoke $r5.<com.android.server.input.InputManagerService: void setFocusedApplication(int,android.view.InputApplicationHandle)>($i1, r2);

     label2:
        return;
    }

    public void setInputFocusLw(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowState r1, $r3;
        boolean z0, $z1, $z2;
        java.lang.String r2;
        com.android.server.wm.WindowToken $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z1 == 0 goto label1;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 285317231, 0, null, $r5);

     label1:
        $r3 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowState mInputFocus>;

        if r1 == $r3 goto label3;

        if r1 == null goto label2;

        $z2 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z2 == 0 goto label2;

        $r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r4.<com.android.server.wm.WindowToken: boolean paused> = 0;

     label2:
        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowState mInputFocus> = r1;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label3:
        return;
    }

    void setUpdateInputWindowsNeededLw()
    {
        com.android.server.wm.InputMonitor r0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded> = 1;

        return;
    }

    void updateInputWindowsImmediately(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.InputMonitor r0;
        android.view.SurfaceControl$Transaction r1, $r5;
        com.android.server.wm.InputMonitor$UpdateInputWindows $r2, $r4;
        android.os.Handler $r3;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $r3 = r0.<com.android.server.wm.InputMonitor: android.os.Handler mHandler>;

        $r2 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputWindows mUpdateInputWindows>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r2);

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsImmediately> = 1;

        $r4 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.InputMonitor$UpdateInputWindows mUpdateInputWindows>;

        virtualinvoke $r4.<com.android.server.wm.InputMonitor$UpdateInputWindows: void run()>();

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsImmediately> = 0;

        $r5 = r0.<com.android.server.wm.InputMonitor: android.view.SurfaceControl$Transaction mInputTransaction>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>($r5);

        return;
    }

    void updateInputWindowsLw(boolean)
    {
        com.android.server.wm.InputMonitor r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.InputMonitor;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded>;

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.InputMonitor: void scheduleUpdateInputWindows()>();

        return;
    }
}
