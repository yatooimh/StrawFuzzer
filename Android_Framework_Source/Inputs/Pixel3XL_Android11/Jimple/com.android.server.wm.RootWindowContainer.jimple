class com.android.server.wm.RootWindowContainer extends com.android.server.wm.WindowContainer implements android.hardware.display.DisplayManager$DisplayListener
{
    static final int MATCH_TASK_IN_STACKS_ONLY;
    static final int MATCH_TASK_IN_STACKS_OR_RECENT_TASKS;
    static final int MATCH_TASK_IN_STACKS_OR_RECENT_TASKS_AND_RESTORE;
    private static final int SET_SCREEN_BRIGHTNESS_OVERRIDE;
    private static final int SET_USER_ACTIVITY_TIMEOUT;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_RECENTS;
    private static final java.lang.String TAG_RELEASE;
    static final java.lang.String TAG_STATES;
    static final java.lang.String TAG_TASKS;
    private static final java.util.function.Consumer sRemoveReplacedWindowsConsumer;
    private final java.util.function.Consumer mCloseSystemDialogsConsumer;
    private java.lang.String mCloseSystemDialogsReason;
    int mCurrentUser;
    private com.android.server.wm.DisplayContent mDefaultDisplay;
    int mDefaultMinSizeOfResizeableTaskDp;
    private java.lang.String mDestroyAllActivitiesReason;
    private final java.lang.Runnable mDestroyAllActivitiesRunnable;
    private final android.util.SparseArray mDisplayAccessUIDs;
    android.hardware.display.DisplayManager mDisplayManager;
    private android.hardware.display.DisplayManagerInternal mDisplayManagerInternal;
    private final android.view.SurfaceControl$Transaction mDisplayTransaction;
    com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper mFinishDisabledPackageActivitiesHelper;
    private final android.os.Handler mHandler;
    private com.android.server.wm.Session mHoldScreen;
    com.android.server.wm.WindowState mHoldScreenWindow;
    private java.lang.Object mLastWindowFreezeSource;
    private boolean mObscureApplicationContentOnSecondaryDisplays;
    com.android.server.wm.WindowState mObscuringWindow;
    boolean mOrientationChangeComplete;
    private boolean mPowerHintSent;
    private float mScreenBrightnessOverride;
    com.android.server.wm.ActivityTaskManagerService mService;
    final java.util.ArrayList mSleepTokens;
    com.android.server.wm.ActivityStackSupervisor mStackSupervisor;
    private boolean mSustainedPerformanceModeCurrent;
    private boolean mSustainedPerformanceModeEnabled;
    private boolean mTaskLayersChanged;
    private boolean mTmpBoolean;
    private final com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult;
    private android.os.RemoteException mTmpRemoteException;
    private int mTmpTaskLayerRank;
    final java.util.HashMap mTopFocusedAppByProcess;
    private int mTopFocusedDisplayId;
    private boolean mUpdateRotation;
    private long mUserActivityTimeout;
    android.util.SparseIntArray mUserStackInFront;
    boolean mWallpaperActionPending;
    com.android.server.wm.WindowManagerService mWindowManager;

    static void <clinit>()
    {
        com.android.server.wm.'-$$Lambda$RootWindowContainer$Vvv8jzH2oSE9-eakZwTuKd5NpsU' $r0;
        java.util.function.Consumer r1;

        <com.android.server.wm.RootWindowContainer: java.lang.String TAG_TASKS> = "WindowManager";

        <com.android.server.wm.RootWindowContainer: java.lang.String TAG_STATES> = "WindowManager";

        <com.android.server.wm.RootWindowContainer: java.lang.String TAG_RELEASE> = "WindowManager";

        <com.android.server.wm.RootWindowContainer: java.lang.String TAG_RECENTS> = "WindowManager";

        <com.android.server.wm.RootWindowContainer: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.RootWindowContainer: int SET_USER_ACTIVITY_TIMEOUT> = 2;

        <com.android.server.wm.RootWindowContainer: int SET_SCREEN_BRIGHTNESS_OVERRIDE> = 1;

        <com.android.server.wm.RootWindowContainer: int MATCH_TASK_IN_STACKS_OR_RECENT_TASKS_AND_RESTORE> = 2;

        <com.android.server.wm.RootWindowContainer: int MATCH_TASK_IN_STACKS_OR_RECENT_TASKS> = 1;

        <com.android.server.wm.RootWindowContainer: int MATCH_TASK_IN_STACKS_ONLY> = 0;

        $r0 = <com.android.server.wm._$$Lambda$RootWindowContainer$Vvv8jzH2oSE9_eakZwTuKd5NpsU: com.android.server.wm.'-$$Lambda$RootWindowContainer$Vvv8jzH2oSE9-eakZwTuKd5NpsU' INSTANCE>;

        r1 = (java.util.function.Consumer) $r0;

        <com.android.server.wm.RootWindowContainer: java.util.function.Consumer sRemoveReplacedWindowsConsumer> = r1;

        return;
    }

    void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.util.HashMap $r1;
        android.util.SparseArray $r2;
        android.util.SparseIntArray $r3;
        java.util.ArrayList $r4;
        com.android.server.wm.RootWindowContainer$1 $r5;
        com.android.server.wm.RootWindowContainer$FindTaskResult $r6;
        com.android.server.wm._$$Lambda$RootWindowContainer$qT2ficAmvrvFcBdiJIGNKxJ8Z9Q $r7;
        com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper $r8;
        java.util.function.Supplier $r9;
        java.lang.Object $r10;
        android.view.SurfaceControl$Transaction $r11;
        com.android.server.wm.RootWindowContainer$MyHandler $r12;
        com.android.server.wm.WindowManagerService$H $r13;
        android.os.Looper $r14;
        com.android.server.wm.WindowManagerService r15;
        com.android.server.wm.ActivityTaskManagerService r16;
        com.android.server.wm.ActivityStackSupervisor r17;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r15 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void <init>(com.android.server.wm.WindowManagerService)>(r15);

        r0.<com.android.server.wm.RootWindowContainer: java.lang.Object mLastWindowFreezeSource> = null;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Session mHoldScreen> = null;

        r0.<com.android.server.wm.RootWindowContainer: float mScreenBrightnessOverride> = #NaNF;

        r0.<com.android.server.wm.RootWindowContainer: long mUserActivityTimeout> = -1L;

        r0.<com.android.server.wm.RootWindowContainer: boolean mUpdateRotation> = 0;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mHoldScreenWindow> = null;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mObscuringWindow> = null;

        r0.<com.android.server.wm.RootWindowContainer: boolean mObscureApplicationContentOnSecondaryDisplays> = 0;

        r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeEnabled> = 0;

        r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeCurrent> = 0;

        r0.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete> = 1;

        r0.<com.android.server.wm.RootWindowContainer: boolean mWallpaperActionPending> = 0;

        r0.<com.android.server.wm.RootWindowContainer: int mTopFocusedDisplayId> = -1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.RootWindowContainer: java.util.HashMap mTopFocusedAppByProcess> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.RootWindowContainer: android.util.SparseArray mDisplayAccessUIDs> = $r2;

        $r3 = new android.util.SparseIntArray;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>(int)>(2);

        r0.<com.android.server.wm.RootWindowContainer: android.util.SparseIntArray mUserStackInFront> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.RootWindowContainer: java.util.ArrayList mSleepTokens> = $r4;

        r0.<com.android.server.wm.RootWindowContainer: int mDefaultMinSizeOfResizeableTaskDp> = -1;

        r0.<com.android.server.wm.RootWindowContainer: boolean mTaskLayersChanged> = 1;

        $r5 = new com.android.server.wm.RootWindowContainer$1;

        specialinvoke $r5.<com.android.server.wm.RootWindowContainer$1: void <init>(com.android.server.wm.RootWindowContainer)>(r0);

        r0.<com.android.server.wm.RootWindowContainer: java.lang.Runnable mDestroyAllActivitiesRunnable> = $r5;

        $r6 = new com.android.server.wm.RootWindowContainer$FindTaskResult;

        specialinvoke $r6.<com.android.server.wm.RootWindowContainer$FindTaskResult: void <init>()>();

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult> = $r6;

        $r7 = new com.android.server.wm._$$Lambda$RootWindowContainer$qT2ficAmvrvFcBdiJIGNKxJ8Z9Q;

        specialinvoke $r7.<com.android.server.wm._$$Lambda$RootWindowContainer$qT2ficAmvrvFcBdiJIGNKxJ8Z9Q: void <init>(com.android.server.wm.RootWindowContainer)>(r0);

        r0.<com.android.server.wm.RootWindowContainer: java.util.function.Consumer mCloseSystemDialogsConsumer> = $r7;

        $r8 = new com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper;

        specialinvoke $r8.<com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper: void <init>(com.android.server.wm.RootWindowContainer)>(r0);

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper mFinishDisabledPackageActivitiesHelper> = $r8;

        $r9 = r15.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r10 = interfaceinvoke $r9.<java.util.function.Supplier: java.lang.Object get()>();

        $r11 = (android.view.SurfaceControl$Transaction) $r10;

        r0.<com.android.server.wm.RootWindowContainer: android.view.SurfaceControl$Transaction mDisplayTransaction> = $r11;

        $r12 = new com.android.server.wm.RootWindowContainer$MyHandler;

        $r13 = r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: android.os.Looper getLooper()>();

        specialinvoke $r12.<com.android.server.wm.RootWindowContainer$MyHandler: void <init>(com.android.server.wm.RootWindowContainer,android.os.Looper)>(r0, $r14);

        r0.<com.android.server.wm.RootWindowContainer: android.os.Handler mHandler> = $r12;

        r16 = r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService> = r16;

        r17 = r16.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor> = r17;

        r17.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RootWindowContainer mRootWindowContainer> = r0;

        return;
    }

    static void access$000(com.android.server.wm.RootWindowContainer, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @parameter0: com.android.server.wm.RootWindowContainer;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void destroyActivity(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    static void access$200(com.android.server.wm.RootWindowContainer, com.android.server.wm.RootWindowContainer$SleepTokenImpl)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.RootWindowContainer$SleepTokenImpl r1;

        r0 := @parameter0: com.android.server.wm.RootWindowContainer;

        r1 := @parameter1: com.android.server.wm.RootWindowContainer$SleepTokenImpl;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void removeSleepToken(com.android.server.wm.RootWindowContainer$SleepTokenImpl)>(r1);

        return;
    }

    private void applySurfaceChangesTransaction()
    {
        com.android.server.wm.RootWindowContainer r0;
        android.view.DisplayInfo r1;
        com.android.server.wm.WindowManagerService $r2, $r4, $r6, $r8, $r11, $r18, $r19, $r22, $r25;
        com.android.server.wm.DisplayContent $r3, $r17;
        com.android.server.wm.Watermark $r5, $r27;
        com.android.server.wm.StrictModeFlash $r7, $r24;
        com.android.server.wm.EmulatorDisplayOverlay $r9, $r20;
        com.android.server.wm.WindowList $r10, $r15;
        android.view.SurfaceControl$Transaction $r12, $r14, $r21, $r23, $r26;
        android.hardware.display.DisplayManagerInternal $r13;
        java.lang.Object $r16;
        int $i0, i1, i2, i3, i4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mHoldScreenWindow> = null;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mObscuringWindow> = null;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i1 = r1.<android.view.DisplayInfo: int logicalWidth>;

        i2 = r1.<android.view.DisplayInfo: int logicalHeight>;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        if $r5 == null goto label1;

        $r25 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r27 = $r25.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        $r26 = r0.<com.android.server.wm.RootWindowContainer: android.view.SurfaceControl$Transaction mDisplayTransaction>;

        virtualinvoke $r27.<com.android.server.wm.Watermark: void positionSurface(int,int,android.view.SurfaceControl$Transaction)>(i1, i2, $r26);

     label1:
        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        if $r7 == null goto label2;

        $r22 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r24 = $r22.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        $r23 = r0.<com.android.server.wm.RootWindowContainer: android.view.SurfaceControl$Transaction mDisplayTransaction>;

        virtualinvoke $r24.<com.android.server.wm.StrictModeFlash: void positionSurface(int,int,android.view.SurfaceControl$Transaction)>(i1, i2, $r23);

     label2:
        $r8 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        if $r9 == null goto label3;

        $r18 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r20 = $r18.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        $r19 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $i0 = virtualinvoke $r19.<com.android.server.wm.WindowManagerService: int getDefaultDisplayRotation()>();

        $r21 = r0.<com.android.server.wm.RootWindowContainer: android.view.SurfaceControl$Transaction mDisplayTransaction>;

        virtualinvoke $r20.<com.android.server.wm.EmulatorDisplayOverlay: void positionSurface(int,int,int,android.view.SurfaceControl$Transaction)>(i1, i2, $i0, $r21);

     label3:
        $r10 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i3 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

        i4 = 0;

     label4:
        if i4 >= i3 goto label5;

        $r15 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r16 = virtualinvoke $r15.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        $r17 = (com.android.server.wm.DisplayContent) $r16;

        virtualinvoke $r17.<com.android.server.wm.DisplayContent: void applySurfaceChangesTransaction()>();

        i4 = i4 + 1;

        goto label4;

     label5:
        $r11 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r13 = $r11.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r12 = r0.<com.android.server.wm.RootWindowContainer: android.view.SurfaceControl$Transaction mDisplayTransaction>;

        virtualinvoke $r13.<android.hardware.display.DisplayManagerInternal: void performTraversal(android.view.SurfaceControl$Transaction)>($r12);

        $r14 = r0.<com.android.server.wm.RootWindowContainer: android.view.SurfaceControl$Transaction mDisplayTransaction>;

        staticinvoke <android.view.SurfaceControl: void mergeToGlobalTransaction(android.view.SurfaceControl$Transaction)>($r14);

        return;
    }

    private void calculateDefaultMinimalSizeOfResizeableTasks()
    {
        com.android.server.wm.RootWindowContainer r0;
        android.content.res.Resources r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.content.Context $r3;
        float $f0, $f1, $f2;
        android.util.DisplayMetrics $r4;
        int $i0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke r1.<android.content.res.Resources: float getDimension(int)>(17105155);

        $r4 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r4.<android.util.DisplayMetrics: float density>;

        $f2 = $f0 / $f1;

        $i0 = (int) $f2;

        r0.<com.android.server.wm.RootWindowContainer: int mDefaultMinSizeOfResizeableTaskDp> = $i0;

        return;
    }

    private boolean canLaunchOnDisplay(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canBeLaunchedOnDisplay(int)>(i0);

        return $z0;
    }

    private void checkAppTransitionReady(com.android.server.wm.WindowSurfacePlacer)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.AppTransition $r4, $r5;
        boolean $z0, $z1, $z2;
        com.android.server.wm.AppTransitionController $r6;
        com.android.server.wm.WindowSurfacePlacer r7;
        com.android.server.wm.DisplayContent r8;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r7 := @parameter0: com.android.server.wm.WindowSurfacePlacer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r8 = (com.android.server.wm.DisplayContent) $r3;

        $r4 = r8.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z0 = virtualinvoke $r4.<com.android.server.wm.AppTransition: boolean isReady()>();

        if $z0 == 0 goto label2;

        $r6 = r8.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransitionController mAppTransitionController>;

        virtualinvoke $r6.<com.android.server.wm.AppTransitionController: void handleAppTransitionReady()>();

     label2:
        $r5 = r8.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.AppTransition: boolean isRunning()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean isAppTransitioning()>();

        if $z2 != 0 goto label3;

        virtualinvoke r8.<com.android.server.wm.DisplayContent: void handleAnimatingStoppedAndTransition()>();

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return;
    }

    private static void clearOtherAppTimeTrackers(com.android.server.wm.ActivityRecord, com.android.server.am.AppTimeTracker)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.am.AppTimeTracker r1, $r2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.am.AppTimeTracker;

        $r2 = r0.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker>;

        if $r2 == r1 goto label1;

        r0.<com.android.server.wm.ActivityRecord: com.android.server.am.AppTimeTracker appTimeTracker> = null;

     label1:
        return;
    }

    private void destroyActivity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isDestroyable()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = r0.<com.android.server.wm.RootWindowContainer: java.lang.String mDestroyAllActivitiesReason>;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean destroyImmediately(boolean,java.lang.String)>(1, $r2);

        return;

     label2:
        return;
    }

    private com.android.server.wm.ActivityStack getStack(int, int, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1, i2;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.ActivityStack $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i2);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getStack(int,int)>(i0, i1);

        return $r2;
    }

    private android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.graphics.Rect $r3;
        int $i0, $i1, i2, i3, i4;
        com.android.server.wm.WindowContainer$RemoteToken $r4;
        android.window.WindowContainerToken $r5;
        boolean $z0;
        android.content.res.Configuration $r6, $r7;
        int[] $r8, $r11, $r14;
        java.lang.String[] $r9;
        android.graphics.Rect[] $r10;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$JZALJLRYsvQWgNnzHdoTfj_f3QY' $r12;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r13;
        android.content.Intent $r15;
        com.android.server.wm.ActivityStack r16;
        com.android.server.wm.TaskDisplayArea r17;
        com.android.internal.util.function.pooled.PooledConsumer r18;
        com.android.server.wm.ActivityRecord r19;
        android.content.ComponentName r20;
        android.app.ActivityManager$StackInfo r21;
        com.android.internal.util.function.TriConsumer r22;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r16 := @parameter0: com.android.server.wm.ActivityStack;

        r17 = virtualinvoke r16.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r21 = new android.app.ActivityManager$StackInfo;

        specialinvoke r21.<android.app.ActivityManager$StackInfo: void <init>()>();

        $r3 = r21.<android.app.ActivityManager$StackInfo: android.graphics.Rect bounds>;

        virtualinvoke r16.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>($r3);

        if r17 == null goto label1;

        i2 = virtualinvoke r17.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        goto label2;

     label1:
        i2 = -1;

     label2:
        r21.<android.app.ActivityManager$StackInfo: int displayId> = i2;

        $i0 = r16.<com.android.server.wm.ActivityStack: int mTaskId>;

        r21.<android.app.ActivityManager$StackInfo: int stackId> = $i0;

        $r4 = r16.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        r21.<android.app.ActivityManager$StackInfo: android.window.WindowContainerToken stackToken> = $r5;

        $i1 = r16.<com.android.server.wm.ActivityStack: int mCurrentUser>;

        r21.<android.app.ActivityManager$StackInfo: int userId> = $i1;

        $z0 = virtualinvoke r16.<com.android.server.wm.ActivityStack: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(null);

        r21.<android.app.ActivityManager$StackInfo: boolean visible> = $z0;

        if r17 == null goto label3;

        i3 = virtualinvoke r17.<com.android.server.wm.TaskDisplayArea: int getIndexOf(com.android.server.wm.ActivityStack)>(r16);

        goto label4;

     label3:
        i3 = 0;

     label4:
        r21.<android.app.ActivityManager$StackInfo: int position> = i3;

        $r6 = r21.<android.app.ActivityManager$StackInfo: android.content.res.Configuration configuration>;

        $r7 = virtualinvoke r16.<com.android.server.wm.ActivityStack: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r6.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r7);

        i4 = virtualinvoke r16.<com.android.server.wm.ActivityStack: int getDescendantTaskCount()>();

        $r8 = newarray (int)[i4];

        r21.<android.app.ActivityManager$StackInfo: int[] taskIds> = $r8;

        $r9 = newarray (java.lang.String)[i4];

        r21.<android.app.ActivityManager$StackInfo: java.lang.String[] taskNames> = $r9;

        $r10 = newarray (android.graphics.Rect)[i4];

        r21.<android.app.ActivityManager$StackInfo: android.graphics.Rect[] taskBounds> = $r10;

        $r11 = newarray (int)[i4];

        r21.<android.app.ActivityManager$StackInfo: int[] taskUserIds> = $r11;

        $r12 = <com.android.server.wm._$$Lambda$RootWindowContainer$JZALJLRYsvQWgNnzHdoTfj_f3QY: com.android.server.wm.'-$$Lambda$RootWindowContainer$JZALJLRYsvQWgNnzHdoTfj_f3QY' INSTANCE>;

        $r13 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        $r14 = newarray (int)[1];

        $r14[0] = 0;

        r22 = (com.android.internal.util.function.TriConsumer) $r12;

        r18 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.TriConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r22, $r13, r21, $r14);

        virtualinvoke r16.<com.android.server.wm.ActivityStack: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r18, 0);

        interfaceinvoke r18.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        r19 = virtualinvoke r16.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        r20 = null;

        if r19 == null goto label5;

        $r15 = r19.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        r20 = virtualinvoke $r15.<android.content.Intent: android.content.ComponentName getComponent()>();

     label5:
        r21.<android.app.ActivityManager$StackInfo: android.content.ComponentName topActivity> = r20;

        return r21;
    }

    private void getWindowsByName(java.util.ArrayList, java.lang.String, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.util.ArrayList r1;
        java.lang.String r2;
        int i0;
        com.android.server.wm._$$Lambda$RootWindowContainer$O6gArs92KbWUhitra1og4WTg69c $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new com.android.server.wm._$$Lambda$RootWindowContainer$O6gArs92KbWUhitra1og4WTg69c;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$RootWindowContainer$O6gArs92KbWUhitra1og4WTg69c: void <init>(java.lang.String,java.util.ArrayList,int)>(r2, r1, i0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r3, 1);

        return;
    }

    private static void handleAppCrash(com.android.server.wm.ActivityRecord, com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController $r1, r11;
        java.lang.StringBuilder $r2;
        android.content.Intent $r4;
        android.content.ComponentName $r5;
        java.lang.String $r6, $r8;
        com.android.server.wm.DisplayContent $r9, $r10;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r11 := @parameter1: com.android.server.wm.WindowProcessController;

        $r1 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r1 == r11 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Force finishing activity ");

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r5 = virtualinvoke $r4.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r6 = virtualinvoke $r5.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r8);

        r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app> = null;

        $r9 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplay()>();

        $r10 = $r9.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r10.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(26, 0);

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean destroyIfPossible(java.lang.String)>("handleAppCrashed");

        return;
    }

    private void handleResizingWindows()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowManagerService $r2, $r4, $r8;
        java.util.ArrayList $r3, $r5, $r9;
        int $i0, i1;
        java.lang.Object $r6;
        boolean $z0, $z1;
        com.android.server.wm.DisplayContent $r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label4;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.WindowState) $r6;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z0 != 0 goto label3;

        $r7 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z1 = $r7.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r1.<com.android.server.wm.WindowState: void reportResized()>();

        $r8 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r9.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return;
    }

    private boolean isValidLaunchStack(com.android.server.wm.ActivityStack, com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.ActivityRecord r2;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        i0 := @parameter2: int;

        i1 = virtualinvoke r1.<com.android.server.wm.ActivityStack: int getActivityType()>();

        if i1 == 2 goto label7;

        if i1 == 3 goto label6;

        if i1 == 4 goto label5;

        if i1 == 5 goto label4;

        $z4 = r1.<com.android.server.wm.ActivityStack: boolean mCreatedByOrganizer>;

        if $z4 == 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        if $i2 != 3 goto label3;

        $z5 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean supportsSplitScreenWindowingMode()>();

        if $z5 == 0 goto label3;

        if i0 == 3 goto label2;

        if i0 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $z3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isActivityTypeDream()>();

        return $z3;

     label5:
        $z2 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isActivityTypeAssistant()>();

        return $z2;

     label6:
        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isActivityTypeRecents()>();

        return $z1;

     label7:
        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isActivityTypeHome()>();

        return $z0;
    }

    public static void lambda$0ZupnQyxl7yZKgMmf2zwvykG50s(com.android.server.wm.ActivityRecord, com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.wm.WindowProcessController r1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.WindowProcessController;

        staticinvoke <com.android.server.wm.RootWindowContainer: void handleAppCrash(com.android.server.wm.ActivityRecord,com.android.server.wm.WindowProcessController)>(r0, r1);

        return;
    }

    public static boolean lambda$5fbF65VSmaJkPHxEhceOGTat7JE(com.android.server.wm.RootWindowContainer, com.android.server.wm.ActivityRecord, com.android.server.wm.WindowProcessController, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1, r3;
        com.android.server.wm.WindowProcessController r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.RootWindowContainer;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: com.android.server.wm.WindowProcessController;

        r3 := @parameter3: com.android.server.wm.ActivityRecord;

        $z0 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startActivityForAttachedApplicationIfNeeded(com.android.server.wm.ActivityRecord,com.android.server.wm.WindowProcessController,com.android.server.wm.ActivityRecord)>(r1, r2, r3);

        return $z0;
    }

    public static void lambda$JVx5SVc0AsTnwnLxXYLgV6AKHPg(com.android.server.wm.RootWindowContainer, com.android.server.wm.Task, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.Task r1;
        int i0;

        r0 := @parameter0: com.android.server.wm.RootWindowContainer;

        r1 := @parameter1: com.android.server.wm.Task;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void taskTopActivityIsUser(com.android.server.wm.Task,int)>(r1, i0);

        return;
    }

    public static void lambda$JZALJLRYsvQWgNnzHdoTfj_f3QY(com.android.server.wm.Task, android.app.ActivityManager$StackInfo, int[])
    {
        com.android.server.wm.Task r0;
        android.app.ActivityManager$StackInfo r1;
        int[] r2;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.app.ActivityManager$StackInfo;

        r2 := @parameter2: int[];

        staticinvoke <com.android.server.wm.RootWindowContainer: void processTaskForStackInfo(com.android.server.wm.Task,android.app.ActivityManager$StackInfo,int[])>(r0, r1, r2);

        return;
    }

    public static void lambda$ONUnDkI6axONU1lRFnZMH5NkbZI(com.android.server.wm.ActivityRecord, com.android.server.am.AppTimeTracker)
    {
        com.android.server.wm.ActivityRecord r0;
        com.android.server.am.AppTimeTracker r1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.am.AppTimeTracker;

        staticinvoke <com.android.server.wm.RootWindowContainer: void clearOtherAppTimeTrackers(com.android.server.wm.ActivityRecord,com.android.server.am.AppTimeTracker)>(r0, r1);

        return;
    }

    public static void lambda$SVJucJygDtyF-4eKB9wPXWaNBDM(com.android.server.wm.RootWindowContainer, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @parameter0: com.android.server.wm.RootWindowContainer;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void rankTaskLayerForActivity(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    static void lambda$addStartingWindowsForVisibleActivities$10(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void showStartingWindow(com.android.server.wm.ActivityRecord,boolean,boolean)>(null, 0, 1);

     label1:
        return;
    }

    public static boolean lambda$bRRfWu3QSW54eS51jCvFD02TPt8(com.android.server.wm.ActivityRecord, int, boolean, android.content.Intent, android.content.ComponentName)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        boolean z0, $z1;
        android.content.Intent r1;
        android.content.ComponentName r2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: android.content.Intent;

        r2 := @parameter4: android.content.ComponentName;

        $z1 = staticinvoke <com.android.server.wm.RootWindowContainer: boolean matchesActivity(com.android.server.wm.ActivityRecord,int,boolean,android.content.Intent,android.content.ComponentName)>(r0, i0, z0, r1, r2);

        return $z1;
    }

    static boolean lambda$canShowStrictModeViolation$6(int, com.android.server.wm.WindowState)
    {
        int i0, $i1;
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Session $r1;
        boolean $z0, z1;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i1 = $r1.<com.android.server.wm.Session: int mPid>;

        if $i1 != i0 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static void lambda$dumpActivities$12(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  Resumed activities in task display areas (from top to bottom):");

        return;
    }

    static void lambda$dumpActivities$13(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  Activities waiting to finish:");

        return;
    }

    static void lambda$dumpActivities$14(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  Activities waiting to stop:");

        return;
    }

    static void lambda$dumpWindowsNoHeader$9(java.util.ArrayList, java.io.PrintWriter, int[], boolean, com.android.server.wm.WindowState)
    {
        java.util.ArrayList r0;
        java.io.PrintWriter r1;
        int[] r2;
        com.android.server.wm.WindowState r3;
        java.lang.StringBuilder $r5;
        int $i0, $i1, $i2;
        java.lang.String $r11;
        boolean $z0, z1, z2;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: int[];

        z1 := @parameter3: boolean;

        r3 := @parameter4: com.android.server.wm.WindowState;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label5;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Window #");

        $i0 = r2[0];

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        if z1 != 0 goto label3;

        if r0 == null goto label2;

        goto label3;

     label2:
        z2 = 0;

        goto label4;

     label3:
        z2 = 1;

     label4:
        virtualinvoke r3.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", z2);

        $i1 = r2[0];

        $i2 = $i1 + 1;

        r2[0] = $i2;

     label5:
        return;
    }

    public static void lambda$fL0RxmEBMlnXFmjHLkBJ9jk9drs(com.android.server.wm.ActivityRecord, android.content.pm.ApplicationInfo, int, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.pm.ApplicationInfo r1;
        int i0;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        staticinvoke <com.android.server.wm.RootWindowContainer: void updateActivityApplicationInfo(com.android.server.wm.ActivityRecord,android.content.pm.ApplicationInfo,int,java.lang.String)>(r0, r1, i0, r2);

        return;
    }

    static void lambda$getWindowsByName$2(java.lang.String, java.util.ArrayList, int, com.android.server.wm.WindowState)
    {
        java.lang.String r0, $r5;
        java.util.ArrayList r1;
        int i0, $i1;
        com.android.server.wm.WindowState r2;
        android.view.WindowManager$LayoutParams $r3;
        java.lang.CharSequence $r4;
        boolean $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.ArrayList;

        i0 := @parameter2: int;

        r2 := @parameter3: com.android.server.wm.WindowState;

        if r0 == null goto label1;

        $r3 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r4 = virtualinvoke $r3.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(r0);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        goto label2;

     label1:
        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        if $i1 != i0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label2:
        return;
    }

    static void lambda$performSurfacePlacementNoTrace$8(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.InputMonitor $r1;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r1.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.DisplayContent: boolean updateSystemGestureExclusion()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateTouchExcludeRegion()>();

        return;
    }

    static void lambda$setSecureSurfaceState$3(int, com.android.server.wm.WindowState)
    {
        int i0, $i1;
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowStateAnimator $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label1;

        $i1 = r0.<com.android.server.wm.WindowState: int mShowUserId>;

        if i0 != $i1 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isSecureLocked()>();

        virtualinvoke $r1.<com.android.server.wm.WindowStateAnimator: void setSecureLocked(boolean)>($z1);

     label1:
        return;
    }

    static void lambda$static$1(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void removeReplacedWindowIfNeeded(com.android.server.wm.WindowState)>(r0);

     label1:
        return;
    }

    static void lambda$updateAppOpsState$5(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WindowState: void updateAppOpsState()>();

        return;
    }

    static void lambda$updateHiddenWhileSuspendedState$4(android.util.ArraySet, boolean, com.android.server.wm.WindowState)
    {
        android.util.ArraySet r0;
        boolean z0, $z1;
        com.android.server.wm.WindowState r1;
        java.lang.String $r2;

        r0 := @parameter0: android.util.ArraySet;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.wm.WindowState;

        $r2 = virtualinvoke r1.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        $z1 = virtualinvoke r0.<android.util.ArraySet: boolean contains(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        virtualinvoke r1.<com.android.server.wm.WindowState: void setHiddenWhileSuspended(boolean)>(z0);

     label1:
        return;
    }

    private static boolean matchesActivity(com.android.server.wm.ActivityRecord, int, boolean, android.content.Intent, android.content.ComponentName)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3;
        android.content.Intent r1, $r4;
        android.content.ComponentName r2, $r3;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: android.content.Intent;

        r2 := @parameter4: android.content.ComponentName;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canBeTopRunning()>();

        if $z1 == 0 goto label4;

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        if $i1 == i0 goto label1;

        goto label4;

     label1:
        if z0 == 0 goto label2;

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $z3 = virtualinvoke $r4.<android.content.Intent: boolean filterEquals(android.content.Intent)>(r1);

        if $z3 == 0 goto label3;

        return 1;

     label2:
        $r3 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $z2 = virtualinvoke $r3.<android.content.ComponentName: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    private void prepareFreezingTaskBounds()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.DisplayContent $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.DisplayContent) $r3;

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void prepareFreezingTaskBounds()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    private static void processTaskForStackInfo(com.android.server.wm.Task, android.app.ActivityManager$StackInfo, int[])
    {
        com.android.server.wm.Task r0;
        android.app.ActivityManager$StackInfo r1;
        int[] r2, $r4, $r15;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String[] r3;
        android.content.ComponentName $r5, $r6, $r9, $r10;
        com.android.server.wm.ActivityRecord $r7, $r8;
        java.lang.String r11;
        android.graphics.Rect[] $r12;
        com.android.server.wm.ActivityTaskManagerService $r13;
        android.graphics.Rect $r14;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.app.ActivityManager$StackInfo;

        r2 := @parameter2: int[];

        i0 = r2[0];

        $r4 = r1.<android.app.ActivityManager$StackInfo: int[] taskIds>;

        $i1 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r4[i0] = $i1;

        r3 = r1.<android.app.ActivityManager$StackInfo: java.lang.String[] taskNames>;

        $r5 = r0.<com.android.server.wm.Task: android.content.ComponentName origActivity>;

        if $r5 == null goto label1;

        $r10 = r0.<com.android.server.wm.Task: android.content.ComponentName origActivity>;

        r11 = virtualinvoke $r10.<android.content.ComponentName: java.lang.String flattenToString()>();

        goto label4;

     label1:
        $r6 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        if $r6 == null goto label2;

        $r9 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        r11 = virtualinvoke $r9.<android.content.ComponentName: java.lang.String flattenToString()>();

        goto label4;

     label2:
        $r7 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if $r7 == null goto label3;

        $r8 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        r11 = $r8.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        goto label4;

     label3:
        r11 = "unknown";

     label4:
        r3[i0] = r11;

        $r12 = r1.<android.app.ActivityManager$StackInfo: android.graphics.Rect[] taskBounds>;

        $r13 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $i2 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService: android.graphics.Rect getTaskBounds(int)>($i2);

        $r12[i0] = $r14;

        $r15 = r1.<android.app.ActivityManager$StackInfo: int[] taskUserIds>;

        $i3 = r0.<com.android.server.wm.Task: int mUserId>;

        $r15[i0] = $i3;

        $i4 = i0 + 1;

        r2[0] = $i4;

        return;
    }

    private void rankTaskLayerForActivity(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1;
        boolean $z0, $z1;
        com.android.server.wm.Task $r1, r3;
        com.android.server.wm.ActivityRecord r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r2 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean canBeTopRunning()>();

        if $z0 == 0 goto label1;

        $z1 = r2.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z1 == 0 goto label1;

        r3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $i1 = r0.<com.android.server.wm.RootWindowContainer: int mTmpTaskLayerRank>;

        i0 = $i1 + 1;

        r0.<com.android.server.wm.RootWindowContainer: int mTmpTaskLayerRank> = i0;

        r3.<com.android.server.wm.Task: int mLayerRank> = i0;

        goto label2;

     label1:
        $r1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r1.<com.android.server.wm.Task: int mLayerRank> = -1;

     label2:
        return;
    }

    private void removeSleepToken(com.android.server.wm.RootWindowContainer$SleepTokenImpl)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.RootWindowContainer$SleepTokenImpl r1;
        com.android.server.wm.DisplayContent r2;
        java.util.ArrayList $r3, $r4, $r5;
        int $i0;
        boolean $z2;
        com.android.server.wm.ActivityTaskManagerService $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.RootWindowContainer$SleepTokenImpl;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: java.util.ArrayList mSleepTokens>;

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $i0 = staticinvoke <com.android.server.wm.RootWindowContainer$SleepTokenImpl: int access$100(com.android.server.wm.RootWindowContainer$SleepTokenImpl)>(r1);

        r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i0);

        if r2 == null goto label1;

        $r4 = r2.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r5 = r2.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        $z2 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: void updateSleepIfNeededLocked()>();

     label1:
        return;
    }

    private void setGlobalConfigurationIfNeeded(android.content.res.Configuration)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.content.res.Configuration r1, $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: android.content.res.Configuration getConfiguration()>();

        $i0 = virtualinvoke $r2.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r1);

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 != 0 goto label3;

        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    private boolean shouldCloseAssistant(com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        java.lang.String r2;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isActivityTypeAssistant()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r2 != "assist" goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z1 = $r3.<com.android.server.wm.WindowManagerService: boolean mAssistantOnTopOfDream>;

        return $z1;
    }

    private boolean startActivityForAttachedApplicationIfNeeded(com.android.server.wm.ActivityRecord, com.android.server.wm.WindowProcessController, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1, r16;
        com.android.server.wm.ActivityStackSupervisor r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        com.android.server.wm.WindowProcessController $r3, r17;
        android.content.pm.ActivityInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0, $i1;
        java.lang.String $r6, $r7, $r13, $r15;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        android.content.Intent $r11;
        android.content.ComponentName $r12;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r16 := @parameter0: com.android.server.wm.ActivityRecord;

        r17 := @parameter1: com.android.server.wm.WindowProcessController;

        r1 := @parameter2: com.android.server.wm.ActivityRecord;

        $z0 = r16.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 != 0 goto label7;

        $z1 = virtualinvoke r16.<com.android.server.wm.ActivityRecord: boolean okToShowLocked()>();

        if $z1 == 0 goto label7;

        $z2 = r16.<com.android.server.wm.ActivityRecord: boolean visibleIgnoringKeyguard>;

        if $z2 == 0 goto label7;

        $r3 = r16.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r3 != null goto label7;

        $i1 = r17.<com.android.server.wm.WindowProcessController: int mUid>;

        $r4 = r16.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r5 = $r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        if $i1 != $i0 goto label7;

        $r7 = r17.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        $r6 = r16.<com.android.server.wm.ActivityRecord: java.lang.String processName>;

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 != 0 goto label1;

        goto label7;

     label1:
        r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

     label2:
        if r1 != r16 goto label3;

        z5 = 1;

        goto label4;

     label3:
        z5 = 0;

     label4:
        $z4 = virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor: boolean realStartActivityLocked(com.android.server.wm.ActivityRecord,com.android.server.wm.WindowProcessController,boolean,boolean)>(r16, r17, z5, 1);

        if $z4 == 0 goto label5;

        r0.<com.android.server.wm.RootWindowContainer: boolean mTmpBoolean> = 1;

     label5:
        return 0;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in new application when starting activity ");

        $r11 = r1.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $r12 = virtualinvoke $r11.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r13 = virtualinvoke $r12.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r15, $r8);

        r0.<com.android.server.wm.RootWindowContainer: android.os.RemoteException mTmpRemoteException> = $r8;

        return 1;

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void startSystemDecorations(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        int $i0, $i1;
        com.android.server.wm.DisplayPolicy $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startHomeOnDisplay(int,java.lang.String,int)>($i0, "displayAdded", $i1);

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: void notifyDisplayReady()>();

        return;
    }

    private void taskTopActivityIsUser(com.android.server.wm.Task, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.Task r1;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.ActivityRecord r2, r5;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.TaskChangeNotificationController $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r2 == null goto label1;

        r5 = r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord resultTo>;

        goto label2;

     label1:
        r5 = null;

     label2:
        if r2 == null goto label3;

        $i3 = r2.<com.android.server.wm.ActivityRecord: int mUserId>;

        if $i3 == i0 goto label4;

     label3:
        if r5 == null goto label5;

        $i1 = r5.<com.android.server.wm.ActivityRecord: int mUserId>;

        if $i1 != i0 goto label5;

     label4:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i2 = r1.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r4.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskProfileLocked(int,int)>($i2, i0);

     label5:
        return;
    }

    private static void updateActivityApplicationInfo(com.android.server.wm.ActivityRecord, android.content.pm.ApplicationInfo, int, java.lang.String)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.pm.ApplicationInfo r1;
        int i0, $i1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i1 = r0.<com.android.server.wm.ActivityRecord: int mUserId>;

        if $i1 != i0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: java.lang.String packageName>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.ActivityRecord: void updateApplicationInfo(android.content.pm.ApplicationInfo)>(r1);

     label1:
        return;
    }

    void addStartingWindowsForVisibleActivities()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$07q9Iva7qby1Cfkq4KztBB6CisE' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = <com.android.server.wm._$$Lambda$RootWindowContainer$07q9Iva7qby1Cfkq4KztBB6CisE: com.android.server.wm.'-$$Lambda$RootWindowContainer$07q9Iva7qby1Cfkq4KztBB6CisE' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllActivities(java.util.function.Consumer)>(r2);

        return;
    }

    boolean allPausedActivitiesComplete()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.TaskDisplayArea r2;
        com.android.server.wm.ActivityRecord r3;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.ActivityStack $r5;
        com.android.server.wm.ActivityStack$ActivityState $r6, $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label7;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label6;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i2 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i2 - 1;

     label3:
        if i5 < 0 goto label5;

        $r5 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        r3 = $r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if r3 == null goto label4;

        $r9 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState PAUSED>;

        $r8 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPED>;

        $r7 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState STOPPING>;

        $r6 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState FINISHING>;

        $z0 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState,com.android.server.wm.ActivityStack$ActivityState)>($r9, $r8, $r7, $r6);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i5 = i5 + -1;

        goto label3;

     label5:
        i4 = i4 + -1;

        goto label2;

     label6:
        i3 = i3 + -1;

        goto label1;

     label7:
        return 1;
    }

    boolean allResumedActivitiesIdle()
    {
        com.android.server.wm.RootWindowContainer r0;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.ActivityStack r3;
        com.android.server.wm.ActivityRecord r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label6;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        r2 = (com.android.server.wm.DisplayContent) $r1;

        $z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isSleeping()>();

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r3 == null goto label5;

        $z1 = virtualinvoke r3.<com.android.server.wm.ActivityStack: boolean hasActivity()>();

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        r4 = virtualinvoke r3.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        if r4 == null goto label4;

        $z2 = r4.<com.android.server.wm.ActivityRecord: boolean idle>;

        if $z2 != 0 goto label5;

     label4:
        return 0;

     label5:
        i1 = i1 + -1;

        goto label1;

     label6:
        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void sendPowerHintForLaunchEndIfNeeded()>();

        return 1;
    }

    boolean allResumedActivitiesVisible()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.TaskDisplayArea r2;
        com.android.server.wm.ActivityRecord r3;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.ActivityStack $r5;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        z1 = 0;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label8;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label7;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i2 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i2 - 1;

     label3:
        if i5 < 0 goto label6;

        $r5 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        r3 = virtualinvoke $r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        if r3 == null goto label5;

        $z0 = r3.<com.android.server.wm.ActivityRecord: boolean nowVisible>;

        if $z0 != 0 goto label4;

        return 0;

     label4:
        z1 = 1;

     label5:
        i5 = i5 + -1;

        goto label3;

     label6:
        i4 = i4 + -1;

        goto label2;

     label7:
        i3 = i3 + -1;

        goto label1;

     label8:
        return z1;
    }

    com.android.server.wm.Task anyTaskForId(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.Task $r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int)>(i0, 2);

        return $r1;
    }

    com.android.server.wm.Task anyTaskForId(int, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1;
        com.android.server.wm.Task $r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int,android.app.ActivityOptions,boolean)>(i0, i1, null, 0);

        return $r1;
    }

    com.android.server.wm.Task anyTaskForId(int, int, android.app.ActivityOptions, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i2;
        boolean z0, $z1;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.'-$$Lambda$5zunxFfSXQYpejvFiP3lO5a4GDY' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        com.android.server.wm.ActivityStackSupervisor $r5, $r7;
        com.android.server.wm.RecentTasks $r6;
        com.android.server.wm.ActivityStack $r8, r12;
        android.app.ActivityOptions r10;
        com.android.server.wm.Task r11, r13;
        byte b3;
        java.lang.IllegalArgumentException r14;
        java.util.function.BiPredicate r15;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        r10 := @parameter2: android.app.ActivityOptions;

        z0 := @parameter3: boolean;

        if i0 == 2 goto label02;

        if r10 != null goto label01;

        goto label02;

     label01:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Should not specify activity options for non-restore lookup");

        throw r14;

     label02:
        $r2 = <com.android.server.wm._$$Lambda$5zunxFfSXQYpejvFiP3lO5a4GDY: com.android.server.wm.'-$$Lambda$5zunxFfSXQYpejvFiP3lO5a4GDY' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        r15 = (java.util.function.BiPredicate) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r15, $r3, $r4);

        r11 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task getTask(java.util.function.Predicate)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        if r11 == null goto label06;

        if r10 == null goto label05;

        r12 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getLaunchStack(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,boolean)>(null, r10, r11, z0);

        if r12 == null goto label05;

        $r8 = virtualinvoke r11.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r8 == r12 goto label05;

        if z0 == 0 goto label03;

        b3 = 0;

        goto label04;

     label03:
        b3 = 2;

     label04:
        virtualinvoke r11.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,boolean,int,boolean,boolean,java.lang.String)>(r12, z0, b3, 1, 1, "anyTaskForId");

     label05:
        return r11;

     label06:
        if i0 != 0 goto label07;

        return null;

     label07:
        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6 = $r5.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        r13 = virtualinvoke $r6.<com.android.server.wm.RecentTasks: com.android.server.wm.Task getTask(int)>(i2);

        if r13 != null goto label08;

        return null;

     label08:
        if i0 != 1 goto label09;

        return r13;

     label09:
        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z1 = virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: boolean restoreRecentTaskLocked(com.android.server.wm.Task,android.app.ActivityOptions,boolean)>(r13, r10, z0);

        if $z1 != 0 goto label10;

        return null;

     label10:
        return r13;
    }

    void applySleepTokens(boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.wm.DisplayContent r1, $r7;
        com.android.server.wm.TaskDisplayArea r2;
        com.android.server.wm.ActivityStack r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.ActivityStackSupervisor $r5;
        com.android.server.wm.KeyguardController $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i4 = $i0 - 1;

     label01:
        if i4 < 0 goto label13;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i4);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        z1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean shouldSleep()>();

        $z2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isSleeping()>();

        if z1 != $z2 goto label02;

        goto label12;

     label02:
        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setIsSleeping(boolean)>(z1);

        if z0 != 0 goto label03;

        goto label12;

     label03:
        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i5 = $i1 - 1;

     label04:
        if i5 < 0 goto label12;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i5);

        $i2 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i6 = $i2 - 1;

     label05:
        if i6 < 0 goto label11;

        r3 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i6);

        if z1 == 0 goto label06;

        virtualinvoke r3.<com.android.server.wm.ActivityStack: boolean goToSleepIfPossible(boolean)>(0);

        goto label10;

     label06:
        $z3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z3 == 0 goto label07;

        $r7 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r7.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(28, 0, 0, 1);

     label07:
        virtualinvoke r3.<com.android.server.wm.ActivityStack: void awakeFromSleepingLocked()>();

        $z4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z4 == 0 goto label08;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

     label08:
        $z5 = virtualinvoke r3.<com.android.server.wm.ActivityStack: boolean isFocusedStackOnDisplay()>();

        if $z5 == 0 goto label09;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        $i3 = r1.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $z6 = virtualinvoke $r6.<com.android.server.wm.KeyguardController: boolean isKeyguardOrAodShowing(int)>($i3);

        if $z6 != 0 goto label09;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label09:
        virtualinvoke r3.<com.android.server.wm.ActivityStack: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

     label10:
        i6 = i6 + -1;

        goto label05;

     label11:
        i5 = i5 + -1;

        goto label04;

     label12:
        i4 = i4 + -1;

        goto label01;

     label13:
        return;
    }

    boolean attachApplication(com.android.server.wm.WindowProcessController) throws android.os.RemoteException
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowProcessController r1;
        com.android.server.wm.ActivityStack r2;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r3;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$5fbF65VSmaJkPHxEhceOGTat7JE' $r5;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r6;
        com.android.server.wm.ActivityRecord $r7;
        boolean $z1, z2;
        java.lang.String r8;
        com.android.internal.util.function.pooled.PooledFunction r9;
        android.os.RemoteException r10;
        com.android.internal.util.function.QuadFunction r11;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        r8 = r1.<com.android.server.wm.WindowProcessController: java.lang.String mName>;

        z2 = 0;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label5;

        $r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r4 = (com.android.server.wm.DisplayContent) $r3;

        r2 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r2 != null goto label2;

        goto label3;

     label2:
        r0.<com.android.server.wm.RootWindowContainer: android.os.RemoteException mTmpRemoteException> = null;

        r0.<com.android.server.wm.RootWindowContainer: boolean mTmpBoolean> = 0;

        $r5 = <com.android.server.wm._$$Lambda$RootWindowContainer$5fbF65VSmaJkPHxEhceOGTat7JE: com.android.server.wm.'-$$Lambda$RootWindowContainer$5fbF65VSmaJkPHxEhceOGTat7JE' INSTANCE>;

        $r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r7 = virtualinvoke r2.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        r11 = (com.android.internal.util.function.QuadFunction) $r5;

        r9 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(com.android.internal.util.function.QuadFunction,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r11, r0, $r6, r1, $r7);

        virtualinvoke r2.<com.android.server.wm.ActivityStack: boolean forAllActivities(java.util.function.Function)>(r9);

        interfaceinvoke r9.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

        r10 = r0.<com.android.server.wm.RootWindowContainer: android.os.RemoteException mTmpRemoteException>;

        if r10 != null goto label4;

        $z1 = r0.<com.android.server.wm.RootWindowContainer: boolean mTmpBoolean>;

        z2 = z2 | $z1;

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        throw r10;

     label5:
        if z2 != 0 goto label6;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

     label6:
        return z2;
    }

    boolean canShowStrictModeViolation(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm._$$Lambda$RootWindowContainer$ZTXupc1zKRWZgWpo_r3so3blHoI $r1;
        com.android.server.wm.WindowState $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = new com.android.server.wm._$$Lambda$RootWindowContainer$ZTXupc1zKRWZgWpo_r3so3blHoI;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$RootWindowContainer$ZTXupc1zKRWZgWpo_r3so3blHoI: void <init>(int)>(i0);

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r1);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean canStartHomeOnDisplayArea(android.content.pm.ActivityInfo, com.android.server.wm.TaskDisplayArea, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.content.pm.ActivityInfo r1;
        com.android.server.wm.TaskDisplayArea r2;
        boolean z0, $z1, $z2, z3;
        com.android.server.wm.WindowProcessController r3;
        com.android.server.wm.ActivityTaskManagerService $r4, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, i5;
        android.content.pm.ApplicationInfo $r5;
        java.lang.String $r6, $r10;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.content.pm.ActivityInfo;

        r2 := @parameter1: com.android.server.wm.TaskDisplayArea;

        z0 := @parameter2: boolean;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $i0 = $r4.<com.android.server.wm.ActivityTaskManagerService: int mFactoryTest>;

        if $i0 != 1 goto label01;

        $r9 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r10 = $r9.<com.android.server.wm.ActivityTaskManagerService: java.lang.String mTopAction>;

        if $r10 != null goto label01;

        return 0;

     label01:
        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = r1.<android.content.pm.ActivityInfo: java.lang.String processName>;

        $r5 = r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        r3 = virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(java.lang.String,int)>($r6, $i1);

        if z0 != 0 goto label02;

        if r3 == null goto label02;

        $z2 = virtualinvoke r3.<com.android.server.wm.WindowProcessController: boolean isInstrumenting()>();

        if $z2 == 0 goto label02;

        return 0;

     label02:
        if r2 == null goto label03;

        i5 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        goto label04;

     label03:
        i5 = -1;

     label04:
        if i5 == 0 goto label10;

        if i5 == -1 goto label05;

        $r8 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $i4 = $r8.<com.android.server.wm.ActivityTaskManagerService: int mVr2dDisplayId>;

        if i5 != $i4 goto label05;

        goto label10;

     label05:
        $z1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean shouldPlaceSecondaryHomeOnDisplayArea(com.android.server.wm.TaskDisplayArea)>(r2);

        if $z1 != 0 goto label06;

        return 0;

     label06:
        $i2 = r1.<android.content.pm.ActivityInfo: int launchMode>;

        if $i2 == 2 goto label07;

        $i3 = r1.<android.content.pm.ActivityInfo: int launchMode>;

        if $i3 == 3 goto label07;

        z3 = 1;

        goto label08;

     label07:
        z3 = 0;

     label08:
        if z3 != 0 goto label09;

        return 0;

     label09:
        return 1;

     label10:
        return 1;
    }

    void cancelInitializingActivities()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.TaskDisplayArea r2;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.WindowContainer $r3;
        com.android.server.wm.ActivityStack $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label6;

        $r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r1 = (com.android.server.wm.DisplayContent) $r3;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label5;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i2 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i2 - 1;

     label3:
        if i5 < 0 goto label4;

        $r4 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        virtualinvoke $r4.<com.android.server.wm.ActivityStack: void cancelInitializingActivities()>();

        i5 = i5 + -1;

        goto label3;

     label4:
        i4 = i4 + -1;

        goto label2;

     label5:
        i3 = i3 + -1;

        goto label1;

     label6:
        return;
    }

    void clearOtherAppTimeTrackers(com.android.server.am.AppTimeTracker)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$ONUnDkI6axONU1lRFnZMH5NkbZI' $r1;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r2;
        com.android.server.am.AppTimeTracker r3;
        com.android.internal.util.function.pooled.PooledConsumer r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r3 := @parameter0: com.android.server.am.AppTimeTracker;

        $r1 = <com.android.server.wm._$$Lambda$RootWindowContainer$ONUnDkI6axONU1lRFnZMH5NkbZI: com.android.server.wm.'-$$Lambda$RootWindowContainer$ONUnDkI6axONU1lRFnZMH5NkbZI' INSTANCE>;

        $r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r5 = (java.util.function.BiConsumer) $r1;

        r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r5, $r2, r3);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllActivities(java.util.function.Consumer)>(r4);

        interfaceinvoke r4.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    void closeSystemDialogActivities(java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        com.android.server.wm._$$Lambda$RootWindowContainer$KzturB6hvWk0wP4LPBBNdJGd_iw $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.android.server.wm._$$Lambda$RootWindowContainer$KzturB6hvWk0wP4LPBBNdJGd_iw;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$RootWindowContainer$KzturB6hvWk0wP4LPBBNdJGd_iw: void <init>(com.android.server.wm.RootWindowContainer,java.lang.String)>(r0, r1);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllActivities(java.util.function.Consumer)>($r2);

        return;
    }

    void closeSystemDialogs(java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        java.util.function.Consumer $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.server.wm.RootWindowContainer: java.lang.String mCloseSystemDialogsReason> = r1;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: java.util.function.Consumer mCloseSystemDialogsConsumer>;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r2, 0);

        return;
    }

    boolean copyAnimToLayoutParams()
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.wm.WindowManagerService $r1, $r3, $r6;
        com.android.server.wm.WindowAnimator $r2, $r4;
        java.lang.Object $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        z0 = 0;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        i0 = $r2.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r0.<com.android.server.wm.RootWindowContainer: boolean mUpdateRotation> = 1;

        z0 = 1;

     label1:
        $i2 = i0 & 4;

        if $i2 != 0 goto label2;

        r0.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete> = 0;

        goto label3;

     label2:
        r0.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete> = 1;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r5 = $r4.<com.android.server.wm.WindowAnimator: java.lang.Object mLastWindowFreezeSource>;

        r0.<com.android.server.wm.RootWindowContainer: java.lang.Object mLastWindowFreezeSource> = $r5;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $i3 = $r6.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        if $i3 == 0 goto label3;

        z0 = 1;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        r0.<com.android.server.wm.RootWindowContainer: boolean mWallpaperActionPending> = 1;

     label4:
        return z0;
    }

    com.android.server.wm.ActivityTaskManagerInternal$SleepToken createSleepToken(java.lang.String, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, r10;
        com.android.server.wm.RootWindowContainer$SleepTokenImpl $r7;
        java.util.ArrayList $r8, $r9;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        if r1 == null goto label1;

        $r7 = new com.android.server.wm.RootWindowContainer$SleepTokenImpl;

        specialinvoke $r7.<com.android.server.wm.RootWindowContainer$SleepTokenImpl: void <init>(com.android.server.wm.RootWindowContainer,java.lang.String,int)>(r0, r10, i0);

        $r8 = r0.<com.android.server.wm.RootWindowContainer: java.util.ArrayList mSleepTokens>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r9 = r1.<com.android.server.wm.DisplayContent: java.util.ArrayList mAllSleepTokens>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid display: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        boolean z0;
        java.lang.StringBuilder $r4;
        com.android.server.wm.ActivityStack $r6;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r9;
        com.android.server.wm.DisplayContent $r10;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("topDisplayFocusedStack=");

        $r6 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r9 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r10 = (com.android.server.wm.DisplayContent) $r9;

        virtualinvoke $r10.<com.android.server.wm.DisplayContent: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        i1 = i1 + -1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    boolean dumpActivities(java.io.FileDescriptor, java.io.PrintWriter, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, z10;
        java.lang.String r3;
        com.android.server.wm.DisplayContent r4;
        com.android.server.wm.TaskDisplayArea r5, $r14;
        com.android.server.wm.ActivityStack r6;
        com.android.server.wm.ActivityStackSupervisor $r7, $r10;
        com.android.server.wm._$$Lambda$RootWindowContainer$4_P7sOzhQfja_16d53dY683U8rc $r8;
        java.util.ArrayList $r9, $r12;
        com.android.server.wm._$$Lambda$RootWindowContainer$wmhKg8x6RdcBlSmvGqN5AdCspCE $r11;
        com.android.server.wm.WindowContainer $r13;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;
        com.android.server.wm.ActivityRecord $r15;
        com.android.server.wm._$$Lambda$RootWindowContainer$D5wXhix5kSu0ovRlUusQHDpJjyo $r16;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        z7 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        i4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        z8 = 0;

        z9 = 0;

        i5 = i4 + -1;

     label01:
        if i5 < 0 goto label10;

        $r13 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i5);

        r4 = (com.android.server.wm.DisplayContent) $r13;

        if z8 == 0 goto label02;

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Display #");

        $i0 = r4.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(" (activities from top to bottom):");

        $i1 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i6 = $i1 - 1;

     label03:
        if i6 < 0 goto label07;

        r5 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i6);

        $i3 = virtualinvoke r5.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i7 = $i3 - 1;

     label04:
        if i7 < 0 goto label06;

        r6 = virtualinvoke r5.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i7);

        if z9 == 0 goto label05;

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label05:
        z9 = virtualinvoke r6.<com.android.server.wm.ActivityStack: boolean dump(java.io.FileDescriptor,java.io.PrintWriter,boolean,boolean,java.lang.String,boolean)>(r1, r2, z0, z7, r3, 0);

        z8 = z8 | z9;

        i7 = i7 + -1;

        goto label04;

     label06:
        i6 = i6 + -1;

        goto label03;

     label07:
        $i2 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i8 = $i2 - 1;

     label08:
        if i8 < 0 goto label09;

        $r14 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i8);

        $r15 = virtualinvoke $r14.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getFocusedActivity()>();

        $r16 = new com.android.server.wm._$$Lambda$RootWindowContainer$D5wXhix5kSu0ovRlUusQHDpJjyo;

        specialinvoke $r16.<com.android.server.wm._$$Lambda$RootWindowContainer$D5wXhix5kSu0ovRlUusQHDpJjyo: void <init>(java.io.PrintWriter)>(r2);

        $z6 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean printThisActivity(java.io.PrintWriter,com.android.server.wm.ActivityRecord,java.lang.String,boolean,java.lang.String,java.lang.Runnable)>(r2, $r15, r3, z9, "    Resumed: ", $r16);

        z8 = z8 | $z6;

        i8 = i8 + -1;

        goto label08;

     label09:
        i5 = i5 + -1;

        goto label01;

     label10:
        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r9 = $r7.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mFinishingActivities>;

        $z1 = z0 ^ 1;

        $r8 = new com.android.server.wm._$$Lambda$RootWindowContainer$4_P7sOzhQfja_16d53dY683U8rc;

        specialinvoke $r8.<com.android.server.wm._$$Lambda$RootWindowContainer$4_P7sOzhQfja_16d53dY683U8rc: void <init>(java.io.PrintWriter)>(r2);

        z10 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean dumpHistoryList(java.io.FileDescriptor,java.io.PrintWriter,java.util.List,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String,boolean,java.lang.Runnable,com.android.server.wm.Task)>(r1, r2, $r9, "  ", "Fin", 0, $z1, 0, r3, 1, $r8, null);

        $r10 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r12 = $r10.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStoppingActivities>;

        $z2 = z0 ^ 1;

        $r11 = new com.android.server.wm._$$Lambda$RootWindowContainer$wmhKg8x6RdcBlSmvGqN5AdCspCE;

        specialinvoke $r11.<com.android.server.wm._$$Lambda$RootWindowContainer$wmhKg8x6RdcBlSmvGqN5AdCspCE: void <init>(java.io.PrintWriter)>(r2);

        $z3 = staticinvoke <com.android.server.wm.ActivityStackSupervisor: boolean dumpHistoryList(java.io.FileDescriptor,java.io.PrintWriter,java.util.List,java.lang.String,java.lang.String,boolean,boolean,boolean,java.lang.String,boolean,java.lang.Runnable,com.android.server.wm.Task)>(r1, r2, $r12, "  ", "Stop", 0, $z2, 0, r3, 1, $r11, null);

        $z4 = z8 | z10;

        $z5 = $z3 | $z4;

        return $z5;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, $i1;
        com.android.server.wm.ActivityStackSupervisor $r2, $r4;
        com.android.server.wm.KeyguardController $r3;
        com.android.server.wm.RecentTasks $r5;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r6;
        com.android.server.wm.ActivityStartController $r7;
        long l2, l3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        if i0 != 2 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean isVisible()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        l3 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l2);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268033L, i0);

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.KeyguardController getKeyguardController()>();

        virtualinvoke $r3.<com.android.server.wm.KeyguardController: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268037L);

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r5 = $r4.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        $i1 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        $z0 = virtualinvoke $r5.<com.android.server.wm.RecentTasks: boolean isRecentsComponentHomeActivity(int)>($i1);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z0);

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        virtualinvoke $r7.<com.android.server.wm.ActivityStartController: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 2246267895815L);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l3);

        return;
    }

    void dumpDisplayConfigs(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        int i0, $i1, i2;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.WindowContainer $r4;
        android.content.res.Configuration $r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display override configurations:");

        i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r3 = (com.android.server.wm.DisplayContent) $r4;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $i1 = r3.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $r5 = virtualinvoke r3.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void dumpDisplayContents(java.io.PrintWriter)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        int i0, i1;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0;
        com.android.server.wm.WindowList $r3, $r4;
        java.lang.Object $r5;
        com.android.server.wm.DisplayContent $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)");

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = $r2.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.DisplayContent) $r5;

        virtualinvoke $r6.<com.android.server.wm.DisplayContent: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "  ", 1);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  NO DISPLAY");

     label4:
        return;
    }

    void dumpLayoutNeededDisplayIds(java.io.PrintWriter)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        int i0, $i1, i2;
        com.android.server.wm.DisplayContent r2;
        boolean $z0, $z1;
        com.android.server.wm.WindowList $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        $z0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean isLayoutNeeded()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLayoutNeeded on displays=");

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.DisplayContent) $r5;

        $z1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isLayoutNeeded()>();

        if $z1 == 0 goto label3;

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i1);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    void dumpTokens(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        boolean z0;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.DisplayContent $r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  All tokens:");

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.DisplayContent) $r4;

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void dumpTokens(java.io.PrintWriter,boolean)>(r1, z0);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void dumpTopFocusedDisplayId(java.io.PrintWriter)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        int $i0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mTopFocusedDisplayId=");

        $i0 = r0.<com.android.server.wm.RootWindowContainer: int mTopFocusedDisplayId>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i0);

        return;
    }

    void dumpWindowsNoHeader(java.io.PrintWriter, boolean, java.util.ArrayList)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.io.PrintWriter r1;
        boolean z0;
        java.util.ArrayList r2;
        com.android.server.wm._$$Lambda$RootWindowContainer$y9wG_endhUBCwGznyjN4RSIYTyg $r3;
        int[] $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.ArrayList;

        $r3 = new com.android.server.wm._$$Lambda$RootWindowContainer$y9wG_endhUBCwGznyjN4RSIYTyg;

        $r4 = newarray (int)[1];

        specialinvoke $r3.<com.android.server.wm._$$Lambda$RootWindowContainer$y9wG_endhUBCwGznyjN4RSIYTyg: void <init>(java.util.ArrayList,java.io.PrintWriter,int[],boolean)>(r2, r1, $r4, z0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r3, 1);

        return;
    }

    void ensureActivitiesVisible(com.android.server.wm.ActivityRecord, int, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r1, i0, z0, 1);

        return;
    }

    void ensureActivitiesVisible(com.android.server.wm.ActivityRecord, int, boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, i2;
        boolean z0, z1, $z2;
        com.android.server.wm.ActivityStackSupervisor $r1, $r2, $r3, $r7;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.DisplayContent $r5;
        java.lang.Throwable $r6;
        com.android.server.wm.ActivityRecord r8;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r8 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z2 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: boolean inActivityVisibilityUpdate()>();

        if $z2 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void beginActivityVisibilityUpdate()>();

        $i1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label5;

     label3:
        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        $r5 = (com.android.server.wm.DisplayContent) $r4;

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(r8, i0, z0, z1);

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: void endActivityVisibilityUpdate()>();

        return;

     label6:
        $r6 := @caughtexception;

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: void endActivityVisibilityUpdate()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    boolean ensureVisibilityAndConfig(com.android.server.wm.ActivityRecord, int, boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        int i0;
        boolean z0, z1, $z2, $z3;
        com.android.server.wm.DisplayContent r2;
        android.content.res.Configuration r3, r4;
        com.android.server.wm.ActivityRecord$Token r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean,boolean)>(null, 0, 0, 0);

        if i0 != -1 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        r4 = null;

        if r2 == null goto label4;

        r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: android.content.res.Configuration getDisplayOverrideConfiguration(int)>(i0);

        if r1 == null goto label2;

        $z3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean mayFreezeScreenLocked()>();

        if $z3 == 0 goto label2;

        r5 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        goto label3;

     label2:
        r5 = null;

     label3:
        r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.content.res.Configuration updateOrientation(android.content.res.Configuration,android.os.IBinder,boolean)>(r3, r5, 1);

     label4:
        if r1 == null goto label5;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void reportDescendantOrientationChangeIfNeeded()>();

     label5:
        if r1 == null goto label6;

        if z0 == 0 goto label6;

        if r4 == null goto label6;

        r1.<com.android.server.wm.ActivityRecord: boolean frozenBeforeDestroy> = 1;

     label6:
        if r2 == null goto label7;

        $z2 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean updateDisplayOverrideConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.ActivityTaskManagerService$UpdateConfigurationResult)>(r4, r1, z1, null);

        return $z2;

     label7:
        return 1;
    }

    void executeAppTransitionForAllDisplay()
    {
        com.android.server.wm.RootWindowContainer r0;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.DisplayContent $r2, $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r2 = (com.android.server.wm.DisplayContent) $r1;

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    com.android.server.wm.ActivityRecord findActivity(android.content.Intent, android.content.pm.ActivityInfo, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean z0;
        int i0, $i1;
        java.lang.String $r1, $r8, $r9;
        android.content.pm.ApplicationInfo $r2;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$bRRfWu3QSW54eS51jCvFD02TPt8' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        java.lang.Integer $r5;
        java.lang.Boolean $r6;
        android.content.Intent r10;
        android.content.pm.ActivityInfo r11;
        android.content.ComponentName r12, r15;
        com.android.internal.util.function.pooled.PooledPredicate r13;
        com.android.server.wm.ActivityRecord r14;
        com.android.internal.util.function.QuintPredicate r16;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r10 := @parameter0: android.content.Intent;

        r11 := @parameter1: android.content.pm.ActivityInfo;

        z0 := @parameter2: boolean;

        r12 = virtualinvoke r10.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r1 = r11.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        if $r1 == null goto label1;

        r15 = new android.content.ComponentName;

        $r9 = r11.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r8 = r11.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        specialinvoke r15.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r9, $r8);

        r12 = r15;

     label1:
        $r2 = r11.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r2.<android.content.pm.ApplicationInfo: int uid>;

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        $r3 = <com.android.server.wm._$$Lambda$RootWindowContainer$bRRfWu3QSW54eS51jCvFD02TPt8: com.android.server.wm.'-$$Lambda$RootWindowContainer$bRRfWu3QSW54eS51jCvFD02TPt8' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r16 = (com.android.internal.util.function.QuintPredicate) $r3;

        r13 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(com.android.internal.util.function.QuintPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r16, $r4, $r5, $r6, r10, r12);

        r14 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r13);

        interfaceinvoke r13.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        return r14;
    }

    com.android.server.wm.ActivityStack findStackBehind(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r1, $r11, $r12;
        com.android.server.wm.TaskDisplayArea r2;
        java.lang.StringBuilder $r4;
        java.lang.IllegalStateException $r9;
        java.lang.String $r10;
        int $i0, $i1, i2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r2 == null goto label3;

        $i0 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r11 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i2);

        if $r11 != r1 goto label2;

        if i2 <= 0 goto label2;

        $i1 = i2 - 1;

        $r12 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>($i1);

        return $r12;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find a stack behind stack=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    com.android.server.wm.ActivityRecord findTask(com.android.server.wm.ActivityRecord, com.android.server.wm.TaskDisplayArea)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1, $r7, $r12, $r16;
        com.android.server.wm.TaskDisplayArea r2, r4;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.RootWindowContainer$FindTaskResult $r5, $r6, $r9, $r10, $r11, $r13, $r14, $r15;
        int $i0, $i1, i2, i3;
        com.android.server.wm.WindowContainer $r8;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: com.android.server.wm.TaskDisplayArea;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer$FindTaskResult: void clear()>();

        if r2 == null goto label1;

        $r13 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: void findTaskLocked(com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.RootWindowContainer$FindTaskResult)>(r1, 1, $r13);

        $r14 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        $z1 = $r14.<com.android.server.wm.RootWindowContainer$FindTaskResult: boolean mIdealMatch>;

        if $z1 == 0 goto label1;

        $r15 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        $r16 = $r15.<com.android.server.wm.RootWindowContainer$FindTaskResult: com.android.server.wm.ActivityRecord mRecord>;

        return $r16;

     label1:
        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label7;

        $r8 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r3 = (com.android.server.wm.DisplayContent) $r8;

        $i1 = virtualinvoke r3.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i1 - 1;

     label3:
        if i3 < 0 goto label6;

        r4 = virtualinvoke r3.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        if r4 != r2 goto label4;

        goto label5;

     label4:
        $r9 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: void findTaskLocked(com.android.server.wm.ActivityRecord,boolean,com.android.server.wm.RootWindowContainer$FindTaskResult)>(r1, 0, $r9);

        $r10 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        $z0 = $r10.<com.android.server.wm.RootWindowContainer$FindTaskResult: boolean mIdealMatch>;

        if $z0 == 0 goto label5;

        $r11 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        $r12 = $r11.<com.android.server.wm.RootWindowContainer$FindTaskResult: com.android.server.wm.ActivityRecord mRecord>;

        return $r12;

     label5:
        i3 = i3 + -1;

        goto label3;

     label6:
        i2 = i2 + -1;

        goto label2;

     label7:
        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FindTaskResult mTmpFindTaskResult>;

        $r7 = $r6.<com.android.server.wm.RootWindowContainer$FindTaskResult: com.android.server.wm.ActivityRecord mRecord>;

        return $r7;
    }

    boolean finishDisabledPackageActivities(java.lang.String, java.util.Set, boolean, boolean, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        java.util.Set r2;
        boolean z0, z1, $z2;
        int i0;
        com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper mFinishDisabledPackageActivitiesHelper>;

        $z2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer$FinishDisabledPackageActivitiesHelper: boolean process(java.lang.String,java.util.Set,boolean,boolean,int)>(r1, r2, z0, z1, i0);

        return $z2;
    }

    int finishTopCrashedActivities(com.android.server.wm.WindowProcessController, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowProcessController r1;
        java.lang.String r2;
        com.android.server.wm.ActivityStack r3, r9;
        com.android.server.wm.DisplayContent r4;
        com.android.server.wm.TaskDisplayArea r5;
        com.android.server.wm.Task r6, r8, r10;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        com.android.server.wm.WindowContainer $r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        r2 := @parameter1: java.lang.String;

        r8 = null;

        r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label01:
        if i3 < 0 goto label08;

        $r7 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r4 = (com.android.server.wm.DisplayContent) $r7;

        $i1 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label02:
        if i4 < 0 goto label07;

        r5 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        i5 = 0;

     label03:
        $i2 = virtualinvoke r5.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        if i5 >= $i2 goto label06;

        r9 = virtualinvoke r5.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        r6 = virtualinvoke r9.<com.android.server.wm.ActivityStack: com.android.server.wm.Task finishTopCrashedActivityLocked(com.android.server.wm.WindowProcessController,java.lang.String)>(r1, r2);

        if r9 == r3 goto label04;

        r10 = r8;

        if r8 != null goto label05;

     label04:
        r10 = r6;

     label05:
        i5 = i5 + 1;

        r8 = r10;

        goto label03;

     label06:
        i4 = i4 + -1;

        goto label02;

     label07:
        i3 = i3 + -1;

        goto label01;

     label08:
        if r8 == null goto label09;

        i6 = r8.<com.android.server.wm.Task: int mTaskId>;

        goto label10;

     label09:
        i6 = -1;

     label10:
        return i6;
    }

    void finishVoiceTask(android.service.voice.IVoiceInteractionSession)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.service.voice.IVoiceInteractionSession r1;
        com.android.server.wm.DisplayContent r2;
        int i0, i1, $i2, i3, i4, i5;
        com.android.server.wm.TaskDisplayArea r3;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.ActivityStack $r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.service.voice.IVoiceInteractionSession;

        $i2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label6;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r2 = (com.android.server.wm.DisplayContent) $r4;

        i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getStackCount()>();

        i5 = 0;

     label3:
        if i5 >= i1 goto label4;

        $r5 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        virtualinvoke $r5.<com.android.server.wm.ActivityStack: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)>(r1);

        i5 = i5 + 1;

        goto label3;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + -1;

        goto label1;

     label6:
        return;
    }

    void forAllDisplayPolicies(java.util.function.Consumer)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.util.function.Consumer r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.DisplayPolicy $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.DisplayContent) $r4;

        $r6 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r6);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void forAllDisplays(java.util.function.Consumer)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.util.function.Consumer r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.DisplayContent $r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.DisplayContent) $r4;

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r5);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.DisplayContent $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.DisplayContent) $r5;

        r2 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r1);

        if r2 == null goto label2;

        return r2;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    java.util.ArrayList getAllStackInfos(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        com.android.server.wm.ActivityStack $r3, $r6;
        android.app.ActivityManager$StackInfo $r4, $r7;
        com.android.server.wm.WindowContainer $r5;
        com.android.server.wm.DisplayContent r8, r10;
        com.android.server.wm.TaskDisplayArea r9, r11;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i5 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        if i5 != -1 goto label07;

        i6 = 0;

     label01:
        $i2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        if i6 >= $i2 goto label06;

        $r5 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i6);

        r8 = (com.android.server.wm.DisplayContent) $r5;

        $i3 = virtualinvoke r8.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i7 = $i3 - 1;

     label02:
        if i7 < 0 goto label05;

        r9 = virtualinvoke r8.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i7);

        $i4 = virtualinvoke r9.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i8 = $i4 - 1;

     label03:
        if i8 < 0 goto label04;

        $r6 = virtualinvoke r9.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i8);

        $r7 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)>($r6);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i8 = i8 + -1;

        goto label03;

     label04:
        i7 = i7 + -1;

        goto label02;

     label05:
        i6 = i6 + 1;

        goto label01;

     label06:
        return $r2;

     label07:
        r10 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i5);

        if r10 != null goto label08;

        return $r2;

     label08:
        $i0 = virtualinvoke r10.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i9 = $i0 - 1;

     label09:
        if i9 < 0 goto label12;

        r11 = virtualinvoke r10.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i9);

        $i1 = virtualinvoke r11.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i10 = $i1 - 1;

     label10:
        if i10 < 0 goto label11;

        $r3 = virtualinvoke r11.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i10);

        $r4 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)>($r3);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i10 = i10 + -1;

        goto label10;

     label11:
        i9 = i9 + -1;

        goto label09;

     label12:
        return $r2;
    }

    com.android.server.wm.WindowState getCurrentInputMethodWindow()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5, $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        $r5 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r5 == null goto label2;

        $r6 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        return $r6;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.DisplayContent getDefaultDisplay()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent mDefaultDisplay>;

        return $r1;
    }

    com.android.server.wm.ActivityRecord getDefaultDisplayHomeActivityForUser(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.TaskDisplayArea $r1;
        com.android.server.wm.ActivityRecord $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getHomeActivityForUser(int)>(i0);

        return $r2;
    }

    com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent mDefaultDisplay>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        return $r2;
    }

    com.android.server.wm.DisplayContent getDisplayContent(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2, i3;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowContainer $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i1 - 1;

     label1:
        if i3 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r1 = (com.android.server.wm.DisplayContent) $r2;

        $i2 = r1.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i2 != i0 goto label2;

        return r1;

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.DisplayContent getDisplayContent(java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1, $r6;
        com.android.server.wm.DisplayContent r2;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r3;
        android.view.Display $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        r2 = (com.android.server.wm.DisplayContent) $r3;

        $r4 = r2.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $z0 = virtualinvoke $r4.<android.view.Display: boolean isValid()>();

        if $z0 == 0 goto label2;

        $r5 = r2.<com.android.server.wm.DisplayContent: android.view.Display mDisplay>;

        $r6 = virtualinvoke $r5.<android.view.Display: java.lang.String getUniqueId()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.DisplayContent $r1, r2;
        android.hardware.display.DisplayManager r3;
        android.view.Display r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = r0.<com.android.server.wm.RootWindowContainer: android.hardware.display.DisplayManager mDisplayManager>;

        if r3 != null goto label2;

        return null;

     label2:
        r4 = virtualinvoke r3.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if r4 != null goto label3;

        return null;

     label3:
        $r1 = new com.android.server.wm.DisplayContent;

        specialinvoke $r1.<com.android.server.wm.DisplayContent: void <init>(android.view.Display,com.android.server.wm.RootWindowContainer)>(r4, r0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void addChild(com.android.server.wm.WindowContainer,int)>($r1, -2147483648);

        return $r1;
    }

    void getDisplayContextsWithNonToastVisibleWindows(int, java.util.List)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, i2;
        java.util.List r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.WindowList $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        android.content.Context $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i1 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label4;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.DisplayContent) $r5;

        $z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isAnyNonToastWindowVisibleForPid(int)>(i0);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.content.Context getDisplayUiContext()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i2 = i2 + -1;

        goto label2;

     label4:
        return;
    }

    android.content.res.Configuration getDisplayOverrideConfiguration(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.content.res.Configuration $r6;
        com.android.server.wm.DisplayContent r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r7 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i0);

        if r7 == null goto label1;

        $r6 = virtualinvoke r7.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        return $r6;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No display found with id: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    android.content.Context getDisplayUiContext(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.DisplayContent $r1, $r2;
        android.content.Context r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        r3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: android.content.Context getDisplayUiContext()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    java.util.ArrayList getDumpActivities(java.lang.String, boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        boolean z0, z1, $z3;
        int i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.TaskDisplayArea r3;
        com.android.server.wm.ActivityStack r4, r10;
        java.util.ArrayList $r5, $r7, $r8, $r9;
        com.android.server.wm.WindowContainer $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z1 == 0 goto label02;

        r10 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r10 == null goto label01;

        $r9 = virtualinvoke r10.<com.android.server.wm.ActivityStack: java.util.ArrayList getDumpActivitiesLocked(java.lang.String)>(r1);

        return $r9;

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        return $r8;

     label02:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = 0;

     label03:
        if i3 >= i0 goto label10;

        $r6 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r2 = (com.android.server.wm.DisplayContent) $r6;

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label04:
        if i4 < 0 goto label09;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i2 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i2 - 1;

     label05:
        if i5 < 0 goto label08;

        r4 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        if z0 == 0 goto label06;

        $z3 = virtualinvoke r4.<com.android.server.wm.ActivityStack: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(null);

        if $z3 == 0 goto label07;

     label06:
        $r7 = virtualinvoke r4.<com.android.server.wm.ActivityStack: java.util.ArrayList getDumpActivitiesLocked(java.lang.String)>(r1);

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r7);

     label07:
        i5 = i5 + -1;

        goto label05;

     label08:
        i4 = i4 + -1;

        goto label04;

     label09:
        i3 = i3 + 1;

        goto label03;

     label10:
        return $r5;
    }

    com.android.server.wm.ActivityStack getLaunchStack(com.android.server.wm.ActivityRecord, android.app.ActivityOptions, com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        android.app.ActivityOptions r2;
        com.android.server.wm.Task r3;
        boolean z0;
        com.android.server.wm.ActivityStack $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: android.app.ActivityOptions;

        r3 := @parameter2: com.android.server.wm.Task;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getLaunchStack(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,boolean,com.android.server.wm.LaunchParamsController$LaunchParams,int,int)>(r1, r2, r3, z0, null, -1, -1);

        return $r4;
    }

    com.android.server.wm.ActivityStack getLaunchStack(com.android.server.wm.ActivityRecord, android.app.ActivityOptions, com.android.server.wm.Task, boolean, com.android.server.wm.LaunchParamsController$LaunchParams, int, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        android.app.ActivityOptions r2;
        com.android.server.wm.Task r3, $r7, r19;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, i9, i10;
        com.android.server.wm.DisplayContent $r4, $r5, $r8, r21;
        com.android.server.wm.ActivityStack $r6, $r13, r23, r24, r25, $r28;
        com.android.server.wm.TaskDisplayArea $r9, $r12, r17, r20, r22, r26, r27;
        android.content.pm.ActivityInfo $r10;
        com.android.server.wm.ActivityStackSupervisor $r11;
        android.os.IBinder $r14;
        com.android.server.wm.WindowContainer $r15;
        com.android.server.wm.LaunchParamsController$LaunchParams r16;
        android.window.WindowContainerToken r18;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: android.app.ActivityOptions;

        r3 := @parameter2: com.android.server.wm.Task;

        z0 := @parameter3: boolean;

        r16 := @parameter4: com.android.server.wm.LaunchParamsController$LaunchParams;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        r17 = null;

        if r2 == null goto label03;

        i5 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchTaskId()>();

        i6 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchDisplayId()>();

        r18 = virtualinvoke r2.<android.app.ActivityOptions: android.window.WindowContainerToken getLaunchTaskDisplayArea()>();

        if r18 == null goto label01;

        $r14 = virtualinvoke r18.<android.window.WindowContainerToken: android.os.IBinder asBinder()>();

        $r15 = staticinvoke <com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer fromBinder(android.os.IBinder)>($r14);

        r17 = (com.android.server.wm.TaskDisplayArea) $r15;

        goto label02;

     label01:
        r17 = null;

     label02:
        goto label04;

     label03:
        i5 = -1;

        i6 = -1;

     label04:
        if i5 == -1 goto label05;

        virtualinvoke r2.<android.app.ActivityOptions: void setLaunchTaskId(int)>(-1);

        r19 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Task anyTaskForId(int,int,android.app.ActivityOptions,boolean)>(i5, 2, r2, z0);

        virtualinvoke r2.<android.app.ActivityOptions: void setLaunchTaskId(int)>(i5);

        if r19 == null goto label05;

        $r13 = virtualinvoke r19.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        return $r13;

     label05:
        i7 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int resolveActivityType(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task)>(r1, r2, r3);

        r20 = r17;

        if r16 == null goto label06;

        r20 = r17;

        $r12 = r16.<com.android.server.wm.LaunchParamsController$LaunchParams: com.android.server.wm.TaskDisplayArea mPreferredTaskDisplayArea>;

        if $r12 == null goto label06;

        r20 = r16.<com.android.server.wm.LaunchParamsController$LaunchParams: com.android.server.wm.TaskDisplayArea mPreferredTaskDisplayArea>;

     label06:
        if r20 != null goto label07;

        if i6 == -1 goto label07;

        r21 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i6);

        if r21 == null goto label07;

        r22 = virtualinvoke r21.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        goto label08;

     label07:
        r22 = r20;

     label08:
        if r22 == null goto label14;

        i0 = virtualinvoke r22.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        if i3 == 0 goto label09;

        if i4 <= 0 goto label09;

        if r1 == null goto label09;

        $r11 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r10 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $z6 = virtualinvoke $r11.<com.android.server.wm.ActivityStackSupervisor: boolean canPlaceEntityOnDisplay(int,int,int,android.content.pm.ActivityInfo)>(i0, i3, i4, $r10);

        if $z6 == 0 goto label09;

        z7 = 1;

        goto label10;

     label09:
        z7 = 0;

     label10:
        if z7 != 0 goto label12;

        $z5 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: boolean canLaunchOnDisplay(com.android.server.wm.ActivityRecord,int)>(r1, i0);

        if $z5 == 0 goto label11;

        goto label12;

     label11:
        r23 = null;

        goto label15;

     label12:
        if r1 == null goto label13;

        r24 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getValidLaunchStackInTaskDisplayArea(com.android.server.wm.TaskDisplayArea,com.android.server.wm.ActivityRecord,com.android.server.wm.Task,android.app.ActivityOptions,com.android.server.wm.LaunchParamsController$LaunchParams)>(r22, r1, r3, r2, r16);

        if r24 == null goto label13;

        return r24;

     label13:
        $r8 = r22.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r25 = virtualinvoke $r9.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getOrCreateStack(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,int,boolean)>(r1, r2, r3, i7, z0);

        r23 = r25;

        if r25 == null goto label15;

        return r25;

     label14:
        r23 = null;

     label15:
        if r3 == null goto label16;

        r23 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

     label16:
        if r23 != null goto label17;

        if r1 == null goto label17;

        r23 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        goto label17;

     label17:
        if r16 == null goto label18;

        i9 = r16.<com.android.server.wm.LaunchParamsController$LaunchParams: int mWindowingMode>;

        goto label19;

     label18:
        i9 = 0;

     label19:
        if r23 == null goto label24;

        r26 = virtualinvoke r23.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r26 == null goto label23;

        $r5 = r26.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        $i2 = $r5.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $z2 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: boolean canLaunchOnDisplay(com.android.server.wm.ActivityRecord,int)>(r1, $i2);

        if $z2 == 0 goto label23;

        if i9 != 0 goto label20;

        i9 = virtualinvoke r26.<com.android.server.wm.TaskDisplayArea: int resolveWindowingMode(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,int)>(r1, r2, r3, i7);

        goto label20;

     label20:
        $z3 = virtualinvoke r23.<com.android.server.wm.ActivityStack: boolean isCompatible(int,int)>(i9, i7);

        if $z3 != 0 goto label22;

        $z4 = r23.<com.android.server.wm.ActivityStack: boolean mCreatedByOrganizer>;

        if $z4 == 0 goto label21;

        goto label22;

     label21:
        r27 = r26;

        i10 = i9;

        if i9 != 4 goto label25;

        r27 = r26;

        i10 = i9;

        $r6 = virtualinvoke r26.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootSplitScreenPrimaryTask()>();

        if $r6 != r23 goto label25;

        r27 = r26;

        i10 = i9;

        $r7 = virtualinvoke r23.<com.android.server.wm.ActivityStack: com.android.server.wm.Task getTopMostTask()>();

        if r3 != $r7 goto label25;

        return r23;

     label22:
        return r23;

     label23:
        r27 = r26;

        i10 = i9;

        goto label25;

     label24:
        i10 = i9;

        r27 = null;

     label25:
        if r27 == null goto label27;

        $r4 = r27.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        $i1 = $r4.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $z1 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: boolean canLaunchOnDisplay(com.android.server.wm.ActivityRecord,int)>(r1, $i1);

        if $z1 != 0 goto label26;

        goto label27;

     label26:
        goto label28;

     label27:
        r27 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        if i10 != 0 goto label28;

        virtualinvoke r27.<com.android.server.wm.TaskDisplayArea: int resolveWindowingMode(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,int)>(r1, r2, r3, i7);

        goto label28;

     label28:
        $r28 = virtualinvoke r27.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getOrCreateStack(com.android.server.wm.ActivityRecord,android.app.ActivityOptions,com.android.server.wm.Task,int,boolean)>(r1, r2, r3, i7, z0);

        return $r28;
    }

    java.lang.String getName()
    {
        com.android.server.wm.RootWindowContainer r0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        return "ROOT";
    }

    com.android.server.wm.ActivityStack getNextFocusableStack(com.android.server.wm.ActivityStack, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r1, r9, r11;
        boolean z0, $z1;
        com.android.server.wm.DisplayContent $r2, $r4, $r6, r10;
        int $i0, $i1, i2;
        com.android.server.wm.WindowContainer $r3;
        com.android.server.wm.TaskDisplayArea $r5, r7, r8;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        z0 := @parameter1: boolean;

        r7 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r8 = r7;

        if r7 != null goto label1;

        $i1 = r1.<com.android.server.wm.ActivityStack: int mPrevDisplayId>;

        $r6 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i1);

        r8 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

     label1:
        r9 = virtualinvoke r8.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getNextFocusableStack(com.android.server.wm.ActivityStack,boolean)>(r1, z0);

        if r9 == null goto label2;

        return r9;

     label2:
        $r2 = r8.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean supportsSystemDecorations()>();

        if $z1 == 0 goto label3;

        return null;

     label3:
        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i0 - 1;

     label4:
        if i2 < 0 goto label7;

        $r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r10 = (com.android.server.wm.DisplayContent) $r3;

        $r4 = r8.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        if r10 != $r4 goto label5;

        goto label6;

     label5:
        $r5 = virtualinvoke r10.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r11 = virtualinvoke $r5.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getNextFocusableStack(com.android.server.wm.ActivityStack,boolean)>(r1, z0);

        if r11 == null goto label6;

        return r11;

     label6:
        i2 = i2 + -1;

        goto label4;

     label7:
        return null;
    }

    void getRunningTasks(int, java.util.List, boolean, int, boolean, boolean, android.util.ArraySet)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1;
        java.util.List r1;
        boolean z0, z1, z2;
        android.util.ArraySet r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.RunningTasks $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        r2 := @parameter6: android.util.ArraySet;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RunningTasks getRunningTasks()>();

        virtualinvoke $r4.<com.android.server.wm.RunningTasks: void getTasks(int,java.util.List,boolean,com.android.server.wm.RootWindowContainer,int,boolean,boolean,android.util.ArraySet)>(i0, r1, z0, r0, i1, z1, z2, r2);

        return;
    }

    protected com.android.server.wm.ActivityStack getStack(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, i2;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getStack(int)>(i0);

        if r1 == null goto label2;

        return r1;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.ActivityStack getStack(int, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1, $i2, i3;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getStack(int,int)>(i0, i1);

        if r1 == null goto label2;

        return r1;

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        return null;
    }

    android.app.ActivityManager$StackInfo getStackInfo(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.ActivityStack r1;
        android.app.ActivityManager$StackInfo $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i0);

        if r1 == null goto label1;

        $r2 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)>(r1);

        return $r2;

     label1:
        return null;
    }

    android.app.ActivityManager$StackInfo getStackInfo(int, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1;
        com.android.server.wm.ActivityStack r1;
        android.app.ActivityManager$StackInfo r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int,int)>(i0, i1);

        if r1 == null goto label1;

        r2 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)>(r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    android.app.ActivityManager$StackInfo getStackInfo(int, int, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1, i2;
        com.android.server.wm.ActivityStack r1;
        android.app.ActivityManager$StackInfo r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int,int,int)>(i0, i1, i2);

        if r1 == null goto label1;

        r2 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)>(r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    com.android.server.wm.ActivityStack getTopDisplayFocusedStack()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r1;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r1 == null goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.DisplayContent getTopFocusedDisplayContent()
    {
        com.android.server.wm.RootWindowContainer r0;
        int $i0;
        com.android.server.wm.DisplayContent r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = r0.<com.android.server.wm.RootWindowContainer: int mTopFocusedDisplayId>;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i0);

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

     label2:
        return r1;
    }

    com.android.server.wm.ActivityRecord getTopResumedActivity()
    {
        com.android.server.wm.RootWindowContainer r0;
        int $i0, $i1, i2, i3;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.WindowProcessController $r2;
        com.android.server.wm.ActivityStack r3;
        com.android.server.wm.ActivityRecord r4, r7;
        com.android.server.wm.DisplayContent r5;
        com.android.server.wm.TaskDisplayArea r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r3 != null goto label1;

        return null;

     label1:
        r4 = virtualinvoke r3.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        if r4 == null goto label2;

        $r2 = r4.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r2 == null goto label2;

        return r4;

     label2:
        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i0 - 1;

     label3:
        if i2 < 0 goto label7;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r5 = (com.android.server.wm.DisplayContent) $r1;

        $i1 = virtualinvoke r5.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i1 - 1;

     label4:
        if i3 < 0 goto label6;

        r6 = virtualinvoke r5.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        r7 = virtualinvoke r6.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getFocusedActivity()>();

        if r7 == null goto label5;

        return r7;

     label5:
        i3 = i3 + -1;

        goto label4;

     label6:
        i2 = i2 + -1;

        goto label3;

     label7:
        return null;
    }

    java.util.List getTopVisibleActivities()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r2, r5;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.TaskDisplayArea r4;
        com.android.server.wm.ActivityRecord r6;
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.WindowContainer $r8;
        boolean $z0;
        com.android.server.wm.ActivityRecord$Token $r9, $r10;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label8;

        $r8 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r3 = (com.android.server.wm.DisplayContent) $r8;

        $i1 = virtualinvoke r3.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label7;

        r4 = virtualinvoke r3.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i2 = virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i2 - 1;

     label3:
        if i5 < 0 goto label6;

        r5 = virtualinvoke r4.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        $z0 = virtualinvoke r5.<com.android.server.wm.ActivityStack: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(null);

        if $z0 == 0 goto label5;

        r6 = virtualinvoke r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r6 == null goto label5;

        if r5 != r2 goto label4;

        $r10 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(0, $r10);

        goto label5;

     label4:
        $r9 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label5:
        i5 = i5 + -1;

        goto label3;

     label6:
        i4 = i4 + -1;

        goto label2;

     label7:
        i3 = i3 + -1;

        goto label1;

     label8:
        return $r7;
    }

    com.android.server.wm.ActivityStack getValidLaunchStackInTaskDisplayArea(com.android.server.wm.TaskDisplayArea, com.android.server.wm.ActivityRecord, com.android.server.wm.Task, android.app.ActivityOptions, com.android.server.wm.LaunchParamsController$LaunchParams)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.TaskDisplayArea r1, $r5, r13;
        android.app.ActivityOptions r2;
        com.android.server.wm.LaunchParamsController$LaunchParams r3;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, i7, i8;
        boolean $z0, $z1, $z2;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.Task $r6, $r7, $r9, $r10, r12;
        com.android.server.wm.ActivityStack $r8, r14, r15, $r16;
        com.android.server.wm.ActivityRecord r11;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.TaskDisplayArea;

        r11 := @parameter1: com.android.server.wm.ActivityRecord;

        r12 := @parameter2: com.android.server.wm.Task;

        r2 := @parameter3: android.app.ActivityOptions;

        r3 := @parameter4: com.android.server.wm.LaunchParamsController$LaunchParams;

        $i1 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        $z0 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: boolean canBeLaunchedOnDisplay(int)>($i1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        if r12 == null goto label07;

        $r6 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r6 == null goto label02;

        $r10 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r10 != r12 goto label07;

     label02:
        $r7 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r7 == null goto label03;

        $r9 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r13 = virtualinvoke $r9.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        goto label04;

     label03:
        r13 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

     label04:
        if r13 == null goto label06;

        if r13 != r1 goto label05;

        goto label06;

     label05:
        $z2 = virtualinvoke r12.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z2 == 0 goto label07;

        r14 = virtualinvoke r12.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke r14.<com.android.server.wm.ActivityStack: void reparent(com.android.server.wm.TaskDisplayArea,boolean)>(r1, 1);

        return r14;

     label06:
        $r8 = virtualinvoke r12.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        return $r8;

     label07:
        if r3 == null goto label08;

        i4 = r3.<com.android.server.wm.LaunchParamsController$LaunchParams: int mWindowingMode>;

        goto label10;

     label08:
        if r2 == null goto label09;

        i4 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchWindowingMode()>();

        goto label10;

     label09:
        i4 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: int getWindowingMode()>();

     label10:
        $i5 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        i0 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int validateWindowingMode(int,com.android.server.wm.ActivityRecord,com.android.server.wm.Task,int)>(i4, r11, r12, $i5);

        $i6 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i7 = $i6 - 1;

     label11:
        if i7 < 0 goto label13;

        r15 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i7);

        $z1 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: boolean isValidLaunchStack(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityRecord,int)>(r15, r11, i0);

        if $z1 == 0 goto label12;

        return r15;

     label12:
        i7 = i7 + -1;

        goto label11;

     label13:
        $i2 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i2);

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        if r1 == $r5 goto label16;

        if r2 == null goto label14;

        $i3 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchActivityType()>();

        if $i3 == 0 goto label14;

        i8 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchActivityType()>();

        goto label15;

     label14:
        i8 = virtualinvoke r11.<com.android.server.wm.ActivityRecord: int getActivityType()>();

     label15:
        $r16 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack createStack(int,int,boolean)>(i0, i8, 1);

        return $r16;

     label16:
        return null;
    }

    com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowToken r2;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.DisplayContent $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.DisplayContent) $r5;

        r2 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r1);

        if r2 == null goto label2;

        return r2;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    com.android.server.wm.DisplayContent getWindowTokenDisplay(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowToken r1, $r7;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        android.os.IBinder $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.DisplayContent) $r5;

        $r6 = r1.<com.android.server.wm.WindowToken: android.os.IBinder token>;

        $r7 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>($r6);

        if $r7 != r1 goto label3;

        return r2;

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return null;
    }

    void getWindowsByName(java.util.ArrayList, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.util.ArrayList r1;
        int i0, i1;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.util.ArrayList;

        r4 := @parameter1: java.lang.String;

        i1 = 0;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r4, 16);

     label2:
        i1 = i0;

        r4 = null;

        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void getWindowsByName(java.util.ArrayList,java.lang.String,int)>(r1, r4, i1);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void handleAppCrash(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$0ZupnQyxl7yZKgMmf2zwvykG50s' $r1;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r2;
        com.android.server.wm.WindowProcessController r3;
        com.android.internal.util.function.pooled.PooledConsumer r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r3 := @parameter0: com.android.server.wm.WindowProcessController;

        $r1 = <com.android.server.wm._$$Lambda$RootWindowContainer$0ZupnQyxl7yZKgMmf2zwvykG50s: com.android.server.wm.'-$$Lambda$RootWindowContainer$0ZupnQyxl7yZKgMmf2zwvykG50s' INSTANCE>;

        $r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r5 = (java.util.function.BiConsumer) $r1;

        r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r5, $r2, r3);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllActivities(java.util.function.Consumer)>(r4);

        interfaceinvoke r4.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    boolean handleAppDied(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowProcessController r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.TaskDisplayArea r3;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.ActivityStack $r5;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        z1 = 0;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label6;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r2 = (com.android.server.wm.DisplayContent) $r4;

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label5;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i2 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i2 - 1;

     label3:
        if i5 < 0 goto label4;

        $r5 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        $z0 = virtualinvoke $r5.<com.android.server.wm.ActivityStack: boolean handleAppDied(com.android.server.wm.WindowProcessController)>(r1);

        z1 = z1 | $z0;

        i5 = i5 + -1;

        goto label3;

     label4:
        i4 = i4 + -1;

        goto label2;

     label5:
        i3 = i3 + -1;

        goto label1;

     label6:
        return z1;
    }

    boolean handleNotObscuredLocked(com.android.server.wm.WindowState, boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowState r1, $r4;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, z16;
        int i0, $i1, i8, i11, $i12;
        java.lang.String r2, $r9, r26, r27;
        com.android.server.wm.WindowManagerService $r3, $r5;
        com.android.server.policy.WindowManagerPolicy $r6;
        android.view.WindowManager$LayoutParams $r7, $r8, $r13, $r14, $r18, r25;
        float $f0, $f1, $f2;
        byte $b2, $b4, $b6;
        java.lang.Object[] $r10, $r15, $r19;
        com.android.server.wm.ProtoLogGroup $r11, $r16, $r20;
        com.android.server.wm.Session $r12;
        long $l3, $l5, $l7, l9, l10;
        java.lang.Long $r17, $r24;
        java.lang.Boolean $r21, $r22, $r23;
        com.android.server.wm.DisplayContent r28;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z14 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        r25 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i8 = r25.<android.view.WindowManager$LayoutParams: int flags>;

        z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        z2 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        i0 = r25.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_KEEP_SCREEN_ON_enabled>;

        if $z5 == 0 goto label01;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        z3 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        z4 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        $r18 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        l9 = $r18.<android.view.WindowManager$LayoutParams: long userActivityTimeout>;

        $r20 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_KEEP_SCREEN_ON>;

        $r19 = newarray (java.lang.Object)[5];

        $r19[0] = r26;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r19[1] = $r21;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r19[2] = $r22;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r19[3] = $r23;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l9);

        $r19[4] = $r24;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r20, -481924678, 508, null, $r19);

        goto label01;

     label01:
        $z6 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z6 == 0 goto label02;

        if z1 == 0 goto label02;

        if z0 != 0 goto label02;

        $r13 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l3 = $r13.<android.view.WindowManager$LayoutParams: long userActivityTimeout>;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label02;

        $l5 = r0.<com.android.server.wm.RootWindowContainer: long mUserActivityTimeout>;

        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label02;

        $r14 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l7 = $r14.<android.view.WindowManager$LayoutParams: long userActivityTimeout>;

        r0.<com.android.server.wm.RootWindowContainer: long mUserActivityTimeout> = $l7;

        $z13 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_KEEP_SCREEN_ON_enabled>;

        if $z13 == 0 goto label02;

        l10 = r0.<com.android.server.wm.RootWindowContainer: long mUserActivityTimeout>;

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_KEEP_SCREEN_ON>;

        $r15 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10);

        $r15[0] = $r17;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, 221540118, 1, null, $r15);

     label02:
        $z15 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z15 == 0 goto label13;

        if z2 == 0 goto label13;

        $i1 = i8 & 128;

        if $i1 == 0 goto label03;

        $r12 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Session mHoldScreen> = $r12;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mHoldScreenWindow> = r1;

        goto label04;

     label03:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockHoldingWindow>;

        if r1 != $r4 goto label04;

        $z12 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_KEEP_SCREEN_ON_enabled>;

        if $z12 == 0 goto label04;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r9 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(10);

        r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $r11 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_KEEP_SCREEN_ON>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r2;

        $r10[1] = r27;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r11, 2088592090, 0, null, $r10);

     label04:
        if z0 != 0 goto label05;

        $r7 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f0 = $r7.<android.view.WindowManager$LayoutParams: float screenBrightness>;

        $b2 = $f0 cmpl 0.0F;

        if $b2 < 0 goto label05;

        $f1 = r0.<com.android.server.wm.RootWindowContainer: float mScreenBrightnessOverride>;

        $z11 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z11 == 0 goto label05;

        $r8 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f2 = $r8.<android.view.WindowManager$LayoutParams: float screenBrightness>;

        r0.<com.android.server.wm.RootWindowContainer: float mScreenBrightnessOverride> = $f2;

     label05:
        i11 = r25.<android.view.WindowManager$LayoutParams: int type>;

        r28 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r28 == null goto label08;

        $z8 = r28.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z8 == 0 goto label08;

        $z9 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDreamWindow()>();

        if $z9 != 0 goto label06;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z10 = interfaceinvoke $r6.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardShowing()>();

        if $z10 == 0 goto label07;

     label06:
        r0.<com.android.server.wm.RootWindowContainer: boolean mObscureApplicationContentOnSecondaryDisplays> = 1;

     label07:
        z16 = 1;

        goto label11;

     label08:
        if r28 == null goto label10;

        $z7 = r0.<com.android.server.wm.RootWindowContainer: boolean mObscureApplicationContentOnSecondaryDisplays>;

        if $z7 == 0 goto label09;

        if z14 == 0 goto label10;

        if i11 != 2009 goto label10;

     label09:
        z16 = 1;

        goto label11;

     label10:
        z16 = 0;

     label11:
        $i12 = 262144 & i0;

        if $i12 == 0 goto label12;

        r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeCurrent> = 1;

     label12:
        goto label14;

     label13:
        z16 = 0;

     label14:
        return z16;
    }

    boolean hasAwakeDisplay()
    {
        com.android.server.wm.RootWindowContainer r0;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.DisplayContent $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r2 = (com.android.server.wm.DisplayContent) $r1;

        $z0 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean shouldSleep()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    boolean hasPendingLayoutChanges(com.android.server.wm.WindowAnimator)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowAnimator r1;
        int i0, i1, $i2, $i3, $i4, i5;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.wm.DisplayContent $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowAnimator;

        z0 = 0;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        $r5 = (com.android.server.wm.DisplayContent) $r4;

        i1 = $r5.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i2 = i1 & 4;

        if $i2 == 0 goto label2;

        $i3 = r1.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i4 = $i3 | 8;

        r1.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i4;

     label2:
        if i1 == 0 goto label3;

        z0 = 1;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return z0;
    }

    void invalidateTaskLayers()
    {
        com.android.server.wm.RootWindowContainer r0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r0.<com.android.server.wm.RootWindowContainer: boolean mTaskLayersChanged> = 1;

        return;
    }

    boolean isAnyNonToastWindowVisibleForUid(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.'-$$Lambda$PyL9QAXbv8yta3wX2VTGq8fFFo4' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        java.lang.Integer $r5;
        boolean z0;
        java.util.function.BiPredicate r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r3 = <com.android.server.wm._$$Lambda$PyL9QAXbv8yta3wX2VTGq8fFFo4: com.android.server.wm.'-$$Lambda$PyL9QAXbv8yta3wX2VTGq8fFFo4' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/WindowState;");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (java.util.function.BiPredicate) $r3;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r4, $r5);

        r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        if r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    com.android.server.wm.ActivityRecord isInAnyStack(android.os.IBinder)
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean $z0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityRecord r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.os.IBinder;

        r2 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord forTokenLocked(android.os.IBinder)>(r1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isDescendantOf(com.android.server.wm.WindowContainer)>(r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    boolean isLayoutNeeded()
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1;
        com.android.server.wm.WindowList $r1, $r2;
        java.lang.Object $r3;
        com.android.server.wm.DisplayContent $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.DisplayContent) $r3;

        $z0 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: boolean isLayoutNeeded()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean isOnTop()
    {
        com.android.server.wm.RootWindowContainer r0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        return 1;
    }

    boolean isTopDisplayFocusedStack(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r1 != $r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void lambda$closeSystemDialogActivities$11$RootWindowContainer(java.lang.String, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        com.android.server.wm.ActivityRecord r2;
        android.content.pm.ActivityInfo $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        $r3 = r2.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r3.<android.content.pm.ActivityInfo: int flags>;

        $i1 = $i0 & 256;

        if $i1 != 0 goto label1;

        $z0 = specialinvoke r0.<com.android.server.wm.RootWindowContainer: boolean shouldCloseAssistant(com.android.server.wm.ActivityRecord,java.lang.String)>(r2, r1);

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>(r1, 1);

     label2:
        return;
    }

    public void lambda$new$0$RootWindowContainer(com.android.server.wm.WindowState)
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean $z0;
        java.lang.String $r1;
        android.view.IWindow $r2;
        android.os.RemoteException $r3;
        com.android.server.wm.WindowState r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r4 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r4.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label4;

     label1:
        $r2 = r4.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: java.lang.String mCloseSystemDialogsReason>;

        interfaceinvoke $r2.<android.view.IWindow: void closeSystemDialogs(java.lang.String)>($r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lambda$reclaimSomeSurfaceMemory$7$RootWindowContainer(android.util.SparseIntArray, com.android.server.wm.WindowState)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.util.SparseIntArray r1;
        com.android.server.wm.WindowManagerService $r2;
        java.util.ArrayList $r3;
        boolean $z0;
        com.android.server.wm.WindowSurfaceController $r4;
        com.android.server.wm.Session $r5, $r6;
        int $i0, $i1;
        com.android.server.wm.WindowState r7;
        com.android.server.wm.WindowStateAnimator r8;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.util.SparseIntArray;

        r7 := @parameter1: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        return;

     label1:
        r8 = r7.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r4 = r8.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r4 == null goto label2;

        $r5 = r8.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i1 = $r5.<com.android.server.wm.Session: int mPid>;

        $r6 = r8.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i0 = $r6.<com.android.server.wm.Session: int mPid>;

        virtualinvoke r1.<android.util.SparseIntArray: void append(int,int)>($i1, $i0);

     label2:
        return;
    }

    void lockAllProfileTasks(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.ActivityTaskManagerService $r1, $r5, $r7;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$JVx5SVc0AsTnwnLxXYLgV6AKHPg' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        java.lang.Throwable $r6;
        com.android.internal.util.function.pooled.PooledConsumer r8;
        com.android.internal.util.function.TriConsumer r10;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label1:
        $r2 = <com.android.server.wm._$$Lambda$RootWindowContainer$JVx5SVc0AsTnwnLxXYLgV6AKHPg: com.android.server.wm.'-$$Lambda$RootWindowContainer$JVx5SVc0AsTnwnLxXYLgV6AKHPg' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r10 = (com.android.internal.util.function.TriConsumer) $r2;

        r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.TriConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r10, r0, $r3, $r4);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r8, 1);

        interfaceinvoke r8.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

     label2:
        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void moveActivityToPinnedStack(com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.TaskDisplayArea r1;
        com.android.server.wm.Task r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r9, $r10, $r13;
        com.android.server.wm.DisplayContent $r4;
        int $i0, $i1, i2;
        android.content.Intent $r5;
        android.content.pm.ActivityInfo $r6;
        android.graphics.Rect $r7;
        com.android.server.wm.WindowContainer $r8;
        com.android.server.wm.TaskChangeNotificationController $r11;
        java.lang.Throwable $r12;
        com.android.server.wm.ActivityRecord r14;
        java.lang.String r15;
        com.android.server.wm.ActivityStack r16, r17, r18;
        boolean z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r14 := @parameter0: com.android.server.wm.ActivityRecord;

        r15 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

        r1 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

     label01:
        r2 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r16 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootPinnedTask()>();

     label02:
        if r16 == null goto label04;

     label03:
        virtualinvoke r16.<com.android.server.wm.ActivityStack: void dismissPip()>();

     label04:
        $r4 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean)>(0, 0);

        $i0 = virtualinvoke r2.<com.android.server.wm.Task: int getChildCount()>();

        if $i0 != 1 goto label06;

     label05:
        z1 = 1;

        goto label07;

     label06:
        z1 = 0;

     label07:
        if z1 == 0 goto label10;

     label08:
        r17 = (com.android.server.wm.ActivityStack) r2;

     label09:
        goto label12;

     label10:
        $i1 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        $r6 = r14.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $r5 = r14.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        r18 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack createStack(int,int,boolean,android.content.pm.ActivityInfo,android.content.Intent,boolean)>(0, $i1, 1, $r6, $r5, 0);

        $r7 = r2.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        virtualinvoke r18.<com.android.server.wm.ActivityStack: void setLastNonFullscreenBounds(android.graphics.Rect)>($r7);

        virtualinvoke r14.<com.android.server.wm.ActivityRecord: void reparent(com.android.server.wm.Task,int,java.lang.String)>(r18, 2147483647, r15);

     label11:
        r17 = r18;

     label12:
        i2 = virtualinvoke r17.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        $r8 = virtualinvoke r17.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getParent()>();

        if $r8 == r1 goto label13;

        virtualinvoke r17.<com.android.server.wm.ActivityStack: void reparent(com.android.server.wm.TaskDisplayArea,boolean)>(r1, 1);

     label13:
        virtualinvoke r14.<com.android.server.wm.ActivityRecord: void setWindowingMode(int)>(i2);

        virtualinvoke r17.<com.android.server.wm.ActivityStack: void setWindowingMode(int)>(2);

        r14.<com.android.server.wm.ActivityRecord: boolean supportsEnterPipOnTaskSwitch> = 0;

     label14:
        $r9 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        $r10 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r11 = virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r11.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityPinned(com.android.server.wm.ActivityRecord)>(r14);

        return;

     label15:
        $r12 := @caughtexception;

        $r13 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        virtualinvoke $r13.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    void moveStackToDisplay(int, int, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1, $i2;
        boolean z0, $z1;
        com.android.server.wm.DisplayContent r1;
        java.lang.StringBuilder $r2, $r8;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, $r13;
        com.android.server.wm.TaskDisplayArea $r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i1);

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z1 == 0 goto label1;

        $i2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getStackCount()>();

        if $i2 <= 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not move stackId=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to single task instance display=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r13);

        return;

     label1:
        $r7 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void moveStackToTaskDisplayArea(int,com.android.server.wm.TaskDisplayArea,boolean)>(i0, $r7, z0);

        return;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveStackToDisplay: Unknown displayId=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    void moveStackToTaskDisplayArea(int, com.android.server.wm.TaskDisplayArea, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1, $r6, $r12, $r17;
        java.lang.IllegalArgumentException $r4, $r15, $r22;
        java.lang.String $r5, $r11, $r16, $r23;
        java.lang.IllegalStateException $r10;
        com.android.server.wm.TaskDisplayArea r24, r26;
        com.android.server.wm.ActivityStack r25;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r24 := @parameter1: com.android.server.wm.TaskDisplayArea;

        z0 := @parameter2: boolean;

        r25 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i0);

        if r25 == null goto label4;

        r26 = virtualinvoke r25.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r26 == null goto label3;

        if r24 == null goto label2;

        if r26 == r24 goto label1;

        virtualinvoke r25.<com.android.server.wm.ActivityStack: void reparent(com.android.server.wm.TaskDisplayArea,boolean)>(r24, z0);

        return;

     label1:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to move stack=");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to its current taskDisplayArea=");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveStackToTaskDisplayArea: Unknown taskDisplayArea=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveStackToTaskDisplayArea: stack=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not attached to any task display area.");

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveStackToTaskDisplayArea: Unknown stackId=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    boolean moveTopStackActivityToPinnedStack(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        java.lang.StringBuilder $r1, $r7, $r11;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r10, $r14;
        com.android.server.wm.ActivityTaskManagerService $r6;
        boolean $z0, $z1;
        com.android.server.wm.ActivityStack r15;
        com.android.server.wm.ActivityRecord r16;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r15 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>(i0);

        if r15 == null goto label3;

        r16 = virtualinvoke r15.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r16 != null goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTopStackActivityToPinnedStack: No top running activity in stack=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r14);

        return 0;

     label1:
        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $z0 = $r6.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r16.<com.android.server.wm.ActivityRecord: boolean supportsPictureInPicture()>();

        if $z1 != 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTopStackActivityToPinnedStack: Picture-In-Picture not supported for  r=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r10);

        return 0;

     label2:
        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void moveActivityToPinnedStack(com.android.server.wm.ActivityRecord,java.lang.String)>(r16, "moveTopActivityToPinnedStack");

        return 1;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTopStackActivityToPinnedStack: Unknown stackId=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    void onChildPositionChanged(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = $r2.<com.android.server.wm.WindowManagerService: boolean mPerDisplayFocusEnabled>;

        $z1 = $z0 ^ 1;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, $z1);

        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.content.res.Configuration r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void prepareFreezingTaskBounds()>();

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    public void onDisplayAdded(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityTaskManagerService $r2, $r3, $r5;
        boolean $z0, $z1;
        com.android.server.wm.DisplayContent $r4, r7;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r7 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i0);

     label02:
        if r7 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: boolean isBooted()>();

        if $z0 != 0 goto label06;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.ActivityTaskManagerService: boolean isBooting()>();

        if $z1 == 0 goto label07;

     label06:
        $r4 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void startSystemDecorations(com.android.server.wm.DisplayContent)>($r4);

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void onDisplayChanged(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        java.lang.Throwable $r3;
        com.android.server.wm.DisplayContent r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r4 == null goto label4;

     label3:
        virtualinvoke r4.<com.android.server.wm.DisplayContent: void onDisplayChanged()>();

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onDisplayRemoved(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.IllegalArgumentException $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.DisplayContent r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        if i0 == 0 goto label10;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        r1 = $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        virtualinvoke r5.<com.android.server.wm.DisplayContent: void remove()>();

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r4 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t remove the primary display.");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    void onSettingsRetrieved()
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, i2;
        com.android.server.wm.WindowList $r1, $r2;
        java.lang.Object $r3;
        com.android.server.wm.WindowManagerService $r4, $r6, $r7;
        com.android.server.wm.DisplayWindowSettings $r5;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r8;
        com.android.server.wm.DisplayContent r9;
        android.content.res.Configuration r10;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r9 = (com.android.server.wm.DisplayContent) $r3;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        $z0 = virtualinvoke $r5.<com.android.server.wm.DisplayWindowSettings: boolean updateSettingsForDisplay(com.android.server.wm.DisplayContent)>(r9);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        virtualinvoke r9.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        $z1 = r9.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z1 == 0 goto label3;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $i1 = virtualinvoke r9.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        r10 = virtualinvoke $r6.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration(int)>($i1);

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.wm.ActivityRecord,boolean)>(r10, null, 0);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    void performSurfacePlacement()
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "performSurfacePlacement");

     label1:
        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void performSurfacePlacementNoTrace()>();

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void performSurfacePlacementNoTrace()
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i17, i18, i19, i20, i21, i22, i23, i25, i26, i27, i28;
        com.android.server.wm.WindowSurfacePlacer r1;
        com.android.server.wm.WindowManagerService $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r23, $r25, $r26, $r30, $r35, $r38, $r41, $r48, $r54, $r56, $r57, $r58, $r60, $r61, $r66, $r67, $r74, $r75, $r77, r79, $r85, $r95, $r97;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z18, z20, $z21, z22, $z23, $z24;
        com.android.server.wm.WindowList $r3, $r43, $r45, $r68, $r71;
        com.android.server.wm.WindowAnimator $r9;
        com.android.server.wm.Session $r13;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$-XbbIpkF4p2mF3v0qeXeat-_w3E' $r17;
        com.android.server.wm.ActivityTaskManagerService $r21;
        com.android.server.wm.TaskOrganizerController $r22;
        com.android.server.wm.WindowState[] $r24, $r27, $r36, $r37;
        java.util.ArrayList $r28, $r31, $r49, $r55, $r86, $r98, r102;
        java.lang.Object $r33, $r44, $r46, $r50, $r59, $r69, $r72;
        com.android.server.wm.DisplayContent $r34, $r47, $r73, r80, r84, r88, r89, r101;
        java.lang.Object[] $r39, $r63;
        com.android.server.wm.ProtoLogGroup $r40, $r64;
        android.os.PowerManagerInternal $r42;
        byte $b6, $b7;
        com.android.server.wm.WindowState $r51, r87, r100;
        com.android.server.wm.WallpaperController $r52, $r70;
        com.android.server.wm.WindowStateAnimator $r53;
        com.android.server.wm.WindowManagerService$H $r62;
        java.lang.Boolean $r65;
        java.lang.Throwable $r76;
        java.lang.RuntimeException $r78;
        com.android.server.wm.RecentsAnimationController r83;
        float f1;
        android.os.Handler $r90, $r92;
        android.os.Message $r91, $r94;
        long $l24;
        java.lang.Long $r93;
        java.util.HashMap $r96;
        java.util.function.Consumer r103;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = $r2.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange>;

        if $z0 == 0 goto label01;

        $r74 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r74.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 0;

        $r75 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r75.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

     label01:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i17 = 0;

     label02:
        if i17 >= i0 goto label03;

        $r71 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r72 = virtualinvoke $r71.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i17);

        $r73 = (com.android.server.wm.DisplayContent) $r72;

        virtualinvoke $r73.<com.android.server.wm.DisplayContent: void setExitingTokensHasVisible(boolean)>(0);

        i17 = i17 + 1;

        goto label02;

     label03:
        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Session mHoldScreen> = null;

        r0.<com.android.server.wm.RootWindowContainer: float mScreenBrightnessOverride> = #NaNF;

        r0.<com.android.server.wm.RootWindowContainer: long mUserActivityTimeout> = -1L;

        r0.<com.android.server.wm.RootWindowContainer: boolean mObscureApplicationContentOnSecondaryDisplays> = 0;

        r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeCurrent> = 0;

        r79 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $i1 = r79.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        $i2 = $i1 + 1;

        r79.<com.android.server.wm.WindowManagerService: int mTransactionSequence> = $i2;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        r80 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "applySurfaceChanges");

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService: void openSurfaceTransaction()>();

     label04:
        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void applySurfaceChangesTransaction()>();

     label05:
        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("performLayoutAndPlaceSurfaces");

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        goto label10;

     label06:
        $r76 := @caughtexception;

        goto label44;

     label07:
        $r78 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception in Window Manager", $r78);

     label09:
        goto label05;

     label10:
        $r8 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r9.<com.android.server.wm.WindowAnimator: void executeAfterPrepareSurfacesRunnables()>();

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void checkAppTransitionReady(com.android.server.wm.WindowSurfacePlacer)>(r1);

        $r10 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        r83 = virtualinvoke $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r83 == null goto label11;

        $r70 = r80.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke r83.<com.android.server.wm.RecentsAnimationController: void checkAnimationReady(com.android.server.wm.WallpaperController)>($r70);

     label11:
        i18 = 0;

     label12:
        if i18 >= i0 goto label14;

        $r68 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r69 = virtualinvoke $r68.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i18);

        r84 = (com.android.server.wm.DisplayContent) $r69;

        $z18 = r84.<com.android.server.wm.DisplayContent: boolean mWallpaperMayChange>;

        if $z18 == 0 goto label13;

        $i14 = r84.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i15 = $i14 | 4;

        r84.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i15;

     label13:
        i18 = i18 + 1;

        goto label12;

     label14:
        $r11 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z1 = $r11.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange>;

        if $z1 == 0 goto label15;

        $r66 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r66.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 0;

        $r67 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r67.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(2, 0);

     label15:
        $z2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean isLayoutNeeded()>();

        if $z2 == 0 goto label16;

        $i12 = r80.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i13 = $i12 | 1;

        r80.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i13;

     label16:
        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void handleResizingWindows()>();

        $r12 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z3 = $r12.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z3 == 0 goto label17;

        $z16 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z16 == 0 goto label17;

        z20 = r0.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete>;

        $r64 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r63 = newarray (java.lang.Object)[1];

        $r65 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z20);

        $r63[0] = $r65;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r64, -666510420, 3, null, $r63);

     label17:
        $z21 = r0.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete>;

        if $z21 == 0 goto label19;

        $r56 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $i11 = $r56.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        if $i11 == 0 goto label18;

        $r58 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r58.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen> = 0;

        $r60 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r59 = r0.<com.android.server.wm.RootWindowContainer: java.lang.Object mLastWindowFreezeSource>;

        $r60.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = $r59;

        $r61 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r62 = $r61.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r62.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(11);

     label18:
        $r57 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r57.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

     label19:
        $r85 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r86 = $r85.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        i19 = virtualinvoke $r86.<java.util.ArrayList: int size()>();

        if i19 <= 0 goto label23;

     label20:
        i20 = i19 - 1;

        $r48 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r49 = $r48.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $r50 = virtualinvoke $r49.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        r87 = (com.android.server.wm.WindowState) $r50;

        r87.<com.android.server.wm.WindowState: boolean mDestroying> = 0;

        r88 = virtualinvoke r87.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r51 = r88.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r51 != r87 goto label21;

        virtualinvoke r88.<com.android.server.wm.DisplayContent: void setInputMethodWindowLocked(com.android.server.wm.WindowState)>(null);

     label21:
        $r52 = r88.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $z15 = virtualinvoke $r52.<com.android.server.wm.WallpaperController: boolean isWallpaperTarget(com.android.server.wm.WindowState)>(r87);

        if $z15 == 0 goto label22;

        $i9 = r88.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i10 = $i9 | 4;

        r88.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i10;

     label22:
        virtualinvoke r87.<com.android.server.wm.WindowState: void destroySurfaceUnchecked()>();

        $r53 = r87.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r53.<com.android.server.wm.WindowStateAnimator: void destroyPreservedSurfaceLocked()>();

        i19 = i20;

        if i20 > 0 goto label20;

        $r54 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r55 = $r54.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r55.<java.util.ArrayList: void clear()>();

     label23:
        i21 = 0;

     label24:
        if i21 >= i0 goto label25;

        $r45 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r46 = virtualinvoke $r45.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i21);

        $r47 = (com.android.server.wm.DisplayContent) $r46;

        virtualinvoke $r47.<com.android.server.wm.DisplayContent: void removeExistingTokensIfPossible()>();

        i21 = i21 + 1;

        goto label24;

     label25:
        i22 = 0;

     label26:
        if i22 >= i0 goto label28;

        $r43 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r44 = virtualinvoke $r43.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i22);

        r89 = (com.android.server.wm.DisplayContent) $r44;

        $i8 = r89.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        if $i8 == 0 goto label27;

        virtualinvoke r89.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label27:
        i22 = i22 + 1;

        goto label26;

     label28:
        $r14 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r13 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.Session mHoldScreen>;

        virtualinvoke $r14.<com.android.server.wm.WindowManagerService: void setHoldScreenLocked(com.android.server.wm.Session)>($r13);

        $r15 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $z4 = $r15.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z4 != 0 goto label32;

        f1 = r0.<com.android.server.wm.RootWindowContainer: float mScreenBrightnessOverride>;

        $b6 = f1 cmpg 0.0F;

        if $b6 < 0 goto label30;

        $b7 = f1 cmpl 1.0F;

        if $b7 <= 0 goto label29;

        goto label30;

     label29:
        goto label31;

     label30:
        f1 = #NaNF;

     label31:
        i23 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        $r90 = r0.<com.android.server.wm.RootWindowContainer: android.os.Handler mHandler>;

        $r91 = virtualinvoke $r90.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i23, 0);

        virtualinvoke $r91.<android.os.Message: void sendToTarget()>();

        $r92 = r0.<com.android.server.wm.RootWindowContainer: android.os.Handler mHandler>;

        $l24 = r0.<com.android.server.wm.RootWindowContainer: long mUserActivityTimeout>;

        $r93 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l24);

        $r94 = virtualinvoke $r92.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, $r93);

        virtualinvoke $r94.<android.os.Message: void sendToTarget()>();

     label32:
        z22 = r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeCurrent>;

        $z23 = r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeEnabled>;

        if z22 == $z23 goto label33;

        r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeEnabled> = z22;

        $r41 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r42 = $r41.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $z14 = r0.<com.android.server.wm.RootWindowContainer: boolean mSustainedPerformanceModeEnabled>;

        i28 = (int) $z14;

        virtualinvoke $r42.<android.os.PowerManagerInternal: void powerHint(int,int)>(6, i28);

     label33:
        $z5 = r0.<com.android.server.wm.RootWindowContainer: boolean mUpdateRotation>;

        if $z5 == 0 goto label35;

        $z12 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z12 == 0 goto label34;

        $r40 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r39 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r40, -1103115659, 0, null, $r39);

     label34:
        $z13 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean updateRotationUnchecked()>();

        r0.<com.android.server.wm.RootWindowContainer: boolean mUpdateRotation> = $z13;

     label35:
        $r95 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r96 = $r95.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks>;

        $z24 = virtualinvoke $r96.<java.util.HashMap: boolean isEmpty()>();

        if $z24 == 0 goto label36;

        $z9 = r0.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete>;

        if $z9 == 0 goto label37;

        $z10 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean isLayoutNeeded()>();

        if $z10 != 0 goto label37;

        $z11 = r0.<com.android.server.wm.RootWindowContainer: boolean mUpdateRotation>;

        if $z11 != 0 goto label37;

     label36:
        $r16 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r16.<com.android.server.wm.WindowManagerService: void checkDrawnWindowsLocked()>();

     label37:
        $r97 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r98 = $r97.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        i25 = virtualinvoke $r98.<java.util.ArrayList: int size()>();

        if i25 <= 0 goto label43;

        $r23 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r24 = $r23.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp>;

        $i3 = lengthof $r24;

        if $i3 >= i25 goto label38;

        $r38 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $i5 = i25 + 10;

        $r37 = newarray (com.android.server.wm.WindowState)[$i5];

        $r38.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp> = $r37;

     label38:
        $r25 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r28 = $r25.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $r26 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r27 = $r26.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp>;

        virtualinvoke $r28.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r27);

        $r30 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r31 = $r30.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        virtualinvoke $r31.<java.util.ArrayList: void clear()>();

        r102 = new java.util.ArrayList;

        specialinvoke r102.<java.util.ArrayList: void <init>()>();

        i26 = 0;

     label39:
        if i26 >= i25 goto label41;

        $r35 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r36 = $r35.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp>;

        r100 = $r36[i26];

        virtualinvoke r100.<com.android.server.wm.WindowState: void removeImmediately()>();

        r101 = virtualinvoke r100.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r101 == null goto label40;

        $z7 = virtualinvoke r102.<java.util.ArrayList: boolean contains(java.lang.Object)>(r101);

        if $z7 != 0 goto label40;

        virtualinvoke r102.<java.util.ArrayList: boolean add(java.lang.Object)>(r101);

     label40:
        i26 = i26 + 1;

        goto label39;

     label41:
        $i4 = virtualinvoke r102.<java.util.ArrayList: int size()>();

        i27 = $i4 - 1;

     label42:
        if i27 < 0 goto label43;

        $r33 = virtualinvoke r102.<java.util.ArrayList: java.lang.Object get(int)>(i27);

        $r34 = (com.android.server.wm.DisplayContent) $r33;

        virtualinvoke $r34.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(1);

        i27 = i27 + -1;

        goto label42;

     label43:
        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean handleCompleteDeferredRemoval()>();

        $r17 = <com.android.server.wm._$$Lambda$RootWindowContainer$_XbbIpkF4p2mF3v0qeXeat__w3E: com.android.server.wm.'-$$Lambda$RootWindowContainer$-XbbIpkF4p2mF3v0qeXeat-_w3E' INSTANCE>;

        r103 = (java.util.function.Consumer) $r17;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r103);

        $r18 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r18.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

        $r19 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r19.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        $r20 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r21 = $r20.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r22 = $r21.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r22.<com.android.server.wm.TaskOrganizerController: void dispatchPendingTaskInfoChanges()>();

        return;

     label44:
        $r77 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r77.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("performLayoutAndPlaceSurfaces");

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r76;

        catch java.lang.RuntimeException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }

    void positionChildAt(int, com.android.server.wm.DisplayContent, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        boolean z0;
        com.android.server.wm.ActivityStackSupervisor $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.DisplayContent;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r1, z0);

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r2.<com.android.server.wm.ActivityStackSupervisor: void updateTopResumedActivityIfNeeded()>();

        return;
    }

    volatile void positionChildAt(int, com.android.server.wm.WindowContainer, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.WindowContainer r1;
        boolean z0;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.WindowContainer;

        z0 := @parameter2: boolean;

        $r2 = (com.android.server.wm.DisplayContent) r1;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void positionChildAt(int,com.android.server.wm.DisplayContent,boolean)>(i0, $r2, z0);

        return;
    }

    void prepareForShutdown()
    {
        com.android.server.wm.RootWindowContainer r0;
        int $i0, $i1, i2;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        if i2 >= $i0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        $r2 = (com.android.server.wm.DisplayContent) $r1;

        $i1 = $r2.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerInternal$SleepToken createSleepToken(java.lang.String,int)>("shutdown", $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    boolean putStacksToSleep(boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean z0, z1, $z2, z3;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.TaskDisplayArea r2;
        com.android.server.wm.ActivityStack r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        com.android.server.wm.WindowContainer $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z3 = 1;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label9;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i4);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i5 = $i1 - 1;

     label2:
        if i5 < 0 goto label8;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i5);

        $i2 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i6 = $i2 - 1;

     label3:
        if i6 < 0 goto label7;

        $i3 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        if i6 < $i3 goto label4;

        goto label6;

     label4:
        r3 = virtualinvoke r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i6);

        if z0 == 0 goto label5;

        $z2 = virtualinvoke r3.<com.android.server.wm.ActivityStack: boolean goToSleepIfPossible(boolean)>(z1);

        z3 = z3 & $z2;

        goto label6;

     label5:
        virtualinvoke r3.<com.android.server.wm.ActivityStack: void goToSleep()>();

     label6:
        i6 = i6 + -1;

        goto label3;

     label7:
        i5 = i5 + -1;

        goto label2;

     label8:
        i4 = i4 + -1;

        goto label1;

     label9:
        return z3;
    }

    void rankTaskLayersIfNeeded()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.internal.util.function.pooled.PooledConsumer r1;
        boolean $z0;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$SVJucJygDtyF-4eKB9wPXWaNBDM' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.util.function.BiConsumer r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $z0 = r0.<com.android.server.wm.RootWindowContainer: boolean mTaskLayersChanged>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.RootWindowContainer: boolean mTaskLayersChanged> = 0;

        r0.<com.android.server.wm.RootWindowContainer: int mTmpTaskLayerRank> = 0;

        $r2 = <com.android.server.wm._$$Lambda$RootWindowContainer$SVJucJygDtyF_4eKB9wPXWaNBDM: com.android.server.wm.'-$$Lambda$RootWindowContainer$SVJucJygDtyF-4eKB9wPXWaNBDM' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r4 = (java.util.function.BiConsumer) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r4, r0, $r3);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllActivities(java.util.function.Consumer)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    boolean reclaimSomeSurfaceMemory(com.android.server.wm.WindowStateAnimator, java.lang.String, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowSurfaceController r1;
        long l0;
        int i1, $i2, $i6, $i7, $i8, $i9, i10, i11, i12;
        boolean z0, $z1, $z2, z3, z4, z6, z7;
        com.android.server.wm.WindowState $r2, $r6, $r8, $r10, $r38;
        java.lang.String $r3, r28, r37;
        com.android.server.wm.Session $r4;
        com.android.server.wm.WindowList $r5, $r14, $r17;
        com.android.server.wm.ActivityRecord $r7, $r9;
        java.lang.Object[] $r11;
        com.android.server.wm.ProtoLogGroup $r12;
        android.util.SparseIntArray $r13;
        java.lang.Object $r15, $r18;
        com.android.server.wm.WindowManagerService $r16;
        com.android.server.wm.DisplayContent $r19, r30;
        java.lang.Throwable $r20, $r22, $r23, $r26, r34;
        android.os.RemoteException $r21, $r24, $r25;
        com.android.server.wm.WindowStateAnimator r27;
        com.android.server.wm._$$Lambda$RootWindowContainer$utugHDPHgMp2b3JwigOH__Y0P1Q r31;
        int[] r32;
        android.app.IActivityManager r33;
        android.view.IWindow $r39;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r27 := @parameter0: com.android.server.wm.WindowStateAnimator;

        r28 := @parameter1: java.lang.String;

        z3 := @parameter2: boolean;

        r1 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        z4 = 0;

        $r2 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowState: java.lang.String toString()>();

        $r4 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i2 = $r4.<com.android.server.wm.Session: int mPid>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmNoSurfaceMemory(java.lang.String,int,java.lang.String)>($r3, $i2, r28);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Out of memory for surface!  Looking for leaks...");

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i1 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

     label02:
        i10 = 0;

     label03:
        if i10 >= i1 goto label06;

     label04:
        $r17 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r18 = virtualinvoke $r17.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i10);

        $r19 = (com.android.server.wm.DisplayContent) $r18;

        $z2 = virtualinvoke $r19.<com.android.server.wm.DisplayContent: boolean destroyLeakedSurfaces()>();

        z4 = z4 | $z2;

     label05:
        i10 = i10 + 1;

        goto label03;

     label06:
        if z4 != 0 goto label25;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "No leaked surfaces; killing applications!");

        $r13 = new android.util.SparseIntArray;

        specialinvoke $r13.<android.util.SparseIntArray: void <init>()>();

     label08:
        z6 = 0;

        i11 = 0;

     label09:
        if i11 >= i1 goto label24;

     label10:
        $r14 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i11);

        r30 = (com.android.server.wm.DisplayContent) $r15;

        r31 = new com.android.server.wm._$$Lambda$RootWindowContainer$utugHDPHgMp2b3JwigOH__Y0P1Q;

        specialinvoke r31.<com.android.server.wm._$$Lambda$RootWindowContainer$utugHDPHgMp2b3JwigOH__Y0P1Q: void <init>(com.android.server.wm.RootWindowContainer,android.util.SparseIntArray)>(r0, $r13);

        virtualinvoke r30.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>(r31, 0);

        $i6 = virtualinvoke $r13.<android.util.SparseIntArray: int size()>();

        if $i6 <= 0 goto label21;

        $i7 = virtualinvoke $r13.<android.util.SparseIntArray: int size()>();

        r32 = newarray (int)[$i7];

     label11:
        i12 = 0;

     label12:
        $i8 = lengthof r32;

        if i12 >= $i8 goto label14;

        $i9 = virtualinvoke $r13.<android.util.SparseIntArray: int keyAt(int)>(i12);

        r32[i12] = $i9;

     label13:
        i12 = i12 + 1;

        goto label12;

     label14:
        $r16 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        r33 = $r16.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

     label15:
        z0 = interfaceinvoke r33.<android.app.IActivityManager: boolean killPids(int[],java.lang.String,boolean)>(r32, "Free memory", z3);

     label16:
        if z0 == 0 goto label17;

        z6 = 1;

     label17:
        goto label21;

     label18:
        $r23 := @caughtexception;

        r34 = $r23;

        goto label23;

     label19:
        $r25 := @caughtexception;

        goto label21;

     label20:
        $r24 := @caughtexception;

        goto label21;

     label21:
        i11 = i11 + 1;

        goto label09;

     label22:
        $r26 := @caughtexception;

        r34 = $r26;

     label23:
        goto label42;

     label24:
        goto label26;

     label25:
        z6 = 0;

     label26:
        if z4 != 0 goto label28;

        if z6 == 0 goto label27;

        goto label28;

     label27:
        goto label37;

     label28:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Looks like we have reclaimed some memory, clearing surface for retry.");

     label29:
        if r1 == null goto label34;

     label30:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_SURFACE_ALLOC_enabled>;

        if $z1 == 0 goto label32;

        $r10 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_SURFACE_ALLOC>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r37;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 399841913, 0, null, $r11);

     label31:
        goto label32;

     label32:
        virtualinvoke r27.<com.android.server.wm.WindowStateAnimator: void destroySurface()>();

        $r6 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r7 = $r6.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r7 == null goto label34;

        $r8 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r9 = $r8.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r9.<com.android.server.wm.ActivityRecord: void removeStartingWindow()>();

     label33:
        goto label34;

     label34:
        $r38 = r27.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r39 = $r38.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r39.<android.view.IWindow: void dispatchGetNewSurface()>();

     label35:
        goto label37;

     label36:
        $r21 := @caughtexception;

     label37:
        z7 = 0;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        if z4 != 0 goto label38;

        if z6 == 0 goto label39;

     label38:
        z7 = 1;

     label39:
        return z7;

     label40:
        $r22 := @caughtexception;

        r34 = $r22;

        goto label42;

     label41:
        $r20 := @caughtexception;

        r34 = $r20;

     label42:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r34;

        catch java.lang.Throwable from label01 to label02 with label41;
        catch java.lang.Throwable from label04 to label05 with label41;
        catch java.lang.Throwable from label07 to label08 with label41;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch android.os.RemoteException from label14 to label15 with label20;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch android.os.RemoteException from label15 to label16 with label19;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label28 to label29 with label40;
        catch java.lang.Throwable from label30 to label31 with label40;
        catch java.lang.Throwable from label32 to label33 with label40;
        catch android.os.RemoteException from label34 to label35 with label36;
        catch java.lang.Throwable from label34 to label35 with label40;
    }

    protected void removeChild(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        int $i0, $i1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeChild(com.android.server.wm.WindowContainer)>(r1);

        $i0 = r0.<com.android.server.wm.RootWindowContainer: int mTopFocusedDisplayId>;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i0 != $i1 goto label1;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

     label1:
        return;
    }

    protected volatile void removeChild(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        $r2 = (com.android.server.wm.DisplayContent) r1;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void removeChild(com.android.server.wm.DisplayContent)>($r2);

        return;
    }

    void removeReplacedWindows()
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowManagerService $r2, $r4, $r10;
        java.util.function.Consumer $r3;
        java.lang.Object[] $r5, $r7, $r11;
        com.android.server.wm.ProtoLogGroup $r6, $r8, $r12;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z0 == 0 goto label1;

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r7 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -1515151503, 0, null, $r7);

     label1:
        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void openSurfaceTransaction()>();

     label2:
        $r3 = <com.android.server.wm.RootWindowContainer: java.util.function.Consumer sRemoveReplacedWindowsConsumer>;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r3, 1);

     label3:
        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("removeReplacedWindows");

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z1 == 0 goto label4;

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r5 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 1423592961, 0, null, $r5);

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        $r10 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("removeReplacedWindows");

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z2 == 0 goto label6;

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r11 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 1423592961, 0, null, $r11);

     label6:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    transient void removeStacksInWindowingModes(int[])
    {
        com.android.server.wm.RootWindowContainer r0;
        int[] r1;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void removeStacksInWindowingModes(int[])>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    transient void removeStacksWithActivityTypes(int[])
    {
        com.android.server.wm.RootWindowContainer r0;
        int[] r1;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: int[];

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void removeStacksWithActivityTypes(int[])>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void removeUser(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseIntArray mUserStackInFront>;

        virtualinvoke $r1.<android.util.SparseIntArray: void delete(int)>(i0);

        return;
    }

    java.util.List resolveActivities(int, android.content.Intent)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        java.lang.String r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        android.content.pm.IPackageManager $r5;
        android.content.pm.ParceledListSlice $r6;
        android.os.RemoteException $r7;
        android.content.Intent r9;
        java.lang.Object r10;
        java.util.ArrayList r12;
        java.util.List r13;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r9 := @parameter1: android.content.Intent;

     label1:
        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r1 = virtualinvoke r9.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

        $r5 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r6 = interfaceinvoke $r5.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(r9, r1, 1024, i0);

        r10 = virtualinvoke $r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        r10 = r12;

     label4:
        r13 = (java.util.List) r10;

        return r13;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    int resolveActivityType(com.android.server.wm.ActivityRecord, android.app.ActivityOptions, com.android.server.wm.Task)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        android.app.ActivityOptions r2;
        com.android.server.wm.Task r3;
        int i0, i1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: android.app.ActivityOptions;

        r3 := @parameter2: com.android.server.wm.Task;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        goto label2;

     label1:
        i0 = 0;

     label2:
        i1 = i0;

        if i0 != 0 goto label3;

        i1 = i0;

        if r3 == null goto label3;

        i1 = virtualinvoke r3.<com.android.server.wm.Task: int getActivityType()>();

     label3:
        if i1 == 0 goto label4;

        return i1;

     label4:
        if r2 == null goto label5;

        i1 = virtualinvoke r2.<android.app.ActivityOptions: int getLaunchActivityType()>();

     label5:
        if i1 == 0 goto label6;

        goto label7;

     label6:
        i1 = 1;

     label7:
        return i1;
    }

    android.content.pm.ActivityInfo resolveHomeActivity(int, android.content.Intent)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.ActivityTaskManagerService $r1, $r7;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.content.pm.IPackageManager $r4, $r12;
        android.content.pm.ActivityInfo $r5, r16;
        android.content.pm.ApplicationInfo $r6, $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10, r17;
        java.lang.Throwable $r11;
        android.os.RemoteException $r13;
        android.content.Intent r14;
        android.content.ComponentName r15;
        android.content.pm.ResolveInfo r18;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r14 := @parameter1: android.content.Intent;

        r15 = virtualinvoke r14.<android.content.Intent: android.content.ComponentName getComponent()>();

        r16 = null;

        if r15 == null goto label3;

     label1:
        $r12 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r16 = interfaceinvoke $r12.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(r15, 1024, i0);

     label2:
        goto label6;

     label3:
        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r17 = virtualinvoke r14.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        $r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r18 = interfaceinvoke $r4.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>(r14, r17, 1024, i0);

     label4:
        if r18 == null goto label6;

     label5:
        r16 = r18.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

        r16 = null;

     label8:
        if r16 != null goto label9;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No home screen found for ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.Throwable;

        specialinvoke $r11.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r10, $r11);

        return null;

     label9:
        $r5 = new android.content.pm.ActivityInfo;

        specialinvoke $r5.<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>(r16);

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo,int)>($r6, i0);

        $r5.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r8;

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    android.util.Pair resolveSecondaryHomeActivity(int, com.android.server.wm.TaskDisplayArea)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1, i2;
        java.util.List r1;
        com.android.server.wm.TaskDisplayArea $r2, r18;
        java.lang.IllegalArgumentException $r3;
        com.android.server.wm.ActivityTaskManagerService $r4, $r6, $r12;
        android.util.Pair $r5;
        boolean $z0, $z1, $z2;
        java.lang.Class $r7;
        java.lang.String $r8, $r9, $r11, $r17, r24;
        android.content.pm.ApplicationInfo $r10;
        java.lang.Object $r13, $r15;
        android.content.pm.ResolveInfo $r14, r26;
        android.content.pm.ActivityInfo $r16, r20, r22, r25, r27, r28;
        android.content.Intent r19, r21, r23;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r18 := @parameter1: com.android.server.wm.TaskDisplayArea;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        if r18 == $r2 goto label8;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        r19 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: android.content.Intent getHomeIntent()>();

        r20 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: android.content.pm.ActivityInfo resolveHomeActivity(int,android.content.Intent)>(i0, r19);

        r21 = r19;

        r22 = r20;

        if r20 == null goto label5;

        $r7 = class "Lcom/android/internal/app/ResolverActivity;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = r20.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label1;

        r22 = null;

        r21 = r19;

        goto label5;

     label1:
        $r12 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r10 = r20.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = $r10.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        r23 = virtualinvoke $r12.<com.android.server.wm.ActivityTaskManagerService: android.content.Intent getSecondaryHomeIntent(java.lang.String)>($r11);

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: java.util.List resolveActivities(int,android.content.Intent)>(i0, r23);

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        r24 = r20.<android.content.pm.ActivityInfo: java.lang.String name>;

        i2 = 0;

     label2:
        r25 = null;

        if i2 >= i1 goto label4;

        $r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r26 = (android.content.pm.ResolveInfo) $r15;

        $r16 = r26.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r17 = $r16.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r24);

        if $z2 == 0 goto label3;

        r25 = r26.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        r21 = r23;

        r22 = r25;

        if r25 != null goto label5;

        r21 = r23;

        r22 = r25;

        if i1 <= 0 goto label5;

        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (android.content.pm.ResolveInfo) $r13;

        r22 = $r14.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r21 = r23;

     label5:
        r27 = r22;

        if r22 == null goto label6;

        r27 = r22;

        $z0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean canStartHomeOnDisplayArea(android.content.pm.ActivityInfo,com.android.server.wm.TaskDisplayArea,boolean)>(r22, r18, 0);

        if $z0 != 0 goto label6;

        r27 = null;

     label6:
        r28 = r27;

        if r27 != null goto label7;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        r21 = virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: android.content.Intent getSecondaryHomeIntent(java.lang.String)>(null);

        r28 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: android.content.pm.ActivityInfo resolveHomeActivity(int,android.content.Intent)>(i0, r21);

     label7:
        $r5 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r28, r21);

        return $r5;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("resolveSecondaryHomeActivity: Should not be default task container");

        throw $r3;
    }

    boolean resumeFocusedStacksTopActivities()
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $z0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(null, null, null);

        return $z0;
    }

    boolean resumeFocusedStacksTopActivities(com.android.server.wm.ActivityStack, com.android.server.wm.ActivityRecord, android.app.ActivityOptions)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityStack r1, r5, $r11, r13;
        com.android.server.wm.ActivityRecord r2, r6;
        android.app.ActivityOptions r3;
        com.android.server.wm.DisplayContent r4;
        com.android.server.wm.ActivityStackSupervisor $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z9, z10, z11, z12, z13;
        com.android.server.wm.WindowContainer $r8;
        int $i0, $i1, $i2, i3, i4, i5;
        com.android.server.wm.TaskDisplayArea $r9, r12;
        com.android.server.wm.ActivityStack$ActivityState $r10;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        r3 := @parameter2: android.app.ActivityOptions;

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z0 = virtualinvoke $r7.<com.android.server.wm.ActivityStackSupervisor: boolean readyToResume()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        z9 = 0;

        if r1 == null goto label03;

        $z7 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean isTopStackInDisplayArea()>();

        if $z7 != 0 goto label02;

        z9 = 0;

        $r11 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if $r11 != r1 goto label03;

     label02:
        z9 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean resumeTopActivityUncheckedLocked(com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r2, r3);

     label03:
        $i2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i2 - 1;

        z10 = z9;

     label04:
        if i3 < 0 goto label15;

        z11 = 0;

        $r8 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r4 = (com.android.server.wm.DisplayContent) $r8;

        $i0 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i0 - 1;

     label05:
        if i4 < 0 goto label12;

        r12 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $i1 = virtualinvoke r12.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i5 = $i1 - 1;

     label06:
        if i5 < 0 goto label11;

        r5 = virtualinvoke r12.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i5);

        r6 = virtualinvoke r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        z12 = z11;

        $z3 = virtualinvoke r5.<com.android.server.wm.ActivityStack: boolean isFocusableAndVisible()>();

        if $z3 == 0 goto label10;

        if r6 != null goto label07;

        z12 = z11;

        goto label10;

     label07:
        if r5 != r1 goto label08;

        z12 = z11 | z10;

        goto label10;

     label08:
        $z4 = virtualinvoke r12.<com.android.server.wm.TaskDisplayArea: boolean isTopStack(com.android.server.wm.ActivityStack)>(r5);

        if $z4 == 0 goto label09;

        $r10 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z6 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r10);

        if $z6 == 0 goto label09;

        virtualinvoke r5.<com.android.server.wm.ActivityStack: void executeAppTransition(android.app.ActivityOptions)>(r3);

        z12 = z11;

        goto label10;

     label09:
        $z5 = virtualinvoke r6.<com.android.server.wm.ActivityRecord: boolean makeActiveIfNeeded(com.android.server.wm.ActivityRecord)>(r2);

        z12 = z11 | $z5;

     label10:
        i5 = i5 + -1;

        z11 = z12;

        goto label06;

     label11:
        i4 = i4 + -1;

        goto label05;

     label12:
        z13 = z10;

        if z11 != 0 goto label14;

        r13 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityStack getFocusedStack()>();

        if r13 == null goto label13;

        $z2 = virtualinvoke r13.<com.android.server.wm.ActivityStack: boolean resumeTopActivityUncheckedLocked(com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>(r2, r3);

        z13 = z10 | $z2;

        goto label14;

     label13:
        z13 = z10;

        if r1 != null goto label14;

        $r9 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean resumeHomeActivity(com.android.server.wm.ActivityRecord,java.lang.String,com.android.server.wm.TaskDisplayArea)>(null, "no-focusable-task", $r9);

        z13 = z10 | $z1;

     label14:
        i3 = i3 + -1;

        z10 = z13;

        goto label04;

     label15:
        return z10;
    }

    boolean resumeHomeActivity(com.android.server.wm.ActivityRecord, java.lang.String, com.android.server.wm.TaskDisplayArea)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1, r12;
        com.android.server.wm.ActivityTaskManagerService $r3, $r8;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.lang.StringBuilder $r4;
        int $i0;
        com.android.server.wm.ActivityStack $r7;
        java.lang.String r9, r13;
        com.android.server.wm.TaskDisplayArea r10, r11;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: com.android.server.wm.TaskDisplayArea;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: boolean isBooting()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $z5 = virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: boolean isBooted()>();

        if $z5 != 0 goto label1;

        return 0;

     label1:
        r11 = r10;

        if r10 != null goto label2;

        r11 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

     label2:
        r12 = virtualinvoke r11.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getHomeActivity()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resumeHomeActivity");

        r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        if r12 == null goto label3;

        $z2 = r12.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 != 0 goto label3;

        virtualinvoke r12.<com.android.server.wm.ActivityRecord: boolean moveFocusableActivityToTop(java.lang.String)>(r13);

        $r7 = virtualinvoke r12.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getRootTask()>();

        $z4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities(com.android.server.wm.ActivityStack,com.android.server.wm.ActivityRecord,android.app.ActivityOptions)>($r7, r1, null);

        return $z4;

     label3:
        $i0 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        $z1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startHomeOnTaskDisplayArea(int,java.lang.String,com.android.server.wm.TaskDisplayArea,boolean,boolean)>($i0, r13, r11, 0, 0);

        return $z1;
    }

    void scheduleAnimation()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        return;
    }

    void scheduleDestroyAllActivities(java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        java.lang.Runnable $r3;
        com.android.server.wm.ActivityTaskManagerService$H $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.server.wm.RootWindowContainer: java.lang.String mDestroyAllActivitiesReason> = r1;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$H mH>;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: java.lang.Runnable mDestroyAllActivitiesRunnable>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService$H: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    void sendPowerHintForLaunchEndIfNeeded()
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r1, $r3;
        android.os.PowerManagerInternal $r2, $r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $z0 = r0.<com.android.server.wm.RootWindowContainer: boolean mPowerHintSent>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        virtualinvoke $r4.<android.os.PowerManagerInternal: void powerHint(int,int)>(8, 0);

        r0.<com.android.server.wm.RootWindowContainer: boolean mPowerHintSent> = 0;

     label1:
        return;
    }

    void sendPowerHintForLaunchStartIfNeeded(boolean, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1, r11;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r5;
        android.os.PowerManagerInternal $r4, $r6;
        int $i0, $i1, i2, i3;
        com.android.server.wm.WindowContainer $r7;
        com.android.server.wm.TaskDisplayArea $r8;
        com.android.server.wm.WindowProcessController $r9, $r10, r12;
        boolean $z1, $z2, z3, z5, z6, z7, z8, z9, z10, z11;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        z3 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        z5 = z3;

        if z3 != 0 goto label03;

        if r1 == null goto label02;

        $r10 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r10 != null goto label01;

        goto label02;

     label01:
        z5 = 0;

        goto label03;

     label02:
        z5 = 1;

     label03:
        z6 = z5;

        if z5 != 0 goto label15;

        z7 = 1;

        z8 = 1;

        i2 = 0;

     label04:
        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        if i2 >= $i0 goto label12;

        $r7 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r2 = (com.android.server.wm.DisplayContent) $r7;

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i3 = $i1 - 1;

     label05:
        if i3 < 0 goto label11;

        $r8 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i3);

        r11 = virtualinvoke $r8.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord getFocusedActivity()>();

        if r11 != null goto label06;

        r12 = null;

        goto label07;

     label06:
        r12 = r11.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

     label07:
        if r12 != null goto label08;

        z9 = 1;

        goto label09;

     label08:
        z9 = 0;

     label09:
        z7 = z7 & z9;

        z10 = z8;

        if r12 == null goto label10;

        $r9 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $z1 = virtualinvoke r12.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        $z2 = $z1 ^ 1;

        z10 = z8 & $z2;

     label10:
        i3 = i3 + -1;

        z8 = z10;

        goto label05;

     label11:
        i2 = i2 + 1;

        goto label04;

     label12:
        if z7 != 0 goto label13;

        z11 = 0;

        if z8 == 0 goto label14;

     label13:
        z11 = 1;

     label14:
        z6 = z11;

     label15:
        if z6 == 0 goto label16;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        if $r4 == null goto label16;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        virtualinvoke $r6.<android.os.PowerManagerInternal: void powerHint(int,int)>(8, 1);

        r0.<com.android.server.wm.RootWindowContainer: boolean mPowerHintSent> = 1;

     label16:
        return;
    }

    void setDisplayOverrideConfiguration(android.content.res.Configuration, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        android.content.res.Configuration r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r7 := @parameter0: android.content.res.Configuration;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>(r7);

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No display found with id: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    void setDisplayOverrideConfigurationIfNeeded(android.content.res.Configuration, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.content.res.Configuration r1, $r3;
        com.android.server.wm.DisplayContent r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: com.android.server.wm.DisplayContent;

        $r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $i0 = virtualinvoke $r3.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r1);

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 != 0 goto label3;

        return;

     label3:
        virtualinvoke r2.<com.android.server.wm.DisplayContent: void onRequestedOverrideConfigurationChanged(android.content.res.Configuration)>(r1);

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i1 != 0 goto label4;

        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void setGlobalConfigurationIfNeeded(android.content.res.Configuration)>(r1);

     label4:
        return;
    }

    void setSecureSurfaceState(int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0;
        com.android.server.wm._$$Lambda$RootWindowContainer$PVkFhpirHJygWitQFpVhFHaEX4o $r1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        $r1 = new com.android.server.wm._$$Lambda$RootWindowContainer$PVkFhpirHJygWitQFpVhFHaEX4o;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$RootWindowContainer$PVkFhpirHJygWitQFpVhFHaEX4o: void <init>(int)>(i0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r1, 1);

        return;
    }

    void setWindowManager(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityTaskManagerService $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4, $r7;
        com.android.server.wm.ActivityTaskManagerService$UiHandler $r6;
        android.hardware.display.DisplayManagerInternal $r8;
        android.hardware.display.DisplayManager $r9, r15;
        int $i0, $i1, i2;
        com.android.server.wm.DisplayContent $r11, $r12;
        android.view.Display $r13;
        com.android.server.wm.WindowManagerService r14;
        android.view.Display[] r16;
        com.android.server.wm.TaskDisplayArea r17;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r14 := @parameter0: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWindowManager> = r14;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        r15 = (android.hardware.display.DisplayManager) $r4;

        r0.<com.android.server.wm.RootWindowContainer: android.hardware.display.DisplayManager mDisplayManager> = r15;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$UiHandler mUiHandler>;

        virtualinvoke r15.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>(r0, $r6);

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r8 = (android.hardware.display.DisplayManagerInternal) $r7;

        r0.<com.android.server.wm.RootWindowContainer: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal> = $r8;

        $r9 = r0.<com.android.server.wm.RootWindowContainer: android.hardware.display.DisplayManager mDisplayManager>;

        r16 = virtualinvoke $r9.<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>();

        i2 = 0;

     label1:
        $i0 = lengthof r16;

        if i2 >= $i0 goto label3;

        $r12 = new com.android.server.wm.DisplayContent;

        $r13 = r16[i2];

        specialinvoke $r12.<com.android.server.wm.DisplayContent: void <init>(android.view.Display,com.android.server.wm.RootWindowContainer)>($r13, r0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void addChild(com.android.server.wm.WindowContainer,int)>($r12, -2147483648);

        $i1 = $r12.<com.android.server.wm.DisplayContent: int mDisplayId>;

        if $i1 != 0 goto label2;

        r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent mDefaultDisplay> = $r12;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        specialinvoke r0.<com.android.server.wm.RootWindowContainer: void calculateDefaultMinimalSizeOfResizeableTasks()>();

        r17 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke r17.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getOrCreateRootHomeTask(boolean)>(1);

        $r11 = r17.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void positionChildAt(int,com.android.server.wm.DisplayContent,boolean)>(2147483647, $r11, 0);

        return;
    }

    boolean shouldPlaceSecondaryHomeOnDisplayArea(com.android.server.wm.TaskDisplayArea)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.TaskDisplayArea $r1, r7;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;
        com.android.server.wm.ActivityTaskManagerService $r3, $r6;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        boolean $z0, $z1, $z2, $z3, z4;
        com.android.server.wm.DisplayContent r8;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r7 := @parameter0: com.android.server.wm.TaskDisplayArea;

        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        if $r1 == r7 goto label9;

        if r7 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r7.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        if $i0 == 0 goto label2;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $z3 = $r6.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiDisplay>;

        if $z3 != 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r4 = $r3.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "device_provisioned", 0);

        if $i1 == 0 goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        if z4 != 0 goto label5;

        return 0;

     label5:
        $i2 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isUserKeyUnlocked(int)>($i2);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        r8 = virtualinvoke r7.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r8 == null goto label8;

        $z1 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean isRemoved()>();

        if $z1 != 0 goto label8;

        $z2 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean supportsSystemDecorations()>();

        if $z2 != 0 goto label7;

        goto label8;

     label7:
        return 1;

     label8:
        return 0;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("shouldPlaceSecondaryHomeOnDisplay: Should not be on default task container");

        throw $r2;
    }

    boolean startHomeOnAllDisplays(int, java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2, i3;
        java.lang.String r1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z1 = 0;

        $i1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i1 - 1;

     label1:
        if i3 < 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        $i2 = $r3.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $z0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startHomeOnDisplay(int,java.lang.String,int)>(i0, r1, $i2);

        z1 = z1 | $z0;

        i3 = i3 + -1;

        goto label1;

     label2:
        return z1;
    }

    boolean startHomeOnDisplay(int, java.lang.String, int)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startHomeOnDisplay(int,java.lang.String,int,boolean,boolean)>(i0, r1, i1, 0, 0);

        return $z0;
    }

    boolean startHomeOnDisplay(int, java.lang.String, int, boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, i1, i2, i3, $i4, i5;
        java.lang.String r1;
        boolean z0, z1, $z2, z3;
        com.android.server.wm.TaskDisplayArea $r2;
        com.android.server.wm.ActivityStack r3;
        com.android.server.wm.DisplayContent r4;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i2 = i1;

        if i1 != -1 goto label3;

        r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r3 == null goto label1;

        i3 = virtualinvoke r3.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        goto label2;

     label1:
        i3 = 0;

     label2:
        i2 = i3;

     label3:
        r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i2);

        z3 = 0;

        $i4 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i5 = $i4 - 1;

     label4:
        if i5 < 0 goto label5;

        $r2 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i5);

        $z2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startHomeOnTaskDisplayArea(int,java.lang.String,com.android.server.wm.TaskDisplayArea,boolean,boolean)>(i0, r1, $r2, z0, z1);

        z3 = z3 | $z2;

        i5 = i5 + -1;

        goto label4;

     label5:
        return z3;
    }

    void startHomeOnEmptyDisplays(java.lang.String)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.TaskDisplayArea r3;
        int $i0, $i1, $i2, i3, i4;
        com.android.server.wm.WindowContainer $r4;
        com.android.server.wm.ActivityRecord $r5;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label5;

        $r4 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r2 = (com.android.server.wm.DisplayContent) $r4;

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i4 = $i1 - 1;

     label2:
        if i4 < 0 goto label4;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i4);

        $r5 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r5 != null goto label3;

        $i2 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean startHomeOnTaskDisplayArea(int,java.lang.String,com.android.server.wm.TaskDisplayArea,boolean,boolean)>($i2, r1, r3, 0, 0);

     label3:
        i4 = i4 + -1;

        goto label2;

     label4:
        i3 = i3 + -1;

        goto label1;

     label5:
        return;
    }

    boolean startHomeOnTaskDisplayArea(int, java.lang.String, com.android.server.wm.TaskDisplayArea, boolean, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, z1, $z2, $z3;
        android.content.ComponentName $r2;
        android.content.pm.ApplicationInfo $r3, $r13;
        java.lang.String $r4, $r5, r24, r33;
        java.lang.StringBuilder $r8;
        com.android.server.wm.ActivityTaskManagerService $r17, $r23;
        com.android.server.wm.ActivityStartController $r18;
        com.android.server.wm.WindowManagerService $r20;
        java.lang.Object $r21, $r22;
        com.android.server.wm.TaskDisplayArea r25, r26, r28, $r31;
        com.android.server.wm.ActivityStack r27;
        android.content.Intent r29;
        android.content.pm.ActivityInfo r30;
        android.util.Pair r32;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r24 := @parameter1: java.lang.String;

        r25 := @parameter2: com.android.server.wm.TaskDisplayArea;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r26 = r25;

        if r25 != null goto label3;

        r27 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r27 == null goto label1;

        r28 = virtualinvoke r27.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        goto label2;

     label1:
        r28 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

     label2:
        r26 = r28;

     label3:
        r29 = null;

        r30 = null;

        $r31 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        if r26 != $r31 goto label4;

        $r23 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        r29 = virtualinvoke $r23.<com.android.server.wm.ActivityTaskManagerService: android.content.Intent getHomeIntent()>();

        r30 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: android.content.pm.ActivityInfo resolveHomeActivity(int,android.content.Intent)>(i0, r29);

        goto label5;

     label4:
        $z2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean shouldPlaceSecondaryHomeOnDisplayArea(com.android.server.wm.TaskDisplayArea)>(r26);

        if $z2 == 0 goto label5;

        r32 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: android.util.Pair resolveSecondaryHomeActivity(int,com.android.server.wm.TaskDisplayArea)>(i0, r26);

        $r21 = r32.<android.util.Pair: java.lang.Object first>;

        r30 = (android.content.pm.ActivityInfo) $r21;

        $r22 = r32.<android.util.Pair: java.lang.Object second>;

        r29 = (android.content.Intent) $r22;

     label5:
        if r30 == null goto label9;

        if r29 != null goto label6;

        goto label9;

     label6:
        $z3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean canStartHomeOnDisplayArea(android.content.pm.ActivityInfo,com.android.server.wm.TaskDisplayArea,boolean)>(r30, r26, z0);

        if $z3 != 0 goto label7;

        return 0;

     label7:
        $r2 = new android.content.ComponentName;

        $r3 = r30.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = $r3.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r4 = r30.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r2.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r5, $r4);

        virtualinvoke r29.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r2);

        $i1 = virtualinvoke r29.<android.content.Intent: int getFlags()>();

        $i2 = $i1 | 268435456;

        virtualinvoke r29.<android.content.Intent: android.content.Intent setFlags(int)>($i2);

        if z1 == 0 goto label8;

        virtualinvoke r29.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.intent.extra.FROM_HOME_KEY", 1);

        $r20 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWindowManager>;

        virtualinvoke $r20.<com.android.server.wm.WindowManagerService: void cancelRecentsAnimation(int,java.lang.String)>(0, "startHomeActivity");

     label8:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r13 = r30.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r13.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i5 = virtualinvoke r26.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        r33 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r18 = virtualinvoke $r17.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStartController getActivityStartController()>();

        virtualinvoke $r18.<com.android.server.wm.ActivityStartController: void startHomeActivity(android.content.Intent,android.content.pm.ActivityInfo,java.lang.String,com.android.server.wm.TaskDisplayArea)>(r29, r30, r33, r26);

        return 1;

     label9:
        return 0;
    }

    boolean switchUser(int, com.android.server.am.UserState)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;
        boolean z0, $z1, $z3;
        com.android.server.wm.TaskDisplayArea $r1, $r7, $r8, $r11, r15;
        int[] $r2;
        android.util.SparseIntArray $r3, $r6;
        com.android.server.wm.ActivityStackSupervisor $r4;
        java.util.ArrayList $r5;
        com.android.server.wm.WindowContainer $r9;
        com.android.server.wm.ActivityStack $r10, r13, r16, r17;
        com.android.server.am.UserState r12;
        com.android.server.wm.DisplayContent r14;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r12 := @parameter1: com.android.server.am.UserState;

        r13 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getTopDisplayFocusedStack()>();

        if r13 == null goto label01;

        i6 = virtualinvoke r13.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        goto label02;

     label01:
        i6 = -1;

     label02:
        $r1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $z1 = virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: boolean isSplitScreenModeActivated()>();

        if $z1 == 0 goto label03;

        $r11 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke $r11.<com.android.server.wm.TaskDisplayArea: void onSplitScreenModeDismissed()>();

     label03:
        $r2 = newarray (int)[1];

        $r2[0] = 2;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void removeStacksInWindowingModes(int[])>($r2);

        $r3 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseIntArray mUserStackInFront>;

        $i1 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>($i1, i6);

        r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser> = i0;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r5 = $r4.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mStartingUsers>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

        $i2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i7 = $i2 - 1;

     label04:
        if i7 < 0 goto label09;

        $r9 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i7);

        r14 = (com.android.server.wm.DisplayContent) $r9;

        $i4 = virtualinvoke r14.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i8 = $i4 - 1;

     label05:
        if i8 < 0 goto label08;

        r15 = virtualinvoke r14.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i8);

        $i5 = virtualinvoke r15.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i9 = $i5 - 1;

     label06:
        if i9 < 0 goto label07;

        $r10 = virtualinvoke r15.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i9);

        virtualinvoke $r10.<com.android.server.wm.ActivityStack: void switchUser(int)>(i0);

        i9 = i9 + -1;

        goto label06;

     label07:
        i8 = i8 + -1;

        goto label05;

     label08:
        i7 = i7 + -1;

        goto label04;

     label09:
        $r6 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseIntArray mUserStackInFront>;

        $i3 = virtualinvoke $r6.<android.util.SparseIntArray: int get(int)>(i0);

        r16 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int)>($i3);

        r17 = r16;

        if r16 != null goto label10;

        $r8 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r17 = virtualinvoke $r8.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getOrCreateRootHomeTask()>();

     label10:
        z0 = virtualinvoke r17.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        $z3 = virtualinvoke r17.<com.android.server.wm.ActivityStack: boolean isOnHomeDisplay()>();

        if $z3 == 0 goto label11;

        virtualinvoke r17.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>("switchUserOnHomeDisplay");

        goto label12;

     label11:
        $r7 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean resumeHomeActivity(com.android.server.wm.ActivityRecord,java.lang.String,com.android.server.wm.TaskDisplayArea)>(null, "switchUserOnOtherDisplay", $r7);

     label12:
        return z0;
    }

    com.android.server.wm.ActivityRecord topRunningActivity()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r3 = (com.android.server.wm.DisplayContent) $r2;

        r1 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r1 == null goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    void updateActivityApplicationInfo(android.content.pm.ApplicationInfo)
    {
        com.android.server.wm.RootWindowContainer r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$fL0RxmEBMlnXFmjHLkBJ9jk9drs' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        android.content.pm.ApplicationInfo r5;
        com.android.internal.util.function.pooled.PooledConsumer r6;
        com.android.internal.util.function.QuadConsumer r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r5 := @parameter0: android.content.pm.ApplicationInfo;

        r1 = r5.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i1 = r5.<android.content.pm.ApplicationInfo: int uid>;

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        $r2 = <com.android.server.wm._$$Lambda$RootWindowContainer$fL0RxmEBMlnXFmjHLkBJ9jk9drs: com.android.server.wm.'-$$Lambda$RootWindowContainer$fL0RxmEBMlnXFmjHLkBJ9jk9drs' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r7 = (com.android.internal.util.function.QuadConsumer) $r2;

        r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.QuadConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object,java.lang.Object)>(r7, $r3, r5, $r4, r1);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllActivities(java.util.function.Consumer)>(r6);

        interfaceinvoke r6.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    void updateAppOpsState()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.'-$$Lambda$RootWindowContainer$0aCEx04eIvMHmZVtI4ucsiK5s9I' $r1;
        java.util.function.Consumer r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r1 = <com.android.server.wm._$$Lambda$RootWindowContainer$0aCEx04eIvMHmZVtI4ucsiK5s9I: com.android.server.wm.'-$$Lambda$RootWindowContainer$0aCEx04eIvMHmZVtI4ucsiK5s9I' INSTANCE>;

        r2 = (java.util.function.Consumer) $r1;

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>(r2, 0);

        return;
    }

    boolean updateFocusedWindowLocked(int, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        boolean z0, $z1, $z2, z3;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowState r2;
        long l0;
        java.util.HashMap $r3, $r16, $r19;
        com.android.server.wm.WindowList $r4, $r12;
        int $i1, $i2, i3, i4, i5, i6, i7, i8;
        com.android.server.wm.WindowManagerService $r5, $r7;
        com.android.server.input.InputManagerService $r6;
        com.android.server.policy.WindowManagerPolicy $r8;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        java.lang.Long $r11;
        java.lang.Object $r13, $r18;
        com.android.server.wm.ActivityRecord $r14, $r21;
        com.android.server.wm.Session $r15;
        java.lang.Integer $r17, $r20;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: java.util.HashMap mTopFocusedAppByProcess>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        z3 = 0;

        i4 = -1;

        $r4 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i1 = virtualinvoke $r4.<com.android.server.wm.WindowList: int size()>();

        i5 = $i1 - 1;

     label1:
        if i5 < 0 goto label6;

        $r12 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        r1 = (com.android.server.wm.DisplayContent) $r13;

        $z2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean updateFocusedWindowLocked(int,boolean,int)>(i3, z0, i4);

        z3 = z3 | $z2;

        r2 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if r2 == null goto label4;

        $r15 = r2.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        i6 = $r15.<com.android.server.wm.Session: int mPid>;

        $r16 = r0.<com.android.server.wm.RootWindowContainer: java.util.HashMap mTopFocusedAppByProcess>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r18 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        if $r18 != null goto label2;

        $r19 = r0.<com.android.server.wm.RootWindowContainer: java.util.HashMap mTopFocusedAppByProcess>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r21 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

     label2:
        i7 = i4;

        if i4 != -1 goto label3;

        i7 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

     label3:
        i4 = i7;

        goto label5;

     label4:
        i7 = i4;

        if i4 != -1 goto label3;

        i7 = i4;

        $r14 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if $r14 == null goto label3;

        i4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

     label5:
        i5 = i5 + -1;

        goto label1;

     label6:
        i8 = i4;

        if i4 != -1 goto label7;

        i8 = 0;

     label7:
        $i2 = r0.<com.android.server.wm.RootWindowContainer: int mTopFocusedDisplayId>;

        if $i2 == i8 goto label8;

        r0.<com.android.server.wm.RootWindowContainer: int mTopFocusedDisplayId> = i8;

        $r5 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r6.<com.android.server.input.InputManagerService: void setFocusedDisplay(int)>(i8);

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r8.<com.android.server.policy.WindowManagerPolicy: void setTopFocusedDisplay(int)>(i8);

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z1 == 0 goto label8;

        l0 = (long) i8;

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r9[0] = $r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, -687185281, 1, null, $r9);

     label8:
        return z3;
    }

    void updateHiddenWhileSuspendedState(android.util.ArraySet, boolean)
    {
        com.android.server.wm.RootWindowContainer r0;
        android.util.ArraySet r1;
        boolean z0;
        com.android.server.wm._$$Lambda$RootWindowContainer$9Gi6QLDM5W_SF_EH_zfgZZvIlo0 $r2;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: android.util.ArraySet;

        z0 := @parameter1: boolean;

        $r2 = new com.android.server.wm._$$Lambda$RootWindowContainer$9Gi6QLDM5W_SF_EH_zfgZZvIlo0;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$RootWindowContainer$9Gi6QLDM5W_SF_EH_zfgZZvIlo0: void <init>(android.util.ArraySet,boolean)>(r1, z0);

        virtualinvoke r0.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r2, 0);

        return;
    }

    void updatePreviousProcess(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.ActivityRecord r1, $r14, $r15, r18;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.TaskDisplayArea r3;
        com.android.server.wm.ActivityStack r4;
        int $i0, $i5, $i6, i7, i8, i9;
        boolean $z0, $z1;
        com.android.server.wm.WindowProcessController $r5, $r8, $r9, $r10, r16, r17;
        com.android.server.wm.ActivityTaskManagerService $r6, $r7, $r11, $r12;
        long $l1, $l2, $l4;
        byte $b3;
        com.android.server.wm.WindowContainer $r13;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r16 = null;

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i7 = $i0 - 1;

     label1:
        if i7 < 0 goto label8;

        $r13 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i7);

        r2 = (com.android.server.wm.DisplayContent) $r13;

        $i5 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i8 = $i5 - 1;

     label2:
        if i8 < 0 goto label7;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i8);

        $i6 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i9 = $i6 - 1;

     label3:
        r17 = r16;

        if i9 < 0 goto label6;

        r4 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i9);

        $z1 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: boolean isTopDisplayFocusedStack(com.android.server.wm.ActivityStack)>(r4);

        if $z1 == 0 goto label5;

        r18 = virtualinvoke r4.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        if r18 == null goto label4;

        r17 = r18.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        goto label6;

     label4:
        r17 = r16;

        $r14 = r4.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        if $r14 == null goto label6;

        $r15 = r4.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

        r17 = $r15.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        goto label6;

     label5:
        i9 = i9 + -1;

        goto label3;

     label6:
        i8 = i8 + -1;

        r16 = r17;

        goto label2;

     label7:
        i7 = i7 + -1;

        goto label1;

     label8:
        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean hasProcess()>();

        if $z0 == 0 goto label9;

        if r16 == null goto label9;

        $r5 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        if $r5 == r16 goto label9;

        $l2 = r1.<com.android.server.wm.ActivityRecord: long lastVisibleTime>;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $l1 = $r6.<com.android.server.wm.ActivityTaskManagerService: long mPreviousProcessVisibleTime>;

        $b3 = $l2 cmp $l1;

        if $b3 <= 0 goto label9;

        $r9 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r7 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r8 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mHomeProcess>;

        if $r9 == $r8 goto label9;

        $r11 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $r10 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowProcessController app>;

        $r11.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController mPreviousProcess> = $r10;

        $r12 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerService mService>;

        $l4 = r1.<com.android.server.wm.ActivityRecord: long lastVisibleTime>;

        $r12.<com.android.server.wm.ActivityTaskManagerService: long mPreviousProcessVisibleTime> = $l4;

     label9:
        return;
    }

    boolean updateRotationUnchecked()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.DisplayRotation $r5;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        z1 = 0;

        $r1 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.DisplayContent) $r3;

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        $z0 = virtualinvoke $r5.<com.android.server.wm.DisplayRotation: boolean updateRotationAndSendNewConfigIfChanged()>();

        if $z0 == 0 goto label2;

        z1 = 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return z1;
    }

    void updateUIDsPresentOnDisplay()
    {
        com.android.server.wm.RootWindowContainer r0;
        com.android.server.wm.DisplayContent r1;
        android.util.SparseArray $r2, $r3, $r6;
        int $i0, $i1, i2;
        android.hardware.display.DisplayManagerInternal $r4;
        com.android.server.wm.WindowContainer $r5;
        boolean $z0;
        android.util.IntArray $r7;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        $r2 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseArray mDisplayAccessUIDs>;

        virtualinvoke $r2.<android.util.SparseArray: void clear()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $r5 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r1 = (com.android.server.wm.DisplayContent) $r5;

        $z0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isPrivate()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseArray mDisplayAccessUIDs>;

        $i1 = r1.<com.android.server.wm.DisplayContent: int mDisplayId>;

        $r7 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.util.IntArray getPresentUIDs()>();

        virtualinvoke $r6.<android.util.SparseArray: void append(int,java.lang.Object)>($i1, $r7);

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        $r4 = r0.<com.android.server.wm.RootWindowContainer: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r3 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseArray mDisplayAccessUIDs>;

        virtualinvoke $r4.<android.hardware.display.DisplayManagerInternal: void setDisplayAccessUIDs(android.util.SparseArray)>($r3);

        return;
    }

    void updateUserStack(int, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.RootWindowContainer r0;
        int i0, $i1, $i2;
        com.android.server.wm.ActivityStack r1, r4;
        android.util.SparseIntArray $r2;
        com.android.server.wm.TaskDisplayArea $r3;

        r0 := @this: com.android.server.wm.RootWindowContainer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.ActivityStack;

        $i1 = r0.<com.android.server.wm.RootWindowContainer: int mCurrentUser>;

        if i0 == $i1 goto label2;

        r4 = r1;

        if r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r4 = virtualinvoke $r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getOrCreateRootHomeTask()>();

     label1:
        $r2 = r0.<com.android.server.wm.RootWindowContainer: android.util.SparseIntArray mUserStackInFront>;

        $i2 = virtualinvoke r4.<com.android.server.wm.ActivityStack: int getRootTaskId()>();

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, $i2);

     label2:
        return;
    }
}
