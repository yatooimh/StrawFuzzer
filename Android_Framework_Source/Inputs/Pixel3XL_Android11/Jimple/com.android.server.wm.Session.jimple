class com.android.server.wm.Session extends android.view.IWindowSession$Stub implements android.os.IBinder$DeathRecipient
{
    private com.android.server.wm.AlertWindowNotification mAlertWindowNotification;
    private final android.util.ArraySet mAlertWindowSurfaces;
    private final android.util.ArraySet mAppOverlaySurfaces;
    final android.view.IWindowSessionCallback mCallback;
    final boolean mCanAcquireSleepToken;
    final boolean mCanAddInternalSystemWindow;
    final boolean mCanHideNonSystemOverlayWindows;
    private boolean mClientDead;
    private final com.android.server.wm.DragDropController mDragDropController;
    private final android.view.InsetsSourceControl[] mDummyControls;
    private float mLastReportedAnimatorScale;
    private int mNumWindow;
    private java.lang.String mPackageName;
    final int mPid;
    private java.lang.String mRelayoutTag;
    final com.android.server.wm.WindowManagerService mService;
    private boolean mShowingAlertWindowNotificationAllowed;
    private final java.lang.String mStringName;
    android.view.SurfaceSession mSurfaceSession;
    final int mUid;

    public void <init>(com.android.server.wm.WindowManagerService, android.view.IWindowSessionCallback)
    {
        com.android.server.wm.Session r0;
        android.view.IWindowSessionCallback r1, $r23;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.util.ArraySet $r2, $r3;
        android.view.InsetsSourceControl[] $r4;
        float $f0;
        android.content.Context $r5, $r6, $r7;
        com.android.server.wm.WindowManagerService $r8, $r9, r28;
        boolean $z1, z2, z3, z4;
        com.android.server.wm.DragDropController $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r13, $r22;
        android.os.IBinder $r24;
        android.os.RemoteException $r27;

        r0 := @this: com.android.server.wm.Session;

        r28 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 := @parameter1: android.view.IWindowSessionCallback;

        specialinvoke r0.<android.view.IWindowSession$Stub: void <init>()>();

        r0.<com.android.server.wm.Session: int mNumWindow> = 0;

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.Session: android.util.ArraySet mAppOverlaySurfaces> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces> = $r3;

        r0.<com.android.server.wm.Session: boolean mClientDead> = 0;

        $r4 = newarray (android.view.InsetsSourceControl)[0];

        r0.<com.android.server.wm.Session: android.view.InsetsSourceControl[] mDummyControls> = $r4;

        r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService> = r28;

        r0.<com.android.server.wm.Session: android.view.IWindowSessionCallback mCallback> = r1;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r0.<com.android.server.wm.Session: int mUid> = $i1;

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        r0.<com.android.server.wm.Session: int mPid> = $i2;

        $f0 = virtualinvoke r28.<com.android.server.wm.WindowManagerService: float getCurrentAnimatorScale()>();

        r0.<com.android.server.wm.Session: float mLastReportedAnimatorScale> = $f0;

        $r5 = r28.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        i0 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW");

        if i0 != 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        r0.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow> = z2;

        $r6 = r28.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.HIDE_NON_SYSTEM_OVERLAY_WINDOWS");

        if $i3 != 0 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        r0.<com.android.server.wm.Session: boolean mCanHideNonSystemOverlayWindows> = z3;

        $r7 = r28.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DEVICE_POWER");

        if $i4 != 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        r0.<com.android.server.wm.Session: boolean mCanAcquireSleepToken> = z4;

        $r8 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $z1 = $r8.<com.android.server.wm.WindowManagerService: boolean mShowAlertWindowNotifications>;

        r0.<com.android.server.wm.Session: boolean mShowingAlertWindowNotificationAllowed> = $z1;

        $r9 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragDropController mDragDropController>;

        r0.<com.android.server.wm.Session: com.android.server.wm.DragDropController mDragDropController> = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session{");

        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i6 = r0.<com.android.server.wm.Session: int mPid>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $i7 = r0.<com.android.server.wm.Session: int mUid>;

        if $i7 >= 10000 goto label07;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i12 = r0.<com.android.server.wm.Session: int mUid>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        goto label08;

     label07:
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":u");

        $i8 = r0.<com.android.server.wm.Session: int mUid>;

        $i9 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i8);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(97);

        $i10 = r0.<com.android.server.wm.Session: int mUid>;

        $i11 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i10);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

     label08:
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r22 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.Session: java.lang.String mStringName> = $r22;

     label09:
        $r23 = r0.<com.android.server.wm.Session: android.view.IWindowSessionCallback mCallback>;

        $r24 = interfaceinvoke $r23.<android.view.IWindowSessionCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r24.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

     label12:
        return;

        catch android.os.RemoteException from label09 to label10 with label11;
    }

    private void actionOnWallpaper(android.os.IBinder, java.util.function.BiConsumer)
    {
        com.android.server.wm.Session r0;
        java.util.function.BiConsumer r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.WallpaperController $r4;
        android.os.IBinder r5;
        com.android.server.wm.WindowState r6;

        r0 := @this: com.android.server.wm.Session;

        r5 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.util.function.BiConsumer;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r6 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r0, r5, 1);

        $r3 = virtualinvoke r6.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        interfaceinvoke r1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>($r4, r6);

        return;
    }

    private void cancelAlertWindowNotification()
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.AlertWindowNotification r1;

        r0 := @this: com.android.server.wm.Session;

        r1 = r0.<com.android.server.wm.Session: com.android.server.wm.AlertWindowNotification mAlertWindowNotification>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.AlertWindowNotification: void cancel(boolean)>(1);

        r0.<com.android.server.wm.Session: com.android.server.wm.AlertWindowNotification mAlertWindowNotification> = null;

        return;
    }

    private void killSessionLocked()
    {
        com.android.server.wm.Session r0;
        int $i0;
        boolean $z0, $z2;
        com.android.server.wm.WindowManagerService $r2;
        android.util.ArraySet $r3, $r6, $r7;
        android.view.SurfaceSession $r4, $r5, $r8, $r14;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        java.lang.Exception $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r19, $r21, r22;

        r0 := @this: com.android.server.wm.Session;

        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        if $i0 > 0 goto label7;

        $z0 = r0.<com.android.server.wm.Session: boolean mClientDead>;

        if $z0 != 0 goto label1;

        goto label7;

     label1:
        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        virtualinvoke $r3.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        $r4 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        if $r4 != null goto label2;

        return;

     label2:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z2 == 0 goto label3;

        $r8 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, -86763148, 0, null, $r9);

     label3:
        $r5 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        virtualinvoke $r5.<android.view.SurfaceSession: void kill()>();

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when killing surface session ");

        $r14 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in session ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r19 = virtualinvoke $r11.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r21);

     label6:
        r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession> = null;

        $r6 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        virtualinvoke $r6.<android.util.ArraySet: void clear()>();

        $r7 = r0.<com.android.server.wm.Session: android.util.ArraySet mAppOverlaySurfaces>;

        virtualinvoke $r7.<android.util.ArraySet: void clear()>();

        specialinvoke r0.<com.android.server.wm.Session: void setHasOverlayUi(boolean)>(0);

        specialinvoke r0.<com.android.server.wm.Session: void cancelAlertWindowNotification()>();

        return;

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    static void lambda$setShouldZoomOutWallpaper$2(boolean, com.android.server.wm.WallpaperController, com.android.server.wm.WindowState)
    {
        boolean z0;
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;

        z0 := @parameter0: boolean;

        r0 := @parameter1: com.android.server.wm.WallpaperController;

        r1 := @parameter2: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WallpaperController: void setShouldZoomOutWallpaper(com.android.server.wm.WindowState,boolean)>(r1, z0);

        return;
    }

    static void lambda$setWallpaperDisplayOffset$4(int, int, com.android.server.wm.WallpaperController, com.android.server.wm.WindowState)
    {
        int i0, i1;
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: com.android.server.wm.WallpaperController;

        r1 := @parameter3: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WallpaperController: void setWindowWallpaperDisplayOffset(com.android.server.wm.WindowState,int,int)>(r1, i0, i1);

        return;
    }

    static void lambda$setWallpaperPosition$0(float, float, float, float, com.android.server.wm.WallpaperController, com.android.server.wm.WindowState)
    {
        float f0, f1, f2, f3;
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r0 := @parameter4: com.android.server.wm.WallpaperController;

        r1 := @parameter5: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WallpaperController: void setWindowWallpaperPosition(com.android.server.wm.WindowState,float,float,float,float)>(r1, f0, f1, f2, f3);

        return;
    }

    static void lambda$setWallpaperZoomOut$1(float, com.android.server.wm.WallpaperController, com.android.server.wm.WindowState)
    {
        float f0;
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;

        f0 := @parameter0: float;

        r0 := @parameter1: com.android.server.wm.WallpaperController;

        r1 := @parameter2: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WallpaperController: void setWallpaperZoomOut(com.android.server.wm.WindowState,float)>(r1, f0);

        return;
    }

    static void lambda$wallpaperCommandComplete$5(android.os.IBinder, com.android.server.wm.WallpaperController, com.android.server.wm.WindowState)
    {
        android.os.IBinder r0;
        com.android.server.wm.WallpaperController r1;
        com.android.server.wm.WindowState r2;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: com.android.server.wm.WallpaperController;

        r2 := @parameter2: com.android.server.wm.WindowState;

        virtualinvoke r1.<com.android.server.wm.WallpaperController: void wallpaperCommandComplete(android.os.IBinder)>(r0);

        return;
    }

    static void lambda$wallpaperOffsetsComplete$3(android.os.IBinder, com.android.server.wm.WallpaperController, com.android.server.wm.WindowState)
    {
        android.os.IBinder r0;
        com.android.server.wm.WallpaperController r1;
        com.android.server.wm.WindowState r2;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: com.android.server.wm.WallpaperController;

        r2 := @parameter2: com.android.server.wm.WindowState;

        virtualinvoke r1.<com.android.server.wm.WallpaperController: void wallpaperOffsetsComplete(android.os.IBinder)>(r0);

        return;
    }

    private void setHasOverlayUi(boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1;
        int $i0, i1;
        com.android.server.wm.WindowManagerService$H $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.Session;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $i0 = r0.<com.android.server.wm.Session: int mPid>;

        i1 = (int) z0;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(58, $i0, i1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public int addToDisplay(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InputChannel, android.view.InsetsState, android.view.InsetsSourceControl[])
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2, $i3, $i4, $i5;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3, r4, r5;
        android.view.DisplayCutout$ParcelableWrapper r6;
        android.view.InputChannel r7;
        android.view.InsetsState r8;
        android.view.InsetsSourceControl[] r9;
        com.android.server.wm.WindowManagerService $r10;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.graphics.Rect;

        r4 := @parameter6: android.graphics.Rect;

        r5 := @parameter7: android.graphics.Rect;

        r6 := @parameter8: android.view.DisplayCutout$ParcelableWrapper;

        r7 := @parameter9: android.view.InputChannel;

        r8 := @parameter10: android.view.InsetsState;

        r9 := @parameter11: android.view.InsetsSourceControl[];

        $r10 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $i3 = r0.<com.android.server.wm.Session: int mUid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        $i5 = virtualinvoke $r10.<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[],int)>(r0, r1, i0, r2, i1, i2, r3, r4, r5, r6, r7, r8, r9, $i4);

        return $i5;
    }

    public int addToDisplayAsUser(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InputChannel, android.view.InsetsState, android.view.InsetsSourceControl[])
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2, i3, $i4;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3, r4, r5;
        android.view.DisplayCutout$ParcelableWrapper r6;
        android.view.InputChannel r7;
        android.view.InsetsState r8;
        android.view.InsetsSourceControl[] r9;
        com.android.server.wm.WindowManagerService $r10;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r3 := @parameter6: android.graphics.Rect;

        r4 := @parameter7: android.graphics.Rect;

        r5 := @parameter8: android.graphics.Rect;

        r6 := @parameter9: android.view.DisplayCutout$ParcelableWrapper;

        r7 := @parameter10: android.view.InputChannel;

        r8 := @parameter11: android.view.InsetsState;

        r9 := @parameter12: android.view.InsetsSourceControl[];

        $r10 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $i4 = virtualinvoke $r10.<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[],int)>(r0, r1, i0, r2, i1, i2, r3, r4, r5, r6, r7, r8, r9, i3);

        return $i4;
    }

    public int addToDisplayWithoutInputChannel(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.graphics.Rect, android.view.InsetsState)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2, $i3, $i4, $i5;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3, r4, $r6;
        android.view.InsetsState r5;
        com.android.server.wm.WindowManagerService $r7;
        android.view.DisplayCutout$ParcelableWrapper $r8;
        android.view.InsetsSourceControl[] $r9;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.graphics.Rect;

        r4 := @parameter6: android.graphics.Rect;

        r5 := @parameter7: android.view.InsetsState;

        $r7 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        $r8 = new android.view.DisplayCutout$ParcelableWrapper;

        specialinvoke $r8.<android.view.DisplayCutout$ParcelableWrapper: void <init>()>();

        $r9 = r0.<com.android.server.wm.Session: android.view.InsetsSourceControl[] mDummyControls>;

        $i3 = r0.<com.android.server.wm.Session: int mUid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        $i5 = virtualinvoke $r7.<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[],int)>(r0, r1, i0, r2, i1, i2, $r6, r3, r4, $r8, null, r5, $r9, $i4);

        return $i5;
    }

    public void binderDied()
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3;
        android.view.IWindowSessionCallback $r4;
        android.os.IBinder $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.Session;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.Session: android.view.IWindowSessionCallback mCallback>;

        $r5 = interfaceinvoke $r4.<android.view.IWindowSessionCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0);

        r0.<com.android.server.wm.Session: boolean mClientDead> = 1;

        specialinvoke r0.<com.android.server.wm.Session: void killSessionLocked()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void cancelDragAndDrop(android.os.IBinder, boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        long l0;
        com.android.server.wm.DragDropController $r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: com.android.server.wm.Session;

        r3 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r1.<com.android.server.wm.DragDropController: void cancelDragAndDrop(android.os.IBinder,boolean)>(r3, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dragRecipientEntered(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.DragDropController $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r2.<com.android.server.wm.DragDropController: void dragRecipientEntered(android.view.IWindow)>(r1);

        return;
    }

    public void dragRecipientExited(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.DragDropController $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r2.<com.android.server.wm.DragDropController: void dragRecipientExited(android.view.IWindow)>(r1);

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.Session r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r6;
        int $i0;
        boolean $z0, $z1;
        android.util.ArraySet $r3, $r4;
        android.view.SurfaceSession $r5;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mNumWindow=");

        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCanAddInternalSystemWindow=");

        $z0 = r0.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mAppOverlaySurfaces=");

        $r3 = r0.<com.android.server.wm.Session: android.util.ArraySet mAppOverlaySurfaces>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mAlertWindowSurfaces=");

        $r4 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mClientDead=");

        $z1 = r0.<com.android.server.wm.Session: boolean mClientDead>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSurfaceSession=");

        $r5 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPackageName=");

        $r6 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return;
    }

    public void finishDrawing(android.view.IWindow, android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.view.SurfaceControl$Transaction r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.SurfaceControl$Transaction;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void finishDrawingWindow(com.android.server.wm.Session,android.view.IWindow,android.view.SurfaceControl$Transaction)>(r0, r1, r2);

        return;
    }

    public void finishMovingTask(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        long l0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.TaskPositioningController $r2;
        java.lang.Throwable $r3;
        android.view.IWindow r4;

        r0 := @this: com.android.server.wm.Session;

        r4 := @parameter0: android.view.IWindow;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskPositioningController mTaskPositioningController>;

        virtualinvoke $r2.<com.android.server.wm.TaskPositioningController: void finishTaskPositioning(android.view.IWindow)>(r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void getDisplayFrame(android.view.IWindow, android.graphics.Rect)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.graphics.Rect r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void getWindowDisplayFrame(com.android.server.wm.Session,android.view.IWindow,android.graphics.Rect)>(r0, r1, r2);

        return;
    }

    public boolean getInTouchMode()
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.Session;

        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean getInTouchMode()>();

        return $z0;
    }

    public android.view.IWindowId getWindowId(android.os.IBinder)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerService $r2;
        android.view.IWindowId $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: android.view.IWindowId getWindowId(android.os.IBinder)>(r1);

        return $r3;
    }

    public void grantInputChannel(int, android.view.SurfaceControl, android.view.IWindow, android.os.IBinder, int, int, android.view.InputChannel)
    {
        com.android.server.wm.Session r0;
        int i0, i1, i3, i4, i6;
        android.view.IWindow r1;
        android.os.IBinder r2;
        android.view.InputChannel r3;
        long l2;
        com.android.server.wm.WindowManagerService r4;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r5;
        java.lang.Throwable $r6;
        android.view.SurfaceControl r7;

        r0 := @this: com.android.server.wm.Session;

        i0 := @parameter0: int;

        r7 := @parameter1: android.view.SurfaceControl;

        r1 := @parameter2: android.view.IWindow;

        r2 := @parameter3: android.os.IBinder;

        i1 := @parameter4: int;

        i6 := @parameter5: int;

        r3 := @parameter6: android.view.InputChannel;

        if r2 != null goto label2;

        $z1 = r0.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r5;

     label2:
        $z0 = r0.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

        if $z0 != 0 goto label3;

        if i6 == 0 goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Requires INTERNAL_SYSTEM_WINDOW permission if assign type to input");

     label3:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        i3 = r0.<com.android.server.wm.Session: int mUid>;

        i4 = r0.<com.android.server.wm.Session: int mPid>;

        $z2 = r0.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

        if $z2 == 0 goto label6;

     label5:
        goto label7;

     label6:
        i6 = 0;

     label7:
        virtualinvoke r4.<com.android.server.wm.WindowManagerService: void grantInputChannel(int,int,int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,android.view.InputChannel)>(i3, i4, i0, r7, r1, r2, i1, i6, r3);

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label9:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r6;

        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    boolean hasAlertWindowSurfaces(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.DisplayContent r1, $r8;
        android.util.ArraySet $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowSurfaceController $r5;
        com.android.server.wm.WindowStateAnimator $r6;
        com.android.server.wm.WindowState $r7;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        $i0 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        $r4 = virtualinvoke $r3.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.wm.WindowSurfaceController) $r4;

        $r6 = $r5.<com.android.server.wm.WindowSurfaceController: com.android.server.wm.WindowStateAnimator mAnimator>;

        $r7 = $r6.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r8 != r1 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    public void insetsModified(android.view.IWindow, android.view.InsetsState)
    {
        com.android.server.wm.Session r0;
        android.view.InsetsState r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.InsetsPolicy $r6;
        java.lang.Throwable $r7;
        android.view.IWindow r8;
        com.android.server.wm.WindowState r9;

        r0 := @this: com.android.server.wm.Session;

        r8 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.view.InsetsState;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r2 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r9 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r0, r8, 0);

     label2:
        if r9 == null goto label4;

     label3:
        virtualinvoke r9.<com.android.server.wm.WindowState: void updateRequestedInsetsState(android.view.InsetsState)>(r1);

        $r5 = virtualinvoke r9.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r6 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsPolicy getInsetsPolicy()>();

        virtualinvoke $r6.<com.android.server.wm.InsetsPolicy: void onInsetsModified(com.android.server.wm.WindowState,android.view.InsetsState)>(r9, r1);

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onRectangleOnScreenRequested(android.os.IBinder, android.graphics.Rect)
    {
        com.android.server.wm.Session r0;
        android.graphics.Rect r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        long l0;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.lang.Throwable $r5, $r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.wm.Session;

        r7 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r2 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect)>(r7, r1);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r2;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r5 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r5;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.wm.Session r0;
        int i0, i1;
        android.os.Parcel r1, r3;
        boolean z0, $z1;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.server.wm.Session;

        i0 := @parameter0: int;

        r3 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        z0 = specialinvoke r0.<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r3, r1, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $z1 = $r2 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Window Session Crash", $r2);

     label4:
        throw $r2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void onWindowSurfaceVisibilityChanged(com.android.server.wm.WindowSurfaceController, boolean, int)
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.WindowSurfaceController r1;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        android.util.ArraySet $r3, $r5, $r6, $r8, $r10, $r15;
        java.lang.String $r4, $r7, $r9, $r13, $r16;
        com.android.server.wm.AlertWindowNotification $r11, $r12;
        com.android.server.wm.WindowManagerService $r14;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: com.android.server.wm.WindowSurfaceController;

        z6 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.view.WindowManager$LayoutParams: boolean isSystemAlertWindowType(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

        if $z1 != 0 goto label5;

        if z6 == 0 goto label2;

        $r15 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        z7 = virtualinvoke $r15.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        $i4 = r0.<com.android.server.wm.Session: int mUid>;

        $r16 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        staticinvoke <com.android.internal.os.logging.MetricsLoggerWrapper: void logAppOverlayEnter(int,java.lang.String,boolean,int,boolean)>($i4, $r16, z7, i0, 1);

        goto label3;

     label2:
        $r8 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        z7 = virtualinvoke $r8.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

        $i3 = r0.<com.android.server.wm.Session: int mUid>;

        $r9 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        staticinvoke <com.android.internal.os.logging.MetricsLoggerWrapper: void logAppOverlayExit(int,java.lang.String,boolean,int,boolean)>($i3, $r9, z7, i0, 1);

     label3:
        if z7 == 0 goto label5;

        $r10 = r0.<com.android.server.wm.Session: android.util.ArraySet mAlertWindowSurfaces>;

        $z4 = virtualinvoke $r10.<android.util.ArraySet: boolean isEmpty()>();

        if $z4 == 0 goto label4;

        specialinvoke r0.<com.android.server.wm.Session: void cancelAlertWindowNotification()>();

        goto label5;

     label4:
        $r11 = r0.<com.android.server.wm.Session: com.android.server.wm.AlertWindowNotification mAlertWindowNotification>;

        if $r11 != null goto label5;

        $r12 = new com.android.server.wm.AlertWindowNotification;

        $r14 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r13 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        specialinvoke $r12.<com.android.server.wm.AlertWindowNotification: void <init>(com.android.server.wm.WindowManagerService,java.lang.String)>($r14, $r13);

        r0.<com.android.server.wm.Session: com.android.server.wm.AlertWindowNotification mAlertWindowNotification> = $r12;

        $z5 = r0.<com.android.server.wm.Session: boolean mShowingAlertWindowNotificationAllowed>;

        if $z5 == 0 goto label5;

        virtualinvoke $r12.<com.android.server.wm.AlertWindowNotification: void post()>();

     label5:
        if i0 == 2038 goto label6;

        return;

     label6:
        if z6 == 0 goto label7;

        $r6 = r0.<com.android.server.wm.Session: android.util.ArraySet mAppOverlaySurfaces>;

        z8 = virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        $i2 = r0.<com.android.server.wm.Session: int mUid>;

        $r7 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        staticinvoke <com.android.internal.os.logging.MetricsLoggerWrapper: void logAppOverlayEnter(int,java.lang.String,boolean,int,boolean)>($i2, $r7, z8, i0, 0);

        goto label8;

     label7:
        $r3 = r0.<com.android.server.wm.Session: android.util.ArraySet mAppOverlaySurfaces>;

        z8 = virtualinvoke $r3.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

        $i1 = r0.<com.android.server.wm.Session: int mUid>;

        $r4 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        staticinvoke <com.android.internal.os.logging.MetricsLoggerWrapper: void logAppOverlayExit(int,java.lang.String,boolean,int,boolean)>($i1, $r4, z8, i0, 0);

     label8:
        if z8 == 0 goto label9;

        $r5 = r0.<com.android.server.wm.Session: android.util.ArraySet mAppOverlaySurfaces>;

        $z2 = virtualinvoke $r5.<android.util.ArraySet: boolean isEmpty()>();

        $z3 = $z2 ^ 1;

        specialinvoke r0.<com.android.server.wm.Session: void setHasOverlayUi(boolean)>($z3);

     label9:
        return;
    }

    public boolean outOfMemory(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: boolean outOfMemoryWindow(com.android.server.wm.Session,android.view.IWindow)>(r0, r1);

        return $z0;
    }

    public android.os.IBinder performDrag(android.view.IWindow, int, android.view.SurfaceControl, int, float, float, float, float, android.content.ClipData)
    {
        com.android.server.wm.Session r0;
        int i0, i1, $i3, $i4;
        android.view.SurfaceControl r1;
        float f0, f1, f2, f3;
        android.content.ClipData r2;
        long l2;
        android.view.SurfaceSession $r3;
        com.android.server.wm.DragDropController $r4;
        java.lang.Throwable $r5;
        android.view.IWindow r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.wm.Session;

        r6 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.SurfaceControl;

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        f3 := @parameter7: float;

        r2 := @parameter8: android.content.ClipData;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.wm.Session: com.android.server.wm.DragDropController mDragDropController>;

        $r3 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        $i4 = r0.<com.android.server.wm.Session: int mPid>;

        $i3 = r0.<com.android.server.wm.Session: int mUid>;

        r7 = virtualinvoke $r4.<com.android.server.wm.DragDropController: android.os.IBinder performDrag(android.view.SurfaceSession,int,int,android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>($r3, $i4, $i3, r6, i0, r1, i1, f0, f1, f2, f3, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r7;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean performHapticFeedback(int, boolean)
    {
        com.android.server.wm.Session r0;
        int i0, $i2;
        long l1;
        com.android.server.wm.WindowManagerService $r2;
        java.lang.String $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        java.lang.Throwable $r5;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.Session;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r4 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i2 = r0.<com.android.server.wm.Session: int mUid>;

        $r3 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        z1 = interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: boolean performHapticFeedback(int,java.lang.String,int,boolean,java.lang.String)>($i2, $r3, i0, z0, null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z1;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void pokeDrawLock(android.os.IBinder)
    {
        com.android.server.wm.Session r0;
        long l0;
        com.android.server.wm.WindowManagerService $r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: com.android.server.wm.Session;

        r3 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void pokeDrawLock(com.android.server.wm.Session,android.os.IBinder)>(r0, r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void prepareToReplaceWindows(android.os.IBinder, boolean)
    {
        com.android.server.wm.Session r0;
        android.os.IBinder r1;
        boolean z0;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void setWillReplaceWindows(android.os.IBinder,boolean)>(r1, z0);

        return;
    }

    public int relayout(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, int, long, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.util.MergedConfiguration, android.view.SurfaceControl, android.view.InsetsState, android.view.InsetsSourceControl[], android.graphics.Point, android.view.SurfaceControl)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.view.WindowManager$LayoutParams r2;
        int i0, i1, i2, i3, i5, i6;
        long l4;
        android.graphics.Rect r3, r4, r5, r6, r7;
        android.view.DisplayCutout$ParcelableWrapper r8;
        android.util.MergedConfiguration r9;
        android.view.SurfaceControl r10, r14;
        android.view.InsetsState r11;
        android.view.InsetsSourceControl[] r12;
        android.graphics.Point r13;
        java.lang.String $r15;
        com.android.server.wm.WindowManagerService $r16;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i5 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        l4 := @parameter7: long;

        r3 := @parameter8: android.graphics.Rect;

        r4 := @parameter9: android.graphics.Rect;

        r5 := @parameter10: android.graphics.Rect;

        r6 := @parameter11: android.graphics.Rect;

        r7 := @parameter12: android.graphics.Rect;

        r8 := @parameter13: android.view.DisplayCutout$ParcelableWrapper;

        r9 := @parameter14: android.util.MergedConfiguration;

        r10 := @parameter15: android.view.SurfaceControl;

        r11 := @parameter16: android.view.InsetsState;

        r12 := @parameter17: android.view.InsetsSourceControl[];

        r13 := @parameter18: android.graphics.Point;

        r14 := @parameter19: android.view.SurfaceControl;

        $r15 = r0.<com.android.server.wm.Session: java.lang.String mRelayoutTag>;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, $r15);

        $r16 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        i6 = virtualinvoke $r16.<com.android.server.wm.WindowManagerService: int relayoutWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.graphics.Point,android.view.SurfaceControl)>(r0, r1, i5, r2, i0, i1, i2, i3, l4, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return i6;
    }

    public void remove(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void removeWindow(com.android.server.wm.Session,android.view.IWindow)>(r0, r1);

        return;
    }

    public void reparentDisplayContent(android.view.IWindow, android.view.SurfaceControl, int)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.view.SurfaceControl r2;
        int i0;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.SurfaceControl;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void reparentDisplayContent(android.view.IWindow,android.view.SurfaceControl,int)>(r1, r2, i0);

        return;
    }

    public void reportDropResult(android.view.IWindow, boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        long l0;
        com.android.server.wm.DragDropController $r1;
        java.lang.Throwable $r2;
        android.view.IWindow r3;

        r0 := @this: com.android.server.wm.Session;

        r3 := @parameter0: android.view.IWindow;

        z0 := @parameter1: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r1.<com.android.server.wm.DragDropController: void reportDropResult(android.view.IWindow,boolean)>(r3, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void reportSystemGestureExclusionChanged(android.view.IWindow, java.util.List)
    {
        com.android.server.wm.Session r0;
        java.util.List r1;
        long l0;
        com.android.server.wm.WindowManagerService $r2;
        java.lang.Throwable $r3;
        android.view.IWindow r4;

        r0 := @this: com.android.server.wm.Session;

        r4 := @parameter0: android.view.IWindow;

        r1 := @parameter1: java.util.List;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void reportSystemGestureExclusionChanged(com.android.server.wm.Session,android.view.IWindow,java.util.List)>(r0, r4, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.os.Bundle sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        com.android.server.wm.Session r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.os.Bundle r2, r14;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r3;
        long l3;
        com.android.server.wm.WindowManagerService r4, $r5;
        com.android.server.wm.DisplayContent $r6;
        com.android.server.wm.WallpaperController $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, r15, r16;
        android.os.IBinder r12;
        com.android.server.wm.WindowState r13;

        r0 := @this: com.android.server.wm.Session;

        r12 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: android.os.Bundle;

        z0 := @parameter6: boolean;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r3 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r4 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

     label03:
        r13 = virtualinvoke r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r0, r12, 1);

        $r6 = virtualinvoke r13.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r7 = $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        r14 = virtualinvoke $r7.<com.android.server.wm.WallpaperController: android.os.Bundle sendWindowWallpaperCommand(com.android.server.wm.WindowState,java.lang.String,int,int,int,android.os.Bundle,boolean)>(r13, r1, i0, i1, i2, r2, z0);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        exitmonitor r3;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r14;

     label06:
        $r9 := @caughtexception;

        r15 = $r9;

        goto label08;

     label07:
        $r11 := @caughtexception;

        r15 = $r11;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label09:
        throw r15;

     label10:
        $r10 := @caughtexception;

        r16 = $r10;

     label11:
        exitmonitor r3;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r16;

     label13:
        $r8 := @caughtexception;

        r16 = $r8;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void setInTouchMode(boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.Session;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void setInTouchMode(boolean)>(z0);

        return;
    }

    public void setInsets(android.view.IWindow, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Region)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0;
        android.graphics.Rect r2, r3;
        android.graphics.Region r4;
        com.android.server.wm.WindowManagerService $r5;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Region;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void setInsetsWindow(com.android.server.wm.Session,android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>(r0, r1, i0, r2, r3, r4);

        return;
    }

    public void setShouldZoomOutWallpaper(android.os.IBinder, boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm._$$Lambda$Session$R2ONibXT5EMw7qvLbqzL2qgYR_8 r2;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.wm.Session;

        r5 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = new com.android.server.wm._$$Lambda$Session$R2ONibXT5EMw7qvLbqzL2qgYR_8;

        specialinvoke r2.<com.android.server.wm._$$Lambda$Session$R2ONibXT5EMw7qvLbqzL2qgYR_8: void <init>(boolean)>(z0);

        specialinvoke r0.<com.android.server.wm.Session: void actionOnWallpaper(android.os.IBinder,java.util.function.BiConsumer)>(r5, r2);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setShowingAlertWindowNotificationAllowed(boolean)
    {
        com.android.server.wm.Session r0;
        boolean z0;
        com.android.server.wm.AlertWindowNotification r1;

        r0 := @this: com.android.server.wm.Session;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.Session: boolean mShowingAlertWindowNotificationAllowed> = z0;

        r1 = r0.<com.android.server.wm.Session: com.android.server.wm.AlertWindowNotification mAlertWindowNotification>;

        if r1 == null goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r1.<com.android.server.wm.AlertWindowNotification: void post()>();

        goto label2;

     label1:
        virtualinvoke r1.<com.android.server.wm.AlertWindowNotification: void cancel(boolean)>(0);

     label2:
        return;
    }

    public void setTransparentRegion(android.view.IWindow, android.graphics.Region)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        android.graphics.Region r2;
        com.android.server.wm.WindowManagerService $r3;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Region;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void setTransparentRegionWindow(com.android.server.wm.Session,android.view.IWindow,android.graphics.Region)>(r0, r1, r2);

        return;
    }

    public void setWallpaperDisplayOffset(android.os.IBinder, int, int)
    {
        com.android.server.wm.Session r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l2;
        com.android.server.wm._$$Lambda$Session$ww4WJIPazXnJ3_0c2HLlJZ0dvt4 r2;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4, $r5;
        android.os.IBinder r6;

        r0 := @this: com.android.server.wm.Session;

        r6 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r2 = new com.android.server.wm._$$Lambda$Session$ww4WJIPazXnJ3_0c2HLlJZ0dvt4;

        specialinvoke r2.<com.android.server.wm._$$Lambda$Session$ww4WJIPazXnJ3_0c2HLlJZ0dvt4: void <init>(int,int)>(i0, i1);

        specialinvoke r0.<com.android.server.wm.Session: void actionOnWallpaper(android.os.IBinder,java.util.function.BiConsumer)>(r6, r2);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label08:
        throw $r4;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setWallpaperPosition(android.os.IBinder, float, float, float, float)
    {
        com.android.server.wm.Session r0;
        float f0, f1, f2, f3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm._$$Lambda$Session$zgdcs0nAb8hCdS_6ugnFMadbhU8 r2;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4, $r5;
        android.os.IBinder r6;

        r0 := @this: com.android.server.wm.Session;

        r6 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r2 = new com.android.server.wm._$$Lambda$Session$zgdcs0nAb8hCdS_6ugnFMadbhU8;

        specialinvoke r2.<com.android.server.wm._$$Lambda$Session$zgdcs0nAb8hCdS_6ugnFMadbhU8: void <init>(float,float,float,float)>(f0, f1, f2, f3);

        specialinvoke r0.<com.android.server.wm.Session: void actionOnWallpaper(android.os.IBinder,java.util.function.BiConsumer)>(r6, r2);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r5 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r5;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setWallpaperZoomOut(android.os.IBinder, float)
    {
        com.android.server.wm.Session r0;
        float f0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        com.android.server.wm._$$Lambda$Session$ioowOPU3nnV2ImsCDZtbuIYXGt0 r2;
        int $i1, $i2;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r5;
        java.lang.Throwable $r6, $r7;
        android.os.IBinder r8;
        java.lang.StringBuilder $r11;
        java.lang.IllegalArgumentException $r13;
        java.lang.String $r14;

        r0 := @this: com.android.server.wm.Session;

        r8 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        $i1 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, f0);

        if $i1 > 0 goto label12;

        $i2 = staticinvoke <java.lang.Float: int compare(float,float)>(1.0F, f0);

        if $i2 < 0 goto label12;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label12;

        $r5 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r2 = new com.android.server.wm._$$Lambda$Session$ioowOPU3nnV2ImsCDZtbuIYXGt0;

        specialinvoke r2.<com.android.server.wm._$$Lambda$Session$ioowOPU3nnV2ImsCDZtbuIYXGt0: void <init>(float)>(f0);

        specialinvoke r0.<com.android.server.wm.Session: void actionOnWallpaper(android.os.IBinder,java.util.function.BiConsumer)>(r8, r2);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $r7 := @caughtexception;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        throw $r7;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label12:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Zoom must be a valid float between 0 and 1: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean startMovingTask(android.view.IWindow, float, float)
    {
        com.android.server.wm.Session r0;
        float f0, f1;
        long l0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.TaskPositioningController $r2;
        java.lang.Throwable $r3;
        android.view.IWindow r4;

        r0 := @this: com.android.server.wm.Session;

        r4 := @parameter0: android.view.IWindow;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskPositioningController mTaskPositioningController>;

        z0 = virtualinvoke $r2.<com.android.server.wm.TaskPositioningController: boolean startMovingTask(android.view.IWindow,float,float)>(r4, f0, f1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.Session r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.wm.Session;

        $r1 = r0.<com.android.server.wm.Session: java.lang.String mStringName>;

        return $r1;
    }

    public void updateDisplayContentLocation(android.view.IWindow, int, int, int)
    {
        com.android.server.wm.Session r0;
        android.view.IWindow r1;
        int i0, i1, i2;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Session;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void updateDisplayContentLocation(android.view.IWindow,int,int,int)>(r1, i0, i1, i2);

        return;
    }

    public void updateInputChannel(android.os.IBinder, int, android.view.SurfaceControl, int, android.graphics.Region)
    {
        com.android.server.wm.Session r0;
        int i0, i1;
        android.view.SurfaceControl r1;
        android.graphics.Region r2;
        long l2;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.wm.Session;

        r5 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.SurfaceControl;

        i1 := @parameter3: int;

        r2 := @parameter4: android.graphics.Region;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void updateInputChannel(android.os.IBinder,int,android.view.SurfaceControl,int,android.graphics.Region)>(r5, i0, r1, i1, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void updatePointerIcon(android.view.IWindow)
    {
        com.android.server.wm.Session r0;
        long l0;
        com.android.server.wm.WindowManagerService $r1;
        java.lang.Throwable $r2;
        android.view.IWindow r3;

        r0 := @this: com.android.server.wm.Session;

        r3 := @parameter0: android.view.IWindow;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void updatePointerIcon(android.view.IWindow)>(r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void updateTapExcludeRegion(android.view.IWindow, android.graphics.Region)
    {
        com.android.server.wm.Session r0;
        android.graphics.Region r1;
        long l0;
        com.android.server.wm.WindowManagerService $r2;
        java.lang.Throwable $r3;
        android.view.IWindow r4;

        r0 := @this: com.android.server.wm.Session;

        r4 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.graphics.Region;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void updateTapExcludeRegion(android.view.IWindow,android.graphics.Region)>(r4, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void wallpaperCommandComplete(android.os.IBinder, android.os.Bundle)
    {
        com.android.server.wm.Session r0;
        com.android.server.wm._$$Lambda$Session$oBpmYOWNTuhf9Vk2reUisBrNICA r1;
        com.android.server.wm.WindowManagerService $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;
        android.os.Bundle r5;
        com.android.server.wm.WindowManagerGlobalLock r6;

        r0 := @this: com.android.server.wm.Session;

        r4 := @parameter0: android.os.IBinder;

        r5 := @parameter1: android.os.Bundle;

        $r2 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r6 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r1 = new com.android.server.wm._$$Lambda$Session$oBpmYOWNTuhf9Vk2reUisBrNICA;

        specialinvoke r1.<com.android.server.wm._$$Lambda$Session$oBpmYOWNTuhf9Vk2reUisBrNICA: void <init>(android.os.IBinder)>(r4);

        specialinvoke r0.<com.android.server.wm.Session: void actionOnWallpaper(android.os.IBinder,java.util.function.BiConsumer)>(r4, r1);

        exitmonitor r6;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r6;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void wallpaperOffsetsComplete(android.os.IBinder)
    {
        com.android.server.wm.Session r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm._$$Lambda$Session$MgROwKXIO2fCZINsq4gthndARg4 r2;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.wm.Session;

        r5 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = new com.android.server.wm._$$Lambda$Session$MgROwKXIO2fCZINsq4gthndARg4;

        specialinvoke r2.<com.android.server.wm._$$Lambda$Session$MgROwKXIO2fCZINsq4gthndARg4: void <init>(android.os.IBinder)>(r5);

        specialinvoke r0.<com.android.server.wm.Session: void actionOnWallpaper(android.os.IBinder,java.util.function.BiConsumer)>(r5, r2);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void windowAddedLocked(java.lang.String)
    {
        com.android.server.wm.Session r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r5, r15, r17;
        android.view.SurfaceSession $r6, $r7, $r12;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r8, $r10, $r11;
        android.util.ArraySet $r9;
        float $f0, $f1;
        byte $b0;
        java.lang.Object[] $r13;
        com.android.server.wm.ProtoLogGroup $r14;
        int $i1, $i2;

        r0 := @this: com.android.server.wm.Session;

        r15 := @parameter0: java.lang.String;

        r0.<com.android.server.wm.Session: java.lang.String mPackageName> = r15;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("relayoutWindow: ");

        $r3 = r0.<com.android.server.wm.Session: java.lang.String mPackageName>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.Session: java.lang.String mRelayoutTag> = $r5;

        $r6 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        if $r6 != null goto label2;

        $r7 = new android.view.SurfaceSession;

        specialinvoke $r7.<android.view.SurfaceSession: void <init>()>();

        r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession> = $r7;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z0 == 0 goto label1;

        $r12 = r0.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r17;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, 608694300, 0, null, $r13);

     label1:
        $r8 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        $f0 = r0.<com.android.server.wm.Session: float mLastReportedAnimatorScale>;

        $r10 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        $f1 = virtualinvoke $r10.<com.android.server.wm.WindowManagerService: float getCurrentAnimatorScale()>();

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label2;

        $r11 = r0.<com.android.server.wm.Session: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r11.<com.android.server.wm.WindowManagerService: void dispatchNewAnimatorScaleLocked(com.android.server.wm.Session)>(r0);

     label2:
        $i1 = r0.<com.android.server.wm.Session: int mNumWindow>;

        $i2 = $i1 + 1;

        r0.<com.android.server.wm.Session: int mNumWindow> = $i2;

        return;
    }

    void windowRemovedLocked()
    {
        com.android.server.wm.Session r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.Session;

        $i0 = r0.<com.android.server.wm.Session: int mNumWindow>;

        $i1 = $i0 - 1;

        r0.<com.android.server.wm.Session: int mNumWindow> = $i1;

        specialinvoke r0.<com.android.server.wm.Session: void killSessionLocked()>();

        return;
    }
}
