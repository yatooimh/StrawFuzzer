public final class com.android.server.wm.SurfaceAnimationThread extends com.android.server.ServiceThread
{
    private static android.os.Handler sHandler;
    private static com.android.server.wm.SurfaceAnimationThread sInstance;

    private void <init>()
    {
        com.android.server.wm.SurfaceAnimationThread r0;

        r0 := @this: com.android.server.wm.SurfaceAnimationThread;

        specialinvoke r0.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("android.anim.lf", -4, 0);

        return;
    }

    public static void dispose()
    {
        com.android.server.wm.SurfaceAnimationThread $r1;
        android.os.Handler $r2;
        com.android.server.wm.'-$$Lambda$SurfaceAnimationThread$frZMbXAzhUBmX-wz0SwbLTXpw9k' $r3;
        java.lang.Throwable $r4;
        java.lang.Runnable r5;

        entermonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label1:
        $r1 = <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance>;

        if $r1 != null goto label3;

        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label2:
        return;

     label3:
        $r2 = staticinvoke <com.android.server.wm.SurfaceAnimationThread: android.os.Handler getHandler()>();

        $r3 = <com.android.server.wm._$$Lambda$SurfaceAnimationThread$frZMbXAzhUBmX_wz0SwbLTXpw9k: com.android.server.wm.'-$$Lambda$SurfaceAnimationThread$frZMbXAzhUBmX-wz0SwbLTXpw9k' INSTANCE>;

        r5 = (java.lang.Runnable) $r3;

        virtualinvoke $r2.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>(r5, 0L);

        <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance> = null;

        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static void ensureThreadLocked()
    {
        com.android.server.wm.SurfaceAnimationThread $r1, $r2, $r3, $r6;
        android.os.Looper $r4, $r7;
        android.os.Handler $r5;

        $r1 = <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance>;

        if $r1 != null goto label1;

        $r2 = new com.android.server.wm.SurfaceAnimationThread;

        specialinvoke $r2.<com.android.server.wm.SurfaceAnimationThread: void <init>()>();

        <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance> = $r2;

        virtualinvoke $r2.<com.android.server.wm.SurfaceAnimationThread: void start()>();

        $r3 = <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.SurfaceAnimationThread: android.os.Looper getLooper()>();

        virtualinvoke $r4.<android.os.Looper: void setTraceTag(long)>(32L);

        $r5 = new android.os.Handler;

        $r6 = <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.SurfaceAnimationThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        <com.android.server.wm.SurfaceAnimationThread: android.os.Handler sHandler> = $r5;

     label1:
        return;
    }

    public static com.android.server.wm.SurfaceAnimationThread get()
    {
        java.lang.Throwable $r0;
        com.android.server.wm.SurfaceAnimationThread r1;

        entermonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label1:
        staticinvoke <com.android.server.wm.SurfaceAnimationThread: void ensureThreadLocked()>();

        r1 = <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance>;

        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.os.Handler getHandler()
    {
        java.lang.Throwable $r0;
        android.os.Handler r1;

        entermonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label1:
        staticinvoke <com.android.server.wm.SurfaceAnimationThread: void ensureThreadLocked()>();

        r1 = <com.android.server.wm.SurfaceAnimationThread: android.os.Handler sHandler>;

        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/wm/SurfaceAnimationThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void lambda$dispose$0()
    {
        com.android.server.wm.SurfaceAnimationThread $r0;

        $r0 = <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread sInstance>;

        virtualinvoke $r0.<com.android.server.wm.SurfaceAnimationThread: boolean quit()>();

        return;
    }
}
