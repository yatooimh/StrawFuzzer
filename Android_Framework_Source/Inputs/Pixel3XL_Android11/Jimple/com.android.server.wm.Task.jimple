class com.android.server.wm.Task extends com.android.server.wm.WindowContainer
{
    private static final java.lang.String ATTR_AFFINITY;
    private static final java.lang.String ATTR_ASKEDCOMPATMODE;
    private static final java.lang.String ATTR_AUTOREMOVERECENTS;
    private static final java.lang.String ATTR_CALLING_FEATURE_ID;
    private static final java.lang.String ATTR_CALLING_PACKAGE;
    private static final java.lang.String ATTR_CALLING_UID;
    private static final java.lang.String ATTR_EFFECTIVE_UID;
    private static final java.lang.String ATTR_LASTDESCRIPTION;
    private static final java.lang.String ATTR_LASTTIMEMOVED;
    private static final java.lang.String ATTR_MIN_HEIGHT;
    private static final java.lang.String ATTR_MIN_WIDTH;
    private static final java.lang.String ATTR_NEVERRELINQUISH;
    private static final java.lang.String ATTR_NEXT_AFFILIATION;
    private static final java.lang.String ATTR_NON_FULLSCREEN_BOUNDS;
    private static final java.lang.String ATTR_ORIGACTIVITY;
    private static final java.lang.String ATTR_PERSIST_TASK_VERSION;
    private static final java.lang.String ATTR_PREV_AFFILIATION;
    private static final java.lang.String ATTR_REALACTIVITY;
    private static final java.lang.String ATTR_REALACTIVITY_SUSPENDED;
    private static final java.lang.String ATTR_RESIZE_MODE;
    private static final java.lang.String ATTR_ROOTHASRESET;
    private static final java.lang.String ATTR_ROOT_AFFINITY;
    private static final java.lang.String ATTR_SUPPORTS_PICTURE_IN_PICTURE;
    private static final java.lang.String ATTR_TASKID;
    private static final java.lang.String ATTR_TASKTYPE;
    private static final java.lang.String ATTR_TASK_AFFILIATION;
    private static final java.lang.String ATTR_TASK_AFFILIATION_COLOR;
    private static final java.lang.String ATTR_USERID;
    private static final java.lang.String ATTR_USER_SETUP_COMPLETE;
    private static final java.lang.String ATTR_WINDOW_LAYOUT_AFFINITY;
    static final int FLAG_FORCE_HIDDEN_FOR_PINNED_TASK;
    static final int FLAG_FORCE_HIDDEN_FOR_TASK_ORG;
    static final int INVALID_MIN_SIZE;
    static final int LOCK_TASK_AUTH_DONT_LOCK;
    static final int LOCK_TASK_AUTH_LAUNCHABLE;
    static final int LOCK_TASK_AUTH_LAUNCHABLE_PRIV;
    static final int LOCK_TASK_AUTH_PINNABLE;
    static final int LOCK_TASK_AUTH_WHITELISTED;
    static final int PERSIST_TASK_VERSION;
    static final int REPARENT_KEEP_STACK_AT_FRONT;
    static final int REPARENT_LEAVE_STACK_IN_PLACE;
    static final int REPARENT_MOVE_STACK_TO_FRONT;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_ACTIVITY;
    private static final java.lang.String TAG_ADD_REMOVE;
    private static final java.lang.String TAG_AFFINITYINTENT;
    private static final java.lang.String TAG_INTENT;
    private static final java.lang.String TAG_LOCKTASK;
    private static final java.lang.String TAG_RECENTS;
    private static final java.lang.String TAG_TASKS;
    private static java.lang.Exception sTmpException;
    java.lang.String affinity;
    android.content.Intent affinityIntent;
    boolean askedCompatMode;
    boolean autoRemoveRecents;
    int effectiveUid;
    boolean inRecents;
    android.content.Intent intent;
    boolean isAvailable;
    boolean isPersistable;
    long lastActiveTime;
    java.lang.CharSequence lastDescription;
    int mAffiliatedTaskColor;
    int mAffiliatedTaskId;
    final com.android.server.wm.ActivityTaskManagerService mAtmService;
    java.lang.String mCallingFeatureId;
    java.lang.String mCallingPackage;
    int mCallingUid;
    private boolean mCanAffectSystemUiFlags;
    boolean mCreatedByOrganizer;
    private com.android.server.wm.Dimmer mDimmer;
    private int mDragResizeMode;
    private boolean mDragResizing;
    final java.util.ArrayList mExitingActivities;
    private final com.android.server.wm.Task$FindRootHelper mFindRootHelper;
    private int mForceHiddenFlags;
    private boolean mForceShowForAllUsers;
    private boolean mHasBeenVisible;
    boolean mInRemoveTask;
    com.android.server.wm.ActivityRecord mLastNoHistoryActivity;
    android.graphics.Rect mLastNonFullscreenBounds;
    com.android.server.wm.ActivityRecord mLastPausedActivity;
    int mLastReportedRequestedOrientation;
    private int mLastRotationDisplayId;
    private final android.graphics.Point mLastSurfaceSize;
    private int mLastTaskOrganizerWindowingMode;
    long mLastTimeMoved;
    int mLayerRank;
    int mLockTaskAuth;
    int mLockTaskUid;
    com.android.server.wm.Task mMainWindowSizeChangeTask;
    android.view.SurfaceControl$Transaction mMainWindowSizeChangeTransaction;
    int mMinHeight;
    int mMinWidth;
    private boolean mNeverRelinquishIdentity;
    com.android.server.wm.Task mNextAffiliate;
    int mNextAffiliateTaskId;
    com.android.server.wm.ActivityRecord mPausingActivity;
    final android.graphics.Rect mPreparedFrozenBounds;
    final android.content.res.Configuration mPreparedFrozenMergedConfig;
    private boolean mPreserveNonFloatingState;
    com.android.server.wm.Task mPrevAffiliate;
    int mPrevAffiliateTaskId;
    int mPrevDisplayId;
    int mResizeMode;
    com.android.server.wm.ActivityRecord mResumedActivity;
    final com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport;
    private boolean mReuseTask;
    private com.android.server.wm.WindowProcessController mRootProcess;
    final com.android.server.wm.RootWindowContainer mRootWindowContainer;
    private int mRotation;
    private float mShadowRadius;
    final com.android.server.wm.ActivityStackSupervisor mStackSupervisor;
    boolean mSupportsPictureInPicture;
    boolean mTaskAppearedSent;
    private android.app.ActivityManager$TaskDescription mTaskDescription;
    final int mTaskId;
    android.window.ITaskOrganizer mTaskOrganizer;
    private final android.graphics.Rect mTmpBounds;
    private android.content.res.Configuration mTmpConfig;
    private final android.graphics.Rect mTmpDimBoundsRect;
    private final android.graphics.Rect mTmpFullBounds;
    private final android.graphics.Rect mTmpInsets;
    private final android.graphics.Rect mTmpNonDecorBounds;
    private android.graphics.Rect mTmpRect;
    private android.graphics.Rect mTmpRect2;
    private final android.graphics.Rect mTmpStableBounds;
    int mUserId;
    boolean mUserSetupComplete;
    java.lang.String mWindowLayoutAffinity;
    int maxRecents;
    android.content.ComponentName origActivity;
    android.content.ComponentName realActivity;
    boolean realActivitySuspended;
    java.lang.String rootAffinity;
    boolean rootWasReset;
    java.lang.String stringName;
    com.android.internal.app.IVoiceInteractor voiceInteractor;
    android.service.voice.IVoiceInteractionSession voiceSession;

    void <init>(com.android.server.wm.ActivityTaskManagerService, int, android.content.Intent, android.content.Intent, java.lang.String, java.lang.String, android.content.ComponentName, android.content.ComponentName, boolean, boolean, boolean, int, int, java.lang.String, long, boolean, android.app.ActivityManager$TaskDescription, int, int, int, int, int, java.lang.String, java.lang.String, int, boolean, boolean, boolean, int, int, android.content.pm.ActivityInfo, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityTaskManagerService r1, $r34, $r37;
        int i0, i1, i2, i4, i5, i6, i7, i8, i9, i10, i11, i12;
        android.content.Intent r2, r3;
        java.lang.String r4, r5, r8, r10, r11;
        android.content.ComponentName r6, r7, $r39;
        boolean z0, z1, z2, z3, z4, z5, z6;
        long l3;
        android.app.ActivityManager$TaskDescription r9;
        android.content.pm.ActivityInfo r12;
        android.service.voice.IVoiceInteractionSession r13;
        com.android.internal.app.IVoiceInteractor r14;
        com.android.server.wm.ActivityStack r15;
        com.android.server.wm.WindowManagerService $r16;
        android.graphics.Rect $r17, $r18, $r19, $r20, $r21, $r24, $r26, $r27, $r29;
        android.content.res.Configuration $r22, $r25;
        com.android.server.wm.Task$TaskActivitiesReport $r23;
        com.android.server.wm.Dimmer $r28;
        android.graphics.Point $r30;
        java.util.ArrayList $r31;
        com.android.server.wm.Task$FindRootHelper $r32;
        com.android.server.wm.ActivityStackSupervisor $r33;
        com.android.server.wm.RootWindowContainer $r35;
        com.android.server.wm.WindowContainer$RemoteToken $r36;
        com.android.server.wm.TaskChangeNotificationController $r38;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.Intent;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.content.ComponentName;

        r7 := @parameter7: android.content.ComponentName;

        z0 := @parameter8: boolean;

        z1 := @parameter9: boolean;

        z2 := @parameter10: boolean;

        i1 := @parameter11: int;

        i2 := @parameter12: int;

        r8 := @parameter13: java.lang.String;

        l3 := @parameter14: long;

        z3 := @parameter15: boolean;

        r9 := @parameter16: android.app.ActivityManager$TaskDescription;

        i4 := @parameter17: int;

        i5 := @parameter18: int;

        i6 := @parameter19: int;

        i7 := @parameter20: int;

        i8 := @parameter21: int;

        r10 := @parameter22: java.lang.String;

        r11 := @parameter23: java.lang.String;

        i9 := @parameter24: int;

        z4 := @parameter25: boolean;

        z5 := @parameter26: boolean;

        z6 := @parameter27: boolean;

        i10 := @parameter28: int;

        i11 := @parameter29: int;

        r12 := @parameter30: android.content.pm.ActivityInfo;

        r13 := @parameter31: android.service.voice.IVoiceInteractionSession;

        r14 := @parameter32: com.android.internal.app.IVoiceInteractor;

        r15 := @parameter33: com.android.server.wm.ActivityStack;

        $r16 = r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void <init>(com.android.server.wm.WindowManagerService)>($r16);

        r0.<com.android.server.wm.Task: float mShadowRadius> = 0.0F;

        r0.<com.android.server.wm.Task: int mLockTaskAuth> = 1;

        i12 = -1;

        r0.<com.android.server.wm.Task: int mLockTaskUid> = -1;

        r0.<com.android.server.wm.Task: boolean isPersistable> = 0;

        r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity> = 1;

        r0.<com.android.server.wm.Task: boolean mReuseTask> = 0;

        r0.<com.android.server.wm.Task: int mPrevAffiliateTaskId> = -1;

        r0.<com.android.server.wm.Task: int mNextAffiliateTaskId> = -1;

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds> = $r17;

        $r18 = new android.graphics.Rect;

        specialinvoke $r18.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds> = $r18;

        $r19 = new android.graphics.Rect;

        specialinvoke $r19.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds> = $r19;

        $r20 = new android.graphics.Rect;

        specialinvoke $r20.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpInsets> = $r20;

        $r21 = new android.graphics.Rect;

        specialinvoke $r21.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds> = $r21;

        r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds> = null;

        r0.<com.android.server.wm.Task: int mLayerRank> = -1;

        $r22 = new android.content.res.Configuration;

        specialinvoke $r22.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.Task: android.content.res.Configuration mTmpConfig> = $r22;

        $r23 = new com.android.server.wm.Task$TaskActivitiesReport;

        specialinvoke $r23.<com.android.server.wm.Task$TaskActivitiesReport: void <init>()>();

        r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport> = $r23;

        $r24 = new android.graphics.Rect;

        specialinvoke $r24.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mPreparedFrozenBounds> = $r24;

        $r25 = new android.content.res.Configuration;

        specialinvoke $r25.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.Task: android.content.res.Configuration mPreparedFrozenMergedConfig> = $r25;

        r0.<com.android.server.wm.Task: int mPrevDisplayId> = -1;

        r0.<com.android.server.wm.Task: int mLastRotationDisplayId> = -1;

        r0.<com.android.server.wm.Task: int mLastReportedRequestedOrientation> = -1;

        $r26 = new android.graphics.Rect;

        specialinvoke $r26.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect> = $r26;

        $r27 = new android.graphics.Rect;

        specialinvoke $r27.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect2> = $r27;

        r0.<com.android.server.wm.Task: boolean mPreserveNonFloatingState> = 0;

        $r28 = new com.android.server.wm.Dimmer;

        specialinvoke $r28.<com.android.server.wm.Dimmer: void <init>(com.android.server.wm.WindowContainer)>(r0);

        r0.<com.android.server.wm.Task: com.android.server.wm.Dimmer mDimmer> = $r28;

        $r29 = new android.graphics.Rect;

        specialinvoke $r29.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Rect mTmpDimBoundsRect> = $r29;

        $r30 = new android.graphics.Point;

        specialinvoke $r30.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize> = $r30;

        r0.<com.android.server.wm.Task: boolean mCanAffectSystemUiFlags> = 1;

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.Task: java.util.ArrayList mExitingActivities> = $r31;

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mPausingActivity> = null;

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mLastPausedActivity> = null;

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mLastNoHistoryActivity> = null;

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mResumedActivity> = null;

        r0.<com.android.server.wm.Task: int mForceHiddenFlags> = 0;

        $r32 = new com.android.server.wm.Task$FindRootHelper;

        specialinvoke $r32.<com.android.server.wm.Task$FindRootHelper: void <init>(com.android.server.wm.Task,com.android.server.wm.Task$1)>(r0, null);

        r0.<com.android.server.wm.Task: com.android.server.wm.Task$FindRootHelper mFindRootHelper> = $r32;

        r0.<com.android.server.wm.Task: int mLastTaskOrganizerWindowingMode> = -1;

        if r15 == null goto label1;

        i12 = virtualinvoke r0.<com.android.server.wm.Task: int getRootTaskId()>();

     label1:
        staticinvoke <com.android.server.wm.EventLogTags: void writeWmTaskCreated(int,int)>(i0, i12);

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService> = r1;

        $r33 = r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor> = $r33;

        $r34 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r35 = $r34.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer> = $r35;

        r0.<com.android.server.wm.Task: int mTaskId> = i0;

        r0.<com.android.server.wm.Task: int mUserId> = i1;

        r0.<com.android.server.wm.Task: int mResizeMode> = i9;

        r0.<com.android.server.wm.Task: boolean mSupportsPictureInPicture> = z4;

        r0.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription mTaskDescription> = r9;

        virtualinvoke r0.<com.android.server.wm.Task: void setOrientation(int)>(-2);

        $r36 = new com.android.server.wm.WindowContainer$RemoteToken;

        specialinvoke $r36.<com.android.server.wm.WindowContainer$RemoteToken: void <init>(com.android.server.wm.WindowContainer)>(r0);

        r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken> = $r36;

        r0.<com.android.server.wm.Task: android.content.Intent affinityIntent> = r3;

        r0.<com.android.server.wm.Task: java.lang.String affinity> = r4;

        r0.<com.android.server.wm.Task: java.lang.String rootAffinity> = r5;

        r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession> = r13;

        r0.<com.android.server.wm.Task: com.android.internal.app.IVoiceInteractor voiceInteractor> = r14;

        r0.<com.android.server.wm.Task: android.content.ComponentName realActivity> = r6;

        r0.<com.android.server.wm.Task: boolean realActivitySuspended> = z5;

        r0.<com.android.server.wm.Task: android.content.ComponentName origActivity> = r7;

        r0.<com.android.server.wm.Task: boolean rootWasReset> = z0;

        r0.<com.android.server.wm.Task: boolean isAvailable> = 1;

        r0.<com.android.server.wm.Task: boolean autoRemoveRecents> = z1;

        r0.<com.android.server.wm.Task: boolean askedCompatMode> = z2;

        r0.<com.android.server.wm.Task: boolean mUserSetupComplete> = z6;

        r0.<com.android.server.wm.Task: int effectiveUid> = i2;

        virtualinvoke r0.<com.android.server.wm.Task: void touchActiveTime()>();

        r0.<com.android.server.wm.Task: java.lang.CharSequence lastDescription> = r8;

        r0.<com.android.server.wm.Task: long mLastTimeMoved> = l3;

        r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity> = z3;

        r0.<com.android.server.wm.Task: int mAffiliatedTaskId> = i4;

        r0.<com.android.server.wm.Task: int mAffiliatedTaskColor> = i7;

        r0.<com.android.server.wm.Task: int mPrevAffiliateTaskId> = i5;

        r0.<com.android.server.wm.Task: int mNextAffiliateTaskId> = i6;

        r0.<com.android.server.wm.Task: int mCallingUid> = i8;

        r0.<com.android.server.wm.Task: java.lang.String mCallingPackage> = r10;

        r0.<com.android.server.wm.Task: java.lang.String mCallingFeatureId> = r11;

        r0.<com.android.server.wm.Task: int mResizeMode> = i9;

        if r12 == null goto label2;

        specialinvoke r0.<com.android.server.wm.Task: void setIntent(android.content.Intent,android.content.pm.ActivityInfo)>(r2, r12);

        virtualinvoke r0.<com.android.server.wm.Task: void setMinDimensions(android.content.pm.ActivityInfo)>(r12);

        goto label3;

     label2:
        r0.<com.android.server.wm.Task: android.content.Intent intent> = r2;

        r0.<com.android.server.wm.Task: int mMinWidth> = i10;

        r0.<com.android.server.wm.Task: int mMinHeight> = i11;

     label3:
        $r37 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r38 = virtualinvoke $r37.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r39 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        virtualinvoke $r38.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskCreated(int,android.content.ComponentName)>(i0, $r39);

        return;
    }

    void <init>(com.android.server.wm.ActivityTaskManagerService, int, android.content.pm.ActivityInfo, android.content.Intent, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, android.app.ActivityManager$TaskDescription, com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityTaskManagerService r1;
        int i0, i1, $i3, $i4, $i5;
        android.content.pm.ActivityInfo r2;
        android.content.Intent r3;
        android.service.voice.IVoiceInteractionSession r4;
        com.android.internal.app.IVoiceInteractor r5;
        com.android.server.wm.ActivityStack r6;
        long l2;
        android.content.pm.ApplicationInfo $r7, $r9;
        android.app.ActivityManager$TaskDescription $r8, r11;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.ActivityInfo;

        r3 := @parameter3: android.content.Intent;

        r4 := @parameter4: android.service.voice.IVoiceInteractionSession;

        r5 := @parameter5: com.android.internal.app.IVoiceInteractor;

        r11 := @parameter6: android.app.ActivityManager$TaskDescription;

        r6 := @parameter7: com.android.server.wm.ActivityStack;

        $r7 = r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        if r11 == null goto label1;

        goto label2;

     label1:
        $r8 = new android.app.ActivityManager$TaskDescription;

        specialinvoke $r8.<android.app.ActivityManager$TaskDescription: void <init>()>();

        r11 = $r8;

     label2:
        $r9 = r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r9.<android.content.pm.ApplicationInfo: int uid>;

        $r10 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $i5 = r2.<android.content.pm.ActivityInfo: int resizeMode>;

        $z0 = virtualinvoke r2.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        specialinvoke r0.<com.android.server.wm.Task: void <init>(com.android.server.wm.ActivityTaskManagerService,int,android.content.Intent,android.content.Intent,java.lang.String,java.lang.String,android.content.ComponentName,android.content.ComponentName,boolean,boolean,boolean,int,int,java.lang.String,long,boolean,android.app.ActivityManager$TaskDescription,int,int,int,int,int,java.lang.String,java.lang.String,int,boolean,boolean,boolean,int,int,android.content.pm.ActivityInfo,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,com.android.server.wm.ActivityStack)>(r1, i0, r3, null, null, null, null, null, 0, 0, 0, i1, 0, null, l2, 1, r11, i0, -1, -1, 0, $i4, $r10, null, $i5, $z0, 0, 0, -1, -1, r2, r4, r5, r6);

        return;
    }

    private boolean autoRemoveFromRecents()
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean autoRemoveRecents>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasChild()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean getHasBeenVisible()>();

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private void calculateInsetFrames(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayInfo)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, r2, $r10, $r11, $r13, $r14, $r15, $r16, $r17, r18;
        android.view.DisplayInfo r3;
        com.android.server.wm.ActivityStack $r4, $r5, $r7;
        com.android.server.wm.DisplayContent $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.DisplayCutout $r12;
        com.android.server.wm.DisplayPolicy r19;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r18 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.view.DisplayInfo;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r18);

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r18);

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r4 == null goto label3;

        $r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r6 = virtualinvoke $r5.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        if $r6 != null goto label1;

        goto label3;

     label1:
        $r7 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r8 = virtualinvoke $r7.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplay()>();

        $r9 = $r8.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent mDisplayContent>;

        r19 = virtualinvoke $r9.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        if r19 != null goto label2;

        return;

     label2:
        $r10 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        $i1 = r3.<android.view.DisplayInfo: int logicalWidth>;

        $i0 = r3.<android.view.DisplayInfo: int logicalHeight>;

        virtualinvoke $r10.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        $i4 = r3.<android.view.DisplayInfo: int rotation>;

        $i3 = r3.<android.view.DisplayInfo: int logicalWidth>;

        $i2 = r3.<android.view.DisplayInfo: int logicalHeight>;

        $r12 = r3.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

        $r11 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpInsets>;

        virtualinvoke r19.<com.android.server.wm.DisplayPolicy: void getNonDecorInsetsLw(int,int,int,android.view.DisplayCutout,android.graphics.Rect)>($i4, $i3, $i2, $r12, $r11);

        $r14 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        $r13 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpInsets>;

        staticinvoke <com.android.server.wm.Task: void intersectWithInsetsIfFits(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, $r14, $r13);

        $r15 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpInsets>;

        $i5 = r3.<android.view.DisplayInfo: int rotation>;

        virtualinvoke r19.<com.android.server.wm.DisplayPolicy: void convertNonDecorInsetsToStableInsets(android.graphics.Rect,int)>($r15, $i5);

        $r17 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        $r16 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpInsets>;

        staticinvoke <com.android.server.wm.Task: void intersectWithInsetsIfFits(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r2, $r17, $r16);

        return;

     label3:
        return;
    }

    private boolean canResizeToBounds(android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        boolean $z1, $z2, z3, z4, z5, z6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        android.graphics.Rect r1, r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        z3 = 1;

        if r1 == null goto label12;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z1 != 0 goto label01;

        goto label12;

     label01:
        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i0 <= $i1 goto label02;

        z4 = 1;

        goto label03;

     label02:
        z4 = 0;

     label03:
        r2 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getRequestedOverrideBounds()>();

        i5 = r0.<com.android.server.wm.Task: int mResizeMode>;

        if i5 != 7 goto label08;

        $z2 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 != 0 goto label07;

        $i3 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        if $i3 <= $i4 goto label04;

        z5 = 1;

        goto label05;

     label04:
        z5 = 0;

     label05:
        if z4 != z5 goto label06;

        goto label07;

     label06:
        z3 = 0;

        goto label07;

     label07:
        return z3;

     label08:
        if i5 != 6 goto label09;

        if z4 != 0 goto label10;

     label09:
        z6 = 1;

        $i2 = r0.<com.android.server.wm.Task: int mResizeMode>;

        if $i2 != 5 goto label11;

        if z4 == 0 goto label10;

        z6 = 1;

        goto label11;

     label10:
        z6 = 0;

     label11:
        return z6;

     label12:
        return 1;
    }

    private boolean canSpecifyOrientation()
    {
        com.android.server.wm.Task r0;
        int i0, i1;
        boolean z1;

        r0 := @this: com.android.server.wm.Task;

        i0 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        i1 = virtualinvoke r0.<com.android.server.wm.Task: int getActivityType()>();

        z1 = 1;

        if i0 == 1 goto label2;

        z1 = 1;

        if i1 == 2 goto label2;

        z1 = 1;

        if i1 == 3 goto label2;

        if i1 != 4 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void cleanUpResourcesForDestroy(com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, z2, $z3;
        android.service.voice.IVoiceInteractionSession $r1, $r5;
        com.android.server.wm.ActivityStackSupervisor $r2;
        com.android.server.wm.RecentTasks $r3;
        int $i0;
        android.content.Intent $r4;
        com.android.server.wm.WindowContainer $r6;
        com.android.server.wm.DisplayContent $r7;
        android.os.RemoteException $r8;
        com.android.server.wm.ConfigurationContainer r9;

        r0 := @this: com.android.server.wm.Task;

        r9 := @parameter0: com.android.server.wm.ConfigurationContainer;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasChild()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isLeafTask()>();

        if $z1 == 0 goto label02;

        $r6 = (com.android.server.wm.WindowContainer) r9;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayContent getDisplayContent()>();

        specialinvoke r0.<com.android.server.wm.Task: void saveLaunchingStateIfNeeded(com.android.server.wm.DisplayContent)>($r7);

     label02:
        $r1 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r1 == null goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        if z2 == 0 goto label08;

     label05:
        $r5 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        $r4 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        interfaceinvoke $r5.<android.service.voice.IVoiceInteractionSession: void taskFinished(android.content.Intent,int)>($r4, $i0);

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

     label08:
        $z3 = specialinvoke r0.<com.android.server.wm.Task: boolean autoRemoveFromRecents()>();

        if $z3 != 0 goto label09;

        if z2 == 0 goto label10;

     label09:
        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r3 = $r2.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        virtualinvoke $r3.<com.android.server.wm.RecentTasks: void remove(com.android.server.wm.Task)>(r0);

     label10:
        virtualinvoke r0.<com.android.server.wm.Task: void removeIfPossible()>();

        return;

        catch android.os.RemoteException from label05 to label06 with label07;
    }

    private void closeRecentsChain()
    {
        com.android.server.wm.Task r0, $r1, $r2, r3, r4;

        r0 := @this: com.android.server.wm.Task;

        r3 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mPrevAffiliate>;

        if r3 == null goto label1;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate>;

        virtualinvoke r3.<com.android.server.wm.Task: void setNextAffiliate(com.android.server.wm.Task)>($r2);

     label1:
        r4 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate>;

        if r4 == null goto label2;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mPrevAffiliate>;

        virtualinvoke r4.<com.android.server.wm.Task: void setPrevAffiliate(com.android.server.wm.Task)>($r1);

     label2:
        virtualinvoke r0.<com.android.server.wm.Task: void setPrevAffiliate(com.android.server.wm.Task)>(null);

        virtualinvoke r0.<com.android.server.wm.Task: void setNextAffiliate(com.android.server.wm.Task)>(null);

        return;
    }

    private int computeMaxUserPosition(int)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowList $r1;
        java.lang.Object $r2;
        com.android.server.wm.WindowContainer $r3;
        boolean $z0;
        int i0;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

     label1:
        if i0 <= 0 goto label3;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        $r3 = (com.android.server.wm.WindowContainer) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: boolean showToCurrentUser()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return i0;
    }

    private int computeMinUserPosition(int, int)
    {
        com.android.server.wm.Task r0;
        int i0, i1;
        com.android.server.wm.WindowList $r1;
        java.lang.Object $r2;
        com.android.server.wm.WindowContainer $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

     label1:
        if i1 >= i0 goto label3;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r3 = (com.android.server.wm.WindowContainer) $r2;

        $z0 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: boolean showToCurrentUser()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i1;
    }

    static int computeScreenLayoutOverride(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 & 63;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i2);

        $i6 = staticinvoke <android.content.res.Configuration: int reduceScreenLayout(int,int,int)>($i3, $i4, $i5);

        return $i6;
    }

    private static boolean finishActivityAbove(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        android.app.ActivityOptions r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 != 0 goto label3;

        r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: android.app.ActivityOptions takeOptionsLocked(boolean)>(0);

        if r2 == null goto label2;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void updateOptionsLocked(android.app.ActivityOptions)>(r2);

     label2:
        virtualinvoke r0.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("clear-task-stack", 0);

     label3:
        return 0;
    }

    private static void fitWithinBounds(android.graphics.Rect, android.graphics.Rect, int, int)
    {
        android.graphics.Rect r0, r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i27, i28, $i30, i31, $i32, $i33, $i34, i35;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        i24 := @parameter2: int;

        i25 := @parameter3: int;

        if r1 == null goto label6;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean contains(android.graphics.Rect)>(r0);

        if $z1 == 0 goto label1;

        goto label6;

     label1:
        $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        i27 = staticinvoke <java.lang.Math: int min(int,int)>(i24, $i0);

        $i3 = r0.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int left>;

        $i2 = $i1 + i27;

        if $i3 >= $i2 goto label2;

        $i22 = r0.<android.graphics.Rect: int right>;

        $i21 = r1.<android.graphics.Rect: int left>;

        $i23 = $i22 - $i21;

        i28 = i27 - $i23;

        goto label3;

     label2:
        i28 = 0;

        $i6 = r0.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int right>;

        $i5 = $i4 - i27;

        if $i6 <= $i5 goto label3;

        $i18 = r1.<android.graphics.Rect: int right>;

        $i17 = r0.<android.graphics.Rect: int left>;

        $i19 = $i18 - $i17;

        $i20 = i27 - $i19;

        i28 = neg $i20;

     label3:
        $i30 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        i31 = staticinvoke <java.lang.Math: int min(int,int)>(i25, $i30);

        $i32 = r0.<android.graphics.Rect: int bottom>;

        $i33 = r1.<android.graphics.Rect: int top>;

        $i34 = $i33 + i31;

        if $i32 >= $i34 goto label4;

        $i15 = r0.<android.graphics.Rect: int bottom>;

        $i14 = r1.<android.graphics.Rect: int top>;

        $i16 = $i15 - $i14;

        i35 = i31 - $i16;

        goto label5;

     label4:
        i35 = 0;

        $i9 = r0.<android.graphics.Rect: int top>;

        $i7 = r1.<android.graphics.Rect: int bottom>;

        $i8 = $i7 - i31;

        if $i9 <= $i8 goto label5;

        $i11 = r1.<android.graphics.Rect: int bottom>;

        $i10 = r0.<android.graphics.Rect: int top>;

        $i12 = $i11 - $i10;

        $i13 = i31 - $i12;

        i35 = neg $i13;

     label5:
        virtualinvoke r0.<android.graphics.Rect: void offset(int,int)>(i28, i35);

        return;

     label6:
        return;
    }

    private int getAdjustedChildPosition(com.android.server.wm.WindowContainer, int)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowContainer r1, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        boolean z0, $z1, $z2;
        com.android.server.wm.WindowList $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        i0 := @parameter1: int;

        z0 = virtualinvoke r1.<com.android.server.wm.WindowContainer: boolean showToCurrentUser()>();

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        i1 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i7 = 0;

        if z0 == 0 goto label1;

        i7 = specialinvoke r0.<com.android.server.wm.Task: int computeMinUserPosition(int,int)>(0, i1);

     label1:
        if z0 == 0 goto label2;

        i8 = i1;

        goto label3;

     label2:
        $i2 = i1 - 1;

        i8 = specialinvoke r0.<com.android.server.wm.Task: int computeMaxUserPosition(int)>($i2);

     label3:
        i9 = i8;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowContainer: boolean isAlwaysOnTop()>();

        if $z1 != 0 goto label6;

     label4:
        i9 = i8;

        if i8 <= i7 goto label6;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $i6 = i8 - 1;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i6);

        $r5 = (com.android.server.wm.WindowContainer) $r4;

        $z2 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: boolean isAlwaysOnTop()>();

        if $z2 != 0 goto label5;

        i9 = i8;

        goto label6;

     label5:
        i8 = i8 + -1;

        goto label4;

     label6:
        if i0 != -2147483648 goto label7;

        if i7 != 0 goto label7;

        return -2147483648;

     label7:
        if i0 != 2147483647 goto label8;

        $i5 = i1 - 1;

        if i9 < $i5 goto label8;

        return 2147483647;

     label8:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i7);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i9);

        return $i4;
    }

    private static void getMaxVisibleBounds(com.android.server.wm.ActivityRecord, android.graphics.Rect, boolean[])
    {
        android.graphics.Rect r0;
        boolean[] r1;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.WindowState r3;

        r2 := @parameter0: com.android.server.wm.ActivityRecord;

        r0 := @parameter1: android.graphics.Rect;

        r1 := @parameter2: boolean[];

        $z0 = r2.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z1 == 0 goto label4;

        $z2 = r2.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z2 != 0 goto label1;

        goto label4;

     label1:
        r3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r3 != null goto label2;

        return;

     label2:
        $z3 = r1[0];

        if $z3 != 0 goto label3;

        r1[0] = 1;

        virtualinvoke r0.<android.graphics.Rect: void setEmpty()>();

     label3:
        virtualinvoke r3.<com.android.server.wm.WindowState: void getMaxVisibleBounds(android.graphics.Rect)>(r0);

        return;

     label4:
        return;
    }

    private com.android.server.wm.Task getNextFocusableTask(boolean)
    {
        com.android.server.wm.Task r0, r2, $r4, $r5, $r6;
        boolean z0;
        com.android.server.wm.WindowContainer r1;
        com.android.server.wm._$$Lambda$Task$kW0PT0lvgYRkZBZvY3NzGSDUDQQ $r3;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = new com.android.server.wm._$$Lambda$Task$kW0PT0lvgYRkZBZvY3NzGSDUDQQ;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$Task$kW0PT0lvgYRkZBZvY3NzGSDUDQQ: void <init>(com.android.server.wm.Task,boolean)>(r0, z0);

        r2 = virtualinvoke r1.<com.android.server.wm.WindowContainer: com.android.server.wm.Task getTask(java.util.function.Predicate)>($r3);

        if r2 != null goto label2;

        $r4 = virtualinvoke r1.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke r1.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        $r6 = specialinvoke $r5.<com.android.server.wm.Task: com.android.server.wm.Task getNextFocusableTask(boolean)>(z0);

        return $r6;

     label2:
        return r2;
    }

    private void getNumRunningActivities(com.android.server.wm.Task$TaskActivitiesReport)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.Task$TaskActivitiesReport r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.Task$TaskActivitiesReport;

        virtualinvoke r1.<com.android.server.wm.Task$TaskActivitiesReport: void reset()>();

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r1);

        return;
    }

    private float getShadowRadius(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, $z2, $z3;
        com.android.server.wm.DisplayContent $r1;
        android.util.DisplayMetrics $r2;
        int $i0;
        float $f0;
        byte b1;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        if $z1 == 0 goto label1;

        b1 = 5;

        goto label3;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z2 == 0 goto label5;

        if z0 == 0 goto label2;

        b1 = 20;

        goto label3;

     label2:
        b1 = 5;

     label3:
        $z3 = specialinvoke r0.<com.android.server.wm.Task: boolean hasVisibleChildren()>();

        if $z3 != 0 goto label4;

        return 0.0F;

     label4:
        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = staticinvoke <com.android.server.wm.WindowManagerService: int dipToPixel(int,android.util.DisplayMetrics)>(b1, $r2);

        $f0 = (float) $i0;

        return $f0;

     label5:
        return 0.0F;
    }

    private boolean hasVisibleChildren()
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, z2;
        com.android.server.wm.'-$$Lambda$l6AtA6HpQmFuEYd_DP955eyY_WI' $r1;
        com.android.server.wm.ActivityRecord $r2;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.wm.Task;

        z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isAttached()>();

        z2 = 0;

        if z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isForceHidden()>();

        if $z1 == 0 goto label1;

        goto label3;

     label1:
        $r1 = <com.android.server.wm._$$Lambda$l6AtA6HpQmFuEYd_DP955eyY_WI: com.android.server.wm.'-$$Lambda$l6AtA6HpQmFuEYd_DP955eyY_WI' INSTANCE>;

        r3 = (java.util.function.Predicate) $r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r3);

        if $r2 == null goto label2;

        z2 = 1;

     label2:
        return z2;

     label3:
        return 0;
    }

    private void initializeChangeTransition(android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1;
        com.android.server.wm.DisplayContent $r2, $r3;
        android.util.ArraySet $r4;
        com.android.server.wm.SurfaceFreezer $r5;
        android.view.SurfaceControl$Transaction $r6;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(27, 0, 0, 0);

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $r4 = $r3.<com.android.server.wm.DisplayContent: android.util.ArraySet mChangingContainers>;

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        $r5 = r0.<com.android.server.wm.Task: com.android.server.wm.SurfaceFreezer mSurfaceFreezer>;

        $r6 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r5.<com.android.server.wm.SurfaceFreezer: void freeze(android.view.SurfaceControl$Transaction,android.graphics.Rect)>($r6, r1);

        return;
    }

    static void intersectWithInsetsIfFits(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Rect r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Rect;

        $i1 = r0.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int right>;

        if $i1 > $i0 goto label1;

        $i24 = r1.<android.graphics.Rect: int right>;

        $i23 = r2.<android.graphics.Rect: int right>;

        $i26 = $i24 - $i23;

        $i25 = r0.<android.graphics.Rect: int right>;

        $i27 = staticinvoke <java.lang.Math: int min(int,int)>($i26, $i25);

        r0.<android.graphics.Rect: int right> = $i27;

     label1:
        $i3 = r0.<android.graphics.Rect: int bottom>;

        $i2 = r1.<android.graphics.Rect: int bottom>;

        if $i3 > $i2 goto label2;

        $i19 = r1.<android.graphics.Rect: int bottom>;

        $i18 = r2.<android.graphics.Rect: int bottom>;

        $i21 = $i19 - $i18;

        $i20 = r0.<android.graphics.Rect: int bottom>;

        $i22 = staticinvoke <java.lang.Math: int min(int,int)>($i21, $i20);

        r0.<android.graphics.Rect: int bottom> = $i22;

     label2:
        $i5 = r0.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int left>;

        if $i5 < $i4 goto label3;

        $i14 = r1.<android.graphics.Rect: int left>;

        $i13 = r2.<android.graphics.Rect: int left>;

        $i16 = $i14 + $i13;

        $i15 = r0.<android.graphics.Rect: int left>;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>($i16, $i15);

        r0.<android.graphics.Rect: int left> = $i17;

     label3:
        $i7 = r0.<android.graphics.Rect: int top>;

        $i6 = r1.<android.graphics.Rect: int top>;

        if $i7 < $i6 goto label4;

        $i9 = r1.<android.graphics.Rect: int top>;

        $i8 = r2.<android.graphics.Rect: int top>;

        $i11 = $i9 + $i8;

        $i10 = r0.<android.graphics.Rect: int top>;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i10);

        r0.<android.graphics.Rect: int top> = $i12;

     label4:
        return;
    }

    private static void invalidateAppBoundsConfig(android.content.res.Configuration)
    {
        android.content.res.Configuration r0;
        android.graphics.Rect r1;
        android.app.WindowConfiguration $r2;

        r0 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r1 = virtualinvoke $r2.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

     label1:
        r0.<android.content.res.Configuration: int screenWidthDp> = 0;

        r0.<android.content.res.Configuration: int screenHeightDp> = 0;

        return;
    }

    private boolean isFocused()
    {
        com.android.server.wm.Task r0, $r6;
        com.android.server.wm.DisplayContent r1, $r2, $r4;
        com.android.server.wm.WindowState $r3, $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        r1 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        z0 = 0;

        if r1 == null goto label3;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r3 != null goto label1;

        goto label3;

     label1:
        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if $r6 != r0 goto label2;

        z0 = 1;

     label2:
        return z0;

     label3:
        return 0;
    }

    private static boolean isOpaqueActivity(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<com.android.server.wm.ActivityRecord: boolean visibleIgnoringKeyguard>;

        if $z1 != 0 goto label2;

        if r0 == r1 goto label2;

        return 0;

     label2:
        $z2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean occludesParent()>();

        if $z2 != 0 goto label4;

        $z3 = r0.<com.android.server.wm.ActivityRecord: boolean hasWallpaper>;

        if $z3 == 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    private static boolean isTopRunning(com.android.server.wm.ActivityRecord, int, android.os.IBinder)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0, $i1;
        android.os.IBinder r1;
        com.android.server.wm.Task $r2;
        com.android.server.wm.ActivityRecord$Token $r3;
        boolean $z0, z1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        $r2 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $i1 = $r2.<com.android.server.wm.Task: int mTaskId>;

        if $i1 == i0 goto label1;

        $r3 = r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        if $r3 == r1 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canBeTopRunning()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isTopRunningNonDelayed(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean delayedResume>;

        if $z0 != 0 goto label1;

        if r0 == r1 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canBeTopRunning()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean lambda$BP51Xfr33NBfsJ4rKO04RomX2Tg(com.android.server.wm.ActivityRecord, android.content.ComponentName)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.ComponentName r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.content.ComponentName;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean matchesActivityInHistory(com.android.server.wm.ActivityRecord,android.content.ComponentName)>(r0, r1);

        return $z0;
    }

    public static boolean lambda$CKQ9RLMNPYajktwO1VrUoQGHF_8(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean isOpaqueActivity(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord)>(r0, r1);

        return $z0;
    }

    public static boolean lambda$OQmaRDKXdgA0v6VfNwTX7wOkwBs(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, org.xmlpull.v1.XmlSerializer)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        org.xmlpull.v1.XmlSerializer r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: org.xmlpull.v1.XmlSerializer;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean saveActivityToXml(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord,org.xmlpull.v1.XmlSerializer)>(r0, r1, r2);

        return $z0;
    }

    public static void lambda$SAhnD6goWlY1lXYn6fWba8f2JLs(com.android.server.wm.ActivityRecord, android.graphics.Rect, boolean[])
    {
        com.android.server.wm.ActivityRecord r0;
        android.graphics.Rect r1;
        boolean[] r2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: boolean[];

        staticinvoke <com.android.server.wm.Task: void getMaxVisibleBounds(com.android.server.wm.ActivityRecord,android.graphics.Rect,boolean[])>(r0, r1, r2);

        return;
    }

    public static boolean lambda$TUGPkEKamN60PF6hJQxUwDBjU-M(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, android.app.ActivityManager$TaskDescription)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        android.app.ActivityManager$TaskDescription r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: android.app.ActivityManager$TaskDescription;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean setTaskDescriptionFromActivityAboveRoot(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord,android.app.ActivityManager$TaskDescription)>(r0, r1, r2);

        return $z0;
    }

    static void lambda$applyAnimationUnchecked$9(java.util.ArrayList, int, com.android.server.wm.AnimationAdapter)
    {
        java.util.ArrayList r0;
        int i0, $i1, i2;
        com.android.server.wm.AnimationAdapter r1;
        java.lang.Object $r2;
        com.android.server.wm.WindowContainer $r3;

        r0 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.AnimationAdapter;

        i2 = 0;

     label1:
        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if i2 >= $i1 goto label2;

        $r2 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r3 = (com.android.server.wm.WindowContainer) $r2;

        virtualinvoke $r3.<com.android.server.wm.WindowContainer: void onAnimationFinished(int,com.android.server.wm.AnimationAdapter)>(i0, r1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    static void lambda$getDescendantTaskCount$3(com.android.server.wm.Task, int[])
    {
        com.android.server.wm.Task r0;
        int[] r1;
        int $i0, $i1;

        r0 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: int[];

        $i0 = r1[0];

        $i1 = $i0 + 1;

        r1[0] = $i1;

        return;
    }

    static boolean lambda$getTopFullscreenActivity$7(com.android.server.wm.ActivityRecord)
    {
        android.view.WindowManager$LayoutParams $r0;
        boolean $z0, z1;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.WindowState r2;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r2 == null goto label1;

        $r0 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z0 = virtualinvoke $r0.<android.view.WindowManager$LayoutParams: boolean isFullscreen()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static boolean lambda$getTopVisibleActivity$8(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean mIsExiting>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    public static boolean lambda$lqGdYR9ABiPuG3_68w1VS6hrr8c(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean finishActivityAbove(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord)>(r0, r1);

        return $z0;
    }

    static void lambda$performClearTask$2(java.lang.String, com.android.server.wm.ActivityRecord)
    {
        java.lang.String r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: int finishIfPossible(int,android.content.Intent,com.android.server.uri.NeededUriGrants,java.lang.String,boolean)>(0, null, null, r0, 0);

        return;
    }

    static boolean lambda$topActivityWithStartingWindow$0(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        boolean $z0, z1;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 = r0.<com.android.server.wm.ActivityRecord: int mStartingWindowState>;

        z1 = 1;

        if i0 != 1 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean okToShowLocked()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static boolean lambda$topRunningActivity$6(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean canBeTopRunning()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isFocusable()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean lambda$vJaPYJ0TW6MLVfOETMoxr75oHkk(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean isTopRunningNonDelayed(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord)>(r0, r1);

        return $z0;
    }

    public static boolean lambda$wc9vA2EWxCoWO_MzNTKvEB8eLgw(com.android.server.wm.ActivityRecord, int, android.os.IBinder)
    {
        com.android.server.wm.ActivityRecord r0;
        int i0;
        android.os.IBinder r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        $z0 = staticinvoke <com.android.server.wm.Task: boolean isTopRunning(com.android.server.wm.ActivityRecord,int,android.os.IBinder)>(r0, i0, r1);

        return $z0;
    }

    private static boolean matchesActivityInHistory(com.android.server.wm.ActivityRecord, android.content.ComponentName)
    {
        com.android.server.wm.ActivityRecord r0;
        android.content.ComponentName r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: android.content.ComponentName;

        $z0 = r0.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $z1 = virtualinvoke $r2.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private com.android.server.wm.ActivityRecord performClearTaskLocked(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.Task r0;
        int i0, $i1, $i2;
        com.android.server.wm.ActivityRecord r1, r5;
        android.content.ComponentName $r2;
        com.android.server.wm.'-$$Lambda$Task$lqGdYR9ABiPuG3_68w1VS6hrr8c' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        boolean $z1, $z2;
        com.android.internal.util.function.pooled.PooledFunction r6;
        java.util.function.BiFunction r7;

        r0 := @this: com.android.server.wm.Task;

        r5 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        $r2 = r5.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord findActivityInHistory(android.content.ComponentName)>($r2);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = <com.android.server.wm._$$Lambda$Task$lqGdYR9ABiPuG3_68w1VS6hrr8c: com.android.server.wm.'-$$Lambda$Task$lqGdYR9ABiPuG3_68w1VS6hrr8c' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r7 = (java.util.function.BiFunction) $r3;

        r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(java.util.function.BiFunction,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r7, $r4, r1);

        virtualinvoke r0.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function)>(r6);

        interfaceinvoke r6.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

        $i1 = r1.<com.android.server.wm.ActivityRecord: int launchMode>;

        if $i1 != 0 goto label2;

        $i2 = 536870912 & i0;

        if $i2 != 0 goto label2;

        $z1 = staticinvoke <com.android.server.wm.ActivityStarter: boolean isDocumentLaunchesIntoExisting(int)>(i0);

        if $z1 != 0 goto label2;

        $z2 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 != 0 goto label2;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: int finishIfPossible(java.lang.String,boolean)>("clear-task-top", 0);

        return null;

     label2:
        return r1;
    }

    private static boolean replaceWindowsOnTaskMove(int, int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 5 goto label2;

        if i1 != 5 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private void resolveLeafOnlyOverrideConfigs(android.content.res.Configuration, android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        android.graphics.Rect r1, $r7, $r9, $r10, $r12, r15;
        float f0, $f1, $f2, $f3;
        android.content.res.Configuration $r3, $r5, r14;
        android.app.WindowConfiguration $r4, $r6, $r8, $r11, $r13;
        com.android.server.wm.DisplayContent r16;

        r0 := @this: com.android.server.wm.Task;

        r14 := @parameter0: android.content.res.Configuration;

        r15 := @parameter1: android.graphics.Rect;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r4 = $r3.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i0 = virtualinvoke $r4.<android.app.WindowConfiguration: int getWindowingMode()>();

        i7 = i0;

        if i0 != 0 goto label1;

        $r13 = r14.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i7 = virtualinvoke $r13.<android.app.WindowConfiguration: int getWindowingMode()>();

     label1:
        $r5 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r6 = $r5.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r1 = virtualinvoke $r6.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        if i7 != 1 goto label2;

        $r11 = r14.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r12 = virtualinvoke $r11.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $i6 = r14.<android.content.res.Configuration: int orientation>;

        virtualinvoke r0.<com.android.server.wm.Task: void computeFullscreenBounds(android.graphics.Rect,com.android.server.wm.ActivityRecord,android.graphics.Rect,int)>(r1, null, $r12, $i6);

        return;

     label2:
        virtualinvoke r0.<com.android.server.wm.Task: void adjustForMinimalTaskDimensions(android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration)>(r1, r15, r14);

        if i7 != 5 goto label4;

        $i1 = r14.<android.content.res.Configuration: int densityDpi>;

        $f1 = (float) $i1;

        f0 = $f1 / 160.0F;

        $r7 = new android.graphics.Rect;

        $r8 = r14.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r9 = virtualinvoke $r8.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        specialinvoke $r7.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r9);

        r16 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r16 == null goto label3;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        virtualinvoke r16.<com.android.server.wm.DisplayContent: void getStableRect(android.graphics.Rect)>($r10);

        virtualinvoke $r7.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r10);

     label3:
        $f2 = 48.0F * f0;

        $i3 = (int) $f2;

        $f3 = 32.0F * f0;

        $i2 = (int) $f3;

        staticinvoke <com.android.server.wm.Task: void fitWithinBounds(android.graphics.Rect,android.graphics.Rect,int,int)>(r1, $r7, $i3, $i2);

        $i5 = $r7.<android.graphics.Rect: int top>;

        $i4 = r1.<android.graphics.Rect: int top>;

        i8 = $i5 - $i4;

        if i8 <= 0 goto label4;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>(0, i8);

     label4:
        return;
    }

    static com.android.server.wm.Task restoreFromXml(org.xmlpull.v1.XmlPullParser, com.android.server.wm.ActivityStackSupervisor) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.wm.ActivityStackSupervisor r0;
        int i0, $i1, $i2, i3, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i21, i22, $i23, i24;
        java.util.ArrayList $r3;
        android.app.ActivityManager$TaskDescription $r4;
        java.lang.String $r5, $r9, $r10, $r11, $r13, $r16, r20, r21, r22, r23, r26, r27, r29, r30, r34, r37, r40, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, z35, z36, z37, z38, z39, z40, z41, z42;
        java.lang.Object $r6;
        com.android.server.wm.ActivityRecord $r7, r35;
        android.content.ComponentName $r8, r25, r28;
        java.lang.StringBuilder $r12, $r15, $r42;
        java.lang.Boolean $r14;
        android.os.RemoteException $r17, $r18;
        org.xmlpull.v1.XmlPullParser r19;
        long l4;
        android.graphics.Rect r24;
        byte b19;
        android.content.Intent r32, r33, r38;
        android.content.pm.IPackageManager r39;
        android.content.pm.ApplicationInfo r41;
        com.android.server.wm.ActivityStack $r45;
        com.android.server.wm.ActivityTaskManagerService $r46;

        r19 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r0 := @parameter1: com.android.server.wm.ActivityStackSupervisor;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        z35 = 1;

        i3 = -1;

        r20 = null;

        l4 = 0L;

        z36 = 1;

        i0 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $r4 = new android.app.ActivityManager$TaskDescription;

        specialinvoke $r4.<android.app.ActivityManager$TaskDescription: void <init>()>();

        i5 = -1;

        z37 = 0;

        i6 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        z38 = 0;

        r21 = null;

        i7 = 0;

        i8 = -1;

        i9 = 0;

        i10 = -1;

        i11 = -1;

        i12 = -1;

        r22 = "";

        r23 = null;

        r24 = null;

        i13 = -1;

        i14 = -1;

        r25 = null;

        z39 = 0;

        i15 = 0;

        i16 = i6 - 1;

        r26 = null;

        z40 = 0;

        r27 = null;

        z41 = 0;

        r28 = null;

        z42 = 0;

        i17 = 4;

        i18 = 0;

     label01:
        if i16 < 0 goto label68;

        r29 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>(i16);

        r30 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>(i16);

        $i2 = virtualinvoke r29.<java.lang.String: int hashCode()>();

        lookupswitch($i2)
        {
            case -2134816935: goto label32;
            case -1556983798: goto label31;
            case -1537240555: goto label30;
            case -1494902876: goto label29;
            case -1292777190: goto label28;
            case -1138503444: goto label27;
            case -1124927690: goto label26;
            case -974080081: goto label25;
            case -929566280: goto label24;
            case -865458610: goto label23;
            case -826243148: goto label22;
            case -707249465: goto label21;
            case -705269939: goto label20;
            case -502399667: goto label19;
            case -360792224: goto label18;
            case -162744347: goto label17;
            case -147132913: goto label16;
            case -132216235: goto label15;
            case 180927924: goto label14;
            case 331206372: goto label13;
            case 394454367: goto label12;
            case 541503897: goto label11;
            case 605497640: goto label10;
            case 869221331: goto label09;
            case 1007873193: goto label08;
            case 1081438155: goto label07;
            case 1457608782: goto label06;
            case 1539554448: goto label05;
            case 1999609934: goto label04;
            case 2023391309: goto label03;
            default: goto label02;
        };

     label02:
        goto label33;

     label03:
        $z4 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("root_has_reset");

        if $z4 == 0 goto label02;

        b19 = 7;

        goto label34;

     label04:
        $z6 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("window_layout_affinity");

        if $z6 == 0 goto label02;

        b19 = 6;

        goto label34;

     label05:
        $z7 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("real_activity");

        if $z7 == 0 goto label02;

        b19 = 1;

        goto label34;

     label06:
        $z8 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("never_relinquish_identity");

        if $z8 == 0 goto label02;

        b19 = 16;

        goto label34;

     label07:
        $z9 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("calling_package");

        if $z9 == 0 goto label02;

        b19 = 22;

        goto label34;

     label08:
        $z10 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("persist_task_version");

        if $z10 == 0 goto label02;

        b19 = 29;

        goto label34;

     label09:
        $z11 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("last_description");

        if $z11 == 0 goto label02;

        b19 = 14;

        goto label34;

     label10:
        $z12 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("affinity");

        if $z12 == 0 goto label02;

        b19 = 4;

        goto label34;

     label11:
        $z13 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("min_width");

        if $z13 == 0 goto label02;

        b19 = 27;

        goto label34;

     label12:
        $z14 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("calling_feature_id");

        if $z14 == 0 goto label02;

        b19 = 23;

        goto label34;

     label13:
        $z15 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("prev_affiliation");

        if $z15 == 0 goto label02;

        b19 = 18;

        goto label34;

     label14:
        $z16 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("task_type");

        if $z16 == 0 goto label02;

        b19 = 13;

        goto label34;

     label15:
        $z17 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("calling_uid");

        if $z17 == 0 goto label02;

        b19 = 21;

        goto label34;

     label16:
        $z18 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("user_id");

        if $z18 == 0 goto label02;

        b19 = 10;

        goto label34;

     label17:
        $z19 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("root_affinity");

        if $z19 == 0 goto label02;

        b19 = 5;

        goto label34;

     label18:
        $z20 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("supports_picture_in_picture");

        if $z20 == 0 goto label02;

        b19 = 25;

        goto label34;

     label19:
        $z21 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("auto_remove_recents");

        if $z21 == 0 goto label02;

        b19 = 8;

        goto label34;

     label20:
        $z22 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("orig_activity");

        if $z22 == 0 goto label02;

        b19 = 3;

        goto label34;

     label21:
        $z23 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("non_fullscreen_bounds");

        if $z23 == 0 goto label02;

        b19 = 26;

        goto label34;

     label22:
        $z24 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("min_height");

        if $z24 == 0 goto label02;

        b19 = 28;

        goto label34;

     label23:
        $z25 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("resize_mode");

        if $z25 == 0 goto label02;

        b19 = 24;

        goto label34;

     label24:
        $z26 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("effective_uid");

        if $z26 == 0 goto label02;

        b19 = 12;

        goto label34;

     label25:
        $z27 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("user_setup_complete");

        if $z27 == 0 goto label02;

        b19 = 11;

        goto label34;

     label26:
        $z28 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("task_affiliation");

        if $z28 == 0 goto label02;

        b19 = 17;

        goto label34;

     label27:
        $z29 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("real_activity_suspended");

        if $z29 == 0 goto label02;

        b19 = 2;

        goto label34;

     label28:
        $z30 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("task_affiliation_color");

        if $z30 == 0 goto label02;

        b19 = 20;

        goto label34;

     label29:
        $z31 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("next_affiliation");

        if $z31 == 0 goto label02;

        b19 = 19;

        goto label34;

     label30:
        $z32 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("task_id");

        if $z32 == 0 goto label02;

        b19 = 0;

        goto label34;

     label31:
        $z33 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("last_time_moved");

        if $z33 == 0 goto label02;

        b19 = 15;

        goto label34;

     label32:
        $z34 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("asked_compat_mode");

        if $z34 == 0 goto label02;

        b19 = 9;

        goto label34;

     label33:
        b19 = -1;

     label34:
        tableswitch(b19)
        {
            case 0: goto label65;
            case 1: goto label64;
            case 2: goto label63;
            case 3: goto label62;
            case 4: goto label61;
            case 5: goto label60;
            case 6: goto label59;
            case 7: goto label58;
            case 8: goto label57;
            case 9: goto label56;
            case 10: goto label55;
            case 11: goto label54;
            case 12: goto label53;
            case 13: goto label52;
            case 14: goto label51;
            case 15: goto label50;
            case 16: goto label49;
            case 17: goto label48;
            case 18: goto label47;
            case 19: goto label46;
            case 20: goto label45;
            case 21: goto label44;
            case 22: goto label43;
            case 23: goto label42;
            case 24: goto label41;
            case 25: goto label40;
            case 26: goto label39;
            case 27: goto label38;
            case 28: goto label37;
            case 29: goto label36;
            default: goto label35;
        };

     label35:
        $z5 = virtualinvoke r29.<java.lang.String: boolean startsWith(java.lang.String)>("task_description_");

        if $z5 != 0 goto label67;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task: Unknown attribute=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r16);

        goto label67;

     label36:
        i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label37:
        i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label38:
        i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label39:
        r24 = staticinvoke <android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>(r30);

        goto label67;

     label40:
        z37 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r30);

        goto label67;

     label41:
        i17 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label42:
        r23 = r30;

        goto label67;

     label43:
        r22 = r30;

        goto label67;

     label44:
        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label45:
        i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label46:
        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label47:
        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label48:
        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label49:
        z36 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r30);

        goto label67;

     label50:
        l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r30);

        goto label67;

     label51:
        r20 = r30;

        goto label67;

     label52:
        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label53:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label54:
        z35 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r30);

        goto label67;

     label55:
        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label56:
        z40 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r30);

        goto label67;

     label57:
        z41 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r30);

        goto label67;

     label58:
        z42 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r30);

        goto label67;

     label59:
        r21 = r30;

        goto label67;

     label60:
        z39 = 1;

        r26 = r30;

        goto label67;

     label61:
        r27 = r30;

        goto label67;

     label62:
        r28 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r30);

        goto label67;

     label63:
        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r30);

        z38 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        goto label67;

     label64:
        r25 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r30);

        goto label67;

     label65:
        if i8 != -1 goto label66;

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r30);

        goto label67;

     label66:
        goto label67;

     label67:
        i16 = i16 + -1;

        goto label01;

     label68:
        virtualinvoke $r4.<android.app.ActivityManager$TaskDescription: void restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r19);

        r32 = null;

        r33 = null;

     label69:
        i21 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i21 == 1 goto label78;

        if i21 != 3 goto label71;

        $i1 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i1 < i0 goto label70;

        goto label71;

     label70:
        goto label78;

     label71:
        if i21 != 2 goto label77;

        r34 = interfaceinvoke r19.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r9 = "affinity_intent";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z1 == 0 goto label72;

        r32 = staticinvoke <android.content.Intent: android.content.Intent restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r19);

        goto label76;

     label72:
        $r10 = "intent";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z2 == 0 goto label73;

        r33 = staticinvoke <android.content.Intent: android.content.Intent restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r19);

        goto label76;

     label73:
        $r11 = "activity";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        if $z3 == 0 goto label75;

        r35 = staticinvoke <com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord restoreFromXml(org.xmlpull.v1.XmlPullParser,com.android.server.wm.ActivityStackSupervisor)>(r19, r0);

        if r35 == null goto label74;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r35);

     label74:
        goto label76;

     label75:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreTask: Unexpected name=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r13);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r19);

     label76:
        goto label69;

     label77:
        goto label69;

     label78:
        if z39 != 0 goto label79;

        r37 = r27;

        goto label80;

     label79:
        r37 = r26;

        $r5 = "@";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r26);

        if $z0 == 0 goto label80;

        r37 = null;

     label80:
        if i3 > 0 goto label92;

        if r33 == null goto label81;

        r38 = r33;

        goto label82;

     label81:
        r38 = r32;

     label82:
        if r38 == null goto label90;

        i22 = 0;

        r39 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

     label83:
        $r8 = virtualinvoke r38.<android.content.Intent: android.content.ComponentName getComponent()>();

        r40 = virtualinvoke $r8.<android.content.ComponentName: java.lang.String getPackageName()>();

     label84:
        r41 = interfaceinvoke r39.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r40, 8704, i7);

     label85:
        if r41 == null goto label87;

     label86:
        i22 = r41.<android.content.pm.ApplicationInfo: int uid>;

     label87:
        goto label91;

     label88:
        $r17 := @caughtexception;

        goto label90;

     label89:
        $r18 := @caughtexception;

        goto label90;

     label90:
        i22 = 0;

     label91:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating task #");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": effectiveUid=");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i22);

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityTaskManager", $r44);

        i3 = i22;

        goto label92;

     label92:
        if i18 >= 1 goto label93;

        if i15 != 1 goto label94;

        if i17 != 2 goto label94;

        i17 = 1;

        goto label94;

     label93:
        if i17 != 3 goto label94;

        i17 = 2;

        z37 = 1;

        goto label94;

     label94:
        $r45 = new com.android.server.wm.ActivityStack;

        $r46 = r0.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityTaskManagerService mService>;

        specialinvoke $r45.<com.android.server.wm.ActivityStack: void <init>(com.android.server.wm.ActivityTaskManagerService,int,android.content.Intent,android.content.Intent,java.lang.String,java.lang.String,android.content.ComponentName,android.content.ComponentName,boolean,boolean,boolean,int,int,java.lang.String,long,boolean,android.app.ActivityManager$TaskDescription,int,int,int,int,int,java.lang.String,java.lang.String,int,boolean,boolean,boolean,int,int,android.content.pm.ActivityInfo,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,com.android.server.wm.ActivityStack)>($r46, i8, r33, r32, r27, r37, r25, r28, z42, z41, z40, i7, i3, r20, l4, z36, $r4, i5, i10, i11, i9, i12, r22, r23, i17, z37, z38, z35, i13, i14, null, null, null, null);

        $r45.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds> = r24;

        virtualinvoke $r45.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r24);

        $r45.<com.android.server.wm.Task: java.lang.String mWindowLayoutAffinity> = r21;

        $i23 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i24 = $i23 - 1;

     label95:
        if i24 < 0 goto label96;

        $r6 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i24);

        $r7 = (com.android.server.wm.ActivityRecord) $r6;

        virtualinvoke $r45.<com.android.server.wm.Task: void addChild(com.android.server.wm.ActivityRecord)>($r7);

        i24 = i24 + -1;

        goto label95;

     label96:
        return $r45;

        catch android.os.RemoteException from label83 to label84 with label89;
        catch android.os.RemoteException from label84 to label85 with label88;
        catch android.os.RemoteException from label86 to label87 with label88;
    }

    private static boolean saveActivityToXml(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, org.xmlpull.v1.XmlSerializer)
    {
        com.android.server.wm.ActivityRecord r0, r7;
        org.xmlpull.v1.XmlSerializer r1;
        android.content.pm.ActivityInfo $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.content.Intent $r3;
        java.lang.Exception $r6;

        r7 := @parameter0: com.android.server.wm.ActivityRecord;

        r0 := @parameter1: com.android.server.wm.ActivityRecord;

        r1 := @parameter2: org.xmlpull.v1.XmlSerializer;

        $r2 = r7.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i0 = $r2.<android.content.pm.ActivityInfo: int persistableMode>;

        if $i0 == 0 goto label4;

        $z0 = virtualinvoke r7.<com.android.server.wm.ActivityRecord: boolean isPersistable()>();

        if $z0 == 0 goto label4;

        $r3 = r7.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        $i1 = virtualinvoke $r3.<android.content.Intent: int getFlags()>();

        $i2 = $i1 & 524288;

        $i3 = $i2 | 8192;

        if $i3 != 524288 goto label1;

        if r7 == r0 goto label1;

        goto label4;

     label1:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "activity");

        virtualinvoke r7.<com.android.server.wm.ActivityRecord: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "activity");

     label2:
        return 0;

     label3:
        $r6 := @caughtexception;

        <com.android.server.wm.Task: java.lang.Exception sTmpException> = $r6;

        return 1;

     label4:
        return 1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void saveLaunchingStateIfNeeded()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        specialinvoke r0.<com.android.server.wm.Task: void saveLaunchingStateIfNeeded(com.android.server.wm.DisplayContent)>($r1);

        return;
    }

    private void saveLaunchingStateIfNeeded(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.DisplayContent r1;
        int i0, $i1;
        boolean $z0;
        android.app.WindowConfiguration $r2;
        com.android.server.wm.ActivityStackSupervisor $r3;
        com.android.server.wm.LaunchParamsPersister $r4;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean getHasBeenVisible()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        if i0 == 1 goto label2;

        if i0 == 5 goto label2;

        return;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $i1 = virtualinvoke $r2.<android.app.WindowConfiguration: int getDisplayWindowingMode()>();

        if $i1 == 5 goto label3;

        return;

     label3:
        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r4 = $r3.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsPersister mLaunchParamsPersister>;

        virtualinvoke $r4.<com.android.server.wm.LaunchParamsPersister: void saveTask(com.android.server.wm.Task,com.android.server.wm.DisplayContent)>(r0, r1);

        return;
    }

    private void sendTaskAppeared()
    {
        com.android.server.wm.Task r0;
        android.window.ITaskOrganizer $r1, $r3;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.TaskOrganizerController $r4;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        $r3 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        virtualinvoke $r4.<com.android.server.wm.TaskOrganizerController: void onTaskAppeared(android.window.ITaskOrganizer,com.android.server.wm.Task)>($r3, r0);

     label1:
        return;
    }

    private void sendTaskVanished(android.window.ITaskOrganizer)
    {
        com.android.server.wm.Task r0;
        android.window.ITaskOrganizer r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.TaskOrganizerController $r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.window.ITaskOrganizer;

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r3.<com.android.server.wm.TaskOrganizerController: void onTaskVanished(android.window.ITaskOrganizer,com.android.server.wm.Task)>(r1, r0);

     label1:
        return;
    }

    private void setIntent(android.content.Intent, android.content.pm.ActivityInfo)
    {
        com.android.server.wm.Task r0;
        android.content.pm.ActivityInfo r1;
        boolean z0, $z1, $z2, z3, z4;
        android.content.Intent $r3, $r4, $r18, $r20, $r21, r23, r25, r30;
        android.content.pm.ApplicationInfo $r5, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, $i15;
        java.lang.String $r6, $r8, $r9, $r11, $r12, r24, r29;
        android.content.ComponentName $r7, $r10, $r19, r26;
        android.content.pm.ActivityInfo$WindowLayout $r13, $r28;
        com.android.server.wm.ActivityTaskManagerService $r15;
        android.content.Context $r16;
        android.content.ContentResolver $r17;
        android.graphics.Rect $r22;

        r0 := @this: com.android.server.wm.Task;

        r23 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.content.pm.ActivityInfo;

        z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isLeafTask()>();

        $r3 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if $r3 != null goto label03;

        $i11 = r1.<android.content.pm.ActivityInfo: int flags>;

        $i12 = $i11 & 4096;

        if $i12 != 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity> = z3;

        goto label04;

     label03:
        $z1 = r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity>;

        if $z1 == 0 goto label04;

        if z0 == 0 goto label04;

        return;

     label04:
        if z0 == 0 goto label05;

        r24 = r1.<android.content.pm.ActivityInfo: java.lang.String taskAffinity>;

        goto label06;

     label05:
        r24 = null;

     label06:
        r0.<com.android.server.wm.Task: java.lang.String affinity> = r24;

        $r4 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if $r4 != null goto label07;

        r0.<com.android.server.wm.Task: java.lang.String rootAffinity> = r24;

     label07:
        $r5 = r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        r0.<com.android.server.wm.Task: int effectiveUid> = $i0;

        r0.<com.android.server.wm.Task: java.lang.String stringName> = null;

        $r6 = r1.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        if $r6 != null goto label12;

        r25 = r23;

        if r23 == null goto label09;

        $r20 = virtualinvoke r23.<android.content.Intent: android.content.Intent getSelector()>();

        if $r20 != null goto label08;

        r25 = r23;

        $r22 = virtualinvoke r23.<android.content.Intent: android.graphics.Rect getSourceBounds()>();

        if $r22 == null goto label09;

     label08:
        $r21 = new android.content.Intent;

        specialinvoke $r21.<android.content.Intent: void <init>(android.content.Intent)>(r23);

        r25 = $r21;

        virtualinvoke $r21.<android.content.Intent: void setSelector(android.content.Intent)>(null);

        virtualinvoke $r21.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(null);

     label09:
        r0.<com.android.server.wm.Task: android.content.Intent intent> = r25;

        if r25 == null goto label10;

        r26 = virtualinvoke r25.<android.content.Intent: android.content.ComponentName getComponent()>();

        goto label11;

     label10:
        r26 = null;

     label11:
        r0.<com.android.server.wm.Task: android.content.ComponentName realActivity> = r26;

        r0.<com.android.server.wm.Task: android.content.ComponentName origActivity> = null;

        goto label14;

     label12:
        $r7 = new android.content.ComponentName;

        $r9 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r8 = r1.<android.content.pm.ActivityInfo: java.lang.String targetActivity>;

        specialinvoke $r7.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r9, $r8);

        if r23 == null goto label13;

        $r18 = new android.content.Intent;

        specialinvoke $r18.<android.content.Intent: void <init>(android.content.Intent)>(r23);

        virtualinvoke $r18.<android.content.Intent: void setSelector(android.content.Intent)>(null);

        virtualinvoke $r18.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(null);

        r0.<com.android.server.wm.Task: android.content.Intent intent> = $r18;

        r0.<com.android.server.wm.Task: android.content.ComponentName realActivity> = $r7;

        $r19 = virtualinvoke r23.<android.content.Intent: android.content.ComponentName getComponent()>();

        r0.<com.android.server.wm.Task: android.content.ComponentName origActivity> = $r19;

        goto label14;

     label13:
        r0.<com.android.server.wm.Task: android.content.Intent intent> = null;

        r0.<com.android.server.wm.Task: android.content.ComponentName realActivity> = $r7;

        $r10 = new android.content.ComponentName;

        $r12 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r11 = r1.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r10.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r12, $r11);

        r0.<com.android.server.wm.Task: android.content.ComponentName origActivity> = $r10;

     label14:
        $r28 = r1.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        if $r28 != null goto label15;

        r29 = null;

        goto label16;

     label15:
        $r13 = r1.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        r29 = $r13.<android.content.pm.ActivityInfo$WindowLayout: java.lang.String windowLayoutAffinity>;

     label16:
        r0.<com.android.server.wm.Task: java.lang.String mWindowLayoutAffinity> = r29;

        r30 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r30 != null goto label17;

        i13 = 0;

        goto label18;

     label17:
        i13 = virtualinvoke r30.<android.content.Intent: int getFlags()>();

     label18:
        $i1 = 2097152 & i13;

        if $i1 == 0 goto label19;

        r0.<com.android.server.wm.Task: boolean rootWasReset> = 1;

     label19:
        $r14 = r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r14.<android.content.pm.ApplicationInfo: int uid>;

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        r0.<com.android.server.wm.Task: int mUserId> = $i3;

        $r15 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r16 = $r15.<com.android.server.wm.ActivityTaskManagerService: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i4 = r0.<com.android.server.wm.Task: int mUserId>;

        $i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r17, "user_setup_complete", 0, $i4);

        if $i5 == 0 goto label20;

        z4 = 1;

        goto label21;

     label20:
        z4 = 0;

     label21:
        r0.<com.android.server.wm.Task: boolean mUserSetupComplete> = z4;

        $i6 = r1.<android.content.pm.ActivityInfo: int flags>;

        $i7 = $i6 & 8192;

        if $i7 == 0 goto label22;

        r0.<com.android.server.wm.Task: boolean autoRemoveRecents> = 1;

        goto label25;

     label22:
        $i8 = 532480 & i13;

        if $i8 != 524288 goto label24;

        $i10 = r1.<android.content.pm.ActivityInfo: int documentLaunchMode>;

        if $i10 == 0 goto label23;

        r0.<com.android.server.wm.Task: boolean autoRemoveRecents> = 0;

        goto label25;

     label23:
        r0.<com.android.server.wm.Task: boolean autoRemoveRecents> = 1;

        goto label25;

     label24:
        r0.<com.android.server.wm.Task: boolean autoRemoveRecents> = 0;

     label25:
        $i14 = r0.<com.android.server.wm.Task: int mResizeMode>;

        $i15 = r1.<android.content.pm.ActivityInfo: int resizeMode>;

        if $i14 == $i15 goto label26;

        $i9 = r1.<android.content.pm.ActivityInfo: int resizeMode>;

        r0.<com.android.server.wm.Task: int mResizeMode> = $i9;

        virtualinvoke r0.<com.android.server.wm.Task: void updateTaskDescription()>();

     label26:
        $z2 = virtualinvoke r1.<android.content.pm.ActivityInfo: boolean supportsPictureInPicture()>();

        r0.<com.android.server.wm.Task: boolean mSupportsPictureInPicture> = $z2;

        return;
    }

    private void setLockTaskAuth(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.LockTaskController r2;
        int i1, $i2, $i3;
        com.android.server.wm.ActivityTaskManagerService $r3;
        boolean $z0, $z1;
        byte b4, b5;
        android.content.ComponentName r4;
        java.lang.String r5;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        b4 = 1;

        if r1 != null goto label01;

        r0.<com.android.server.wm.Task: int mLockTaskAuth> = 1;

        return;

     label01:
        r4 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        if r4 == null goto label02;

        r5 = virtualinvoke r4.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label03;

     label02:
        r5 = null;

     label03:
        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r2 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        i1 = r1.<com.android.server.wm.ActivityRecord: int lockTaskLaunchMode>;

        if i1 == 0 goto label08;

        if i1 == 1 goto label07;

        if i1 == 2 goto label06;

        if i1 == 3 goto label04;

        goto label11;

     label04:
        $i3 = r0.<com.android.server.wm.Task: int mUserId>;

        $z1 = virtualinvoke r2.<com.android.server.wm.LockTaskController: boolean isPackageWhitelisted(int,java.lang.String)>($i3, r5);

        if $z1 == 0 goto label05;

        b4 = 2;

        goto label05;

     label05:
        r0.<com.android.server.wm.Task: int mLockTaskAuth> = b4;

        goto label11;

     label06:
        r0.<com.android.server.wm.Task: int mLockTaskAuth> = 4;

        goto label11;

     label07:
        r0.<com.android.server.wm.Task: int mLockTaskAuth> = 0;

        goto label11;

     label08:
        $i2 = r0.<com.android.server.wm.Task: int mUserId>;

        $z0 = virtualinvoke r2.<com.android.server.wm.LockTaskController: boolean isPackageWhitelisted(int,java.lang.String)>($i2, r5);

        if $z0 == 0 goto label09;

        b5 = 3;

        goto label10;

     label09:
        b5 = 1;

     label10:
        r0.<com.android.server.wm.Task: int mLockTaskAuth> = b5;

     label11:
        return;
    }

    private void setMainWindowSizeChangeTransaction(android.view.SurfaceControl$Transaction, com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0, r2, r4;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.ActivityRecord r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: com.android.server.wm.Task;

        r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        goto label2;

     label1:
        r4 = null;

     label2:
        if r4 != null goto label3;

        return;

     label3:
        if r4 == r0 goto label4;

        specialinvoke r4.<com.android.server.wm.Task: void setMainWindowSizeChangeTransaction(android.view.SurfaceControl$Transaction,com.android.server.wm.Task)>(r1, r2);

        return;

     label4:
        r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction mMainWindowSizeChangeTransaction> = r1;

        if r1 != null goto label5;

        r2 = null;

        goto label5;

     label5:
        r0.<com.android.server.wm.Task: com.android.server.wm.Task mMainWindowSizeChangeTask> = r2;

        return;
    }

    private static boolean setTaskDescriptionFromActivityAboveRoot(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityRecord, android.app.ActivityManager$TaskDescription)
    {
        com.android.server.wm.ActivityRecord r0, r1;
        android.app.ActivityManager$TaskDescription r2, r3, $r4;
        boolean $z0, $z1, $z2, z3;
        java.lang.String $r5, $r7, $r8, $r10;
        android.graphics.drawable.Icon $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        r1 := @parameter1: com.android.server.wm.ActivityRecord;

        r2 := @parameter2: android.app.ActivityManager$TaskDescription;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isTaskOverlay()>();

        if $z0 != 0 goto label7;

        $r4 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        if $r4 == null goto label7;

        r3 = r0.<com.android.server.wm.ActivityRecord: android.app.ActivityManager$TaskDescription taskDescription>;

        $r5 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>();

        if $r5 != null goto label1;

        $r10 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setLabel(java.lang.String)>($r10);

     label1:
        $r6 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon getRawIcon()>();

        if $r6 != null goto label2;

        $r9 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: android.graphics.drawable.Icon getRawIcon()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setIcon(android.graphics.drawable.Icon)>($r9);

     label2:
        $r7 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()>();

        if $r7 != null goto label3;

        $r8 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: java.lang.String getIconFilename()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setIconFilename(java.lang.String)>($r8);

     label3:
        $i0 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>();

        if $i0 != 0 goto label4;

        $i7 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setPrimaryColor(int)>($i7);

     label4:
        $i1 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>();

        if $i1 != 0 goto label5;

        $i6 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setBackgroundColor(int)>($i6);

     label5:
        $i2 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>();

        if $i2 != 0 goto label6;

        $i5 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setStatusBarColor(int)>($i5);

        $z2 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: boolean getEnsureStatusBarContrastWhenTransparent()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setEnsureStatusBarContrastWhenTransparent(boolean)>($z2);

     label6:
        $i3 = virtualinvoke r2.<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>();

        if $i3 != 0 goto label7;

        $i4 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setNavigationBarColor(int)>($i4);

        $z1 = virtualinvoke r3.<android.app.ActivityManager$TaskDescription: boolean getEnsureNavigationBarContrastWhenTransparent()>();

        virtualinvoke r2.<android.app.ActivityManager$TaskDescription: void setEnsureNavigationBarContrastWhenTransparent(boolean)>($z1);

     label7:
        if r0 != r1 goto label8;

        z3 = 1;

        goto label9;

     label8:
        z3 = 0;

     label9:
        return z3;
    }

    private boolean shouldStartChangeTransition(int, int)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, $z2, $z3, z4, z5, z6;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.AppTransition $r3;
        android.view.SurfaceControl $r4;
        int i0, i1;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        z0 = $r1.<com.android.server.wm.WindowManagerService: boolean mDisableTransitionAnimation>;

        z4 = 0;

        if z0 != 0 goto label7;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isVisible()>();

        if $z1 == 0 goto label7;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z2 = virtualinvoke $r3.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z2 != 0 goto label7;

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        if $r4 == null goto label7;

        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean isLeafTask()>();

        if $z3 != 0 goto label1;

        goto label7;

     label1:
        if i0 != 5 goto label2;

        z5 = 1;

        goto label3;

     label2:
        z5 = 0;

     label3:
        if i1 != 5 goto label4;

        z6 = 1;

        goto label5;

     label4:
        z6 = 0;

     label5:
        if z5 == z6 goto label6;

        z4 = 1;

     label6:
        return z4;

     label7:
        return 0;
    }

    private boolean supportsSplitScreenWindowingModeInner()
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        com.android.server.wm.ActivityTaskManagerService $r1, $r2;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        z0 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean supportsSplitScreenWindowingMode()>();

        z5 = 0;

        if z0 == 0 goto label2;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z1 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsSplitScreenMultiWindow>;

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z2 = $r2.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities>;

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable(boolean)>(0);

        if $z3 == 0 goto label2;

        $i0 = r0.<com.android.server.wm.Task: int mResizeMode>;

        $z4 = staticinvoke <android.content.pm.ActivityInfo: boolean isPreserveOrientationMode(int)>($i0);

        if $z4 != 0 goto label2;

     label1:
        z5 = 1;

        goto label2;

     label2:
        return z5;
    }

    private void updateShadowsRadius(boolean, android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, $z2;
        android.view.SurfaceControl$Transaction r1;
        float f0, $f1, $f2;
        com.android.server.wm.WindowManagerService $r2;
        byte $b0;
        android.view.SurfaceControl $r3;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.view.SurfaceControl$Transaction;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        $z1 = $r2.<com.android.server.wm.WindowManagerService: boolean mRenderShadowsInCompositor>;

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z2 != 0 goto label1;

        goto label3;

     label1:
        f0 = specialinvoke r0.<com.android.server.wm.Task: float getShadowRadius(boolean)>(z0);

        $f1 = r0.<com.android.server.wm.Task: float mShadowRadius>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        r0.<com.android.server.wm.Task: float mShadowRadius> = f0;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        $f2 = r0.<com.android.server.wm.Task: float mShadowRadius>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setShadowRadius(android.view.SurfaceControl,float)>($r3, $f2);

     label2:
        return;

     label3:
        return;
    }

    void addChild(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.Task: void addChild(com.android.server.wm.WindowContainer,int)>(r1, 2147483647);

        return;
    }

    void addChild(com.android.server.wm.WindowContainer, int)
    {
        com.android.server.wm.Task r0, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0, $z1, $z2, $z3;
        java.lang.String r1, $r3, $r4;
        android.window.ITaskOrganizer $r2;
        android.content.pm.ActivityInfo $r5;
        com.android.server.wm.TaskDisplayArea $r7;
        com.android.server.wm.ActivityStack $r8;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        com.android.server.wm.WindowContainer r11;
        com.android.server.wm.RootWindowContainer $r12;
        com.android.server.wm.ActivityRecord r13;

        r0 := @this: com.android.server.wm.Task;

        r11 := @parameter0: com.android.server.wm.WindowContainer;

        i0 := @parameter1: int;

        z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasChild()>();

        i1 = virtualinvoke r0.<com.android.server.wm.Task: int getActivityType()>();

        $i2 = specialinvoke r0.<com.android.server.wm.Task: int getAdjustedChildPosition(com.android.server.wm.WindowContainer,int)>(r11, i0);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void addChild(com.android.server.wm.WindowContainer,int)>(r11, $i2);

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z1 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 1330804250, 0, null, $r9);

     label1:
        $r2 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if $r2 == null goto label2;

        $z3 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z3 == 0 goto label2;

        $r6 = virtualinvoke r11.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r8 = (com.android.server.wm.ActivityStack) r11;

        virtualinvoke $r7.<com.android.server.wm.TaskDisplayArea: void addStackReferenceIfNeeded(com.android.server.wm.ActivityStack)>($r8);

     label2:
        $r12 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r12.<com.android.server.wm.RootWindowContainer: void updateUIDsPresentOnDisplay()>();

        r13 = virtualinvoke r11.<com.android.server.wm.WindowContainer: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if r13 != null goto label3;

        return;

     label3:
        r13.<com.android.server.wm.ActivityRecord: boolean inHistory> = 1;

        if z0 != 0 goto label5;

        $i3 = virtualinvoke r13.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        if $i3 != 0 goto label4;

        virtualinvoke r13.<com.android.server.wm.ActivityRecord: void setActivityType(int)>(1);

     label4:
        $i4 = virtualinvoke r13.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        virtualinvoke r0.<com.android.server.wm.Task: void setActivityType(int)>($i4);

        $z2 = virtualinvoke r13.<com.android.server.wm.ActivityRecord: boolean isPersistable()>();

        r0.<com.android.server.wm.Task: boolean isPersistable> = $z2;

        $i5 = r13.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        r0.<com.android.server.wm.Task: int mCallingUid> = $i5;

        $r3 = r13.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        r0.<com.android.server.wm.Task: java.lang.String mCallingPackage> = $r3;

        $r4 = r13.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        r0.<com.android.server.wm.Task: java.lang.String mCallingFeatureId> = $r4;

        $r5 = r13.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        $i6 = $r5.<android.content.pm.ActivityInfo: int maxRecents>;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i6, 1);

        $i8 = staticinvoke <android.app.ActivityTaskManager: int getMaxAppRecentsLimitStatic()>();

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i8);

        r0.<com.android.server.wm.Task: int maxRecents> = $i9;

        goto label6;

     label5:
        virtualinvoke r13.<com.android.server.wm.ActivityRecord: void setActivityType(int)>(i1);

     label6:
        virtualinvoke r0.<com.android.server.wm.Task: void updateEffectiveIntent()>();

        return;
    }

    void adjustBoundsForDisplayChangeIfNeeded(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.DisplayContent r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        android.view.DisplayInfo $r2;
        android.graphics.Rect $r3, $r4, $r6, $r7, $r9, $r10;
        android.app.WindowConfiguration $r5;
        com.android.server.wm.ActivityTaskManagerService $r8;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean matchParentBounds()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(null);

        return;

     label2:
        i0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i1 = $r2.<android.view.DisplayInfo: int rotation>;

        $i2 = r0.<com.android.server.wm.Task: int mLastRotationDisplayId>;

        if i0 == $i2 goto label3;

        r0.<com.android.server.wm.Task: int mLastRotationDisplayId> = i0;

        r0.<com.android.server.wm.Task: int mRotation> = i1;

        return;

     label3:
        $i3 = r0.<com.android.server.wm.Task: int mRotation>;

        if $i3 != i1 goto label4;

        return;

     label4:
        $r3 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect2>;

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke $r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        $r5 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z1 = virtualinvoke $r5.<android.app.WindowConfiguration: boolean canResizeTask()>();

        if $z1 != 0 goto label5;

        $r10 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect2>;

        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>($r10);

        return;

     label5:
        $i4 = r0.<com.android.server.wm.Task: int mRotation>;

        $r6 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect2>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void rotateBounds(int,int,android.graphics.Rect)>($i4, i1, $r6);

        $r7 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect2>;

        $i5 = virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>($r7);

        if $i5 == 0 goto label6;

        $r8 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $i6 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r9 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke $r8.<com.android.server.wm.ActivityTaskManagerService: boolean resizeTask(int,android.graphics.Rect,int)>($i6, $r9, 1);

     label6:
        return;
    }

    com.android.server.wm.ActivityStack adjustFocusToNextFocusableTask(java.lang.String)
    {
        com.android.server.wm.Task r0;
        java.lang.String r1;
        com.android.server.wm.ActivityStack $r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack adjustFocusToNextFocusableTask(java.lang.String,boolean,boolean)>(r1, 0, 1);

        return $r2;
    }

    com.android.server.wm.ActivityStack adjustFocusToNextFocusableTask(java.lang.String, boolean, boolean)
    {
        com.android.server.wm.Task r0, $r3, $r4, $r13;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.server.wm.ActivityStack r1, $r14, r17, r24, r25, r26, r27, r28, r29;
        com.android.server.wm.ActivityRecord r2, $r8, $r10;
        com.android.server.wm.ActivityStackSupervisor $r9;
        com.android.server.wm.ActivityTaskManagerService $r11;
        com.android.server.wm.TaskDisplayArea $r12;
        com.android.server.wm.RootWindowContainer $r15;
        java.lang.String r16, r22;
        com.android.server.wm.WindowContainer r18, r19, r20;
        java.lang.StringBuilder r23;

        r0 := @this: com.android.server.wm.Task;

        r16 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r3 = specialinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getNextFocusableTask(boolean)>(z0);

        r17 = (com.android.server.wm.ActivityStack) $r3;

        r18 = r17;

        if r17 != null goto label1;

        $r15 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r14 = (com.android.server.wm.ActivityStack) r0;

        $z4 = z0 ^ 1;

        r18 = virtualinvoke $r15.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getNextFocusableStack(com.android.server.wm.ActivityStack,boolean)>($r14, $z4);

     label1:
        if r18 != null goto label2;

        return null;

     label2:
        r24 = (com.android.server.wm.ActivityStack) r18;

        $r4 = virtualinvoke r24.<com.android.server.wm.ActivityStack: com.android.server.wm.Task getRootTask()>();

        r1 = (com.android.server.wm.ActivityStack) $r4;

        if z1 != 0 goto label5;

        r25 = (com.android.server.wm.ActivityStack) r18;

        r19 = virtualinvoke r25.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getParent()>();

     label3:
        virtualinvoke r19.<com.android.server.wm.WindowContainer: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(2147483647, r18, 0);

        r18 = r19;

        r20 = virtualinvoke r19.<com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer getParent()>();

        $r13 = virtualinvoke r19.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r13 == null goto label4;

        r19 = r20;

        if r20 != null goto label3;

     label4:
        return r1;

     label5:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adjustFocusToNextFocusableStack");

        r22 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r26 = (com.android.server.wm.ActivityStack) r18;

        r2 = virtualinvoke r26.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        r27 = (com.android.server.wm.ActivityStack) r18;

        $z2 = virtualinvoke r27.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        if $z2 == 0 goto label7;

        if r2 == null goto label6;

        $z3 = r2.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z3 != 0 goto label7;

     label6:
        r28 = (com.android.server.wm.ActivityStack) r18;

        $r12 = virtualinvoke r28.<com.android.server.wm.ActivityStack: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        virtualinvoke $r12.<com.android.server.wm.TaskDisplayArea: void moveHomeActivityToTop(java.lang.String)>(r22);

        return r1;

     label7:
        r29 = (com.android.server.wm.ActivityStack) r18;

        virtualinvoke r29.<com.android.server.wm.ActivityStack: void moveToFront(java.lang.String)>(r22);

        $r8 = r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r8 == null goto label8;

        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: void updateTopResumedActivityIfNeeded()>();

        $r11 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r10 = r1.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mResumedActivity>;

        virtualinvoke $r11.<com.android.server.wm.ActivityTaskManagerService: void setResumedActivityUncheckLocked(com.android.server.wm.ActivityRecord,java.lang.String)>($r10, r16);

     label8:
        return r1;
    }

    void adjustForMinimalTaskDimensions(android.graphics.Rect, android.graphics.Rect, android.content.res.Configuration)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, r2, r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23;
        float f0, $f1, $f2, $f3;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        android.app.WindowConfiguration $r3;
        com.android.server.wm.RootWindowContainer $r4;
        android.content.res.Configuration r5;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r5 := @parameter2: android.content.res.Configuration;

        i0 = r0.<com.android.server.wm.Task: int mMinWidth>;

        i1 = r0.<com.android.server.wm.Task: int mMinHeight>;

        i18 = i0;

        i19 = i1;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        if $z0 != 0 goto label02;

        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        i20 = $r4.<com.android.server.wm.RootWindowContainer: int mDefaultMinSizeOfResizeableTaskDp>;

        $i17 = r5.<android.content.res.Configuration: int densityDpi>;

        $f1 = (float) $i17;

        f0 = $f1 / 160.0F;

        $f2 = (float) i20;

        $f3 = $f2 * f0;

        i21 = (int) $f3;

        i22 = i0;

        if i0 != -1 goto label01;

        i22 = i21;

     label01:
        i18 = i22;

        i19 = i1;

        if i1 != -1 goto label02;

        i19 = i21;

        i18 = i22;

     label02:
        $z3 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z3 == 0 goto label04;

        $r3 = r5.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r6 = virtualinvoke $r3.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $i15 = virtualinvoke r6.<android.graphics.Rect: int width()>();

        if $i15 < i18 goto label03;

        $i16 = virtualinvoke r6.<android.graphics.Rect: int height()>();

        if $i16 < i19 goto label03;

        return;

     label03:
        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r6);

     label04:
        i23 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        z4 = 1;

        if i18 <= i23 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        $i2 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if i19 <= $i2 goto label07;

        goto label08;

     label07:
        z4 = 0;

     label08:
        if z5 != 0 goto label09;

        if z4 != 0 goto label09;

        return;

     label09:
        if z5 == 0 goto label11;

        $z2 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 != 0 goto label10;

        $i12 = r1.<android.graphics.Rect: int right>;

        $i11 = r2.<android.graphics.Rect: int right>;

        if $i12 != $i11 goto label10;

        $i13 = r1.<android.graphics.Rect: int right>;

        $i14 = $i13 - i18;

        r1.<android.graphics.Rect: int left> = $i14;

        goto label11;

     label10:
        $i9 = r1.<android.graphics.Rect: int left>;

        $i10 = $i9 + i18;

        r1.<android.graphics.Rect: int right> = $i10;

     label11:
        if z4 == 0 goto label13;

        $z1 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        $i6 = r1.<android.graphics.Rect: int bottom>;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        if $i6 != $i5 goto label12;

        $i7 = r1.<android.graphics.Rect: int bottom>;

        $i8 = $i7 - i19;

        r1.<android.graphics.Rect: int top> = $i8;

        goto label13;

     label12:
        $i3 = r1.<android.graphics.Rect: int top>;

        $i4 = $i3 + i19;

        r1.<android.graphics.Rect: int bottom> = $i4;

     label13:
        return;
    }

    protected void applyAnimationUnchecked(android.view.WindowManager$LayoutParams, boolean, int, boolean, java.util.ArrayList)
    {
        com.android.server.wm.Task r0, $r7;
        boolean z0, z1, $z2;
        int i0;
        java.util.ArrayList r1;
        com.android.server.wm.RecentsAnimationController r2;
        java.lang.String r3, r4, $r8, r12;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm._$$Lambda$Task$kSFegYxPHp4qdhnWjQbYn0gwVbI $r6;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        android.view.WindowManager$LayoutParams r11;

        r0 := @this: com.android.server.wm.Task;

        r11 := @parameter0: android.view.WindowManager$LayoutParams;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        r1 := @parameter4: java.util.ArrayList;

        $r5 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        r2 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r2 == null goto label2;

        if z0 == 0 goto label3;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RECENTS_ANIMATIONS_enabled>;

        if $z2 == 0 goto label1;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r7 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task asTask()>();

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        $r8 = staticinvoke <com.android.server.wm.AppTransition: java.lang.String appTransitionToString(int)>(i0);

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RECENTS_ANIMATIONS>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r3;

        $r9[1] = r12;

        $r9[2] = r4;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 210750281, 0, null, $r9);

     label1:
        $r6 = new com.android.server.wm._$$Lambda$Task$kSFegYxPHp4qdhnWjQbYn0gwVbI;

        specialinvoke $r6.<com.android.server.wm._$$Lambda$Task$kSFegYxPHp4qdhnWjQbYn0gwVbI: void <init>(java.util.ArrayList)>(r1);

        virtualinvoke r2.<com.android.server.wm.RecentsAnimationController: void addTaskToTargets(com.android.server.wm.Task,com.android.server.wm.SurfaceAnimator$OnAnimationFinishedCallback)>(r0, $r6);

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void applyAnimationUnchecked(android.view.WindowManager$LayoutParams,boolean,int,boolean,java.util.ArrayList)>(r11, z0, i0, z1, r1);

     label3:
        return;
    }

    com.android.server.wm.Task asTask()
    {
        com.android.server.wm.Task r0;

        r0 := @this: com.android.server.wm.Task;

        return r0;
    }

    boolean canAffectSystemUiFlags()
    {
        com.android.server.wm.Task r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean mCanAffectSystemUiFlags>;

        return $z0;
    }

    boolean canBeLaunchedOnDisplay(int)
    {
        com.android.server.wm.Task r0;
        int i0;
        com.android.server.wm.ActivityStackSupervisor $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.ActivityStackSupervisor: boolean canPlaceEntityOnDisplay(int,int,int,android.content.pm.ActivityInfo)>(i0, -1, -1, null);

        return $z0;
    }

    boolean canCreateRemoteAnimationTarget()
    {
        com.android.server.wm.Task r0;

        r0 := @this: com.android.server.wm.Task;

        return 1;
    }

    void cancelTaskWindowTransition()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowContainer $r4;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowContainer) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowContainer: void cancelAnimation()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void cleanUpActivityReferences(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0, $r3, $r4;
        com.android.server.wm.ActivityRecord r1, r6, r7;
        java.util.ArrayList $r2;
        com.android.server.wm.WindowContainer r5;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if r5 == null goto label1;

        $r3 = virtualinvoke r5.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r5.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        virtualinvoke $r4.<com.android.server.wm.Task: void cleanUpActivityReferences(com.android.server.wm.ActivityRecord)>(r1);

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void removeTimeouts()>();

        $r2 = r0.<com.android.server.wm.Task: java.util.ArrayList mExitingActivities>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        r6 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mResumedActivity>;

        if r6 == null goto label2;

        if r6 != r1 goto label2;

        virtualinvoke r0.<com.android.server.wm.Task: void setResumedActivity(com.android.server.wm.ActivityRecord,java.lang.String)>(null, "cleanUpActivityReferences");

     label2:
        r7 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mPausingActivity>;

        if r7 == null goto label3;

        if r7 != r1 goto label3;

        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mPausingActivity> = null;

     label3:
        return;
    }

    void clearPreserveNonFloatingState()
    {
        com.android.server.wm.Task r0;

        r0 := @this: com.android.server.wm.Task;

        r0.<com.android.server.wm.Task: boolean mPreserveNonFloatingState> = 0;

        return;
    }

    void clearRootProcess()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowProcessController r1;

        r0 := @this: com.android.server.wm.Task;

        r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowProcessController mRootProcess>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void removeRecentTask(com.android.server.wm.Task)>(r0);

        r0.<com.android.server.wm.Task: com.android.server.wm.WindowProcessController mRootProcess> = null;

     label1:
        return;
    }

    void computeConfigResourceOverrides(android.content.res.Configuration, android.content.res.Configuration)
    {
        com.android.server.wm.Task r0;
        android.content.res.Configuration r1, r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.content.res.Configuration;

        virtualinvoke r0.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration,android.view.DisplayInfo,com.android.server.wm.ActivityRecord$CompatDisplayInsets)>(r1, r2, null, null);

        return;
    }

    void computeConfigResourceOverrides(android.content.res.Configuration, android.content.res.Configuration, android.view.DisplayInfo)
    {
        com.android.server.wm.Task r0;
        android.content.res.Configuration r1, r2;
        android.view.DisplayInfo r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.content.res.Configuration;

        r3 := @parameter2: android.view.DisplayInfo;

        if r3 == null goto label1;

        r1.<android.content.res.Configuration: int screenLayout> = 0;

        staticinvoke <com.android.server.wm.Task: void invalidateAppBoundsConfig(android.content.res.Configuration)>(r1);

     label1:
        virtualinvoke r0.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration,android.view.DisplayInfo,com.android.server.wm.ActivityRecord$CompatDisplayInsets)>(r1, r2, r3, null);

        return;
    }

    void computeConfigResourceOverrides(android.content.res.Configuration, android.content.res.Configuration, android.view.DisplayInfo, com.android.server.wm.ActivityRecord$CompatDisplayInsets)
    {
        com.android.server.wm.Task r0;
        android.content.res.Configuration r1, r2;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, f11, f12;
        android.graphics.Rect r4, $r8, $r10, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r48, r51, r52, r53, r54, r55, r57;
        int i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, $i22, i23, $i24, i25, $i26, i27, i28, $i29, $i30, $i32, i33, i34;
        android.app.WindowConfiguration $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r36, $r46, $r47, $r49;
        byte $b3, b31;
        boolean $z0, $z1, $z2, $z4, $z5, z6, z7;
        android.graphics.Rect[] $r27, $r31;
        com.android.server.wm.DisplayContent $r37, $r41;
        android.view.DisplayInfo r50;
        com.android.server.wm.TaskDisplayArea r56;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.content.res.Configuration;

        r50 := @parameter2: android.view.DisplayInfo;

        r3 := @parameter3: com.android.server.wm.ActivityRecord$CompatDisplayInsets;

        $r5 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i20 = virtualinvoke $r5.<android.app.WindowConfiguration: int getWindowingMode()>();

        i21 = i20;

        if i20 != 0 goto label01;

        $r49 = r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i21 = virtualinvoke $r49.<android.app.WindowConfiguration: int getWindowingMode()>();

     label01:
        $i2 = r1.<android.content.res.Configuration: int densityDpi>;

        f0 = (float) $i2;

        f11 = f0;

        $b3 = f0 cmpl 0.0F;

        if $b3 != 0 goto label02;

        $i19 = r2.<android.content.res.Configuration: int densityDpi>;

        f11 = (float) $i19;

     label02:
        f12 = f11 * 0.00625F;

        $r6 = r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r51 = virtualinvoke $r6.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        $r7 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r52 = virtualinvoke $r7.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        if r52 == null goto label04;

        $z5 = virtualinvoke r52.<android.graphics.Rect: boolean isEmpty()>();

        if $z5 == 0 goto label03;

        goto label04;

     label03:
        $r48 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r48.<android.graphics.Rect: void set(android.graphics.Rect)>(r52);

        z6 = virtualinvoke r51.<android.graphics.Rect: boolean contains(android.graphics.Rect)>(r52);

        goto label05;

     label04:
        $r8 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r51);

        z6 = 1;

     label05:
        if r3 == null goto label06;

        z7 = 1;

        goto label07;

     label06:
        z7 = 0;

     label07:
        $r9 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r53 = virtualinvoke $r9.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        if r53 == null goto label08;

        r54 = r53;

        $z4 = virtualinvoke r53.<android.graphics.Rect: boolean isEmpty()>();

        if $z4 == 0 goto label13;

     label08:
        $r11 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r10 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r11.<android.app.WindowConfiguration: void setAppBounds(android.graphics.Rect)>($r10);

        $r12 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r4 = virtualinvoke $r12.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        r54 = r4;

        if z7 != 0 goto label13;

        r54 = r4;

        if i21 == 5 goto label13;

        if z6 == 0 goto label09;

        $r47 = r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r55 = virtualinvoke $r47.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        goto label12;

     label09:
        r56 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r56 == null goto label10;

        $r46 = virtualinvoke r56.<com.android.server.wm.TaskDisplayArea: android.app.WindowConfiguration getWindowConfiguration()>();

        r57 = virtualinvoke $r46.<android.app.WindowConfiguration: android.graphics.Rect getAppBounds()>();

        goto label11;

     label10:
        r57 = null;

     label11:
        r55 = r57;

     label12:
        r54 = r4;

        if r55 == null goto label13;

        r54 = r4;

        $z2 = virtualinvoke r55.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 != 0 goto label13;

        virtualinvoke r4.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r55);

        r54 = r4;

     label13:
        $i22 = r1.<android.content.res.Configuration: int screenWidthDp>;

        if $i22 == 0 goto label14;

        $i18 = r1.<android.content.res.Configuration: int screenHeightDp>;

        if $i18 != 0 goto label28;

     label14:
        if z7 != 0 goto label15;

        $z1 = staticinvoke <android.app.WindowConfiguration: boolean isFloating(int)>(i21);

        if $z1 == 0 goto label15;

        $r43 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        $r42 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r43.<android.graphics.Rect: void set(android.graphics.Rect)>($r42);

        $r45 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        $r44 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r45.<android.graphics.Rect: void set(android.graphics.Rect)>($r44);

        goto label22;

     label15:
        if z7 != 0 goto label19;

        if r50 != null goto label16;

        $r41 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r41 == null goto label19;

     label16:
        if r50 == null goto label17;

        goto label18;

     label17:
        $r37 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        r50 = virtualinvoke $r37.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

     label18:
        $r40 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        $r39 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        $r38 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        specialinvoke r0.<com.android.server.wm.Task: void calculateInsetFrames(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayInfo)>($r40, $r39, $r38, r50);

        goto label22;

     label19:
        $r13 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i1 = virtualinvoke $r13.<android.app.WindowConfiguration: int getRotation()>();

        i23 = i1;

        if i1 != -1 goto label20;

        $r36 = r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i23 = virtualinvoke $r36.<android.app.WindowConfiguration: int getRotation()>();

     label20:
        if i23 == -1 goto label21;

        if z7 == 0 goto label21;

        $r23 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        $r22 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r23.<android.graphics.Rect: void set(android.graphics.Rect)>($r22);

        $r25 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        $r24 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        virtualinvoke $r25.<android.graphics.Rect: void set(android.graphics.Rect)>($r24);

        $r26 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        virtualinvoke r3.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: void getBoundsByRotation(android.graphics.Rect,int)>($r26, i23);

        $r30 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        $r29 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        $r27 = r3.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: android.graphics.Rect[] mNonDecorInsets>;

        $r28 = $r27[i23];

        staticinvoke <com.android.server.wm.Task: void intersectWithInsetsIfFits(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r30, $r29, $r28);

        $r34 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        $r33 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        $r31 = r3.<com.android.server.wm.ActivityRecord$CompatDisplayInsets: android.graphics.Rect[] mStableInsets>;

        $r32 = $r31[i23];

        staticinvoke <com.android.server.wm.Task: void intersectWithInsetsIfFits(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r34, $r33, $r32);

        $r35 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        virtualinvoke r54.<android.graphics.Rect: void set(android.graphics.Rect)>($r35);

        goto label22;

     label21:
        $r14 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        virtualinvoke $r14.<android.graphics.Rect: void set(android.graphics.Rect)>(r54);

        $r15 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        virtualinvoke $r15.<android.graphics.Rect: void set(android.graphics.Rect)>(r54);

     label22:
        $i24 = r1.<android.content.res.Configuration: int screenWidthDp>;

        if $i24 != 0 goto label24;

        $r21 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        $i16 = virtualinvoke $r21.<android.graphics.Rect: int width()>();

        $f9 = (float) $i16;

        $f10 = $f9 / f12;

        i25 = (int) $f10;

        if z6 == 0 goto label23;

        if z7 != 0 goto label23;

        $i17 = r2.<android.content.res.Configuration: int screenWidthDp>;

        i25 = staticinvoke <java.lang.Math: int min(int,int)>(i25, $i17);

        goto label23;

     label23:
        r1.<android.content.res.Configuration: int screenWidthDp> = i25;

     label24:
        $i26 = r1.<android.content.res.Configuration: int screenHeightDp>;

        if $i26 != 0 goto label27;

        $r20 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpStableBounds>;

        $i14 = virtualinvoke $r20.<android.graphics.Rect: int height()>();

        $f7 = (float) $i14;

        $f8 = $f7 / f12;

        i27 = (int) $f8;

        if z6 == 0 goto label25;

        if z7 != 0 goto label25;

        $i15 = r2.<android.content.res.Configuration: int screenHeightDp>;

        i28 = staticinvoke <java.lang.Math: int min(int,int)>(i27, $i15);

        goto label26;

     label25:
        i28 = i27;

     label26:
        r1.<android.content.res.Configuration: int screenHeightDp> = i28;

     label27:
        $i29 = r1.<android.content.res.Configuration: int smallestScreenWidthDp>;

        if $i29 != 0 goto label28;

        $z0 = staticinvoke <android.app.WindowConfiguration: boolean isFloating(int)>(i21);

        if $z0 == 0 goto label28;

        $r18 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        $i10 = virtualinvoke $r18.<android.graphics.Rect: int width()>();

        $r19 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpFullBounds>;

        $i11 = virtualinvoke $r19.<android.graphics.Rect: int height()>();

        $i12 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i11);

        $f5 = (float) $i12;

        $f6 = $f5 / f12;

        $i13 = (int) $f6;

        r1.<android.content.res.Configuration: int smallestScreenWidthDp> = $i13;

     label28:
        $i30 = r1.<android.content.res.Configuration: int orientation>;

        if $i30 != 0 goto label31;

        $i9 = r1.<android.content.res.Configuration: int screenWidthDp>;

        $i8 = r1.<android.content.res.Configuration: int screenHeightDp>;

        if $i9 > $i8 goto label29;

        b31 = 1;

        goto label30;

     label29:
        b31 = 2;

     label30:
        r1.<android.content.res.Configuration: int orientation> = b31;

     label31:
        $i32 = r1.<android.content.res.Configuration: int screenLayout>;

        if $i32 != 0 goto label32;

        $r16 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        $i4 = virtualinvoke $r16.<android.graphics.Rect: int width()>();

        $f1 = (float) $i4;

        $f2 = $f1 / f12;

        i33 = (int) $f2;

        $r17 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpNonDecorBounds>;

        $i5 = virtualinvoke $r17.<android.graphics.Rect: int height()>();

        $f3 = (float) $i5;

        $f4 = $f3 / f12;

        i34 = (int) $f4;

        $i6 = r2.<android.content.res.Configuration: int screenLayout>;

        $i7 = staticinvoke <com.android.server.wm.Task: int computeScreenLayoutOverride(int,int,int)>($i6, i33, i34);

        r1.<android.content.res.Configuration: int screenLayout> = $i7;

     label32:
        return;
    }

    void computeConfigResourceOverrides(android.content.res.Configuration, android.content.res.Configuration, com.android.server.wm.ActivityRecord$CompatDisplayInsets)
    {
        com.android.server.wm.Task r0;
        android.content.res.Configuration r1, r2;
        com.android.server.wm.ActivityRecord$CompatDisplayInsets r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.content.res.Configuration;

        r3 := @parameter2: com.android.server.wm.ActivityRecord$CompatDisplayInsets;

        if r3 == null goto label1;

        staticinvoke <com.android.server.wm.Task: void invalidateAppBoundsConfig(android.content.res.Configuration)>(r1);

     label1:
        virtualinvoke r0.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration,android.view.DisplayInfo,com.android.server.wm.ActivityRecord$CompatDisplayInsets)>(r1, r2, null, r3);

        return;
    }

    void computeFullscreenBounds(android.graphics.Rect, com.android.server.wm.ActivityRecord, android.graphics.Rect, int)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, r3;
        com.android.server.wm.ActivityRecord r2, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean $z0;
        android.content.res.Configuration $r4;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: com.android.server.wm.ActivityRecord;

        r3 := @parameter2: android.graphics.Rect;

        i11 := @parameter3: int;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean handlesOrientationChangeFromDescendant()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r5 = r2;

        if r2 != null goto label2;

        r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity(boolean)>(0);

     label2:
        $r4 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        i12 = $r4.<android.content.res.Configuration: int orientation>;

        if i12 != 0 goto label4;

        if r5 != null goto label3;

        goto label4;

     label3:
        i12 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: int getRequestedConfigurationOrientation()>();

        goto label4;

     label4:
        if i12 == 0 goto label8;

        if i12 != i11 goto label5;

        goto label8;

     label5:
        i0 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        i13 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f2 = (float) i13;

        $f1 = (float) i0;

        f0 = $f2 / $f1;

        if i12 != 2 goto label6;

        $f5 = (float) i0;

        $f6 = $f5 / f0;

        i14 = (int) $f6;

        $i6 = virtualinvoke r3.<android.graphics.Rect: int centerY()>();

        $i7 = i14 / 2;

        i15 = $i6 - $i7;

        $i10 = r3.<android.graphics.Rect: int left>;

        $i9 = r3.<android.graphics.Rect: int right>;

        $i8 = i15 + i14;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i10, i15, $i9, $i8);

        goto label7;

     label6:
        $f3 = (float) i13;

        $f4 = $f3 * f0;

        i16 = (int) $f4;

        $i1 = virtualinvoke r3.<android.graphics.Rect: int centerX()>();

        $i2 = i16 / 2;

        i17 = $i1 - $i2;

        $i5 = r3.<android.graphics.Rect: int top>;

        $i4 = i17 + i16;

        $i3 = r3.<android.graphics.Rect: int bottom>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(i17, $i5, $i4, $i3);

     label7:
        return;

     label8:
        return;
    }

    android.view.RemoteAnimationTarget createRemoteAnimationTarget(com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord r2;
        android.view.RemoteAnimationTarget r3;

        r0 := @this: com.android.server.wm.Task;

        r2 := @parameter0: com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopMostActivity()>();

        if r1 == null goto label1;

        r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: android.view.RemoteAnimationTarget createRemoteAnimationTarget(com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord)>(r2);

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    boolean cropWindowsToStackBounds()
    {
        com.android.server.wm.Task r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isActivityTypeHome()>();

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r0.<com.android.server.wm.Task: boolean isActivityTypeRecents()>();

        if $z4 == 0 goto label3;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        $z1 = r1.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z1 == 0 goto label2;

        r1 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.Task getTopMostTask()>();

        goto label2;

     label2:
        if r0 == r1 goto label4;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isDescendantOf(com.android.server.wm.WindowContainer)>(r1);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        return $z3;

     label4:
        return 0;
    }

    void dontAnimateDimExit()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.Dimmer $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.Dimmer mDimmer>;

        virtualinvoke $r1.<com.android.server.wm.Dimmer: void dontAnimateExit()>();

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.Task r0, $r34, $r35, r63, r64;
        java.io.PrintWriter r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r9, $r11, $r15, $r16, $r21, $r25, $r26, $r31, $r37, $r39, $r45, $r51, $r53, $r54, $r55, r56, r57, $r58, $r62;
        android.service.voice.IVoiceInteractionSession $r7, $r8;
        com.android.internal.app.IVoiceInteractor $r10, $r52;
        android.content.Intent $r12, $r43, $r49, $r59;
        android.content.ComponentName $r13, $r14, $r36, $r38;
        com.android.server.wm.WindowProcessController $r17, $r32;
        java.lang.StringBuilder $r18, $r22, $r27, $r40, $r46;
        long $l11, $l12, $l13;
        java.lang.CharSequence $r33, $r66;
        com.android.server.wm.WindowList $r65;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.io.PrintWriter;

        r56 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("userId=");

        $i0 = r0.<com.android.server.wm.Task: int mUserId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" effectiveUid=");

        $i1 = r0.<com.android.server.wm.Task: int effectiveUid>;

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r1, $i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCallingUid=");

        $i2 = r0.<com.android.server.wm.Task: int mCallingUid>;

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r1, $i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mUserSetupComplete=");

        $z0 = r0.<com.android.server.wm.Task: boolean mUserSetupComplete>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCallingPackage=");

        $r2 = r0.<com.android.server.wm.Task: java.lang.String mCallingPackage>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCallingFeatureId=");

        $r3 = r0.<com.android.server.wm.Task: java.lang.String mCallingFeatureId>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        $r4 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        if $r4 != null goto label01;

        $r55 = r0.<com.android.server.wm.Task: java.lang.String rootAffinity>;

        if $r55 == null goto label04;

     label01:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("affinity=");

        $r5 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        r57 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        if r57 == null goto label03;

        $r54 = r0.<com.android.server.wm.Task: java.lang.String rootAffinity>;

        $z11 = virtualinvoke r57.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        if $z11 != 0 goto label02;

        goto label03;

     label02:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        goto label04;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" root=");

        $r6 = r0.<com.android.server.wm.Task: java.lang.String rootAffinity>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

     label04:
        $r58 = r0.<com.android.server.wm.Task: java.lang.String mWindowLayoutAffinity>;

        if $r58 == null goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("windowLayoutAffinity=");

        $r53 = r0.<com.android.server.wm.Task: java.lang.String mWindowLayoutAffinity>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r53);

     label05:
        $r7 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if $r7 != null goto label06;

        $r52 = r0.<com.android.server.wm.Task: com.android.internal.app.IVoiceInteractor voiceInteractor>;

        if $r52 == null goto label07;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("VOICE: session=0x");

        $r8 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" interactor=0x");

        $r10 = r0.<com.android.server.wm.Task: com.android.internal.app.IVoiceInteractor voiceInteractor>;

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

     label07:
        $r59 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if $r59 == null goto label08;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("intent={");

        $r49 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        virtualinvoke $r49.<android.content.Intent: void toShortString(java.lang.StringBuilder,boolean,boolean,boolean,boolean)>($r46, 0, 1, 0, 0);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r51);

     label08:
        $r12 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        if $r12 == null goto label09;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("affinityIntent={");

        $r43 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        virtualinvoke $r43.<android.content.Intent: void toShortString(java.lang.StringBuilder,boolean,boolean,boolean,boolean)>($r40, 0, 1, 0, 0);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r45 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r45);

     label09:
        $r13 = r0.<com.android.server.wm.Task: android.content.ComponentName origActivity>;

        if $r13 == null goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("origActivity=");

        $r38 = r0.<com.android.server.wm.Task: android.content.ComponentName origActivity>;

        $r39 = virtualinvoke $r38.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r39);

     label10:
        $r14 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        if $r14 == null goto label11;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mActivityComponent=");

        $r36 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        $r37 = virtualinvoke $r36.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

     label11:
        $z1 = r0.<com.android.server.wm.Task: boolean autoRemoveRecents>;

        if $z1 != 0 goto label12;

        $z9 = r0.<com.android.server.wm.Task: boolean isPersistable>;

        if $z9 != 0 goto label12;

        $z10 = virtualinvoke r0.<com.android.server.wm.Task: boolean isActivityTypeStandard()>();

        if $z10 != 0 goto label13;

     label12:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("autoRemoveRecents=");

        $z12 = r0.<com.android.server.wm.Task: boolean autoRemoveRecents>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" isPersistable=");

        $z13 = r0.<com.android.server.wm.Task: boolean isPersistable>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" activityType=");

        $i17 = virtualinvoke r0.<com.android.server.wm.Task: int getActivityType()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i17);

     label13:
        $z14 = r0.<com.android.server.wm.Task: boolean rootWasReset>;

        if $z14 != 0 goto label14;

        $z7 = r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity>;

        if $z7 != 0 goto label14;

        $z8 = r0.<com.android.server.wm.Task: boolean mReuseTask>;

        if $z8 != 0 goto label14;

        $i16 = r0.<com.android.server.wm.Task: int mLockTaskAuth>;

        if $i16 == 1 goto label15;

     label14:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("rootWasReset=");

        $z15 = r0.<com.android.server.wm.Task: boolean rootWasReset>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mNeverRelinquishIdentity=");

        $z16 = r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mReuseTask=");

        $z17 = r0.<com.android.server.wm.Task: boolean mReuseTask>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLockTaskAuth=");

        $r62 = virtualinvoke r0.<com.android.server.wm.Task: java.lang.String lockTaskAuthToString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r62);

     label15:
        $i18 = r0.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        $i19 = r0.<com.android.server.wm.Task: int mTaskId>;

        if $i18 != $i19 goto label16;

        $i14 = r0.<com.android.server.wm.Task: int mPrevAffiliateTaskId>;

        if $i14 != -1 goto label16;

        $r34 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mPrevAffiliate>;

        if $r34 != null goto label16;

        $i15 = r0.<com.android.server.wm.Task: int mNextAffiliateTaskId>;

        if $i15 != -1 goto label16;

        $r35 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate>;

        if $r35 == null goto label21;

     label16:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("affiliation=");

        $i20 = r0.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" prevAffiliation=");

        $i21 = r0.<com.android.server.wm.Task: int mPrevAffiliateTaskId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i21);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" (");

        r63 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mPrevAffiliate>;

        if r63 != null goto label17;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("null");

        goto label18;

     label17:
        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r63);

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r15);

     label18:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(") nextAffiliation=");

        $i6 = r0.<com.android.server.wm.Task: int mNextAffiliateTaskId>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" (");

        r64 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate>;

        if r64 != null goto label19;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("null");

        goto label20;

     label19:
        $i7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r64);

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r16);

     label20:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(")");

     label21:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Activities=");

        $r65 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r65);

        $z18 = r0.<com.android.server.wm.Task: boolean askedCompatMode>;

        if $z18 == 0 goto label22;

        $z5 = r0.<com.android.server.wm.Task: boolean inRecents>;

        if $z5 == 0 goto label22;

        $z6 = r0.<com.android.server.wm.Task: boolean isAvailable>;

        if $z6 != 0 goto label23;

     label22:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("askedCompatMode=");

        $z19 = r0.<com.android.server.wm.Task: boolean askedCompatMode>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z19);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" inRecents=");

        $z20 = r0.<com.android.server.wm.Task: boolean inRecents>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" isAvailable=");

        $z21 = r0.<com.android.server.wm.Task: boolean isAvailable>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z21);

     label23:
        $r66 = r0.<com.android.server.wm.Task: java.lang.CharSequence lastDescription>;

        if $r66 == null goto label24;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("lastDescription=");

        $r33 = r0.<com.android.server.wm.Task: java.lang.CharSequence lastDescription>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r33);

     label24:
        $r17 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowProcessController mRootProcess>;

        if $r17 == null goto label25;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mRootProcess=");

        $r32 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowProcessController mRootProcess>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r32);

     label25:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("taskId=");

        $i8 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stackId=");

        $i9 = virtualinvoke r0.<com.android.server.wm.Task: int getRootTaskId()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mHasBeenVisible=");

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean getHasBeenVisible()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mResizeMode=");

        $i10 = r0.<com.android.server.wm.Task: int mResizeMode>;

        $r26 = staticinvoke <android.content.pm.ActivityInfo: java.lang.String resizeModeToString(int)>($i10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r26);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSupportsPictureInPicture=");

        $z3 = r0.<com.android.server.wm.Task: boolean mSupportsPictureInPicture>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" isResizeable=");

        $z4 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r56);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("lastActiveTime=");

        $l11 = r0.<com.android.server.wm.Task: long lastActiveTime>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l11);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (inactive for ");

        $l12 = virtualinvoke r0.<com.android.server.wm.Task: long getInactiveDuration()>();

        $l13 = $l12 / 1000L;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s)");

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.Task r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r9, $r11, $r22, r26;
        boolean z0;
        com.android.server.wm.WindowContainer r3;
        java.lang.StringBuilder $r5, $r12, $r18;
        android.graphics.Rect $r8;
        com.android.server.wm.WindowList $r15, $r16;
        int $i0, i1;
        java.lang.Object $r17;
        com.android.server.wm.ActivityRecord $r23;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bounds=");

        $r8 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        $r9 = virtualinvoke $r8.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r26 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r15.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r16 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r17 = virtualinvoke $r16.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wm.WindowContainer) $r17;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        $r23 = virtualinvoke r3.<com.android.server.wm.WindowContainer: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if $r23 != null goto label2;

        virtualinvoke r3.<com.android.server.wm.WindowContainer: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r26, z0);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    void fillTaskInfo(android.app.TaskInfo)
    {
        com.android.server.wm.Task r0;
        android.app.TaskInfo r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.app.TaskInfo;

        virtualinvoke r0.<com.android.server.wm.Task: void fillTaskInfo(android.app.TaskInfo,boolean)>(r1, 1);

        return;
    }

    void fillTaskInfo(android.app.TaskInfo, boolean)
    {
        com.android.server.wm.Task r0, r33;
        android.app.TaskInfo r1;
        boolean z0, $z1, $z2, $z3, z4;
        com.android.server.wm.Task$TaskActivitiesReport $r2, $r4, $r8, $r15, $r19, $r21, $r29, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i6, i7, i8;
        android.content.Intent $r3, $r23, $r24, r26, r27, $r28;
        com.android.server.wm.ActivityRecord $r5, $r16, $r20, $r22, r25, r30, r34, $r36;
        android.content.ComponentName $r6, $r7, r31, r32;
        long $l5;
        android.app.ActivityManager$TaskDescription $r9, $r10;
        android.content.res.Configuration $r11, $r12;
        com.android.server.wm.WindowContainer$RemoteToken $r13;
        android.window.WindowContainerToken $r14;
        android.app.PictureInPictureParams $r17, $r18;
        android.content.pm.ActivityInfo r37;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.app.TaskInfo;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        specialinvoke r0.<com.android.server.wm.Task: void getNumRunningActivities(com.android.server.wm.Task$TaskActivitiesReport)>($r2);

        $i0 = r0.<com.android.server.wm.Task: int mUserId>;

        r1.<android.app.TaskInfo: int userId> = $i0;

        $i1 = virtualinvoke r0.<com.android.server.wm.Task: int getRootTaskId()>();

        r1.<android.app.TaskInfo: int stackId> = $i1;

        $i2 = r0.<com.android.server.wm.Task: int mTaskId>;

        r1.<android.app.TaskInfo: int taskId> = $i2;

        $i3 = virtualinvoke r0.<com.android.server.wm.Task: int getDisplayId()>();

        r1.<android.app.TaskInfo: int displayId> = $i3;

        r25 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        i7 = 0;

        if r25 == null goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        r1.<android.app.TaskInfo: boolean isRunning> = z4;

        r26 = virtualinvoke r0.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

        if r26 != null goto label03;

        goto label04;

     label03:
        i7 = virtualinvoke r26.<android.content.Intent: int getFlags()>();

     label04:
        if r26 != null goto label05;

        $r24 = new android.content.Intent;

        specialinvoke $r24.<android.content.Intent: void <init>()>();

        r27 = $r24;

        goto label07;

     label05:
        if z0 == 0 goto label06;

        r27 = virtualinvoke r26.<android.content.Intent: android.content.Intent cloneFilter()>();

        goto label07;

     label06:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(android.content.Intent)>(r26);

        r27 = $r3;

     label07:
        r1.<android.app.TaskInfo: android.content.Intent baseIntent> = r27;

        $r28 = r1.<android.app.TaskInfo: android.content.Intent baseIntent>;

        virtualinvoke $r28.<android.content.Intent: android.content.Intent setFlags(int)>(i7);

        $r29 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        r30 = $r29.<com.android.server.wm.Task$TaskActivitiesReport: com.android.server.wm.ActivityRecord base>;

        if r30 == null goto label08;

        $r21 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        $r22 = $r21.<com.android.server.wm.Task$TaskActivitiesReport: com.android.server.wm.ActivityRecord base>;

        $r23 = $r22.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        r31 = virtualinvoke $r23.<android.content.Intent: android.content.ComponentName getComponent()>();

        goto label09;

     label08:
        r31 = null;

     label09:
        r1.<android.app.TaskInfo: android.content.ComponentName baseActivity> = r31;

        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        $r5 = $r4.<com.android.server.wm.Task$TaskActivitiesReport: com.android.server.wm.ActivityRecord top>;

        if $r5 == null goto label10;

        $r19 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        $r20 = $r19.<com.android.server.wm.Task$TaskActivitiesReport: com.android.server.wm.ActivityRecord top>;

        r32 = $r20.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        goto label11;

     label10:
        r32 = null;

     label11:
        r1.<android.app.TaskInfo: android.content.ComponentName topActivity> = r32;

        $r6 = r0.<com.android.server.wm.Task: android.content.ComponentName origActivity>;

        r1.<android.app.TaskInfo: android.content.ComponentName origActivity> = $r6;

        $r7 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        r1.<android.app.TaskInfo: android.content.ComponentName realActivity> = $r7;

        $r8 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        $i4 = $r8.<com.android.server.wm.Task$TaskActivitiesReport: int numActivities>;

        r1.<android.app.TaskInfo: int numActivities> = $i4;

        $l5 = r0.<com.android.server.wm.Task: long lastActiveTime>;

        r1.<android.app.TaskInfo: long lastActiveTime> = $l5;

        $r9 = new android.app.ActivityManager$TaskDescription;

        $r10 = virtualinvoke r0.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

        specialinvoke $r9.<android.app.ActivityManager$TaskDescription: void <init>(android.app.ActivityManager$TaskDescription)>($r10);

        r1.<android.app.TaskInfo: android.app.ActivityManager$TaskDescription taskDescription> = $r9;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean supportsSplitScreenWindowingMode()>();

        r1.<android.app.TaskInfo: boolean supportsSplitScreenMultiWindow> = $z1;

        $r11 = r1.<android.app.TaskInfo: android.content.res.Configuration configuration>;

        $r12 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r11.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r12);

        $r13 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        $r14 = virtualinvoke $r13.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        r1.<android.app.TaskInfo: android.window.WindowContainerToken token> = $r14;

        r33 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getTopMostTask()>();

        if r33 == null goto label12;

        i8 = r33.<com.android.server.wm.Task: int mResizeMode>;

        goto label13;

     label12:
        i8 = r0.<com.android.server.wm.Task: int mResizeMode>;

     label13:
        r1.<android.app.TaskInfo: int resizeMode> = i8;

        $i6 = virtualinvoke r33.<com.android.server.wm.Task: int getActivityType()>();

        r1.<android.app.TaskInfo: int topActivityType> = $i6;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        r1.<android.app.TaskInfo: boolean isResizeable> = $z2;

        r34 = virtualinvoke r33.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

        if r34 == null goto label15;

        $r17 = r34.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        $z3 = virtualinvoke $r17.<android.app.PictureInPictureParams: boolean empty()>();

        if $z3 == 0 goto label14;

        goto label15;

     label14:
        $r18 = r34.<com.android.server.wm.ActivityRecord: android.app.PictureInPictureParams pictureInPictureArgs>;

        r1.<android.app.TaskInfo: android.app.PictureInPictureParams pictureInPictureParams> = $r18;

        goto label16;

     label15:
        r1.<android.app.TaskInfo: android.app.PictureInPictureParams pictureInPictureParams> = null;

     label16:
        $r35 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        $r36 = $r35.<com.android.server.wm.Task$TaskActivitiesReport: com.android.server.wm.ActivityRecord top>;

        if $r36 == null goto label17;

        $r15 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$TaskActivitiesReport mReuseActivitiesReport>;

        $r16 = $r15.<com.android.server.wm.Task$TaskActivitiesReport: com.android.server.wm.ActivityRecord top>;

        r37 = $r16.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

        goto label18;

     label17:
        r37 = null;

     label18:
        r1.<android.app.TaskInfo: android.content.pm.ActivityInfo topActivityInfo> = r37;

        return;
    }

    boolean fillsParent()
    {
        com.android.server.wm.Task r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean matchParentBounds()>();

        return $z0;
    }

    com.android.server.wm.ActivityRecord findActivityInHistory(android.content.ComponentName)
    {
        com.android.server.wm.Task r0;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.'-$$Lambda$Task$BP51Xfr33NBfsJ4rKO04RomX2Tg' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        android.content.ComponentName r4;
        com.android.server.wm.ActivityRecord r5;
        java.util.function.BiPredicate r6;

        r0 := @this: com.android.server.wm.Task;

        r4 := @parameter0: android.content.ComponentName;

        $r2 = <com.android.server.wm._$$Lambda$Task$BP51Xfr33NBfsJ4rKO04RomX2Tg: com.android.server.wm.'-$$Lambda$Task$BP51Xfr33NBfsJ4rKO04RomX2Tg' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r6 = (java.util.function.BiPredicate) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r3, r4);

        r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        return r5;
    }

    void forAllLeafTasks(java.util.function.Consumer, boolean)
    {
        com.android.server.wm.Task r0, r9, r10;
        java.util.function.Consumer r1;
        boolean z0, z2, z3, z4;
        int i0, i1, i2;
        com.android.server.wm.WindowList $r2, $r3, $r6;
        java.lang.Object $r4, $r7;
        com.android.server.wm.WindowContainer $r5, $r8;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.util.function.Consumer;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        z2 = 1;

        if z0 == 0 goto label4;

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r6 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.WindowContainer) $r7;

        r9 = virtualinvoke $r8.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r9 == null goto label2;

        z2 = 0;

        virtualinvoke r9.<com.android.server.wm.Task: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r1, z0);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        z3 = z2;

        goto label7;

     label4:
        i2 = 0;

        z4 = 1;

     label5:
        z3 = z4;

        if i2 >= i0 goto label7;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        $r5 = (com.android.server.wm.WindowContainer) $r4;

        r10 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r10 == null goto label6;

        z4 = 0;

        virtualinvoke r10.<com.android.server.wm.Task: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r1, z0);

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        if z3 == 0 goto label8;

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>(r0);

     label8:
        return;
    }

    boolean forAllLeafTasks(java.util.function.Function)
    {
        com.android.server.wm.Task r0, r2;
        java.util.function.Function r1;
        com.android.server.wm.WindowList $r3, $r6;
        int $i0, i1;
        java.lang.Object $r4, $r7;
        java.lang.Boolean $r5;
        boolean $z0, $z1, z2;
        com.android.server.wm.WindowContainer $r8;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.util.function.Function;

        z2 = 1;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r6 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.WindowContainer) $r7;

        r2 = virtualinvoke $r8.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r2 == null goto label2;

        z2 = 0;

        $z1 = virtualinvoke r2.<com.android.server.wm.Task: boolean forAllLeafTasks(java.util.function.Function)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        if z2 == 0 goto label4;

        $r4 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label4:
        return 0;
    }

    void forAllTasks(java.util.function.Consumer, boolean)
    {
        com.android.server.wm.Task r0;
        java.util.function.Consumer r1;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.util.function.Consumer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void forAllTasks(java.util.function.Consumer,boolean)>(r1, z0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>(r0);

        return;
    }

    boolean forAllTasks(java.util.function.Function)
    {
        com.android.server.wm.Task r0;
        java.util.function.Function r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.util.function.Function;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean forAllTasks(java.util.function.Function)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r0);

        $r3 = (java.lang.Boolean) $r2;

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    void forceWindowsScaleable(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r2, $r4, $r9;
        com.android.server.wm.WindowList $r3, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        com.android.server.wm.WindowContainer $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void openSurfaceTransaction()>();

     label1:
        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label5;

     label3:
        $r5 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r7 = (com.android.server.wm.WindowContainer) $r6;

        virtualinvoke $r7.<com.android.server.wm.WindowContainer: void forceWindowsScaleableInTransaction(boolean)>(z0);

     label4:
        i1 = i1 + -1;

        goto label2;

     label5:
        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("forceWindowsScaleable");

        return;

     label6:
        $r8 := @caughtexception;

        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("forceWindowsScaleable");

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public int getActivityType()
    {
        com.android.server.wm.Task r0;
        int i0, $i1;
        boolean $z0;
        com.android.server.wm.WindowContainer $r1;

        r0 := @this: com.android.server.wm.Task;

        i0 = specialinvoke r0.<com.android.server.wm.WindowContainer: int getActivityType()>();

        if i0 != 0 goto label2;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasChild()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getTopChild()>();

        $i1 = virtualinvoke $r1.<com.android.server.wm.WindowContainer: int getActivityType()>();

        return $i1;

     label2:
        return i0;
    }

    android.graphics.Rect getAnimationBounds(int)
    {
        com.android.server.wm.Task r0;
        int i0;
        android.graphics.Rect $r1, $r4;
        com.android.server.wm.ActivityStack $r2, $r3;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: android.graphics.Rect getBounds()>();

        return $r4;

     label1:
        $r1 = specialinvoke r0.<com.android.server.wm.WindowContainer: android.graphics.Rect getAnimationBounds(int)>(i0);

        return $r1;
    }

    void getAnimationFrames(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, r2, r3, r4;
        com.android.server.wm.WindowState r5;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Rect;

        r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowState getTopVisibleAppMainWindow()>();

        if r5 == null goto label1;

        virtualinvoke r5.<com.android.server.wm.WindowState: void getAnimationFrames(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, r2, r3, r4);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void getAnimationFrames(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r1, r2, r3, r4);

     label2:
        return;
    }

    public android.view.SurfaceControl getAnimationLeashParent()
    {
        com.android.server.wm.Task r0;
        boolean $z0;
        android.view.SurfaceControl $r1, $r2;

        r0 := @this: com.android.server.wm.Task;

        $z0 = <com.android.server.wm.WindowManagerService: boolean sHierarchicalAnimations>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<com.android.server.wm.WindowContainer: android.view.SurfaceControl getAnimationLeashParent()>();

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl getAppAnimationLayer(int)>(2);

        return $r1;
    }

    android.content.Intent getBaseIntent()
    {
        com.android.server.wm.Task r0, r3;
        android.content.Intent r1, r2, r4;

        r0 := @this: com.android.server.wm.Task;

        r1 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r1 == null goto label1;

        return r1;

     label1:
        r2 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        if r2 == null goto label2;

        return r2;

     label2:
        r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getTopMostTask()>();

        if r3 == r0 goto label3;

        if r3 == null goto label3;

        r4 = virtualinvoke r3.<com.android.server.wm.Task: android.content.Intent getBaseIntent()>();

        goto label4;

     label3:
        r4 = null;

     label4:
        return r4;
    }

    int getDescendantTaskCount()
    {
        com.android.server.wm.Task r0;
        int[] r1;
        com.android.internal.util.function.pooled.PooledConsumer r2;
        com.android.server.wm.'-$$Lambda$Task$Cht49HFU7XWpGlhw2YJ9bd8TX-Q' $r3;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r4;
        int $i0;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.wm.Task;

        r1 = newarray (int)[1];

        r1[0] = 0;

        $r3 = <com.android.server.wm._$$Lambda$Task$Cht49HFU7XWpGlhw2YJ9bd8TX_Q: com.android.server.wm.'-$$Lambda$Task$Cht49HFU7XWpGlhw2YJ9bd8TX-Q' INSTANCE>;

        $r4 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/Task;");

        r5 = (java.util.function.BiConsumer) $r3;

        r2 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r5, $r4, r1);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllLeafTasks(java.util.function.Consumer,boolean)>(r2, 0);

        interfaceinvoke r2.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $i0 = r1[0];

        return $i0;
    }

    void getDimBounds(android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, $r4, $r6, $r7, $r8, $r9;
        boolean[] r2;
        com.android.server.wm.ActivityStack $r3, $r5, $r10;
        boolean $z0, $z2, $z3, z4, $z5;
        com.android.server.wm.'-$$Lambda$Task$SAhnD6goWlY1lXYn6fWba8f2JLs' $r11;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r12;
        com.android.server.wm.DockedStackDividerController $r13;
        com.android.server.wm.DisplayContent r14;
        com.android.internal.util.function.pooled.PooledConsumer r15;
        com.android.internal.util.function.TriConsumer r16;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        r14 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r14 == null goto label1;

        $r13 = r14.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController mDividerControllerLocked>;

        $z3 = virtualinvoke $r13.<com.android.server.wm.DockedStackDividerController: boolean isResizing()>();

        if $z3 == 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        $z5 = virtualinvoke r0.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z5 == 0 goto label3;

        r2 = newarray (boolean)[1];

        r2[0] = 0;

        $r11 = <com.android.server.wm._$$Lambda$Task$SAhnD6goWlY1lXYn6fWba8f2JLs: com.android.server.wm.'-$$Lambda$Task$SAhnD6goWlY1lXYn6fWba8f2JLs' INSTANCE>;

        $r12 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r16 = (com.android.internal.util.function.TriConsumer) $r11;

        r15 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(com.android.internal.util.function.TriConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r16, $r12, r1, r2);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r15);

        interfaceinvoke r15.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        $z2 = r2[0];

        if $z2 == 0 goto label3;

        return;

     label3:
        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean matchParentBounds()>();

        if $z0 != 0 goto label5;

        if z4 == 0 goto label4;

        $r10 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r10.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>(r1);

        goto label6;

     label4:
        $r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r6 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect>;

        virtualinvoke $r5.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>($r6);

        $r7 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect>;

        $r8 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke $r7.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r8);

        $r9 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r9);

        goto label6;

     label5:
        $r4 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

     label6:
        return;
    }

    com.android.server.wm.Dimmer getDimmer()
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, $z2;
        com.android.server.wm.Dimmer $r1, $r2, $r3;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean inMultiWindowMode()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.Dimmer mDimmer>;

        return $r3;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isTranslucent(com.android.server.wm.ActivityRecord)>(null);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.Dimmer mDimmer>;

        return $r2;

     label3:
        $r1 = specialinvoke r0.<com.android.server.wm.WindowContainer: com.android.server.wm.Dimmer getDimmer()>();

        return $r1;
    }

    volatile com.android.server.wm.DisplayArea getDisplayArea()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.TaskDisplayArea $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        return $r1;
    }

    com.android.server.wm.TaskDisplayArea getDisplayArea()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.DisplayArea $r1;
        com.android.server.wm.TaskDisplayArea $r2;

        r0 := @this: com.android.server.wm.Task;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayArea getDisplayArea()>();

        $r2 = (com.android.server.wm.TaskDisplayArea) $r1;

        return $r2;
    }

    com.android.server.wm.DisplayContent getDisplayContent()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack r1;
        com.android.server.wm.DisplayContent r2;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r1 == null goto label1;

        if r1 == r0 goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label2;

     label1:
        r2 = specialinvoke r0.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayContent getDisplayContent()>();

     label2:
        return r2;
    }

    int getDisplayId()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.DisplayContent r1;
        int i0;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 == null goto label1;

        i0 = r1.<com.android.server.wm.DisplayContent: int mDisplayId>;

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    int getDragResizeMode()
    {
        com.android.server.wm.Task r0;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        $i0 = r0.<com.android.server.wm.Task: int mDragResizeMode>;

        return $i0;
    }

    public android.view.SurfaceControl getFreezeSnapshotTarget()
    {
        com.android.server.wm.Task r0;
        int i0, $i1;
        com.android.server.wm.DisplayContent $r1, $r5;
        com.android.server.wm.AppTransition $r2;
        boolean $z0, $z2;
        android.util.ArraySet $r3;
        java.lang.Integer $r4;
        com.android.server.wm.AppTransitionController $r6;
        android.view.SurfaceControl $r7;
        android.view.RemoteAnimationAdapter r9;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        i0 = virtualinvoke $r2.<com.android.server.wm.AppTransition: int getAppTransition()>();

        $z0 = staticinvoke <com.android.server.wm.AppTransition: boolean isChangeTransit(int)>(i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        $i1 = virtualinvoke r0.<com.android.server.wm.Task: int getActivityType()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        $r5 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $r6 = $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransitionController mAppTransitionController>;

        r9 = virtualinvoke $r6.<com.android.server.wm.AppTransitionController: android.view.RemoteAnimationAdapter getRemoteAnimationOverride(com.android.server.wm.WindowContainer,int,android.util.ArraySet)>(r0, i0, $r3);

        if r9 == null goto label2;

        $z2 = virtualinvoke r9.<android.view.RemoteAnimationAdapter: boolean getChangeNeedsSnapshot()>();

        if $z2 != 0 goto label2;

        return null;

     label2:
        $r7 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        return $r7;
    }

    boolean getHasBeenVisible()
    {
        com.android.server.wm.Task r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean mHasBeenVisible>;

        return $z0;
    }

    long getInactiveDuration()
    {
        com.android.server.wm.Task r0;
        long $l0, $l1, $l2;

        r0 := @this: com.android.server.wm.Task;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = r0.<com.android.server.wm.Task: long lastActiveTime>;

        $l2 = $l0 - $l1;

        return $l2;
    }

    android.graphics.Point getLastSurfaceSize()
    {
        com.android.server.wm.Task r0;
        android.graphics.Point $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize>;

        return $r1;
    }

    android.graphics.Rect getLaunchBounds()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack r1;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        android.app.WindowConfiguration $r2;
        android.graphics.Rect $r3, $r4, r5;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        r5 = null;

        if r1 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isActivityTypeStandardOrUndefined()>();

        if $z0 == 0 goto label4;

        if i0 == 1 goto label4;

        if i0 != 3 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z2 != 0 goto label2;

        goto label4;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z1 = virtualinvoke $r2.<android.app.WindowConfiguration: boolean persistTaskBounds()>();

        if $z1 != 0 goto label3;

        $r4 = virtualinvoke r1.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        return $r4;

     label3:
        $r3 = r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        return $r3;

     label4:
        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z3 == 0 goto label5;

        r5 = virtualinvoke r1.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

     label5:
        return r5;
    }

    com.android.server.wm.Task getMainWindowSizeChangeTask()
    {
        com.android.server.wm.Task r0, $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.Task mMainWindowSizeChangeTask>;

        return $r1;
    }

    android.view.SurfaceControl$Transaction getMainWindowSizeChangeTransaction()
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction mMainWindowSizeChangeTransaction>;

        return $r1;
    }

    java.lang.String getName()
    {
        com.android.server.wm.Task r0;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r5;

        r0 := @this: com.android.server.wm.Task;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task=");

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    int getOrientation(int)
    {
        com.android.server.wm.Task r0;
        boolean $z0;
        int i0, i1;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.wm.Task: boolean canSpecifyOrientation()>();

        if $z0 == 0 goto label1;

        i1 = specialinvoke r0.<com.android.server.wm.WindowContainer: int getOrientation(int)>(i0);

        goto label2;

     label1:
        i1 = -2;

     label2:
        return i1;
    }

    long getProtoFieldId()
    {
        com.android.server.wm.Task r0;

        r0 := @this: com.android.server.wm.Task;

        return 1146756268037L;
    }

    com.android.server.wm.ActivityRecord getResumedActivity()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mResumedActivity>;

        return $r1;
    }

    com.android.server.wm.ActivityRecord getRootActivity()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity(boolean,boolean)>(1, 0);

        return $r1;
    }

    com.android.server.wm.ActivityRecord getRootActivity(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity(boolean,boolean)>(0, z0);

        return $r1;
    }

    com.android.server.wm.ActivityRecord getRootActivity(boolean, boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0, z1;
        com.android.server.wm.Task$FindRootHelper $r1;
        com.android.server.wm.ActivityRecord $r2;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.Task$FindRootHelper mFindRootHelper>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.Task$FindRootHelper: com.android.server.wm.ActivityRecord findRoot(boolean,boolean)>(z0, z1);

        return $r2;
    }

    com.android.server.wm.Task getRootTask()
    {
        com.android.server.wm.Task r0, r2, r3;
        com.android.server.wm.WindowContainer r1;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if r1 != null goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r1.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r2 != null goto label2;

        r3 = r0;

        goto label3;

     label2:
        r3 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

     label3:
        return r3;
    }

    int getRootTaskId()
    {
        com.android.server.wm.Task r0, $r1;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        $i0 = $r1.<com.android.server.wm.Task: int mTaskId>;

        return $i0;
    }

    android.app.ActivityManager$TaskSnapshot getSnapshot(boolean, boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0, z1;
        com.android.server.wm.ActivityTaskManagerService $r1;
        int $i0, $i1;
        com.android.server.wm.WindowManagerService $r2;
        android.app.ActivityManager$TaskSnapshot $r3;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $i1 = r0.<com.android.server.wm.Task: int mTaskId>;

        $i0 = r0.<com.android.server.wm.Task: int mUserId>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,int,boolean,boolean)>($i1, $i0, z0, z1);

        return $r3;
    }

    com.android.server.wm.ActivityStack getStack()
    {
        com.android.server.wm.Task r0, $r1;
        com.android.server.wm.ActivityStack $r2;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        $r2 = (com.android.server.wm.ActivityStack) $r1;

        return $r2;
    }

    com.android.server.wm.Task getTask(java.util.function.Predicate, boolean)
    {
        com.android.server.wm.Task r0, r1, r3;
        boolean z0, $z1;
        java.util.function.Predicate r2;

        r0 := @this: com.android.server.wm.Task;

        r2 := @parameter0: java.util.function.Predicate;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.server.wm.WindowContainer: com.android.server.wm.Task getTask(java.util.function.Predicate,boolean)>(r2, z0);

        if r1 == null goto label1;

        return r1;

     label1:
        $z1 = interfaceinvoke r2.<java.util.function.Predicate: boolean test(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        r3 = r0;

        goto label3;

     label2:
        r3 = null;

     label3:
        return r3;
    }

    android.app.ActivityManager$TaskDescription getTaskDescription()
    {
        com.android.server.wm.Task r0;
        android.app.ActivityManager$TaskDescription $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription mTaskDescription>;

        return $r1;
    }

    android.app.ActivityManager$RunningTaskInfo getTaskInfo()
    {
        com.android.server.wm.Task r0;
        android.app.ActivityManager$RunningTaskInfo $r2;

        r0 := @this: com.android.server.wm.Task;

        $r2 = new android.app.ActivityManager$RunningTaskInfo;

        specialinvoke $r2.<android.app.ActivityManager$RunningTaskInfo: void <init>()>();

        virtualinvoke r0.<com.android.server.wm.Task: void fillTaskInfo(android.app.TaskInfo)>($r2);

        return $r2;
    }

    int getTaskOutset()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        double $d0, $d1;
        com.android.server.wm.DisplayContent r3;
        android.util.DisplayMetrics r4;

        r0 := @this: com.android.server.wm.Task;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        $z0 = $r2.<com.android.server.wm.WindowManagerService: boolean mRenderShadowsInCompositor>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        if $z1 == 0 goto label2;

        if r3 == null goto label2;

        r4 = virtualinvoke r3.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = staticinvoke <com.android.server.wm.WindowManagerService: int dipToPixel(int,android.util.DisplayMetrics)>(5, r4);

        $i1 = $i0 * 2;

        $d0 = (double) $i1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i2 = (int) $d1;

        return $i2;

     label2:
        return 0;
    }

    com.android.server.wm.ActivityRecord getTopFullscreenActivity()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.'-$$Lambda$Task$s9wiZSThkGOKye0Zl5MRKv-8Iq0' $r1;
        com.android.server.wm.ActivityRecord $r2;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.wm.Task;

        $r1 = <com.android.server.wm._$$Lambda$Task$s9wiZSThkGOKye0Zl5MRKv_8Iq0: com.android.server.wm.'-$$Lambda$Task$s9wiZSThkGOKye0Zl5MRKv-8Iq0' INSTANCE>;

        r3 = (java.util.function.Predicate) $r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r3);

        return $r2;
    }

    com.android.server.wm.ActivityRecord getTopNonFinishingActivity()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity(boolean)>(1);

        return $r1;
    }

    com.android.server.wm.ActivityRecord getTopNonFinishingActivity(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopActivity(boolean,boolean)>(0, z0);

        return $r1;
    }

    com.android.server.wm.ActivityRecord getTopVisibleActivity()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.'-$$Lambda$Task$N6swnhdrHvxOfp81yUqye9AbX7A' $r1;
        com.android.server.wm.ActivityRecord $r2;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.wm.Task;

        $r1 = <com.android.server.wm._$$Lambda$Task$N6swnhdrHvxOfp81yUqye9AbX7A: com.android.server.wm.'-$$Lambda$Task$N6swnhdrHvxOfp81yUqye9AbX7A' INSTANCE>;

        r3 = (java.util.function.Predicate) $r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r3);

        return $r2;
    }

    com.android.server.wm.WindowState getTopVisibleAppMainWindow()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.WindowState r2;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopVisibleActivity()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    int getVisibility(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0, r3, $r4, $r8;
        com.android.server.wm.ActivityRecord r1, $r6, $r7;
        com.android.server.wm.WindowContainer r2, $r5;
        int i0, i1, $i2, i3, i4, i5;
        boolean z1, $z2, $z3, $z4, $z5, z6, z7, z8, z10, z11, z12, z13, z14, z15, z16, z18, z19, z20, z21, z22, z23, z24, z26, z27;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isAttached()>();

        if $z2 == 0 goto label29;

        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean isForceHidden()>();

        if $z3 == 0 goto label01;

        goto label29;

     label01:
        z6 = 0;

        z7 = 0;

        z8 = 0;

        z10 = 0;

        z11 = 0;

        r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        z12 = 0;

        $r4 = virtualinvoke r2.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r4 == null goto label03;

        $r8 = virtualinvoke r2.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        i1 = virtualinvoke $r8.<com.android.server.wm.Task: int getVisibility(com.android.server.wm.ActivityRecord)>(r1);

        if i1 != 2 goto label02;

        return 2;

     label02:
        z12 = 0;

        if i1 != 1 goto label03;

        z12 = 1;

     label03:
        i0 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isActivityTypeAssistant()>();

        $i2 = virtualinvoke r2.<com.android.server.wm.WindowContainer: int getChildCount()>();

        i3 = $i2 - 1;

        z13 = z12;

     label04:
        if i3 < 0 goto label19;

        $r5 = virtualinvoke r2.<com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r3 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r3 != null goto label05;

        z14 = z13;

        goto label18;

     label05:
        $r6 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r6 == null goto label06;

        z15 = 1;

        goto label07;

     label06:
        z15 = 0;

     label07:
        if r3 != r0 goto label11;

        if z15 != 0 goto label09;

        $r7 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord isInTask(com.android.server.wm.ActivityRecord)>(r1);

        if $r7 != null goto label09;

        $z5 = virtualinvoke r0.<com.android.server.wm.Task: boolean isActivityTypeHome()>();

        if $z5 == 0 goto label08;

        goto label09;

     label08:
        z16 = 0;

        goto label10;

     label09:
        z16 = 1;

     label10:
        goto label20;

     label11:
        if z15 != 0 goto label12;

        z14 = z13;

        goto label18;

     label12:
        i4 = virtualinvoke r3.<com.android.server.wm.Task: int getWindowingMode()>();

        if i4 != 1 goto label14;

        $z4 = virtualinvoke r3.<com.android.server.wm.Task: boolean isTranslucent(com.android.server.wm.ActivityRecord)>(r1);

        if $z4 == 0 goto label13;

        z14 = 1;

        goto label18;

     label13:
        return 2;

     label14:
        if i4 != 3 goto label15;

        if z7 != 0 goto label15;

        z18 = virtualinvoke r3.<com.android.server.wm.Task: boolean isTranslucent(com.android.server.wm.ActivityRecord)>(r1);

        z19 = z18 ^ 1;

        z20 = 1;

        z21 = z19;

        z22 = z8;

        z23 = z18;

        z24 = z11;

        if i0 != 3 goto label16;

        z20 = 1;

        z21 = z19;

        z22 = z8;

        z23 = z18;

        z24 = z11;

        if z19 == 0 goto label16;

        return 2;

     label15:
        z20 = z6;

        z21 = z7;

        z22 = z8;

        z23 = z10;

        z24 = z11;

        if i4 != 4 goto label16;

        z20 = z6;

        z21 = z7;

        z22 = z8;

        z23 = z10;

        z24 = z11;

        if z8 != 0 goto label16;

        z26 = virtualinvoke r3.<com.android.server.wm.Task: boolean isTranslucent(com.android.server.wm.ActivityRecord)>(r1);

        z27 = z26 ^ 1;

        z20 = 1;

        z21 = z7;

        z22 = z27;

        z23 = z10;

        z24 = z26;

        if i0 != 4 goto label16;

        z20 = 1;

        z21 = z7;

        z22 = z27;

        z23 = z10;

        z24 = z26;

        if z27 == 0 goto label16;

        return 2;

     label16:
        if z21 == 0 goto label17;

        if z22 == 0 goto label17;

        return 2;

     label17:
        z6 = z20;

        z7 = z21;

        z8 = z22;

        z14 = z13;

        z10 = z23;

        z11 = z24;

        if z1 == 0 goto label18;

        z6 = z20;

        z7 = z21;

        z8 = z22;

        z14 = z13;

        z10 = z23;

        z11 = z24;

        if z20 == 0 goto label18;

        return 2;

     label18:
        i3 = i3 + -1;

        z13 = z14;

        goto label04;

     label19:
        z16 = 1;

     label20:
        if z16 != 0 goto label21;

        return 2;

     label21:
        if i0 == 1 goto label24;

        if i0 == 3 goto label23;

        if i0 == 4 goto label22;

        goto label25;

     label22:
        if z11 == 0 goto label25;

        return 1;

     label23:
        if z10 == 0 goto label25;

        return 1;

     label24:
        if z10 != 0 goto label28;

        if z11 == 0 goto label25;

        goto label28;

     label25:
        if z13 == 0 goto label26;

        i5 = 1;

        goto label27;

     label26:
        i5 = 0;

     label27:
        return i5;

     label28:
        return 1;

     label29:
        return 2;
    }

    boolean hasWindowsAlive()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.'-$$Lambda$kMHOkFJdJNCG8WGqd9dfu58tyGo' $r1;
        com.android.server.wm.ActivityRecord $r2;
        boolean z0;
        java.util.function.Predicate r3;

        r0 := @this: com.android.server.wm.Task;

        $r1 = <com.android.server.wm._$$Lambda$kMHOkFJdJNCG8WGqd9dfu58tyGo: com.android.server.wm.'-$$Lambda$kMHOkFJdJNCG8WGqd9dfu58tyGo' INSTANCE>;

        r3 = (java.util.function.Predicate) $r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r3);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAttached()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.TaskDisplayArea r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.TaskDisplayArea: boolean isRemoved()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isClearingToReuseTask()
    {
        com.android.server.wm.Task r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean mReuseTask>;

        return $z0;
    }

    boolean isDragResizing()
    {
        com.android.server.wm.Task r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean mDragResizing>;

        return $z0;
    }

    boolean isFloating()
    {
        com.android.server.wm.Task r0;
        android.app.WindowConfiguration $r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z0 = virtualinvoke $r1.<android.app.WindowConfiguration: boolean tasksAreFloating()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.Task: boolean mPreserveNonFloatingState>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isFocusableAndVisible()
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isTopActivityFocusable()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(null);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    protected boolean isForceHidden()
    {
        com.android.server.wm.Task r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        $i0 = r0.<com.android.server.wm.Task: int mForceHiddenFlags>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isInChangeTransition()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.SurfaceFreezer $r1;
        boolean $z0, $z1, z2;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.SurfaceFreezer mSurfaceFreezer>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.SurfaceFreezer: boolean hasLeash()>();

        if $z0 != 0 goto label2;

        $i0 = r0.<com.android.server.wm.Task: int mTransit>;

        $z1 = staticinvoke <com.android.server.wm.AppTransition: boolean isChangeTransit(int)>($i0);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    com.android.server.wm.ActivityRecord isInTask(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isDescendantOf(com.android.server.wm.WindowContainer)>(r0);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        return null;
    }

    boolean isLeafTask()
    {
        com.android.server.wm.Task r0, $r5;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowContainer $r4;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowContainer) $r3;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r5 == null goto label2;

        return 0;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 1;
    }

    boolean isOrganized()
    {
        com.android.server.wm.Task r0;
        android.window.ITaskOrganizer $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isResizeable()
    {
        com.android.server.wm.Task r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable(boolean)>(1);

        return $z0;
    }

    boolean isResizeable(boolean)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        boolean $z0, $z1, $z2, z3, z4;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        z3 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z0 = $r1.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities>;

        if $z0 != 0 goto label2;

        $i0 = r0.<com.android.server.wm.Task: int mResizeMode>;

        $z1 = staticinvoke <android.content.pm.ActivityInfo: boolean isResizeableMode(int)>($i0);

        if $z1 != 0 goto label2;

        if z3 == 0 goto label1;

        $z2 = r0.<com.android.server.wm.Task: boolean mSupportsPictureInPicture>;

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        return z4;
    }

    boolean isRootTask()
    {
        com.android.server.wm.Task r0, $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        if $r1 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isSameIntentFilter(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        android.content.Intent $r2, $r3, r9, $r10;
        android.content.ComponentName $r4, $r5, $r6;
        boolean $z0, $z1;
        com.android.server.wm.ActivityRecord r8;

        r0 := @this: com.android.server.wm.Task;

        r8 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = new android.content.Intent;

        $r3 = r8.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

        specialinvoke $r2.<android.content.Intent: void <init>(android.content.Intent)>($r3);

        $r5 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        $r4 = r8.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z0 == 0 goto label1;

        r9 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r9 == null goto label1;

        $r6 = virtualinvoke r9.<android.content.Intent: android.content.ComponentName getComponent()>();

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r6);

     label1:
        $r10 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        $z1 = virtualinvoke $r2.<android.content.Intent: boolean filterEquals(android.content.Intent)>($r10);

        return $z1;
    }

    boolean isTaskAnimating()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.RecentsAnimationController r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm._$$Lambda$Task$c3doYleeoysLZS5RwSL9gEvAHmk $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.Task;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.RecentsAnimationController: boolean isAnimatingTask(com.android.server.wm.Task)>(r0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r3 = new com.android.server.wm._$$Lambda$Task$c3doYleeoysLZS5RwSL9gEvAHmk;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$Task$c3doYleeoysLZS5RwSL9gEvAHmk: void <init>(com.android.server.wm.Task)>(r0);

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean forAllTasks(java.util.function.Function)>($r3);

        return $z0;
    }

    boolean isTaskId(int)
    {
        com.android.server.wm.Task r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.Task: int mTaskId>;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isTopActivityFocusable()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, z2;
        android.app.WindowConfiguration $r2;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if r1 == null goto label1;

        z2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isFocusable()>();

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isFocusable()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z1 = virtualinvoke $r2.<android.app.WindowConfiguration: boolean canReceiveKeys()>();

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean isTranslucent(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, z2;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.'-$$Lambda$Task$CKQ9RLMNPYajktwO1VrUoQGHF_8' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        com.android.server.wm.ActivityRecord r4, r5;
        java.util.function.BiPredicate r6;

        r0 := @this: com.android.server.wm.Task;

        r4 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isAttached()>();

        z2 = 1;

        if z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isForceHidden()>();

        if $z1 == 0 goto label1;

        goto label4;

     label1:
        $r2 = <com.android.server.wm._$$Lambda$Task$CKQ9RLMNPYajktwO1VrUoQGHF_8: com.android.server.wm.'-$$Lambda$Task$CKQ9RLMNPYajktwO1VrUoQGHF_8' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r6 = (java.util.function.BiPredicate) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r3, r4);

        r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        if r5 != null goto label2;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;

     label4:
        return 1;
    }

    boolean isUidPresent(int)
    {
        com.android.server.wm.Task r0;
        int i0;
        com.android.internal.util.function.pooled.PooledPredicate r1;
        com.android.server.wm.'-$$Lambda$QEISWTQzWbgxRMT5rMnIEzpsKpc' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        com.android.server.wm.ActivityRecord $r5;
        boolean z0;
        java.util.function.BiPredicate r6;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        $r2 = <com.android.server.wm._$$Lambda$QEISWTQzWbgxRMT5rMnIEzpsKpc: com.android.server.wm.'-$$Lambda$QEISWTQzWbgxRMT5rMnIEzpsKpc' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6 = (java.util.function.BiPredicate) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r3, $r4);

        $r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r1);

        if $r5 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        return z0;
    }

    public boolean lambda$getNextFocusableTask$4$Task(boolean, java.lang.Object)
    {
        com.android.server.wm.Task r0;
        java.lang.Object r1;
        com.android.server.wm.ActivityStack $r2;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.wm.Task;

        z1 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Object;

        if z1 != 0 goto label1;

        if r1 == r0 goto label2;

     label1:
        $r2 = (com.android.server.wm.ActivityStack) r1;

        $z0 = virtualinvoke $r2.<com.android.server.wm.ActivityStack: boolean isFocusableAndVisible()>();

        if $z0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    public java.lang.Boolean lambda$isTaskAnimating$5$Task(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0, r1;
        boolean $z0, z1;
        java.lang.Boolean $r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.Task;

        if r1 == r0 goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean isTaskAnimating()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        return $r2;
    }

    public void lambda$performClearTask$1$Task(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void takeFromHistory()>();

        virtualinvoke r0.<com.android.server.wm.Task: void removeChild(com.android.server.wm.WindowContainer)>(r1);

        return;
    }

    java.lang.String lockTaskAuthToString()
    {
        com.android.server.wm.Task r0;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.server.wm.Task;

        i0 = r0.<com.android.server.wm.Task: int mLockTaskAuth>;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown=");

        $i1 = r0.<com.android.server.wm.Task: int mLockTaskAuth>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label1:
        return "LOCK_TASK_AUTH_LAUNCHABLE_PRIV";

     label2:
        return "LOCK_TASK_AUTH_WHITELISTED";

     label3:
        return "LOCK_TASK_AUTH_LAUNCHABLE";

     label4:
        return "LOCK_TASK_AUTH_PINNABLE";

     label5:
        return "LOCK_TASK_AUTH_DONT_LOCK";
    }

    public android.view.SurfaceControl$Builder makeAnimationLeash()
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl$Builder $r1, $r2;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowContainer: android.view.SurfaceControl$Builder makeAnimationLeash()>();

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r2 = virtualinvoke $r1.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setMetadata(int,int)>(3, $i0);

        return $r2;
    }

    void migrateToNewSurfaceControl()
    {
        com.android.server.wm.Task r0;
        android.graphics.Point $r1, $r2;
        android.view.SurfaceControl$Transaction $r3;

        r0 := @this: com.android.server.wm.Task;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void migrateToNewSurfaceControl()>();

        $r1 = r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize>;

        $r1.<android.graphics.Point: int x> = 0;

        $r2 = r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize>;

        $r2.<android.graphics.Point: int y> = 0;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke r0.<com.android.server.wm.Task: void updateSurfaceSize(android.view.SurfaceControl$Transaction)>($r3);

        return;
    }

    final void moveActivityToFrontLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.Task: void positionChildAtTop(com.android.server.wm.ActivityRecord)>(r1);

        virtualinvoke r0.<com.android.server.wm.Task: void updateEffectiveIntent()>();

        return;
    }

    void onActivityStateChanged(com.android.server.wm.ActivityRecord, com.android.server.wm.ActivityStack$ActivityState, java.lang.String)
    {
        com.android.server.wm.Task r0, $r13, r21;
        com.android.server.wm.ActivityRecord r1, $r4, $r10;
        java.lang.String r2, $r8, $r19;
        com.android.server.wm.WindowContainer $r3;
        java.lang.StringBuilder $r5, $r16;
        com.android.server.wm.RootWindowContainer $r9;
        com.android.server.wm.ActivityStackSupervisor $r11;
        com.android.server.wm.RecentTasks $r12;
        com.android.server.wm.ActivityTaskManagerService $r14;
        com.android.server.wm.ActivityStack$ActivityState $r15, r20, $r23;
        boolean $z0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r20 := @parameter1: com.android.server.wm.ActivityStack$ActivityState;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        r21 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r21 == null goto label1;

        virtualinvoke r21.<com.android.server.wm.Task: void onActivityStateChanged(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityStack$ActivityState,java.lang.String)>(r1, r20, r2);

        $z0 = r21.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mResumedActivity>;

        if r1 != $r4 goto label2;

        $r15 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if r20 == $r15 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - onActivityStateChanged");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.wm.Task: void setResumedActivity(com.android.server.wm.ActivityRecord,java.lang.String)>(null, $r19);

     label2:
        $r23 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        if r20 != $r23 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - onActivityStateChanged");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.wm.Task: void setResumedActivity(com.android.server.wm.ActivityRecord,java.lang.String)>(r1, $r8);

        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getTopResumedActivity()>();

        if r1 != $r10 goto label3;

        $r14 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r14.<com.android.server.wm.ActivityTaskManagerService: void setResumedActivityUncheckLocked(com.android.server.wm.ActivityRecord,java.lang.String)>(r1, r2);

     label3:
        $r11 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r12 = $r11.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.RecentTasks mRecentTasks>;

        $r13 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        virtualinvoke $r12.<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>($r13);

     label4:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, $r8, $r13, $r17, $r18, r21;
        int i0, i1, $i2;
        android.app.WindowConfiguration $r2, $r4, $r14, $r15, $r20;
        android.content.res.Configuration $r3, $r12, r16;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, $z9, $z10, $z11;
        com.android.server.wm.ActivityTaskManagerService $r5;
        com.android.server.wm.TaskOrganizerController $r6;
        com.android.server.wm.DisplayContent $r7;
        com.android.server.wm.ActivityStackSupervisor $r9, $r10;
        com.android.server.wm.ActivityStack $r11;
        android.view.SurfaceControl$Transaction $r19;

        r0 := @this: com.android.server.wm.Task;

        r16 := @parameter0: android.content.res.Configuration;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        z5 = virtualinvoke $r2.<android.app.WindowConfiguration: boolean persistTaskBounds()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $r4 = $r3.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        z6 = virtualinvoke $r4.<android.app.WindowConfiguration: boolean persistTaskBounds()>();

        $i2 = virtualinvoke r0.<com.android.server.wm.Task: int getRequestedOverrideWindowingMode()>();

        if $i2 != 0 goto label1;

        $r15 = r16.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        z6 = virtualinvoke $r15.<android.app.WindowConfiguration: boolean persistTaskBounds()>();

     label1:
        if z5 != 0 goto label2;

        if z6 == 0 goto label2;

        r1 = r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        if r1 == null goto label2;

        $z4 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z4 != 0 goto label2;

        $r12 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getRequestedOverrideConfiguration()>();

        $r14 = $r12.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r13 = r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        virtualinvoke $r14.<android.app.WindowConfiguration: void setBounds(android.graphics.Rect)>($r13);

     label2:
        i0 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        $r17 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpPrevBounds>;

        $r18 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke $r17.<android.graphics.Rect: void set(android.graphics.Rect)>($r18);

        z7 = virtualinvoke r0.<com.android.server.wm.Task: boolean inMultiWindowMode()>();

        z8 = virtualinvoke r0.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onConfigurationChanged(android.content.res.Configuration)>(r16);

        $r19 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        virtualinvoke r0.<com.android.server.wm.Task: void updateSurfaceSize(android.view.SurfaceControl$Transaction)>($r19);

        $z9 = virtualinvoke r0.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        if z8 == $z9 goto label3;

        $r10 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r11 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r10.<com.android.server.wm.ActivityStackSupervisor: void scheduleUpdatePictureInPictureModeIfNeeded(com.android.server.wm.Task,com.android.server.wm.ActivityStack)>(r0, $r11);

        goto label4;

     label3:
        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean inMultiWindowMode()>();

        if z7 == $z0 goto label4;

        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: void scheduleUpdateMultiWindowMode(com.android.server.wm.Task)>(r0);

     label4:
        i1 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        if i0 == i1 goto label5;

        $r7 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        if $r7 == null goto label5;

        $z3 = specialinvoke r0.<com.android.server.wm.Task: boolean shouldStartChangeTransition(int,int)>(i0, i1);

        if $z3 == 0 goto label5;

        $r8 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpPrevBounds>;

        specialinvoke r0.<com.android.server.wm.Task: void initializeChangeTransition(android.graphics.Rect)>($r8);

     label5:
        $r20 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z10 = virtualinvoke $r20.<android.app.WindowConfiguration: boolean persistTaskBounds()>();

        if $z10 == 0 goto label6;

        r21 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getRequestedOverrideBounds()>();

        $z2 = virtualinvoke r21.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 != 0 goto label6;

        virtualinvoke r0.<com.android.server.wm.Task: void setLastNonFullscreenBounds(android.graphics.Rect)>(r21);

     label6:
        specialinvoke r0.<com.android.server.wm.Task: void saveLaunchingStateIfNeeded()>();

        $z11 = virtualinvoke r0.<com.android.server.wm.Task: boolean updateTaskOrganizerState(boolean)>(0);

        if $z11 != 0 goto label7;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z1 == 0 goto label7;

        $r5 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r6.<com.android.server.wm.TaskOrganizerController: void dispatchTaskInfoChanged(com.android.server.wm.Task,boolean)>(r0, 0);

     label7:
        return;
    }

    public boolean onDescendantOrientationChanged(android.os.IBinder, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.Task r0;
        android.os.IBinder r1;
        com.android.server.wm.ConfigurationContainer r2;
        boolean $z0;
        com.android.server.wm.WindowContainer $r3, $r4;
        android.content.res.Configuration $r5;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: com.android.server.wm.ConfigurationContainer;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean onDescendantOrientationChanged(android.os.IBinder,com.android.server.wm.ConfigurationContainer)>(r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowContainer: android.content.res.Configuration getConfiguration()>();

        virtualinvoke r0.<com.android.server.wm.Task: void onConfigurationChanged(android.content.res.Configuration)>($r5);

        return 1;

     label2:
        return 0;
    }

    void onDisplayChanged(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.DisplayContent r1;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.ActivityTaskManagerService $r3;
        com.android.server.wm.TaskChangeNotificationController $r4;
        int $i0, i1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.Task: void adjustBoundsForDisplayChangeIfNeeded(com.android.server.wm.DisplayContent)>(r1);

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r1);

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isLeafTask()>();

        if $z1 == 0 goto label4;

        if r1 == null goto label2;

        i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        goto label3;

     label2:
        i1 = -1;

     label3:
        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r4.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskDisplayChanged(int,int)>($i0, i1);

     label4:
        return;
    }

    void onParentChanged(com.android.server.wm.ConfigurationContainer, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.Task r0, r25, r27;
        com.android.server.wm.ConfigurationContainer r1, r2;
        com.android.server.wm.WindowContainer $r3, $r6, $r9, $r20, $r21;
        com.android.server.wm.RootWindowContainer $r4;
        int $i0, $i1, $i2, i3;
        android.content.Intent $r7;
        com.android.server.wm.ActivityStack$ActivityState $r8;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.ActivityTaskManagerService $r10;
        com.android.server.wm.TaskChangeNotificationController $r11;
        com.android.server.wm.'-$$Lambda$ABB1r3i-Ua4IQKhbebsmnEGpWd8' $r12;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r13;
        com.android.server.wm.DisplayContent $r14, r23, r24, $r31;
        com.android.server.wm.WindowManagerService $r15;
        com.android.server.wm.WindowSurfacePlacer $r16;
        android.content.res.Configuration $r17;
        android.app.WindowConfiguration $r18, $r19, $r32;
        android.os.RemoteException $r22;
        com.android.internal.util.function.pooled.PooledConsumer r26;
        com.android.server.wm.ActivityRecord r28;
        android.service.voice.IVoiceInteractionSession r29;
        java.util.function.BiConsumer r33;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ConfigurationContainer;

        r2 := @parameter1: com.android.server.wm.ConfigurationContainer;

        if r1 == null goto label01;

        $r21 = (com.android.server.wm.WindowContainer) r1;

        r23 = virtualinvoke $r21.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label02;

     label01:
        r23 = null;

     label02:
        if r2 == null goto label03;

        $r20 = (com.android.server.wm.WindowContainer) r2;

        r24 = virtualinvoke $r20.<com.android.server.wm.WindowContainer: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label04;

     label03:
        r24 = null;

     label04:
        if r24 == null goto label05;

        i3 = r24.<com.android.server.wm.DisplayContent: int mDisplayId>;

        goto label06;

     label05:
        i3 = -1;

     label06:
        r0.<com.android.server.wm.Task: int mPrevDisplayId> = i3;

        if r2 == null goto label07;

        if r1 != null goto label07;

        specialinvoke r0.<com.android.server.wm.Task: void cleanUpResourcesForDestroy(com.android.server.wm.ConfigurationContainer)>(r2);

     label07:
        if r23 == null goto label08;

        $r17 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getConfiguration()>();

        $r18 = $r17.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r19 = virtualinvoke r23.<com.android.server.wm.DisplayContent: android.app.WindowConfiguration getWindowConfiguration()>();

        $i2 = virtualinvoke $r19.<android.app.WindowConfiguration: int getRotation()>();

        virtualinvoke $r18.<android.app.WindowConfiguration: void setRotation(int)>($i2);

     label08:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void onParentChanged(com.android.server.wm.ConfigurationContainer,com.android.server.wm.ConfigurationContainer)>(r1, r2);

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if $r3 != null goto label09;

        $r14 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        if $r14 == null goto label09;

        $i1 = virtualinvoke r0.<com.android.server.wm.Task: int getRootTaskId()>();

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmStackRemoved(int)>($i1);

        r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent> = null;

        $r15 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r16.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label09:
        if r2 == null goto label12;

        $r9 = (com.android.server.wm.WindowContainer) r2;

        r25 = virtualinvoke $r9.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r25 == null goto label10;

        $r12 = <com.android.server.wm._$$Lambda$ABB1r3i_Ua4IQKhbebsmnEGpWd8: com.android.server.wm.'-$$Lambda$ABB1r3i-Ua4IQKhbebsmnEGpWd8' INSTANCE>;

        $r13 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r33 = (java.util.function.BiConsumer) $r12;

        r26 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,java.lang.Object,com.android.internal.util.function.pooled.ArgumentPlaceholder)>(r33, r25, $r13);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r26);

        interfaceinvoke r26.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

     label10:
        $z1 = virtualinvoke r2.<com.android.server.wm.ConfigurationContainer: boolean inPinnedWindowingMode()>();

        if $z1 == 0 goto label12;

        if r1 == null goto label11;

        $z2 = virtualinvoke r1.<com.android.server.wm.ConfigurationContainer: boolean inPinnedWindowingMode()>();

        if $z2 != 0 goto label12;

     label11:
        $r10 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r11 = virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r11.<com.android.server.wm.TaskChangeNotificationController: void notifyActivityUnpinned()>();

     label12:
        if r1 == null goto label17;

        $r6 = (com.android.server.wm.WindowContainer) r1;

        r27 = virtualinvoke $r6.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r27 == null goto label13;

        r28 = virtualinvoke r27.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity(boolean)>(0);

        if r28 == null goto label13;

        $r8 = <com.android.server.wm.ActivityStack$ActivityState: com.android.server.wm.ActivityStack$ActivityState RESUMED>;

        $z0 = virtualinvoke r28.<com.android.server.wm.ActivityRecord: boolean isState(com.android.server.wm.ActivityStack$ActivityState)>($r8);

        if $z0 == 0 goto label13;

        virtualinvoke r27.<com.android.server.wm.Task: void setResumedActivity(com.android.server.wm.ActivityRecord,java.lang.String)>(r28, "addedToTask");

     label13:
        r29 = r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession>;

        if r29 == null goto label17;

     label14:
        $r7 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        interfaceinvoke r29.<android.service.voice.IVoiceInteractionSession: void taskStarted(android.content.Intent,int)>($r7, $i0);

     label15:
        goto label17;

     label16:
        $r22 := @caughtexception;

     label17:
        if r2 != null goto label18;

        if r1 == null goto label18;

        virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect updateOverrideConfigurationFromLaunchBounds()>();

     label18:
        $r31 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke r0.<com.android.server.wm.Task: void adjustBoundsForDisplayChangeIfNeeded(com.android.server.wm.DisplayContent)>($r31);

        $r32 = virtualinvoke r0.<com.android.server.wm.Task: android.app.WindowConfiguration getWindowConfiguration()>();

        $z3 = virtualinvoke $r32.<android.app.WindowConfiguration: boolean windowsAreScaleable()>();

        if $z3 == 0 goto label19;

        virtualinvoke r0.<com.android.server.wm.Task: void forceWindowsScaleable(boolean)>(1);

        goto label20;

     label19:
        virtualinvoke r0.<com.android.server.wm.Task: void forceWindowsScaleable(boolean)>(0);

     label20:
        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void updateUIDsPresentOnDisplay()>();

        return;

        catch android.os.RemoteException from label14 to label15 with label16;
    }

    void onPictureInPictureParamsChanged()
    {
        com.android.server.wm.Task r0;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.TaskOrganizerController $r2;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r2.<com.android.server.wm.TaskOrganizerController: void dispatchTaskInfoChanged(com.android.server.wm.Task,boolean)>(r0, 1);

     label1:
        return;
    }

    void onSnapshotChanged(android.app.ActivityManager$TaskSnapshot)
    {
        com.android.server.wm.Task r0;
        android.app.ActivityManager$TaskSnapshot r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.TaskChangeNotificationController $r3;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.app.ActivityManager$TaskSnapshot;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r3.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskSnapshotChanged(int,android.app.ActivityManager$TaskSnapshot)>($i0, r1);

        return;
    }

    void onWindowFocusChanged(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        specialinvoke r0.<com.android.server.wm.Task: void updateShadowsRadius(boolean,android.view.SurfaceControl$Transaction)>(z0, $r1);

        return;
    }

    boolean onlyHasTaskOverlayActivities(boolean)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.WindowContainer $r2;
        boolean $z1, $z2, z3, z4;
        int i0, i1, i2;

        r0 := @this: com.android.server.wm.Task;

        z3 := @parameter0: boolean;

        i0 = 0;

        i1 = virtualinvoke r0.<com.android.server.wm.Task: int getChildCount()>();

        i2 = i1 + -1;

     label1:
        if i2 < 0 goto label6;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowContainer: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if r1 != null goto label2;

        return 0;

     label2:
        if z3 != 0 goto label3;

        $z2 = r1.<com.android.server.wm.ActivityRecord: boolean finishing>;

        if $z2 == 0 goto label3;

        goto label5;

     label3:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isTaskOverlay()>();

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i0 = i0 + 1;

     label5:
        i2 = i2 + -1;

        goto label1;

     label6:
        if i0 <= 0 goto label7;

        z4 = 1;

        goto label8;

     label7:
        z4 = 0;

     label8:
        return z4;
    }

    void performClearTask(java.lang.String)
    {
        com.android.server.wm.Task r0;
        java.lang.String r1;
        com.android.server.wm.ActivityStack $r2;
        com.android.server.wm._$$Lambda$Task$s8aJAJv5Mq4hljFdutdcLenli4o $r3;
        com.android.server.wm._$$Lambda$Task$iKnNpBBRFRHs1rtFSWGK99Fqn1E $r4;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r2 != null goto label1;

        $r4 = new com.android.server.wm._$$Lambda$Task$iKnNpBBRFRHs1rtFSWGK99Fqn1E;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$Task$iKnNpBBRFRHs1rtFSWGK99Fqn1E: void <init>(com.android.server.wm.Task)>(r0);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>($r4);

        goto label2;

     label1:
        $r3 = new com.android.server.wm._$$Lambda$Task$s8aJAJv5Mq4hljFdutdcLenli4o;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$Task$s8aJAJv5Mq4hljFdutdcLenli4o: void <init>(java.lang.String)>(r1);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>($r3);

     label2:
        return;
    }

    com.android.server.wm.ActivityRecord performClearTaskForReuseLocked(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.Task r0;
        int i0;
        com.android.server.wm.ActivityRecord r1, r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        r0.<com.android.server.wm.Task: boolean mReuseTask> = 1;

        r2 = specialinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord performClearTaskLocked(com.android.server.wm.ActivityRecord,int)>(r1, i0);

        r0.<com.android.server.wm.Task: boolean mReuseTask> = 0;

        return r2;
    }

    void performClearTaskLocked()
    {
        com.android.server.wm.Task r0;

        r0 := @this: com.android.server.wm.Task;

        r0.<com.android.server.wm.Task: boolean mReuseTask> = 1;

        virtualinvoke r0.<com.android.server.wm.Task: void performClearTask(java.lang.String)>("clear-task-all");

        r0.<com.android.server.wm.Task: boolean mReuseTask> = 0;

        return;
    }

    void positionChildAt(int, com.android.server.wm.WindowContainer, boolean)
    {
        com.android.server.wm.Task r0, r3;
        boolean z0;
        int i0, i1, $i2, $i3, i4;
        com.android.server.wm.WindowList $r1;
        com.android.server.wm.WindowContainer r2;
        byte b5;

        r0 := @this: com.android.server.wm.Task;

        i4 := @parameter0: int;

        r2 := @parameter1: com.android.server.wm.WindowContainer;

        z0 := @parameter2: boolean;

        i0 = specialinvoke r0.<com.android.server.wm.Task: int getAdjustedChildPosition(com.android.server.wm.WindowContainer,int)>(r2, i4);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r2, z0);

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        i1 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        b5 = 1;

        $i2 = i1 - 1;

        if i0 < $i2 goto label1;

        goto label2;

     label1:
        b5 = 0;

     label2:
        r3 = virtualinvoke r2.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r3 == null goto label3;

        $i3 = r3.<com.android.server.wm.Task: int mTaskId>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmTaskMoved(int,int,int)>($i3, b5, i0);

     label3:
        return;
    }

    void positionChildAt(com.android.server.wm.ActivityRecord, int)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        int i0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Attempted to position of non-existing app");

        return;

     label1:
        virtualinvoke r0.<com.android.server.wm.Task: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r1, 0);

        return;
    }

    void positionChildAtTop(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.Task: void positionChildAt(com.android.server.wm.ActivityRecord,int)>(r1, 2147483647);

        return;
    }

    void prepareFreezingBounds()
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect $r1, $r2;
        android.content.res.Configuration $r3, $r4;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: android.graphics.Rect mPreparedFrozenBounds>;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke $r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        $r3 = r0.<com.android.server.wm.Task: android.content.res.Configuration mPreparedFrozenMergedConfig>;

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r3.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r4);

        return;
    }

    void prepareSurfaces()
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, $r3, $r4, $r8, $r9, $r10, $r11, $r12;
        com.android.server.wm.Dimmer $r2, $r6;
        boolean $z0, $z1, $z2;
        android.view.SurfaceControl$Transaction $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.server.wm.Task;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.Dimmer mDimmer>;

        virtualinvoke $r2.<com.android.server.wm.Dimmer: void resetDimStates()>();

        specialinvoke r0.<com.android.server.wm.WindowContainer: void prepareSurfaces()>();

        $r3 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpDimBoundsRect>;

        virtualinvoke r0.<com.android.server.wm.Task: void getDimBounds(android.graphics.Rect)>($r3);

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect>;

        virtualinvoke r0.<com.android.server.wm.Task: void getBounds(android.graphics.Rect)>($r9);

        r1 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpDimBoundsRect>;

        $i1 = r1.<android.graphics.Rect: int left>;

        $r10 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect>;

        $i0 = $r10.<android.graphics.Rect: int left>;

        $i5 = $i1 - $i0;

        $r11 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpDimBoundsRect>;

        $i3 = $r11.<android.graphics.Rect: int top>;

        $r12 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpRect>;

        $i2 = $r12.<android.graphics.Rect: int top>;

        $i4 = $i3 - $i2;

        virtualinvoke r1.<android.graphics.Rect: void offsetTo(int,int)>($i5, $i4);

        goto label2;

     label1:
        $r4 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpDimBoundsRect>;

        virtualinvoke $r4.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

     label2:
        $z1 = specialinvoke r0.<com.android.server.wm.Task: boolean isFocused()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        specialinvoke r0.<com.android.server.wm.Task: void updateShadowsRadius(boolean,android.view.SurfaceControl$Transaction)>($z1, $r5);

        $r6 = r0.<com.android.server.wm.Task: com.android.server.wm.Dimmer mDimmer>;

        $r7 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r8 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpDimBoundsRect>;

        $z2 = virtualinvoke $r6.<com.android.server.wm.Dimmer: boolean updateDims(android.view.SurfaceControl$Transaction,android.graphics.Rect)>($r7, $r8);

        if $z2 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.Task: void scheduleAnimation()>();

     label3:
        return;
    }

    boolean preserveOrientationOnResize()
    {
        com.android.server.wm.Task r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        i0 = r0.<com.android.server.wm.Task: int mResizeMode>;

        if i0 == 6 goto label2;

        if i0 == 5 goto label2;

        if i0 != 7 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    void removeChild(com.android.server.wm.WindowContainer)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowContainer r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        virtualinvoke r0.<com.android.server.wm.Task: void removeChild(com.android.server.wm.WindowContainer,java.lang.String)>(r1, "removeChild");

        return;
    }

    void removeChild(com.android.server.wm.WindowContainer, java.lang.String)
    {
        com.android.server.wm.Task r0, $r18;
        com.android.server.wm.WindowContainer r1;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r2, $r12;
        java.lang.String $r7, $r17, r21;
        com.android.server.wm.ActivityStack $r8, $r20;
        com.android.server.wm.ActivityStackSupervisor $r9;
        com.android.server.wm.ActivityTaskManagerService $r10;
        com.android.server.wm.TaskChangeNotificationController $r11;
        com.android.server.wm.TaskDisplayArea $r19;
        com.android.server.wm.WindowList $r22;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        r21 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke r1.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if $r18 == null goto label1;

        $r19 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r20 = (com.android.server.wm.ActivityStack) r1;

        virtualinvoke $r19.<com.android.server.wm.TaskDisplayArea: void removeStackReferenceIfNeeded(com.android.server.wm.ActivityStack)>($r20);

     label1:
        $r22 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        $z7 = virtualinvoke $r22.<com.android.server.wm.WindowList: boolean contains(java.lang.Object)>(r1);

        if $z7 != 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeChild: r=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in t=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r17);

        return;

     label2:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeChild(com.android.server.wm.WindowContainer)>(r1);

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        if $z1 == 0 goto label3;

        $r10 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r11 = virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        virtualinvoke $r11.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskStackChanged()>();

     label3:
        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasChild()>();

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.android.server.wm.Task: void updateEffectiveIntent()>();

        $z6 = virtualinvoke r0.<com.android.server.wm.Task: boolean onlyHasTaskOverlayActivities(boolean)>(1);

        if $z6 == 0 goto label6;

        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: void removeTask(com.android.server.wm.Task,boolean,boolean,java.lang.String)>(r0, 0, 0, r21);

        goto label6;

     label4:
        $z3 = r0.<com.android.server.wm.Task: boolean mReuseTask>;

        if $z3 != 0 goto label6;

        $z4 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z4 != 0 goto label6;

        $z5 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z5 != 0 goto label5;

        $r8 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        virtualinvoke $r8.<com.android.server.wm.ActivityStack: void removeChild(com.android.server.wm.WindowContainer,java.lang.String)>(r0, r21);

     label5:
        i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeChild: last r=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in t=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmTaskRemoved(int,java.lang.String)>(i0, $r7);

        virtualinvoke r0.<com.android.server.wm.Task: void removeIfPossible()>();

     label6:
        return;
    }

    void removeIfPossible()
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ActivityTaskManagerService $r1, $r3;
        com.android.server.wm.TaskChangeNotificationController $r2;
        int $i0;
        com.android.server.wm.LockTaskController $r4;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.LockTaskController getLockTaskController()>();

        virtualinvoke $r4.<com.android.server.wm.LockTaskController: void clearLockedTask(com.android.server.wm.Task)>(r0);

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean shouldDeferRemoval()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<com.android.server.wm.Task: void removeImmediately()>();

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isLeafTask()>();

        if $z2 == 0 goto label3;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r2.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskRemoved(int)>($i0);

     label3:
        return;
    }

    void removeImmediately()
    {
        com.android.server.wm.Task r0;
        int $i0, $i1;
        com.android.server.wm.DisplayContent $r1, $r2, $r3;
        boolean $z1;
        com.android.server.wm.ActivityTaskManagerService $r4;

        r0 := @this: com.android.server.wm.Task;

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmTaskRemoved(int,java.lang.String)>($i0, "removeTask");

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean isSingleTaskInstance()>();

        if $z1 == 0 goto label1;

        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent mDisplayContent>;

        $i1 = $r3.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: void notifySingleTaskDisplayEmpty(int)>($i1);

     label1:
        virtualinvoke r0.<com.android.server.wm.Task: boolean setTaskOrganizer(android.window.ITaskOrganizer)>(null);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeImmediately()>();

        return;
    }

    void removedFromRecents()
    {
        com.android.server.wm.Task r0;
        boolean $z0;
        com.android.server.wm.ActivityTaskManagerService $r1, $r4;
        com.android.server.wm.WindowManagerService $r2;
        int $i0, $i1;
        com.android.server.wm.TaskSnapshotController $r3;

        r0 := @this: com.android.server.wm.Task;

        specialinvoke r0.<com.android.server.wm.Task: void closeRecentsChain()>();

        $z0 = r0.<com.android.server.wm.Task: boolean inRecents>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.Task: boolean inRecents> = 0;

        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: void notifyTaskPersisterLocked(com.android.server.wm.Task,boolean)>(r0, 0);

     label1:
        virtualinvoke r0.<com.android.server.wm.Task: void clearRootProcess()>();

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        $i1 = r0.<com.android.server.wm.Task: int mTaskId>;

        $i0 = r0.<com.android.server.wm.Task: int mUserId>;

        virtualinvoke $r3.<com.android.server.wm.TaskSnapshotController: void notifyTaskRemovedFromRecents(int,int)>($i1, $i0);

        return;
    }

    void reparent(com.android.server.wm.ActivityStack, int, boolean, java.lang.String)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack r1;
        int i0, i1;
        boolean z0, $z1;
        java.lang.String r2, $r7;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String;

        i1 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reParentTask:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmTaskRemoved(int,java.lang.String)>(i1, $r7);

        virtualinvoke r0.<com.android.server.wm.Task: void reparent(com.android.server.wm.WindowContainer,int)>(r1, i0);

        virtualinvoke r1.<com.android.server.wm.ActivityStack: void positionChildAt(int,com.android.server.wm.WindowContainer,boolean)>(i0, r0, z0);

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityStack: boolean inPinnedWindowingMode()>();

        r0.<com.android.server.wm.Task: boolean mPreserveNonFloatingState> = $z1;

        return;
    }

    boolean reparent(com.android.server.wm.ActivityStack, int, int, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack r1;
        int i0, i1;
        boolean z0, z1, $z2;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r2 := @parameter5: java.lang.String;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,int,int,boolean,boolean,boolean,java.lang.String)>(r1, i0, i1, z0, z1, 1, r2);

        return $z2;
    }

    boolean reparent(com.android.server.wm.ActivityStack, int, int, boolean, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.Task r0;
        boolean z0, z1, z2, $z3, $z5, $z7, $z8, $z9, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20;
        java.lang.String r1;
        com.android.server.wm.ActivityStackSupervisor r2, $r14, $r15;
        com.android.server.wm.RootWindowContainer r3, $r11;
        com.android.server.wm.WindowManagerService r4;
        com.android.server.wm.ActivityStack r5, r6, r28;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        com.android.server.wm.ActivityRecord r7, r8, $r17, $r19, $r20, r30, r31, r32;
        com.android.server.wm.ActivityTaskManagerService $r9, $r10, $r33, $r34;
        com.android.server.wm.TaskDisplayArea $r12;
        com.android.server.wm.ActivityRecord$Token $r13, $r18;
        java.util.ArrayList $r16;
        java.lang.Throwable $r21, $r22, $r23, $r24, $r25, $r26, $r27, r29;

        r0 := @this: com.android.server.wm.Task;

        r28 := @parameter0: com.android.server.wm.ActivityStack;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        r1 := @parameter6: java.lang.String;

        r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        r3 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        r4 = $r9.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        r5 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if i4 != 2147483647 goto label01;

        z11 = 1;

        goto label02;

     label01:
        z11 = 0;

     label02:
        r6 = virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.ActivityStack getReparentTargetStack(com.android.server.wm.Task,com.android.server.wm.ActivityStack,boolean)>(r0, r28, z11);

        if r6 != r5 goto label03;

        return 0;

     label03:
        $i1 = virtualinvoke r6.<com.android.server.wm.ActivityStack: int getDisplayId()>();

        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean canBeLaunchedOnDisplay(int)>($i1);

        if $z3 != 0 goto label04;

        return 0;

     label04:
        if i4 != 2147483647 goto label05;

        z12 = 1;

        goto label06;

     label05:
        z12 = 0;

     label06:
        if z12 == 0 goto label07;

        $r19 = virtualinvoke r6.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

        if $r19 == null goto label07;

        $r20 = virtualinvoke r6.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

        if $r20 == null goto label07;

        virtualinvoke r6.<com.android.server.wm.ActivityStack: boolean startPausingLocked(boolean,boolean,com.android.server.wm.ActivityRecord)>(0, 0, null);

     label07:
        i0 = virtualinvoke r6.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        r7 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        if r7 == null goto label08;

        $i3 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        $z9 = staticinvoke <com.android.server.wm.Task: boolean replaceWindowsOnTaskMove(int,int)>($i3, i0);

        if $z9 == 0 goto label08;

        z13 = 1;

        goto label09;

     label08:
        z13 = 0;

     label09:
        if z13 == 0 goto label10;

        $r18 = r7.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        virtualinvoke r4.<com.android.server.wm.WindowManagerService: void setWillReplaceWindow(android.os.IBinder,boolean)>($r18, z0);

     label10:
        $r10 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r10.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

     label11:
        r8 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivityLocked()>();

     label12:
        if r8 == null goto label16;

     label13:
        $z8 = virtualinvoke r3.<com.android.server.wm.RootWindowContainer: boolean isTopDisplayFocusedStack(com.android.server.wm.ActivityStack)>(r5);

        if $z8 == 0 goto label16;

        $r17 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivityLocked()>();

        if $r17 != r8 goto label16;

     label14:
        z14 = 1;

        goto label17;

     label15:
        $r26 := @caughtexception;

        r29 = $r26;

        goto label56;

     label16:
        z14 = 0;

     label17:
        if r8 == null goto label20;

     label18:
        r30 = virtualinvoke r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord getResumedActivity()>();

     label19:
        if r30 != r8 goto label20;

        z15 = 1;

        goto label21;

     label20:
        z15 = 0;

     label21:
        if r8 == null goto label25;

     label22:
        r31 = r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord mPausingActivity>;

     label23:
        if r31 != r8 goto label25;

        z16 = 1;

        goto label26;

     label24:
        $r24 := @caughtexception;

        r29 = $r24;

        goto label56;

     label25:
        z16 = 0;

     label26:
        if r8 == null goto label30;

     label27:
        $z7 = virtualinvoke r5.<com.android.server.wm.ActivityStack: boolean isTopStackInDisplayArea()>();

        if $z7 == 0 goto label30;

        r32 = virtualinvoke r5.<com.android.server.wm.ActivityStack: com.android.server.wm.ActivityRecord topRunningActivity()>();

     label28:
        if r32 != r8 goto label30;

        z17 = 1;

        goto label31;

     label29:
        $r25 := @caughtexception;

        r29 = $r25;

        goto label56;

     label30:
        z17 = 0;

     label31:
        if i5 == 0 goto label33;

        if i5 != 1 goto label32;

        if z14 != 0 goto label33;

        if z17 == 0 goto label32;

        goto label33;

     label32:
        z18 = 0;

        goto label34;

     label33:
        z18 = 1;

     label34:
        virtualinvoke r0.<com.android.server.wm.Task: void reparent(com.android.server.wm.ActivityStack,int,boolean,java.lang.String)>(r6, i4, z18, r1);

     label35:
        if z2 == 0 goto label37;

     label36:
        virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor: void scheduleUpdatePictureInPictureModeIfNeeded(com.android.server.wm.Task,com.android.server.wm.ActivityStack)>(r0, r5);

     label37:
        if r8 == null goto label41;

     label38:
        virtualinvoke r6.<com.android.server.wm.ActivityStack: void moveToFrontAndResumeStateIfNeeded(com.android.server.wm.ActivityRecord,boolean,boolean,boolean,java.lang.String)>(r8, z18, z15, z16, r1);

     label39:
        goto label41;

     label40:
        $r27 := @caughtexception;

        r29 = $r27;

        goto label56;

     label41:
        z19 = 1;

        if z0 != 0 goto label43;

     label42:
        $r15 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r16 = $r15.<com.android.server.wm.ActivityStackSupervisor: java.util.ArrayList mNoAnimActivities>;

        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label43:
        virtualinvoke r6.<com.android.server.wm.ActivityStack: void prepareFreezingTaskBounds()>();

     label44:
        if i0 != 3 goto label46;

        i6 = (int) 1;

        if i5 != i6 goto label46;

     label45:
        $r14 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r14.<com.android.server.wm.ActivityStackSupervisor: void moveRecentsStackToFront(java.lang.String)>(r1);

     label46:
        $r33 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r33.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        if z13 == 0 goto label47;

        $r13 = r7.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $z5 = 1 ^ 1;

        virtualinvoke r4.<com.android.server.wm.WindowManagerService: void scheduleClearWillReplaceWindows(android.os.IBinder,boolean)>($r13, $z5);

     label47:
        if z1 != 0 goto label50;

        if z13 != 0 goto label48;

        z20 = 1;

        goto label49;

     label48:
        z20 = 0;

     label49:
        virtualinvoke r3.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, z20);

        virtualinvoke r3.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        goto label50;

     label50:
        $i2 = virtualinvoke r28.<com.android.server.wm.ActivityStack: int getWindowingMode()>();

        $r11 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        virtualinvoke r2.<com.android.server.wm.ActivityStackSupervisor: void handleNonResizableTaskIfNeeded(com.android.server.wm.Task,int,com.android.server.wm.TaskDisplayArea,com.android.server.wm.ActivityStack)>(r0, $i2, $r12, r6);

        if r28 != r6 goto label51;

        goto label52;

     label51:
        z19 = 0;

     label52:
        return z19;

     label53:
        $r22 := @caughtexception;

        r29 = $r22;

        goto label56;

     label54:
        $r21 := @caughtexception;

        r29 = $r21;

        goto label56;

     label55:
        $r23 := @caughtexception;

        r29 = $r23;

     label56:
        $r34 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r34.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw r29;

        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label15;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label34 to label35 with label54;
        catch java.lang.Throwable from label36 to label37 with label29;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label42 to label43 with label40;
        catch java.lang.Throwable from label43 to label44 with label53;
        catch java.lang.Throwable from label45 to label46 with label40;
    }

    boolean reparent(com.android.server.wm.ActivityStack, boolean, int, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack r1;
        boolean z0, z1, z2, $z3;
        int i0, i1;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r2 := @parameter5: java.lang.String;

        if z0 == 0 goto label1;

        i1 = 2147483647;

        goto label2;

     label1:
        i1 = 0;

     label2:
        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,int,int,boolean,boolean,boolean,java.lang.String)>(r1, i1, i0, z1, z2, 1, r2);

        return $z3;
    }

    boolean reparent(com.android.server.wm.ActivityStack, boolean, int, boolean, boolean, boolean, java.lang.String)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityStack r1;
        boolean z0, z1, z2, z3, $z4;
        int i0, i1;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityStack;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        r2 := @parameter6: java.lang.String;

        if z0 == 0 goto label1;

        i1 = 2147483647;

        goto label2;

     label1:
        i1 = 0;

     label2:
        $z4 = virtualinvoke r0.<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,int,int,boolean,boolean,boolean,java.lang.String)>(r1, i1, i0, z1, z2, z3, r2);

        return $z4;
    }

    protected void reparentSurfaceControl(android.view.SurfaceControl$Transaction, android.view.SurfaceControl)
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: android.view.SurfaceControl;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isAlwaysOnTop()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void reparentSurfaceControl(android.view.SurfaceControl$Transaction,android.view.SurfaceControl)>(r1, r2);

        return;
    }

    void resize(boolean, boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0, z1;
        android.graphics.Rect $r1;
        int $i0;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getRequestedOverrideBounds()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect,boolean)>($r1, z1);

        if $i0 == 0 goto label1;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void layoutAndAssignWindowLayersIfNeeded()>();

     label1:
        return;
    }

    boolean resize(android.graphics.Rect, int, boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, $z3, $z4, z6, z7, z9, z10;
        java.lang.IllegalArgumentException r1;
        com.android.server.wm.ActivityTaskManagerService $r2, $r20, $r23, $r27;
        int $i0, $i1, $i2, $i3, i5;
        com.android.server.wm.WindowContainer $r3;
        java.lang.String $r10, $r13;
        android.content.res.Configuration $r14, $r15, $r18, $r19;
        com.android.server.wm.RootWindowContainer $r16, $r17;
        com.android.server.wm.ActivityStackSupervisor $r21;
        java.lang.Throwable $r22;
        android.graphics.Rect r24;
        java.lang.StringBuilder r25, r28;
        com.android.server.wm.ActivityRecord r26;

        r0 := @this: com.android.server.wm.Task;

        r24 := @parameter0: android.graphics.Rect;

        i5 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: void deferWindowLayout()>();

        $i0 = i5 & 2;

        if $i0 == 0 goto label01;

        z6 = 1;

        goto label02;

     label01:
        z6 = 0;

     label02:
        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if $r3 != null goto label04;

        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r24);

        $z4 = virtualinvoke r0.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z4 != 0 goto label03;

        $r21 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r21.<com.android.server.wm.ActivityStackSupervisor: boolean restoreRecentTaskLocked(com.android.server.wm.Task,android.app.ActivityOptions,boolean)>(r0, null, 0);

     label03:
        $r20 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r20.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return 1;

     label04:
        $z1 = specialinvoke r0.<com.android.server.wm.Task: boolean canResizeToBounds(android.graphics.Rect)>(r24);

        if $z1 == 0 goto label17;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resizeTask_");

        $i2 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, $r13);

     label05:
        z7 = 0;

     label06:
        $r14 = r0.<com.android.server.wm.Task: android.content.res.Configuration mTmpConfig>;

        $r15 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        virtualinvoke $r14.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r15);

     label07:
        $i3 = virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r24);

        if $i3 == 0 goto label08;

        $r18 = r0.<com.android.server.wm.Task: android.content.res.Configuration mTmpConfig>;

        $r19 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $z3 = virtualinvoke $r18.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>($r19);

        z7 = 1 ^ $z3;

     label08:
        z9 = 1;

        if z7 == 0 goto label15;

     label09:
        r26 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivityLocked()>();

     label10:
        z9 = 1;

        if r26 == null goto label15;

     label11:
        z10 = virtualinvoke r26.<com.android.server.wm.ActivityRecord: boolean ensureActivityConfiguration(int,boolean)>(0, z0);

        $r16 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r16.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(r26, 0, z0);

     label12:
        z9 = z10;

        if z10 != 0 goto label15;

     label13:
        $r17 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r17.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

     label14:
        z9 = z10;

     label15:
        virtualinvoke r0.<com.android.server.wm.Task: void resize(boolean,boolean)>(z9, z6);

        specialinvoke r0.<com.android.server.wm.Task: void saveLaunchingStateIfNeeded()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label16:
        $r27 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r27.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        return z9;

     label17:
        r1 = new java.lang.IllegalArgumentException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resizeTask: Can not resize task=");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to bounds=");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resizeMode=");

        $i1 = r0.<com.android.server.wm.Task: int mResizeMode>;

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r1;

     label18:
        $r22 := @caughtexception;

        $r23 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        virtualinvoke $r23.<com.android.server.wm.ActivityTaskManagerService: void continueWindowLayout()>();

        throw $r22;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
    }

    void resolveOverrideConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.Task r0;
        android.content.res.Configuration r1, $r3, $r6, $r8, $r11;
        android.graphics.Rect $r2, $r5, $r9;
        android.app.WindowConfiguration $r4, $r7, $r10, $r12;
        int $i0, i1, i2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r4 = $r3.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r5 = virtualinvoke $r4.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r5);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void resolveOverrideConfiguration(android.content.res.Configuration)>(r1);

        $r6 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r7 = $r6.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i1 = virtualinvoke $r7.<android.app.WindowConfiguration: int getWindowingMode()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.Task: int getActivityType()>();

        if $i0 != 2 goto label3;

        if i1 != 0 goto label3;

        $r10 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i2 = virtualinvoke $r10.<android.app.WindowConfiguration: int getWindowingMode()>();

        $z0 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>(i2);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        i2 = 1;

     label2:
        $r11 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        $r12 = $r11.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        virtualinvoke $r12.<android.app.WindowConfiguration: void setWindowingMode(int)>(i2);

     label3:
        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isLeafTask()>();

        if $z1 == 0 goto label4;

        $r9 = r0.<com.android.server.wm.Task: android.graphics.Rect mTmpBounds>;

        specialinvoke r0.<com.android.server.wm.Task: void resolveLeafOnlyOverrideConfigs(android.content.res.Configuration,android.graphics.Rect)>(r1, $r9);

     label4:
        $r8 = virtualinvoke r0.<com.android.server.wm.Task: android.content.res.Configuration getResolvedOverrideConfiguration()>();

        virtualinvoke r0.<com.android.server.wm.Task: void computeConfigResourceOverrides(android.content.res.Configuration,android.content.res.Configuration)>($r8, r1);

        return;
    }

    boolean returnsToHomeStack()
    {
        com.android.server.wm.Task r0, r2;
        boolean $z2, $z3, z4, z5, z6;
        int $i0, $i1;
        android.content.Intent r1;

        r0 := @this: com.android.server.wm.Task;

        z4 = virtualinvoke r0.<com.android.server.wm.Task: boolean inMultiWindowMode()>();

        if z4 != 0 goto label5;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasChild()>();

        if $z2 != 0 goto label1;

        goto label5;

     label1:
        r1 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r1 == null goto label3;

        z5 = 0;

        if r1 == null goto label2;

        z5 = 0;

        $i0 = virtualinvoke r1.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 268451840;

        if $i1 != 268451840 goto label2;

        z5 = 1;

     label2:
        return z5;

     label3:
        r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getBottomMostTask()>();

        z6 = 0;

        if r2 == r0 goto label4;

        z6 = 0;

        $z3 = virtualinvoke r2.<com.android.server.wm.Task: boolean returnsToHomeStack()>();

        if $z3 == 0 goto label4;

        z6 = 1;

     label4:
        return z6;

     label5:
        return 0;
    }

    com.android.server.wm.Task reuseAsLeafTask(android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, android.content.Intent, android.content.pm.ActivityInfo, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        android.service.voice.IVoiceInteractionSession r1;
        com.android.internal.app.IVoiceInteractor r2;
        android.content.Intent r3;
        android.content.pm.ActivityInfo r4;
        com.android.server.wm.ActivityRecord r5;
        com.android.server.wm.ActivityTaskManagerService $r6;
        com.android.server.wm.TaskChangeNotificationController $r7;
        android.content.ComponentName $r8;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.service.voice.IVoiceInteractionSession;

        r2 := @parameter1: com.android.internal.app.IVoiceInteractor;

        r3 := @parameter2: android.content.Intent;

        r4 := @parameter3: android.content.pm.ActivityInfo;

        r5 := @parameter4: com.android.server.wm.ActivityRecord;

        r0.<com.android.server.wm.Task: android.service.voice.IVoiceInteractionSession voiceSession> = r1;

        r0.<com.android.server.wm.Task: com.android.internal.app.IVoiceInteractor voiceInteractor> = r2;

        virtualinvoke r0.<com.android.server.wm.Task: void setIntent(com.android.server.wm.ActivityRecord,android.content.Intent,android.content.pm.ActivityInfo)>(r5, r3, r4);

        virtualinvoke r0.<com.android.server.wm.Task: void setMinDimensions(android.content.pm.ActivityInfo)>(r4);

        $r6 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r8 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        virtualinvoke $r7.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskCreated(int,android.content.ComponentName)>($i0, $r8);

        return r0;
    }

    void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.lang.Exception
    {
        com.android.server.wm.Task r0;
        java.lang.String r1, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r23, $r25, $r27, $r29, $r31, $r35, $r37, $r39, $r41, $r43, $r56, $r59, $r64, $r65, $r67, $r69, r74, r75, r76, r77, r78, r81, r82;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8;
        long $l3;
        android.app.ActivityManager$TaskDescription $r22, $r58;
        android.content.Intent $r45, $r46, $r51, $r54;
        com.android.server.wm.'-$$Lambda$Task$OQmaRDKXdgA0v6VfNwTX7wOkwBs' $r47;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r48;
        com.android.server.wm.ActivityRecord $r49;
        org.xmlpull.v1.XmlSerializer r71;
        android.content.ComponentName r72, r73;
        java.lang.CharSequence r79;
        android.graphics.Rect r83;
        com.android.internal.util.function.pooled.PooledFunction r84;
        java.lang.Exception r85;
        com.android.internal.util.function.TriFunction r86;

        r0 := @this: com.android.server.wm.Task;

        r71 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_id", $r2);

        r72 = r0.<com.android.server.wm.Task: android.content.ComponentName realActivity>;

        if r72 == null goto label01;

        $r69 = virtualinvoke r72.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "real_activity", $r69);

     label01:
        $z0 = r0.<com.android.server.wm.Task: boolean realActivitySuspended>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "real_activity_suspended", $r4);

        r73 = r0.<com.android.server.wm.Task: android.content.ComponentName origActivity>;

        if r73 == null goto label02;

        $r67 = virtualinvoke r73.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "orig_activity", $r67);

     label02:
        r74 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        r75 = "@";

        if r74 == null goto label04;

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "affinity", r74);

        $r65 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        $r64 = r0.<com.android.server.wm.Task: java.lang.String rootAffinity>;

        $z8 = virtualinvoke $r65.<java.lang.String: boolean equals(java.lang.Object)>($r64);

        if $z8 != 0 goto label06;

        r76 = r0.<com.android.server.wm.Task: java.lang.String rootAffinity>;

        if r76 == null goto label03;

        r75 = r76;

     label03:
        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "root_affinity", r75);

        goto label06;

     label04:
        r77 = r0.<com.android.server.wm.Task: java.lang.String rootAffinity>;

        if r77 == null goto label06;

        if r77 == null goto label05;

        r75 = r77;

     label05:
        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "root_affinity", r75);

     label06:
        r78 = r0.<com.android.server.wm.Task: java.lang.String mWindowLayoutAffinity>;

        if r78 == null goto label07;

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "window_layout_affinity", r78);

     label07:
        $z1 = r0.<com.android.server.wm.Task: boolean rootWasReset>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z1);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "root_has_reset", $r6);

        $z2 = r0.<com.android.server.wm.Task: boolean autoRemoveRecents>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z2);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "auto_remove_recents", $r8);

        $z3 = r0.<com.android.server.wm.Task: boolean askedCompatMode>;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z3);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "asked_compat_mode", $r10);

        $i1 = r0.<com.android.server.wm.Task: int mUserId>;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "user_id", $r12);

        $z4 = r0.<com.android.server.wm.Task: boolean mUserSetupComplete>;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "user_setup_complete", $r14);

        $i2 = r0.<com.android.server.wm.Task: int effectiveUid>;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "effective_uid", $r16);

        $l3 = r0.<com.android.server.wm.Task: long mLastTimeMoved>;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l3);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "last_time_moved", $r18);

        $z5 = r0.<com.android.server.wm.Task: boolean mNeverRelinquishIdentity>;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z5);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "never_relinquish_identity", $r20);

        r79 = r0.<com.android.server.wm.Task: java.lang.CharSequence lastDescription>;

        if r79 == null goto label08;

        $r59 = interfaceinvoke r79.<java.lang.CharSequence: java.lang.String toString()>();

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "last_description", $r59);

     label08:
        $r22 = virtualinvoke r0.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

        if $r22 == null goto label09;

        $r58 = virtualinvoke r0.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

        virtualinvoke $r58.<android.app.ActivityManager$TaskDescription: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r71);

     label09:
        $i4 = r0.<com.android.server.wm.Task: int mAffiliatedTaskColor>;

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_affiliation_color", $r23);

        $i5 = r0.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i5);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "task_affiliation", $r25);

        $i6 = r0.<com.android.server.wm.Task: int mPrevAffiliateTaskId>;

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i6);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "prev_affiliation", $r27);

        $i7 = r0.<com.android.server.wm.Task: int mNextAffiliateTaskId>;

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "next_affiliation", $r29);

        $i8 = r0.<com.android.server.wm.Task: int mCallingUid>;

        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i8);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "calling_uid", $r31);

        r1 = r0.<com.android.server.wm.Task: java.lang.String mCallingPackage>;

        r81 = r1;

        if r1 != null goto label10;

        r81 = "";

     label10:
        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "calling_package", r81);

        r82 = r0.<com.android.server.wm.Task: java.lang.String mCallingFeatureId>;

        if r82 != null goto label11;

        r82 = "";

        goto label11;

     label11:
        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "calling_feature_id", r82);

        $i9 = r0.<com.android.server.wm.Task: int mResizeMode>;

        $r35 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i9);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "resize_mode", $r35);

        $z6 = r0.<com.android.server.wm.Task: boolean mSupportsPictureInPicture>;

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z6);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "supports_picture_in_picture", $r37);

        r83 = r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        if r83 == null goto label12;

        $r56 = virtualinvoke r83.<android.graphics.Rect: java.lang.String flattenToString()>();

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "non_fullscreen_bounds", $r56);

     label12:
        $i10 = r0.<com.android.server.wm.Task: int mMinWidth>;

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i10);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "min_width", $r39);

        $i11 = r0.<com.android.server.wm.Task: int mMinHeight>;

        $r41 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i11);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "min_height", $r41);

        $r43 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(1);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "persist_task_version", $r43);

        $r45 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        if $r45 == null goto label13;

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "affinity_intent");

        $r54 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        virtualinvoke $r54.<android.content.Intent: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r71);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "affinity_intent");

     label13:
        $r46 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if $r46 == null goto label14;

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "intent");

        $r51 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        virtualinvoke $r51.<android.content.Intent: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r71);

        interfaceinvoke r71.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "intent");

     label14:
        <com.android.server.wm.Task: java.lang.Exception sTmpException> = null;

        $r47 = <com.android.server.wm._$$Lambda$Task$OQmaRDKXdgA0v6VfNwTX7wOkwBs: com.android.server.wm.'-$$Lambda$Task$OQmaRDKXdgA0v6VfNwTX7wOkwBs' INSTANCE>;

        $r48 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r49 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getBottomMostActivity()>();

        r86 = (com.android.internal.util.function.TriFunction) $r47;

        r84 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(com.android.internal.util.function.TriFunction,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r86, $r48, $r49, r71);

        virtualinvoke r0.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function)>(r84);

        interfaceinvoke r84.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

        r85 = <com.android.server.wm.Task: java.lang.Exception sTmpException>;

        if r85 != null goto label15;

        return;

     label15:
        throw r85;
    }

    void setActivityWindowingMode(int)
    {
        com.android.server.wm.Task r0;
        int i0;
        com.android.internal.util.function.pooled.PooledConsumer r1;
        com.android.server.wm.'-$$Lambda$eT9SjQHKmQJBvlyYh6oQCJNBjSE' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        java.util.function.BiConsumer r5;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        $r2 = <com.android.server.wm._$$Lambda$eT9SjQHKmQJBvlyYh6oQCJNBjSE: com.android.server.wm.'-$$Lambda$eT9SjQHKmQJBvlyYh6oQCJNBjSE' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r5 = (java.util.function.BiConsumer) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r5, $r3, $r4);

        virtualinvoke r0.<com.android.server.wm.Task: void forAllActivities(java.util.function.Consumer)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    public int setBounds(android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1;
        int i0, i1;
        com.android.server.wm.ActivityStack $r2, $r4;
        android.view.DisplayInfo $r3;
        com.android.server.wm.DisplayContent r5;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        i1 = 0;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        r5 = virtualinvoke $r4.<com.android.server.wm.ActivityStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label2;

     label1:
        r5 = null;

     label2:
        if r5 == null goto label3;

        $r3 = virtualinvoke r5.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i1 = $r3.<android.view.DisplayInfo: int rotation>;

     label3:
        i0 = specialinvoke r0.<com.android.server.wm.WindowContainer: int setBounds(android.graphics.Rect)>(r1);

        r0.<com.android.server.wm.Task: int mRotation> = i1;

        virtualinvoke r0.<com.android.server.wm.Task: void updateSurfacePosition()>();

        return i0;
    }

    public int setBounds(android.graphics.Rect, boolean)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1;
        boolean z0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r1);

        if z0 == 0 goto label1;

        $i1 = i0 & 2;

        if $i1 == 2 goto label1;

        virtualinvoke r0.<com.android.server.wm.Task: void onResize()>();

        $i2 = i0 | 2;

        return $i2;

     label1:
        return i0;
    }

    void setCanAffectSystemUiFlags(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.Task: boolean mCanAffectSystemUiFlags> = z0;

        return;
    }

    void setDragResizing(boolean, int)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1, $z2;
        int i0, $i1;
        com.android.server.wm.ActivityStack $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.wm.Task: boolean mDragResizing>;

        if $z1 == z0 goto label3;

        if z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $z2 = staticinvoke <com.android.server.wm.DragResizeMode: boolean isModeAllowedForStack(com.android.server.wm.ActivityStack,int)>($r2, i0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drag resize mode not allow for stack stackId=");

        $i1 = virtualinvoke r0.<com.android.server.wm.Task: int getRootTaskId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dragResizeMode=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        r0.<com.android.server.wm.Task: boolean mDragResizing> = z0;

        r0.<com.android.server.wm.Task: int mDragResizeMode> = i0;

        virtualinvoke r0.<com.android.server.wm.Task: void resetDragResizingChangeReported()>();

     label3:
        return;
    }

    boolean setForceHidden(int, boolean)
    {
        com.android.server.wm.Task r0;
        int i0, $i1, i2, i3;
        boolean $z0, z1, z2;
        com.android.server.wm.TaskDisplayArea $r1;

        r0 := @this: com.android.server.wm.Task;

        i2 := @parameter0: int;

        z1 := @parameter1: boolean;

        i0 = r0.<com.android.server.wm.Task: int mForceHiddenFlags>;

        if z1 == 0 goto label1;

        i3 = i0 | i2;

        goto label2;

     label1:
        i3 = i0 & i2;

     label2:
        $i1 = r0.<com.android.server.wm.Task: int mForceHiddenFlags>;

        if $i1 != i3 goto label3;

        return 0;

     label3:
        z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean isForceHidden()>();

        r0.<com.android.server.wm.Task: int mForceHiddenFlags> = i3;

        if z2 == 0 goto label4;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isFocusableAndVisible()>();

        if $z0 == 0 goto label4;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        virtualinvoke $r1.<com.android.server.wm.TaskDisplayArea: void resetPreferredTopFocusableStackIfBelow(com.android.server.wm.Task)>(r0);

     label4:
        return 1;
    }

    void setForceShowForAllUsers(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.Task: boolean mForceShowForAllUsers> = z0;

        return;
    }

    void setHasBeenVisible(boolean)
    {
        com.android.server.wm.Task r0, $r1;
        boolean z0, z1, $z2, $z3;
        android.window.ITaskOrganizer $r2;
        android.view.SurfaceControl$Transaction $r3;
        android.view.SurfaceControl $r4;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        z1 = r0.<com.android.server.wm.Task: boolean mHasBeenVisible>;

        r0.<com.android.server.wm.Task: boolean mHasBeenVisible> = z0;

        if z0 == 0 goto label2;

        $z2 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z2 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if $r2 == null goto label1;

        if z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction hide(android.view.SurfaceControl)>($r4);

        virtualinvoke r0.<com.android.server.wm.Task: void commitPendingTransaction()>();

     label1:
        specialinvoke r0.<com.android.server.wm.Task: void sendTaskAppeared()>();

        $z3 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z3 != 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        virtualinvoke $r1.<com.android.server.wm.Task: void setHasBeenVisible(boolean)>(1);

     label2:
        return;
    }

    void setInitialSurfaceControlProperties(android.view.SurfaceControl$Builder)
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl$Builder r1, $r2;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.view.SurfaceControl$Builder;

        $r2 = virtualinvoke r1.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setEffectLayer()>();

        $i0 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r2.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setMetadata(int,int)>(3, $i0);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void setInitialSurfaceControlProperties(android.view.SurfaceControl$Builder)>(r1);

        return;
    }

    void setIntent(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r0.<com.android.server.wm.Task: void setIntent(com.android.server.wm.ActivityRecord,android.content.Intent,android.content.pm.ActivityInfo)>(r1, null, null);

        return;
    }

    void setIntent(com.android.server.wm.ActivityRecord, android.content.Intent, android.content.pm.ActivityInfo)
    {
        com.android.server.wm.Task r0, r7;
        com.android.server.wm.ActivityRecord r1;
        int $i0;
        java.lang.String $r2, $r3;
        android.content.Intent r4;
        android.content.pm.ActivityInfo r5;
        com.android.server.wm.WindowContainer r6;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r4 := @parameter1: android.content.Intent;

        r5 := @parameter2: android.content.pm.ActivityInfo;

        $i0 = r1.<com.android.server.wm.ActivityRecord: int launchedFromUid>;

        r0.<com.android.server.wm.Task: int mCallingUid> = $i0;

        $r2 = r1.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromPackage>;

        r0.<com.android.server.wm.Task: java.lang.String mCallingPackage> = $r2;

        $r3 = r1.<com.android.server.wm.ActivityRecord: java.lang.String launchedFromFeatureId>;

        r0.<com.android.server.wm.Task: java.lang.String mCallingFeatureId> = $r3;

        if r4 == null goto label1;

        goto label2;

     label1:
        r4 = r1.<com.android.server.wm.ActivityRecord: android.content.Intent intent>;

     label2:
        if r5 == null goto label3;

        goto label4;

     label3:
        r5 = r1.<com.android.server.wm.ActivityRecord: android.content.pm.ActivityInfo info>;

     label4:
        specialinvoke r0.<com.android.server.wm.Task: void setIntent(android.content.Intent,android.content.pm.ActivityInfo)>(r4, r5);

        specialinvoke r0.<com.android.server.wm.Task: void setLockTaskAuth(com.android.server.wm.ActivityRecord)>(r1);

        r6 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if r6 == null goto label5;

        r7 = virtualinvoke r6.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r7 == null goto label5;

        virtualinvoke r7.<com.android.server.wm.Task: void setIntent(com.android.server.wm.ActivityRecord)>(r1);

     label5:
        return;
    }

    void setLastNonFullscreenBounds(android.graphics.Rect)
    {
        com.android.server.wm.Task r0;
        android.graphics.Rect r1, r2, $r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        if r2 != null goto label1;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r1);

        r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds> = $r3;

        goto label2;

     label1:
        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

     label2:
        return;
    }

    void setLockTaskAuth()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity()>();

        specialinvoke r0.<com.android.server.wm.Task: void setLockTaskAuth(com.android.server.wm.ActivityRecord)>($r1);

        return;
    }

    void setMainWindowSizeChangeTransaction(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.'-$$Lambda$6CGpg-bvz7DUll5JEZwd1mT8fPQ' $r2;
        java.util.function.Consumer r3;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        specialinvoke r0.<com.android.server.wm.Task: void setMainWindowSizeChangeTransaction(android.view.SurfaceControl$Transaction,com.android.server.wm.Task)>(r1, r0);

        $r2 = <com.android.server.wm._$$Lambda$6CGpg_bvz7DUll5JEZwd1mT8fPQ: com.android.server.wm.'-$$Lambda$6CGpg-bvz7DUll5JEZwd1mT8fPQ' INSTANCE>;

        r3 = (java.util.function.Consumer) $r2;

        virtualinvoke r0.<com.android.server.wm.Task: void forAllWindows(java.util.function.Consumer,boolean)>(r3, 1);

        return;
    }

    void setMinDimensions(android.content.pm.ActivityInfo)
    {
        com.android.server.wm.Task r0;
        android.content.pm.ActivityInfo r1;
        android.content.pm.ActivityInfo$WindowLayout $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.content.pm.ActivityInfo;

        if r1 == null goto label1;

        $r2 = r1.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        if $r2 == null goto label1;

        $r3 = r1.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $i0 = $r3.<android.content.pm.ActivityInfo$WindowLayout: int minWidth>;

        r0.<com.android.server.wm.Task: int mMinWidth> = $i0;

        $r4 = r1.<android.content.pm.ActivityInfo: android.content.pm.ActivityInfo$WindowLayout windowLayout>;

        $i1 = $r4.<android.content.pm.ActivityInfo$WindowLayout: int minHeight>;

        r0.<com.android.server.wm.Task: int mMinHeight> = $i1;

        goto label2;

     label1:
        r0.<com.android.server.wm.Task: int mMinWidth> = -1;

        r0.<com.android.server.wm.Task: int mMinHeight> = -1;

     label2:
        return;
    }

    void setNextAffiliate(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0, r1;
        int i0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.Task;

        r0.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate> = r1;

        if r1 != null goto label1;

        i0 = -1;

        goto label2;

     label1:
        i0 = r1.<com.android.server.wm.Task: int mTaskId>;

     label2:
        r0.<com.android.server.wm.Task: int mNextAffiliateTaskId> = i0;

        return;
    }

    void setPrevAffiliate(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0, r1;
        int i0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.Task;

        r0.<com.android.server.wm.Task: com.android.server.wm.Task mPrevAffiliate> = r1;

        if r1 != null goto label1;

        i0 = -1;

        goto label2;

     label1:
        i0 = r1.<com.android.server.wm.Task: int mTaskId>;

     label2:
        r0.<com.android.server.wm.Task: int mPrevAffiliateTaskId> = i0;

        return;
    }

    void setResizeMode(int)
    {
        com.android.server.wm.Task r0;
        int i0, $i1;
        com.android.server.wm.RootWindowContainer $r1, $r2;

        r0 := @this: com.android.server.wm.Task;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.Task: int mResizeMode>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.Task: int mResizeMode> = i0;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: void ensureActivitiesVisible(com.android.server.wm.ActivityRecord,int,boolean)>(null, 0, 0);

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: boolean resumeFocusedStacksTopActivities()>();

        virtualinvoke r0.<com.android.server.wm.Task: void updateTaskDescription()>();

        return;
    }

    void setResumedActivity(com.android.server.wm.ActivityRecord, java.lang.String)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1, $r3;
        java.lang.String r2;
        com.android.server.wm.ActivityStackSupervisor $r4;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mResumedActivity>;

        if $r3 != r1 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord mResumedActivity> = r1;

        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        virtualinvoke $r4.<com.android.server.wm.ActivityStackSupervisor: void updateTopResumedActivityIfNeeded()>();

        return;
    }

    void setRootProcess(com.android.server.wm.WindowProcessController)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowProcessController r1;
        android.content.Intent r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.WindowProcessController;

        virtualinvoke r0.<com.android.server.wm.Task: void clearRootProcess()>();

        r2 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r2 == null goto label1;

        $i0 = virtualinvoke r2.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 8388608;

        if $i1 != 0 goto label1;

        r0.<com.android.server.wm.Task: com.android.server.wm.WindowProcessController mRootProcess> = r1;

        virtualinvoke r1.<com.android.server.wm.WindowProcessController: void addRecentTask(com.android.server.wm.Task)>(r0);

     label1:
        return;
    }

    void setSurfaceControl(android.view.SurfaceControl)
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.view.SurfaceControl;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void setSurfaceControl(android.view.SurfaceControl)>(r1);

        specialinvoke r0.<com.android.server.wm.Task: void sendTaskAppeared()>();

        return;
    }

    void setTaskDescription(android.app.ActivityManager$TaskDescription)
    {
        com.android.server.wm.Task r0;
        android.app.ActivityManager$TaskDescription r1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.app.ActivityManager$TaskDescription;

        r0.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription mTaskDescription> = r1;

        return;
    }

    boolean setTaskOrganizer(android.window.ITaskOrganizer)
    {
        com.android.server.wm.Task r0;
        android.window.ITaskOrganizer r1, r2, $r3, $r4;
        boolean $z1;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.window.ITaskOrganizer;

        $r3 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if $r3 != r1 goto label1;

        return 0;

     label1:
        r2 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer> = r1;

        specialinvoke r0.<com.android.server.wm.Task: void sendTaskVanished(android.window.ITaskOrganizer)>(r2);

        $r4 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if $r4 == null goto label2;

        specialinvoke r0.<com.android.server.wm.Task: void sendTaskAppeared()>();

        goto label3;

     label2:
        r0.<com.android.server.wm.Task: boolean mTaskAppearedSent> = 0;

        r0.<com.android.server.wm.Task: int mLastTaskOrganizerWindowingMode> = -1;

        virtualinvoke r0.<com.android.server.wm.Task: boolean setForceHidden(int,boolean)>(2, 0);

        $z1 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.Task: void removeImmediately()>();

     label3:
        return 1;
    }

    void setTaskToAffiliateWith(com.android.server.wm.Task)
    {
        com.android.server.wm.Task r0, r1, $r3, $r12, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r4;
        java.lang.String $r11;

        r0 := @this: com.android.server.wm.Task;

        r13 := @parameter0: com.android.server.wm.Task;

        specialinvoke r0.<com.android.server.wm.Task: void closeRecentsChain()>();

        $i0 = r13.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        r0.<com.android.server.wm.Task: int mAffiliatedTaskId> = $i0;

        $i1 = r13.<com.android.server.wm.Task: int mAffiliatedTaskColor>;

        r0.<com.android.server.wm.Task: int mAffiliatedTaskColor> = $i1;

     label1:
        $r3 = r13.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate>;

        if $r3 == null goto label4;

        r1 = r13.<com.android.server.wm.Task: com.android.server.wm.Task mNextAffiliate>;

        $i3 = r1.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        $i2 = r0.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        if $i3 == $i2 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setTaskToAffiliateWith: nextRecents=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" affilTaskId=");

        $i4 = r1.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be ");

        $i5 = r0.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ActivityTaskManager", $r11);

        $r12 = r1.<com.android.server.wm.Task: com.android.server.wm.Task mPrevAffiliate>;

        if $r12 != r13 goto label2;

        virtualinvoke r1.<com.android.server.wm.Task: void setPrevAffiliate(com.android.server.wm.Task)>(null);

     label2:
        virtualinvoke r13.<com.android.server.wm.Task: void setNextAffiliate(com.android.server.wm.Task)>(null);

        goto label4;

     label3:
        r13 = r1;

        goto label1;

     label4:
        virtualinvoke r13.<com.android.server.wm.Task: void setNextAffiliate(com.android.server.wm.Task)>(r0);

        virtualinvoke r0.<com.android.server.wm.Task: void setPrevAffiliate(com.android.server.wm.Task)>(r13);

        virtualinvoke r0.<com.android.server.wm.Task: void setNextAffiliate(com.android.server.wm.Task)>(null);

        return;
    }

    boolean shouldAnimate()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.RecentsAnimationController r1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.Task;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.RecentsAnimationController: boolean isAnimatingTask(com.android.server.wm.Task)>(r0);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r1.<com.android.server.wm.RecentsAnimationController: boolean shouldDeferCancelUntilNextTransition()>();

        if $z2 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    boolean shouldBeVisible(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $i0 = virtualinvoke r0.<com.android.server.wm.Task: int getVisibility(com.android.server.wm.ActivityRecord)>(r1);

        if $i0 == 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean shouldDeferRemoval()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowList $r1;
        boolean $z1, $z2, z3, z4;
        com.android.server.wm.ActivityStack $r2;

        r0 := @this: com.android.server.wm.Task;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        z3 = virtualinvoke $r1.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if z3 == 0 goto label1;

        return 0;

     label1:
        z4 = 0;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean hasWindowsAlive()>();

        if $z1 == 0 goto label2;

        z4 = 0;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $z2 = virtualinvoke $r2.<com.android.server.wm.ActivityStack: boolean isAnimating(int)>(5);

        if $z2 == 0 goto label2;

        z4 = 1;

     label2:
        return z4;
    }

    boolean showForAllUsers()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.WindowList $r2;
        boolean $z1, z2, z3;

        r0 := @this: com.android.server.wm.Task;

        $r2 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowList mChildren>;

        z2 = virtualinvoke $r2.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if z2 == 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopNonFinishingActivity()>();

        z3 = 0;

        if r1 == null goto label2;

        z3 = 0;

        $z1 = r1.<com.android.server.wm.ActivityRecord: boolean mShowForAllUsers>;

        if $z1 == 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    boolean showToCurrentUser()
    {
        com.android.server.wm.Task r0, $r2;
        boolean $z0, $z1, $z2, z3;
        com.android.server.wm.WindowManagerService $r1;
        int $i0;

        r0 := @this: com.android.server.wm.Task;

        $z0 = r0.<com.android.server.wm.Task: boolean mForceShowForAllUsers>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean showForAllUsers()>();

        if $z1 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getTopMostTask()>();

        $i0 = $r2.<com.android.server.wm.Task: int mUserId>;

        $z2 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean isCurrentProfile(int)>($i0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public boolean supportsSplitScreenWindowingMode()
    {
        com.android.server.wm.Task r0, r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getTopMostTask()>();

        $z0 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean supportsSplitScreenWindowingMode()>();

        if $z0 == 0 goto label2;

        if r1 == null goto label1;

        $z1 = specialinvoke r1.<com.android.server.wm.Task: boolean supportsSplitScreenWindowingModeInner()>();

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean taskAppearedReady()
    {
        com.android.server.wm.Task r0;
        android.window.ITaskOrganizer r1;
        boolean $z1, $z2, z3;
        android.view.SurfaceControl $r2;

        r0 := @this: com.android.server.wm.Task;

        r1 = r0.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z1 = r0.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        z3 = 0;

        $r2 = r0.<com.android.server.wm.Task: android.view.SurfaceControl mSurfaceControl>;

        if $r2 == null goto label3;

        z3 = 0;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean getHasBeenVisible()>();

        if $z2 == 0 goto label3;

        z3 = 1;

     label3:
        return z3;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.Task r0;
        java.lang.StringBuilder $r2, $r8, $r13, $r19, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r4, $r11, $r15, $r17, $r21, $r23, $r28, $r30, $r36, $r42, $r45, $r55, r56, $r63, $r64;
        boolean $z0, $z1;
        android.content.ComponentName $r32, $r35, $r38, $r41;
        android.content.Intent $r34, $r40, r61, r62;

        r0 := @this: com.android.server.wm.Task;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(128);

        r56 = r0.<com.android.server.wm.Task: java.lang.String stringName>;

        if r56 == null goto label1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" U=");

        $i4 = r0.<com.android.server.wm.Task: int mUserId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" StackId=");

        $i5 = virtualinvoke r0.<com.android.server.wm.Task: int getRootTaskId()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sz=");

        $i6 = virtualinvoke r0.<com.android.server.wm.Task: int getChildCount()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r55 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r55;

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task{");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #");

        $i1 = r0.<com.android.server.wm.Task: int mTaskId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" visible=");

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean shouldBeVisible(com.android.server.wm.ActivityRecord)>(null);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $i2 = virtualinvoke r0.<com.android.server.wm.Task: int getActivityType()>();

        $r15 = staticinvoke <android.app.WindowConfiguration: java.lang.String activityTypeToString(int)>($i2);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mode=");

        $i3 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        $r21 = staticinvoke <android.app.WindowConfiguration: java.lang.String windowingModeToString(int)>($i3);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" translucent=");

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isTranslucent(com.android.server.wm.ActivityRecord)>(null);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        if $r30 == null goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" A=");

        $r45 = r0.<com.android.server.wm.Task: java.lang.String affinity>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        goto label5;

     label2:
        r61 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r61 == null goto label3;

        $r38 = virtualinvoke r61.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r38 == null goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" I=");

        $r40 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        $r41 = virtualinvoke $r40.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r42 = virtualinvoke $r41.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        goto label5;

     label3:
        r62 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        if r62 == null goto label4;

        $r32 = virtualinvoke r62.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r32 == null goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aI=");

        $r34 = r0.<com.android.server.wm.Task: android.content.Intent affinityIntent>;

        $r35 = virtualinvoke $r34.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r36 = virtualinvoke $r35.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        goto label5;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ??");

     label5:
        $r63 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.Task: java.lang.String stringName> = $r63;

        $r64 = virtualinvoke r0.<com.android.server.wm.Task: java.lang.String toString()>();

        return $r64;
    }

    com.android.server.wm.ActivityRecord topActivityWithStartingWindow()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.'-$$Lambda$Task$NjqppbKxK56id-VgjMiQP_fUgAA' $r2;
        com.android.server.wm.ActivityRecord $r3;
        java.util.function.Predicate r4;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = <com.android.server.wm._$$Lambda$Task$NjqppbKxK56id_VgjMiQP_fUgAA: com.android.server.wm.'-$$Lambda$Task$NjqppbKxK56id-VgjMiQP_fUgAA' INSTANCE>;

        r4 = (java.util.function.Predicate) $r2;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r4);

        return $r3;
    }

    com.android.server.wm.ActivityRecord topRunningActivity()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord $r1;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord topRunningActivity(boolean)>(0);

        return $r1;
    }

    com.android.server.wm.ActivityRecord topRunningActivity(android.os.IBinder, int)
    {
        com.android.server.wm.Task r0;
        int i0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.'-$$Lambda$Task$wc9vA2EWxCoWO_MzNTKvEB8eLgw' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        android.os.IBinder r5;
        com.android.internal.util.function.pooled.PooledPredicate r6;
        com.android.internal.util.function.TriPredicate r7;

        r0 := @this: com.android.server.wm.Task;

        r5 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r2 = <com.android.server.wm._$$Lambda$Task$wc9vA2EWxCoWO_MzNTKvEB8eLgw: com.android.server.wm.'-$$Lambda$Task$wc9vA2EWxCoWO_MzNTKvEB8eLgw' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r7 = (com.android.internal.util.function.TriPredicate) $r2;

        r6 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(com.android.internal.util.function.TriPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r7, $r3, $r4, r5);

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r6);

        interfaceinvoke r6.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        return r1;
    }

    com.android.server.wm.ActivityRecord topRunningActivity(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0;
        com.android.server.wm.'-$$Lambda$DaFwIyqZTBVKE2y-TN2iE7CD-r8' $r1;
        com.android.server.wm.ActivityRecord $r2, $r4;
        com.android.server.wm.'-$$Lambda$Task$9j7BnRlFAodU0lX24yspPfgQBcI' $r3;
        java.util.function.Predicate r5, r6;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r3 = <com.android.server.wm._$$Lambda$Task$9j7BnRlFAodU0lX24yspPfgQBcI: com.android.server.wm.'-$$Lambda$Task$9j7BnRlFAodU0lX24yspPfgQBcI' INSTANCE>;

        r5 = (java.util.function.Predicate) $r3;

        $r4 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r5);

        return $r4;

     label1:
        $r1 = <com.android.server.wm._$$Lambda$DaFwIyqZTBVKE2y_TN2iE7CD_r8: com.android.server.wm.'-$$Lambda$DaFwIyqZTBVKE2y-TN2iE7CD-r8' INSTANCE>;

        r6 = (java.util.function.Predicate) $r1;

        $r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r6);

        return $r2;
    }

    com.android.server.wm.ActivityRecord topRunningActivityLocked()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.WindowContainer $r1;
        com.android.server.wm.'-$$Lambda$DaFwIyqZTBVKE2y-TN2iE7CD-r8' $r2;
        com.android.server.wm.ActivityRecord $r3;
        java.util.function.Predicate r4;

        r0 := @this: com.android.server.wm.Task;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = <com.android.server.wm._$$Lambda$DaFwIyqZTBVKE2y_TN2iE7CD_r8: com.android.server.wm.'-$$Lambda$DaFwIyqZTBVKE2y-TN2iE7CD-r8' INSTANCE>;

        r4 = (java.util.function.Predicate) $r2;

        $r3 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r4);

        return $r3;
    }

    com.android.server.wm.ActivityRecord topRunningNonDelayedActivityLocked(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1, r4;
        com.android.server.wm.'-$$Lambda$Task$vJaPYJ0TW6MLVfOETMoxr75oHkk' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        com.android.internal.util.function.pooled.PooledPredicate r5;
        java.util.function.BiPredicate r6;

        r0 := @this: com.android.server.wm.Task;

        r4 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = <com.android.server.wm._$$Lambda$Task$vJaPYJ0TW6MLVfOETMoxr75oHkk: com.android.server.wm.'-$$Lambda$Task$vJaPYJ0TW6MLVfOETMoxr75oHkk' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r6 = (java.util.function.BiPredicate) $r2;

        r5 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledPredicate obtainPredicate(java.util.function.BiPredicate,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r3, r4);

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r5);

        interfaceinvoke r5.<com.android.internal.util.function.pooled.PooledPredicate: void recycle()>();

        return r1;
    }

    void touchActiveTime()
    {
        com.android.server.wm.Task r0;
        long $l0;

        r0 := @this: com.android.server.wm.Task;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.wm.Task: long lastActiveTime> = $l0;

        return;
    }

    void updateEffectiveIntent()
    {
        com.android.server.wm.Task r0;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.Task;

        r1 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity(boolean)>(1);

        if r1 == null goto label1;

        virtualinvoke r0.<com.android.server.wm.Task: void setIntent(com.android.server.wm.ActivityRecord)>(r1);

        virtualinvoke r0.<com.android.server.wm.Task: void updateTaskDescription()>();

     label1:
        return;
    }

    void updateOverrideConfigurationForStack(com.android.server.wm.ActivityStack)
    {
        com.android.server.wm.Task r0;
        boolean $z0, $z1, $z2;
        android.graphics.Rect $r1, r13;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        com.android.server.wm.ActivityStackSupervisor $r9;
        com.android.server.wm.LaunchParamsController $r10;
        com.android.server.wm.ActivityStack r11, r12;

        r0 := @this: com.android.server.wm.Task;

        r11 := @parameter0: com.android.server.wm.ActivityStack;

        r12 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r12 == null goto label1;

        if r12 != r11 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r11.<com.android.server.wm.ActivityStack: boolean inFreeformWindowingMode()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean matchParentBounds()>();

        if $z2 != 0 goto label2;

        return;

     label2:
        r13 = r0.<com.android.server.wm.Task: android.graphics.Rect mLastNonFullscreenBounds>;

        if r13 == null goto label3;

        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r13);

        goto label6;

     label3:
        $r9 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityStackSupervisor mStackSupervisor>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.ActivityStackSupervisor: com.android.server.wm.LaunchParamsController getLaunchParamsController()>();

        virtualinvoke $r10.<com.android.server.wm.LaunchParamsController: boolean layoutTask(com.android.server.wm.Task,android.content.pm.ActivityInfo$WindowLayout)>(r0, null);

        goto label6;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not position non-resizeable task=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in stack=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label5:
        $r1 = virtualinvoke r11.<com.android.server.wm.ActivityStack: android.graphics.Rect getRequestedOverrideBounds()>();

        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>($r1);

     label6:
        return;
    }

    android.graphics.Rect updateOverrideConfigurationFromLaunchBounds()
    {
        com.android.server.wm.Task r0, r2;
        boolean $z0, $z1;
        android.graphics.Rect $r1, r3;

        r0 := @this: com.android.server.wm.Task;

        r2 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        if r2 == r0 goto label1;

        $z1 = virtualinvoke r2.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z1 == 0 goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getLaunchBounds()>();

     label2:
        virtualinvoke r0.<com.android.server.wm.Task: int setBounds(android.graphics.Rect)>(r3);

        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r1 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getRequestedOverrideBounds()>();

        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r1);

     label3:
        return r3;
    }

    void updateSurfaceSize(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.Task r0;
        android.view.SurfaceControl$Transaction r1;
        android.graphics.Rect r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        android.view.SurfaceControl $r3, $r5;
        boolean $z0, $z1;
        android.graphics.Point $r4, $r7, $r8;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $r3 = r0.<com.android.server.wm.Task: android.view.SurfaceControl mSurfaceControl>;

        if $r3 == null goto label4;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 == 0 goto label1;

        goto label4;

     label1:
        i5 = 0;

        i6 = 0;

        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z1 == 0 goto label2;

        r2 = virtualinvoke r0.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        i7 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        i0 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        i8 = virtualinvoke r0.<com.android.server.wm.Task: int getTaskOutset()>();

        $i3 = i8 * 2;

        i5 = i7 + $i3;

        $i4 = i8 * 2;

        i6 = i0 + $i4;

     label2:
        $r4 = r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize>;

        $i1 = $r4.<android.graphics.Point: int x>;

        if i5 != $i1 goto label3;

        $r8 = r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize>;

        $i2 = $r8.<android.graphics.Point: int y>;

        if i6 != $i2 goto label3;

        return;

     label3:
        $r5 = r0.<com.android.server.wm.Task: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,int,int)>($r5, i5, i6);

        $r7 = r0.<com.android.server.wm.Task: android.graphics.Point mLastSurfaceSize>;

        virtualinvoke $r7.<android.graphics.Point: void set(int,int)>(i5, i6);

        return;

     label4:
        return;
    }

    void updateTaskDescription()
    {
        com.android.server.wm.Task r0, r13;
        com.android.server.wm.'-$$Lambda$Task$TUGPkEKamN60PF6hJQxUwDBjU-M' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.wm.ActivityTaskManagerService $r4, $r7;
        com.android.server.wm.TaskChangeNotificationController $r5;
        android.app.ActivityManager$RunningTaskInfo $r6;
        com.android.server.wm.TaskOrganizerController $r8;
        com.android.server.wm.ActivityRecord r9;
        com.android.internal.util.function.pooled.PooledFunction r11;
        com.android.server.wm.WindowContainer r12;
        boolean $z1;
        android.app.ActivityManager$TaskDescription r14;
        com.android.internal.util.function.TriFunction r15;

        r0 := @this: com.android.server.wm.Task;

        r9 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getRootActivity(boolean)>(1);

        if r9 != null goto label1;

        return;

     label1:
        r14 = new android.app.ActivityManager$TaskDescription;

        specialinvoke r14.<android.app.ActivityManager$TaskDescription: void <init>()>();

        $r2 = <com.android.server.wm._$$Lambda$Task$TUGPkEKamN60PF6hJQxUwDBjU_M: com.android.server.wm.'-$$Lambda$Task$TUGPkEKamN60PF6hJQxUwDBjU-M' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __(java.lang.Class)>(class "Lcom/android/server/wm/ActivityRecord;");

        r15 = (com.android.internal.util.function.TriFunction) $r2;

        r11 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledFunction obtainFunction(com.android.internal.util.function.TriFunction,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object,java.lang.Object)>(r15, $r3, r9, r14);

        virtualinvoke r0.<com.android.server.wm.Task: boolean forAllActivities(java.util.function.Function)>(r11);

        interfaceinvoke r11.<com.android.internal.util.function.pooled.PooledFunction: void recycle()>();

        $i0 = r0.<com.android.server.wm.Task: int mResizeMode>;

        virtualinvoke r14.<android.app.ActivityManager$TaskDescription: void setResizeMode(int)>($i0);

        $i1 = r0.<com.android.server.wm.Task: int mMinWidth>;

        virtualinvoke r14.<android.app.ActivityManager$TaskDescription: void setMinWidth(int)>($i1);

        $i2 = r0.<com.android.server.wm.Task: int mMinHeight>;

        virtualinvoke r14.<android.app.ActivityManager$TaskDescription: void setMinHeight(int)>($i2);

        virtualinvoke r0.<com.android.server.wm.Task: void setTaskDescription(android.app.ActivityManager$TaskDescription)>(r14);

        $i4 = r0.<com.android.server.wm.Task: int mTaskId>;

        $i3 = r0.<com.android.server.wm.Task: int mAffiliatedTaskId>;

        if $i4 != $i3 goto label2;

        $i5 = virtualinvoke r14.<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>();

        r0.<com.android.server.wm.Task: int mAffiliatedTaskColor> = $i5;

     label2:
        $r4 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $r6 = virtualinvoke r0.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        virtualinvoke $r5.<com.android.server.wm.TaskChangeNotificationController: void notifyTaskDescriptionChanged(android.app.TaskInfo)>($r6);

        r12 = virtualinvoke r0.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        if r12 == null goto label3;

        r13 = virtualinvoke r12.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

        if r13 == null goto label3;

        virtualinvoke r13.<com.android.server.wm.Task: void updateTaskDescription()>();

     label3:
        $z1 = virtualinvoke r0.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z1 == 0 goto label4;

        $r7 = r0.<com.android.server.wm.Task: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r8 = $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        virtualinvoke $r8.<com.android.server.wm.TaskOrganizerController: void dispatchTaskInfoChanged(com.android.server.wm.Task,boolean)>(r0, 0);

     label4:
        return;
    }

    void updateTaskMovement(boolean)
    {
        com.android.server.wm.Task r0;
        boolean z0, $z1;
        long l0, $l1;
        com.android.server.wm.RootWindowContainer $r1;

        r0 := @this: com.android.server.wm.Task;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.Task: boolean isPersistable>;

        if $z1 == 0 goto label1;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.server.wm.Task: long mLastTimeMoved> = l0;

        if z0 != 0 goto label1;

        $l1 = l0 * -1L;

        r0.<com.android.server.wm.Task: long mLastTimeMoved> = $l1;

     label1:
        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: void invalidateTaskLayers()>();

        return;
    }

    boolean updateTaskOrganizerState(boolean)
    {
        com.android.server.wm.Task r0;
        int i0, $i1;
        boolean $z0, z1, z2;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.TaskOrganizerController $r3;
        android.window.ITaskOrganizer $r4;

        r0 := @this: com.android.server.wm.Task;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<com.android.server.wm.Task: boolean isRootTask()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        if z1 != 0 goto label2;

        $i1 = r0.<com.android.server.wm.Task: int mLastTaskOrganizerWindowingMode>;

        if i0 != $i1 goto label2;

        return 0;

     label2:
        $r1 = r0.<com.android.server.wm.Task: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskOrganizerController mTaskOrganizerController>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.TaskOrganizerController: android.window.ITaskOrganizer getTaskOrganizer(int)>(i0);

        z2 = virtualinvoke r0.<com.android.server.wm.Task: boolean setTaskOrganizer(android.window.ITaskOrganizer)>($r4);

        r0.<com.android.server.wm.Task: int mLastTaskOrganizerWindowingMode> = i0;

        return z2;
    }

    void writeIdentifierToProto(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.wm.Task r0;
        android.util.proto.ProtoOutputStream r1;
        int $i0, $i1;
        android.content.ComponentName $r2, $r4;
        android.content.Intent $r3, r5;
        long l2, l3;
        java.lang.String r6;

        r0 := @this: com.android.server.wm.Task;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l2 := @parameter1: long;

        l3 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l2);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i0);

        $i1 = r0.<com.android.server.wm.Task: int mUserId>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        r5 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        if r5 == null goto label1;

        $r2 = virtualinvoke r5.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.Task: android.content.Intent intent>;

        $r4 = virtualinvoke $r3.<android.content.Intent: android.content.ComponentName getComponent()>();

        r6 = virtualinvoke $r4.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        goto label2;

     label1:
        r6 = "Task";

     label2:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, r6);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l3);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.Task: java.lang.String TAG_TASKS> = "ActivityTaskManager";

        <com.android.server.wm.Task: java.lang.String TAG_RECENTS> = "ActivityTaskManager";

        <com.android.server.wm.Task: java.lang.String TAG_LOCKTASK> = "ActivityTaskManager";

        <com.android.server.wm.Task: java.lang.String TAG_INTENT> = "intent";

        <com.android.server.wm.Task: java.lang.String TAG_AFFINITYINTENT> = "affinity_intent";

        <com.android.server.wm.Task: java.lang.String TAG_ADD_REMOVE> = "ActivityTaskManager";

        <com.android.server.wm.Task: java.lang.String TAG_ACTIVITY> = "activity";

        <com.android.server.wm.Task: java.lang.String TAG> = "ActivityTaskManager";

        <com.android.server.wm.Task: int REPARENT_MOVE_STACK_TO_FRONT> = 0;

        <com.android.server.wm.Task: int REPARENT_LEAVE_STACK_IN_PLACE> = 2;

        <com.android.server.wm.Task: int REPARENT_KEEP_STACK_AT_FRONT> = 1;

        <com.android.server.wm.Task: int PERSIST_TASK_VERSION> = 1;

        <com.android.server.wm.Task: int LOCK_TASK_AUTH_WHITELISTED> = 3;

        <com.android.server.wm.Task: int LOCK_TASK_AUTH_PINNABLE> = 1;

        <com.android.server.wm.Task: int LOCK_TASK_AUTH_LAUNCHABLE_PRIV> = 4;

        <com.android.server.wm.Task: int LOCK_TASK_AUTH_LAUNCHABLE> = 2;

        <com.android.server.wm.Task: int LOCK_TASK_AUTH_DONT_LOCK> = 0;

        <com.android.server.wm.Task: int INVALID_MIN_SIZE> = -1;

        <com.android.server.wm.Task: int FLAG_FORCE_HIDDEN_FOR_TASK_ORG> = 2;

        <com.android.server.wm.Task: int FLAG_FORCE_HIDDEN_FOR_PINNED_TASK> = 1;

        <com.android.server.wm.Task: java.lang.String ATTR_WINDOW_LAYOUT_AFFINITY> = "window_layout_affinity";

        <com.android.server.wm.Task: java.lang.String ATTR_USER_SETUP_COMPLETE> = "user_setup_complete";

        <com.android.server.wm.Task: java.lang.String ATTR_USERID> = "user_id";

        <com.android.server.wm.Task: java.lang.String ATTR_TASK_AFFILIATION_COLOR> = "task_affiliation_color";

        <com.android.server.wm.Task: java.lang.String ATTR_TASK_AFFILIATION> = "task_affiliation";

        <com.android.server.wm.Task: java.lang.String ATTR_TASKTYPE> = "task_type";

        <com.android.server.wm.Task: java.lang.String ATTR_TASKID> = "task_id";

        <com.android.server.wm.Task: java.lang.String ATTR_SUPPORTS_PICTURE_IN_PICTURE> = "supports_picture_in_picture";

        <com.android.server.wm.Task: java.lang.String ATTR_ROOT_AFFINITY> = "root_affinity";

        <com.android.server.wm.Task: java.lang.String ATTR_ROOTHASRESET> = "root_has_reset";

        <com.android.server.wm.Task: java.lang.String ATTR_RESIZE_MODE> = "resize_mode";

        <com.android.server.wm.Task: java.lang.String ATTR_REALACTIVITY_SUSPENDED> = "real_activity_suspended";

        <com.android.server.wm.Task: java.lang.String ATTR_REALACTIVITY> = "real_activity";

        <com.android.server.wm.Task: java.lang.String ATTR_PREV_AFFILIATION> = "prev_affiliation";

        <com.android.server.wm.Task: java.lang.String ATTR_PERSIST_TASK_VERSION> = "persist_task_version";

        <com.android.server.wm.Task: java.lang.String ATTR_ORIGACTIVITY> = "orig_activity";

        <com.android.server.wm.Task: java.lang.String ATTR_NON_FULLSCREEN_BOUNDS> = "non_fullscreen_bounds";

        <com.android.server.wm.Task: java.lang.String ATTR_NEXT_AFFILIATION> = "next_affiliation";

        <com.android.server.wm.Task: java.lang.String ATTR_NEVERRELINQUISH> = "never_relinquish_identity";

        <com.android.server.wm.Task: java.lang.String ATTR_MIN_WIDTH> = "min_width";

        <com.android.server.wm.Task: java.lang.String ATTR_MIN_HEIGHT> = "min_height";

        <com.android.server.wm.Task: java.lang.String ATTR_LASTTIMEMOVED> = "last_time_moved";

        <com.android.server.wm.Task: java.lang.String ATTR_LASTDESCRIPTION> = "last_description";

        <com.android.server.wm.Task: java.lang.String ATTR_EFFECTIVE_UID> = "effective_uid";

        <com.android.server.wm.Task: java.lang.String ATTR_CALLING_UID> = "calling_uid";

        <com.android.server.wm.Task: java.lang.String ATTR_CALLING_PACKAGE> = "calling_package";

        <com.android.server.wm.Task: java.lang.String ATTR_CALLING_FEATURE_ID> = "calling_feature_id";

        <com.android.server.wm.Task: java.lang.String ATTR_AUTOREMOVERECENTS> = "auto_remove_recents";

        <com.android.server.wm.Task: java.lang.String ATTR_ASKEDCOMPATMODE> = "asked_compat_mode";

        <com.android.server.wm.Task: java.lang.String ATTR_AFFINITY> = "affinity";

        return;
    }
}
