class com.android.server.wm.TaskOrganizerController$DeathRecipient extends java.lang.Object implements android.os.IBinder$DeathRecipient
{
    android.window.ITaskOrganizer mTaskOrganizer;
    final com.android.server.wm.TaskOrganizerController this$0;

    void <init>(com.android.server.wm.TaskOrganizerController, android.window.ITaskOrganizer)
    {
        com.android.server.wm.TaskOrganizerController$DeathRecipient r0;
        com.android.server.wm.TaskOrganizerController r1;
        android.window.ITaskOrganizer r2;

        r0 := @this: com.android.server.wm.TaskOrganizerController$DeathRecipient;

        r1 := @parameter0: com.android.server.wm.TaskOrganizerController;

        r2 := @parameter1: android.window.ITaskOrganizer;

        r0.<com.android.server.wm.TaskOrganizerController$DeathRecipient: com.android.server.wm.TaskOrganizerController this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController$DeathRecipient: android.window.ITaskOrganizer mTaskOrganizer> = r2;

        return;
    }

    public void binderDied()
    {
        com.android.server.wm.TaskOrganizerController$DeathRecipient r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.TaskOrganizerController $r2, $r3;
        java.util.HashMap $r4;
        android.window.ITaskOrganizer $r5;
        android.os.IBinder $r6;
        java.lang.Object $r7;
        java.lang.Throwable $r8;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r9;

        r0 := @this: com.android.server.wm.TaskOrganizerController$DeathRecipient;

        $r2 = r0.<com.android.server.wm.TaskOrganizerController$DeathRecipient: com.android.server.wm.TaskOrganizerController this$0>;

        r1 = staticinvoke <com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock access$000(com.android.server.wm.TaskOrganizerController)>($r2);

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.TaskOrganizerController$DeathRecipient: com.android.server.wm.TaskOrganizerController this$0>;

        $r4 = staticinvoke <com.android.server.wm.TaskOrganizerController: java.util.HashMap access$100(com.android.server.wm.TaskOrganizerController)>($r3);

        $r5 = r0.<com.android.server.wm.TaskOrganizerController$DeathRecipient: android.window.ITaskOrganizer mTaskOrganizer>;

        $r6 = interfaceinvoke $r5.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r7 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        r9 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r7;

     label2:
        if r9 == null goto label4;

     label3:
        virtualinvoke r9.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void dispose()>();

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
