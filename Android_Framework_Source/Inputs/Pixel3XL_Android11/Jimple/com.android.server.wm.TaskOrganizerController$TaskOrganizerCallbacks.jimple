class com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks extends java.lang.Object
{
    final java.util.function.Consumer mDeferTaskOrgCallbacksConsumer;
    final com.android.server.wm.WindowManagerService mService;
    final android.window.ITaskOrganizer mTaskOrganizer;
    private final android.view.SurfaceControl$Transaction mTransaction;
    final com.android.server.wm.TaskOrganizerController this$0;

    void <init>(com.android.server.wm.TaskOrganizerController, com.android.server.wm.WindowManagerService, android.window.ITaskOrganizer, java.util.function.Consumer)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        com.android.server.wm.TaskOrganizerController r1;
        com.android.server.wm.WindowManagerService r2;
        android.window.ITaskOrganizer r3;
        java.util.function.Consumer r4;
        java.util.function.Supplier $r5;
        java.lang.Object $r6;
        android.view.SurfaceControl$Transaction $r7;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r1 := @parameter0: com.android.server.wm.TaskOrganizerController;

        r2 := @parameter1: com.android.server.wm.WindowManagerService;

        r3 := @parameter2: android.window.ITaskOrganizer;

        r4 := @parameter3: java.util.function.Consumer;

        r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: com.android.server.wm.TaskOrganizerController this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: com.android.server.wm.WindowManagerService mService> = r2;

        r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer> = r4;

        r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer> = r3;

        $r5 = r2.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r6 = interfaceinvoke $r5.<java.util.function.Supplier: java.lang.Object get()>();

        $r7 = (android.view.SurfaceControl$Transaction) $r6;

        r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.view.SurfaceControl$Transaction mTransaction> = $r7;

        return;
    }

    android.os.IBinder getBinder()
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        android.window.ITaskOrganizer $r1;
        android.os.IBinder $r2;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        $r2 = interfaceinvoke $r1.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        return $r2;
    }

    public void lambda$onBackPressedOnTaskRoot$3$TaskOrganizerController$TaskOrganizerCallbacks(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        boolean $z0;
        android.window.ITaskOrganizer $r1;
        android.app.ActivityManager$RunningTaskInfo $r2;
        java.lang.Exception $r3;
        com.android.server.wm.Task r4;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r4 := @parameter0: com.android.server.wm.Task;

        $z0 = virtualinvoke r4.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        $r2 = virtualinvoke r4.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        interfaceinvoke $r1.<android.window.ITaskOrganizer: void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TaskOrganizerController", "Exception sending onBackPressedOnTaskRoot callback", $r3);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void lambda$onTaskAppeared$0$TaskOrganizerController$TaskOrganizerCallbacks(com.android.server.wm.Task, boolean, android.app.ActivityManager$RunningTaskInfo)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        boolean z0, $z1;
        android.app.ActivityManager$RunningTaskInfo r1;
        android.view.SurfaceControl r2, $r3;
        android.view.SurfaceControl$Transaction $r4, $r6;
        android.os.RemoteException $r7;
        com.android.server.wm.Task r8;
        android.window.ITaskOrganizer $r9;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r8 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.app.ActivityManager$RunningTaskInfo;

     label1:
        r2 = new android.view.SurfaceControl;

        $r3 = virtualinvoke r8.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        specialinvoke r2.<android.view.SurfaceControl: void <init>(android.view.SurfaceControl,java.lang.String)>($r3, "TaskOrganizerController.onTaskAppeared");

        $z1 = r8.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z1 != 0 goto label4;

     label2:
        if z0 != 0 goto label4;

     label3:
        $r4 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction hide(android.view.SurfaceControl)>(r2);

        $r6 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r6.<android.view.SurfaceControl$Transaction: void apply()>();

     label4:
        $r9 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        interfaceinvoke $r9.<android.window.ITaskOrganizer: void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl)>(r1, r2);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TaskOrganizerController", "Exception sending onTaskAppeared callback", $r7);

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void lambda$onTaskInfoChanged$2$TaskOrganizerController$TaskOrganizerCallbacks(com.android.server.wm.Task, android.app.ActivityManager$RunningTaskInfo)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        android.app.ActivityManager$RunningTaskInfo r1;
        boolean $z0;
        android.window.ITaskOrganizer $r2;
        android.os.RemoteException $r3;
        com.android.server.wm.Task r4;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r4 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.app.ActivityManager$RunningTaskInfo;

        $z0 = virtualinvoke r4.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        interfaceinvoke $r2.<android.window.ITaskOrganizer: void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TaskOrganizerController", "Exception sending onTaskInfoChanged callback", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lambda$onTaskVanished$1$TaskOrganizerController$TaskOrganizerCallbacks(android.app.ActivityManager$RunningTaskInfo)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        android.window.ITaskOrganizer $r1;
        android.os.RemoteException $r2;
        android.app.ActivityManager$RunningTaskInfo r3;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r3 := @parameter0: android.app.ActivityManager$RunningTaskInfo;

     label1:
        $r1 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        interfaceinvoke $r1.<android.window.ITaskOrganizer: void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TaskOrganizerController", "Exception sending onTaskVanished callback", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void onBackPressedOnTaskRoot(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        com.android.server.wm.Task r1;
        boolean $z0, $z1;
        com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$41HmeSfw9YPckTtDYqtDtvgJ3pM $r2;
        java.util.function.Consumer $r3;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r1 := @parameter0: com.android.server.wm.Task;

        $z0 = r1.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 != 0 goto label1;

        $z1 = r1.<com.android.server.wm.Task: boolean mTaskAppearedSent>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer>;

        $r2 = new com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$41HmeSfw9YPckTtDYqtDtvgJ3pM;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$41HmeSfw9YPckTtDYqtDtvgJ3pM: void <init>(com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks,com.android.server.wm.Task)>(r0, r1);

        interfaceinvoke $r3.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

        return;
    }

    void onTaskAppeared(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        com.android.server.wm.Task r1;
        boolean z0;
        android.app.ActivityManager$RunningTaskInfo r2;
        com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$3B2ajcX1016FWhhrvdadLQoIOlk $r3;
        java.util.function.Consumer $r4;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean isVisible()>();

        r2 = virtualinvoke r1.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        $r4 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer>;

        $r3 = new com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$3B2ajcX1016FWhhrvdadLQoIOlk;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$3B2ajcX1016FWhhrvdadLQoIOlk: void <init>(com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks,com.android.server.wm.Task,boolean,android.app.ActivityManager$RunningTaskInfo)>(r0, r1, z0, r2);

        interfaceinvoke $r4.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

        return;
    }

    void onTaskInfoChanged(com.android.server.wm.Task, android.app.ActivityManager$RunningTaskInfo)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        com.android.server.wm.Task r1;
        android.app.ActivityManager$RunningTaskInfo r2;
        boolean $z0, $z1;
        com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$0vq_lXzpiq_wIq4e4iVbdijNaZU $r3;
        java.util.function.Consumer $r4;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 := @parameter1: android.app.ActivityManager$RunningTaskInfo;

        $z0 = r1.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 != 0 goto label1;

        $z1 = r1.<com.android.server.wm.Task: boolean mTaskAppearedSent>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer>;

        $r3 = new com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$0vq_lXzpiq_wIq4e4iVbdijNaZU;

        specialinvoke $r3.<com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$0vq_lXzpiq_wIq4e4iVbdijNaZU: void <init>(com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks,com.android.server.wm.Task,android.app.ActivityManager$RunningTaskInfo)>(r0, r1, r2);

        interfaceinvoke $r4.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

        return;
    }

    void onTaskVanished(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks r0;
        com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$z4tQUSxn6WAFBTLse5CB3j_b8c8 $r1;
        java.util.function.Consumer $r2;
        com.android.server.wm.Task r3;
        android.app.ActivityManager$RunningTaskInfo r4;

        r0 := @this: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks;

        r3 := @parameter0: com.android.server.wm.Task;

        r4 = virtualinvoke r3.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        $r2 = r0.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer>;

        $r1 = new com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$z4tQUSxn6WAFBTLse5CB3j_b8c8;

        specialinvoke $r1.<com.android.server.wm._$$Lambda$TaskOrganizerController$TaskOrganizerCallbacks$z4tQUSxn6WAFBTLse5CB3j_b8c8: void <init>(com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks,android.app.ActivityManager$RunningTaskInfo)>(r0, r4);

        interfaceinvoke $r2.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

        return;
    }
}
