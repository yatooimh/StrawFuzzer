class com.android.server.wm.TaskOrganizerController extends android.window.ITaskOrganizerController$Stub
{
    private static final java.util.LinkedList EMPTY_LIST;
    private static final int REPORT_CONFIGS;
    private static final int REPORT_WINDOW_CONFIGS;
    private static final java.lang.String TAG;
    private java.util.function.Consumer mDeferTaskOrgCallbacksConsumer;
    private final com.android.server.wm.WindowManagerGlobalLock mGlobalLock;
    private final java.util.WeakHashMap mLastSentTaskInfos;
    private final java.util.ArrayList mPendingTaskInfoChanges;
    private final com.android.server.wm.ActivityTaskManagerService mService;
    private final java.util.HashMap mTaskOrganizerStates;
    private final android.util.SparseArray mTaskOrganizersForWindowingMode;
    private android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo;

    static void <clinit>()
    {
        java.util.LinkedList $r0;

        <com.android.server.wm.TaskOrganizerController: java.lang.String TAG> = "TaskOrganizerController";

        <com.android.server.wm.TaskOrganizerController: int REPORT_WINDOW_CONFIGS> = 3;

        <com.android.server.wm.TaskOrganizerController: int REPORT_CONFIGS> = 536873984;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        <com.android.server.wm.TaskOrganizerController: java.util.LinkedList EMPTY_LIST> = $r0;

        return;
    }

    void <init>(com.android.server.wm.ActivityTaskManagerService)
    {
        com.android.server.wm.TaskOrganizerController r0;
        com.android.server.wm.ActivityTaskManagerService r1;
        android.util.SparseArray $r2;
        java.util.HashMap $r3;
        java.util.WeakHashMap $r4;
        java.util.ArrayList $r5;
        com.android.server.wm.WindowManagerGlobalLock $r6;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: com.android.server.wm.ActivityTaskManagerService;

        specialinvoke r0.<android.window.ITaskOrganizerController$Stub: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates> = $r3;

        $r4 = new java.util.WeakHashMap;

        specialinvoke $r4.<java.util.WeakHashMap: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController: java.util.WeakHashMap mLastSentTaskInfos> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController: java.util.ArrayList mPendingTaskInfoChanges> = $r5;

        r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService> = r1;

        $r6 = r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock> = $r6;

        return;
    }

    static com.android.server.wm.WindowManagerGlobalLock access$000(com.android.server.wm.TaskOrganizerController)
    {
        com.android.server.wm.TaskOrganizerController r0;
        com.android.server.wm.WindowManagerGlobalLock $r1;

        r0 := @parameter0: com.android.server.wm.TaskOrganizerController;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        return $r1;
    }

    static java.util.HashMap access$100(com.android.server.wm.TaskOrganizerController)
    {
        com.android.server.wm.TaskOrganizerController r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.wm.TaskOrganizerController;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        return $r1;
    }

    static java.util.function.Consumer access$200(com.android.server.wm.TaskOrganizerController)
    {
        com.android.server.wm.TaskOrganizerController r0;
        java.util.function.Consumer $r1;

        r0 := @parameter0: com.android.server.wm.TaskOrganizerController;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer>;

        return $r1;
    }

    static com.android.server.wm.ActivityTaskManagerService access$300(com.android.server.wm.TaskOrganizerController)
    {
        com.android.server.wm.TaskOrganizerController r0;
        com.android.server.wm.ActivityTaskManagerService $r1;

        r0 := @parameter0: com.android.server.wm.TaskOrganizerController;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        return $r1;
    }

    static android.util.SparseArray access$400(com.android.server.wm.TaskOrganizerController)
    {
        com.android.server.wm.TaskOrganizerController r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.wm.TaskOrganizerController;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        return $r1;
    }

    private void enforceStackPermission(java.lang.String)
    {
        com.android.server.wm.TaskOrganizerController r0;
        java.lang.String r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.app.ActivityManagerInternal $r3;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManagerInternal mAmInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS", r1);

        return;
    }

    static void lambda$registerTaskOrganizer$0(int, com.android.server.wm.Task)
    {
        int i0, $i1;
        com.android.server.wm.Task r0;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.Task;

        $i1 = virtualinvoke r0.<com.android.server.wm.Task: int getWindowingMode()>();

        if $i1 != i0 goto label1;

        virtualinvoke r0.<com.android.server.wm.Task: boolean updateTaskOrganizerState(boolean)>(1);

     label1:
        return;
    }

    public android.app.ActivityManager$RunningTaskInfo createRootTask(int, int)
    {
        com.android.server.wm.TaskOrganizerController r0;
        int i0, i1;
        long l2;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.util.WeakHashMap $r3;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.WindowManagerGlobalLock r7;
        com.android.server.wm.DisplayContent r8;
        com.android.server.wm.TaskDisplayArea r9;
        android.content.Intent r10;
        com.android.server.wm.ActivityStack r11;
        android.app.ActivityManager$RunningTaskInfo r12;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("createRootTask()");

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r7 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r7;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r8 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r8 != null goto label06;

     label04:
        exitmonitor r7;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label06:
        r9 = virtualinvoke r8.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r10 = new android.content.Intent;

        specialinvoke r10.<android.content.Intent: void <init>()>();

        r11 = virtualinvoke r9.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack createStack(int,int,boolean,android.content.pm.ActivityInfo,android.content.Intent,boolean)>(i1, 0, 0, null, r10, 1);

        r12 = virtualinvoke r11.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        $r3 = r0.<com.android.server.wm.TaskOrganizerController: java.util.WeakHashMap mLastSentTaskInfos>;

        virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r12);

        exitmonitor r7;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r12;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r7;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public boolean deleteRootTask(android.window.WindowContainerToken)
    {
        com.android.server.wm.TaskOrganizerController r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.IllegalArgumentException r2;
        java.lang.StringBuilder r3;
        android.os.IBinder $r4;
        com.android.server.wm.WindowContainer $r5;
        boolean $z0;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r10;
        android.window.WindowContainerToken r11;
        com.android.server.wm.Task r12;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r11 := @parameter0: android.window.WindowContainerToken;

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("deleteRootTask()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = virtualinvoke r11.<android.window.WindowContainerToken: android.os.IBinder asBinder()>();

        $r5 = staticinvoke <com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer fromBinder(android.os.IBinder)>($r4);

        r12 = virtualinvoke $r5.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

     label03:
        if r12 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        $z0 = r12.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 == 0 goto label08;

        virtualinvoke r12.<com.android.server.wm.Task: void removeImmediately()>();

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label08:
        r2 = new java.lang.IllegalArgumentException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to delete task not created by organizer task=");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r2;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

     label12:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    void dispatchPendingTaskInfoChanges()
    {
        com.android.server.wm.TaskOrganizerController r0;
        int i0, i1;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.WindowSurfacePlacer $r3;
        boolean $z0;
        java.util.ArrayList $r4, $r5, $r6;
        java.lang.Object $r7;
        com.android.server.wm.Task $r8;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.WindowSurfacePlacer: boolean isLayoutDeferred()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        i1 = 0;

        $r4 = r0.<com.android.server.wm.TaskOrganizerController: java.util.ArrayList mPendingTaskInfoChanges>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label2:
        if i1 >= i0 goto label3;

        $r6 = r0.<com.android.server.wm.TaskOrganizerController: java.util.ArrayList mPendingTaskInfoChanges>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.Task) $r7;

        virtualinvoke r0.<com.android.server.wm.TaskOrganizerController: void dispatchTaskInfoChanged(com.android.server.wm.Task,boolean)>($r8, 0);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = r0.<com.android.server.wm.TaskOrganizerController: java.util.ArrayList mPendingTaskInfoChanges>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        return;
    }

    void dispatchTaskInfoChanged(com.android.server.wm.Task, boolean)
    {
        com.android.server.wm.TaskOrganizerController r0;
        com.android.server.wm.Task r1;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z9, z10, z11;
        int i0, $i1, $i2, $i3, $i5, $i6, i7, i8;
        android.app.ActivityManager$RunningTaskInfo r2, $r5, $r6, $r8, $r9, $r17, $r20, $r25, $r26, $r27, $r30, $r33, r39;
        java.util.WeakHashMap $r3, $r10;
        java.lang.Object $r4, $r15;
        android.content.res.Configuration $r7, $r18, $r19, $r21, $r22;
        android.window.ITaskOrganizer $r12;
        java.util.HashMap $r13;
        android.os.IBinder $r14;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks $r16;
        android.app.WindowConfiguration $r23, $r24;
        long $l4;
        android.app.PictureInPictureParams $r28, $r29;
        android.app.ActivityManager$TaskDescription $r31, $r32;
        com.android.server.wm.ActivityTaskManagerService $r34;
        com.android.server.wm.WindowManagerService $r35;
        com.android.server.wm.WindowSurfacePlacer $r36;
        java.util.ArrayList $r37, $r38;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r40;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: com.android.server.wm.Task;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label01;

        $r34 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r35 = $r34.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r36 = $r35.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $z6 = virtualinvoke $r36.<com.android.server.wm.WindowSurfacePlacer: boolean isLayoutDeferred()>();

        if $z6 == 0 goto label01;

        $r37 = r0.<com.android.server.wm.TaskOrganizerController: java.util.ArrayList mPendingTaskInfoChanges>;

        virtualinvoke $r37.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r38 = r0.<com.android.server.wm.TaskOrganizerController: java.util.ArrayList mPendingTaskInfoChanges>;

        virtualinvoke $r38.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;

     label01:
        $r3 = r0.<com.android.server.wm.TaskOrganizerController: java.util.WeakHashMap mLastSentTaskInfos>;

        $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r39 = (android.app.ActivityManager$RunningTaskInfo) $r4;

        $r5 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        if $r5 != null goto label02;

        $r33 = new android.app.ActivityManager$RunningTaskInfo;

        specialinvoke $r33.<android.app.ActivityManager$RunningTaskInfo: void <init>()>();

        r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo> = $r33;

     label02:
        $r6 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $r7 = $r6.<android.app.ActivityManager$RunningTaskInfo: android.content.res.Configuration configuration>;

        virtualinvoke $r7.<android.content.res.Configuration: void unset()>();

        $r8 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        virtualinvoke r1.<com.android.server.wm.Task: void fillTaskInfo(android.app.TaskInfo)>($r8);

        if r39 == null goto label04;

        $r25 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $i6 = $r25.<android.app.ActivityManager$RunningTaskInfo: int topActivityType>;

        $i5 = r39.<android.app.ActivityManager$RunningTaskInfo: int topActivityType>;

        if $i6 != $i5 goto label04;

        $r26 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $z4 = $r26.<android.app.ActivityManager$RunningTaskInfo: boolean isResizeable>;

        $z3 = r39.<android.app.ActivityManager$RunningTaskInfo: boolean isResizeable>;

        if $z4 != $z3 goto label04;

        $r27 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $r29 = $r27.<android.app.ActivityManager$RunningTaskInfo: android.app.PictureInPictureParams pictureInPictureParams>;

        $r28 = r39.<android.app.ActivityManager$RunningTaskInfo: android.app.PictureInPictureParams pictureInPictureParams>;

        if $r29 != $r28 goto label04;

        $r30 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $r32 = $r30.<android.app.ActivityManager$RunningTaskInfo: android.app.ActivityManager$TaskDescription taskDescription>;

        $r31 = r39.<android.app.ActivityManager$RunningTaskInfo: android.app.ActivityManager$TaskDescription taskDescription>;

        $z5 = staticinvoke <android.app.ActivityManager$TaskDescription: boolean equals(android.app.ActivityManager$TaskDescription,android.app.ActivityManager$TaskDescription)>($r32, $r31);

        if $z5 != 0 goto label03;

        goto label04;

     label03:
        z9 = 0;

        goto label05;

     label04:
        z9 = 1;

     label05:
        z10 = z9;

        if z9 != 0 goto label10;

        $r17 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $r19 = $r17.<android.app.ActivityManager$RunningTaskInfo: android.content.res.Configuration configuration>;

        $r18 = r39.<android.app.ActivityManager$RunningTaskInfo: android.content.res.Configuration configuration>;

        i0 = virtualinvoke $r19.<android.content.res.Configuration: int diff(android.content.res.Configuration)>($r18);

        $i1 = 536870912 & i0;

        if $i1 == 0 goto label06;

        $r20 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $r21 = $r20.<android.app.ActivityManager$RunningTaskInfo: android.content.res.Configuration configuration>;

        $r24 = $r21.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r22 = r39.<android.app.ActivityManager$RunningTaskInfo: android.content.res.Configuration configuration>;

        $r23 = $r22.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $l4 = virtualinvoke $r24.<android.app.WindowConfiguration: long diff(android.app.WindowConfiguration,boolean)>($r23, 1);

        i7 = (int) $l4;

        goto label07;

     label06:
        i7 = 0;

     label07:
        i8 = i0;

        $i2 = i7 & 3;

        if $i2 != 0 goto label08;

        i8 = i0 & -536870913;

     label08:
        z11 = 0;

        $i3 = 536873984 & i8;

        if $i3 == 0 goto label09;

        z11 = 1;

     label09:
        z10 = z11;

     label10:
        if z10 != 0 goto label11;

        if z0 != 0 goto label11;

        return;

     label11:
        r2 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        $r10 = r0.<com.android.server.wm.TaskOrganizerController: java.util.WeakHashMap mLastSentTaskInfos>;

        $r9 = r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo>;

        virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        r0.<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo mTmpTaskInfo> = null;

        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z2 == 0 goto label12;

        $r13 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r12 = r1.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        $r14 = interfaceinvoke $r12.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r15 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        r40 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r15;

        if r40 == null goto label12;

        $r16 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks access$500(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r40);

        virtualinvoke $r16.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: void onTaskInfoChanged(com.android.server.wm.Task,android.app.ActivityManager$RunningTaskInfo)>(r1, r2);

     label12:
        return;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.TaskOrganizerController r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r9, $r19, $r23, $r31;
        android.util.SparseArray $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Object $r8, $r17, $r18, $r34;
        java.lang.String $r12, $r15, $r22, $r30, $r36, r37, r39;
        java.util.HashMap $r16;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks $r24;
        android.window.ITaskOrganizer $r25;
        java.util.List r40;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r42;
        java.util.ArrayList r43;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: java.io.PrintWriter;

        r37 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r39 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r37);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("TaskOrganizerController:");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r39);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Per windowing mode:");

        i4 = 0;

     label1:
        $r5 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        $i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i4 >= $i0 goto label6;

        $r6 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        i5 = virtualinvoke $r6.<android.util.SparseArray: int keyAt(int)>(i4);

        $r7 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r40 = (java.util.List) $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r12 = staticinvoke <android.app.WindowConfiguration: java.lang.String windowingModeToString(int)>(i5);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        i6 = 0;

     label2:
        $i1 = interfaceinvoke r40.<java.util.List: int size()>();

        if i6 >= $i1 goto label5;

        $r16 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r17 = interfaceinvoke r40.<java.util.List: java.lang.Object get(int)>(i6);

        $r18 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        r42 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r18;

        r43 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: java.util.ArrayList access$700(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r42);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks access$500(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r42);

        $r25 = $r24.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $i2 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: int access$800(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r42);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        i7 = 0;

     label3:
        $i3 = virtualinvoke r43.<java.util.ArrayList: int size()>();

        if i7 >= $i3 goto label4;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r34 = virtualinvoke r43.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        i7 = i7 + 1;

        goto label3;

     label4:
        i6 = i6 + 1;

        goto label2;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    public java.util.List getChildTasks(android.window.WindowContainerToken, int[])
    {
        com.android.server.wm.TaskOrganizerController r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.ArrayList r2;
        android.os.IBinder $r3;
        boolean $z0, $z2;
        int $i1, $i2, i6;
        com.android.server.wm.WindowContainer $r4, r17;
        android.app.ActivityManager$RunningTaskInfo $r5;
        java.lang.String $r8, $r12;
        java.lang.Throwable $r13, $r14;
        android.window.WindowContainerToken r15;
        int[] r16;
        java.lang.StringBuilder r18, r20;
        com.android.server.wm.Task r19, r21;
        java.lang.IllegalArgumentException r22;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r15 := @parameter0: android.window.WindowContainerToken;

        r16 := @parameter1: int[];

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("getChildTasks()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label03:
        if r15 == null goto label25;

     label04:
        $r3 = virtualinvoke r15.<android.window.WindowContainerToken: android.os.IBinder asBinder()>();

        r17 = staticinvoke <com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer fromBinder(android.os.IBinder)>($r3);

     label05:
        if r17 != null goto label08;

     label06:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t get children of ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it is not valid.");

        $r12 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TaskOrganizerController", $r12);

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label08:
        r19 = virtualinvoke r17.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

     label09:
        if r19 != null goto label12;

     label10:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a task...");

        $r8 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("TaskOrganizerController", $r8);

        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label12:
        $z0 = r19.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 != 0 goto label14;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("TaskOrganizerController", "Can only get children of root tasks created via createRootTask");

        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label14:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i1 = virtualinvoke r19.<com.android.server.wm.Task: int getChildCount()>();

        i6 = $i1 - 1;

     label15:
        if i6 < 0 goto label23;

     label16:
        $r4 = virtualinvoke r19.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getChildAt(int)>(i6);

        r21 = virtualinvoke $r4.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

     label17:
        if r21 != null goto label18;

        goto label22;

     label18:
        if r16 == null goto label21;

     label19:
        $i2 = virtualinvoke r21.<com.android.server.wm.Task: int getActivityType()>();

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r16, $i2);

        if $z2 != 0 goto label21;

     label20:
        goto label22;

     label21:
        $r5 = virtualinvoke r21.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label22:
        i6 = i6 + -1;

        goto label15;

     label23:
        exitmonitor r1;

     label24:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r2;

     label25:
        r22 = new java.lang.IllegalArgumentException;

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t get children of null parent");

        throw r22;

     label26:
        $r13 := @caughtexception;

     label27:
        exitmonitor r1;

     label28:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

     label29:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label28 to label29 with label29;
    }

    public android.window.WindowContainerToken getImeTarget(int)
    {
        com.android.server.wm.TaskOrganizerController r0;
        int i0;
        long l1;
        com.android.server.wm.ActivityTaskManagerService $r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.WindowState $r4, $r5;
        com.android.server.wm.Task $r6, r12;
        com.android.server.wm.WindowContainer$RemoteToken $r7;
        java.lang.Throwable $r8, $r9;
        com.android.server.wm.WindowManagerGlobalLock r10;
        com.android.server.wm.DisplayContent r11;
        android.window.WindowContainerToken r13;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("getImeTarget()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r10 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r10;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r2 = $r1.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerService mWindowManager>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r11 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r11 == null goto label12;

     label04:
        $r4 = r11.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r4 != null goto label06;

     label05:
        goto label12;

     label06:
        $r5 = r11.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        r12 = virtualinvoke $r5.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

     label07:
        if r12 != null goto label10;

     label08:
        exitmonitor r10;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return null;

     label10:
        $r6 = virtualinvoke r12.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        $r7 = $r6.<com.android.server.wm.Task: com.android.server.wm.WindowContainer$RemoteToken mRemoteToken>;

        r13 = virtualinvoke $r7.<com.android.server.wm.WindowContainer$RemoteToken: android.window.WindowContainerToken toWindowContainerToken()>();

        exitmonitor r10;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r13;

     label12:
        exitmonitor r10;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return null;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r10;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

     label17:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    public java.util.List getRootTasks(int, int[])
    {
        com.android.server.wm.TaskOrganizerController r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.TaskDisplayArea r3;
        com.android.server.wm.ActivityStack r4;
        com.android.server.wm.ActivityTaskManagerService $r5;
        com.android.server.wm.RootWindowContainer $r6;
        java.lang.String $r10;
        int $i1, $i2, $i3, i4, i5, i6;
        android.app.ActivityManager$RunningTaskInfo $r11;
        boolean $z1;
        java.lang.Throwable $r12, $r13;
        int[] r14;
        java.util.ArrayList r15;
        java.lang.IllegalArgumentException r16;
        java.lang.StringBuilder r17;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        i4 := @parameter0: int;

        r14 := @parameter1: int[];

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("getRootTasks()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r6 = $r5.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r2 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i4);

     label03:
        if r2 == null goto label17;

     label04:
        r15 = new java.util.ArrayList;

        specialinvoke r15.<java.util.ArrayList: void <init>()>();

        $i1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getTaskDisplayAreaCount()>();

        i5 = $i1 - 1;

     label05:
        if i5 < 0 goto label15;

     label06:
        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getTaskDisplayAreaAt(int)>(i5);

        $i2 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: int getStackCount()>();

        i6 = $i2 - 1;

     label07:
        if i6 < 0 goto label14;

     label08:
        r4 = virtualinvoke r3.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getStackAt(int)>(i6);

     label09:
        if r14 == null goto label12;

     label10:
        $i3 = virtualinvoke r4.<com.android.server.wm.Task: int getActivityType()>();

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r14, $i3);

        if $z1 != 0 goto label12;

     label11:
        goto label13;

     label12:
        $r11 = virtualinvoke r4.<com.android.server.wm.Task: android.app.ActivityManager$RunningTaskInfo getTaskInfo()>();

        virtualinvoke r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label13:
        i6 = i6 + -1;

        goto label07;

     label14:
        i5 = i5 + -1;

        goto label05;

     label15:
        exitmonitor r1;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r15;

     label17:
        r16 = new java.lang.IllegalArgumentException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t exist");

        $r10 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r16;

     label18:
        $r12 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

     label21:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
    }

    android.window.ITaskOrganizer getTaskOrganizer(int)
    {
        com.android.server.wm.TaskOrganizerController r0;
        int i0;
        java.util.LinkedList $r1, $r4;
        android.util.SparseArray $r2;
        java.lang.Object $r3, $r5, $r7;
        java.util.HashMap $r6;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks $r8;
        android.window.ITaskOrganizer $r9;
        android.os.IBinder r10;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r11;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        $r1 = <com.android.server.wm.TaskOrganizerController: java.util.LinkedList EMPTY_LIST>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>(i0, $r1);

        $r4 = (java.util.LinkedList) $r3;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object peekLast()>();

        r10 = (android.os.IBinder) $r5;

        if r10 != null goto label1;

        return null;

     label1:
        $r6 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r7;

        if r11 != null goto label2;

        return null;

     label2:
        $r8 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks access$500(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r11);

        $r9 = $r8.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: android.window.ITaskOrganizer mTaskOrganizer>;

        return $r9;
    }

    public boolean handleInterceptBackPressedOnTaskRoot(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r2;
        boolean $z0, $z1;
        android.window.ITaskOrganizer $r3;
        java.util.HashMap $r4;
        android.os.IBinder $r5;
        java.lang.Object $r6;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks $r7;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: com.android.server.wm.Task;

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean isOrganized()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $r4 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r3 = r1.<com.android.server.wm.Task: android.window.ITaskOrganizer mTaskOrganizer>;

        $r5 = interfaceinvoke $r3.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r2 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r6;

        $z1 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: boolean access$600(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = staticinvoke <com.android.server.wm.TaskOrganizerController$TaskOrganizerState: com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks access$500(com.android.server.wm.TaskOrganizerController$TaskOrganizerState)>(r2);

        virtualinvoke $r7.<com.android.server.wm.TaskOrganizerController$TaskOrganizerCallbacks: void onBackPressedOnTaskRoot(com.android.server.wm.Task)>(r1);

        return 1;

     label3:
        return 0;
    }

    void onTaskAppeared(android.window.ITaskOrganizer, com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController r0;
        android.window.ITaskOrganizer r1;
        com.android.server.wm.Task r2;
        java.util.HashMap $r3;
        android.os.IBinder $r4;
        java.lang.Object $r5;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState $r6;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: android.window.ITaskOrganizer;

        r2 := @parameter1: com.android.server.wm.Task;

        $r3 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r4 = interfaceinvoke r1.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r5;

        virtualinvoke $r6.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void addTask(com.android.server.wm.Task)>(r2);

        return;
    }

    void onTaskVanished(android.window.ITaskOrganizer, com.android.server.wm.Task)
    {
        com.android.server.wm.TaskOrganizerController r0;
        com.android.server.wm.Task r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        java.lang.Object $r4;
        android.window.ITaskOrganizer r5;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r6;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r5 := @parameter0: android.window.ITaskOrganizer;

        r1 := @parameter1: com.android.server.wm.Task;

        $r2 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r3 = interfaceinvoke r5.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r4;

        if r6 == null goto label1;

        virtualinvoke r6.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void removeTask(com.android.server.wm.Task)>(r1);

     label1:
        return;
    }

    public void registerTaskOrganizer(android.window.ITaskOrganizer, int)
    {
        com.android.server.wm.TaskOrganizerController r0;
        int i0, i1;
        long l2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r2;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.lang.UnsupportedOperationException $r3, $r5, $r18, $r20;
        com.android.server.wm.ActivityTaskManagerService $r4, $r11, $r17, $r19;
        android.util.SparseArray $r6, $r13;
        java.lang.Object $r7;
        android.os.IBinder $r8, $r10, r29;
        java.util.HashMap $r9, r28;
        java.lang.String $r16;
        java.lang.Throwable $r21, $r22;
        android.window.ITaskOrganizer r23, $r24;
        java.lang.StringBuilder r25;
        java.util.LinkedList r26, r27;
        com.android.server.wm.RootWindowContainer r30;
        com.android.server.wm._$$Lambda$TaskOrganizerController$6oHHz4Ki8lAtXH_ILvgmrwWRqNM r31;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r23 := @parameter0: android.window.ITaskOrganizer;

        i0 := @parameter1: int;

        if i0 != 2 goto label02;

        $r19 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $z5 = $r19.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z5 == 0 goto label01;

        goto label05;

     label01:
        $r20 = new java.lang.UnsupportedOperationException;

        specialinvoke $r20.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Picture in picture is not supported on this device");

        throw $r20;

     label02:
        $z0 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>(i0);

        if $z0 == 0 goto label04;

        $r17 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $z4 = $r17.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsSplitScreenMultiWindow>;

        if $z4 == 0 goto label03;

        goto label05;

     label03:
        $r18 = new java.lang.UnsupportedOperationException;

        specialinvoke $r18.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Split-screen is not supported on this device");

        throw $r18;

     label04:
        if i0 != 6 goto label21;

        $r4 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $z1 = $r4.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsMultiWindow>;

        if $z1 == 0 goto label20;

     label05:
        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("registerTaskOrganizer()");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r24 = virtualinvoke r0.<com.android.server.wm.TaskOrganizerController: android.window.ITaskOrganizer getTaskOrganizer(int)>(i0);

        if $r24 == null goto label08;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task organizer already exists for windowing mode: ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("TaskOrganizerController", $r16);

     label08:
        $r6 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r26 = (java.util.LinkedList) $r7;

     label09:
        r27 = r26;

        if r26 != null goto label12;

     label10:
        r27 = new java.util.LinkedList;

        specialinvoke r27.<java.util.LinkedList: void <init>()>();

     label11:
        $r13 = r0.<com.android.server.wm.TaskOrganizerController: android.util.SparseArray mTaskOrganizersForWindowingMode>;

        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r27);

     label12:
        $r8 = interfaceinvoke r23.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        virtualinvoke r27.<java.util.LinkedList: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r10 = interfaceinvoke r23.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $z3 = virtualinvoke $r9.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r10);

        if $z3 != 0 goto label13;

        r28 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        r29 = interfaceinvoke r23.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        r2 = new com.android.server.wm.TaskOrganizerController$TaskOrganizerState;

        specialinvoke r2.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void <init>(com.android.server.wm.TaskOrganizerController,android.window.ITaskOrganizer,int)>(r0, r23, i1);

        virtualinvoke r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r29, r2);

     label13:
        $r11 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        r30 = $r11.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        r31 = new com.android.server.wm._$$Lambda$TaskOrganizerController$6oHHz4Ki8lAtXH_ILvgmrwWRqNM;

        specialinvoke r31.<com.android.server.wm._$$Lambda$TaskOrganizerController$6oHHz4Ki8lAtXH_ILvgmrwWRqNM: void <init>(int)>(i0);

        virtualinvoke r30.<com.android.server.wm.RootWindowContainer: void forAllTasks(java.util.function.Consumer)>(r31);

        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label16:
        $r22 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r22;

     label19:
        $r21 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r21;

     label20:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Multi-window is not supported on this device");

        throw $r5;

     label21:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("As of now only Pinned/Split/Multiwindow windowing modes are supported for registerTaskOrganizer");

        throw $r3;

        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
    }

    public void setDeferTaskOrgCallbacksConsumer(java.util.function.Consumer)
    {
        com.android.server.wm.TaskOrganizerController r0;
        java.util.function.Consumer r1;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r1 := @parameter0: java.util.function.Consumer;

        r0.<com.android.server.wm.TaskOrganizerController: java.util.function.Consumer mDeferTaskOrgCallbacksConsumer> = r1;

        return;
    }

    public void setInterceptBackPressedOnTaskRoot(android.window.ITaskOrganizer, boolean)
    {
        com.android.server.wm.TaskOrganizerController r0;
        boolean z0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;
        android.window.ITaskOrganizer r7;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r8;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r7 := @parameter0: android.window.ITaskOrganizer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("setInterceptBackPressedOnTaskRoot()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r3 = interfaceinvoke r7.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r4;

     label03:
        if r8 == null goto label05;

     label04:
        virtualinvoke r8.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void setInterceptBackPressedOnTaskRoot(boolean)>(z0);

     label05:
        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void setLaunchRoot(int, android.window.WindowContainerToken)
    {
        com.android.server.wm.TaskOrganizerController r0;
        int i0, $i2, $i3;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayContent $r4, $r14;
        android.os.IBinder $r5;
        com.android.server.wm.WindowContainer $r6;
        boolean $z0;
        java.lang.String $r9, $r16;
        com.android.server.wm.TaskDisplayArea $r10, $r17, $r18, r22;
        java.lang.Throwable $r19, $r20;
        android.window.WindowContainerToken r21;
        com.android.server.wm.Task r23;
        java.lang.RuntimeException r24;
        java.lang.StringBuilder r25, r27;
        java.lang.IllegalArgumentException r26;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        i0 := @parameter0: int;

        r21 := @parameter1: android.window.WindowContainerToken;

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("setLaunchRoot()");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.ActivityTaskManagerService mService>;

        $r3 = $r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.RootWindowContainer mRootWindowContainer>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        r22 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

     label03:
        if r22 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        if r21 != null goto label07;

        r23 = null;

        goto label08;

     label07:
        $r5 = virtualinvoke r21.<android.window.WindowContainerToken: android.os.IBinder asBinder()>();

        $r6 = staticinvoke <com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer fromBinder(android.os.IBinder)>($r5);

        r23 = virtualinvoke $r6.<com.android.server.wm.WindowContainer: com.android.server.wm.Task asTask()>();

     label08:
        if r23 != null goto label11;

     label09:
        r22.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.Task mLaunchRootTask> = null;

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label11:
        $z0 = r23.<com.android.server.wm.Task: boolean mCreatedByOrganizer>;

        if $z0 == 0 goto label15;

        $r10 = virtualinvoke r23.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        if $r10 == null goto label14;

        $r17 = virtualinvoke r23.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $i3 = virtualinvoke $r17.<com.android.server.wm.TaskDisplayArea: int getDisplayId()>();

        if $i3 != i0 goto label14;

        $r18 = virtualinvoke r23.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        $r18.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.Task mLaunchRootTask> = r23;

        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label14:
        r24 = new java.lang.RuntimeException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set launch root for display ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to task on display ");

        $r14 = virtualinvoke r23.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i2 = virtualinvoke $r14.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw r24;

     label15:
        r26 = new java.lang.IllegalArgumentException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to set task not created by organizer as launch root task=");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r9 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r26;

     label16:
        $r20 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r20;

     label19:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
    }

    public void unregisterTaskOrganizer(android.window.ITaskOrganizer)
    {
        com.android.server.wm.TaskOrganizerController r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;
        android.window.ITaskOrganizer r7;
        com.android.server.wm.TaskOrganizerController$TaskOrganizerState r8;

        r0 := @this: com.android.server.wm.TaskOrganizerController;

        r7 := @parameter0: android.window.ITaskOrganizer;

        specialinvoke r0.<com.android.server.wm.TaskOrganizerController: void enforceStackPermission(java.lang.String)>("unregisterTaskOrganizer()");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.TaskOrganizerController: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.TaskOrganizerController: java.util.HashMap mTaskOrganizerStates>;

        $r3 = interfaceinvoke r7.<android.window.ITaskOrganizer: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (com.android.server.wm.TaskOrganizerController$TaskOrganizerState) $r4;

     label03:
        if r8 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        virtualinvoke r8.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void unlinkDeath()>();

        virtualinvoke r8.<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void dispose()>();

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label12:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }
}
