class com.android.server.wm.TaskPositioningController extends java.lang.Object
{
    private final android.app.IActivityTaskManager mActivityManager;
    private final android.os.Handler mHandler;
    private final com.android.server.input.InputManagerService mInputManager;
    private android.view.SurfaceControl mInputSurface;
    private com.android.server.wm.DisplayContent mPositioningDisplay;
    private final com.android.server.wm.WindowManagerService mService;
    private com.android.server.wm.TaskPositioner mTaskPositioner;
    private final android.graphics.Rect mTmpClipRect;
    final android.view.SurfaceControl$Transaction mTransaction;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.input.InputManagerService, android.app.IActivityTaskManager, android.os.Looper)
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.input.InputManagerService r2;
        android.app.IActivityTaskManager r3;
        android.os.Looper r4;
        android.graphics.Rect $r5;
        android.os.Handler $r6;
        java.util.function.Supplier $r7;
        java.lang.Object $r8;
        android.view.SurfaceControl$Transaction $r9;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.input.InputManagerService;

        r3 := @parameter2: android.app.IActivityTaskManager;

        r4 := @parameter3: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.TaskPositioningController: android.graphics.Rect mTmpClipRect> = $r5;

        r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.TaskPositioningController: com.android.server.input.InputManagerService mInputManager> = r2;

        r0.<com.android.server.wm.TaskPositioningController: android.app.IActivityTaskManager mActivityManager> = r3;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>(r4);

        r0.<com.android.server.wm.TaskPositioningController: android.os.Handler mHandler> = $r6;

        $r7 = r1.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r8 = interfaceinvoke $r7.<java.util.function.Supplier: java.lang.Object get()>();

        $r9 = (android.view.SurfaceControl$Transaction) $r8;

        r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction> = $r9;

        return;
    }

    private void cleanUpTaskPositioner()
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.TaskPositioner r1;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r1 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner>;

        if r1 != null goto label1;

        return;

     label1:
        r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner> = null;

        virtualinvoke r1.<com.android.server.wm.TaskPositioner: void unregister()>();

        return;
    }

    private boolean startPositioningLocked(com.android.server.wm.WindowState, boolean, boolean, float, float)
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.WindowState r1, $r10, $r12, $r13, r29;
        boolean z0, z1, $z2;
        float f0, f1;
        com.android.server.wm.DisplayContent r2;
        java.lang.StringBuilder $r3, $r16, $r20;
        java.lang.String $r6, $r19, $r24;
        android.view.IApplicationToken $r7;
        android.view.InputChannel $r8, $r31, $r33;
        com.android.server.wm.WindowManagerService $r9;
        com.android.server.wm.TaskPositioner $r11, r27, $r32;
        com.android.server.wm.ActivityRecord $r14, $r15;
        com.android.server.input.InputManagerService $r30;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        if r1 == null goto label6;

        $r7 = virtualinvoke r1.<com.android.server.wm.WindowState: android.view.IApplicationToken getAppToken()>();

        if $r7 != null goto label1;

        goto label6;

     label1:
        $r8 = r1.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        if $r8 != null goto label2;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startPositioningLocked: ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no input channel,  probably being removed");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("WindowManager", $r24);

        return 0;

     label2:
        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r2 != null goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startPositioningLocked: Invalid display content ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r19);

        return 0;

     label3:
        r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.DisplayContent mPositioningDisplay> = r2;

        $r9 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        r27 = staticinvoke <com.android.server.wm.TaskPositioner: com.android.server.wm.TaskPositioner create(com.android.server.wm.WindowManagerService)>($r9);

        r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner> = r27;

        virtualinvoke r27.<com.android.server.wm.TaskPositioner: void register(com.android.server.wm.DisplayContent,com.android.server.wm.WindowState)>(r2, r1);

        r29 = r1;

        $r10 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r10 == null goto label4;

        r29 = r1;

        $r12 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r12 == r1 goto label4;

        r29 = r1;

        $r13 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        $r15 = $r13.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r14 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r15 != $r14 goto label4;

        r29 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

     label4:
        $r30 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.input.InputManagerService mInputManager>;

        $r31 = r29.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        $r32 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner>;

        $r33 = $r32.<com.android.server.wm.TaskPositioner: android.view.InputChannel mServerChannel>;

        $z2 = virtualinvoke $r30.<com.android.server.input.InputManagerService: boolean transferTouchFocus(android.view.InputChannel,android.view.InputChannel)>($r31, $r33);

        if $z2 != 0 goto label5;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "startPositioningLocked: Unable to transfer touch focus");

        specialinvoke r0.<com.android.server.wm.TaskPositioningController: void cleanUpTaskPositioner()>();

        return 0;

     label5:
        $r11 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner>;

        virtualinvoke $r11.<com.android.server.wm.TaskPositioner: void startDrag(boolean,boolean,float,float)>(z0, z1, f0, f1);

        return 1;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startPositioningLocked: Bad window ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

        return 0;
    }

    void finishTaskPositioning()
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm._$$Lambda$TaskPositioningController$z3n1stJjOdhDbXXrvPlvlqmON6k $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        $r1 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r1.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r2 = new com.android.server.wm._$$Lambda$TaskPositioningController$z3n1stJjOdhDbXXrvPlvlqmON6k;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$TaskPositioningController$z3n1stJjOdhDbXXrvPlvlqmON6k: void <init>(com.android.server.wm.TaskPositioningController)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void finishTaskPositioning(android.view.IWindow)
    {
        com.android.server.wm.TaskPositioningController r0;
        android.view.IWindow r1;
        com.android.server.wm.TaskPositioner r2;
        android.os.IBinder $r3, $r4;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r1 := @parameter0: android.view.IWindow;

        r2 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner>;

        if r2 == null goto label1;

        $r3 = r2.<com.android.server.wm.TaskPositioner: android.os.IBinder mClientCallback>;

        $r4 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r3 != $r4 goto label1;

        virtualinvoke r0.<com.android.server.wm.TaskPositioningController: void finishTaskPositioning()>();

     label1:
        return;
    }

    android.view.InputWindowHandle getDragWindowHandleLocked()
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.TaskPositioner r1;
        android.view.InputWindowHandle r2;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r1 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner>;

        if r1 == null goto label1;

        r2 = r1.<com.android.server.wm.TaskPositioner: android.view.InputWindowHandle mDragWindowHandle>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    void handleTapOutsideTask(com.android.server.wm.DisplayContent, int, int)
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.DisplayContent r1;
        int i0, i1;
        com.android.server.wm._$$Lambda$TaskPositioningController$u0oAwi82C_bAGo2JAsAc_9ZLi70 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.TaskPositioningController: android.os.Handler mHandler>;

        $r2 = new com.android.server.wm._$$Lambda$TaskPositioningController$u0oAwi82C_bAGo2JAsAc_9ZLi70;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$TaskPositioningController$u0oAwi82C_bAGo2JAsAc_9ZLi70: void <init>(com.android.server.wm.TaskPositioningController,com.android.server.wm.DisplayContent,int,int)>(r0, r1, i0, i1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    void hideInputSurface(int)
    {
        com.android.server.wm.TaskPositioningController r0;
        int i0, $i1;
        android.view.SurfaceControl$Transaction $r1, $r3, $r4;
        com.android.server.wm.DisplayContent r5;
        android.view.SurfaceControl r6;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        i0 := @parameter0: int;

        r5 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.DisplayContent mPositioningDisplay>;

        if r5 == null goto label1;

        $i1 = virtualinvoke r5.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i1 != i0 goto label1;

        r6 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface>;

        if r6 == null goto label1;

        $r1 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction hide(android.view.SurfaceControl)>(r6);

        $r3 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        $r4 = virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction syncInputWindows()>();

        virtualinvoke $r4.<android.view.SurfaceControl$Transaction: void apply()>();

     label1:
        return;
    }

    boolean isPositioningLocked()
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.TaskPositioner $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        $r1 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.TaskPositioner mTaskPositioner>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void lambda$finishTaskPositioning$1$TaskPositioningController()
    {
        com.android.server.wm.TaskPositioningController r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        $r3 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.TaskPositioningController: void cleanUpTaskPositioner()>();

        r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.DisplayContent mPositioningDisplay> = null;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$handleTapOutsideTask$0$TaskPositioningController(com.android.server.wm.DisplayContent, int, int)
    {
        com.android.server.wm.TaskPositioningController r0;
        int i0, i1, $i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowState $r3;
        float $f0, $f1;
        android.app.IActivityTaskManager $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        com.android.server.wm.DisplayContent r7;
        com.android.server.wm.Task r8;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r7 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r8 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.Task findTaskForResizePoint(int,int)>(i0, i1);

     label02:
        if r8 == null goto label10;

     label03:
        $z0 = virtualinvoke r8.<com.android.server.wm.Task: boolean isResizeable()>();

        if $z0 != 0 goto label05;

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r3 = virtualinvoke r8.<com.android.server.wm.Task: com.android.server.wm.WindowState getTopVisibleAppMainWindow()>();

        $z1 = virtualinvoke r8.<com.android.server.wm.Task: boolean preserveOrientationOnResize()>();

        $f1 = (float) i0;

        $f0 = (float) i1;

        $z2 = specialinvoke r0.<com.android.server.wm.TaskPositioningController: boolean startPositioningLocked(com.android.server.wm.WindowState,boolean,boolean,float,float)>($r3, 1, $z1, $f1, $f0);

        if $z2 != 0 goto label07;

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r4 = r0.<com.android.server.wm.TaskPositioningController: android.app.IActivityTaskManager mActivityManager>;

        $i2 = r8.<com.android.server.wm.Task: int mTaskId>;

        interfaceinvoke $r4.<android.app.IActivityTaskManager: void setFocusedTask(int)>($i2);

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void showInputSurface(int)
    {
        com.android.server.wm.TaskPositioningController r0;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.WindowManagerService $r1, $r21;
        com.android.server.wm.RootWindowContainer $r2;
        android.view.SurfaceControl $r3, $r4, $r7, $r10, $r16, $r27;
        android.view.SurfaceControl$Transaction $r5, $r8, $r11, $r17, $r19, $r20;
        android.graphics.Point $r13;
        android.graphics.Rect $r14, $r15;
        android.view.SurfaceSession $r22;
        android.view.SurfaceControl$Builder $r23, $r24, $r25, $r26;
        com.android.server.wm.DisplayContent r28, r29;
        android.view.InputWindowHandle r30;
        android.view.Display r31;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        i0 := @parameter0: int;

        r28 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.DisplayContent mPositioningDisplay>;

        if r28 == null goto label4;

        $i1 = virtualinvoke r28.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i1 == i0 goto label1;

        goto label4;

     label1:
        $r1 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r29 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        $r3 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface>;

        if $r3 != null goto label2;

        $r21 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        $r22 = virtualinvoke r29.<com.android.server.wm.DisplayContent: android.view.SurfaceSession getSession()>();

        $r23 = virtualinvoke $r21.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Builder makeSurfaceBuilder(android.view.SurfaceSession)>($r22);

        $r24 = virtualinvoke $r23.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()>();

        $r25 = virtualinvoke $r24.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>("Drag and Drop Input Consumer");

        $r26 = virtualinvoke $r25.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("TaskPositioningController.showInputSurface");

        $r27 = virtualinvoke $r26.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface> = $r27;

     label2:
        r30 = virtualinvoke r0.<com.android.server.wm.TaskPositioningController: android.view.InputWindowHandle getDragWindowHandleLocked()>();

        if r30 != null goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drag is in progress but there is no drag window handle.");

        return;

     label3:
        $r5 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        $r4 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface>;

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>($r4);

        $r8 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        $r7 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface>;

        virtualinvoke $r8.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)>($r7, r30);

        $r11 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        $r10 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface>;

        virtualinvoke $r11.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>($r10, 2147483647);

        r31 = virtualinvoke r29.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r13 = new android.graphics.Point;

        specialinvoke $r13.<android.graphics.Point: void <init>()>();

        virtualinvoke r31.<android.view.Display: void getRealSize(android.graphics.Point)>($r13);

        $r14 = r0.<com.android.server.wm.TaskPositioningController: android.graphics.Rect mTmpClipRect>;

        $i3 = $r13.<android.graphics.Point: int x>;

        $i2 = $r13.<android.graphics.Point: int y>;

        virtualinvoke $r14.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i3, $i2);

        $r17 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        $r16 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl mInputSurface>;

        $r15 = r0.<com.android.server.wm.TaskPositioningController: android.graphics.Rect mTmpClipRect>;

        virtualinvoke $r17.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,android.graphics.Rect)>($r16, $r15);

        $r19 = r0.<com.android.server.wm.TaskPositioningController: android.view.SurfaceControl$Transaction mTransaction>;

        $r20 = virtualinvoke $r19.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction syncInputWindows()>();

        virtualinvoke $r20.<android.view.SurfaceControl$Transaction: void apply()>();

        return;

     label4:
        return;
    }

    boolean startMovingTask(android.view.IWindow, float, float)
    {
        com.android.server.wm.TaskPositioningController r0;
        float f0, f1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        boolean $z0;
        android.app.IActivityTaskManager $r4;
        com.android.server.wm.Task $r5;
        int $i0;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7, $r8, r12;
        android.view.IWindow r9;
        com.android.server.wm.WindowState r10;

        r0 := @this: com.android.server.wm.TaskPositioningController;

        r9 := @parameter0: android.view.IWindow;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r2 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.TaskPositioningController: com.android.server.wm.WindowManagerService mService>;

        r10 = virtualinvoke $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r9, 0);

     label02:
        $z0 = specialinvoke r0.<com.android.server.wm.TaskPositioningController: boolean startPositioningLocked(com.android.server.wm.WindowState,boolean,boolean,float,float)>(r10, 0, 0, f0, f1);

        if $z0 != 0 goto label04;

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label06:
        $r4 = r0.<com.android.server.wm.TaskPositioningController: android.app.IActivityTaskManager mActivityManager>;

        $r5 = virtualinvoke r10.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $i0 = $r5.<com.android.server.wm.Task: int mTaskId>;

        interfaceinvoke $r4.<android.app.IActivityTaskManager: void setFocusedTask(int)>($i0);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

     label09:
        return 1;

     label10:
        $r8 := @caughtexception;

        r12 = $r8;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r12;

     label13:
        $r7 := @caughtexception;

        r12 = $r7;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
    }
}
