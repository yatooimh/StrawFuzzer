class com.android.server.wm.TaskSnapshotController extends java.lang.Object
{
    static final int SNAPSHOT_MODE_APP_THEME;
    static final int SNAPSHOT_MODE_NONE;
    static final int SNAPSHOT_MODE_REAL;
    private static final java.lang.String TAG;
    private final com.android.server.wm.TaskSnapshotCache mCache;
    private final android.os.Handler mHandler;
    private final float mHighResTaskSnapshotScale;
    private final boolean mIsRunningOnIoT;
    private final boolean mIsRunningOnTv;
    private final boolean mIsRunningOnWear;
    private final com.android.server.wm.TaskSnapshotLoader mLoader;
    private final com.android.server.wm.TaskSnapshotPersister mPersister;
    private final com.android.server.wm.WindowManagerService mService;
    private final android.util.ArraySet mSkipClosingAppSnapshotTasks;
    private final android.graphics.Rect mTmpRect;
    private final android.util.ArraySet mTmpTasks;

    void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.'-$$Lambda$OPdXuZQLetMnocdH6XV32JbNQ3I' $r6;
        com.android.server.wm.WindowManagerService $r9, $r10, $r13, $r16, $r19, r22;
        android.content.Context $r11, $r14, $r17, $r20;
        android.content.pm.PackageManager $r12, $r15, $r18;
        boolean $z0, $z1, $z2;
        android.content.res.Resources $r21;
        float $f0;
        android.util.ArraySet r25, r26;
        android.os.Handler r27;
        android.graphics.Rect r28;
        com.android.server.wm.TaskSnapshotPersister r29;
        com.android.server.wm.TaskSnapshotLoader r30;
        com.android.server.wm.TaskSnapshotCache r31;
        com.android.server.wm.TaskSnapshotPersister$DirectoryResolver r32;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r22 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r25 = new android.util.ArraySet;

        specialinvoke r25.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mSkipClosingAppSnapshotTasks> = r25;

        r26 = new android.util.ArraySet;

        specialinvoke r26.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mTmpTasks> = r26;

        r27 = new android.os.Handler;

        specialinvoke r27.<android.os.Handler: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotController: android.os.Handler mHandler> = r27;

        r28 = new android.graphics.Rect;

        specialinvoke r28.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect mTmpRect> = r28;

        r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService> = r22;

        r29 = new com.android.server.wm.TaskSnapshotPersister;

        $r6 = <com.android.server.wm._$$Lambda$OPdXuZQLetMnocdH6XV32JbNQ3I: com.android.server.wm.'-$$Lambda$OPdXuZQLetMnocdH6XV32JbNQ3I' INSTANCE>;

        r32 = (com.android.server.wm.TaskSnapshotPersister$DirectoryResolver) $r6;

        specialinvoke r29.<com.android.server.wm.TaskSnapshotPersister: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.TaskSnapshotPersister$DirectoryResolver)>(r22, r32);

        r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister> = r29;

        r30 = new com.android.server.wm.TaskSnapshotLoader;

        specialinvoke r30.<com.android.server.wm.TaskSnapshotLoader: void <init>(com.android.server.wm.TaskSnapshotPersister)>(r29);

        r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotLoader mLoader> = r30;

        r31 = new com.android.server.wm.TaskSnapshotCache;

        $r9 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        specialinvoke r31.<com.android.server.wm.TaskSnapshotCache: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.TaskSnapshotLoader)>($r9, r30);

        r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache> = r31;

        $r10 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r12.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        r0.<com.android.server.wm.TaskSnapshotController: boolean mIsRunningOnTv> = $z0;

        $r13 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r15.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.embedded");

        r0.<com.android.server.wm.TaskSnapshotController: boolean mIsRunningOnIoT> = $z1;

        $r16 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r17 = $r16.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z2 = virtualinvoke $r18.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        r0.<com.android.server.wm.TaskSnapshotController: boolean mIsRunningOnWear> = $z2;

        $r19 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r20 = $r19.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r20.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r21.<android.content.res.Resources: float getFloat(int)>(17105060);

        r0.<com.android.server.wm.TaskSnapshotController: float mHighResTaskSnapshotScale> = $f0;

        return;
    }

    private android.app.ActivityManager$TaskSnapshot drawAppThemeSnapshot(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.WindowState r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.app.ActivityManager$TaskDescription $r5, $r13;
        android.view.InsetsState $r6, $r9, $r10;
        com.android.server.wm.DisplayContent $r7;
        com.android.server.wm.InsetsPolicy $r8;
        android.graphics.Rect $r11, $r14, $r15, $r23, r26;
        com.android.server.wm.TaskSnapshotSurface$SystemBarBackgroundPainter $r12;
        android.app.ActivityManager$TaskSnapshot $r16;
        long $l9;
        android.content.ComponentName $r17;
        android.graphics.GraphicBuffer $r18;
        android.graphics.ColorSpace $r19;
        android.content.res.Configuration $r20;
        android.app.WindowConfiguration $r21;
        android.graphics.Point $r22;
        android.view.WindowManager$LayoutParams r24;
        android.graphics.RenderNode r27;
        android.graphics.RecordingCanvas r28;
        android.graphics.Bitmap r29;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopMostActivity()>();

        if r2 != null goto label1;

        return null;

     label1:
        r3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r3 != null goto label2;

        return null;

     label2:
        $r5 = virtualinvoke r1.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

        $i5 = virtualinvoke $r5.<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>();

        i0 = staticinvoke <com.android.internal.graphics.ColorUtils: int setAlphaComponent(int,int)>($i5, 255);

        r24 = virtualinvoke r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $r6 = new android.view.InsetsState;

        $r7 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8 = virtualinvoke $r7.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsPolicy getInsetsPolicy()>();

        $r9 = virtualinvoke $r8.<com.android.server.wm.InsetsPolicy: android.view.InsetsState getInsetsForDispatch(com.android.server.wm.WindowState)>(r3);

        specialinvoke $r6.<android.view.InsetsState: void <init>(android.view.InsetsState)>($r9);

        $r10 = virtualinvoke r3.<com.android.server.wm.WindowState: android.view.InsetsState getRequestedInsetsState()>();

        staticinvoke <com.android.server.wm.TaskSnapshotController: void mergeInsetsSources(android.view.InsetsState,android.view.InsetsState)>($r6, $r10);

        $r11 = virtualinvoke r3.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        r26 = staticinvoke <com.android.server.wm.TaskSnapshotController: android.graphics.Rect getSystemBarInsets(android.graphics.Rect,android.view.InsetsState)>($r11, $r6);

        $r12 = new com.android.server.wm.TaskSnapshotSurface$SystemBarBackgroundPainter;

        $i6 = r24.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = r24.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i8 = r24.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $r13 = virtualinvoke r1.<com.android.server.wm.Task: android.app.ActivityManager$TaskDescription getTaskDescription()>();

        $f2 = r0.<com.android.server.wm.TaskSnapshotController: float mHighResTaskSnapshotScale>;

        specialinvoke $r12.<com.android.server.wm.TaskSnapshotSurface$SystemBarBackgroundPainter: void <init>(int,int,int,android.app.ActivityManager$TaskDescription,float,android.view.InsetsState)>($i6, $i7, $i8, $r13, $f2, $r6);

        $r14 = virtualinvoke r1.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        i1 = virtualinvoke $r14.<android.graphics.Rect: int width()>();

        $r15 = virtualinvoke r1.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        i2 = virtualinvoke $r15.<android.graphics.Rect: int height()>();

        f0 = (float) i1;

        f1 = r0.<com.android.server.wm.TaskSnapshotController: float mHighResTaskSnapshotScale>;

        $f3 = f0 * f1;

        i3 = (int) $f3;

        $f4 = (float) i2;

        $f5 = $f4 * f1;

        i4 = (int) $f5;

        r27 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>("TaskSnapshotController", null);

        virtualinvoke r27.<android.graphics.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>(0, 0, i3, i4);

        virtualinvoke r27.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(0);

        r28 = virtualinvoke r27.<android.graphics.RenderNode: android.graphics.RecordingCanvas start(int,int)>(i3, i4);

        virtualinvoke r28.<android.graphics.RecordingCanvas: void drawColor(int)>(i0);

        virtualinvoke $r12.<com.android.server.wm.TaskSnapshotSurface$SystemBarBackgroundPainter: void setInsets(android.graphics.Rect)>(r26);

        virtualinvoke $r12.<com.android.server.wm.TaskSnapshotSurface$SystemBarBackgroundPainter: void drawDecors(android.graphics.Canvas,android.graphics.Rect)>(r28, null);

        virtualinvoke r27.<android.graphics.RenderNode: void end(android.graphics.RecordingCanvas)>(r28);

        r29 = staticinvoke <android.view.ThreadedRenderer: android.graphics.Bitmap createHardwareBitmap(android.graphics.RenderNode,int,int)>(r27, i3, i4);

        if r29 != null goto label3;

        return null;

     label3:
        $r16 = new android.app.ActivityManager$TaskSnapshot;

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r17 = r2.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        $r18 = virtualinvoke r29.<android.graphics.Bitmap: android.graphics.GraphicBuffer createGraphicBufferHandle()>();

        $r19 = virtualinvoke r29.<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>();

        $r20 = virtualinvoke r3.<com.android.server.wm.WindowState: android.content.res.Configuration getConfiguration()>();

        $i10 = $r20.<android.content.res.Configuration: int orientation>;

        $r21 = virtualinvoke r3.<com.android.server.wm.WindowState: android.app.WindowConfiguration getWindowConfiguration()>();

        $i11 = virtualinvoke $r21.<android.app.WindowConfiguration: int getRotation()>();

        $r22 = new android.graphics.Point;

        specialinvoke $r22.<android.graphics.Point: void <init>(int,int)>(i1, i2);

        $r23 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect getInsets(com.android.server.wm.WindowState)>(r3);

        $i12 = virtualinvoke r1.<com.android.server.wm.Task: int getWindowingMode()>();

        $i13 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: int getSystemUiVisibility(com.android.server.wm.Task)>(r1);

        specialinvoke $r16.<android.app.ActivityManager$TaskSnapshot: void <init>(long,android.content.ComponentName,android.graphics.GraphicBuffer,android.graphics.ColorSpace,int,int,android.graphics.Point,android.graphics.Rect,boolean,boolean,int,int,boolean)>($l9, $r17, $r18, $r19, $i10, $i11, $r22, $r23, 0, 0, $i12, $i13, 0);

        return $r16;
    }

    private com.android.server.wm.ActivityRecord findAppTokenForSnapshot(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.'-$$Lambda$TaskSnapshotController$eY4HzOpxvBAchhbObndnIDQqsVs' $r2;
        com.android.server.wm.ActivityRecord $r3;
        java.util.function.Predicate r4;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        $r2 = <com.android.server.wm._$$Lambda$TaskSnapshotController$eY4HzOpxvBAchhbObndnIDQqsVs: com.android.server.wm.'-$$Lambda$TaskSnapshotController$eY4HzOpxvBAchhbObndnIDQqsVs' INSTANCE>;

        r4 = (java.util.function.Predicate) $r2;

        $r3 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getActivity(java.util.function.Predicate)>(r4);

        return $r3;
    }

    private android.graphics.Rect getInsets(com.android.server.wm.WindowState)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.WindowState r1;
        android.graphics.Rect r2, $r3, $r4, $r6;
        com.android.server.wm.ActivityRecord $r5;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getContentInsets()>();

        $r4 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getStableInsets()>();

        r2 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect minRect(android.graphics.Rect,android.graphics.Rect)>($r3, $r4);

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.ActivityRecord: android.graphics.Rect getLetterboxInsets()>();

        staticinvoke <com.android.server.wm.utils.InsetUtils: void addInsets(android.graphics.Rect,android.graphics.Rect)>(r2, $r6);

        return r2;
    }

    static android.graphics.Rect getSystemBarInsets(android.graphics.Rect, android.view.InsetsState)
    {
        android.graphics.Rect r0, $r4;
        android.view.InsetsState r1;
        android.view.WindowInsets $r2;
        int $i0;
        android.graphics.Insets $r3;

        r0 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.view.InsetsState;

        $r2 = virtualinvoke r1.<android.view.InsetsState: android.view.WindowInsets calculateInsets(android.graphics.Rect,android.view.InsetsState,boolean,boolean,android.view.DisplayCutout,int,int,int,android.util.SparseIntArray)>(r0, null, 0, 0, null, 0, 0, 0, null);

        $i0 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        $r3 = virtualinvoke $r2.<android.view.WindowInsets: android.graphics.Insets getInsets(int)>($i0);

        $r4 = virtualinvoke $r3.<android.graphics.Insets: android.graphics.Rect toRect()>();

        return $r4;
    }

    private int getSystemUiVisibility(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskSnapshotController r0;
        int $i0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.WindowState r3;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopFullscreenActivity()>();

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState getTopFullscreenOpaqueWindow()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        if r3 == null goto label3;

        $i0 = virtualinvoke r3.<com.android.server.wm.WindowState: int getSystemUiVisibility()>();

        return $i0;

     label3:
        return 0;
    }

    private void handleClosingApps(android.util.ArraySet)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.util.ArraySet r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.util.ArraySet;

        $z0 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: boolean shouldDisableSnapshots()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mTmpTasks>;

        virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: void getClosingTasks(android.util.ArraySet,android.util.ArraySet)>(r1, $r2);

        $r3 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mTmpTasks>;

        virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: void snapshotTasks(android.util.ArraySet)>($r3);

        $r4 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mSkipClosingAppSnapshotTasks>;

        virtualinvoke $r4.<android.util.ArraySet: void clear()>();

        return;
    }

    static boolean lambda$findAppTokenForSnapshot$0(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1, $r2, $r3;
        boolean $z0, z1;
        float $f0;
        byte $b0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f0 = $r3.<com.android.server.wm.WindowStateAnimator: float mLastAlpha>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static boolean lambda$findAppTokenForSnapshot$1(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.ActivityRecord r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowState $r1;
        com.android.server.wm.'-$$Lambda$TaskSnapshotController$b7mc92hqzbRpmpc99dYS4wKuL6Y' $r2;
        com.android.internal.util.ToBooleanFunction r3;

        r0 := @parameter0: com.android.server.wm.ActivityRecord;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean isSurfaceShowing()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if $r1 != null goto label1;

        goto label2;

     label1:
        $r2 = <com.android.server.wm._$$Lambda$TaskSnapshotController$b7mc92hqzbRpmpc99dYS4wKuL6Y: com.android.server.wm.'-$$Lambda$TaskSnapshotController$b7mc92hqzbRpmpc99dYS4wKuL6Y' INSTANCE>;

        r3 = (com.android.internal.util.ToBooleanFunction) $r2;

        $z1 = virtualinvoke r0.<com.android.server.wm.ActivityRecord: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r3, 1);

        return $z1;

     label2:
        return 0;
    }

    static void mergeInsetsSources(android.view.InsetsState, android.view.InsetsState)
    {
        android.view.InsetsState r0, r1;
        android.view.InsetsSource r2;
        int i0;

        r0 := @parameter0: android.view.InsetsState;

        r1 := @parameter1: android.view.InsetsState;

        i0 = 0;

     label1:
        if i0 >= 16 goto label3;

        r2 = virtualinvoke r1.<android.view.InsetsState: android.view.InsetsSource peekSource(int)>(i0);

        if r2 == null goto label2;

        virtualinvoke r0.<android.view.InsetsState: void addSource(android.view.InsetsSource)>(r2);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    private android.graphics.Rect minRect(android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.graphics.Rect r1, r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        $r3 = new android.graphics.Rect;

        $i1 = r1.<android.graphics.Rect: int left>;

        $i0 = r2.<android.graphics.Rect: int left>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r2.<android.graphics.Rect: int top>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $i7 = r1.<android.graphics.Rect: int right>;

        $i6 = r2.<android.graphics.Rect: int right>;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        $i10 = r1.<android.graphics.Rect: int bottom>;

        $i9 = r2.<android.graphics.Rect: int bottom>;

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i9);

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>($i2, $i5, $i8, $i11);

        return $r3;
    }

    private boolean shouldDisableSnapshots()
    {
        com.android.server.wm.TaskSnapshotController r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        $z0 = r0.<com.android.server.wm.TaskSnapshotController: boolean mIsRunningOnWear>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.server.wm.TaskSnapshotController: boolean mIsRunningOnTv>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.wm.TaskSnapshotController: boolean mIsRunningOnIoT>;

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private void snapshotTasks(android.util.ArraySet, boolean)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.util.ArraySet r1;
        boolean z0, $z1, z2;
        com.android.server.wm.Task r2;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, i9;
        android.graphics.GraphicBuffer r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r10;
        com.android.server.wm.TaskSnapshotCache $r11;
        com.android.server.wm.TaskSnapshotPersister $r12;
        android.app.ActivityManager$TaskSnapshot r13;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.util.ArraySet;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i9 = $i1 - 1;

     label01:
        if i9 < 0 goto label12;

        $r4 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i9);

        r2 = (com.android.server.wm.Task) $r4;

        if z0 == 0 goto label02;

        $z1 = virtualinvoke r2.<com.android.server.wm.Task: boolean isActivityTypeHome()>();

        if $z1 == 0 goto label02;

        z2 = 1;

        goto label03;

     label02:
        z2 = 0;

     label03:
        if z2 == 0 goto label04;

        r13 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: android.app.ActivityManager$TaskSnapshot snapshotTask(com.android.server.wm.Task)>(r2);

        goto label08;

     label04:
        i0 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: int getSnapshotMode(com.android.server.wm.Task)>(r2);

        if i0 == 0 goto label07;

        if i0 == 1 goto label06;

        if i0 == 2 goto label05;

        r13 = null;

        goto label08;

     label05:
        goto label11;

     label06:
        r13 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: android.app.ActivityManager$TaskSnapshot drawAppThemeSnapshot(com.android.server.wm.Task)>(r2);

        goto label08;

     label07:
        r13 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: android.app.ActivityManager$TaskSnapshot snapshotTask(com.android.server.wm.Task)>(r2);

     label08:
        if r13 == null goto label11;

        r3 = virtualinvoke r13.<android.app.ActivityManager$TaskSnapshot: android.graphics.GraphicBuffer getSnapshot()>();

        $i2 = virtualinvoke r3.<android.graphics.GraphicBuffer: int getWidth()>();

        if $i2 == 0 goto label10;

        $i6 = virtualinvoke r3.<android.graphics.GraphicBuffer: int getHeight()>();

        if $i6 != 0 goto label09;

        goto label10;

     label09:
        $r11 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r11.<com.android.server.wm.TaskSnapshotCache: void putSnapshot(com.android.server.wm.Task,android.app.ActivityManager$TaskSnapshot)>(r2, r13);

        if z2 != 0 goto label11;

        $r12 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        $i8 = r2.<com.android.server.wm.Task: int mTaskId>;

        $i7 = r2.<com.android.server.wm.Task: int mUserId>;

        virtualinvoke $r12.<com.android.server.wm.TaskSnapshotPersister: void persistSnapshot(int,int,android.app.ActivityManager$TaskSnapshot)>($i8, $i7, r13);

        virtualinvoke r2.<com.android.server.wm.Task: void onSnapshotChanged(android.app.ActivityManager$TaskSnapshot)>(r13);

        goto label11;

     label10:
        virtualinvoke r3.<android.graphics.GraphicBuffer: void destroy()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid task snapshot dimensions ");

        $i3 = virtualinvoke r3.<android.graphics.GraphicBuffer: int getWidth()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i4 = virtualinvoke r3.<android.graphics.GraphicBuffer: int getHeight()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r10);

     label11:
        i9 = i9 + -1;

        goto label01;

     label12:
        return;
    }

    void addSkipClosingAppSnapshotTasks(android.util.ArraySet)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.util.ArraySet r1, $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.util.ArraySet;

        $r2 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mSkipClosingAppSnapshotTasks>;

        virtualinvoke $r2.<android.util.ArraySet: void addAll(android.util.ArraySet)>(r1);

        return;
    }

    public void clearSnapshotCache()
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.TaskSnapshotCache $r1;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        $r1 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r1.<com.android.server.wm.TaskSnapshotCache: void clearRunningCache()>();

        return;
    }

    com.android.server.policy.WindowManagerPolicy$StartingSurface createStartingSurface(com.android.server.wm.ActivityRecord, android.app.ActivityManager$TaskSnapshot)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.ActivityRecord r1;
        android.app.ActivityManager$TaskSnapshot r2;
        com.android.server.wm.WindowManagerService $r3;
        com.android.server.wm.TaskSnapshotSurface $r4;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 := @parameter1: android.app.ActivityManager$TaskSnapshot;

        $r3 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r4 = staticinvoke <com.android.server.wm.TaskSnapshotSurface: com.android.server.wm.TaskSnapshotSurface create(com.android.server.wm.WindowManagerService,com.android.server.wm.ActivityRecord,android.app.ActivityManager$TaskSnapshot)>($r3, r1, r2);

        return $r4;
    }

    android.view.SurfaceControl$ScreenshotGraphicBuffer createTaskSnapshot(com.android.server.wm.Task, float)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1;
        float f0;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: android.view.SurfaceControl$ScreenshotGraphicBuffer createTaskSnapshot(com.android.server.wm.Task,float,int,android.graphics.Point)>(r1, f0, 1, null);

        return $r2;
    }

    android.view.SurfaceControl$ScreenshotGraphicBuffer createTaskSnapshot(com.android.server.wm.Task, float, int, android.graphics.Point)
    {
        com.android.server.wm.TaskSnapshotController r0;
        float f0;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.Point r1;
        com.android.server.wm.WindowState r2;
        android.view.SurfaceControl $r3, $r7, $r11;
        android.graphics.Rect $r4, $r5, $r8, $r9, $r10;
        com.android.server.wm.DisplayContent $r6;
        com.android.server.wm.Task r12;
        android.view.SurfaceControl[] r13;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r14;
        android.graphics.GraphicBuffer r15;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r12 := @parameter0: com.android.server.wm.Task;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        r1 := @parameter3: android.graphics.Point;

        $r3 = virtualinvoke r12.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect mTmpRect>;

        virtualinvoke r12.<com.android.server.wm.Task: void getBounds(android.graphics.Rect)>($r4);

        $r5 = r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect mTmpRect>;

        virtualinvoke $r5.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r6 = virtualinvoke r12.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        r2 = $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if r2 == null goto label2;

        r13 = newarray (android.view.SurfaceControl)[1];

        $r11 = virtualinvoke r2.<com.android.server.wm.WindowState: android.view.SurfaceControl getSurfaceControl()>();

        r13[0] = $r11;

        goto label3;

     label2:
        r13 = newarray (android.view.SurfaceControl)[0];

     label3:
        $r7 = virtualinvoke r12.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        $r8 = r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect mTmpRect>;

        r14 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayersExcluding(android.view.SurfaceControl,android.graphics.Rect,float,int,android.view.SurfaceControl[])>($r7, $r8, f0, i0, r13);

        if r1 == null goto label4;

        $r9 = r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect mTmpRect>;

        $i3 = virtualinvoke $r9.<android.graphics.Rect: int width()>();

        r1.<android.graphics.Point: int x> = $i3;

        $r10 = r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect mTmpRect>;

        $i4 = virtualinvoke $r10.<android.graphics.Rect: int height()>();

        r1.<android.graphics.Point: int y> = $i4;

     label4:
        if r14 == null goto label5;

        r15 = virtualinvoke r14.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        goto label6;

     label5:
        r15 = null;

     label6:
        if r15 == null goto label8;

        $i1 = virtualinvoke r15.<android.graphics.GraphicBuffer: int getWidth()>();

        if $i1 <= 1 goto label8;

        $i2 = virtualinvoke r15.<android.graphics.GraphicBuffer: int getHeight()>();

        if $i2 > 1 goto label7;

        goto label8;

     label7:
        return r14;

     label8:
        return null;
    }

    android.view.SurfaceControl$ScreenshotGraphicBuffer createTaskSnapshot(com.android.server.wm.Task, android.app.ActivityManager$TaskSnapshot$Builder)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.app.ActivityManager$TaskSnapshot$Builder r1;
        android.graphics.Point $r3;
        float $f0;
        int $i0;
        com.android.server.wm.Task r5;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r6;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r5 := @parameter0: com.android.server.wm.Task;

        r1 := @parameter1: android.app.ActivityManager$TaskSnapshot$Builder;

        $r3 = new android.graphics.Point;

        specialinvoke $r3.<android.graphics.Point: void <init>()>();

        $f0 = r0.<com.android.server.wm.TaskSnapshotController: float mHighResTaskSnapshotScale>;

        $i0 = virtualinvoke r1.<android.app.ActivityManager$TaskSnapshot$Builder: int getPixelFormat()>();

        r6 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: android.view.SurfaceControl$ScreenshotGraphicBuffer createTaskSnapshot(com.android.server.wm.Task,float,int,android.graphics.Point)>(r5, $f0, $i0, $r3);

        virtualinvoke r1.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setTaskSize(android.graphics.Point)>($r3);

        return r6;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.TaskSnapshotController r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        java.lang.StringBuilder $r4;
        float $f0;
        com.android.server.wm.TaskSnapshotCache $r9;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mHighResTaskSnapshotScale=");

        $f0 = r0.<com.android.server.wm.TaskSnapshotController: float mHighResTaskSnapshotScale>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r9 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r9.<com.android.server.wm.TaskSnapshotCache: void dump(java.io.PrintWriter,java.lang.String)>(r1, r2);

        return;
    }

    void getClosingTasks(android.util.ArraySet, android.util.ArraySet)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.util.ArraySet r1, r2, $r6;
        com.android.server.wm.Task r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.ActivityRecord $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.util.ArraySet;

        r2 := @parameter1: android.util.ArraySet;

        virtualinvoke r2.<android.util.ArraySet: void clear()>();

        $i0 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.wm.ActivityRecord) $r4;

        r3 = virtualinvoke $r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<com.android.server.wm.Task: boolean isVisible()>();

        if $z0 != 0 goto label2;

        $r6 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mSkipClosingAppSnapshotTasks>;

        $z1 = virtualinvoke $r6.<android.util.ArraySet: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        virtualinvoke r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return;
    }

    android.app.ActivityManager$TaskSnapshot getSnapshot(int, int, boolean, boolean)
    {
        com.android.server.wm.TaskSnapshotController r0;
        int i0, i1;
        boolean z0, $z1, z2, z3;
        com.android.server.wm.TaskSnapshotCache r1;
        com.android.server.wm.TaskSnapshotPersister $r2;
        android.app.ActivityManager$TaskSnapshot $r3;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r1 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        if z2 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.TaskSnapshotPersister: boolean enableLowResSnapshots()>();

        if $z1 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $r3 = virtualinvoke r1.<com.android.server.wm.TaskSnapshotCache: android.app.ActivityManager$TaskSnapshot getSnapshot(int,int,boolean,boolean)>(i0, i1, z0, z3);

        return $r3;
    }

    int getSnapshotMode(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityRecord getTopMostActivity()>();

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean isActivityTypeStandardOrUndefined()>();

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean isActivityTypeAssistant()>();

        if $z2 != 0 goto label1;

        return 2;

     label1:
        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean shouldUseAppThemeSnapshot()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public void lambda$screenTurningOff$2$TaskSnapshotController(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1;
        boolean $z0;
        android.util.ArraySet $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        $z0 = virtualinvoke r1.<com.android.server.wm.Task: boolean isVisible()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mTmpTasks>;

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void lambda$screenTurningOff$3$TaskSnapshotController(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.policy.WindowManagerPolicy$ScreenOffListener r1;
        com.android.server.wm._$$Lambda$TaskSnapshotController$pF831VjVO7J7eXZhalKp1CJKNC4 r2;
        boolean z0;
        com.android.server.wm.WindowManagerService $r3, $r5, $r6, $r7;
        android.util.ArraySet $r4, $r9;
        int $i0;
        com.android.server.policy.WindowManagerPolicy $r8;
        java.lang.Throwable $r10, $r11;
        com.android.server.wm.WindowManagerGlobalLock r12;
        com.android.server.wm.RootWindowContainer r13;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$ScreenOffListener;

     label1:
        $r3 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        r12 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r12;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mTmpTasks>;

        virtualinvoke $r4.<android.util.ArraySet: void clear()>();

        $r5 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        r13 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = new com.android.server.wm._$$Lambda$TaskSnapshotController$pF831VjVO7J7eXZhalKp1CJKNC4;

        specialinvoke r2.<com.android.server.wm._$$Lambda$TaskSnapshotController$pF831VjVO7J7eXZhalKp1CJKNC4: void <init>(com.android.server.wm.TaskSnapshotController)>(r0);

        virtualinvoke r13.<com.android.server.wm.RootWindowContainer: void forAllTasks(java.util.function.Consumer)>(r2);

        $r6 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r8 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r7 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $i0 = $r7.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        z0 = interfaceinvoke $r8.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardSecure(int)>($i0);

        $r9 = r0.<com.android.server.wm.TaskSnapshotController: android.util.ArraySet mTmpTasks>;

        specialinvoke r0.<com.android.server.wm.TaskSnapshotController: void snapshotTasks(android.util.ArraySet,boolean)>($r9, z0);

        exitmonitor r12;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label4:
        interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$ScreenOffListener: void onScreenOff()>();

        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r12;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

     label8:
        $r11 := @caughtexception;

        interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$ScreenOffListener: void onScreenOff()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    void notifyAppVisibilityChanged(com.android.server.wm.ActivityRecord, boolean)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.ActivityRecord r1;
        boolean z0;
        com.android.server.wm.ActivityRecord[] $r2;
        android.util.ArraySet $r3;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r2 = newarray (com.android.server.wm.ActivityRecord)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <com.google.android.collect.Sets: android.util.ArraySet newArraySet(java.lang.Object[])>($r2);

        specialinvoke r0.<com.android.server.wm.TaskSnapshotController: void handleClosingApps(android.util.ArraySet)>($r3);

     label1:
        return;
    }

    void notifyTaskRemovedFromRecents(int, int)
    {
        com.android.server.wm.TaskSnapshotController r0;
        int i0, i1;
        com.android.server.wm.TaskSnapshotCache $r1;
        com.android.server.wm.TaskSnapshotPersister $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r1.<com.android.server.wm.TaskSnapshotCache: void onTaskRemoved(int)>(i0);

        $r2 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        virtualinvoke $r2.<com.android.server.wm.TaskSnapshotPersister: void onTaskRemovedFromRecents(int,int)>(i0, i1);

        return;
    }

    void onAppDied(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.TaskSnapshotCache $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r2.<com.android.server.wm.TaskSnapshotCache: void onAppDied(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    void onAppRemoved(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.TaskSnapshotCache $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r2.<com.android.server.wm.TaskSnapshotCache: void onAppRemoved(com.android.server.wm.ActivityRecord)>(r1);

        return;
    }

    void onTransitionStarting(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.DisplayContent r1;
        android.util.ArraySet $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r2 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        specialinvoke r0.<com.android.server.wm.TaskSnapshotController: void handleClosingApps(android.util.ArraySet)>($r2);

        return;
    }

    boolean prepareTaskSnapshot(com.android.server.wm.Task, int, android.app.ActivityManager$TaskSnapshot$Builder)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1, $r27, $r29;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, $z9;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.WindowManagerService $r4;
        com.android.server.policy.WindowManagerPolicy $r5;
        long $l0;
        android.graphics.Rect $r8;
        android.view.WindowManager$LayoutParams $r10, $r11;
        int $i1, $i2, $i3, i5, i6, $i8, $i9, $i10, $i11;
        com.android.server.wm.TaskSnapshotPersister $r19;
        java.lang.StringBuilder $r20;
        java.lang.String $r23;
        android.app.ActivityManager$TaskSnapshot$Builder r24;
        byte b7;
        android.content.ComponentName $r26;
        android.content.res.Configuration $r28;
        com.android.server.wm.DisplayContent $r30;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        i5 := @parameter1: int;

        r24 := @parameter2: android.app.ActivityManager$TaskSnapshot$Builder;

        $r4 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        z0 = interfaceinvoke $r5.<com.android.server.policy.WindowManagerPolicy: boolean isScreenOn()>();

        z6 = 0;

        if z0 != 0 goto label01;

        return 0;

     label01:
        r2 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.ActivityRecord findAppTokenForSnapshot(com.android.server.wm.Task)>(r1);

        if r2 != null goto label02;

        return 0;

     label02:
        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean hasCommittedReparentToAnimationLeash()>();

        if $z1 == 0 goto label03;

        return 0;

     label03:
        r3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState findMainWindow()>();

        if r3 != null goto label04;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to take screenshot. No main window for ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r23);

        return 0;

     label04:
        $z2 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean hasFixedRotationTransform()>();

        if $z2 == 0 goto label05;

        return 0;

     label05:
        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setIsRealSnapshot(boolean)>(1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setId(long)>($l0);

        $r8 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: android.graphics.Rect getInsets(com.android.server.wm.WindowState)>(r3);

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setContentInsets(android.graphics.Rect)>($r8);

        $r10 = virtualinvoke r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i1 = $r10.<android.view.WindowManager$LayoutParams: int format>;

        if $i1 == -1 goto label06;

        z7 = 1;

        goto label07;

     label06:
        z7 = 0;

     label07:
        $r11 = virtualinvoke r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i2 = $r11.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i2 & 1048576;

        if $i3 == 0 goto label08;

        z8 = 1;

        goto label09;

     label08:
        z8 = 0;

     label09:
        i6 = i5;

        if i5 != 0 goto label13;

        $r19 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        $z4 = virtualinvoke $r19.<com.android.server.wm.TaskSnapshotPersister: boolean use16BitFormat()>();

        if $z4 == 0 goto label11;

        $z5 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean fillsParent()>();

        if $z5 == 0 goto label11;

        if z7 == 0 goto label10;

        if z8 != 0 goto label11;

     label10:
        b7 = 4;

        goto label12;

     label11:
        b7 = 1;

     label12:
        i6 = b7;

     label13:
        $z9 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>(i6);

        if $z9 == 0 goto label15;

        $z3 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean fillsParent()>();

        if $z3 == 0 goto label14;

        if z7 == 0 goto label15;

     label14:
        z6 = 1;

        goto label15;

     label15:
        $r26 = r2.<com.android.server.wm.ActivityRecord: android.content.ComponentName mActivityComponent>;

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setTopActivityComponent(android.content.ComponentName)>($r26);

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setPixelFormat(int)>(i6);

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setIsTranslucent(boolean)>(z6);

        $r27 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r28 = virtualinvoke $r27.<com.android.server.wm.Task: android.content.res.Configuration getConfiguration()>();

        $i8 = $r28.<android.content.res.Configuration: int orientation>;

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setOrientation(int)>($i8);

        $r29 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r30 = virtualinvoke $r29.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i9 = virtualinvoke $r30.<com.android.server.wm.DisplayContent: int getRotation()>();

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setRotation(int)>($i9);

        $i10 = virtualinvoke r1.<com.android.server.wm.Task: int getWindowingMode()>();

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setWindowingMode(int)>($i10);

        $i11 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: int getSystemUiVisibility(com.android.server.wm.Task)>(r1);

        virtualinvoke r24.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setSystemUiVisibility(int)>($i11);

        return 1;
    }

    void removeObsoleteTaskFiles(android.util.ArraySet, int[])
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.util.ArraySet r1;
        int[] r2;
        com.android.server.wm.TaskSnapshotPersister $r3;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.util.ArraySet;

        r2 := @parameter1: int[];

        $r3 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        virtualinvoke $r3.<com.android.server.wm.TaskSnapshotPersister: void removeObsoleteFiles(android.util.ArraySet,int[])>(r1, r2);

        return;
    }

    void removeSnapshotCache(int)
    {
        com.android.server.wm.TaskSnapshotController r0;
        int i0;
        com.android.server.wm.TaskSnapshotCache $r1;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotCache mCache>;

        virtualinvoke $r1.<com.android.server.wm.TaskSnapshotCache: void removeRunningEntry(int)>(i0);

        return;
    }

    void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.policy.WindowManagerPolicy$ScreenOffListener r1;
        boolean $z0;
        com.android.server.wm._$$Lambda$TaskSnapshotController$Tj7bQvjfkzsOjJOdJXBpqCZnW1Q $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$ScreenOffListener;

        $z0 = specialinvoke r0.<com.android.server.wm.TaskSnapshotController: boolean shouldDisableSnapshots()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<com.android.server.policy.WindowManagerPolicy$ScreenOffListener: void onScreenOff()>();

        return;

     label1:
        $r3 = r0.<com.android.server.wm.TaskSnapshotController: android.os.Handler mHandler>;

        $r2 = new com.android.server.wm._$$Lambda$TaskSnapshotController$Tj7bQvjfkzsOjJOdJXBpqCZnW1Q;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$TaskSnapshotController$Tj7bQvjfkzsOjJOdJXBpqCZnW1Q: void <init>(com.android.server.wm.TaskSnapshotController,com.android.server.policy.WindowManagerPolicy$ScreenOffListener)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    void setPersisterPaused(boolean)
    {
        com.android.server.wm.TaskSnapshotController r0;
        boolean z0;
        com.android.server.wm.TaskSnapshotPersister $r1;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        virtualinvoke $r1.<com.android.server.wm.TaskSnapshotPersister: void setPaused(boolean)>(z0);

        return;
    }

    android.app.ActivityManager$TaskSnapshot snapshotTask(com.android.server.wm.Task)
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.Task r1;
        android.app.ActivityManager$TaskSnapshot $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: com.android.server.wm.Task;

        $r2 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: android.app.ActivityManager$TaskSnapshot snapshotTask(com.android.server.wm.Task,int)>(r1, 0);

        return $r2;
    }

    android.app.ActivityManager$TaskSnapshot snapshotTask(com.android.server.wm.Task, int)
    {
        com.android.server.wm.TaskSnapshotController r0;
        int i0;
        android.app.ActivityManager$TaskSnapshot$Builder $r2;
        boolean $z0;
        android.graphics.GraphicBuffer $r3;
        android.graphics.ColorSpace $r5;
        android.app.ActivityManager$TaskSnapshot $r7;
        com.android.server.wm.Task r8;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r9;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r8 := @parameter0: com.android.server.wm.Task;

        i0 := @parameter1: int;

        $r2 = new android.app.ActivityManager$TaskSnapshot$Builder;

        specialinvoke $r2.<android.app.ActivityManager$TaskSnapshot$Builder: void <init>()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: boolean prepareTaskSnapshot(com.android.server.wm.Task,int,android.app.ActivityManager$TaskSnapshot$Builder)>(r8, i0, $r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        r9 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotController: android.view.SurfaceControl$ScreenshotGraphicBuffer createTaskSnapshot(com.android.server.wm.Task,android.app.ActivityManager$TaskSnapshot$Builder)>(r8, $r2);

        if r9 != null goto label2;

        return null;

     label2:
        $r3 = virtualinvoke r9.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        virtualinvoke $r2.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setSnapshot(android.graphics.GraphicBuffer)>($r3);

        $r5 = virtualinvoke r9.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()>();

        virtualinvoke $r2.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot$Builder setColorSpace(android.graphics.ColorSpace)>($r5);

        $r7 = virtualinvoke $r2.<android.app.ActivityManager$TaskSnapshot$Builder: android.app.ActivityManager$TaskSnapshot build()>();

        return $r7;
    }

    void snapshotTasks(android.util.ArraySet)
    {
        com.android.server.wm.TaskSnapshotController r0;
        android.util.ArraySet r1;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        r1 := @parameter0: android.util.ArraySet;

        specialinvoke r0.<com.android.server.wm.TaskSnapshotController: void snapshotTasks(android.util.ArraySet,boolean)>(r1, 0);

        return;
    }

    void systemReady()
    {
        com.android.server.wm.TaskSnapshotController r0;
        com.android.server.wm.TaskSnapshotPersister $r1;

        r0 := @this: com.android.server.wm.TaskSnapshotController;

        $r1 = r0.<com.android.server.wm.TaskSnapshotController: com.android.server.wm.TaskSnapshotPersister mPersister>;

        virtualinvoke $r1.<com.android.server.wm.TaskSnapshotPersister: void start()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.TaskSnapshotController: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.TaskSnapshotController: int SNAPSHOT_MODE_REAL> = 0;

        <com.android.server.wm.TaskSnapshotController: int SNAPSHOT_MODE_NONE> = 2;

        <com.android.server.wm.TaskSnapshotController: int SNAPSHOT_MODE_APP_THEME> = 1;

        return;
    }
}
