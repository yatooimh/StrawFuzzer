abstract class com.android.server.wm.TaskSnapshotPersister$WriteQueueItem extends java.lang.Object
{
    final com.android.server.wm.TaskSnapshotPersister this$0;

    private void <init>(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister$WriteQueueItem r0;
        com.android.server.wm.TaskSnapshotPersister r1;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister$WriteQueueItem;

        r1 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        r0.<com.android.server.wm.TaskSnapshotPersister$WriteQueueItem: com.android.server.wm.TaskSnapshotPersister this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(com.android.server.wm.TaskSnapshotPersister, com.android.server.wm.TaskSnapshotPersister$1)
    {
        com.android.server.wm.TaskSnapshotPersister$WriteQueueItem r0;
        com.android.server.wm.TaskSnapshotPersister r1;
        com.android.server.wm.TaskSnapshotPersister$1 r2;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister$WriteQueueItem;

        r1 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        r2 := @parameter1: com.android.server.wm.TaskSnapshotPersister$1;

        specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister$WriteQueueItem: void <init>(com.android.server.wm.TaskSnapshotPersister)>(r1);

        return;
    }

    boolean isReady()
    {
        com.android.server.wm.TaskSnapshotPersister$WriteQueueItem r0;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister$WriteQueueItem;

        return 1;
    }

    void onDequeuedLocked()
    {
        com.android.server.wm.TaskSnapshotPersister$WriteQueueItem r0;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister$WriteQueueItem;

        return;
    }

    void onQueuedLocked()
    {
        com.android.server.wm.TaskSnapshotPersister$WriteQueueItem r0;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister$WriteQueueItem;

        return;
    }

    abstract void write();
}
