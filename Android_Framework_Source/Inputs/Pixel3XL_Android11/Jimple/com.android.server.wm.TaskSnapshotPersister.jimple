class com.android.server.wm.TaskSnapshotPersister extends java.lang.Object
{
    private static final java.lang.String BITMAP_EXTENSION;
    private static final long DELAY_MS;
    private static final java.lang.String LOW_RES_FILE_POSTFIX;
    private static final int MAX_STORE_QUEUE_DEPTH;
    private static final java.lang.String PROTO_EXTENSION;
    private static final int QUALITY;
    private static final java.lang.String SNAPSHOTS_DIRNAME;
    private static final java.lang.String TAG;
    private final com.android.server.wm.TaskSnapshotPersister$DirectoryResolver mDirectoryResolver;
    private boolean mEnableLowResSnapshots;
    private final java.lang.Object mLock;
    private final float mLowResScaleFactor;
    private boolean mPaused;
    private final android.util.ArraySet mPersistedTaskIdsSinceLastRemoveObsolete;
    private java.lang.Thread mPersister;
    private boolean mQueueIdling;
    private boolean mStarted;
    private final java.util.ArrayDeque mStoreQueueItems;
    private final boolean mUse16BitFormat;
    private final android.os.UserManagerInternal mUserManagerInternal;
    private final java.util.ArrayDeque mWriteQueue;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.TaskSnapshotPersister$DirectoryResolver)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.TaskSnapshotPersister$DirectoryResolver r2;
        float f0, f1, $f2;
        java.util.ArrayDeque $r3, $r4;
        java.lang.Object $r5, $r8;
        android.util.ArraySet $r6;
        com.android.server.wm.TaskSnapshotPersister$1 $r7;
        android.os.UserManagerInternal $r9;
        android.content.Context $r10, $r12, $r17;
        android.content.res.Resources $r11, $r13, $r18;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        java.lang.RuntimeException $r14, $r15, $r16;
        boolean $z0;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.TaskSnapshotPersister$DirectoryResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mWriteQueue> = $r3;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mStoreQueueItems> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock> = $r5;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.TaskSnapshotPersister: android.util.ArraySet mPersistedTaskIdsSinceLastRemoveObsolete> = $r6;

        $r7 = new com.android.server.wm.TaskSnapshotPersister$1;

        specialinvoke $r7.<com.android.server.wm.TaskSnapshotPersister$1: void <init>(com.android.server.wm.TaskSnapshotPersister,java.lang.String)>(r0, "TaskSnapshotPersister");

        r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Thread mPersister> = $r7;

        r0.<com.android.server.wm.TaskSnapshotPersister: com.android.server.wm.TaskSnapshotPersister$DirectoryResolver mDirectoryResolver> = r2;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r9 = (android.os.UserManagerInternal) $r8;

        r0.<com.android.server.wm.TaskSnapshotPersister: android.os.UserManagerInternal mUserManagerInternal> = $r9;

        $r10 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        f0 = virtualinvoke $r11.<android.content.res.Resources: float getFloat(int)>(17105060);

        $r12 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        f1 = virtualinvoke $r13.<android.content.res.Resources: float getFloat(int)>(17105063);

        $b0 = f1 cmpg 0.0F;

        if $b0 < 0 goto label5;

        $b1 = 1.0F cmpg f1;

        if $b1 <= 0 goto label5;

        $b2 = f0 cmpg 0.0F;

        if $b2 <= 0 goto label4;

        $b3 = 1.0F cmpg f0;

        if $b3 < 0 goto label4;

        $b4 = f0 cmpg f1;

        if $b4 <= 0 goto label3;

        $b5 = f1 cmpl 0.0F;

        if $b5 <= 0 goto label1;

        $f2 = f1 / f0;

        r0.<com.android.server.wm.TaskSnapshotPersister: float mLowResScaleFactor> = $f2;

        r0.<com.android.server.wm.TaskSnapshotPersister: boolean mEnableLowResSnapshots> = 1;

        goto label2;

     label1:
        r0.<com.android.server.wm.TaskSnapshotPersister: float mLowResScaleFactor> = 0.0F;

        r0.<com.android.server.wm.TaskSnapshotPersister: boolean mEnableLowResSnapshots> = 0;

     label2:
        $r17 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r18.<android.content.res.Resources: boolean getBoolean(int)>(17891566);

        r0.<com.android.server.wm.TaskSnapshotPersister: boolean mUse16BitFormat> = $z0;

        return;

     label3:
        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("High-res scale must be greater than low-res scale");

        throw $r16;

     label4:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("High-res scale must be between 0 and 1");

        throw $r15;

     label5:
        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Low-res scale must be between 0 and 1");

        throw $r14;
    }

    static java.lang.Object access$100(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        return $r1;
    }

    static void access$1000(com.android.server.wm.TaskSnapshotPersister, int, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: void deleteSnapshot(int,int)>(i0, i1);

        return;
    }

    static boolean access$1100(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $z0 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mEnableLowResSnapshots>;

        return $z0;
    }

    static float access$1200(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        float $f0;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $f0 = r0.<com.android.server.wm.TaskSnapshotPersister: float mLowResScaleFactor>;

        return $f0;
    }

    static android.util.ArraySet access$1300(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $r1 = r0.<com.android.server.wm.TaskSnapshotPersister: android.util.ArraySet mPersistedTaskIdsSinceLastRemoveObsolete>;

        return $r1;
    }

    static boolean access$200(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $z0 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mPaused>;

        return $z0;
    }

    static java.util.ArrayDeque access$300(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        java.util.ArrayDeque $r1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mWriteQueue>;

        return $r1;
    }

    static boolean access$402(com.android.server.wm.TaskSnapshotPersister, boolean)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.TaskSnapshotPersister: boolean mQueueIdling> = z0;

        return z0;
    }

    static java.util.ArrayDeque access$600(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        java.util.ArrayDeque $r1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mStoreQueueItems>;

        return $r1;
    }

    static android.os.UserManagerInternal access$700(com.android.server.wm.TaskSnapshotPersister)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        android.os.UserManagerInternal $r1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        $r1 = r0.<com.android.server.wm.TaskSnapshotPersister: android.os.UserManagerInternal mUserManagerInternal>;

        return $r1;
    }

    static boolean access$800(com.android.server.wm.TaskSnapshotPersister, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: boolean createDirectory(int)>(i0);

        return $z0;
    }

    static java.io.File access$900(com.android.server.wm.TaskSnapshotPersister, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getDirectory(int)>(i0);

        return $r1;
    }

    private boolean createDirectory(int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0;
        java.io.File r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getDirectory(int)>(i0);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<java.io.File: boolean mkdir()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private void deleteSnapshot(int, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;
        java.io.File r1, r2, r3;
        boolean $z1, $z2;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getProtoFile(int,int)>(i0, i1);

        r1 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getLowResolutionBitmapFile(int,int)>(i0, i1);

        virtualinvoke r2.<java.io.File: boolean delete()>();

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label1:
        r3 = virtualinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getHighResolutionBitmapFile(int,int)>(i0, i1);

        $z2 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label2;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label2:
        return;
    }

    private void ensureStoreQueueDepthLocked()
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem r1;
        java.util.ArrayDeque $r3, $r4, $r6;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

     label1:
        $r3 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mStoreQueueItems>;

        $i0 = virtualinvoke $r3.<java.util.ArrayDeque: int size()>();

        if $i0 <= 2 goto label2;

        $r4 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mStoreQueueItems>;

        $r5 = virtualinvoke $r4.<java.util.ArrayDeque: java.lang.Object poll()>();

        r1 = (com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem) $r5;

        $r6 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mWriteQueue>;

        virtualinvoke $r6.<java.util.ArrayDeque: boolean remove(java.lang.Object)>(r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Queue is too deep! Purged item with taskid=");

        $i1 = staticinvoke <com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem: int access$000(com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r10);

        goto label1;

     label2:
        return;
    }

    private java.io.File getDirectory(int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0;
        java.io.File $r1, $r3;
        com.android.server.wm.TaskSnapshotPersister$DirectoryResolver $r2;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.wm.TaskSnapshotPersister: com.android.server.wm.TaskSnapshotPersister$DirectoryResolver mDirectoryResolver>;

        $r3 = interfaceinvoke $r2.<com.android.server.wm.TaskSnapshotPersister$DirectoryResolver: java.io.File getSystemDirectoryForUser(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "snapshots");

        return $r1;
    }

    private void sendToQueueLocked(com.android.server.wm.TaskSnapshotPersister$WriteQueueItem)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        com.android.server.wm.TaskSnapshotPersister$WriteQueueItem r1;
        java.util.ArrayDeque $r2;
        boolean $z1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        r1 := @parameter0: com.android.server.wm.TaskSnapshotPersister$WriteQueueItem;

        $r2 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mWriteQueue>;

        virtualinvoke $r2.<java.util.ArrayDeque: boolean offer(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.server.wm.TaskSnapshotPersister$WriteQueueItem: void onQueuedLocked()>();

        specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: void ensureStoreQueueDepthLocked()>();

        $z1 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mPaused>;

        if $z1 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

     label1:
        return;
    }

    boolean enableLowResSnapshots()
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        $z0 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mEnableLowResSnapshots>;

        return $z0;
    }

    java.io.File getHighResolutionBitmapFile(int, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;
        java.io.File r1, $r6;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getDirectory(int)>(i1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r6 = new java.io.File;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r7);

        return $r6;
    }

    java.io.File getLowResolutionBitmapFile(int, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;
        java.io.File r1, $r7;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getDirectory(int)>(i1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_reduced");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpg");

        $r7 = new java.io.File;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r8);

        return $r7;
    }

    java.io.File getProtoFile(int, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;
        java.io.File r1, $r6;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: java.io.File getDirectory(int)>(i1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".proto");

        $r6 = new java.io.File;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r7);

        return $r6;
    }

    void onTaskRemovedFromRecents(int, int)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;
        java.lang.Object r1;
        android.util.ArraySet $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.TaskSnapshotPersister$DeleteWriteQueueItem r5;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.wm.TaskSnapshotPersister: android.util.ArraySet mPersistedTaskIdsSinceLastRemoveObsolete>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>($r3);

        r5 = new com.android.server.wm.TaskSnapshotPersister$DeleteWriteQueueItem;

        specialinvoke r5.<com.android.server.wm.TaskSnapshotPersister$DeleteWriteQueueItem: void <init>(com.android.server.wm.TaskSnapshotPersister,int,int)>(r0, i0, i1);

        specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: void sendToQueueLocked(com.android.server.wm.TaskSnapshotPersister$WriteQueueItem)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void persistSnapshot(int, int, android.app.ActivityManager$TaskSnapshot)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem r2;
        android.util.ArraySet $r3;
        java.lang.Integer $r4;
        java.lang.Throwable $r5;
        android.app.ActivityManager$TaskSnapshot r6;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: android.app.ActivityManager$TaskSnapshot;

        r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.wm.TaskSnapshotPersister: android.util.ArraySet mPersistedTaskIdsSinceLastRemoveObsolete>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        r2 = new com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem;

        specialinvoke r2.<com.android.server.wm.TaskSnapshotPersister$StoreWriteQueueItem: void <init>(com.android.server.wm.TaskSnapshotPersister,int,int,android.app.ActivityManager$TaskSnapshot)>(r0, i0, i1, r6);

        specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: void sendToQueueLocked(com.android.server.wm.TaskSnapshotPersister$WriteQueueItem)>(r2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void removeObsoleteFiles(android.util.ArraySet, int[])
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        int[] r1;
        java.lang.Object r2;
        com.android.server.wm.TaskSnapshotPersister$RemoveObsoleteFilesQueueItem r3;
        android.util.ArraySet $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        r6 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: int[];

        r2 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.wm.TaskSnapshotPersister: android.util.ArraySet mPersistedTaskIdsSinceLastRemoveObsolete>;

        virtualinvoke $r4.<android.util.ArraySet: void clear()>();

        r3 = new com.android.server.wm.TaskSnapshotPersister$RemoveObsoleteFilesQueueItem;

        specialinvoke r3.<com.android.server.wm.TaskSnapshotPersister$RemoveObsoleteFilesQueueItem: void <init>(com.android.server.wm.TaskSnapshotPersister,android.util.ArraySet,int[])>(r0, r6, r1);

        specialinvoke r0.<com.android.server.wm.TaskSnapshotPersister: void sendToQueueLocked(com.android.server.wm.TaskSnapshotPersister$WriteQueueItem)>(r3);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setPaused(boolean)
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.wm.TaskSnapshotPersister: boolean mPaused> = z0;

     label2:
        if z0 != 0 goto label4;

     label3:
        $r3 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void start()
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        $z0 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mStarted>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.TaskSnapshotPersister: boolean mStarted> = 1;

        $r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Thread mPersister>;

        virtualinvoke $r1.<java.lang.Thread: void start()>();

     label1:
        return;
    }

    boolean use16BitFormat()
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

        $z0 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mUse16BitFormat>;

        return $z0;
    }

    void waitForQueueEmpty()
    {
        com.android.server.wm.TaskSnapshotPersister r0;
        java.lang.Object r1;
        java.util.ArrayDeque $r3;
        boolean $z0, $z1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.TaskSnapshotPersister;

     label1:
        r1 = r0.<com.android.server.wm.TaskSnapshotPersister: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.wm.TaskSnapshotPersister: java.util.ArrayDeque mWriteQueue>;

        $z0 = virtualinvoke $r3.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $z1 = r0.<com.android.server.wm.TaskSnapshotPersister: boolean mQueueIdling>;

        if $z1 == 0 goto label4;

        exitmonitor r1;

     label3:
        return;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <android.os.SystemClock: void sleep(long)>(100L);

        goto label1;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.TaskSnapshotPersister: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.TaskSnapshotPersister: java.lang.String SNAPSHOTS_DIRNAME> = "snapshots";

        <com.android.server.wm.TaskSnapshotPersister: int QUALITY> = 95;

        <com.android.server.wm.TaskSnapshotPersister: java.lang.String PROTO_EXTENSION> = ".proto";

        <com.android.server.wm.TaskSnapshotPersister: int MAX_STORE_QUEUE_DEPTH> = 2;

        <com.android.server.wm.TaskSnapshotPersister: java.lang.String LOW_RES_FILE_POSTFIX> = "_reduced";

        <com.android.server.wm.TaskSnapshotPersister: long DELAY_MS> = 100L;

        <com.android.server.wm.TaskSnapshotPersister: java.lang.String BITMAP_EXTENSION> = ".jpg";

        return;
    }
}
