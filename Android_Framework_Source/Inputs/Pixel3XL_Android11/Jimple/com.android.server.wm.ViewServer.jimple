class com.android.server.wm.ViewServer extends java.lang.Object implements java.lang.Runnable
{
    private static final java.lang.String COMMAND_PROTOCOL_VERSION;
    private static final java.lang.String COMMAND_SERVER_VERSION;
    private static final java.lang.String COMMAND_WINDOW_MANAGER_AUTOLIST;
    private static final java.lang.String COMMAND_WINDOW_MANAGER_GET_FOCUS;
    private static final java.lang.String COMMAND_WINDOW_MANAGER_LIST;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String VALUE_PROTOCOL_VERSION;
    private static final java.lang.String VALUE_SERVER_VERSION;
    public static final int VIEW_SERVER_DEFAULT_PORT;
    private static final int VIEW_SERVER_MAX_CONNECTIONS;
    private final int mPort;
    private java.net.ServerSocket mServer;
    private java.lang.Thread mThread;
    private java.util.concurrent.ExecutorService mThreadPool;
    private final com.android.server.wm.WindowManagerService mWindowManager;

    void <init>(com.android.server.wm.WindowManagerService, int)
    {
        com.android.server.wm.ViewServer r0;
        com.android.server.wm.WindowManagerService r1;
        int i0;

        r0 := @this: com.android.server.wm.ViewServer;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.ViewServer: com.android.server.wm.WindowManagerService mWindowManager> = r1;

        r0.<com.android.server.wm.ViewServer: int mPort> = i0;

        return;
    }

    static boolean access$000(java.net.Socket, java.lang.String)
    {
        java.net.Socket r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.wm.ViewServer: boolean writeValue(java.net.Socket,java.lang.String)>(r0, r1);

        return $z0;
    }

    static com.android.server.wm.WindowManagerService access$100(com.android.server.wm.ViewServer)
    {
        com.android.server.wm.ViewServer r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @parameter0: com.android.server.wm.ViewServer;

        $r1 = r0.<com.android.server.wm.ViewServer: com.android.server.wm.WindowManagerService mWindowManager>;

        return $r1;
    }

    private static boolean writeValue(java.net.Socket, java.lang.String)
    {
        java.io.OutputStream r0;
        java.io.OutputStreamWriter r1;
        java.lang.Exception $r2;
        java.lang.Throwable $r3, $r4, $r5;
        java.net.Socket r6;
        java.lang.String r7;
        java.io.BufferedWriter r8, r9, r10;
        boolean z0;

        r6 := @parameter0: java.net.Socket;

        r7 := @parameter1: java.lang.String;

        r8 = null;

        r9 = null;

     label01:
        r0 = virtualinvoke r6.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label02:
        r8 = null;

        r9 = null;

     label03:
        r10 = new java.io.BufferedWriter;

     label04:
        r8 = null;

        r9 = null;

     label05:
        r1 = new java.io.OutputStreamWriter;

     label06:
        r8 = null;

        r9 = null;

     label07:
        specialinvoke r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r0);

     label08:
        r8 = null;

        r9 = null;

     label09:
        specialinvoke r10.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r1, 8192);

     label10:
        r8 = r10;

        r9 = r10;

     label11:
        virtualinvoke r10.<java.io.BufferedWriter: void write(java.lang.String)>(r7);

     label12:
        r8 = r10;

        r9 = r10;

     label13:
        virtualinvoke r10.<java.io.BufferedWriter: void write(java.lang.String)>("\n");

     label14:
        r8 = r10;

        r9 = r10;

     label15:
        virtualinvoke r10.<java.io.BufferedWriter: void flush()>();

     label16:
        z0 = 1;

     label17:
        virtualinvoke r10.<java.io.BufferedWriter: void close()>();

     label18:
        goto label28;

     label19:
        $r5 := @caughtexception;

        if r8 == null goto label23;

     label20:
        virtualinvoke r8.<java.io.BufferedWriter: void close()>();

     label21:
        goto label23;

     label22:
        $r4 := @caughtexception;

     label23:
        throw $r5;

     label24:
        $r2 := @caughtexception;

        z0 = 0;

        if r9 == null goto label28;

     label25:
        virtualinvoke r9.<java.io.BufferedWriter: void close()>();

     label26:
        z0 = 0;

        goto label28;

     label27:
        $r3 := @caughtexception;

        z0 = 0;

     label28:
        return z0;

        catch java.lang.Exception from label01 to label02 with label24;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Exception from label03 to label04 with label24;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Exception from label05 to label06 with label24;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Exception from label07 to label08 with label24;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Exception from label09 to label10 with label24;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Exception from label11 to label12 with label24;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Exception from label13 to label14 with label24;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Exception from label15 to label16 with label24;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.io.IOException from label17 to label18 with label27;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.io.IOException from label25 to label26 with label27;
    }

    boolean isRunning()
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Thread r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.ViewServer;

        r1 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void run()
    {
        com.android.server.wm.ViewServer r0;
        java.net.Socket r1;
        java.lang.Thread $r3, $r4;
        java.net.ServerSocket $r5;
        java.util.concurrent.ExecutorService $r6, r10;
        java.lang.Exception $r8;
        java.lang.Throwable $r9;
        com.android.server.wm.ViewServer$ViewServerWorker r13;
        java.io.IOException r14;

        r0 := @this: com.android.server.wm.ViewServer;

     label01:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if $r3 != $r4 goto label11;

     label02:
        $r5 = r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer>;

        r1 = virtualinvoke $r5.<java.net.ServerSocket: java.net.Socket accept()>();

        $r6 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        if $r6 == null goto label04;

        r10 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        r13 = new com.android.server.wm.ViewServer$ViewServerWorker;

        specialinvoke r13.<com.android.server.wm.ViewServer$ViewServerWorker: void <init>(com.android.server.wm.ViewServer,java.net.Socket)>(r0, r1);

        interfaceinvoke r10.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r13);

     label03:
        goto label10;

     label04:
        virtualinvoke r1.<java.net.Socket: void close()>();

     label05:
        goto label10;

     label06:
        $r9 := @caughtexception;

     label07:
        r14 = (java.io.IOException) $r9;

        virtualinvoke r14.<java.io.IOException: void printStackTrace()>();

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Connection error: ", $r8);

     label10:
        goto label01;

     label11:
        return;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    boolean start() throws java.io.IOException
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Thread $r2, $r9, $r12;
        java.net.ServerSocket $r3;
        int $i0, $i1;
        java.net.InetAddress $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r10;
        java.util.concurrent.ExecutorService $r11;

        r0 := @this: com.android.server.wm.ViewServer;

        $r2 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if $r2 == null goto label1;

        return 0;

     label1:
        $r3 = new java.net.ServerSocket;

        $i0 = r0.<com.android.server.wm.ViewServer: int mPort>;

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        specialinvoke $r3.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>($i0, 10, $r4);

        r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer> = $r3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote View Server [port=");

        $i1 = r0.<com.android.server.wm.ViewServer: int mPort>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = new java.lang.Thread;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r0, $r10);

        r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread> = $r9;

        $r11 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10);

        r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool> = $r11;

        $r12 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        virtualinvoke $r12.<java.lang.Thread: void start()>();

        return 1;
    }

    boolean stop()
    {
        com.android.server.wm.ViewServer r0;
        java.lang.Throwable $r2, $r3;
        java.lang.Thread r4;
        java.util.concurrent.ExecutorService r5;
        java.net.ServerSocket $r7;

        r0 := @this: com.android.server.wm.ViewServer;

        r4 = r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread>;

        if r4 == null goto label8;

        virtualinvoke r4.<java.lang.Thread: void interrupt()>();

        r5 = r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool>;

        if r5 == null goto label4;

     label1:
        interfaceinvoke r5.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Could not stop all view server threads");

     label4:
        r0.<com.android.server.wm.ViewServer: java.util.concurrent.ExecutorService mThreadPool> = null;

        r0.<com.android.server.wm.ViewServer: java.lang.Thread mThread> = null;

     label5:
        $r7 = r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer>;

        virtualinvoke $r7.<java.net.ServerSocket: void close()>();

        r0.<com.android.server.wm.ViewServer: java.net.ServerSocket mServer> = null;

     label6:
        return 1;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Could not close the view server");

     label8:
        return 0;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.ViewServer: int VIEW_SERVER_MAX_CONNECTIONS> = 10;

        <com.android.server.wm.ViewServer: int VIEW_SERVER_DEFAULT_PORT> = 4939;

        <com.android.server.wm.ViewServer: java.lang.String VALUE_SERVER_VERSION> = "4";

        <com.android.server.wm.ViewServer: java.lang.String VALUE_PROTOCOL_VERSION> = "4";

        <com.android.server.wm.ViewServer: java.lang.String LOG_TAG> = "WindowManager";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_WINDOW_MANAGER_LIST> = "LIST";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_WINDOW_MANAGER_GET_FOCUS> = "GET_FOCUS";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_WINDOW_MANAGER_AUTOLIST> = "AUTOLIST";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_SERVER_VERSION> = "SERVER";

        <com.android.server.wm.ViewServer: java.lang.String COMMAND_PROTOCOL_VERSION> = "PROTOCOL";

        return;
    }
}
