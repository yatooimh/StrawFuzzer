class com.android.server.wm.WallpaperController extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int WALLPAPER_DRAW_NORMAL;
    private static final int WALLPAPER_DRAW_PENDING;
    private static final long WALLPAPER_DRAW_PENDING_TIMEOUT_DURATION;
    private static final int WALLPAPER_DRAW_TIMEOUT;
    private static final long WALLPAPER_TIMEOUT;
    private static final long WALLPAPER_TIMEOUT_RECOVERY;
    private java.util.function.Consumer mComputeMaxZoomOutFunction;
    com.android.server.wm.WindowState mDeferredHideWallpaper;
    private final com.android.server.wm.DisplayContent mDisplayContent;
    private final com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults;
    private final com.android.internal.util.ToBooleanFunction mFindWallpaperTargetFunction;
    private int mLastWallpaperDisplayOffsetX;
    private int mLastWallpaperDisplayOffsetY;
    private long mLastWallpaperTimeoutTime;
    private float mLastWallpaperX;
    private float mLastWallpaperXStep;
    private float mLastWallpaperY;
    private float mLastWallpaperYStep;
    private float mLastWallpaperZoomOut;
    private final float mMaxWallpaperScale;
    private com.android.server.wm.WindowState mPrevWallpaperTarget;
    private com.android.server.wm.WindowManagerService mService;
    private boolean mShouldUpdateZoom;
    private com.android.server.wm.WindowState mTmpTopWallpaper;
    private com.android.server.wm.WindowState mWaitingOnWallpaper;
    private int mWallpaperDrawState;
    private com.android.server.wm.WindowState mWallpaperTarget;
    private final java.util.ArrayList mWallpaperTokens;

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.DisplayContent r2;
        java.util.ArrayList $r3;
        com.android.server.wm.WallpaperController$FindWallpaperTargetResult $r4;
        com.android.server.wm._$$Lambda$WallpaperController$6pruPGLeSJAwNl9vGfC87eso21w $r5;
        com.android.server.wm._$$Lambda$WallpaperController$0Scukj2yhz26p26xa_96t0qdaCE $r6;
        android.content.Context $r7;
        android.content.res.Resources $r8;
        float $f0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.DisplayContent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens> = $r3;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget> = null;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget> = null;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperX> = -1.0F;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperY> = -1.0F;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperXStep> = -1.0F;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperYStep> = -1.0F;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperZoomOut> = 0.0F;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX> = -2147483648;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY> = -2147483648;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper> = null;

        r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState> = 0;

        $r4 = new com.android.server.wm.WallpaperController$FindWallpaperTargetResult;

        specialinvoke $r4.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void <init>(com.android.server.wm.WallpaperController$1)>(null);

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults> = $r4;

        $r5 = new com.android.server.wm._$$Lambda$WallpaperController$6pruPGLeSJAwNl9vGfC87eso21w;

        specialinvoke $r5.<com.android.server.wm._$$Lambda$WallpaperController$6pruPGLeSJAwNl9vGfC87eso21w: void <init>(com.android.server.wm.WallpaperController)>(r0);

        r0.<com.android.server.wm.WallpaperController: com.android.internal.util.ToBooleanFunction mFindWallpaperTargetFunction> = $r5;

        $r6 = new com.android.server.wm._$$Lambda$WallpaperController$0Scukj2yhz26p26xa_96t0qdaCE;

        specialinvoke $r6.<com.android.server.wm._$$Lambda$WallpaperController$0Scukj2yhz26p26xa_96t0qdaCE: void <init>(com.android.server.wm.WallpaperController)>(r0);

        r0.<com.android.server.wm.WallpaperController: java.util.function.Consumer mComputeMaxZoomOutFunction> = $r6;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService> = r1;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent> = r2;

        $r7 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r8.<android.content.res.Resources: float getFloat(int)>(17105096);

        r0.<com.android.server.wm.WallpaperController: float mMaxWallpaperScale> = $f0;

        return;
    }

    private boolean canScreenshotWallpaper(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.policy.WindowManagerPolicy $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: boolean isScreenOn()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        return 1;
    }

    private void computeLastWallpaperZoomOut()
    {
        com.android.server.wm.WallpaperController r0;
        boolean $z0;
        java.util.function.Consumer $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WallpaperController;

        $z0 = r0.<com.android.server.wm.WallpaperController: boolean mShouldUpdateZoom>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperZoomOut> = 0.0F;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r1 = r0.<com.android.server.wm.WallpaperController: java.util.function.Consumer mComputeMaxZoomOutFunction>;

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void forAllWindows(java.util.function.Consumer,boolean)>($r1, 1);

        r0.<com.android.server.wm.WallpaperController: boolean mShouldUpdateZoom> = 0;

     label1:
        return;
    }

    private void findWallpaperTarget()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WallpaperController$FindWallpaperTargetResult r1, $r2, $r7, $r9, $r11;
        com.android.server.wm.DisplayContent $r3, $r6;
        com.android.server.wm.TaskDisplayArea $r4;
        boolean $z0, $z2;
        com.android.internal.util.ToBooleanFunction $r5;
        com.android.server.wm.WindowState $r8, $r10;

        r0 := @this: com.android.server.wm.WallpaperController;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r2.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void reset()>();

        $r3 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $z0 = virtualinvoke $r4.<com.android.server.wm.TaskDisplayArea: boolean isStackVisible(int)>(5);

        if $z0 == 0 goto label1;

        $r11 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r11.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setUseTopWallpaperAsTarget(boolean)>(1);

     label1:
        $r6 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r5 = r0.<com.android.server.wm.WallpaperController: com.android.internal.util.ToBooleanFunction mFindWallpaperTargetFunction>;

        virtualinvoke $r6.<com.android.server.wm.DisplayContent: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>($r5, 1);

        $r7 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $r8 = $r7.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: com.android.server.wm.WindowState wallpaperTarget>;

        if $r8 != null goto label2;

        $r9 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $z2 = $r9.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: boolean useTopWallpaperAsTarget>;

        if $z2 == 0 goto label2;

        r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $r10 = r1.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: com.android.server.wm.WindowState topWallpaper>;

        virtualinvoke r1.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setWallpaperTarget(com.android.server.wm.WindowState)>($r10);

     label2:
        return;
    }

    private com.android.server.wm.WindowState getTopVisibleWallpaper()
    {
        com.android.server.wm.WallpaperController r0;
        java.util.ArrayList $r1, $r3;
        int $i0, i1;
        com.android.server.wm.WindowState $r2;
        java.lang.Object $r4;
        com.android.server.wm._$$Lambda$WallpaperController$_ZznVu8nX_g34s30xj77tgadyZA $r5;
        com.android.server.wm.WallpaperWindowToken $r6;

        r0 := @this: com.android.server.wm.WallpaperController;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mTmpTopWallpaper> = null;

        $r1 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WallpaperWindowToken) $r4;

        $r5 = new com.android.server.wm._$$Lambda$WallpaperController$_ZznVu8nX_g34s30xj77tgadyZA;

        specialinvoke $r5.<com.android.server.wm._$$Lambda$WallpaperController$_ZznVu8nX_g34s30xj77tgadyZA: void <init>(com.android.server.wm.WallpaperController)>(r0);

        virtualinvoke $r6.<com.android.server.wm.WallpaperWindowToken: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>($r5, 1);

        i1 = i1 + -1;

        goto label1;

     label2:
        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mTmpTopWallpaper>;

        return $r2;
    }

    private boolean isFullscreen(android.view.WindowManager$LayoutParams)
    {
        com.android.server.wm.WallpaperController r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int x>;

        if $i0 != 0 goto label1;

        $i1 = r1.<android.view.WindowManager$LayoutParams: int y>;

        if $i1 != 0 goto label1;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int width>;

        if $i2 != -1 goto label1;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int height>;

        if $i3 != -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isWallpaperVisible(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        if r1 != null goto label2;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        if $r2 == null goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    static boolean lambda$updateWallpaperWindowsTarget$2(com.android.server.wm.WindowState, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0, r1;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: com.android.server.wm.WindowState;

        if r1 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void updateWallpaperOffsetLocked(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, r2;
        boolean z0;
        java.util.ArrayList $r3, $r6;
        java.lang.Object $r4;
        com.android.server.wm.WallpaperWindowToken $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        byte $b0, $b1, $b2, $b5, $b6, $b11, $b14, $b15;
        int $i3, $i4, $i7, $i8, $i9, $i10, $i12, $i13, $i16, i17;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r2 == null goto label12;

        $f0 = r2.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 < 0 goto label01;

        $f12 = r2.<com.android.server.wm.WindowState: float mWallpaperX>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperX> = $f12;

        goto label02;

     label01:
        $f1 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b1 = $f1 cmpl 0.0F;

        if $b1 < 0 goto label02;

        $f11 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperX> = $f11;

     label02:
        $f13 = r2.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b11 = $f13 cmpl 0.0F;

        if $b11 < 0 goto label03;

        $f10 = r2.<com.android.server.wm.WindowState: float mWallpaperY>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperY> = $f10;

        goto label04;

     label03:
        $f2 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b2 = $f2 cmpl 0.0F;

        if $b2 < 0 goto label04;

        $f9 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperY> = $f9;

     label04:
        specialinvoke r0.<com.android.server.wm.WallpaperController: void computeLastWallpaperZoomOut()>();

        $i12 = r2.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i12 == -2147483648 goto label05;

        $i10 = r2.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX> = $i10;

        goto label06;

     label05:
        $i3 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i3 == -2147483648 goto label06;

        $i9 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX> = $i9;

     label06:
        $i13 = r2.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i13 == -2147483648 goto label07;

        $i8 = r2.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY> = $i8;

        goto label08;

     label07:
        $i4 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i4 == -2147483648 goto label08;

        $i7 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY> = $i7;

     label08:
        $f14 = r2.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        $b14 = $f14 cmpl 0.0F;

        if $b14 < 0 goto label09;

        $f8 = r2.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperXStep> = $f8;

        goto label10;

     label09:
        $f3 = r1.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        $b5 = $f3 cmpl 0.0F;

        if $b5 < 0 goto label10;

        $f7 = r1.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperXStep> = $f7;

     label10:
        $f15 = r2.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        $b15 = $f15 cmpl 0.0F;

        if $b15 < 0 goto label11;

        $f6 = r2.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperYStep> = $f6;

        goto label12;

     label11:
        $f4 = r1.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        $b6 = $f4 cmpl 0.0F;

        if $b6 < 0 goto label12;

        $f5 = r1.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperYStep> = $f5;

     label12:
        $r6 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i16 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i17 = $i16 - 1;

     label13:
        if i17 < 0 goto label14;

        $r3 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        $r5 = (com.android.server.wm.WallpaperWindowToken) $r4;

        virtualinvoke $r5.<com.android.server.wm.WallpaperWindowToken: void updateWallpaperOffset(boolean)>(z0);

        i17 = i17 + -1;

        goto label13;

     label14:
        return;
    }

    private void updateWallpaperTokens(boolean)
    {
        com.android.server.wm.WallpaperController r0;
        boolean z0;
        com.android.server.wm.WallpaperWindowToken r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.DisplayContent $r5;

        r0 := @this: com.android.server.wm.WallpaperController;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.WallpaperWindowToken) $r4;

        virtualinvoke r1.<com.android.server.wm.WallpaperWindowToken: void updateWallpaperWindows(boolean)>(z0);

        $r5 = virtualinvoke r1.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(0);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    private void updateWallpaperWindowsTarget(com.android.server.wm.WallpaperController$FindWallpaperTargetResult)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, r2, $r3, $r6, r19, r22;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        com.android.server.wm._$$Lambda$WallpaperController$BBasRkLKZIyG7orBtnzZo0qYk68 $r4;
        com.android.server.wm.DisplayContent $r5, $r7, $r10, $r13;
        com.android.server.wm.ActivityRecord $r8, $r11, $r14, $r16, $r17, r20, $r21;
        android.util.ArraySet $r9, $r12, $r15;
        com.android.server.wm.WallpaperController$FindWallpaperTargetResult r18;

        r0 := @this: com.android.server.wm.WallpaperController;

        r18 := @parameter0: com.android.server.wm.WallpaperController$FindWallpaperTargetResult;

        r1 = r18.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: com.android.server.wm.WindowState wallpaperTarget>;

        $r3 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r3 == r1 goto label14;

        r19 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        if r19 == null goto label01;

        if r19 != r1 goto label01;

        goto label14;

     label01:
        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget> = null;

        r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget> = r1;

        if r1 == null goto label13;

        if r2 != null goto label02;

        goto label13;

     label02:
        z0 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        $z2 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z2 == 0 goto label12;

        if z0 != 0 goto label03;

        goto label12;

     label03:
        $r5 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r4 = new com.android.server.wm._$$Lambda$WallpaperController$BBasRkLKZIyG7orBtnzZo0qYk68;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$WallpaperController$BBasRkLKZIyG7orBtnzZo0qYk68: void <init>(com.android.server.wm.WindowState)>(r2);

        $r6 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>($r4);

        if $r6 != null goto label04;

        return;

     label04:
        r20 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        z8 = 1;

        if r20 == null goto label05;

        $r17 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z7 = $r17.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z7 != 0 goto label05;

        z9 = 1;

        goto label06;

     label05:
        z9 = 0;

     label06:
        $r21 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r21 == null goto label07;

        $r16 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z6 = $r16.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z6 != 0 goto label07;

        goto label08;

     label07:
        z8 = 0;

     label08:
        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget> = r2;

        if z9 == 0 goto label09;

        if z8 != 0 goto label09;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget> = r2;

        goto label11;

     label09:
        if z9 != z8 goto label11;

        $r7 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r9 = $r7.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $r8 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z3 = virtualinvoke $r9.<android.util.ArraySet: boolean contains(java.lang.Object)>($r8);

        if $z3 != 0 goto label11;

        $r10 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r12 = $r10.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $r11 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z4 = virtualinvoke $r12.<android.util.ArraySet: boolean contains(java.lang.Object)>($r11);

        if $z4 != 0 goto label10;

        $r13 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $r15 = $r13.<com.android.server.wm.DisplayContent: android.util.ArraySet mClosingApps>;

        $r14 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z5 = virtualinvoke $r15.<android.util.ArraySet: boolean contains(java.lang.Object)>($r14);

        if $z5 == 0 goto label11;

     label10:
        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget> = r2;

     label11:
        virtualinvoke r18.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setWallpaperTarget(com.android.server.wm.WindowState)>(r1);

        return;

     label12:
        return;

     label13:
        return;

     label14:
        r22 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        if r22 != null goto label15;

        return;

     label15:
        $z1 = virtualinvoke r22.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z1 != 0 goto label16;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget> = null;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget> = r1;

     label16:
        return;
    }

    private float zoomOutToScale(float)
    {
        com.android.server.wm.WallpaperController r0;
        float f0, $f1, $f2, $f3;

        r0 := @this: com.android.server.wm.WallpaperController;

        f0 := @parameter0: float;

        $f2 = r0.<com.android.server.wm.WallpaperController: float mMaxWallpaperScale>;

        $f1 = 1.0F - f0;

        $f3 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(1.0F, $f2, $f1);

        return $f3;
    }

    void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WallpaperWindowToken r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WallpaperWindowToken;

        $r2 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    void adjustWallpaperWindows()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WallpaperController$FindWallpaperTargetResult $r1;
        com.android.server.wm.WindowState $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, r13;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        byte $b0, $b1;
        int $i2, $i3, $i4, $i5;
        boolean $z1, z2;
        com.android.server.wm.DisplayContent r12;

        r0 := @this: com.android.server.wm.WallpaperController;

        r12 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        r12.<com.android.server.wm.DisplayContent: boolean mWallpaperMayChange> = 0;

        specialinvoke r0.<com.android.server.wm.WallpaperController: void findWallpaperTarget()>();

        $r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        specialinvoke r0.<com.android.server.wm.WallpaperController: void updateWallpaperWindowsTarget(com.android.server.wm.WallpaperController$FindWallpaperTargetResult)>($r1);

        r13 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        z2 = 0;

        if r13 == null goto label1;

        z2 = 0;

        $z1 = specialinvoke r0.<com.android.server.wm.WallpaperController: boolean isWallpaperVisible(com.android.server.wm.WindowState)>(r13);

        if $z1 == 0 goto label1;

        z2 = 1;

     label1:
        if z2 == 0 goto label5;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $f0 = $r2.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 < 0 goto label2;

        $r10 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $f4 = $r10.<com.android.server.wm.WindowState: float mWallpaperX>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperX> = $f4;

        $r11 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $f5 = $r11.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperXStep> = $f5;

     label2:
        specialinvoke r0.<com.android.server.wm.WallpaperController: void computeLastWallpaperZoomOut()>();

        $r3 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $f1 = $r3.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b1 = $f1 cmpl 0.0F;

        if $b1 < 0 goto label3;

        $r8 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $f2 = $r8.<com.android.server.wm.WindowState: float mWallpaperY>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperY> = $f2;

        $r9 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $f3 = $r9.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperYStep> = $f3;

     label3:
        $r4 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $i2 = $r4.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i2 == -2147483648 goto label4;

        $r7 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $i5 = $r7.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX> = $i5;

     label4:
        $r5 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $i3 = $r5.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i3 == -2147483648 goto label5;

        $r6 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $i4 = $r6.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY> = $i4;

     label5:
        specialinvoke r0.<com.android.server.wm.WallpaperController: void updateWallpaperTokens(boolean)>(z2);

        return;
    }

    void adjustWallpaperWindowsForAppTransitionIfNeeded(android.util.ArraySet)
    {
        com.android.server.wm.WallpaperController r0;
        android.util.ArraySet r1;
        com.android.server.wm.DisplayContent $r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        com.android.server.wm.ActivityRecord $r4;
        boolean $z1, z2;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: android.util.ArraySet;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $i0 = $r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z2 = 1;

        goto label4;

     label1:
        $i2 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i3 = $i2 - 1;

     label2:
        z2 = 0;

        if i3 < 0 goto label4;

        $r3 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i3);

        $r4 = (com.android.server.wm.ActivityRecord) $r3;

        $z1 = virtualinvoke $r4.<com.android.server.wm.ActivityRecord: boolean windowsCanBeWallpaperTarget()>();

        if $z1 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        if z2 == 0 goto label5;

        virtualinvoke r0.<com.android.server.wm.WallpaperController: void adjustWallpaperWindows()>();

     label5:
        return;
    }

    boolean canScreenshotWallpaper()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        $r1 = specialinvoke r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState getTopVisibleWallpaper()>();

        $z0 = specialinvoke r0.<com.android.server.wm.WallpaperController: boolean canScreenshotWallpaper(com.android.server.wm.WindowState)>($r1);

        return $z0;
    }

    void clearLastWallpaperTimeoutTime()
    {
        com.android.server.wm.WallpaperController r0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r0.<com.android.server.wm.WallpaperController: long mLastWallpaperTimeoutTime> = 0L;

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.WallpaperController r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        com.android.server.wm.DisplayContent $r3;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.wm.WindowState $r4, $r5, $r6;
        float $f0, $f1;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("displayId=");

        $r3 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.DisplayContent mDisplayContent>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mWallpaperTarget=");

        $r4 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r4);

        $r5 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        if $r5 == null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPrevWallpaperTarget=");

        $r6 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r6);

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mLastWallpaperX=");

        $f0 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperX>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastWallpaperY=");

        $f1 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperY>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f1);

        $i1 = r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX>;

        if $i1 != -2147483648 goto label2;

        $i4 = r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY>;

        if $i4 == -2147483648 goto label3;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mLastWallpaperDisplayOffsetX=");

        $i2 = r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastWallpaperDisplayOffsetY=");

        $i3 = r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i3);

     label3:
        return;
    }

    com.android.server.wm.WindowState getWallpaperTarget()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState $r1;

        r0 := @this: com.android.server.wm.WallpaperController;

        $r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        return $r1;
    }

    void hideDeferredWallpapersIfNeeded()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper>;

        if r1 == null goto label1;

        virtualinvoke r0.<com.android.server.wm.WallpaperController: void hideWallpapers(com.android.server.wm.WindowState)>(r1);

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper> = null;

     label1:
        return;
    }

    void hideWallpapers(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, $r2, $r9, r10, r11;
        java.util.ArrayList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.WallpaperWindowToken $r6;
        com.android.server.wm.DisplayContent $r7;
        com.android.server.wm.AppTransition $r8;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r10 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r10 == null goto label2;

        if r10 != r1 goto label1;

        $r9 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        if $r9 == null goto label2;

     label1:
        return;

     label2:
        r11 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r11 == null goto label3;

        $r7 = virtualinvoke r11.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8 = $r7.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z0 = virtualinvoke $r8.<com.android.server.wm.AppTransition: boolean isRunning()>();

        if $z0 == 0 goto label3;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper> = r1;

        return;

     label3:
        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper>;

        if $r2 != r1 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        $r3 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label6:
        if i1 < 0 goto label7;

        $r4 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WallpaperWindowToken) $r5;

        virtualinvoke $r6.<com.android.server.wm.WallpaperWindowToken: void hideWallpaperToken(boolean,java.lang.String)>(z1, "hideWallpapers");

        i1 = i1 + -1;

        goto label6;

     label7:
        return;
    }

    boolean isBelowWallpaperTarget(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r2 == null goto label1;

        $i1 = r2.<com.android.server.wm.WindowState: int mLayer>;

        $i0 = r1.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i1 < $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isWallpaperTarget(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r1 != $r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isWallpaperTargetAnimating()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, $r2, $r4;
        boolean $z0, $z1, z2;
        com.android.server.wm.ActivityRecord $r3, $r5;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $r3 = $r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $r5 = $r4.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.ActivityRecord: boolean isWaitingForTransitionStart()>();

        if $z1 != 0 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean isWallpaperVisible()
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WallpaperController;

        $r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        $z0 = specialinvoke r0.<com.android.server.wm.WallpaperController: boolean isWallpaperVisible(com.android.server.wm.WindowState)>($r1);

        return $z0;
    }

    public boolean lambda$getTopVisibleWallpaper$3$WallpaperController(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowStateAnimator r2;
        boolean $z0;
        float $f0;
        byte $b0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        if $z0 == 0 goto label1;

        $f0 = r2.<com.android.server.wm.WindowStateAnimator: float mLastAlpha>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mTmpTopWallpaper> = r1;

        return 1;

     label1:
        return 0;
    }

    public boolean lambda$new$0$WallpaperController(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, $r7, $r9, $r21, $r27;
        com.android.server.wm.RecentsAnimationController r2;
        android.view.WindowManager$LayoutParams $r3, $r17, $r33, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wm.WallpaperController$FindWallpaperTargetResult $r4, $r6, $r8, $r10, $r22, $r23, $r26, $r28, $r29, $r30;
        com.android.server.wm.ActivityRecord $r5, $r18, $r19, $r20, $r24, $r25, $r31;
        boolean $z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, z18, z19, z20, z21;
        com.android.server.wm.AnimationAdapter $r11, $r12;
        com.android.server.wm.WindowManagerService $r13, $r15, $r34;
        com.android.server.policy.WindowManagerPolicy $r14, $r16;
        com.android.server.wm.WindowContainer r32;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2013 goto label03;

        $r26 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $r27 = $r26.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: com.android.server.wm.WindowState topWallpaper>;

        if $r27 == null goto label01;

        $r30 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $z15 = $r30.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: boolean resetTopWallpaper>;

        if $z15 == 0 goto label02;

     label01:
        $r28 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r28.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setTopWallpaper(com.android.server.wm.WindowState)>(r1);

        $r29 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $r29.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: boolean resetTopWallpaper> = 0;

     label02:
        return 0;

     label03:
        $r4 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $r4.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: boolean resetTopWallpaper> = 1;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r5 == null goto label04;

        $r24 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z13 = virtualinvoke $r24.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z13 != 0 goto label04;

        $r25 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z14 = virtualinvoke $r25.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z14 != 0 goto label04;

        return 0;

     label04:
        $z16 = r1.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z16 == 0 goto label05;

        $r21 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r21 != null goto label05;

        $r22 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        $z12 = $r22.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: boolean useTopWallpaperAsTarget>;

        if $z12 != 0 goto label05;

        $r23 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r23.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setUseTopWallpaperAsTarget(boolean)>(1);

     label05:
        $r31 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r31 == null goto label06;

        $r20 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        r32 = virtualinvoke $r20.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getAnimatingContainer()>();

        goto label07;

     label06:
        r32 = null;

     label07:
        if r32 == null goto label08;

        $z10 = virtualinvoke r32.<com.android.server.wm.WindowContainer: boolean isAnimating(int)>(3);

        if $z10 == 0 goto label08;

        $i1 = r32.<com.android.server.wm.WindowContainer: int mTransit>;

        $z11 = staticinvoke <com.android.server.wm.AppTransition: boolean isKeyguardGoingAwayTransit(int)>($i1);

        if $z11 == 0 goto label08;

        $i2 = r32.<com.android.server.wm.WindowContainer: int mTransitFlags>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label08;

        z17 = 1;

        goto label09;

     label08:
        z17 = 0;

     label09:
        z18 = 0;

        $r33 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i4 = $r33.<android.view.WindowManager$LayoutParams: int flags>;

        $i5 = $i4 & 524288;

        if $i5 == 0 goto label12;

        z18 = 0;

        $r13 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z6 = interfaceinvoke $r14.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardLocked()>();

        if $z6 == 0 goto label12;

        z18 = 0;

        $r15 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z7 = interfaceinvoke $r16.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardOccluded()>();

        if $z7 == 0 goto label12;

        $r17 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z8 = specialinvoke r0.<com.android.server.wm.WallpaperController: boolean isFullscreen(android.view.WindowManager$LayoutParams)>($r17);

        if $z8 == 0 goto label11;

        $r18 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r18 == null goto label10;

        $r19 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z9 = virtualinvoke $r19.<com.android.server.wm.ActivityRecord: boolean fillsParent()>();

        if $z9 != 0 goto label10;

        goto label11;

     label10:
        z18 = 0;

        goto label12;

     label11:
        z18 = 1;

     label12:
        if z17 != 0 goto label13;

        if z18 == 0 goto label14;

     label13:
        $r6 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r6.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setUseTopWallpaperAsTarget(boolean)>(1);

     label14:
        $r34 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        r2 = virtualinvoke $r34.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r32 == null goto label15;

        $r11 = virtualinvoke r32.<com.android.server.wm.WindowContainer: com.android.server.wm.AnimationAdapter getAnimation()>();

        if $r11 == null goto label15;

        $r12 = virtualinvoke r32.<com.android.server.wm.WindowContainer: com.android.server.wm.AnimationAdapter getAnimation()>();

        $z5 = interfaceinvoke $r12.<com.android.server.wm.AnimationAdapter: boolean getShowWallpaper()>();

        if $z5 == 0 goto label15;

        z19 = 1;

        goto label16;

     label15:
        z19 = 0;

     label16:
        $r35 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r35.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = $i6 & 1048576;

        if $i7 != 0 goto label18;

        if z19 == 0 goto label17;

        goto label18;

     label17:
        z20 = 0;

        goto label19;

     label18:
        z20 = 1;

     label19:
        if r2 == null goto label20;

        $z4 = virtualinvoke r2.<com.android.server.wm.RecentsAnimationController: boolean isWallpaperVisible(com.android.server.wm.WindowState)>(r1);

        if $z4 == 0 goto label20;

        z21 = 1;

        goto label21;

     label20:
        z21 = 0;

     label21:
        if z21 == 0 goto label22;

        $r10 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r10.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setWallpaperTarget(com.android.server.wm.WindowState)>(r1);

        return 1;

     label22:
        if z20 == 0 goto label25;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z1 == 0 goto label25;

        $r7 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r7 == r1 goto label23;

        $z3 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawFinishedLw()>();

        if $z3 == 0 goto label25;

     label23:
        $r8 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WallpaperController$FindWallpaperTargetResult mFindResults>;

        virtualinvoke $r8.<com.android.server.wm.WallpaperController$FindWallpaperTargetResult: void setWallpaperTarget(com.android.server.wm.WindowState)>(r1);

        $r9 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r1 != $r9 goto label24;

        virtualinvoke r1.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

     label24:
        return 1;

     label25:
        return 0;
    }

    public void lambda$new$1$WallpaperController(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        boolean $z0;
        float $f0, $f1, $f2;
        int $i0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z0 != 0 goto label1;

        $f1 = r1.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        $f0 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperZoomOut>;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f1, $f0);

        if $i0 <= 0 goto label1;

        $f2 = r1.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        r0.<com.android.server.wm.WallpaperController: float mLastWallpaperZoomOut> = $f2;

     label1:
        return;
    }

    boolean processWallpaperDrawPendingTimeout()
    {
        com.android.server.wm.WallpaperController r0;
        int $i0;
        com.android.server.wm.WindowManagerService $r1, $r3;
        com.android.server.wm.RecentsAnimationController $r2, $r4;

        r0 := @this: com.android.server.wm.WallpaperController;

        $i0 = r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState>;

        if $i0 != 1 goto label2;

        r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState> = 2;

        $r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        virtualinvoke $r4.<com.android.server.wm.RecentsAnimationController: void startAnimation()>();

     label1:
        return 1;

     label2:
        return 0;
    }

    void removeWallpaperToken(com.android.server.wm.WallpaperWindowToken)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WallpaperWindowToken r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WallpaperWindowToken;

        $r2 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    android.graphics.Bitmap screenshotWallpaperLocked()
    {
        com.android.server.wm.WallpaperController r0;
        android.graphics.Rect r1;
        boolean $z0;
        android.view.SurfaceControl $r2;
        android.graphics.GraphicBuffer $r3;
        android.graphics.ColorSpace $r4;
        android.graphics.Bitmap $r5;
        com.android.server.wm.WindowState r6;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r7;

        r0 := @this: com.android.server.wm.WallpaperController;

        r6 = specialinvoke r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState getTopVisibleWallpaper()>();

        $z0 = specialinvoke r0.<com.android.server.wm.WallpaperController: boolean canScreenshotWallpaper(com.android.server.wm.WindowState)>(r6);

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = virtualinvoke r6.<com.android.server.wm.WindowState: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r2 = virtualinvoke r6.<com.android.server.wm.WindowState: android.view.SurfaceControl getSurfaceControl()>();

        r7 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayers(android.view.SurfaceControl,android.graphics.Rect,float)>($r2, r1, 1.0F);

        if r7 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Failed to screenshot wallpaper");

        return null;

     label2:
        $r3 = virtualinvoke r7.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        $r4 = virtualinvoke r7.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()>();

        $r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>($r3, $r4);

        return $r5;
    }

    android.os.Bundle sendWindowWallpaperCommand(com.android.server.wm.WindowState, java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1, $r4, $r9;
        java.lang.String r2;
        int i0, i1, i2, $i3, i4;
        android.os.Bundle r3;
        boolean z0;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        com.android.server.wm.WallpaperWindowToken $r8;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

        z0 := @parameter6: boolean;

        $r4 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        if r1 == $r4 goto label1;

        $r9 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mPrevWallpaperTarget>;

        if r1 != $r9 goto label3;

     label1:
        $r5 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i4 = $i3 - 1;

     label2:
        if i4 < 0 goto label3;

        $r6 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r8 = (com.android.server.wm.WallpaperWindowToken) $r7;

        virtualinvoke $r8.<com.android.server.wm.WallpaperWindowToken: void sendWindowWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>(r2, i0, i1, i2, r3, z0);

        i4 = i4 + -1;

        goto label2;

     label3:
        return null;
    }

    void setShouldZoomOutWallpaper(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mShouldScaleWallpaper>;

        if z0 == $z1 goto label1;

        r1.<com.android.server.wm.WindowState: boolean mShouldScaleWallpaper> = z0;

        specialinvoke r0.<com.android.server.wm.WallpaperController: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)>(r1, 0);

     label1:
        return;
    }

    void setWallpaperZoomOut(com.android.server.wm.WindowState, float)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        float f0, $f1;
        int $i0;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        f0 := @parameter1: float;

        $f1 = r1.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f1, f0);

        if $i0 == 0 goto label1;

        r1.<com.android.server.wm.WindowState: float mWallpaperZoomOut> = f0;

        r0.<com.android.server.wm.WallpaperController: boolean mShouldUpdateZoom> = 1;

        specialinvoke r0.<com.android.server.wm.WallpaperController: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)>(r1, 0);

     label1:
        return;
    }

    void setWindowWallpaperDisplayOffset(com.android.server.wm.WindowState, int, int)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        int i0, i1, $i2, $i3;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i2 != i0 goto label1;

        $i3 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i3 == i1 goto label2;

     label1:
        r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX> = i0;

        r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY> = i1;

        specialinvoke r0.<com.android.server.wm.WallpaperController: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)>(r1, 1);

     label2:
        return;
    }

    void setWindowWallpaperPosition(com.android.server.wm.WindowState, float, float, float, float)
    {
        com.android.server.wm.WallpaperController r0;
        com.android.server.wm.WindowState r1;
        float f0, f1, f2, f3, $f4, $f5;
        byte $b0, $b1;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $f4 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b0 = $f4 cmpl f0;

        if $b0 != 0 goto label1;

        $f5 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b1 = $f5 cmpl f1;

        if $b1 == 0 goto label2;

     label1:
        r1.<com.android.server.wm.WindowState: float mWallpaperX> = f0;

        r1.<com.android.server.wm.WindowState: float mWallpaperY> = f1;

        r1.<com.android.server.wm.WindowState: float mWallpaperXStep> = f2;

        r1.<com.android.server.wm.WindowState: float mWallpaperYStep> = f3;

        specialinvoke r0.<com.android.server.wm.WallpaperController: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)>(r1, 1);

     label2:
        return;
    }

    void startWallpaperAnimation(android.view.animation.Animation)
    {
        com.android.server.wm.WallpaperController r0;
        android.view.animation.Animation r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WallpaperWindowToken $r5;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: android.view.animation.Animation;

        $r2 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WallpaperWindowToken) $r4;

        virtualinvoke $r5.<com.android.server.wm.WallpaperWindowToken: void startAnimation(android.view.animation.Animation)>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    boolean updateWallpaperOffset(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WallpaperController r0;
        boolean z0, z1, $z2, $z3, z5;
        int i0, $i5, $i6, $i7, $i10, $i11, $i12, $i14, $i15, $i23, $i25, i26, i27, i28, i29, i30, i32, i33, i34, $i35;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, f15, f16, f17, f18, f19, $f20, $f21, f22, f23, f24;
        long l1, l2, $l16, $l18, $l19;
        byte $b3, $b4, $b8, $b9, $b13, $b17, $b20, $b22, $b24, $b31;
        android.graphics.Rect $r1, $r2, $r3, $r4;
        android.view.WindowManager$LayoutParams $r5;
        com.android.server.wm.WindowState $r6, r19;
        com.android.server.wm.WindowManagerService $r7;
        com.android.server.wm.WindowManagerGlobalLock $r8;
        java.lang.String $r11;
        java.lang.Throwable $r12;
        android.os.RemoteException $r13, $r14, $r15, $r16, $r17, $r18;
        android.view.DisplayInfo r20;
        com.android.server.wm.WindowStateAnimator r21;
        android.view.IWindow r23;
        java.lang.StringBuilder r25;

        r0 := @this: com.android.server.wm.WallpaperController;

        r19 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        r20 = virtualinvoke r19.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        i26 = r20.<android.view.DisplayInfo: int logicalWidth>;

        i27 = r20.<android.view.DisplayInfo: int logicalHeight>;

        $z2 = virtualinvoke r19.<com.android.server.wm.WindowState: boolean isRtl()>();

        if $z2 == 0 goto label01;

        f15 = 1.0F;

        goto label02;

     label01:
        f15 = 0.0F;

     label02:
        f16 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperX>;

        $b3 = f16 cmpl 0.0F;

        if $b3 < 0 goto label03;

        f15 = f16;

        goto label03;

     label03:
        f17 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperXStep>;

        $b4 = f17 cmpl 0.0F;

        if $b4 < 0 goto label04;

        goto label05;

     label04:
        f17 = -1.0F;

     label05:
        $r1 = virtualinvoke r19.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i5 = $r1.<android.graphics.Rect: int right>;

        $r2 = virtualinvoke r19.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i6 = $r2.<android.graphics.Rect: int left>;

        $i7 = $i5 - $i6;

        i28 = $i7 - i26;

        if i28 <= 0 goto label06;

        $f12 = (float) i28;

        $f13 = $f12 * f15;

        $f14 = $f13 + 0.5F;

        $i25 = (int) $f14;

        i29 = neg $i25;

        goto label07;

     label06:
        i29 = 0;

     label07:
        i0 = r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetX>;

        i30 = i29;

        if i0 == -2147483648 goto label08;

        i30 = i29 + i0;

     label08:
        $f3 = r19.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b8 = $f3 cmpl f15;

        if $b8 != 0 goto label09;

        z5 = 0;

        $f11 = r19.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        $b24 = $f11 cmpl f17;

        if $b24 == 0 goto label10;

     label09:
        r19.<com.android.server.wm.WindowState: float mWallpaperX> = f15;

        r19.<com.android.server.wm.WindowState: float mWallpaperXStep> = f17;

        z5 = 1;

     label10:
        f18 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperY>;

        $b31 = f18 cmpl 0.0F;

        if $b31 < 0 goto label11;

        goto label12;

     label11:
        f18 = 0.5F;

     label12:
        f19 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperYStep>;

        $b9 = f19 cmpl 0.0F;

        if $b9 < 0 goto label13;

        goto label14;

     label13:
        f19 = -1.0F;

     label14:
        $r3 = virtualinvoke r19.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i10 = $r3.<android.graphics.Rect: int bottom>;

        $r4 = virtualinvoke r19.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i11 = $r4.<android.graphics.Rect: int top>;

        $i12 = $i10 - $i11;

        i32 = $i12 - i27;

        if i32 <= 0 goto label15;

        $f8 = (float) i32;

        $f9 = $f8 * f18;

        $f10 = $f9 + 0.5F;

        $i23 = (int) $f10;

        i33 = neg $i23;

        goto label16;

     label15:
        i33 = 0;

     label16:
        i34 = r0.<com.android.server.wm.WallpaperController: int mLastWallpaperDisplayOffsetY>;

        if i34 == -2147483648 goto label17;

        i33 = i33 + i34;

        goto label17;

     label17:
        $f4 = r19.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b13 = $f4 cmpl f18;

        if $b13 != 0 goto label18;

        $f7 = r19.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        $b22 = $f7 cmpl f19;

        if $b22 == 0 goto label19;

     label18:
        r19.<com.android.server.wm.WindowState: float mWallpaperY> = f18;

        r19.<com.android.server.wm.WindowState: float mWallpaperYStep> = f19;

        z5 = 1;

     label19:
        $f20 = r19.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        $f21 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperZoomOut>;

        $i35 = staticinvoke <java.lang.Float: int compare(float,float)>($f20, $f21);

        if $i35 == 0 goto label20;

        $f6 = r0.<com.android.server.wm.WallpaperController: float mLastWallpaperZoomOut>;

        r19.<com.android.server.wm.WindowState: float mWallpaperZoomOut> = $f6;

        z5 = 1;

        goto label20;

     label20:
        r21 = r19.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z3 = r19.<com.android.server.wm.WindowState: boolean mShouldScaleWallpaper>;

        if $z3 == 0 goto label21;

        $f5 = r19.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        f22 = specialinvoke r0.<com.android.server.wm.WallpaperController: float zoomOutToScale(float)>($f5);

        goto label22;

     label21:
        f22 = 1.0F;

     label22:
        z1 = virtualinvoke r21.<com.android.server.wm.WindowStateAnimator: boolean setWallpaperOffset(int,int,float)>(i30, i33, f22);

        if z5 == 0 goto label45;

        $r5 = r19.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i14 = $r5.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i15 = $i14 & 4;

        if $i15 == 0 goto label45;

        if z0 == 0 goto label26;

     label23:
        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper> = r19;

     label24:
        goto label26;

     label25:
        $r14 := @caughtexception;

        goto label45;

     label26:
        r23 = r19.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        f0 = r19.<com.android.server.wm.WindowState: float mWallpaperX>;

        f23 = r19.<com.android.server.wm.WindowState: float mWallpaperY>;

     label27:
        f24 = r19.<com.android.server.wm.WindowState: float mWallpaperXStep>;

     label28:
        f1 = r19.<com.android.server.wm.WindowState: float mWallpaperYStep>;

     label29:
        f2 = r19.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

     label30:
        interfaceinvoke r23.<android.view.IWindow: void dispatchWallpaperOffsets(float,float,float,float,float,boolean)>(f0, f23, f24, f1, f2, z0);

     label31:
        if z0 == 0 goto label39;

     label32:
        $r6 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        if $r6 == null goto label39;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l2 = r0.<com.android.server.wm.WallpaperController: long mLastWallpaperTimeoutTime>;

     label33:
        $l16 = l2 + 10000L;

        $b17 = $l16 cmp l1;

        if $b17 >= 0 goto label38;

     label34:
        $r7 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r8.<java.lang.Object: void wait(long)>(150L);

     label35:
        goto label37;

     label36:
        $r12 := @caughtexception;

     label37:
        $l18 = 150L + l1;

        $l19 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b20 = $l18 cmp $l19;

        if $b20 >= 0 goto label38;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for wallpaper to offset: ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r11 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r11);

        r0.<com.android.server.wm.WallpaperController: long mLastWallpaperTimeoutTime> = l1;

     label38:
        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper> = null;

     label39:
        goto label45;

     label40:
        $r15 := @caughtexception;

        goto label45;

     label41:
        $r17 := @caughtexception;

        goto label45;

     label42:
        $r16 := @caughtexception;

        goto label45;

     label43:
        $r13 := @caughtexception;

        goto label45;

     label44:
        $r18 := @caughtexception;

        goto label45;

     label45:
        return z1;

        catch android.os.RemoteException from label23 to label24 with label25;
        catch android.os.RemoteException from label26 to label27 with label44;
        catch android.os.RemoteException from label27 to label28 with label43;
        catch android.os.RemoteException from label28 to label29 with label42;
        catch android.os.RemoteException from label29 to label30 with label41;
        catch android.os.RemoteException from label30 to label31 with label40;
        catch android.os.RemoteException from label32 to label33 with label40;
        catch java.lang.InterruptedException from label34 to label35 with label36;
        catch android.os.RemoteException from label34 to label35 with label40;
        catch android.os.RemoteException from label37 to label38 with label40;
        catch android.os.RemoteException from label38 to label39 with label40;
    }

    void updateWallpaperVisibility()
    {
        com.android.server.wm.WallpaperController r0;
        boolean z0;
        com.android.server.wm.WindowState $r1;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WallpaperWindowToken $r5;

        r0 := @this: com.android.server.wm.WallpaperController;

        $r1 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWallpaperTarget>;

        z0 = specialinvoke r0.<com.android.server.wm.WallpaperController: boolean isWallpaperVisible(com.android.server.wm.WindowState)>($r1);

        $r2 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WallpaperWindowToken) $r4;

        virtualinvoke $r5.<com.android.server.wm.WallpaperWindowToken: void updateWallpaperVisibility(boolean)>(z0);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void wallpaperCommandComplete(android.os.IBinder)
    {
        com.android.server.wm.WallpaperController r0;
        android.os.IBinder r1, $r4;
        com.android.server.wm.WindowState r2;
        android.view.IWindow $r3;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm.WindowManagerGlobalLock $r6;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: android.os.IBinder;

        r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        if r2 == null goto label1;

        $r3 = r2.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r4 = interfaceinvoke $r3.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r4 != r1 goto label1;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper> = null;

        $r5 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

     label1:
        return;
    }

    void wallpaperOffsetsComplete(android.os.IBinder)
    {
        com.android.server.wm.WallpaperController r0;
        android.os.IBinder r1, $r4;
        com.android.server.wm.WindowState r2;
        android.view.IWindow $r3;
        com.android.server.wm.WindowManagerService $r5;
        com.android.server.wm.WindowManagerGlobalLock $r6;

        r0 := @this: com.android.server.wm.WallpaperController;

        r1 := @parameter0: android.os.IBinder;

        r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        if r2 == null goto label1;

        $r3 = r2.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r4 = interfaceinvoke $r3.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r4 != r1 goto label1;

        r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mWaitingOnWallpaper> = null;

        $r5 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

     label1:
        return;
    }

    boolean wallpaperTransitionReady()
    {
        com.android.server.wm.WallpaperController r0;
        java.util.ArrayList $r1, $r4;
        int $i0, $i1, $i2, i3;
        com.android.server.wm.WindowManagerService $r2, $r7, $r9, $r10;
        com.android.server.wm.WindowManagerService$H $r3, $r8, $r11, $r12;
        java.lang.Object $r5;
        com.android.server.wm.WallpaperWindowToken $r6;
        boolean $z2, z4, z5, z6;
        android.os.Message $r13;

        r0 := @this: com.android.server.wm.WallpaperController;

        z4 = 1;

        $r1 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i3 = $i0 - 1;

     label1:
        z5 = 1;

        z6 = 1;

        if i3 < 0 goto label4;

        $r4 = r0.<com.android.server.wm.WallpaperController: java.util.ArrayList mWallpaperTokens>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r6 = (com.android.server.wm.WallpaperWindowToken) $r5;

        $z2 = virtualinvoke $r6.<com.android.server.wm.WallpaperWindowToken: boolean hasVisibleNotDrawnWallpaper()>();

        if $z2 == 0 goto label3;

        $i1 = r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState>;

        if $i1 == 2 goto label2;

        z4 = 0;

     label2:
        z5 = z4;

        z6 = 0;

        $i2 = r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState>;

        if $i2 != 0 goto label4;

        r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState> = 1;

        $r7 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(39, r0);

        $r9 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r12 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r10 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r13 = virtualinvoke $r11.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(39, r0);

        virtualinvoke $r12.<com.android.server.wm.WindowManagerService$H: boolean sendMessageDelayed(android.os.Message,long)>($r13, 500L);

        z5 = z4;

        z6 = 0;

        goto label4;

     label3:
        i3 = i3 + -1;

        goto label1;

     label4:
        if z6 == 0 goto label5;

        r0.<com.android.server.wm.WallpaperController: int mWallpaperDrawState> = 0;

        $r2 = r0.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(39, r0);

     label5:
        return z5;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WallpaperController: long WALLPAPER_TIMEOUT_RECOVERY> = 10000L;

        <com.android.server.wm.WallpaperController: long WALLPAPER_TIMEOUT> = 150L;

        <com.android.server.wm.WallpaperController: int WALLPAPER_DRAW_TIMEOUT> = 2;

        <com.android.server.wm.WallpaperController: long WALLPAPER_DRAW_PENDING_TIMEOUT_DURATION> = 500L;

        <com.android.server.wm.WallpaperController: int WALLPAPER_DRAW_PENDING> = 1;

        <com.android.server.wm.WallpaperController: int WALLPAPER_DRAW_NORMAL> = 0;

        <com.android.server.wm.WallpaperController: java.lang.String TAG> = "WindowManager";

        return;
    }
}
