class com.android.server.wm.WallpaperWindowToken extends com.android.server.wm.WindowToken
{
    private static final java.lang.String TAG;

    void <init>(com.android.server.wm.WindowManagerService, android.os.IBinder, boolean, com.android.server.wm.DisplayContent, boolean)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        com.android.server.wm.WindowManagerService r1;
        android.os.IBinder r2;
        boolean z0, z1;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.WallpaperController $r4;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: android.os.IBinder;

        z0 := @parameter2: boolean;

        r3 := @parameter3: com.android.server.wm.DisplayContent;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean,com.android.server.wm.DisplayContent,boolean)>(r1, r2, 2013, z0, r3, z1);

        $r4 = r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r4.<com.android.server.wm.WallpaperController: void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)>(r0);

        virtualinvoke r0.<com.android.server.wm.WallpaperWindowToken: void setWindowingMode(int)>(1);

        return;
    }

    void adjustWindowParams(com.android.server.wm.WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        android.view.WindowManager$LayoutParams r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        com.android.server.wm.WindowState r2;
        android.view.DisplayInfo r3;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        r2 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int height>;

        if $i0 == -1 goto label2;

        $i1 = r1.<android.view.WindowManager$LayoutParams: int width>;

        if $i1 != -1 goto label1;

        goto label2;

     label1:
        r3 = virtualinvoke r2.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $i2 = r3.<android.view.DisplayInfo: int logicalHeight>;

        $f2 = (float) $i2;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int height>;

        $f1 = (float) $i3;

        $f6 = $f2 / $f1;

        $i4 = r3.<android.view.DisplayInfo: int logicalWidth>;

        $f4 = (float) $i4;

        $i5 = r1.<android.view.WindowManager$LayoutParams: int width>;

        $f3 = (float) $i5;

        $f5 = $f4 / $f3;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>($f6, $f5);

        $i6 = r1.<android.view.WindowManager$LayoutParams: int height>;

        $f7 = (float) $i6;

        $f8 = $f7 * f0;

        $i7 = (int) $f8;

        r1.<android.view.WindowManager$LayoutParams: int height> = $i7;

        $i8 = r1.<android.view.WindowManager$LayoutParams: int width>;

        $f9 = (float) $i8;

        $f10 = $f9 * f0;

        $i9 = (int) $f10;

        r1.<android.view.WindowManager$LayoutParams: int width> = $i9;

        $i10 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i11 = $i10 | 16384;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i11;

        return;

     label2:
        return;
    }

    void forAllWallpaperWindows(java.util.function.Consumer)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        java.util.function.Consumer r1;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        r1 := @parameter0: java.util.function.Consumer;

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>(r0);

        return;
    }

    boolean hasVisibleNotDrawnWallpaper()
    {
        com.android.server.wm.WallpaperWindowToken r0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowState $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        $r1 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z0 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean hasVisibleNotDrawnWallpaper()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    void hideWallpaperToken(boolean, java.lang.String)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        boolean z0;
        java.lang.String r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        virtualinvoke $r5.<com.android.server.wm.WindowState: void hideWallpaperWindow(boolean,java.lang.String)>(z0, r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void sendWindowWallpaperCommand(java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, i4;
        android.os.Bundle r2;
        com.android.server.wm.WindowList $r3, $r4;
        java.lang.Object $r5;
        android.view.IWindow $r6;
        android.os.RemoteException $r7;
        boolean z0;
        com.android.server.wm.WindowState r8;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Bundle;

        z0 := @parameter5: boolean;

        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i3 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i4 = $i3 - 1;

     label1:
        if i4 < 0 goto label6;

        $r4 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r8 = (com.android.server.wm.WindowState) $r5;

     label2:
        $r6 = r8.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r6.<android.view.IWindow: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>(r1, i0, i1, i2, r2, z0);

     label3:
        z0 = 0;

        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        i4 = i4 + -1;

        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    void setExiting()
    {
        com.android.server.wm.WallpaperWindowToken r0;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.WallpaperController $r2;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        specialinvoke r0.<com.android.server.wm.WindowToken: void setExiting()>();

        $r1 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent mDisplayContent>;

        $r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r2.<com.android.server.wm.WallpaperController: void removeWallpaperToken(com.android.server.wm.WallpaperWindowToken)>(r0);

        return;
    }

    void startAnimation(android.view.animation.Animation)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        android.view.animation.Animation r1;
        com.android.server.wm.WindowList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        r1 := @parameter0: android.view.animation.Animation;

        $r2 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        virtualinvoke $r5.<com.android.server.wm.WindowState: void startAnimation(android.view.animation.Animation)>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.WallpaperWindowToken r0;
        java.lang.String $r2, $r3, $r6, $r12;
        java.lang.StringBuilder $r4;
        int $i0;
        android.os.IBinder $r9;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        $r2 = r0.<com.android.server.wm.WallpaperWindowToken: java.lang.String stringName>;

        if $r2 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WallpaperWindowToken{");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r9 = r0.<com.android.server.wm.WallpaperWindowToken: android.os.IBinder token>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.WallpaperWindowToken: java.lang.String stringName> = $r12;

     label1:
        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: java.lang.String stringName>;

        return $r3;
    }

    void updateWallpaperOffset(boolean)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        com.android.server.wm.WallpaperController r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.WindowState $r6;
        boolean $z0, z1, z2, z3;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        z1 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent mDisplayContent>;

        r1 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

        z2 = z1;

     label1:
        if i1 < 0 goto label3;

        z3 = z2;

        $r4 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WindowState) $r5;

        $z0 = virtualinvoke r1.<com.android.server.wm.WallpaperController: boolean updateWallpaperOffset(com.android.server.wm.WindowState,boolean)>($r6, z2);

        if $z0 == 0 goto label2;

        z3 = 0;

     label2:
        i1 = i1 + -1;

        z2 = z3;

        goto label1;

     label3:
        return;
    }

    void updateWallpaperVisibility(boolean)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        boolean z0, $z1;
        com.android.server.wm.WallpaperController r1;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.DisplayContent $r3, $r7;
        com.android.server.wm.WindowList $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WallpaperWindowToken: boolean isVisible()>();

        if $z1 == z0 goto label1;

        $r7 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r7.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label1:
        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent mDisplayContent>;

        r1 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $r4 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r4.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r5 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.WindowState) $r6;

        if z0 == 0 goto label3;

        virtualinvoke r1.<com.android.server.wm.WallpaperController: boolean updateWallpaperOffset(com.android.server.wm.WindowState,boolean)>(r2, 0);

     label3:
        virtualinvoke r2.<com.android.server.wm.WindowState: void dispatchWallpaperVisibility(boolean)>(z0);

        i1 = i1 + -1;

        goto label2;

     label4:
        return;
    }

    void updateWallpaperWindows(boolean)
    {
        com.android.server.wm.WallpaperWindowToken r0;
        boolean z0, $z1, $z3, $z4, $z5;
        com.android.server.wm.WallpaperController r1;
        com.android.server.wm.RecentsAnimationController r2;
        com.android.server.wm.DisplayContent $r3, $r12;
        com.android.server.wm.WindowList $r4, $r14;
        java.lang.Object $r5;
        com.android.server.wm.WindowManagerService $r6;
        com.android.server.wm.ActivityRecord $r7, $r10;
        com.android.server.wm.WindowToken $r8, $r9;
        com.android.server.wm.Task $r11;
        com.android.server.wm.WindowState r13, r15;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WallpaperWindowToken;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WallpaperWindowToken: boolean isVisible()>();

        if $z1 == z0 goto label1;

        $r12 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent mDisplayContent>;

        virtualinvoke $r12.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label1:
        $r3 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.DisplayContent mDisplayContent>;

        r1 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        r13 = virtualinvoke r1.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState getWallpaperTarget()>();

        if z0 == 0 goto label4;

        if r13 == null goto label4;

        $r6 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowManagerService mWmService>;

        r2 = virtualinvoke $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r2 == null goto label2;

        $r11 = virtualinvoke r13.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $z5 = virtualinvoke r2.<com.android.server.wm.RecentsAnimationController: boolean isAnimatingTask(com.android.server.wm.Task)>($r11);

        if $z5 == 0 goto label2;

        virtualinvoke r2.<com.android.server.wm.RecentsAnimationController: void linkFixedRotationTransformIfNeeded(com.android.server.wm.WindowToken)>(r0);

        goto label4;

     label2:
        $r7 = r13.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r7 == null goto label3;

        $r10 = r13.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z4 = $r10.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z4 == 0 goto label4;

     label3:
        $r8 = r13.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z3 = virtualinvoke $r8.<com.android.server.wm.WindowToken: boolean hasFixedRotationTransform()>();

        if $z3 == 0 goto label4;

        $r9 = r13.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        virtualinvoke r0.<com.android.server.wm.WallpaperWindowToken: void linkFixedRotationTransform(com.android.server.wm.WindowToken)>($r9);

     label4:
        $r14 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r14.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label5:
        if i1 < 0 goto label7;

        $r4 = r0.<com.android.server.wm.WallpaperWindowToken: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r15 = (com.android.server.wm.WindowState) $r5;

        if z0 == 0 goto label6;

        virtualinvoke r1.<com.android.server.wm.WallpaperController: boolean updateWallpaperOffset(com.android.server.wm.WindowState,boolean)>(r15, 0);

     label6:
        virtualinvoke r15.<com.android.server.wm.WindowState: void dispatchWallpaperVisibility(boolean)>(z0);

        i1 = i1 + -1;

        goto label5;

     label7:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WallpaperWindowToken: java.lang.String TAG> = "WindowManager";

        return;
    }
}
