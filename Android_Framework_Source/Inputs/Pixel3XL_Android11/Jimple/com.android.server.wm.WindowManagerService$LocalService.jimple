final class com.android.server.wm.WindowManagerService$LocalService extends com.android.server.wm.WindowManagerInternal
{
    final com.android.server.wm.WindowManagerService this$0;

    private void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.wm.WindowManagerInternal: void <init>()>();

        return;
    }

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.WindowManagerService$1)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.WindowManagerService$1 r2;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.WindowManagerService$1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService$LocalService: void <init>(com.android.server.wm.WindowManagerService)>(r1);

        return;
    }

    static void lambda$addNonHighRefreshRatePackage$0(java.lang.String, com.android.server.wm.DisplayContent)
    {
        java.lang.String r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.DisplayPolicy $r2;
        com.android.server.wm.RefreshRatePolicy $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.wm.DisplayContent;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: com.android.server.wm.RefreshRatePolicy getRefreshRatePolicy()>();

        virtualinvoke $r3.<com.android.server.wm.RefreshRatePolicy: void addNonHighRefreshRatePackage(java.lang.String)>(r0);

        return;
    }

    static void lambda$removeNonHighRefreshRatePackage$1(java.lang.String, com.android.server.wm.DisplayContent)
    {
        java.lang.String r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.DisplayPolicy $r2;
        com.android.server.wm.RefreshRatePolicy $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.wm.DisplayContent;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: com.android.server.wm.RefreshRatePolicy getRefreshRatePolicy()>();

        virtualinvoke $r3.<com.android.server.wm.RefreshRatePolicy: void removeNonHighRefreshRatePackage(java.lang.String)>(r0);

        return;
    }

    public void addNonHighRefreshRatePackage(java.lang.String)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer r2;
        com.android.server.wm._$$Lambda$WindowManagerService$LocalService$_nYJRiVOgbON7mI191FIzNAk4Xs r3;
        com.android.server.wm.WindowManagerService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r7 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r2 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r3 = new com.android.server.wm._$$Lambda$WindowManagerService$LocalService$_nYJRiVOgbON7mI191FIzNAk4Xs;

        specialinvoke r3.<com.android.server.wm._$$Lambda$WindowManagerService$LocalService$_nYJRiVOgbON7mI191FIzNAk4Xs: void <init>(java.lang.String)>(r7);

        virtualinvoke r2.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r3);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addWindowToken(android.os.IBinder, int, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.os.IBinder r1;
        int i0, i1;
        com.android.server.wm.WindowManagerService $r2;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int,int)>(r1, i0, i1);

        return;
    }

    public void clearForcedDisplaySize(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)>(i0);

        return;
    }

    public void clearSnapshotCache()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.TaskSnapshotController $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r5.<com.android.server.wm.TaskSnapshotController: void clearSnapshotCache()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void computeWindowsForAccessibility(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.AccessibilityController r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r5 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r5 == null goto label3;

        virtualinvoke r5.<com.android.server.wm.AccessibilityController: void performComputeChangedWindowsNotLocked(int,boolean)>(i0, 1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.view.MagnificationSpec getCompatibleMagnificationSpecForWindow(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.WindowManagerService $r3, $r4, $r7, $r9;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        com.android.server.wm.AccessibilityController $r8, $r10;
        float $f0, $f1, $f2, $f3;
        byte $b0;
        boolean $z0;
        java.lang.Throwable $r11;
        android.os.IBinder r12;
        android.view.MagnificationSpec r13, r14;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r12 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12);

        r2 = (com.android.server.wm.WindowState) $r6;

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label05:
        r13 = null;

     label06:
        $r7 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r8 == null goto label07;

        $r9 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        r13 = virtualinvoke $r10.<com.android.server.wm.AccessibilityController: android.view.MagnificationSpec getMagnificationSpecForWindowLocked(com.android.server.wm.WindowState)>(r2);

     label07:
        if r13 == null goto label09;

     label08:
        $z0 = virtualinvoke r13.<android.view.MagnificationSpec: boolean isNop()>();

        if $z0 == 0 goto label11;

     label09:
        $f0 = r2.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 != 0 goto label11;

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label11:
        if r13 != null goto label14;

     label12:
        r14 = staticinvoke <android.view.MagnificationSpec: android.view.MagnificationSpec obtain()>();

     label13:
        goto label15;

     label14:
        r14 = staticinvoke <android.view.MagnificationSpec: android.view.MagnificationSpec obtain(android.view.MagnificationSpec)>(r13);

     label15:
        $f2 = r14.<android.view.MagnificationSpec: float scale>;

        $f1 = r2.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f3 = $f2 * $f1;

        r14.<android.view.MagnificationSpec: float scale> = $f3;

        exitmonitor r1;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r14;

     label17:
        $r11 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public int getDisplayIdForWindow(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        com.android.server.wm.WindowManagerService $r2, $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        com.android.server.wm.DisplayContent $r6;
        java.lang.Throwable $r7;
        android.os.IBinder r8;
        com.android.server.wm.WindowState r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r8 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.android.server.wm.WindowState) $r5;

     label2:
        if r9 == null goto label5;

     label3:
        $r6 = virtualinvoke r9.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        i0 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public android.os.IBinder getFocusedWindowToken()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        android.view.IWindow $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.WindowState r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r6 = staticinvoke <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState access$2100(com.android.server.wm.WindowManagerService)>($r3);

     label2:
        if r6 == null goto label5;

     label3:
        $r4 = r6.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r7 = interfaceinvoke $r4.<android.view.IWindow: android.os.IBinder asBinder()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r7;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String getImeControlTargetNameForLogging(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.InsetsControlTarget r2;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Throwable $r6;
        com.android.server.wm.DisplayContent r7;
        com.android.server.wm.WindowState r8;
        java.lang.String r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r7 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r7 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label05:
        r2 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget>;

     label06:
        if r2 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label09:
        r8 = interfaceinvoke r2.<com.android.server.wm.InsetsControlTarget: com.android.server.wm.WindowState getWindow()>();

     label10:
        if r8 == null goto label13;

     label11:
        r9 = virtualinvoke r8.<com.android.server.wm.WindowState: java.lang.String getName()>();

     label12:
        goto label14;

     label13:
        r9 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r9;

     label16:
        $r6 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public java.lang.String getImeTargetNameForLogging(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.WindowState $r6, $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        r9 = null;

        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label05:
        $r6 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r6 == null goto label06;

        $r7 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        r9 = virtualinvoke $r7.<com.android.server.wm.WindowState: java.lang.String getName()>();

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r9;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int getInputMethodWindowVisibleHeight(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.DisplayContent $r6;
        com.android.server.wm.DisplayFrames $r7;
        java.lang.Throwable $r8;
        int i0, i1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        $r7 = $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        i1 = virtualinvoke $r7.<com.android.server.wm.DisplayFrames: int getInputMethodWindowVisibleHeight()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i1;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.android.internal.policy.KeyInterceptionInfo getKeyInterceptionInfoFromToken(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerService $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        com.android.internal.policy.KeyInterceptionInfo $r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.Map mKeyInterceptionInfoForToken>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (com.android.internal.policy.KeyInterceptionInfo) $r4;

        return $r5;
    }

    public void getMagnificationRegion(int, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r5;
        com.android.server.wm.AccessibilityController $r4, $r6;
        java.lang.Throwable $r7;
        android.graphics.Region r8;
        java.lang.IllegalStateException r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        r8 := @parameter1: android.graphics.Region;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r6.<com.android.server.wm.AccessibilityController: void getMagnificationRegionLocked(int,android.graphics.Region)>(i0, r8);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        r9 = new java.lang.IllegalStateException;

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks not set!");

        throw r9;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getTopFocusedDisplayId()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.DisplayContent $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        i0 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.Context getTopFocusedDisplayUiContext()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.DisplayContent $r5;
        java.lang.Throwable $r6;
        android.content.Context r7;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        r7 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: android.content.Context getDisplayUiContext()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r7;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getWindowFrame(android.os.IBinder, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.graphics.Rect r1, $r7;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r8;
        android.os.IBinder r9;
        com.android.server.wm.WindowState r10;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r9 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r2 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r10 = (com.android.server.wm.WindowState) $r6;

     label02:
        if r10 == null goto label05;

     label03:
        $r7 = virtualinvoke r10.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

     label04:
        goto label06;

     label05:
        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

     label06:
        exitmonitor r2;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String getWindowName(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;
        com.android.server.wm.WindowState r8;
        java.lang.String r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r7 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.wm.WindowState) $r5;

     label02:
        if r8 == null goto label05;

     label03:
        r9 = virtualinvoke r8.<com.android.server.wm.WindowState: java.lang.String getName()>();

     label04:
        goto label06;

     label05:
        r9 = null;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r9;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int getWindowOwnerUserId(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        com.android.server.wm.WindowManagerService $r2, $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;
        com.android.server.wm.WindowState r8;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r7 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.wm.WindowState) $r5;

     label2:
        if r8 == null goto label5;

     label3:
        i0 = r8.<com.android.server.wm.WindowState: int mShowUserId>;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -10000;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void hideIme(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowState r2, r24;
        com.android.server.wm.WindowManagerService $r3, $r4, $r7;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        com.android.server.wm.RootWindowContainer $r8;
        com.android.server.wm.InsetsControlTarget $r9, $r10, $r11, $r14;
        java.lang.Object[] $r12, $r17;
        com.android.server.wm.ProtoLogGroup $r13, $r18;
        com.android.server.wm.InsetsStateController $r15;
        com.android.server.wm.ImeInsetsSourceProvider $r16;
        java.lang.Throwable $r19;
        android.os.IBinder r20;
        java.lang.String r21, r25;
        com.android.server.wm.DisplayContent r22, r23;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r20 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r20);

        r2 = (com.android.server.wm.WindowState) $r6;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_IME_enabled>;

        if $z0 == 0 goto label02;

        r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_IME>;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r21;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, 95216706, 0, null, $r17);

     label02:
        $r7 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r22 = virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        r23 = r22;

        if r2 == null goto label09;

     label04:
        $r14 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.InsetsControlTarget getImeControlTarget()>();

        r24 = interfaceinvoke $r14.<com.android.server.wm.InsetsControlTarget: com.android.server.wm.WindowState getWindow()>();

     label05:
        if r24 == null goto label07;

     label06:
        r22 = virtualinvoke r24.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

     label07:
        $r15 = virtualinvoke r22.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        $r16 = virtualinvoke $r15.<com.android.server.wm.InsetsStateController: com.android.server.wm.ImeInsetsSourceProvider getImeSourceProvider()>();

        virtualinvoke $r16.<com.android.server.wm.ImeInsetsSourceProvider: void abortShowImePostLayout()>();

     label08:
        r23 = r22;

     label09:
        if r23 == null goto label12;

     label10:
        $r9 = r23.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget>;

        if $r9 == null goto label12;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_IME_enabled>;

        if $z1 == 0 goto label11;

        $r11 = r23.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget>;

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_IME>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r25;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, -547111355, 0, null, $r12);

     label11:
        $r10 = r23.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget>;

        $i1 = staticinvoke <android.view.WindowInsets$Type: int ime()>();

        interfaceinvoke $r10.<com.android.server.wm.InsetsControlTarget: void hideInsets(int,boolean)>($i1, 1);

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label14:
        $r19 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean isHardKeyboardAvailable()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        z0 = $r4.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable>;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isInputMethodClientFocus(int, int, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, i1, i2, $i3, $i4, $i5;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.RootWindowContainer $r4;
        boolean $z0, $z1;
        com.android.server.wm.Session $r5, $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.DisplayContent r8;
        com.android.server.wm.WindowState r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 != -1 goto label01;

        return 0;

     label01:
        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

     label03:
        if r8 == null goto label14;

     label04:
        $i3 = virtualinvoke r8.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i3 != i2 goto label14;

        $z0 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>(i0);

        if $z0 != 0 goto label06;

     label05:
        goto label14;

     label06:
        $z1 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean isInputMethodClientFocus(int,int)>(i0, i1);

        if $z1 == 0 goto label08;

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label08:
        r9 = r8.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

     label09:
        if r9 == null goto label12;

     label10:
        $r5 = r9.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i4 = $r5.<com.android.server.wm.Session: int mUid>;

        if $i4 != i0 goto label12;

        $r6 = r9.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i5 = $r6.<com.android.server.wm.Session: int mPid>;

        if $i5 != i1 goto label12;

        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public boolean isKeyguardLocked()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean isKeyguardLocked()>();

        return $z0;
    }

    public boolean isKeyguardShowingAndNotOccluded()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean isKeyguardShowingAndNotOccluded()>();

        return $z0;
    }

    public boolean isStackVisibleLw(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.TaskDisplayArea $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        $z0 = virtualinvoke $r3.<com.android.server.wm.TaskDisplayArea: boolean isStackVisible(int)>(i0);

        return $z0;
    }

    public boolean isTouchableDisplay(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.DisplayContent r6;
        android.content.res.Configuration r7;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r6 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r6 == null goto label05;

     label03:
        r7 = virtualinvoke r6.<com.android.server.wm.DisplayContent: android.content.res.Configuration getConfiguration()>();

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        if r7 == null goto label09;

     label07:
        $i1 = r7.<android.content.res.Configuration: int touchscreen>;

        if $i1 != 3 goto label09;

     label08:
        z0 = 1;

        goto label10;

     label09:
        z0 = 0;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean isUidAllowedOnDisplay(int, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.RootWindowContainer $r4;
        boolean $z0, z1;
        java.lang.Throwable $r5;
        com.android.server.wm.DisplayContent r6;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 = 1;

        if i0 != 0 goto label01;

        return 1;

     label01:
        if i0 != -1 goto label02;

        return 0;

     label02:
        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r6 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label04:
        if r6 == null goto label07;

     label05:
        $z0 = virtualinvoke r6.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>(i1);

        if $z0 == 0 goto label07;

     label06:
        goto label08;

     label07:
        z1 = 0;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z1;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isUidFocused(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, $i1, $i2, i3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r5;
        com.android.server.wm.RootWindowContainer $r4, $r6;
        com.android.server.wm.WindowContainer $r7;
        com.android.server.wm.WindowState $r8, $r9;
        java.lang.Throwable $r10;
        com.android.server.wm.DisplayContent r11;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i1 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i3 = $i1 - 1;

     label02:
        if i3 < 0 goto label06;

     label03:
        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i3);

        r11 = (com.android.server.wm.DisplayContent) $r7;

        $r8 = r11.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r8 == null goto label05;

        $r9 = r11.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        $i2 = virtualinvoke $r9.<com.android.server.wm.WindowState: int getOwningUid()>();

        if i0 != $i2 goto label05;

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label05:
        i3 = i3 + -1;

        goto label02;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void lockNow()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>(null);

        return;
    }

    public void registerAppTransitionListener(com.android.server.wm.WindowManagerInternal$AppTransitionListener)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.AppTransition $r5;
        java.lang.Throwable $r6;
        com.android.server.wm.WindowManagerInternal$AppTransitionListener r7;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r7 := @parameter0: com.android.server.wm.WindowManagerInternal$AppTransitionListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r5.<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>(r7);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerDragDropControllerCallback(com.android.server.wm.WindowManagerInternal$IDragDropCallback)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerInternal$IDragDropCallback r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.DragDropController $r3;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: com.android.server.wm.WindowManagerInternal$IDragDropCallback;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragDropController mDragDropController>;

        virtualinvoke $r3.<com.android.server.wm.DragDropController: void registerCallback(com.android.server.wm.WindowManagerInternal$IDragDropCallback)>(r1);

        return;
    }

    public void removeNonHighRefreshRatePackage(java.lang.String)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer r2;
        com.android.server.wm._$$Lambda$WindowManagerService$LocalService$rEGrcIRCgYp_4kzr5xA12LKQX0E r3;
        com.android.server.wm.WindowManagerService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r7 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r2 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r3 = new com.android.server.wm._$$Lambda$WindowManagerService$LocalService$rEGrcIRCgYp_4kzr5xA12LKQX0E;

        specialinvoke r3.<com.android.server.wm._$$Lambda$WindowManagerService$LocalService$rEGrcIRCgYp_4kzr5xA12LKQX0E: void <init>(java.lang.String)>(r7);

        virtualinvoke r2.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r3);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeWindowToken(android.os.IBinder, boolean, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        boolean z0, $z1, $z2;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Object[] $r6, $r8;
        com.android.server.wm.ProtoLogGroup $r7, $r9;
        java.lang.Long $r10;
        java.lang.Throwable $r11;
        android.os.IBinder r12;
        com.android.server.wm.DisplayContent r13;
        java.lang.String r14, r16;
        com.android.server.wm.WindowToken r15;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r12 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label02:
        if z0 == 0 goto label16;

     label03:
        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r13 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label04:
        if r13 != null goto label10;

     label05:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label08;

        r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r12);

     label06:
        l1 = (long) i0;

     label07:
        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r14;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r8[1] = $r10;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, 1739298851, 4, "removeWindowToken: Attempted to remove token: %s for non-exiting displayId=%d", $r8);

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        r15 = virtualinvoke r13.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken removeWindowToken(android.os.IBinder)>(r12);

     label11:
        if r15 != null goto label15;

     label12:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label13;

        r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r12);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r16;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, 1518495446, 0, "removeWindowToken: Attempted to remove non-existing token: %s", $r6);

     label13:
        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label15:
        virtualinvoke r15.<com.android.server.wm.WindowToken: void removeAllWindowsIfPossible()>();

     label16:
        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder,int)>(r12, i0);

        exitmonitor r1;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label18:
        $r11 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void reportPasswordChanged(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.KeyguardDisableHandler $r2;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r2 = staticinvoke <com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler access$000(com.android.server.wm.WindowManagerService)>($r1);

        virtualinvoke $r2.<com.android.server.wm.KeyguardDisableHandler: void updateKeyguardEnabled(int)>(i0);

        return;
    }

    public void requestTraversalFromDisplayManager()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setAccessibilityIdToSurfaceMetadata(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r6;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        android.view.SurfaceControl$Transaction $r7, $r9;
        android.view.SurfaceControl $r8;
        java.lang.Throwable $r10;
        android.os.IBinder r11;
        com.android.server.wm.WindowState r12;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r11 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.android.server.wm.WindowState) $r5;

     label2:
        if r12 != null goto label5;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Cannot find window which accessibility connection is added to");

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = staticinvoke <com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction access$2200(com.android.server.wm.WindowManagerService)>($r6);

        $r8 = r12.<com.android.server.wm.WindowState: android.view.SurfaceControl mSurfaceControl>;

        $r9 = virtualinvoke $r7.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setMetadata(android.view.SurfaceControl,int,int)>($r8, 5, i0);

        virtualinvoke $r9.<android.view.SurfaceControl$Transaction: void apply()>();

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setForceShowMagnifiableBounds(int, boolean)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r5;
        com.android.server.wm.AccessibilityController $r4, $r6;
        java.lang.Throwable $r7;
        java.lang.IllegalStateException r8;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r6.<com.android.server.wm.AccessibilityController: void setForceShowMagnifiableBoundsLocked(int,boolean)>(i0, z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        r8 = new java.lang.IllegalStateException;

        specialinvoke r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks not set!");

        throw r8;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setForcedDisplaySize(int, int, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, i1, i2;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)>(i0, i1, i2);

        return;
    }

    public void setInputFilter(android.view.IInputFilter)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.view.IInputFilter r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.input.InputManagerService $r3;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.view.IInputFilter;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r3.<com.android.server.input.InputManagerService: void setInputFilter(android.view.IInputFilter)>(r1);

        return;
    }

    public boolean setMagnificationCallbacks(int, com.android.server.wm.WindowManagerInternal$MagnificationCallbacks)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService r2, $r4, $r5, $r7, $r9, $r11, $r12;
        com.android.server.wm.AccessibilityController r3, $r6, $r8, $r10;
        boolean z0, $z1;
        java.lang.Throwable $r13;
        com.android.server.wm.WindowManagerInternal$MagnificationCallbacks r14;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        r14 := @parameter1: com.android.server.wm.WindowManagerInternal$MagnificationCallbacks;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r6 != null goto label2;

        r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r3 = new com.android.server.wm.AccessibilityController;

        $r12 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        specialinvoke r3.<com.android.server.wm.AccessibilityController: void <init>(com.android.server.wm.WindowManagerService)>($r12);

        r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = r3;

     label2:
        $r7 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        z0 = virtualinvoke $r8.<com.android.server.wm.AccessibilityController: boolean setMagnificationCallbacksLocked(int,com.android.server.wm.WindowManagerInternal$MagnificationCallbacks)>(i0, r14);

        $r9 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $z1 = virtualinvoke $r10.<com.android.server.wm.AccessibilityController: boolean hasCallbacksLocked()>();

        if $z1 != 0 goto label3;

        $r11 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = null;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        $r13 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setMagnificationSpec(int, android.view.MagnificationSpec)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0, $i1, $i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r5;
        com.android.server.wm.AccessibilityController $r4, $r6;
        java.lang.Throwable $r7;
        android.view.MagnificationSpec r8;
        java.lang.IllegalStateException r9;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        r8 := @parameter1: android.view.MagnificationSpec;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r4 == null goto label4;

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r6.<com.android.server.wm.AccessibilityController: void setMagnificationSpecLocked(int,android.view.MagnificationSpec)>(i0, r8);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        if $i1 == $i2 goto label3;

        virtualinvoke r8.<android.view.MagnificationSpec: void recycle()>();

     label3:
        return;

     label4:
        r9 = new java.lang.IllegalStateException;

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks not set!");

        throw r9;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setOnHardKeyboardStatusChangeListener(com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r5 := @parameter0: com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener mHardKeyboardStatusChangeListener> = r5;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setVr2dDisplayId(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r4.<com.android.server.wm.WindowManagerService: int mVr2dDisplayId> = i0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean setWindowsForAccessibilityCallback(int, com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService r2, $r4, $r5, $r7, $r9, $r11, $r12;
        com.android.server.wm.AccessibilityController r3, $r6, $r8, $r10;
        boolean z0, $z1;
        java.lang.Throwable $r13;
        com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback r14;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        r14 := @parameter1: com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r6 != null goto label2;

        r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r3 = new com.android.server.wm.AccessibilityController;

        $r12 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        specialinvoke r3.<com.android.server.wm.AccessibilityController: void <init>(com.android.server.wm.WindowManagerService)>($r12);

        r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = r3;

     label2:
        $r7 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        z0 = virtualinvoke $r8.<com.android.server.wm.AccessibilityController: boolean setWindowsForAccessibilityCallbackLocked(int,com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback)>(i0, r14);

        $r9 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $z1 = virtualinvoke $r10.<com.android.server.wm.AccessibilityController: boolean hasCallbacksLocked()>();

        if $z1 != 0 goto label3;

        $r11 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = null;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        $r13 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean shouldShowIme(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        z0 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: boolean shouldShowIme(int)>(i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean shouldShowSystemDecorOnDisplay(int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.WindowManagerService $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        z0 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: boolean shouldShowSystemDecors(int)>(i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void showGlobalActions()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void showGlobalActions()>();

        return;
    }

    public void showImePostLayout(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.InsetsControlTarget r2;
        com.android.server.wm.WindowManagerService $r3, $r4, $r7;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        com.android.server.wm.InsetsStateController $r8;
        com.android.server.wm.ImeInsetsSourceProvider $r9;
        java.lang.Throwable $r10;
        android.os.IBinder r11;
        com.android.server.wm.WindowState r12, r13;
        com.android.server.wm.DisplayContent r14;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r11 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.android.server.wm.WindowState) $r6;

     label02:
        if r12 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        r2 = virtualinvoke r12.<com.android.server.wm.WindowState: com.android.server.wm.InsetsControlTarget getImeControlTarget()>();

        r13 = interfaceinvoke r2.<com.android.server.wm.InsetsControlTarget: com.android.server.wm.WindowState getWindow()>();

     label06:
        if r13 == null goto label09;

     label07:
        r14 = virtualinvoke r13.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

     label08:
        goto label10;

     label09:
        $r7 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r14 = virtualinvoke $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

     label10:
        $r8 = virtualinvoke r14.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        $r9 = virtualinvoke $r8.<com.android.server.wm.InsetsStateController: com.android.server.wm.ImeInsetsSourceProvider getImeSourceProvider()>();

        virtualinvoke $r9.<com.android.server.wm.ImeInsetsSourceProvider: void scheduleShowImePostLayout(com.android.server.wm.InsetsControlTarget)>(r2);

        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void updateInputMethodTargetWindow(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1, $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        com.android.server.wm.DisplayContent $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7, r8;
        com.android.server.wm.WindowManagerGlobalLock r9;
        com.android.server.wm.WindowState r10;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r7 := @parameter0: android.os.IBinder;

        r8 := @parameter1: android.os.IBinder;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r9 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r10 = (com.android.server.wm.WindowState) $r4;

     label2:
        if r10 == null goto label4;

     label3:
        $r5 = virtualinvoke r10.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void setInputMethodInputTarget(com.android.server.wm.WindowState)>(r10);

     label4:
        exitmonitor r9;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r9;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void updateInputMethodWindowStatus(android.os.IBinder, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.os.IBinder r1;
        boolean z0, z1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.policy.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: void setDismissImeOnBackKeyPressed(boolean)>(z1);

        return;
    }

    public void waitForAllWindowsDrawn(java.lang.Runnable, long, int)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2, $r4, $r5, $r7, $r10, $r13, $r15, $r16;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.WindowSurfacePlacer $r6;
        com.android.server.wm.WindowManagerService$H $r8, $r14;
        java.util.ArrayList $r9;
        boolean $z0, z1;
        java.util.HashMap $r11;
        java.lang.Throwable $r17;
        java.lang.Runnable r18;
        int i1;
        com.android.server.wm.WindowContainer r19;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r18 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        if i1 != -1 goto label01;

        $r16 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r19 = $r16.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        goto label02;

     label01:
        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r19 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

     label02:
        if r19 != null goto label03;

        interfaceinvoke r18.<java.lang.Runnable: void run()>();

        return;

     label03:
        z1 = 0;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        virtualinvoke r19.<com.android.server.wm.WindowContainer: void waitForAllWindowsDrawn()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r6.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

        $r7 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(24, r19);

        $r9 = r19.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        $z0 = virtualinvoke $r9.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label06;

     label05:
        z1 = 1;

        goto label07;

     label06:
        $r10 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r18);

        $r13 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r14.<com.android.server.wm.WindowManagerService$H: void sendNewMessageDelayed(int,java.lang.Object,long)>(24, r19, l0);

        $r15 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r15.<com.android.server.wm.WindowManagerService: void checkDrawnWindowsLocked()>();

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if z1 == 0 goto label09;

        interfaceinvoke r18.<java.lang.Runnable: void run()>();

     label09:
        return;

     label10:
        $r17 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r17;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
}
