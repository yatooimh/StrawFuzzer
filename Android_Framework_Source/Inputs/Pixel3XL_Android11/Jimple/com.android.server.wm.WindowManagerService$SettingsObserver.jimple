final class com.android.server.wm.WindowManagerService$SettingsObserver extends android.database.ContentObserver
{
    private final android.net.Uri mAnimationDurationScaleUri;
    private final android.net.Uri mDisplayInversionEnabledUri;
    private final android.net.Uri mForceDesktopModeOnExternalDisplaysUri;
    private final android.net.Uri mForceResizableUri;
    private final android.net.Uri mFreeformWindowUri;
    private final android.net.Uri mImmersiveModeConfirmationsUri;
    private final android.net.Uri mPointerLocationUri;
    private final android.net.Uri mPolicyControlUri;
    private final android.net.Uri mRenderShadowsInCompositorUri;
    private final android.net.Uri mSizeCompatFreeformUri;
    private final android.net.Uri mTransitionAnimationScaleUri;
    private final android.net.Uri mWindowAnimationScaleUri;
    final com.android.server.wm.WindowManagerService this$0;

    public void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        android.os.Handler $r1;
        android.net.Uri $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        android.content.Context $r14;
        com.android.server.wm.WindowManagerService r27;
        android.content.ContentResolver r28;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        r27 := @parameter0: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0> = r27;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<android.os.Handler: void <init>()>();

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>($r1);

        $r2 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("accessibility_display_inversion_enabled");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mDisplayInversionEnabledUri> = $r2;

        $r3 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("window_animation_scale");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mWindowAnimationScaleUri> = $r3;

        $r4 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("transition_animation_scale");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mTransitionAnimationScaleUri> = $r4;

        $r5 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("animator_duration_scale");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mAnimationDurationScaleUri> = $r5;

        $r6 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("immersive_mode_confirmations");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mImmersiveModeConfirmationsUri> = $r6;

        $r7 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("policy_control");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mPolicyControlUri> = $r7;

        $r8 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("pointer_location");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mPointerLocationUri> = $r8;

        $r9 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("force_desktop_mode_on_external_displays");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mForceDesktopModeOnExternalDisplaysUri> = $r9;

        $r10 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("enable_freeform_support");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mFreeformWindowUri> = $r10;

        $r11 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("force_resizable_activities");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mForceResizableUri> = $r11;

        $r12 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("enable_sizecompat_freeform");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mSizeCompatFreeformUri> = $r12;

        $r13 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("render_shadows_in_compositor");

        r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mRenderShadowsInCompositorUri> = $r13;

        $r14 = r27.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r28 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r15 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mDisplayInversionEnabledUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r15, 0, r0, -1);

        $r16 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mWindowAnimationScaleUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r16, 0, r0, -1);

        $r17 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mTransitionAnimationScaleUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r17, 0, r0, -1);

        $r18 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mAnimationDurationScaleUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r18, 0, r0, -1);

        $r19 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mImmersiveModeConfirmationsUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r19, 0, r0, -1);

        $r20 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mPolicyControlUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r20, 0, r0, -1);

        $r21 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mPointerLocationUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r21, 0, r0, -1);

        $r22 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mForceDesktopModeOnExternalDisplaysUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r22, 0, r0, -1);

        $r23 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mFreeformWindowUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r23, 0, r0, -1);

        $r24 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mForceResizableUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r24, 0, r0, -1);

        $r25 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mSizeCompatFreeformUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r25, 0, r0, -1);

        $r26 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mRenderShadowsInCompositorUri>;

        virtualinvoke r28.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r26, 0, r0, -1);

        return;
    }

    void loadSettings()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateSystemUiSettings()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updatePointerLocation()>();

        return;
    }

    public void onChange(boolean, android.net.Uri)
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        android.net.Uri $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, r13;
        com.android.server.wm.WindowManagerService $r12, $r14, $r17;
        byte b0;
        com.android.server.wm.WindowManagerService$H $r15, $r18;
        android.os.Message r16;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        z0 := @parameter0: boolean;

        r13 := @parameter1: android.net.Uri;

        if r13 != null goto label01;

        return;

     label01:
        $r1 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mImmersiveModeConfirmationsUri>;

        $z1 = virtualinvoke $r1.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z1 != 0 goto label13;

        $r2 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mPolicyControlUri>;

        $z2 = virtualinvoke $r2.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z2 == 0 goto label02;

        goto label13;

     label02:
        $r3 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mPointerLocationUri>;

        $z3 = virtualinvoke $r3.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z3 == 0 goto label03;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updatePointerLocation()>();

        return;

     label03:
        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mForceDesktopModeOnExternalDisplaysUri>;

        $z4 = virtualinvoke $r4.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z4 == 0 goto label04;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateForceDesktopModeOnExternalDisplays()>();

        return;

     label04:
        $r5 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mFreeformWindowUri>;

        $z5 = virtualinvoke $r5.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z5 == 0 goto label05;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateFreeformWindowManagement()>();

        return;

     label05:
        $r6 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mForceResizableUri>;

        $z6 = virtualinvoke $r6.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z6 == 0 goto label06;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateForceResizableTasks()>();

        return;

     label06:
        $r7 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mSizeCompatFreeformUri>;

        $z7 = virtualinvoke $r7.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z7 == 0 goto label07;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateSizeCompatFreeform()>();

        return;

     label07:
        $r8 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mRenderShadowsInCompositorUri>;

        $z8 = virtualinvoke $r8.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z8 == 0 goto label08;

        $r12 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        staticinvoke <com.android.server.wm.WindowManagerService: void access$200(com.android.server.wm.WindowManagerService)>($r12);

        return;

     label08:
        $r9 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mWindowAnimationScaleUri>;

        $z9 = virtualinvoke $r9.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z9 == 0 goto label09;

        b0 = 0;

        goto label11;

     label09:
        $r10 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mTransitionAnimationScaleUri>;

        $z10 = virtualinvoke $r10.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z10 == 0 goto label10;

        b0 = 1;

        goto label11;

     label10:
        $r11 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: android.net.Uri mAnimationDurationScaleUri>;

        $z11 = virtualinvoke $r11.<android.net.Uri: boolean equals(java.lang.Object)>(r13);

        if $z11 == 0 goto label12;

        b0 = 2;

     label11:
        $r14 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r15 = $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        r16 = virtualinvoke $r15.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(51, b0, 0);

        $r17 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r18 = $r17.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r18.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>(r16);

        return;

     label12:
        return;

     label13:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateSystemUiSettings()>();

        return;
    }

    void updateForceDesktopModeOnExternalDisplays()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        android.content.ContentResolver r1;
        com.android.server.wm.WindowManagerService $r2, $r4, $r5;
        android.content.Context $r3;
        int $i0;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        $r2 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z1 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "force_desktop_mode_on_external_displays", 0);

        if $i0 == 0 goto label1;

        z1 = 1;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $z0 = $r4.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays>;

        if $z0 != z1 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void setForceDesktopModeOnExternalDisplays(boolean)>(z1);

        return;
    }

    void updateForceResizableTasks()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        android.content.ContentResolver r1;
        com.android.server.wm.WindowManagerService $r2, $r4;
        android.content.Context $r3;
        int $i0;
        com.android.server.wm.ActivityTaskManagerService $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        $r2 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "force_resizable_activities", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5.<com.android.server.wm.ActivityTaskManagerService: boolean mForceResizableActivities> = z0;

        return;
    }

    void updateFreeformWindowManagement()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        boolean z0, z1, $z2;
        com.android.server.wm.WindowManagerService $r2, $r4, $r7, $r9, $r10, $r14;
        android.content.Context $r3, $r5;
        android.content.pm.PackageManager $r6;
        com.android.server.wm.ActivityTaskManagerService $r8, $r15;
        com.android.server.wm.RootWindowContainer $r11;
        int $i0;
        java.lang.Throwable $r12;
        android.content.ContentResolver r13;
        com.android.server.wm.WindowManagerGlobalLock r16;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        $r2 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r13 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        z0 = virtualinvoke $r6.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.freeform_window_management");

        z1 = 0;

        if z0 != 0 goto label1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r13, "enable_freeform_support", 0);

        if $i0 == 0 goto label2;

     label1:
        z1 = 1;

     label2:
        $r14 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r15 = $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z2 = $r15.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement>;

        if $z2 == z1 goto label8;

        $r7 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r8.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsFreeformWindowManagement> = z1;

        $r9 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        r16 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r10 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: void onSettingsRetrieved()>();

        exitmonitor r16;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        goto label8;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor r16;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void updatePointerLocation()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        com.android.server.wm.WindowManagerService $r1, $r3, $r4, $r5, $r8, $r10;
        android.content.Context $r2;
        int $i0;
        boolean $z0, $z1, z2;
        com.android.server.wm.'-$$Lambda$1z_bkwouqOBIC89HKBNNqb1FoaY' $r6;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r7;
        java.lang.Boolean $r9;
        com.android.server.wm.RootWindowContainer $r11;
        java.lang.Throwable $r12;
        android.content.ContentResolver r13;
        com.android.server.wm.WindowManagerGlobalLock r14;
        com.android.internal.util.function.pooled.PooledConsumer r15;
        java.util.function.BiConsumer r17;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        $r1 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r13 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z2 = 0;

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r13, "pointer_location", 0, -2);

        if $i0 == 0 goto label1;

        z2 = 1;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $z0 = $r3.<com.android.server.wm.WindowManagerService: boolean mPointerLocationEnabled>;

        if $z0 != z2 goto label2;

        return;

     label2:
        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r4.<com.android.server.wm.WindowManagerService: boolean mPointerLocationEnabled> = z2;

        $r5 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        r14 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r14;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r6 = <com.android.server.wm._$$Lambda$1z_bkwouqOBIC89HKBNNqb1FoaY: com.android.server.wm.'-$$Lambda$1z_bkwouqOBIC89HKBNNqb1FoaY' INSTANCE>;

        $r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $z1 = $r8.<com.android.server.wm.WindowManagerService: boolean mPointerLocationEnabled>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r17 = (java.util.function.BiConsumer) $r6;

        r15 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r17, $r7, $r9);

        $r10 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: void forAllDisplayPolicies(java.util.function.Consumer)>(r15);

        interfaceinvoke r15.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        exitmonitor r14;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor r14;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void updateSizeCompatFreeform()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        android.content.ContentResolver r1;
        com.android.server.wm.WindowManagerService $r2, $r4;
        android.content.Context $r3;
        int $i0;
        com.android.server.wm.ActivityTaskManagerService $r5;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        $r2 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "enable_sizecompat_freeform", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r5.<com.android.server.wm.ActivityTaskManagerService: boolean mSizeCompatFreeform> = z0;

        return;
    }

    void updateSystemUiSettings()
    {
        com.android.server.wm.WindowManagerService$SettingsObserver r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r3, $r4, $r5, $r7, $r8;
        android.content.Context $r6, $r9;
        int $i0;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.wm.WindowManagerService$SettingsObserver;

        $r3 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $i0 = $r4.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        $r5 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.server.wm.ImmersiveModeConfirmation: boolean loadSetting(int,android.content.Context)>($i0, $r6);

        if $z0 != 0 goto label04;

        $r8 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $z1 = staticinvoke <com.android.server.wm.PolicyControl: boolean reloadFromSetting(android.content.Context)>($r9);

        if $z1 == 0 goto label03;

     label02:
        goto label04;

     label03:
        z2 = 0;

        goto label05;

     label04:
        z2 = 1;

     label05:
        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if z2 == 0 goto label07;

        $r7 = r0.<com.android.server.wm.WindowManagerService$SettingsObserver: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService: void updateRotation(boolean,boolean)>(0, 0);

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
}
